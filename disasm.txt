
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 78 f8 00 00       	call   c000f898 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 70 02 00       	call   c00270f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 54 7c 02 c0       	mov    ebx,0xc0027c54
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 7c 02 c0    	cmp    ebx,0xc0027c60
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 bf 02 c0       	mov    eax,0xc002bf98
c0000049:	3d 98 bf 02 c0       	cmp    eax,0xc002bf98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 bf 02 c0       	push   0xc002bf98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 bf 02 c0       	mov    eax,0xc002bf98
c0000075:	2d 98 bf 02 c0       	sub    eax,0xc002bf98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 bf 02 c0       	push   0xc002bf98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c5c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 7c 02 c0       	mov    ebx,0xc0027c68
c00000bb:	81 eb 64 7c 02 c0    	sub    ebx,0xc0027c64
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 7c 02 c0       	mov    esi,0xc0027c64
c00000ca:	a1 cc c5 02 c0       	mov    eax,ds:0xc002c5cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc c5 02 c0       	mov    ds:0xc002c5cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc c5 02 c0       	mov    eax,ds:0xc002c5cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 bf 02 c0       	push   0xc002bf98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c5c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 c5 02 c0       	push   0xc002c5d0
c000012c:	68 98 bf 02 c0       	push   0xc002bf98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 4c c6 01 00       	call   c001c99c <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 a3 22 01 00       	call   c001260b <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 2a c6 01 00       	call   c001c99c <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 78 ca 01 00       	call   c001ce09 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 26 d0 01 00       	call   c001d3c0 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 10 ca 02 c0 	lgdtd  ds:0xc002ca10
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 35 3f 01 00       	call   c00144c3 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d e8 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5e8
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 e8 c5 02 c0       	mov    ds:0xc002c5e8,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 e8 c5 02 c0       	mov    eax,ds:0xc002c5e8
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 e8 c5 02 c0    	mov    DWORD PTR ds:0xc002c5e8,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 80 7c 02 c0 02 	test   BYTE PTR [edx-0x3ffd8380],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 80 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd8380],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 80 7c 02 c0 08 	test   BYTE PTR [edx-0x3ffd8380],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 80 7c 02 c0 04 	test   BYTE PTR [edi-0x3ffd8380],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 80 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd8380],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 00 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c600
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 00 c6 02 c0    	mov    DWORD PTR ds:0xc002c600,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 04 c6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd39fc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 04 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39fc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 00 c6 02 c0    	mov    DWORD PTR ds:0xc002c600,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 2c c6 02 c0    	cmp    DWORD PTR ds:0xc002c62c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 3c c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c63c
c0000c10:	c7 42 0c 34 c6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c634
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 3c c6 02 c0    	mov    DWORD PTR ds:0xc002c63c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 2c c6 02 c0    	mov    DWORD PTR ds:0xc002c62c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 00 c6 02 c0 02 	test   BYTE PTR ds:0xc002c600,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 00 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c600
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 04 c6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd39fc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 04 c6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd39fc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 34 c6 02 c0 	lea    edx,[eax*8-0x3ffd39cc]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 40 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c640
c0000f92:	81 fb 34 c6 02 c0    	cmp    ebx,0xc002c634
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 34 c6 02 c0       	cmp    eax,0xc002c634
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 30 c6 02 c0    	cmp    DWORD PTR ds:0xc002c630,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 3c c6 02 c0       	mov    ds:0xc002c63c,eax
c0000fce:	a3 40 c6 02 c0       	mov    ds:0xc002c640,eax
c0000fd3:	a3 30 c6 02 c0       	mov    ds:0xc002c630,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 34 c6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c634
c0000fe1:	c7 40 0c 34 c6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c634
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 40 c6 02 c0       	mov    ds:0xc002c640,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 34 c6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c634
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 f8 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3a08]
c0001032:	8b 14 95 00 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a00]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 00 c6 02 c0 	lea    ecx,[edx*4-0x3ffd3a00]
c000104d:	8b 14 95 00 c6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a00]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 34 c9 02 c0 	or     DWORD PTR [edi*4-0x3ffd36cc],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 34 c6 02 c0 	lea    eax,[eax*8-0x3ffd39cc]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 3c c6 02 c0    	mov    DWORD PTR ds:0xc002c63c,ecx
c0001107:	89 0d 40 c6 02 c0    	mov    DWORD PTR ds:0xc002c640,ecx
c000110d:	c7 41 08 34 c6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c634
c0001114:	c7 41 0c 34 c6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c634
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 2c c6 02 c0 	lea    edx,[ecx*8-0x3ffd39d4]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 34 c9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd36cc]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 34 c9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd36cc]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 2c c6 02 c0 	lea    edx,[eax*4-0x3ffd39d4]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 34 c9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd36cc],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 3c c6 02 c0    	mov    DWORD PTR ds:0xc002c63c,edi
c00011da:	89 3d 40 c6 02 c0    	mov    DWORD PTR ds:0xc002c640,edi
c00011e0:	c7 47 08 34 c6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c634
c00011e7:	c7 47 0c 34 c6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c634
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 30 c6 02 c0    	mov    DWORD PTR ds:0xc002c630,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 2c c6 02 c0       	mov    eax,ds:0xc002c62c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 2c c6 02 c0    	mov    DWORD PTR ds:0xc002c62c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 00 c6 02 c0       	mov    edx,0xc002c600
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 00 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c600,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 54 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c954
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 54 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c954,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 54 c9 02 c0    	mov    DWORD PTR ds:0xc002c954,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 2c c6 02 c0    	cmp    DWORD PTR ds:0xc002c62c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 2c c6 02 c0    	mov    DWORD PTR ds:0xc002c62c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 00 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c600,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 5c c9 02 c0    	push   DWORD PTR ds:0xc002c95c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 00 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c600,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 5c c9 02 c0       	mov    eax,ds:0xc002c95c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 2c c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c62c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 2c c6 02 c0       	mov    eax,ds:0xc002c62c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 04 c6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd39fc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 34 c6 02 c0       	mov    eax,0xc002c634
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 2c c9 02 c0       	cmp    eax,0xc002c92c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 68 c9 02 c0       	mov    eax,ds:0xc002c968
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 50 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c950
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 64 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c964
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 74 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c974
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 84 7d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd827c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 00 c6 02 c0       	mov    eax,ds:0xc002c600
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 00 c6 02 c0       	mov    ds:0xc002c600,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 44 c9 02 c0    	mov    DWORD PTR ds:0xc002c944,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 48 c9 02 c0    	mov    DWORD PTR ds:0xc002c948,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 4c c9 02 c0    	mov    DWORD PTR ds:0xc002c94c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 54 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c954,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 c0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f40]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 dc e3 01 00       	jmp    c001fdb8 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 c0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f40]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 0d e4 01 00       	jmp    c001fdff <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 c0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f40]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 35 e4 01 00       	jmp    c001fe46 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 68 37 02 00       	call   c002545c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 a0 7e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8160]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 a0 7e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8160]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba a0 7d 02 c0       	mov    edx,0xc0027da0
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba c0 7e 02 c0       	mov    edx,0xc0027ec0
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 70 ae 02 c0       	mov    edx,0xc002ae70
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba cc 7e 02 c0       	mov    edx,0xc0027ecc
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba b0 7e 02 c0       	mov    edx,0xc0027eb0
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 a0 c9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3660]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 80 c9 02 c0    	mov    ax,ds:0xc002c980
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 80 c9 02 c0    	mov    ds:0xc002c980,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 65 25 02 00       	call   c002545c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 d2 7e 02 c0       	mov    eax,0xc0027ed2
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 20 7e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd81e0]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 db 7e 02 c0       	mov    eax,0xc0027edb
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 a0 7e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8160]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 30 0f 02 00       	call   c002545c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba b0 7e 02 c0       	mov    edx,0xc0027eb0
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba a0 7d 02 c0       	mov    edx,0xc0027da0
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba b0 7d 02 c0       	mov    edx,0xc0027db0
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 a0 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3660]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 a0 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3660],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 f7 f8 01 00       	call   c002545c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 dd f8 01 00       	call   c002545c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 f7 7d 02 c0       	mov    eax,0xc0027df7
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 f0 7d 02 c0       	mov    eax,0xc0027df0
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 a0 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3660]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be e0 7d 02 c0       	mov    esi,0xc0027de0
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 20 e0 01 00       	call   c002545c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba c0 7e 02 c0       	mov    edx,0xc0027ec0
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba c0 7d 02 c0       	mov    edx,0xc0027dc0
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba d0 7d 02 c0       	mov    edx,0xc0027dd0
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba e2 7e 02 c0       	mov    edx,0xc0027ee2
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba ee 7e 02 c0       	mov    edx,0xc0027eee
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 02 7f 02 c0       	mov    edx,0xc0027f02
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 20 82 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028220
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 20 82 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028220
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 20 80 02 c0       	mov    eax,0xc0028020
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 60 7f 02 c0       	mov    eax,0xc0027f60
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 20 7f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd80e0]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 74 e9 01 00       	call   c0026f2f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 37 e9 01 00       	call   c0026f11 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 0b e9 01 00       	call   c0026f2f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 be df 01 00       	call   c0026634 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 38 ea 01 00       	call   c00270c0 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 85 e8 01 00       	call   c0026f2f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 c7 e7 01 00       	call   c0026f2f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 94 e7 01 00       	call   c0026f11 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 81 e6 01 00       	call   c0026f2f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 49 e6 01 00       	call   c0026f11 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 20 83 02 c0       	mov    eax,0xc0028320
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 55 e4 01 00       	call   c0026f2f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 1a e4 01 00       	call   c0026f11 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 80 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7880]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 2a e1 01 00       	call   c0026cc3 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 a8 da 01 00       	call   c0026660 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 64 e3 01 00       	call   c0026f33 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 52 e4 01 00       	call   c0027057 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 3c da 01 00       	call   c0026660 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 e7 e2 01 00       	call   c0026f2d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 c8 e2 01 00       	call   c0026f31 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 56 e4 01 00       	call   c00270e0 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 08 e0 01 00       	call   c0026cc3 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 86 d9 01 00       	call   c0026660 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 42 e2 01 00       	call   c0026f33 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 30 e3 01 00       	call   c0027057 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 1a d9 01 00       	call   c0026660 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 c5 e1 01 00       	call   c0026f2d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 a5 e1 01 00       	call   c0026f31 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 32 e3 01 00       	call   c00270e0 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 e0 e0 01 00       	call   c0026f2f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 9e e0 01 00       	call   c0026f11 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 86 e0 01 00       	call   c0026f2f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 f8 dd 01 00       	call   c0026cc3 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 fa d0 01 00       	call   c0025fe3 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 5d d7 01 00       	call   c0026660 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 af dd 01 00       	call   c0026cc3 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 b5 d0 01 00       	call   c0025fe3 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 84 dd 01 00       	call   c0026cc3 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 d4 df 01 00       	call   c0026f2d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 b1 d6 01 00       	call   c0026634 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 2b e1 01 00       	call   c00270c0 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 5a df 01 00       	call   c0026f11 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 55 d6 01 00       	call   c0026634 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 d3 dc 01 00       	call   c0026cc3 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 56 d6 01 00       	call   c0026660 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 a8 dc 01 00       	call   c0026cc3 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 0f d9 01 00       	call   c0026944 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 8e cf 01 00       	call   c0025fe3 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 ee c8 01 00       	call   c0025978 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 c5 df 01 00       	call   c0027057 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 ae d5 01 00       	call   c0026660 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 95 df 01 00       	call   c0027057 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 07 cf 01 00       	call   c0025fe3 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 40 de 01 00       	call   c0026f33 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 28 d8 01 00       	call   c0026944 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 ae ce 01 00       	call   c0025fe3 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 94 df 01 00       	call   c00270e0 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 6e db 01 00       	call   c0026cc3 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 c5 d4 01 00       	call   c0026634 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 a4 dd 01 00       	call   c0026f2f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 3d ce 01 00       	call   c0025fe3 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 69 d4 01 00       	call   c0026634 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 03 df 01 00       	call   c00270e0 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 bc da 01 00       	call   c0026cc3 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 39 d4 01 00       	call   c0026660 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 8c da 01 00       	call   c0026cc3 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 92 cd 01 00       	call   c0025fe3 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 62 da 01 00       	call   c0026cc3 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 b4 dc 01 00       	call   c0026f2f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 8b d3 01 00       	call   c0026634 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 05 de 01 00       	call   c00270c0 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 34 dc 01 00       	call   c0026f11 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 2e d3 01 00       	call   c0026634 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 ac d9 01 00       	call   c0026cc3 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 2f d3 01 00       	call   c0026660 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 81 d9 01 00       	call   c0026cc3 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 e8 d5 01 00       	call   c0026944 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 67 cc 01 00       	call   c0025fe3 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 b7 c5 01 00       	call   c0025978 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 8e dc 01 00       	call   c0027057 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 77 d2 01 00       	call   c0026660 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 5e dc 01 00       	call   c0027057 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 d0 cb 01 00       	call   c0025fe3 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 09 db 01 00       	call   c0026f33 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 f0 d4 01 00       	call   c0026944 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 6f cb 01 00       	call   c0025fe3 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 55 dc 01 00       	call   c00270e0 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 2f d8 01 00       	call   c0026cc3 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 86 d1 01 00       	call   c0026634 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 65 da 01 00       	call   c0026f2f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 fe ca 01 00       	call   c0025fe3 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 2a d1 01 00       	call   c0026634 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 9f d7 01 00       	call   c0026cc3 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 a5 ca 01 00       	call   c0025fe3 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 e0 87 02 c0       	mov    eax,0xc00287e0
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 f4 87 02 c0       	mov    eax,0xc00287f4
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 1a d6 01 00       	call   c0026cc3 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 98 cf 01 00       	call   c0026660 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 2a c2 01 00       	call   c0025978 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 01 d9 01 00       	call   c0027057 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 ea ce 01 00       	call   c0026660 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 cd d8 01 00       	call   c0027057 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 3f c8 01 00       	call   c0025fe3 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 9f d8 01 00       	call   c0027057 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 8e ce 01 00       	call   c0026660 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 f7 c7 01 00       	call   c0025fe3 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 18 c1 01 00       	call   c0025978 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 ef d7 01 00       	call   c0027057 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 d8 cd 01 00       	call   c0026660 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 bb d7 01 00       	call   c0027057 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 2d c7 01 00       	call   c0025fe3 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 8d d7 01 00       	call   c0027057 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 7c cd 01 00       	call   c0026660 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 e5 c6 01 00       	call   c0025fe3 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 c3 c6 01 00       	call   c0025fe3 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 9f bf 01 00       	call   c0025978 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 76 d6 01 00       	call   c0027057 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 5f cc 01 00       	call   c0026660 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 42 d6 01 00       	call   c0027057 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 b4 c5 01 00       	call   c0025fe3 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 14 d6 01 00       	call   c0027057 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 fd cb 01 00       	call   c0026660 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 66 c5 01 00       	call   c0025fe3 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 c6 d5 01 00       	call   c0027057 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 af cb 01 00       	call   c0026660 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 18 c5 01 00       	call   c0025fe3 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 2d be 01 00       	call   c0025978 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 04 d5 01 00       	call   c0027057 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 ed ca 01 00       	call   c0026660 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 d4 d4 01 00       	call   c0027057 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 46 c4 01 00       	call   c0025fe3 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 a6 d4 01 00       	call   c0027057 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 8f ca 01 00       	call   c0026660 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 f8 c3 01 00       	call   c0025fe3 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 58 d4 01 00       	call   c0027057 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 41 ca 01 00       	call   c0026660 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 aa c3 01 00       	call   c0025fe3 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 7e c3 01 00       	call   c0025fe3 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 db c9 01 00       	call   c0026660 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 97 d2 01 00       	call   c0026f33 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 26 c3 01 00       	call   c0025fe3 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 83 c9 01 00       	call   c0026660 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 3f d2 01 00       	call   c0026f33 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 b9 bb 01 00       	call   c0025978 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 90 d2 01 00       	call   c0027057 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 79 c8 01 00       	call   c0026660 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 5c d2 01 00       	call   c0027057 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 ce c1 01 00       	call   c0025fe3 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 2e d2 01 00       	call   c0027057 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 17 c8 01 00       	call   c0026660 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 80 c1 01 00       	call   c0025fe3 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 e0 d1 01 00       	call   c0027057 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 c9 c7 01 00       	call   c0026660 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 32 c1 01 00       	call   c0025fe3 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 92 d1 01 00       	call   c0027057 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 7b c7 01 00       	call   c0026660 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 e4 c0 01 00       	call   c0025fe3 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 44 d1 01 00       	call   c0027057 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 2d c7 01 00       	call   c0026660 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 96 c0 01 00       	call   c0025fe3 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 98 b9 01 00       	call   c0025978 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 6f d0 01 00       	call   c0027057 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 58 c6 01 00       	call   c0026660 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 3f d0 01 00       	call   c0027057 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 b1 bf 01 00       	call   c0025fe3 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 11 d0 01 00       	call   c0027057 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 fa c5 01 00       	call   c0026660 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 63 bf 01 00       	call   c0025fe3 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 c3 cf 01 00       	call   c0027057 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 ac c5 01 00       	call   c0026660 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 15 bf 01 00       	call   c0025fe3 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 75 cf 01 00       	call   c0027057 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 5e c5 01 00       	call   c0026660 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 c7 be 01 00       	call   c0025fe3 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 27 cf 01 00       	call   c0027057 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 10 c5 01 00       	call   c0026660 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 79 be 01 00       	call   c0025fe3 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 4d be 01 00       	call   c0025fe3 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 aa c4 01 00       	call   c0026660 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 66 cd 01 00       	call   c0026f33 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 f5 bd 01 00       	call   c0025fe3 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 52 c4 01 00       	call   c0026660 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 0e cd 01 00       	call   c0026f33 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 9c bd 01 00       	call   c0025fe3 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 f9 c3 01 00       	call   c0026660 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 b5 cc 01 00       	call   c0026f33 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 43 bd 01 00       	call   c0025fe3 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 a0 c3 01 00       	call   c0026660 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 5c cc 01 00       	call   c0026f33 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 ba b5 01 00       	call   c0025978 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 91 cc 01 00       	call   c0027057 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 7a c2 01 00       	call   c0026660 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 5d cc 01 00       	call   c0027057 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 cf bb 01 00       	call   c0025fe3 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 2f cc 01 00       	call   c0027057 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 18 c2 01 00       	call   c0026660 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 81 bb 01 00       	call   c0025fe3 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 e1 cb 01 00       	call   c0027057 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 ca c1 01 00       	call   c0026660 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 33 bb 01 00       	call   c0025fe3 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 93 cb 01 00       	call   c0027057 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 7c c1 01 00       	call   c0026660 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 e5 ba 01 00       	call   c0025fe3 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 45 cb 01 00       	call   c0027057 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 2e c1 01 00       	call   c0026660 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 97 ba 01 00       	call   c0025fe3 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 f7 ca 01 00       	call   c0027057 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 e0 c0 01 00       	call   c0026660 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 46 ba 01 00       	call   c0025fe3 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 a6 ca 01 00       	call   c0027057 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 8f c0 01 00       	call   c0026660 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 f8 b9 01 00       	call   c0025fe3 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 f2 b2 01 00       	call   c0025978 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 c9 c9 01 00       	call   c0027057 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 b2 bf 01 00       	call   c0026660 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 92 c9 01 00       	call   c0027057 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 04 b9 01 00       	call   c0025fe3 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 64 c9 01 00       	call   c0027057 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 4d bf 01 00       	call   c0026660 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 b6 b8 01 00       	call   c0025fe3 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 16 c9 01 00       	call   c0027057 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 ff be 01 00       	call   c0026660 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 68 b8 01 00       	call   c0025fe3 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 c8 c8 01 00       	call   c0027057 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 b1 be 01 00       	call   c0026660 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 1a b8 01 00       	call   c0025fe3 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 7a c8 01 00       	call   c0027057 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 63 be 01 00       	call   c0026660 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 cc b7 01 00       	call   c0025fe3 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 2c c8 01 00       	call   c0027057 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 15 be 01 00       	call   c0026660 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 7b b7 01 00       	call   c0025fe3 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 db c7 01 00       	call   c0027057 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 c4 bd 01 00       	call   c0026660 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 33 b7 01 00       	call   c0025fe3 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 0c b7 01 00       	call   c0025fe3 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 6a bd 01 00       	call   c0026660 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 26 c6 01 00       	call   c0026f33 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 b5 b6 01 00       	call   c0025fe3 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 13 bd 01 00       	call   c0026660 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 cf c5 01 00       	call   c0026f33 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 5d b6 01 00       	call   c0025fe3 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 bb bc 01 00       	call   c0026660 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 77 c5 01 00       	call   c0026f33 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 05 b6 01 00       	call   c0025fe3 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 63 bc 01 00       	call   c0026660 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 1f c5 01 00       	call   c0026f33 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 ad b5 01 00       	call   c0025fe3 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 0b bc 01 00       	call   c0026660 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 c7 c4 01 00       	call   c0026f33 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 5b b5 01 00       	call   c0025fe3 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 b9 bb 01 00       	call   c0026660 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 75 c4 01 00       	call   c0026f33 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 89 ad 01 00       	call   c0025978 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 60 c4 01 00       	call   c0027057 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 49 ba 01 00       	call   c0026660 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 30 c4 01 00       	call   c0027057 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 a2 b3 01 00       	call   c0025fe3 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 24 88 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd77dc]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 d6 c3 01 00       	call   c0027057 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 bf b9 01 00       	call   c0026660 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 2a b3 01 00       	call   c0025fe3 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 77 c3 01 00       	call   c0027057 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 60 b9 01 00       	call   c0026660 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 cb b2 01 00       	call   c0025fe3 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 18 c3 01 00       	call   c0027057 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 01 b9 01 00       	call   c0026660 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 6c b2 01 00       	call   c0025fe3 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 b9 c2 01 00       	call   c0027057 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 a2 b8 01 00       	call   c0026660 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 0d b2 01 00       	call   c0025fe3 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 5a c2 01 00       	call   c0027057 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 43 b8 01 00       	call   c0026660 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 ae b1 01 00       	call   c0025fe3 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 fb c1 01 00       	call   c0027057 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 e4 b7 01 00       	call   c0026660 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 4f b1 01 00       	call   c0025fe3 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 9c c1 01 00       	call   c0027057 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 85 b7 01 00       	call   c0026660 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 f0 b0 01 00       	call   c0025fe3 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 3d c1 01 00       	call   c0027057 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 26 b7 01 00       	call   c0026660 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 91 b0 01 00       	call   c0025fe3 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 9b a9 01 00       	call   c0025978 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 72 c0 01 00       	call   c0027057 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 5b b6 01 00       	call   c0026660 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 42 c0 01 00       	call   c0027057 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 b4 af 01 00       	call   c0025fe3 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 40 88 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd77c0]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 e7 bf 01 00       	call   c0027057 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 d0 b5 01 00       	call   c0026660 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 3b af 01 00       	call   c0025fe3 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 87 bf 01 00       	call   c0027057 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 70 b5 01 00       	call   c0026660 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 db ae 01 00       	call   c0025fe3 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 27 bf 01 00       	call   c0027057 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 10 b5 01 00       	call   c0026660 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 7b ae 01 00       	call   c0025fe3 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 c7 be 01 00       	call   c0027057 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 b0 b4 01 00       	call   c0026660 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 1b ae 01 00       	call   c0025fe3 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 67 be 01 00       	call   c0027057 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 50 b4 01 00       	call   c0026660 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 bb ad 01 00       	call   c0025fe3 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 07 be 01 00       	call   c0027057 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 f0 b3 01 00       	call   c0026660 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 5b ad 01 00       	call   c0025fe3 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 a7 bd 01 00       	call   c0027057 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 90 b3 01 00       	call   c0026660 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 fb ac 01 00       	call   c0025fe3 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 47 bd 01 00       	call   c0027057 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 30 b3 01 00       	call   c0026660 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 9b ac 01 00       	call   c0025fe3 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 5c 88 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd77a4]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 40 ac 01 00       	call   c0025fe3 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 9d b2 01 00       	call   c0026660 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 59 bb 01 00       	call   c0026f33 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 e3 ab 01 00       	call   c0025fe3 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 40 b2 01 00       	call   c0026660 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 fc ba 01 00       	call   c0026f33 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 86 ab 01 00       	call   c0025fe3 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 e3 b1 01 00       	call   c0026660 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 9f ba 01 00       	call   c0026f33 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 29 ab 01 00       	call   c0025fe3 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 86 b1 01 00       	call   c0026660 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 42 ba 01 00       	call   c0026f33 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 cc aa 01 00       	call   c0025fe3 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 29 b1 01 00       	call   c0026660 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 e5 b9 01 00       	call   c0026f33 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 6f aa 01 00       	call   c0025fe3 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 cc b0 01 00       	call   c0026660 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 88 b9 01 00       	call   c0026f33 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 12 aa 01 00       	call   c0025fe3 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 6f b0 01 00       	call   c0026660 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 2b b9 01 00       	call   c0026f33 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 b5 a9 01 00       	call   c0025fe3 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 12 b0 01 00       	call   c0026660 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 ce b8 01 00       	call   c0026f33 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 ca af 01 00       	call   c0026660 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 3a ba 01 00       	jmp    c00270e0 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 ac b6 01 00       	call   c0026f2f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 6a b6 01 00       	call   c0026f11 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 01 b4 01 00       	call   c0026cc3 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 02 a7 01 00       	call   c0025fe3 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 d1 b3 01 00       	call   c0026cc3 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 38 b0 01 00       	call   c0026944 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 d7 b5 01 00       	call   c0026f11 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 da b5 01 00       	call   c0026f2f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 ad b5 01 00       	call   c0026f2f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 a6 af 01 00       	call   c0026944 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 28 b7 01 00       	call   c00270e0 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 03 b7 01 00       	call   c00270e0 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 dd b2 01 00       	call   c0026cc3 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 34 ac 01 00       	call   c0026634 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 13 b5 01 00       	call   c0026f2f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 ac a5 01 00       	call   c0025fe3 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 d0 ab 01 00       	call   c0026634 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 6a b6 01 00       	call   c00270e0 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 aa ae 01 00       	call   c0026944 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 27 a5 01 00       	call   c0025fe3 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 53 b1 01 00       	call   c0026cc3 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 53 a4 01 00       	call   c0025fe3 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 33 a4 01 00       	call   c0025fe3 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 03 b1 01 00       	call   c0026cc3 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 53 b3 01 00       	call   c0026f2d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 32 aa 01 00       	call   c0026634 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 ac b4 01 00       	call   c00270c0 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 db b2 01 00       	call   c0026f11 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 d9 a9 01 00       	call   c0026634 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 57 b0 01 00       	call   c0026cc3 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 da a9 01 00       	call   c0026660 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 2c b0 01 00       	call   c0026cc3 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 93 ac 01 00       	call   c0026944 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 12 a3 01 00       	call   c0025fe3 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 dc af 01 00       	call   c0026cc3 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 28 b2 01 00       	call   c0026f2f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 1d a9 01 00       	call   c0026660 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 ef a8 01 00       	call   c0026660 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 28 af 01 00       	call   c0026cc3 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 8c ab 01 00       	call   c0026944 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 54 ab 01 00       	call   c0026944 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 d3 a1 01 00       	call   c0025fe3 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 b8 b2 01 00       	call   c00270e0 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 92 ae 01 00       	call   c0026cc3 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 e9 a7 01 00       	call   c0026634 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 c8 b0 01 00       	call   c0026f2f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 60 a1 01 00       	call   c0025fe3 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 84 a7 01 00       	call   c0026634 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 1e b2 01 00       	call   c00270e0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 e7 af 01 00       	call   c0026f2f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 a5 af 01 00       	call   c0026f11 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 3c ad 01 00       	call   c0026cc3 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 3d a0 01 00       	call   c0025fe3 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 0c ad 01 00       	call   c0026cc3 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 73 a9 01 00       	call   c0026944 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 12 af 01 00       	call   c0026f11 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 15 af 01 00       	call   c0026f2f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 e8 ae 01 00       	call   c0026f2f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 e1 a8 01 00       	call   c0026944 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 63 b0 01 00       	call   c00270e0 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 3e b0 01 00       	call   c00270e0 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 18 ac 01 00       	call   c0026cc3 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 6f a5 01 00       	call   c0026634 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 4e ae 01 00       	call   c0026f2f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 e7 9e 01 00       	call   c0025fe3 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 0b a5 01 00       	call   c0026634 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 a5 af 01 00       	call   c00270e0 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 e5 a7 01 00       	call   c0026944 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 62 9e 01 00       	call   c0025fe3 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 8d aa 01 00       	call   c0026cc3 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 8d 9d 01 00       	call   c0025fe3 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 6d 9d 01 00       	call   c0025fe3 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 3d aa 01 00       	call   c0026cc3 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 8d ac 01 00       	call   c0026f2d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 6b a3 01 00       	call   c0026634 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 e5 ad 01 00       	call   c00270c0 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 14 ac 01 00       	call   c0026f11 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 11 a3 01 00       	call   c0026634 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 8f a9 01 00       	call   c0026cc3 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 12 a3 01 00       	call   c0026660 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 64 a9 01 00       	call   c0026cc3 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 cb a5 01 00       	call   c0026944 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 4a 9c 01 00       	call   c0025fe3 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 14 a9 01 00       	call   c0026cc3 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 60 ab 01 00       	call   c0026f2f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 55 a2 01 00       	call   c0026660 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 27 a2 01 00       	call   c0026660 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 5e a8 01 00       	call   c0026cc3 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 c2 a4 01 00       	call   c0026944 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 8f a4 01 00       	call   c0026944 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 0e 9b 01 00       	call   c0025fe3 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 f3 ab 01 00       	call   c00270e0 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 cd a7 01 00       	call   c0026cc3 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 24 a1 01 00       	call   c0026634 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 03 aa 01 00       	call   c0026f2f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 9b 9a 01 00       	call   c0025fe3 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 bf a0 01 00       	call   c0026634 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 59 ab 01 00       	call   c00270e0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 22 a9 01 00       	call   c0026f2f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 e0 a8 01 00       	call   c0026f11 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 77 a6 01 00       	call   c0026cc3 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 78 99 01 00       	call   c0025fe3 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 47 a6 01 00       	call   c0026cc3 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 ae a2 01 00       	call   c0026944 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 4d a8 01 00       	call   c0026f11 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 50 a8 01 00       	call   c0026f2f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 23 a8 01 00       	call   c0026f2f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 1c a2 01 00       	call   c0026944 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 9e a9 01 00       	call   c00270e0 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 79 a9 01 00       	call   c00270e0 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 53 a5 01 00       	call   c0026cc3 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 aa 9e 01 00       	call   c0026634 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 89 a7 01 00       	call   c0026f2f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 22 98 01 00       	call   c0025fe3 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 46 9e 01 00       	call   c0026634 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 e0 a8 01 00       	call   c00270e0 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 20 a1 01 00       	call   c0026944 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 9d 97 01 00       	call   c0025fe3 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 c8 a3 01 00       	call   c0026cc3 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 c8 96 01 00       	call   c0025fe3 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 a8 96 01 00       	call   c0025fe3 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 78 a3 01 00       	call   c0026cc3 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 c8 a5 01 00       	call   c0026f2d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 a6 9c 01 00       	call   c0026634 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 20 a7 01 00       	call   c00270c0 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 4f a5 01 00       	call   c0026f11 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 4c 9c 01 00       	call   c0026634 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 ca a2 01 00       	call   c0026cc3 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 4d 9c 01 00       	call   c0026660 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 9f a2 01 00       	call   c0026cc3 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 06 9f 01 00       	call   c0026944 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 85 95 01 00       	call   c0025fe3 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 4f a2 01 00       	call   c0026cc3 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 9b a4 01 00       	call   c0026f2f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 90 9b 01 00       	call   c0026660 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 62 9b 01 00       	call   c0026660 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 99 a1 01 00       	call   c0026cc3 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 fd 9d 01 00       	call   c0026944 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 ca 9d 01 00       	call   c0026944 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 49 94 01 00       	call   c0025fe3 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 2e a5 01 00       	call   c00270e0 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 08 a1 01 00       	call   c0026cc3 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 5f 9a 01 00       	call   c0026634 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 3e a3 01 00       	call   c0026f2f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 d6 93 01 00       	call   c0025fe3 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 fa 99 01 00       	call   c0026634 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 94 a4 01 00       	call   c00270e0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 5d a2 01 00       	call   c0026f2f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 1b a2 01 00       	call   c0026f11 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 b2 9f 01 00       	call   c0026cc3 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 b3 92 01 00       	call   c0025fe3 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 82 9f 01 00       	call   c0026cc3 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 e9 9b 01 00       	call   c0026944 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 88 a1 01 00       	call   c0026f11 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 8b a1 01 00       	call   c0026f2f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 5e a1 01 00       	call   c0026f2f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 57 9b 01 00       	call   c0026944 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 d9 a2 01 00       	call   c00270e0 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 b4 a2 01 00       	call   c00270e0 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 8e 9e 01 00       	call   c0026cc3 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 e5 97 01 00       	call   c0026634 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 c4 a0 01 00       	call   c0026f2f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 5d 91 01 00       	call   c0025fe3 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 81 97 01 00       	call   c0026634 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 1b a2 01 00       	call   c00270e0 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 5b 9a 01 00       	call   c0026944 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 d8 90 01 00       	call   c0025fe3 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 03 9d 01 00       	call   c0026cc3 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 03 90 01 00       	call   c0025fe3 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 e3 8f 01 00       	call   c0025fe3 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 b3 9c 01 00       	call   c0026cc3 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 03 9f 01 00       	call   c0026f2d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 e1 95 01 00       	call   c0026634 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 5b a0 01 00       	call   c00270c0 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 8a 9e 01 00       	call   c0026f11 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 87 95 01 00       	call   c0026634 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 05 9c 01 00       	call   c0026cc3 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 88 95 01 00       	call   c0026660 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 da 9b 01 00       	call   c0026cc3 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 41 98 01 00       	call   c0026944 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 c0 8e 01 00       	call   c0025fe3 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 8a 9b 01 00       	call   c0026cc3 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 d6 9d 01 00       	call   c0026f2f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 cb 94 01 00       	call   c0026660 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 9d 94 01 00       	call   c0026660 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 d4 9a 01 00       	call   c0026cc3 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 38 97 01 00       	call   c0026944 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 05 97 01 00       	call   c0026944 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 84 8d 01 00       	call   c0025fe3 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 69 9e 01 00       	call   c00270e0 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 43 9a 01 00       	call   c0026cc3 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 9a 93 01 00       	call   c0026634 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 79 9c 01 00       	call   c0026f2f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 11 8d 01 00       	call   c0025fe3 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 35 93 01 00       	call   c0026634 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 cf 9d 01 00       	call   c00270e0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 95 9b 01 00       	call   c0026f2f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 53 9b 01 00       	call   c0026f11 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 ea 98 01 00       	call   c0026cc3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 eb 8b 01 00       	call   c0025fe3 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 ba 98 01 00       	call   c0026cc3 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 21 95 01 00       	call   c0026944 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 c0 9a 01 00       	call   c0026f11 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 c3 9a 01 00       	call   c0026f2f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 96 9a 01 00       	call   c0026f2f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 8f 94 01 00       	call   c0026944 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 11 9c 01 00       	call   c00270e0 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 e8 9b 01 00       	call   c00270e0 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 c2 97 01 00       	call   c0026cc3 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 19 91 01 00       	call   c0026634 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 f8 99 01 00       	call   c0026f2f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 91 8a 01 00       	call   c0025fe3 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 b9 90 01 00       	call   c0026634 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 53 9b 01 00       	call   c00270e0 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 94 93 01 00       	call   c0026944 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 11 8a 01 00       	call   c0025fe3 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 3d 96 01 00       	call   c0026cc3 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 3d 89 01 00       	call   c0025fe3 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 1d 89 01 00       	call   c0025fe3 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 ed 95 01 00       	call   c0026cc3 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 21 98 01 00       	call   c0026f11 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 18 8f 01 00       	call   c0026634 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 92 99 01 00       	call   c00270c0 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 c1 97 01 00       	call   c0026f11 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 bb 8e 01 00       	call   c0026634 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 39 95 01 00       	call   c0026cc3 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 bc 8e 01 00       	call   c0026660 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 0e 95 01 00       	call   c0026cc3 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 75 91 01 00       	call   c0026944 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 f4 87 01 00       	call   c0025fe3 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 be 94 01 00       	call   c0026cc3 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 0a 97 01 00       	call   c0026f2f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 ff 8d 01 00       	call   c0026660 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 d1 8d 01 00       	call   c0026660 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 15 94 01 00       	call   c0026cc3 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 7c 90 01 00       	call   c0026944 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 65 8d 01 00       	call   c0026660 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 21 96 01 00       	call   c0026f33 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 14 90 01 00       	call   c0026944 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 93 86 01 00       	call   c0025fe3 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 78 97 01 00       	call   c00270e0 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 52 93 01 00       	call   c0026cc3 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 a9 8c 01 00       	call   c0026634 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 88 95 01 00       	call   c0026f2f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 20 86 01 00       	call   c0025fe3 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 48 8c 01 00       	call   c0026634 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 e2 96 01 00       	call   c00270e0 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 84 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd777c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 78 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7788]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 9d 93 01 00       	call   c0026f2f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 5b 93 01 00       	call   c0026f11 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 47 93 01 00       	call   c0026f2f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 b9 90 01 00       	call   c0026cc3 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 37 8a 01 00       	call   c0026660 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 89 90 01 00       	call   c0026cc3 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 8f 83 01 00       	call   c0025fe3 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 5e 90 01 00       	call   c0026cc3 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 ae 92 01 00       	call   c0026f2d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 8f 89 01 00       	call   c0026634 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 09 94 01 00       	call   c00270c0 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 38 92 01 00       	call   c0026f11 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 37 89 01 00       	call   c0026634 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 b5 8f 01 00       	call   c0026cc3 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 38 89 01 00       	call   c0026660 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 8a 8f 01 00       	call   c0026cc3 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 f1 8b 01 00       	call   c0026944 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 70 82 01 00       	call   c0025fe3 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 98 8b 01 00       	call   c0026944 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 1e 82 01 00       	call   c0025fe3 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 04 93 01 00       	call   c00270e0 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 de 8e 01 00       	call   c0026cc3 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 35 88 01 00       	call   c0026634 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 14 91 01 00       	call   c0026f2f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 ad 81 01 00       	call   c0025fe3 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 d9 87 01 00       	call   c0026634 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 73 92 01 00       	call   c00270e0 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 28 8e 01 00       	call   c0026cc3 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 a5 87 01 00       	call   c0026660 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 f6 8d 01 00       	call   c0026cc3 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 fc 80 01 00       	call   c0025fe3 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 cc 8d 01 00       	call   c0026cc3 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 20 90 01 00       	call   c0026f31 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 f9 86 01 00       	call   c0026634 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 73 91 01 00       	call   c00270c0 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 a2 8f 01 00       	call   c0026f11 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 a0 86 01 00       	call   c0026634 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 1e 8d 01 00       	call   c0026cc3 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 a1 86 01 00       	call   c0026660 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 f3 8c 01 00       	call   c0026cc3 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 5a 89 01 00       	call   c0026944 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 d9 7f 01 00       	call   c0025fe3 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 f5 88 01 00       	call   c0026944 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 74 7f 01 00       	call   c0025fe3 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 5a 90 01 00       	call   c00270e0 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 34 8c 01 00       	call   c0026cc3 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 8b 85 01 00       	call   c0026634 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 6a 8e 01 00       	call   c0026f2f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 03 7f 01 00       	call   c0025fe3 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 2f 85 01 00       	call   c0026634 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 a0 8b 01 00       	call   c0026cc3 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 a6 7e 01 00       	call   c0025fe3 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 9e 89 02 c0       	mov    eax,0xc002899e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 af 89 02 c0       	mov    eax,0xc00289af
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 cf 5a 00 00       	call   c0013d92 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 e6 89 02 c0       	push   0xc00289e6
c000e2f9:	50                   	push   eax
c000e2fa:	e8 0d 5b 00 00       	call   c0013e0c <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba b0 8b 02 c0       	mov    edx,0xc0028bb0
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c000e46b:	68 ef 89 02 c0       	push   0xc00289ef
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 92 e7 00 00       	call   c001cc0a <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 7b ea 00 00       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 66 d7 01 c0       	push   0xc001d766
c000e496:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c000e49c:	e8 67 ea 00 00       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 08 df 02 c0       	mov    ds:0xc002df08,eax
c000e4a9:	e8 39 f6 00 00       	call   c001dae7 <Vm::initialise8086()>
c000e4ae:	c6 05 0d ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca0d,0x1
c000e4b5:	e8 ce 46 00 00       	call   c0012b88 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 3d b3 00 00       	call   c001980e <Krnl::loadSystemEnv()>
c000e4d1:	e8 dc d0 00 00       	call   c001b5b2 <setupSystemCalls()>
c000e4d6:	e8 bf 51 00 00       	call   c001369a <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 83 58 00 00       	call   c0013d66 <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 fc 89 02 c0       	push   0xc00289fc
c000e4f2:	e8 6b e2 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 71 e4 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 78 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c78
c000e507:	e8 21 43 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 53 ed 00 00       	call   c001d26c <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 21 ca 02 c0 04 	test   BYTE PTR ds:0xc002ca21,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 af 6b 01 00       	call   c0025126 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 1e 9c 00 00       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 f7 9b 00 00       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 d5 9b 00 00       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 b3 9b 00 00       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 20 ca 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ca20,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 c1 9a 00 00       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 9c 9a 00 00       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 19 6a 01 00       	call   c00250e0 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 d6 69 01 00       	call   c00250c0 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 b8 9a 00 00       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 1f 8a 02 c0       	push   0xc0028a1f
c000e743:	e8 e5 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 32 8a 02 c0       	push   0xc0028a32
c000e766:	e8 c2 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 43 8a 02 c0       	push   0xc0028a43
c000e789:	e8 9f 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 54 8a 02 c0       	push   0xc0028a54
c000e7ac:	e8 7c 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 65 8a 02 c0       	push   0xc0028a65
c000e7cf:	e8 59 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 76 8a 02 c0       	push   0xc0028a76
c000e7f2:	e8 36 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 87 8a 02 c0       	push   0xc0028a87
c000e815:	e8 13 40 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 98 8a 02 c0       	push   0xc0028a98
c000e838:	e8 f0 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 a9 8a 02 c0       	push   0xc0028aa9
c000e85b:	e8 cd 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 ba 8a 02 c0       	push   0xc0028aba
c000e87e:	e8 aa 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 cb 8a 02 c0       	push   0xc0028acb
c000e8a1:	e8 87 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 dc 8a 02 c0       	push   0xc0028adc
c000e8c4:	e8 64 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 ed 8a 02 c0       	push   0xc0028aed
c000e8e7:	e8 41 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 fe 8a 02 c0       	push   0xc0028afe
c000e90a:	e8 1e 3f 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 0f 8b 02 c0       	push   0xc0028b0f
c000e92d:	e8 fb 3e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 20 8b 02 c0       	push   0xc0028b20
c000e950:	e8 d8 3e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 31 8b 02 c0       	push   0xc0028b31
c000e973:	e8 b5 3e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 42 8b 02 c0       	push   0xc0028b42
c000e996:	e8 92 3e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 53 8b 02 c0       	push   0xc0028b53
c000e9b5:	e8 73 3e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 1b a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a31b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 62 3e 00 00       	jmp    c001282d <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 64 8b 02 c0       	push   0xc0028b64
c000ea9e:	e8 a4 ae 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 6a 8b 02 c0       	push   0xc0028b6a
c000ead6:	e8 6c ae 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 20 ca 02 c0 04 	test   BYTE PTR ds:0xc002ca20,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 44 b9 02 c0 	sete   BYTE PTR ds:0xc002b944
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 93 8c 00 00       	call   c00177dc <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 c4 50 00 00       	call   c0013c1c <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 00 97 00 00       	call   c0018288 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 85 50 00 00       	call   c0013c1c <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 db 55 00 00       	call   c001418e <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 55 50 00 00       	call   c0013c1c <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 1f e4 00 00       	call   c001d008 <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 70 8b 02 c0       	push   0xc0028b70
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 f6 3b 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 81 8b 02 c0       	push   0xc0028b81
c000ec54:	e8 ee ac 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 8e 8b 02 c0       	push   0xc0028b8e
c000ec69:	e8 d9 ac 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 98 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b98
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 c2 ac 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 d4 8b 02 c0       	push   0xc0028bd4
c000ed1a:	e8 0e 3b 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 12 ca 02 c0       	mov    ds:0xc002ca12,eax
c000ed5b:	66 89 15 10 ca 02 c0 	mov    WORD PTR ds:0xc002ca10,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 66 df 00 00       	call   c001cdd8 <unlockScheduler()>
c000ee72:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 a0 82 01 00       	call   c0027160 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 97 82 01 00       	call   c0027160 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 18 ca 02 c0 ff 07 	mov    WORD PTR ds:0xc002ca18,0x7ff
c000efb7:	a3 1a ca 02 c0       	mov    ds:0xc002ca1a,eax
c000efbc:	0f 01 1d 18 ca 02 c0 	lidtd  ds:0xc002ca18
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 24 27 00 00       	call   c00119cd <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 54 2d 00 00       	call   c0012008 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 9c 1e 00 00       	call   c001116e <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 cd 1e 00 00       	call   c00111ae <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 2c b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b92c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 2c b9 02 c0       	mov    eax,ds:0xc002b92c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 f0 8b 02 c0       	push   0xc0028bf0
c000f388:	e8 a0 34 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 2c b9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b92c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 1a 26 00 00       	call   c00119cd <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 2c b9 02 c0    	mov    ebp,DWORD PTR ds:0xc002b92c
c000f3bb:	e8 93 07 00 00       	call   c000fb53 <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 3b 2b 00 00       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 2c b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b92c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 20 8c 02 c0       	push   0xc0028c20
c000f441:	e8 01 a5 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 25 8c 02 c0       	push   0xc0028c25
c000f457:	e8 eb a4 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 69 d9 00 00       	call   c001cdd6 <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 5a d9 00 00       	call   c001cdd8 <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 3e 25 00 00       	call   c00119cd <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 6a 2b 00 00       	call   c0012008 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 23 25 00 00       	call   c00119cd <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 0d 28 00 00       	call   c0011cc4 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 40 b9 02 c0       	mov    eax,ds:0xc002b940
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	55                   	push   ebp
c000f57a:	80 3d a0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caa0,0x0
c000f581:	57                   	push   edi
c000f582:	56                   	push   esi
c000f583:	53                   	push   ebx
c000f584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f588:	75 50                	jne    c000f5da <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f58a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f590:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f596:	8b 15 40 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b940
c000f59c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f5a0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f5a6:	eb 0e                	jmp    c000f5b6 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f5a8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f5ae:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f5b4:	89 da                	mov    edx,ebx
c000f5b6:	83 e5 0f             	and    ebp,0xf
c000f5b9:	c1 e0 04             	shl    eax,0x4
c000f5bc:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f5bf:	0f b6 c0             	movzx  eax,al
c000f5c2:	41                   	inc    ecx
c000f5c3:	09 e8                	or     eax,ebp
c000f5c5:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f5c9:	c1 e0 08             	shl    eax,0x8
c000f5cc:	09 e8                	or     eax,ebp
c000f5ce:	39 fb                	cmp    ebx,edi
c000f5d0:	66 89 02             	mov    WORD PTR [edx],ax
c000f5d3:	75 d3                	jne    c000f5a8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f5d5:	5b                   	pop    ebx
c000f5d6:	5e                   	pop    esi
c000f5d7:	5f                   	pop    edi
c000f5d8:	5d                   	pop    ebp
c000f5d9:	c3                   	ret    
c000f5da:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f5e4:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f5ee:	31 c0                	xor    eax,eax
c000f5f0:	bd 02 00 00 00       	mov    ebp,0x2
c000f5f5:	eb 9f                	jmp    c000f596 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f5f7 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5fe:	74 38                	je     c000f638 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f600:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f605:	b0 0a                	mov    al,0xa
c000f607:	89 da                	mov    edx,ebx
c000f609:	ee                   	out    dx,al
c000f60a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f60f:	89 ca                	mov    edx,ecx
c000f611:	ec                   	in     al,dx
c000f612:	b2 0f                	mov    dl,0xf
c000f614:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f618:	83 e0 c0             	and    eax,0xffffffc0
c000f61b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f621:	09 d0                	or     eax,edx
c000f623:	89 ca                	mov    edx,ecx
c000f625:	ee                   	out    dx,al
c000f626:	b0 0b                	mov    al,0xb
c000f628:	89 da                	mov    edx,ebx
c000f62a:	ee                   	out    dx,al
c000f62b:	89 ca                	mov    edx,ecx
c000f62d:	ec                   	in     al,dx
c000f62e:	83 e0 e0             	and    eax,0xffffffe0
c000f631:	83 c8 0f             	or     eax,0xf
c000f634:	ee                   	out    dx,al
c000f635:	5b                   	pop    ebx
c000f636:	5e                   	pop    esi
c000f637:	c3                   	ret    
c000f638:	b0 0a                	mov    al,0xa
c000f63a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f63f:	ee                   	out    dx,al
c000f640:	b0 20                	mov    al,0x20
c000f642:	ba d5 03 00 00       	mov    edx,0x3d5
c000f647:	ee                   	out    dx,al
c000f648:	5b                   	pop    ebx
c000f649:	5e                   	pop    esi
c000f64a:	c3                   	ret    

c000f64b <hwTextMode_update(VgaText*)>:
c000f64b:	c3                   	ret    

c000f64c <hwTextMode_updateCursor(VgaText*)>:
c000f64c:	56                   	push   esi
c000f64d:	b9 19 00 00 00       	mov    ecx,0x19
c000f652:	53                   	push   ebx
c000f653:	be d4 03 00 00       	mov    esi,0x3d4
c000f658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f65c:	89 f2                	mov    edx,esi
c000f65e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f664:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f66a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f66d:	c1 e1 04             	shl    ecx,0x4
c000f670:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f676:	b0 0f                	mov    al,0xf
c000f678:	ee                   	out    dx,al
c000f679:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f67e:	88 c8                	mov    al,cl
c000f680:	89 da                	mov    edx,ebx
c000f682:	ee                   	out    dx,al
c000f683:	b0 0e                	mov    al,0xe
c000f685:	89 f2                	mov    edx,esi
c000f687:	ee                   	out    dx,al
c000f688:	89 c8                	mov    eax,ecx
c000f68a:	89 da                	mov    edx,ebx
c000f68c:	66 c1 e8 08          	shr    ax,0x8
c000f690:	ee                   	out    dx,al
c000f691:	5b                   	pop    ebx
c000f692:	5e                   	pop    esi
c000f693:	c3                   	ret    

c000f694 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f694:	ba da 03 00 00       	mov    edx,0x3da
c000f699:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f69e:	75 18                	jne    c000f6b8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f6a0:	ec                   	in     al,dx
c000f6a1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6a6:	b0 30                	mov    al,0x30
c000f6a8:	89 ca                	mov    edx,ecx
c000f6aa:	ee                   	out    dx,al
c000f6ab:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6b0:	ec                   	in     al,dx
c000f6b1:	83 c8 08             	or     eax,0x8
c000f6b4:	89 ca                	mov    edx,ecx
c000f6b6:	ee                   	out    dx,al
c000f6b7:	c3                   	ret    
c000f6b8:	ec                   	in     al,dx
c000f6b9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6be:	b0 30                	mov    al,0x30
c000f6c0:	89 ca                	mov    edx,ecx
c000f6c2:	ee                   	out    dx,al
c000f6c3:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6c8:	ec                   	in     al,dx
c000f6c9:	83 e0 f7             	and    eax,0xfffffff7
c000f6cc:	89 ca                	mov    edx,ecx
c000f6ce:	ee                   	out    dx,al
c000f6cf:	c3                   	ret    

c000f6d0 <hwTextMode_scrollScreen(VgaText*)>:
c000f6d0:	55                   	push   ebp
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	83 ec 1c             	sub    esp,0x1c
c000f6d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6db:	80 3d a0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caa0,0x0
c000f6e2:	74 14                	je     c000f6f8 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f6e4:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f6ee:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f6f8:	a1 40 b9 02 c0       	mov    eax,ds:0xc002b940
c000f6fd:	bd 02 00 00 00       	mov    ebp,0x2
c000f702:	05 a0 00 00 00       	add    eax,0xa0
c000f707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f70b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f70f:	31 c0                	xor    eax,eax
c000f711:	eb 0b                	jmp    c000f71e <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f713:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f719:	74 57                	je     c000f772 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f71b:	43                   	inc    ebx
c000f71c:	89 f0                	mov    eax,esi
c000f71e:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f724:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f72a:	88 13                	mov    BYTE PTR [ebx],dl
c000f72c:	8d 70 01             	lea    esi,[eax+0x1]
c000f72f:	83 fd 18             	cmp    ebp,0x18
c000f732:	75 df                	jne    c000f713 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f734:	a8 01                	test   al,0x1
c000f736:	75 13                	jne    c000f74b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f738:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f73b:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f741:	75 d8                	jne    c000f71b <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f743:	83 c4 1c             	add    esp,0x1c
c000f746:	5b                   	pop    ebx
c000f747:	5e                   	pop    esi
c000f748:	5f                   	pop    edi
c000f749:	5d                   	pop    ebp
c000f74a:	c3                   	ret    
c000f74b:	83 ec 08             	sub    esp,0x8
c000f74e:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f755:	50                   	push   eax
c000f756:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f75a:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f761:	50                   	push   eax
c000f762:	e8 31 0c 00 00       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c000f767:	83 c4 10             	add    esp,0x10
c000f76a:	88 07                	mov    BYTE PTR [edi],al
c000f76c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f770:	eb c9                	jmp    c000f73b <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f772:	45                   	inc    ebp
c000f773:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f77b:	eb 8e                	jmp    c000f70b <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f77d <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f77d:	56                   	push   esi
c000f77e:	53                   	push   ebx
c000f77f:	53                   	push   ebx
c000f780:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f784:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000f788:	80 3d a0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caa0,0x0
c000f78f:	75 56                	jne    c000f7e7 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x6a>
c000f791:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f796:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f79b:	83 ec 08             	sub    esp,0x8
c000f79e:	52                   	push   edx
c000f79f:	50                   	push   eax
c000f7a0:	e8 f3 0b 00 00       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c000f7a5:	5a                   	pop    edx
c000f7a6:	0f b6 c0             	movzx  eax,al
c000f7a9:	59                   	pop    ecx
c000f7aa:	50                   	push   eax
c000f7ab:	89 f0                	mov    eax,esi
c000f7ad:	0f be f0             	movsx  esi,al
c000f7b0:	56                   	push   esi
c000f7b1:	e8 9c 0c 00 00       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c000f7b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f7ba:	ba 19 00 00 00       	mov    edx,0x19
c000f7bf:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f7c5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f7c8:	8d 14 92             	lea    edx,[edx+edx*4]
c000f7cb:	c1 e1 04             	shl    ecx,0x4
c000f7ce:	c1 e2 04             	shl    edx,0x4
c000f7d1:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f7d5:	01 ca                	add    edx,ecx
c000f7d7:	8b 0d 40 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b940
c000f7dd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f7e1:	83 c4 14             	add    esp,0x14
c000f7e4:	5b                   	pop    ebx
c000f7e5:	5e                   	pop    esi
c000f7e6:	c3                   	ret    
c000f7e7:	b8 02 00 00 00       	mov    eax,0x2
c000f7ec:	31 d2                	xor    edx,edx
c000f7ee:	eb ab                	jmp    c000f79b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f7f0 <setupTextMode()>:
c000f7f0:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f7f5:	83 e0 30             	and    eax,0x30
c000f7f8:	66 83 f8 30          	cmp    ax,0x30
c000f7fc:	74 11                	je     c000f80f <setupTextMode()+0x1f>
c000f7fe:	81 2d 40 b9 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b940,0x8000
c000f808:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000f80f:	c6 05 00 00 0b c2 41 	mov    BYTE PTR ds:0xc20b0000,0x41
c000f816:	c6 05 01 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0001,0x2
c000f81d:	c6 05 02 00 0b c2 42 	mov    BYTE PTR ds:0xc20b0002,0x42
c000f824:	c6 05 03 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0003,0x2
c000f82b:	c6 05 04 00 0b c2 43 	mov    BYTE PTR ds:0xc20b0004,0x43
c000f832:	c6 05 05 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0005,0x2
c000f839:	c6 05 06 00 0b c2 44 	mov    BYTE PTR ds:0xc20b0006,0x44
c000f840:	c6 05 07 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0007,0x2
c000f847:	c7 05 d8 ca 02 c0 94 f6 00 c0 	mov    DWORD PTR ds:0xc002cad8,0xc000f694
c000f851:	c7 05 c4 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002cac4,0xc000f52e
c000f85b:	c7 05 c0 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002cac0,0xc000f579
c000f865:	c7 05 cc ca 02 c0 d0 f6 00 c0 	mov    DWORD PTR ds:0xc002cacc,0xc000f6d0
c000f86f:	c7 05 d4 ca 02 c0 f7 f5 00 c0 	mov    DWORD PTR ds:0xc002cad4,0xc000f5f7
c000f879:	c7 05 c8 ca 02 c0 4b f6 00 c0 	mov    DWORD PTR ds:0xc002cac8,0xc000f64b
c000f883:	c7 05 d0 ca 02 c0 4c f6 00 c0 	mov    DWORD PTR ds:0xc002cad0,0xc000f64c
c000f88d:	c7 05 dc ca 02 c0 7d f7 00 c0 	mov    DWORD PTR ds:0xc002cadc,0xc000f77d
c000f897:	c3                   	ret    

c000f898 <kernel_main>:
c000f898:	57                   	push   edi
c000f899:	bf f9 03 00 00       	mov    edi,0x3f9
c000f89e:	56                   	push   esi
c000f89f:	31 f6                	xor    esi,esi
c000f8a1:	53                   	push   ebx
c000f8a2:	83 ec 10             	sub    esp,0x10
c000f8a5:	e8 48 09 00 00       	call   c00101f2 <installVgaTextImplementation()>
c000f8aa:	e8 41 ff ff ff       	call   c000f7f0 <setupTextMode()>
c000f8af:	89 f0                	mov    eax,esi
c000f8b1:	89 fa                	mov    edx,edi
c000f8b3:	ee                   	out    dx,al
c000f8b4:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8b9:	b0 80                	mov    al,0x80
c000f8bb:	89 da                	mov    edx,ebx
c000f8bd:	ee                   	out    dx,al
c000f8be:	b1 03                	mov    cl,0x3
c000f8c0:	ba f8 03 00 00       	mov    edx,0x3f8
c000f8c5:	88 c8                	mov    al,cl
c000f8c7:	ee                   	out    dx,al
c000f8c8:	89 f0                	mov    eax,esi
c000f8ca:	89 fa                	mov    edx,edi
c000f8cc:	ee                   	out    dx,al
c000f8cd:	88 c8                	mov    al,cl
c000f8cf:	89 da                	mov    edx,ebx
c000f8d1:	ee                   	out    dx,al
c000f8d2:	b0 c7                	mov    al,0xc7
c000f8d4:	ba fa 03 00 00       	mov    edx,0x3fa
c000f8d9:	ee                   	out    dx,al
c000f8da:	b0 0b                	mov    al,0xb
c000f8dc:	ba fc 03 00 00       	mov    edx,0x3fc
c000f8e1:	ee                   	out    dx,al
c000f8e2:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f8e7:	83 ec 0c             	sub    esp,0xc
c000f8ea:	05 ff 0f 00 00       	add    eax,0xfff
c000f8ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f8f4:	50                   	push   eax
c000f8f5:	e8 b3 03 00 00       	call   c000fcad <Phys::physicalMemorySetup(unsigned int)>
c000f8fa:	e8 4f 20 00 00       	call   c001194e <Virt::virtualMemorySetup()>
c000f8ff:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f905:	83 c4 10             	add    esp,0x10
c000f908:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f90e:	75 0e                	jne    c000f91e <kernel_main+0x86>
c000f910:	89 d8                	mov    eax,ebx
c000f912:	25 48 03 00 00       	and    eax,0x348
c000f917:	3d 00 03 00 00       	cmp    eax,0x300
c000f91c:	74 10                	je     c000f92e <kernel_main+0x96>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	68 1c a3 02 c0       	push   0xc002a31c
c000f926:	e8 1c a0 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000f92b:	83 c4 10             	add    esp,0x10
c000f92e:	83 ec 0c             	sub    esp,0xc
c000f931:	89 1d 20 ca 02 c0    	mov    DWORD PTR ds:0xc002ca20,ebx
c000f937:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f93b:	53                   	push   ebx
c000f93c:	e8 c1 21 00 00       	call   c0011b02 <VAS::VAS()>
c000f941:	89 1d 84 cb 02 c0    	mov    DWORD PTR ds:0xc002cb84,ebx
c000f947:	e8 d4 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f94c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f953:	e8 7c fb ff ff       	call   c000f4d4 <malloc>
c000f958:	89 04 24             	mov    DWORD PTR [esp],eax
c000f95b:	89 c6                	mov    esi,eax
c000f95d:	e8 88 e9 ff ff       	call   c000e2ea <Computer::Computer()>
c000f962:	6a 00                	push   0x0
c000f964:	89 35 08 ca 02 c0    	mov    DWORD PTR ds:0xc002ca08,esi
c000f96a:	6a 00                	push   0x0
c000f96c:	6a 00                	push   0x0
c000f96e:	56                   	push   esi
c000f96f:	e8 aa f1 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f974:	83 c4 14             	add    esp,0x14
c000f977:	53                   	push   ebx
c000f978:	e8 1f 24 00 00       	call   c0011d9c <VAS::~VAS()>
c000f97d:	c7 04 24 2c 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c2c
c000f984:	e8 be 9f 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000f989:	83 c4 20             	add    esp,0x20
c000f98c:	5b                   	pop    ebx
c000f98d:	5e                   	pop    esi
c000f98e:	5f                   	pop    edi
c000f98f:	c3                   	ret    

c000f990 <Phys::allocateDMA(unsigned long)>:
c000f990:	55                   	push   ebp
c000f991:	31 d2                	xor    edx,edx
c000f993:	57                   	push   edi
c000f994:	31 ed                	xor    ebp,ebp
c000f996:	56                   	push   esi
c000f997:	31 c9                	xor    ecx,ecx
c000f999:	53                   	push   ebx
c000f99a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f99e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f9a4:	31 c0                	xor    eax,eax
c000f9a6:	c1 ee 0c             	shr    esi,0xc
c000f9a9:	eb 17                	jmp    c000f9c2 <Phys::allocateDMA(unsigned long)+0x32>
c000f9ab:	85 c9                	test   ecx,ecx
c000f9ad:	75 04                	jne    c000f9b3 <Phys::allocateDMA(unsigned long)+0x23>
c000f9af:	89 d5                	mov    ebp,edx
c000f9b1:	89 d0                	mov    eax,edx
c000f9b3:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9b6:	39 de                	cmp    esi,ebx
c000f9b8:	74 20                	je     c000f9da <Phys::allocateDMA(unsigned long)+0x4a>
c000f9ba:	42                   	inc    edx
c000f9bb:	89 d9                	mov    ecx,ebx
c000f9bd:	83 fa 2f             	cmp    edx,0x2f
c000f9c0:	7f 11                	jg     c000f9d3 <Phys::allocateDMA(unsigned long)+0x43>
c000f9c2:	80 ba 60 ca 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd35a0],0x0
c000f9c9:	74 e0                	je     c000f9ab <Phys::allocateDMA(unsigned long)+0x1b>
c000f9cb:	31 c9                	xor    ecx,ecx
c000f9cd:	42                   	inc    edx
c000f9ce:	83 fa 2f             	cmp    edx,0x2f
c000f9d1:	7e ef                	jle    c000f9c2 <Phys::allocateDMA(unsigned long)+0x32>
c000f9d3:	5b                   	pop    ebx
c000f9d4:	31 c0                	xor    eax,eax
c000f9d6:	5e                   	pop    esi
c000f9d7:	5f                   	pop    edi
c000f9d8:	5d                   	pop    ebp
c000f9d9:	c3                   	ret    
c000f9da:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9dd:	89 d7                	mov    edi,edx
c000f9df:	4f                   	dec    edi
c000f9e0:	79 03                	jns    c000f9e5 <Phys::allocateDMA(unsigned long)+0x55>
c000f9e2:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9e5:	c1 ff 04             	sar    edi,0x4
c000f9e8:	89 c2                	mov    edx,eax
c000f9ea:	c1 fa 04             	sar    edx,0x4
c000f9ed:	39 fa                	cmp    edx,edi
c000f9ef:	75 2f                	jne    c000fa20 <Phys::allocateDMA(unsigned long)+0x90>
c000f9f1:	85 db                	test   ebx,ebx
c000f9f3:	74 1a                	je     c000fa0f <Phys::allocateDMA(unsigned long)+0x7f>
c000f9f5:	be 60 ca 02 c0       	mov    esi,0xc002ca60
c000f9fa:	8d 90 60 ca 02 c0    	lea    edx,[eax-0x3ffd35a0]
c000fa00:	f7 d6                	not    esi
c000fa02:	29 c6                	sub    esi,eax
c000fa04:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa07:	42                   	inc    edx
c000fa08:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa0b:	39 d9                	cmp    ecx,ebx
c000fa0d:	7f f5                	jg     c000fa04 <Phys::allocateDMA(unsigned long)+0x74>
c000fa0f:	85 ff                	test   edi,edi
c000fa11:	74 13                	je     c000fa26 <Phys::allocateDMA(unsigned long)+0x96>
c000fa13:	5b                   	pop    ebx
c000fa14:	05 50 20 0c 00       	add    eax,0xc2050
c000fa19:	5e                   	pop    esi
c000fa1a:	c1 e0 0c             	shl    eax,0xc
c000fa1d:	5f                   	pop    edi
c000fa1e:	5d                   	pop    ebp
c000fa1f:	c3                   	ret    
c000fa20:	89 ea                	mov    edx,ebp
c000fa22:	31 c9                	xor    ecx,ecx
c000fa24:	eb a7                	jmp    c000f9cd <Phys::allocateDMA(unsigned long)+0x3d>
c000fa26:	5b                   	pop    ebx
c000fa27:	c1 e0 0c             	shl    eax,0xc
c000fa2a:	5e                   	pop    esi
c000fa2b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa30:	5f                   	pop    edi
c000fa31:	5d                   	pop    ebp
c000fa32:	c3                   	ret    

c000fa33 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa3b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa41:	c1 e9 0c             	shr    ecx,0xc
c000fa44:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa49:	76 25                	jbe    c000fa70 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa4b:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa50:	c1 e8 0c             	shr    eax,0xc
c000fa53:	8d 50 10             	lea    edx,[eax+0x10]
c000fa56:	85 c9                	test   ecx,ecx
c000fa58:	74 15                	je     c000fa6f <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa5a:	8d 82 60 ca 02 c0    	lea    eax,[edx-0x3ffd35a0]
c000fa60:	8d 94 11 60 ca 02 c0 	lea    edx,[ecx+edx*1-0x3ffd35a0]
c000fa67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa6a:	40                   	inc    eax
c000fa6b:	39 d0                	cmp    eax,edx
c000fa6d:	75 f8                	jne    c000fa67 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa6f:	c3                   	ret    
c000fa70:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa76:	c1 ea 0c             	shr    edx,0xc
c000fa79:	eb db                	jmp    c000fa56 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa7b <Phys::setPageState(unsigned long, bool)>:
c000fa7b:	56                   	push   esi
c000fa7c:	ba 01 00 00 00       	mov    edx,0x1
c000fa81:	53                   	push   ebx
c000fa82:	8b 35 30 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b930
c000fa88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa90:	89 c8                	mov    eax,ecx
c000fa92:	83 e1 07             	and    ecx,0x7
c000fa95:	c1 e8 03             	shr    eax,0x3
c000fa98:	d3 e3                	shl    ebx,cl
c000fa9a:	01 c6                	add    esi,eax
c000fa9c:	d3 e2                	shl    edx,cl
c000fa9e:	f7 d2                	not    edx
c000faa0:	20 16                	and    BYTE PTR [esi],dl
c000faa2:	03 05 30 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b930
c000faa8:	08 18                	or     BYTE PTR [eax],bl
c000faaa:	5b                   	pop    ebx
c000faab:	5e                   	pop    esi
c000faac:	c3                   	ret    

c000faad <Phys::getPageState(unsigned long)>:
c000faad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fab1:	8b 15 30 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b930
c000fab7:	89 c8                	mov    eax,ecx
c000fab9:	83 e1 07             	and    ecx,0x7
c000fabc:	c1 e8 03             	shr    eax,0x3
c000fabf:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fac3:	d3 f8                	sar    eax,cl
c000fac5:	83 e0 01             	and    eax,0x1
c000fac8:	c3                   	ret    

c000fac9 <Phys::freePage(unsigned long)>:
c000fac9:	53                   	push   ebx
c000faca:	83 ec 08             	sub    esp,0x8
c000facd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fad1:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fad7:	76 57                	jbe    c000fb30 <Phys::freePage(unsigned long)+0x67>
c000fad9:	c1 eb 0c             	shr    ebx,0xc
c000fadc:	53                   	push   ebx
c000fadd:	e8 cb ff ff ff       	call   c000faad <Phys::getPageState(unsigned long)>
c000fae2:	5a                   	pop    edx
c000fae3:	84 c0                	test   al,al
c000fae5:	74 5b                	je     c000fb42 <Phys::freePage(unsigned long)+0x79>
c000fae7:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c000faec:	48                   	dec    eax
c000faed:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c000faf2:	8d 04 80             	lea    eax,[eax+eax*4]
c000faf5:	8d 04 80             	lea    eax,[eax+eax*4]
c000faf8:	c1 e0 02             	shl    eax,0x2
c000fafb:	99                   	cdq    
c000fafc:	f7 3d 50 ca 02 c0    	idiv   DWORD PTR ds:0xc002ca50
c000fb02:	39 05 48 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca48,eax
c000fb08:	75 13                	jne    c000fb1d <Phys::freePage(unsigned long)+0x54>
c000fb0a:	83 ec 08             	sub    esp,0x8
c000fb0d:	6a 00                	push   0x0
c000fb0f:	53                   	push   ebx
c000fb10:	e8 66 ff ff ff       	call   c000fa7b <Phys::setPageState(unsigned long, bool)>
c000fb15:	83 c4 10             	add    esp,0x10
c000fb18:	83 c4 08             	add    esp,0x8
c000fb1b:	5b                   	pop    ebx
c000fb1c:	c3                   	ret    
c000fb1d:	83 ec 0c             	sub    esp,0xc
c000fb20:	a3 48 ca 02 c0       	mov    ds:0xc002ca48,eax
c000fb25:	50                   	push   eax
c000fb26:	e8 6f 0a 00 00       	call   c001059a <VgaText::updateRAMUsageDisplay(int)>
c000fb2b:	83 c4 10             	add    esp,0x10
c000fb2e:	eb da                	jmp    c000fb0a <Phys::freePage(unsigned long)+0x41>
c000fb30:	68 00 10 00 00       	push   0x1000
c000fb35:	53                   	push   ebx
c000fb36:	e8 f8 fe ff ff       	call   c000fa33 <Phys::freeDMA(unsigned long, unsigned long)>
c000fb3b:	59                   	pop    ecx
c000fb3c:	5b                   	pop    ebx
c000fb3d:	83 c4 08             	add    esp,0x8
c000fb40:	5b                   	pop    ebx
c000fb41:	c3                   	ret    
c000fb42:	c7 44 24 10 47 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c47
c000fb4a:	83 c4 08             	add    esp,0x8
c000fb4d:	5b                   	pop    ebx
c000fb4e:	e9 f4 9d 00 00       	jmp    c0019947 <Krnl::panic(char const*)>

c000fb53 <Phys::allocatePage()>:
c000fb53:	56                   	push   esi
c000fb54:	53                   	push   ebx
c000fb55:	51                   	push   ecx
c000fb56:	8b 35 40 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca40
c000fb5c:	89 f3                	mov    ebx,esi
c000fb5e:	eb 0a                	jmp    c000fb6a <Phys::allocatePage()+0x17>
c000fb60:	89 1d 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,ebx
c000fb66:	39 de                	cmp    esi,ebx
c000fb68:	74 24                	je     c000fb8e <Phys::allocatePage()+0x3b>
c000fb6a:	53                   	push   ebx
c000fb6b:	e8 3d ff ff ff       	call   c000faad <Phys::getPageState(unsigned long)>
c000fb70:	5a                   	pop    edx
c000fb71:	84 c0                	test   al,al
c000fb73:	74 5a                	je     c000fbcf <Phys::allocatePage()+0x7c>
c000fb75:	43                   	inc    ebx
c000fb76:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb7c:	75 e2                	jne    c000fb60 <Phys::allocatePage()+0xd>
c000fb7e:	31 db                	xor    ebx,ebx
c000fb80:	c7 05 40 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca40,0x0
c000fb8a:	39 de                	cmp    esi,ebx
c000fb8c:	75 dc                	jne    c000fb6a <Phys::allocatePage()+0x17>
c000fb8e:	83 ec 0c             	sub    esp,0xc
c000fb91:	68 5d 8c 02 c0       	push   0xc0028c5d
c000fb96:	e8 92 2c 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000fb9b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fba2:	e8 e9 fd ff ff       	call   c000f990 <Phys::allocateDMA(unsigned long)>
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	85 c0                	test   eax,eax
c000fbac:	75 56                	jne    c000fc04 <Phys::allocatePage()+0xb1>
c000fbae:	83 ec 0c             	sub    esp,0xc
c000fbb1:	68 6e 8c 02 c0       	push   0xc0028c6e
c000fbb6:	e8 8c 9d 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	8b 1d 40 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca40
c000fbc4:	53                   	push   ebx
c000fbc5:	e8 e3 fe ff ff       	call   c000faad <Phys::getPageState(unsigned long)>
c000fbca:	5a                   	pop    edx
c000fbcb:	84 c0                	test   al,al
c000fbcd:	75 a6                	jne    c000fb75 <Phys::allocatePage()+0x22>
c000fbcf:	6a 01                	push   0x1
c000fbd1:	53                   	push   ebx
c000fbd2:	e8 a4 fe ff ff       	call   c000fa7b <Phys::setPageState(unsigned long, bool)>
c000fbd7:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c000fbdc:	59                   	pop    ecx
c000fbdd:	40                   	inc    eax
c000fbde:	5b                   	pop    ebx
c000fbdf:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c000fbe4:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbe7:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbea:	c1 e0 02             	shl    eax,0x2
c000fbed:	99                   	cdq    
c000fbee:	f7 3d 50 ca 02 c0    	idiv   DWORD PTR ds:0xc002ca50
c000fbf4:	39 05 48 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca48,eax
c000fbfa:	75 0c                	jne    c000fc08 <Phys::allocatePage()+0xb5>
c000fbfc:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c000fc01:	c1 e0 0c             	shl    eax,0xc
c000fc04:	5a                   	pop    edx
c000fc05:	5b                   	pop    ebx
c000fc06:	5e                   	pop    esi
c000fc07:	c3                   	ret    
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	a3 48 ca 02 c0       	mov    ds:0xc002ca48,eax
c000fc10:	50                   	push   eax
c000fc11:	e8 84 09 00 00       	call   c001059a <VgaText::updateRAMUsageDisplay(int)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	eb e1                	jmp    c000fbfc <Phys::allocatePage()+0xa9>

c000fc1b <Phys::allocateContiguousPages(int)>:
c000fc1b:	57                   	push   edi
c000fc1c:	56                   	push   esi
c000fc1d:	53                   	push   ebx
c000fc1e:	31 db                	xor    ebx,ebx
c000fc20:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fc24:	e8 ad d1 00 00       	call   c001cdd6 <lockScheduler()>
c000fc29:	85 db                	test   ebx,ebx
c000fc2b:	75 11                	jne    c000fc3e <Phys::allocateContiguousPages(int)+0x23>
c000fc2d:	e8 21 ff ff ff       	call   c000fb53 <Phys::allocatePage()>
c000fc32:	83 ff 01             	cmp    edi,0x1
c000fc35:	89 c6                	mov    esi,eax
c000fc37:	74 21                	je     c000fc5a <Phys::allocateContiguousPages(int)+0x3f>
c000fc39:	bb 01 00 00 00       	mov    ebx,0x1
c000fc3e:	e8 10 ff ff ff       	call   c000fb53 <Phys::allocatePage()>
c000fc43:	89 da                	mov    edx,ebx
c000fc45:	c1 e2 0c             	shl    edx,0xc
c000fc48:	01 f2                	add    edx,esi
c000fc4a:	39 c2                	cmp    edx,eax
c000fc4c:	74 17                	je     c000fc65 <Phys::allocateContiguousPages(int)+0x4a>
c000fc4e:	bb 01 00 00 00       	mov    ebx,0x1
c000fc53:	89 c6                	mov    esi,eax
c000fc55:	83 ff 01             	cmp    edi,0x1
c000fc58:	75 e4                	jne    c000fc3e <Phys::allocateContiguousPages(int)+0x23>
c000fc5a:	e8 79 d1 00 00       	call   c001cdd8 <unlockScheduler()>
c000fc5f:	89 f0                	mov    eax,esi
c000fc61:	5b                   	pop    ebx
c000fc62:	5e                   	pop    esi
c000fc63:	5f                   	pop    edi
c000fc64:	c3                   	ret    
c000fc65:	43                   	inc    ebx
c000fc66:	39 fb                	cmp    ebx,edi
c000fc68:	75 bf                	jne    c000fc29 <Phys::allocateContiguousPages(int)+0xe>
c000fc6a:	e8 69 d1 00 00       	call   c001cdd8 <unlockScheduler()>
c000fc6f:	89 f0                	mov    eax,esi
c000fc71:	5b                   	pop    ebx
c000fc72:	5e                   	pop    esi
c000fc73:	5f                   	pop    edi
c000fc74:	c3                   	ret    

c000fc75 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc75:	56                   	push   esi
c000fc76:	53                   	push   ebx
c000fc77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc7b:	39 1d 44 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca44,ebx
c000fc81:	73 06                	jae    c000fc89 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc83:	89 1d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,ebx
c000fc89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc8d:	c1 eb 0c             	shr    ebx,0xc
c000fc90:	c1 e8 0c             	shr    eax,0xc
c000fc93:	39 d8                	cmp    eax,ebx
c000fc95:	73 13                	jae    c000fcaa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc97:	6a 00                	push   0x0
c000fc99:	8d 70 01             	lea    esi,[eax+0x1]
c000fc9c:	50                   	push   eax
c000fc9d:	e8 d9 fd ff ff       	call   c000fa7b <Phys::setPageState(unsigned long, bool)>
c000fca2:	5a                   	pop    edx
c000fca3:	89 f0                	mov    eax,esi
c000fca5:	59                   	pop    ecx
c000fca6:	39 f3                	cmp    ebx,esi
c000fca8:	75 ed                	jne    c000fc97 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcaa:	5b                   	pop    ebx
c000fcab:	5e                   	pop    esi
c000fcac:	c3                   	ret    

c000fcad <Phys::physicalMemorySetup(unsigned int)>:
c000fcad:	55                   	push   ebp
c000fcae:	57                   	push   edi
c000fcaf:	56                   	push   esi
c000fcb0:	53                   	push   ebx
c000fcb1:	31 db                	xor    ebx,ebx
c000fcb3:	83 ec 40             	sub    esp,0x40
c000fcb6:	6a 30                	push   0x30
c000fcb8:	6a 00                	push   0x0
c000fcba:	68 60 ca 02 c0       	push   0xc002ca60
c000fcbf:	e8 c7 09 ff ff       	call   c000068b <memset>
c000fcc4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fccd:	05 00 10 00 00       	add    eax,0x1000
c000fcd2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcd6:	83 c4 10             	add    esp,0x10
c000fcd9:	83 ec 08             	sub    esp,0x8
c000fcdc:	6a 01                	push   0x1
c000fcde:	53                   	push   ebx
c000fcdf:	43                   	inc    ebx
c000fce0:	e8 96 fd ff ff       	call   c000fa7b <Phys::setPageState(unsigned long, bool)>
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcee:	75 e9                	jne    c000fcd9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fcf0:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fcf7:	66 85 c0             	test   ax,ax
c000fcfa:	0f 84 8e 01 00 00    	je     c000fe8e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd00:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd10:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd15:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd19:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd21:	eb 15                	jmp    c000fd38 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd23:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd27:	83 c3 18             	add    ebx,0x18
c000fd2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd32:	0f 84 66 01 00 00    	je     c000fe9e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd3b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd3e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd49:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd4b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd4e:	01 f0                	add    eax,esi
c000fd50:	55                   	push   ebp
c000fd51:	11 fa                	adc    edx,edi
c000fd53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd57:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd5f:	56                   	push   esi
c000fd60:	68 a8 8c 02 c0       	push   0xc0028ca8
c000fd65:	e8 c3 2a 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000fd6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd6e:	83 c4 10             	add    esp,0x10
c000fd71:	09 f8                	or     eax,edi
c000fd73:	0f 85 25 01 00 00    	jne    c000fe9e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd79:	4d                   	dec    ebp
c000fd7a:	75 a7                	jne    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd7c:	ba 00 00 08 00       	mov    edx,0x80000
c000fd81:	89 c1                	mov    ecx,eax
c000fd83:	39 f2                	cmp    edx,esi
c000fd85:	19 f9                	sbb    ecx,edi
c000fd87:	0f 82 a7 00 00 00    	jb     c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd8d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd91:	89 c1                	mov    ecx,eax
c000fd93:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd97:	0f 83 97 00 00 00    	jae    c000fe34 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd9d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fda2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fda6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdaa:	39 fa                	cmp    edx,edi
c000fdac:	19 e8                	sbb    eax,ebp
c000fdae:	0f 82 14 01 00 00    	jb     c000fec8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fdb4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdb8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdbc:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdc2:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdc7:	83 d5 ff             	adc    ebp,0xffffffff
c000fdca:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdce:	31 c0                	xor    eax,eax
c000fdd0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdd4:	39 fa                	cmp    edx,edi
c000fdd6:	89 c1                	mov    ecx,eax
c000fdd8:	19 e9                	sbb    ecx,ebp
c000fdda:	0f 83 43 ff ff ff    	jae    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fde0:	be 00 00 08 00       	mov    esi,0x80000
c000fde5:	50                   	push   eax
c000fde6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fdea:	57                   	push   edi
c000fdeb:	56                   	push   esi
c000fdec:	68 cc 8c 02 c0       	push   0xc0028ccc
c000fdf1:	e8 37 2a 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000fdf6:	5a                   	pop    edx
c000fdf7:	59                   	pop    ecx
c000fdf8:	57                   	push   edi
c000fdf9:	56                   	push   esi
c000fdfa:	e8 76 fe ff ff       	call   c000fc75 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fdff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe07:	83 c4 0c             	add    esp,0xc
c000fe0a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe0e:	03 05 50 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca50
c000fe14:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe1b:	a3 50 ca 02 c0       	mov    ds:0xc002ca50,eax
c000fe20:	52                   	push   edx
c000fe21:	50                   	push   eax
c000fe22:	68 8a 8c 02 c0       	push   0xc0028c8a
c000fe27:	e8 01 2a 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	e9 ef fe ff ff       	jmp    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe34:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe40:	39 ea                	cmp    edx,ebp
c000fe42:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe46:	0f 82 d7 fe ff ff    	jb     c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe4c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe51:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe55:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe59:	0f 83 c4 fe ff ff    	jae    c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe5f:	39 ee                	cmp    esi,ebp
c000fe61:	89 f8                	mov    eax,edi
c000fe63:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe67:	0f 83 78 ff ff ff    	jae    c000fde5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe7d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe89:	e9 57 ff ff ff       	jmp    c000fde5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	68 7c 8c 02 c0       	push   0xc0028c7c
c000fe96:	e8 ac 9a 00 00       	call   c0019947 <Krnl::panic(char const*)>
c000fe9b:	83 c4 10             	add    esp,0x10
c000fe9e:	bb 40 01 00 00       	mov    ebx,0x140
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	6a 00                	push   0x0
c000fea8:	53                   	push   ebx
c000fea9:	43                   	inc    ebx
c000feaa:	e8 cc fb ff ff       	call   c000fa7b <Phys::setPageState(unsigned long, bool)>
c000feaf:	ff 05 50 ca 02 c0    	inc    DWORD PTR ds:0xc002ca50
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000febe:	75 e3                	jne    c000fea3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fec0:	83 c4 3c             	add    esp,0x3c
c000fec3:	5b                   	pop    ebx
c000fec4:	5e                   	pop    esi
c000fec5:	5f                   	pop    edi
c000fec6:	5d                   	pop    ebp
c000fec7:	c3                   	ret    
c000fec8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fed0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fed8:	e9 d7 fe ff ff       	jmp    c000fdb4 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fedd:	90                   	nop

c000fede <Pipe::isAtty()>:
c000fede:	31 c0                	xor    eax,eax
c000fee0:	c3                   	ret    
c000fee1:	90                   	nop

c000fee2 <Pipe::~Pipe()>:
c000fee2:	83 ec 0c             	sub    esp,0xc
c000fee5:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c000feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feee:	89 10                	mov    DWORD PTR [eax],edx
c000fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef4:	83 ec 0c             	sub    esp,0xc
c000fef7:	50                   	push   eax
c000fef8:	e8 df 16 00 00       	call   c00115dc <UnixFile::~UnixFile()>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	90                   	nop
c000ff01:	83 c4 0c             	add    esp,0xc
c000ff04:	c3                   	ret    
c000ff05:	90                   	nop

c000ff06 <Pipe::~Pipe()>:
c000ff06:	83 ec 0c             	sub    esp,0xc
c000ff09:	83 ec 0c             	sub    esp,0xc
c000ff0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff10:	e8 cd ff ff ff       	call   c000fee2 <Pipe::~Pipe()>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	83 ec 08             	sub    esp,0x8
c000ff1b:	6a 20                	push   0x20
c000ff1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff21:	e8 27 28 00 00       	call   c001274d <operator delete(void*, unsigned long)>
c000ff26:	83 c4 10             	add    esp,0x10
c000ff29:	83 c4 0c             	add    esp,0xc
c000ff2c:	c3                   	ret    
c000ff2d:	90                   	nop

c000ff2e <Pipe::read(unsigned long long, void*, int*)>:
c000ff2e:	55                   	push   ebp
c000ff2f:	57                   	push   edi
c000ff30:	56                   	push   esi
c000ff31:	53                   	push   ebx
c000ff32:	83 ec 1c             	sub    esp,0x1c
c000ff35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff41:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff44:	89 c8                	mov    eax,ecx
c000ff46:	99                   	cdq    
c000ff47:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff4b:	74 19                	je     c000ff66 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff4d:	39 f9                	cmp    ecx,edi
c000ff4f:	89 d1                	mov    ecx,edx
c000ff51:	19 f1                	sbb    ecx,esi
c000ff53:	73 11                	jae    c000ff66 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff55:	e8 7c ce 00 00       	call   c001cdd6 <lockScheduler()>
c000ff5a:	e8 b3 d1 00 00       	call   c001d112 <schedule()>
c000ff5f:	e8 74 ce 00 00       	call   c001cdd8 <unlockScheduler()>
c000ff64:	eb db                	jmp    c000ff41 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff66:	39 f8                	cmp    eax,edi
c000ff68:	89 d1                	mov    ecx,edx
c000ff6a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ff6e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ff72:	19 f1                	sbb    ecx,esi
c000ff74:	73 08                	jae    c000ff7e <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ff76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff81:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff84:	29 c6                	sub    esi,eax
c000ff86:	89 f1                	mov    ecx,esi
c000ff88:	c1 f9 1f             	sar    ecx,0x1f
c000ff8b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ff8f:	89 ca                	mov    edx,ecx
c000ff91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff95:	19 d1                	sbb    ecx,edx
c000ff97:	73 04                	jae    c000ff9d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ff99:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ff9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ffa1:	89 fd                	mov    ebp,edi
c000ffa3:	29 f5                	sub    ebp,esi
c000ffa5:	85 f6                	test   esi,esi
c000ffa7:	74 12                	je     c000ffbb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ffa9:	52                   	push   edx
c000ffaa:	56                   	push   esi
c000ffab:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ffae:	50                   	push   eax
c000ffaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ffb3:	e8 9d 06 ff ff       	call   c0000655 <memcpy>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	85 ed                	test   ebp,ebp
c000ffbd:	74 12                	je     c000ffd1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ffbf:	50                   	push   eax
c000ffc0:	55                   	push   ebp
c000ffc1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ffc4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ffc8:	56                   	push   esi
c000ffc9:	e8 87 06 ff ff       	call   c0000655 <memcpy>
c000ffce:	83 c4 10             	add    esp,0x10
c000ffd1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ffd4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ffd7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ffda:	99                   	cdq    
c000ffdb:	89 f7                	mov    edi,esi
c000ffdd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ffe1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ffe5:	c1 ff 1f             	sar    edi,0x1f
c000ffe8:	57                   	push   edi
c000ffe9:	56                   	push   esi
c000ffea:	52                   	push   edx
c000ffeb:	50                   	push   eax
c000ffec:	e8 6b 55 01 00       	call   c002555c <__umoddi3>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fff7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fffc:	75 10                	jne    c001000e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	68 f5 8c 02 c0       	push   0xc0028cf5
c0010006:	e8 3c 99 00 00       	call   c0019947 <Krnl::panic(char const*)>
c001000b:	83 c4 10             	add    esp,0x10
c001000e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010016:	89 10                	mov    DWORD PTR [eax],edx
c0010018:	83 c4 1c             	add    esp,0x1c
c001001b:	31 c0                	xor    eax,eax
c001001d:	5b                   	pop    ebx
c001001e:	5e                   	pop    esi
c001001f:	5f                   	pop    edi
c0010020:	5d                   	pop    ebp
c0010021:	c3                   	ret    

c0010022 <Pipe::write(unsigned long long, void*, int*)>:
c0010022:	55                   	push   ebp
c0010023:	57                   	push   edi
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 1c             	sub    esp,0x1c
c0010029:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001002d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010031:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010035:	89 04 24             	mov    DWORD PTR [esp],eax
c0010038:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001003b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001003e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010042:	89 de                	mov    esi,ebx
c0010044:	89 df                	mov    edi,ebx
c0010046:	c1 ff 1f             	sar    edi,0x1f
c0010049:	01 c6                	add    esi,eax
c001004b:	89 c8                	mov    eax,ecx
c001004d:	11 d7                	adc    edi,edx
c001004f:	99                   	cdq    
c0010050:	39 f1                	cmp    ecx,esi
c0010052:	89 d0                	mov    eax,edx
c0010054:	19 f8                	sbb    eax,edi
c0010056:	b8 01 00 00 00       	mov    eax,0x1
c001005b:	0f 82 80 00 00 00    	jb     c00100e1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010061:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010064:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010067:	01 d8                	add    eax,ebx
c0010069:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001006d:	99                   	cdq    
c001006e:	f7 f9                	idiv   ecx
c0010070:	29 d1                	sub    ecx,edx
c0010072:	89 d7                	mov    edi,edx
c0010074:	89 c8                	mov    eax,ecx
c0010076:	99                   	cdq    
c0010077:	39 ce                	cmp    esi,ecx
c0010079:	19 d3                	sbb    ebx,edx
c001007b:	bb 00 00 00 00       	mov    ebx,0x0
c0010080:	72 04                	jb     c0010086 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010082:	89 f3                	mov    ebx,esi
c0010084:	29 cb                	sub    ebx,ecx
c0010086:	89 f1                	mov    ecx,esi
c0010088:	29 d9                	sub    ecx,ebx
c001008a:	74 1a                	je     c00100a6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001008c:	52                   	push   edx
c001008d:	51                   	push   ecx
c001008e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010092:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010096:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010099:	57                   	push   edi
c001009a:	e8 b6 05 ff ff       	call   c0000655 <memcpy>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100a6:	85 db                	test   ebx,ebx
c00100a8:	74 12                	je     c00100bc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00100aa:	50                   	push   eax
c00100ab:	53                   	push   ebx
c00100ac:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00100b0:	51                   	push   ecx
c00100b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00100b4:	e8 9c 05 ff ff       	call   c0000655 <memcpy>
c00100b9:	83 c4 10             	add    esp,0x10
c00100bc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00100bf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100c4:	75 10                	jne    c00100d6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00100c6:	83 ec 0c             	sub    esp,0xc
c00100c9:	68 11 8d 02 c0       	push   0xc0028d11
c00100ce:	e8 74 98 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00100d3:	83 c4 10             	add    esp,0x10
c00100d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100da:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00100dd:	89 38                	mov    DWORD PTR [eax],edi
c00100df:	31 c0                	xor    eax,eax
c00100e1:	83 c4 1c             	add    esp,0x1c
c00100e4:	5b                   	pop    ebx
c00100e5:	5e                   	pop    esi
c00100e6:	5f                   	pop    edi
c00100e7:	5d                   	pop    ebp
c00100e8:	c3                   	ret    
c00100e9:	90                   	nop

c00100ea <Pipe::Pipe(int)>:
c00100ea:	83 ec 0c             	sub    esp,0xc
c00100ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f1:	83 ec 08             	sub    esp,0x8
c00100f4:	6a 00                	push   0x0
c00100f6:	50                   	push   eax
c00100f7:	e8 fe 12 00 00       	call   c00113fa <UnixFile::UnixFile(int)>
c00100fc:	83 c4 10             	add    esp,0x10
c00100ff:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c0010104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010108:	89 10                	mov    DWORD PTR [eax],edx
c001010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010112:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010119:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010124:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001012b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001012f:	83 ec 0c             	sub    esp,0xc
c0010132:	50                   	push   eax
c0010133:	e8 9c f3 ff ff       	call   c000f4d4 <malloc>
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	89 c2                	mov    edx,eax
c001013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010141:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010148:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001014c:	90                   	nop
c001014d:	83 c4 0c             	add    esp,0xc
c0010150:	c3                   	ret    
c0010151:	90                   	nop

c0010152 <VgaText::isAtty()>:
c0010152:	b0 01                	mov    al,0x1
c0010154:	c3                   	ret    
c0010155:	90                   	nop

c0010156 <VgaText::~VgaText()>:
c0010156:	83 ec 0c             	sub    esp,0xc
c0010159:	ba f4 8d 02 c0       	mov    edx,0xc0028df4
c001015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010162:	89 10                	mov    DWORD PTR [eax],edx
c0010164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010168:	83 ec 0c             	sub    esp,0xc
c001016b:	50                   	push   eax
c001016c:	e8 6b 14 00 00       	call   c00115dc <UnixFile::~UnixFile()>
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	90                   	nop
c0010175:	83 c4 0c             	add    esp,0xc
c0010178:	c3                   	ret    
c0010179:	90                   	nop

c001017a <VgaText::~VgaText()>:
c001017a:	83 ec 0c             	sub    esp,0xc
c001017d:	83 ec 0c             	sub    esp,0xc
c0010180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010184:	e8 cd ff ff ff       	call   c0010156 <VgaText::~VgaText()>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	83 ec 08             	sub    esp,0x8
c001018f:	68 60 12 00 00       	push   0x1260
c0010194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010198:	e8 b0 25 00 00       	call   c001274d <operator delete(void*, unsigned long)>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	83 c4 0c             	add    esp,0xc
c00101a3:	c3                   	ret    

c00101a4 <VgaText::read(unsigned long long, void*, int*)>:
c00101a4:	83 ec 10             	sub    esp,0x10
c00101a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b3:	e8 a9 58 00 00       	call   c0015a61 <readKeyboard(VgaText*, char*, unsigned long)>
c00101b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101bc:	89 02                	mov    DWORD PTR [edx],eax
c00101be:	31 c0                	xor    eax,eax
c00101c0:	83 c4 1c             	add    esp,0x1c
c00101c3:	c3                   	ret    

c00101c4 <setTerminalScrollLock(bool)>:
c00101c4:	c3                   	ret    

c00101c5 <addToTerminalCycle(VgaText*)>:
c00101c5:	8b 15 e0 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cae0
c00101cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101cf:	85 d2                	test   edx,edx
c00101d1:	75 0c                	jne    c00101df <addToTerminalCycle(VgaText*)+0x1a>
c00101d3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00101d9:	a3 e0 ca 02 c0       	mov    ds:0xc002cae0,eax
c00101de:	c3                   	ret    
c00101df:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00101e5:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00101eb:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00101f1:	c3                   	ret    

c00101f2 <installVgaTextImplementation()>:
c00101f2:	83 ec 10             	sub    esp,0x10
c00101f5:	6a 20                	push   0x20
c00101f7:	6a 00                	push   0x0
c00101f9:	68 c0 ca 02 c0       	push   0xc002cac0
c00101fe:	e8 88 04 ff ff       	call   c000068b <memset>
c0010203:	83 c4 1c             	add    esp,0x1c
c0010206:	c3                   	ret    

c0010207 <scrollTerminalScrollLock(int)>:
c0010207:	c3                   	ret    

c0010208 <VgaText::load()>:
c0010208:	53                   	push   ebx
c0010209:	31 c0                	xor    eax,eax
c001020b:	83 ec 58             	sub    esp,0x58
c001020e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010212:	89 e2                	mov    edx,esp
c0010214:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010218:	40                   	inc    eax
c0010219:	83 f8 50             	cmp    eax,0x50
c001021c:	75 f6                	jne    c0010214 <VgaText::load()+0xc>
c001021e:	31 c0                	xor    eax,eax
c0010220:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010227:	84 c9                	test   cl,cl
c0010229:	74 06                	je     c0010231 <VgaText::load()+0x29>
c001022b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001022e:	40                   	inc    eax
c001022f:	eb ef                	jmp    c0010220 <VgaText::load()+0x18>
c0010231:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010237:	85 c0                	test   eax,eax
c0010239:	74 09                	je     c0010244 <VgaText::load()+0x3c>
c001023b:	51                   	push   ecx
c001023c:	51                   	push   ecx
c001023d:	52                   	push   edx
c001023e:	53                   	push   ebx
c001023f:	ff d0                	call   eax
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001024a:	85 c0                	test   eax,eax
c001024c:	74 09                	je     c0010257 <VgaText::load()+0x4f>
c001024e:	83 ec 0c             	sub    esp,0xc
c0010251:	53                   	push   ebx
c0010252:	ff d0                	call   eax
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	83 c4 58             	add    esp,0x58
c001025a:	5b                   	pop    ebx
c001025b:	c3                   	ret    

c001025c <VgaText::updateCursor()>:
c001025c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010260:	39 05 e4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cae4,eax
c0010266:	75 0c                	jne    c0010274 <VgaText::updateCursor()+0x18>
c0010268:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001026e:	85 c0                	test   eax,eax
c0010270:	74 02                	je     c0010274 <VgaText::updateCursor()+0x18>
c0010272:	ff e0                	jmp    eax
c0010274:	c3                   	ret    
c0010275:	90                   	nop

c0010276 <VgaText::showCursor(bool)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010284:	c3                   	ret    
c0010285:	90                   	nop

c0010286 <VgaText::disableBlink(bool)>:
c0010286:	56                   	push   esi
c0010287:	53                   	push   ebx
c0010288:	51                   	push   ecx
c0010289:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001028d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010291:	39 1d e4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cae4,ebx
c0010297:	75 18                	jne    c00102b1 <VgaText::disableBlink(bool)+0x2b>
c0010299:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001029f:	85 c0                	test   eax,eax
c00102a1:	74 0e                	je     c00102b1 <VgaText::disableBlink(bool)+0x2b>
c00102a3:	89 f1                	mov    ecx,esi
c00102a5:	52                   	push   edx
c00102a6:	52                   	push   edx
c00102a7:	0f b6 d1             	movzx  edx,cl
c00102aa:	52                   	push   edx
c00102ab:	53                   	push   ebx
c00102ac:	ff d0                	call   eax
c00102ae:	83 c4 10             	add    esp,0x10
c00102b1:	89 f0                	mov    eax,esi
c00102b3:	83 f0 01             	xor    eax,0x1
c00102b6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00102bc:	58                   	pop    eax
c00102bd:	5b                   	pop    ebx
c00102be:	5e                   	pop    esi
c00102bf:	c3                   	ret    

c00102c0 <VgaText::doANSI_SGR(int)>:
c00102c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c8:	85 d2                	test   edx,edx
c00102ca:	75 14                	jne    c00102e0 <VgaText::doANSI_SGR(int)+0x20>
c00102cc:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00102d2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102d8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00102de:	eb 65                	jmp    c0010345 <VgaText::doANSI_SGR(int)+0x85>
c00102e0:	83 fa 07             	cmp    edx,0x7
c00102e3:	75 14                	jne    c00102f9 <VgaText::doANSI_SGR(int)+0x39>
c00102e5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00102eb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00102f1:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00102f7:	eb 4c                	jmp    c0010345 <VgaText::doANSI_SGR(int)+0x85>
c00102f9:	83 fa 1b             	cmp    edx,0x1b
c00102fc:	74 ce                	je     c00102cc <VgaText::doANSI_SGR(int)+0xc>
c00102fe:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010301:	83 f9 07             	cmp    ecx,0x7
c0010304:	77 09                	ja     c001030f <VgaText::doANSI_SGR(int)+0x4f>
c0010306:	8b 14 8d 60 b9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd46a0]
c001030d:	eb 20                	jmp    c001032f <VgaText::doANSI_SGR(int)+0x6f>
c001030f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010312:	83 f9 07             	cmp    ecx,0x7
c0010315:	77 09                	ja     c0010320 <VgaText::doANSI_SGR(int)+0x60>
c0010317:	8b 14 8d 60 b9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd46a0]
c001031e:	eb 25                	jmp    c0010345 <VgaText::doANSI_SGR(int)+0x85>
c0010320:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010323:	83 f9 07             	cmp    ecx,0x7
c0010326:	77 0e                	ja     c0010336 <VgaText::doANSI_SGR(int)+0x76>
c0010328:	8b 14 95 18 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd47e8]
c001032f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010335:	c3                   	ret    
c0010336:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010339:	83 f9 07             	cmp    ecx,0x7
c001033c:	77 0d                	ja     c001034b <VgaText::doANSI_SGR(int)+0x8b>
c001033e:	8b 14 95 f0 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4810]
c0010345:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001034b:	c3                   	ret    

c001034c <VgaText::setDefaultBgColour(VgaColour)>:
c001034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010354:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001035a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010360:	c3                   	ret    
c0010361:	90                   	nop

c0010362 <VgaText::setDefaultFgColour(VgaColour)>:
c0010362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010366:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001036a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010370:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010378:	53                   	push   ebx
c0010379:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001037d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010381:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010385:	51                   	push   ecx
c0010386:	e8 c1 ff ff ff       	call   c001034c <VgaText::setDefaultBgColour(VgaColour)>
c001038b:	58                   	pop    eax
c001038c:	5a                   	pop    edx
c001038d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010391:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010395:	5b                   	pop    ebx
c0010396:	eb ca                	jmp    c0010362 <VgaText::setDefaultFgColour(VgaColour)>

c0010398 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010398:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001039c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a0:	b0 02                	mov    al,0x2
c00103a2:	80 3d a0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002caa0,0x0
c00103a9:	75 0a                	jne    c00103b5 <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c00103ab:	83 e2 0f             	and    edx,0xf
c00103ae:	c1 e1 04             	shl    ecx,0x4
c00103b1:	88 c8                	mov    al,cl
c00103b3:	09 d0                	or     eax,edx
c00103b5:	c3                   	ret    

c00103b6 <VgaText::scrollScreen()>:
c00103b6:	55                   	push   ebp
c00103b7:	57                   	push   edi
c00103b8:	bf 01 00 00 00       	mov    edi,0x1
c00103bd:	56                   	push   esi
c00103be:	53                   	push   ebx
c00103bf:	83 ec 0c             	sub    esp,0xc
c00103c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103c6:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c00103cc:	31 ed                	xor    ebp,ebp
c00103ce:	01 de                	add    esi,ebx
c00103d0:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c00103d3:	83 ff 17             	cmp    edi,0x17
c00103d6:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c00103dc:	75 28                	jne    c0010406 <VgaText::scrollScreen()+0x50>
c00103de:	f7 c5 01 00 00 00    	test   ebp,0x1
c00103e4:	74 1c                	je     c0010402 <VgaText::scrollScreen()+0x4c>
c00103e6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00103ed:	50                   	push   eax
c00103ee:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00103f5:	50                   	push   eax
c00103f6:	e8 9d ff ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00103fb:	5a                   	pop    edx
c00103fc:	59                   	pop    ecx
c00103fd:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c0010400:	eb 04                	jmp    c0010406 <VgaText::scrollScreen()+0x50>
c0010402:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010406:	45                   	inc    ebp
c0010407:	46                   	inc    esi
c0010408:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c001040e:	75 c0                	jne    c00103d0 <VgaText::scrollScreen()+0x1a>
c0010410:	47                   	inc    edi
c0010411:	83 ff 18             	cmp    edi,0x18
c0010414:	75 b0                	jne    c00103c6 <VgaText::scrollScreen()+0x10>
c0010416:	39 1d e4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cae4,ebx
c001041c:	75 24                	jne    c0010442 <VgaText::scrollScreen()+0x8c>
c001041e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010425:	74 08                	je     c001042f <VgaText::scrollScreen()+0x79>
c0010427:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001042d:	eb 13                	jmp    c0010442 <VgaText::scrollScreen()+0x8c>
c001042f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010435:	85 c0                	test   eax,eax
c0010437:	74 09                	je     c0010442 <VgaText::scrollScreen()+0x8c>
c0010439:	83 ec 0c             	sub    esp,0xc
c001043c:	53                   	push   ebx
c001043d:	ff d0                	call   eax
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010446:	83 c4 0c             	add    esp,0xc
c0010449:	5b                   	pop    ebx
c001044a:	5e                   	pop    esi
c001044b:	5f                   	pop    edi
c001044c:	5d                   	pop    ebp
c001044d:	e9 0a fe ff ff       	jmp    c001025c <VgaText::updateCursor()>

c0010452 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010452:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010457:	c1 e0 08             	shl    eax,0x8
c001045a:	89 c2                	mov    edx,eax
c001045c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010461:	09 d0                	or     eax,edx
c0010463:	c3                   	ret    

c0010464 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010464:	53                   	push   ebx
c0010465:	83 ec 08             	sub    esp,0x8
c0010468:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001046c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010471:	50                   	push   eax
c0010472:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010477:	50                   	push   eax
c0010478:	e8 1b ff ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c001047d:	5a                   	pop    edx
c001047e:	0f b6 c0             	movzx  eax,al
c0010481:	59                   	pop    ecx
c0010482:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c0010487:	50                   	push   eax
c0010488:	51                   	push   ecx
c0010489:	e8 c4 ff ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c001048e:	5a                   	pop    edx
c001048f:	5a                   	pop    edx
c0010490:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010496:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001049a:	0f b7 d2             	movzx  edx,dx
c001049d:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00104a2:	39 1d e4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cae4,ebx
c00104a8:	75 14                	jne    c00104be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00104aa:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c00104b0:	85 c0                	test   eax,eax
c00104b2:	74 0a                	je     c00104be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00104b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104b8:	83 c4 08             	add    esp,0x8
c00104bb:	5b                   	pop    ebx
c00104bc:	ff e0                	jmp    eax
c00104be:	83 c4 08             	add    esp,0x8
c00104c1:	5b                   	pop    ebx
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <VgaText::getCursorX()>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <VgaText::getCursorY()>:
c00104d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d4:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::setCursor(int, int)>:
c00104dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104e4:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00104ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104ee:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00104f4:	e9 63 fd ff ff       	jmp    c001025c <VgaText::updateCursor()>
c00104f9:	90                   	nop

c00104fa <VgaText::setCursorX(int)>:
c00104fa:	83 ec 10             	sub    esp,0x10
c00104fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010501:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050b:	50                   	push   eax
c001050c:	e8 cb ff ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c0010511:	83 c4 1c             	add    esp,0x1c
c0010514:	c3                   	ret    
c0010515:	90                   	nop

c0010516 <VgaText::setCursorY(int)>:
c0010516:	83 ec 10             	sub    esp,0x10
c0010519:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001051d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010521:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010527:	50                   	push   eax
c0010528:	e8 af ff ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c001052d:	83 c4 1c             	add    esp,0x1c
c0010530:	c3                   	ret    
c0010531:	90                   	nop

c0010532 <VgaText::incrementCursor(bool)>:
c0010532:	56                   	push   esi
c0010533:	53                   	push   ebx
c0010534:	51                   	push   ecx
c0010535:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010539:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001053d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010543:	40                   	inc    eax
c0010544:	83 f8 50             	cmp    eax,0x50
c0010547:	74 08                	je     c0010551 <VgaText::incrementCursor(bool)+0x1f>
c0010549:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001054f:	eb 33                	jmp    c0010584 <VgaText::incrementCursor(bool)+0x52>
c0010551:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010557:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010561:	8d 50 01             	lea    edx,[eax+0x1]
c0010564:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001056a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010570:	75 12                	jne    c0010584 <VgaText::incrementCursor(bool)+0x52>
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001057b:	53                   	push   ebx
c001057c:	e8 35 fe ff ff       	call   c00103b6 <VgaText::scrollScreen()>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	89 f0                	mov    eax,esi
c0010586:	84 c0                	test   al,al
c0010588:	74 0c                	je     c0010596 <VgaText::incrementCursor(bool)+0x64>
c001058a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001058e:	5a                   	pop    edx
c001058f:	5b                   	pop    ebx
c0010590:	5e                   	pop    esi
c0010591:	e9 c6 fc ff ff       	jmp    c001025c <VgaText::updateCursor()>
c0010596:	58                   	pop    eax
c0010597:	5b                   	pop    ebx
c0010598:	5e                   	pop    esi
c0010599:	c3                   	ret    

c001059a <VgaText::updateRAMUsageDisplay(int)>:
c001059a:	56                   	push   esi
c001059b:	8b 35 40 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b940
c00105a1:	53                   	push   ebx
c00105a2:	6a 0f                	push   0xf
c00105a4:	6a 00                	push   0x0
c00105a6:	e8 ed fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00105ab:	5a                   	pop    edx
c00105ac:	0f b6 c0             	movzx  eax,al
c00105af:	59                   	pop    ecx
c00105b0:	b9 0a 00 00 00       	mov    ecx,0xa
c00105b5:	50                   	push   eax
c00105b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ba:	99                   	cdq    
c00105bb:	f7 f9                	idiv   ecx
c00105bd:	89 d3                	mov    ebx,edx
c00105bf:	83 c0 30             	add    eax,0x30
c00105c2:	83 c3 30             	add    ebx,0x30
c00105c5:	0f be c0             	movsx  eax,al
c00105c8:	0f b6 db             	movzx  ebx,bl
c00105cb:	50                   	push   eax
c00105cc:	e8 81 fe ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d1:	5a                   	pop    edx
c00105d2:	59                   	pop    ecx
c00105d3:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00105da:	6a 0f                	push   0xf
c00105dc:	6a 00                	push   0x0
c00105de:	e8 b5 fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00105e3:	5a                   	pop    edx
c00105e4:	0f b6 c0             	movzx  eax,al
c00105e7:	59                   	pop    ecx
c00105e8:	50                   	push   eax
c00105e9:	53                   	push   ebx
c00105ea:	e8 63 fe ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00105ef:	5b                   	pop    ebx
c00105f0:	5a                   	pop    edx
c00105f1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00105f8:	6a 0f                	push   0xf
c00105fa:	6a 00                	push   0x0
c00105fc:	e8 97 fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010601:	59                   	pop    ecx
c0010602:	0f b6 c0             	movzx  eax,al
c0010605:	5b                   	pop    ebx
c0010606:	50                   	push   eax
c0010607:	6a 25                	push   0x25
c0010609:	e8 44 fe ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c001060e:	5a                   	pop    edx
c001060f:	59                   	pop    ecx
c0010610:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010617:	5b                   	pop    ebx
c0010618:	5e                   	pop    esi
c0010619:	c3                   	ret    

c001061a <VgaText::updateDiskUsage()>:
c001061a:	55                   	push   ebp
c001061b:	57                   	push   edi
c001061c:	8b 3d 40 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b940
c0010622:	56                   	push   esi
c0010623:	53                   	push   ebx
c0010624:	bb 0a 00 00 00       	mov    ebx,0xa
c0010629:	6a 0f                	push   0xf
c001062b:	6a 00                	push   0x0
c001062d:	e8 66 fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010632:	5a                   	pop    edx
c0010633:	8b 35 48 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed48
c0010639:	59                   	pop    ecx
c001063a:	0f b6 c0             	movzx  eax,al
c001063d:	b9 10 27 00 00       	mov    ecx,0x2710
c0010642:	50                   	push   eax
c0010643:	89 f0                	mov    eax,esi
c0010645:	99                   	cdq    
c0010646:	f7 f9                	idiv   ecx
c0010648:	99                   	cdq    
c0010649:	f7 fb                	idiv   ebx
c001064b:	83 c2 30             	add    edx,0x30
c001064e:	0f b6 d2             	movzx  edx,dl
c0010651:	52                   	push   edx
c0010652:	e8 fb fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c0010657:	5d                   	pop    ebp
c0010658:	5a                   	pop    edx
c0010659:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001065d:	6a 0f                	push   0xf
c001065f:	6a 00                	push   0x0
c0010661:	e8 32 fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010666:	59                   	pop    ecx
c0010667:	0f b6 c0             	movzx  eax,al
c001066a:	5d                   	pop    ebp
c001066b:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010670:	50                   	push   eax
c0010671:	89 f0                	mov    eax,esi
c0010673:	99                   	cdq    
c0010674:	f7 fd                	idiv   ebp
c0010676:	99                   	cdq    
c0010677:	f7 fb                	idiv   ebx
c0010679:	8d 42 30             	lea    eax,[edx+0x30]
c001067c:	0f b6 c0             	movzx  eax,al
c001067f:	50                   	push   eax
c0010680:	e8 cd fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c0010685:	5a                   	pop    edx
c0010686:	59                   	pop    ecx
c0010687:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001068e:	6a 0f                	push   0xf
c0010690:	6a 00                	push   0x0
c0010692:	e8 01 fd ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010697:	5a                   	pop    edx
c0010698:	0f b6 c0             	movzx  eax,al
c001069b:	59                   	pop    ecx
c001069c:	b9 64 00 00 00       	mov    ecx,0x64
c00106a1:	50                   	push   eax
c00106a2:	89 f0                	mov    eax,esi
c00106a4:	99                   	cdq    
c00106a5:	f7 f9                	idiv   ecx
c00106a7:	99                   	cdq    
c00106a8:	f7 fb                	idiv   ebx
c00106aa:	8d 42 30             	lea    eax,[edx+0x30]
c00106ad:	0f b6 c0             	movzx  eax,al
c00106b0:	50                   	push   eax
c00106b1:	e8 9c fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00106b6:	5a                   	pop    edx
c00106b7:	59                   	pop    ecx
c00106b8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00106bf:	6a 0f                	push   0xf
c00106c1:	6a 00                	push   0x0
c00106c3:	e8 d0 fc ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00106c8:	5a                   	pop    edx
c00106c9:	0f b6 c0             	movzx  eax,al
c00106cc:	59                   	pop    ecx
c00106cd:	50                   	push   eax
c00106ce:	89 f0                	mov    eax,esi
c00106d0:	99                   	cdq    
c00106d1:	f7 fb                	idiv   ebx
c00106d3:	89 d6                	mov    esi,edx
c00106d5:	99                   	cdq    
c00106d6:	f7 fb                	idiv   ebx
c00106d8:	8d 42 30             	lea    eax,[edx+0x30]
c00106db:	0f b6 c0             	movzx  eax,al
c00106de:	50                   	push   eax
c00106df:	e8 6e fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e4:	5a                   	pop    edx
c00106e5:	59                   	pop    ecx
c00106e6:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00106ed:	6a 0f                	push   0xf
c00106ef:	6a 00                	push   0x0
c00106f1:	e8 a2 fc ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00106f6:	5a                   	pop    edx
c00106f7:	0f b6 c0             	movzx  eax,al
c00106fa:	59                   	pop    ecx
c00106fb:	50                   	push   eax
c00106fc:	8d 46 30             	lea    eax,[esi+0x30]
c00106ff:	0f b6 f0             	movzx  esi,al
c0010702:	56                   	push   esi
c0010703:	e8 4a fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c0010708:	5e                   	pop    esi
c0010709:	5a                   	pop    edx
c001070a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010711:	6a 0f                	push   0xf
c0010713:	6a 00                	push   0x0
c0010715:	e8 7e fc ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c001071a:	59                   	pop    ecx
c001071b:	0f b6 c0             	movzx  eax,al
c001071e:	5e                   	pop    esi
c001071f:	b9 10 27 00 00       	mov    ecx,0x2710
c0010724:	8b 35 44 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed44
c001072a:	50                   	push   eax
c001072b:	89 f0                	mov    eax,esi
c001072d:	99                   	cdq    
c001072e:	f7 f9                	idiv   ecx
c0010730:	99                   	cdq    
c0010731:	f7 fb                	idiv   ebx
c0010733:	8d 42 30             	lea    eax,[edx+0x30]
c0010736:	0f b6 c0             	movzx  eax,al
c0010739:	50                   	push   eax
c001073a:	e8 13 fd ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c001073f:	5a                   	pop    edx
c0010740:	59                   	pop    ecx
c0010741:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010748:	6a 0f                	push   0xf
c001074a:	6a 00                	push   0x0
c001074c:	e8 47 fc ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010751:	5a                   	pop    edx
c0010752:	0f b6 c0             	movzx  eax,al
c0010755:	59                   	pop    ecx
c0010756:	50                   	push   eax
c0010757:	89 f0                	mov    eax,esi
c0010759:	99                   	cdq    
c001075a:	f7 fd                	idiv   ebp
c001075c:	99                   	cdq    
c001075d:	f7 fb                	idiv   ebx
c001075f:	83 c2 30             	add    edx,0x30
c0010762:	0f b6 d2             	movzx  edx,dl
c0010765:	52                   	push   edx
c0010766:	e8 e7 fc ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c001076b:	5d                   	pop    ebp
c001076c:	5a                   	pop    edx
c001076d:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010774:	6a 0f                	push   0xf
c0010776:	6a 00                	push   0x0
c0010778:	e8 1b fc ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c001077d:	59                   	pop    ecx
c001077e:	0f b6 c0             	movzx  eax,al
c0010781:	5d                   	pop    ebp
c0010782:	b9 64 00 00 00       	mov    ecx,0x64
c0010787:	50                   	push   eax
c0010788:	89 f0                	mov    eax,esi
c001078a:	99                   	cdq    
c001078b:	f7 f9                	idiv   ecx
c001078d:	99                   	cdq    
c001078e:	f7 fb                	idiv   ebx
c0010790:	83 c2 30             	add    edx,0x30
c0010793:	0f b6 d2             	movzx  edx,dl
c0010796:	52                   	push   edx
c0010797:	e8 b6 fc ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c001079c:	5a                   	pop    edx
c001079d:	59                   	pop    ecx
c001079e:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00107a5:	6a 0f                	push   0xf
c00107a7:	6a 00                	push   0x0
c00107a9:	e8 ea fb ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00107ae:	5d                   	pop    ebp
c00107af:	0f b6 c0             	movzx  eax,al
c00107b2:	5a                   	pop    edx
c00107b3:	50                   	push   eax
c00107b4:	89 f0                	mov    eax,esi
c00107b6:	99                   	cdq    
c00107b7:	f7 fb                	idiv   ebx
c00107b9:	89 d6                	mov    esi,edx
c00107bb:	99                   	cdq    
c00107bc:	f7 fb                	idiv   ebx
c00107be:	8d 42 30             	lea    eax,[edx+0x30]
c00107c1:	0f b6 c0             	movzx  eax,al
c00107c4:	50                   	push   eax
c00107c5:	e8 88 fc ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00107ca:	59                   	pop    ecx
c00107cb:	5b                   	pop    ebx
c00107cc:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00107d3:	6a 0f                	push   0xf
c00107d5:	6a 00                	push   0x0
c00107d7:	e8 bc fb ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c00107dc:	5d                   	pop    ebp
c00107dd:	0f b6 c0             	movzx  eax,al
c00107e0:	5a                   	pop    edx
c00107e1:	50                   	push   eax
c00107e2:	8d 46 30             	lea    eax,[esi+0x30]
c00107e5:	0f b6 f0             	movzx  esi,al
c00107e8:	56                   	push   esi
c00107e9:	e8 64 fc ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c00107ee:	59                   	pop    ecx
c00107ef:	5b                   	pop    ebx
c00107f0:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00107f7:	5b                   	pop    ebx
c00107f8:	5e                   	pop    esi
c00107f9:	5f                   	pop    edi
c00107fa:	5d                   	pop    ebp
c00107fb:	c3                   	ret    

c00107fc <VgaText::updateTitle()>:
c00107fc:	53                   	push   ebx
c00107fd:	31 c0                	xor    eax,eax
c00107ff:	83 ec 58             	sub    esp,0x58
c0010802:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010806:	89 e1                	mov    ecx,esp
c0010808:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001080c:	40                   	inc    eax
c001080d:	83 f8 50             	cmp    eax,0x50
c0010810:	75 f6                	jne    c0010808 <VgaText::updateTitle()+0xc>
c0010812:	31 c0                	xor    eax,eax
c0010814:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001081b:	84 db                	test   bl,bl
c001081d:	74 06                	je     c0010825 <VgaText::updateTitle()+0x29>
c001081f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010822:	40                   	inc    eax
c0010823:	eb ef                	jmp    c0010814 <VgaText::updateTitle()+0x18>
c0010825:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001082b:	85 c0                	test   eax,eax
c001082d:	74 09                	je     c0010838 <VgaText::updateTitle()+0x3c>
c001082f:	53                   	push   ebx
c0010830:	53                   	push   ebx
c0010831:	51                   	push   ecx
c0010832:	52                   	push   edx
c0010833:	ff d0                	call   eax
c0010835:	83 c4 10             	add    esp,0x10
c0010838:	e8 dd fd ff ff       	call   c001061a <VgaText::updateDiskUsage()>
c001083d:	83 c4 58             	add    esp,0x58
c0010840:	5b                   	pop    ebx
c0010841:	c3                   	ret    

c0010842 <VgaText::setTitleTextColour(VgaColour)>:
c0010842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001084a:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010850:	eb aa                	jmp    c00107fc <VgaText::updateTitle()>

c0010852 <VgaText::setTitleColour(VgaColour)>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085a:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010860:	eb 9a                	jmp    c00107fc <VgaText::updateTitle()>

c0010862 <VgaText::setTitle(char*)>:
c0010862:	53                   	push   ebx
c0010863:	83 ec 10             	sub    esp,0x10
c0010866:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001086a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086e:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010874:	50                   	push   eax
c0010875:	e8 b0 fe fe ff       	call   c000072a <strcpy>
c001087a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001087e:	83 c4 18             	add    esp,0x18
c0010881:	5b                   	pop    ebx
c0010882:	e9 75 ff ff ff       	jmp    c00107fc <VgaText::updateTitle()>
c0010887:	90                   	nop

c0010888 <VgaText::decrementCursor(bool)>:
c0010888:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001088c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010890:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010896:	85 c0                	test   eax,eax
c0010898:	74 07                	je     c00108a1 <VgaText::decrementCursor(bool)+0x19>
c001089a:	48                   	dec    eax
c001089b:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00108a1:	84 c9                	test   cl,cl
c00108a3:	74 09                	je     c00108ae <VgaText::decrementCursor(bool)+0x26>
c00108a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00108a9:	e9 ae f9 ff ff       	jmp    c001025c <VgaText::updateCursor()>
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00108b0:	53                   	push   ebx
c00108b1:	83 ec 08             	sub    esp,0x8
c00108b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00108c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00108c4:	3c 07                	cmp    al,0x7
c00108c6:	75 2a                	jne    c00108f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00108c8:	a1 8c cb 02 c0       	mov    eax,ds:0xc002cb8c
c00108cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00108d5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00108dd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00108e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108e9:	83 c4 08             	add    esp,0x8
c00108ec:	5b                   	pop    ebx
c00108ed:	e9 3a 2d 00 00       	jmp    c001362c <Buzzer::beep(int, int, bool)>
c00108f2:	3c 0d                	cmp    al,0xd
c00108f4:	75 0c                	jne    c0010902 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00108f6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010900:	eb 3b                	jmp    c001093d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010902:	3c 0a                	cmp    al,0xa
c0010904:	75 40                	jne    c0010946 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010906:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001090c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010916:	8d 50 01             	lea    edx,[eax+0x1]
c0010919:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001091f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010925:	75 12                	jne    c0010939 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010927:	83 ec 0c             	sub    esp,0xc
c001092a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010930:	53                   	push   ebx
c0010931:	e8 80 fa ff ff       	call   c00103b6 <VgaText::scrollScreen()>
c0010936:	83 c4 10             	add    esp,0x10
c0010939:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001093d:	83 c4 08             	add    esp,0x8
c0010940:	5b                   	pop    ebx
c0010941:	e9 16 f9 ff ff       	jmp    c001025c <VgaText::updateCursor()>
c0010946:	3c 08                	cmp    al,0x8
c0010948:	75 31                	jne    c001097b <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c001094a:	50                   	push   eax
c001094b:	50                   	push   eax
c001094c:	6a 01                	push   0x1
c001094e:	53                   	push   ebx
c001094f:	e8 34 ff ff ff       	call   c0010888 <VgaText::decrementCursor(bool)>
c0010954:	5a                   	pop    edx
c0010955:	59                   	pop    ecx
c0010956:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001095c:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010962:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010968:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001096e:	6a 20                	push   0x20
c0010970:	53                   	push   ebx
c0010971:	e8 ee fa ff ff       	call   c0010464 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010976:	83 c4 28             	add    esp,0x28
c0010979:	5b                   	pop    ebx
c001097a:	c3                   	ret    
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	0f be c0             	movsx  eax,al
c0010981:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010987:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001098d:	51                   	push   ecx
c001098e:	52                   	push   edx
c001098f:	50                   	push   eax
c0010990:	53                   	push   ebx
c0010991:	e8 ce fa ff ff       	call   c0010464 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010996:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001099a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00109a2:	83 c4 28             	add    esp,0x28
c00109a5:	5b                   	pop    ebx
c00109a6:	e9 87 fb ff ff       	jmp    c0010532 <VgaText::incrementCursor(bool)>
c00109ab:	90                   	nop

c00109ac <VgaText::isShowingCursor()>:
c00109ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109b0:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00109b6:	c3                   	ret    
c00109b7:	90                   	nop

c00109b8 <VgaText::isBlinkDisabled()>:
c00109b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109bc:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00109c2:	83 f0 01             	xor    eax,0x1
c00109c5:	c3                   	ret    

c00109c6 <VgaText::setCursorHeight(int)>:
c00109c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109ce:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00109d4:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00109db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00109df:	e9 92 f8 ff ff       	jmp    c0010276 <VgaText::showCursor(bool)>

c00109e4 <VgaText::getCursorHeight()>:
c00109e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109e8:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00109ee:	c3                   	ret    

c00109ef <setActiveTerminal(VgaText*)>:
c00109ef:	53                   	push   ebx
c00109f0:	83 ec 08             	sub    esp,0x8
c00109f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109f7:	85 db                	test   ebx,ebx
c00109f9:	75 11                	jne    c0010a0c <setActiveTerminal(VgaText*)+0x1d>
c00109fb:	c7 44 24 10 4c 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d4c
c0010a03:	83 c4 08             	add    esp,0x8
c0010a06:	5b                   	pop    ebx
c0010a07:	e9 3b 8f 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c0010a0c:	50                   	push   eax
c0010a0d:	50                   	push   eax
c0010a0e:	53                   	push   ebx
c0010a0f:	68 5a 8d 02 c0       	push   0xc0028d5a
c0010a14:	e8 14 1e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0010a19:	a1 e4 ca 02 c0       	mov    eax,ds:0xc002cae4
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	85 c0                	test   eax,eax
c0010a23:	74 0c                	je     c0010a31 <setActiveTerminal(VgaText*)+0x42>
c0010a25:	83 ec 0c             	sub    esp,0xc
c0010a28:	50                   	push   eax
c0010a29:	e8 2e f8 ff ff       	call   c001025c <VgaText::updateCursor()>
c0010a2e:	83 c4 10             	add    esp,0x10
c0010a31:	89 1d e4 ca 02 c0    	mov    DWORD PTR ds:0xc002cae4,ebx
c0010a37:	51                   	push   ecx
c0010a38:	51                   	push   ecx
c0010a39:	53                   	push   ebx
c0010a3a:	68 72 8d 02 c0       	push   0xc0028d72
c0010a3f:	e8 e9 1d 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0010a44:	83 c4 0c             	add    esp,0xc
c0010a47:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a4d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a53:	53                   	push   ebx
c0010a54:	e8 83 fa ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c0010a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a5c:	e8 57 ff ff ff       	call   c00109b8 <VgaText::isBlinkDisabled()>
c0010a61:	5a                   	pop    edx
c0010a62:	0f b6 c0             	movzx  eax,al
c0010a65:	59                   	pop    ecx
c0010a66:	50                   	push   eax
c0010a67:	53                   	push   ebx
c0010a68:	e8 19 f8 ff ff       	call   c0010286 <VgaText::disableBlink(bool)>
c0010a6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a70:	e8 6f ff ff ff       	call   c00109e4 <VgaText::getCursorHeight()>
c0010a75:	5a                   	pop    edx
c0010a76:	59                   	pop    ecx
c0010a77:	50                   	push   eax
c0010a78:	53                   	push   ebx
c0010a79:	e8 48 ff ff ff       	call   c00109c6 <VgaText::setCursorHeight(int)>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010a88:	75 0a                	jne    c0010a94 <setActiveTerminal(VgaText*)+0xa5>
c0010a8a:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010a94:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a98:	83 c4 08             	add    esp,0x8
c0010a9b:	5b                   	pop    ebx
c0010a9c:	e9 67 f7 ff ff       	jmp    c0010208 <VgaText::load()>

c0010aa1 <doTerminalCycle()>:
c0010aa1:	83 ec 18             	sub    esp,0x18
c0010aa4:	a1 e0 ca 02 c0       	mov    eax,ds:0xc002cae0
c0010aa9:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010aaf:	50                   	push   eax
c0010ab0:	a3 e0 ca 02 c0       	mov    ds:0xc002cae0,eax
c0010ab5:	e8 35 ff ff ff       	call   c00109ef <setActiveTerminal(VgaText*)>
c0010aba:	83 c4 1c             	add    esp,0x1c
c0010abd:	c3                   	ret    

c0010abe <VgaText::doUpdate()>:
c0010abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ac2:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	74 02                	je     c0010ace <VgaText::doUpdate()+0x10>
c0010acc:	ff e0                	jmp    eax
c0010ace:	c3                   	ret    
c0010acf:	90                   	nop

c0010ad0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010ad0:	55                   	push   ebp
c0010ad1:	57                   	push   edi
c0010ad2:	56                   	push   esi
c0010ad3:	53                   	push   ebx
c0010ad4:	83 ec 1c             	sub    esp,0x1c
c0010ad7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010adb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ae0:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ae7:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010aea:	50                   	push   eax
c0010aeb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010af0:	50                   	push   eax
c0010af1:	e8 a2 f8 ff ff       	call   c0010398 <VgaText::combineColours(unsigned char, unsigned char)>
c0010af6:	59                   	pop    ecx
c0010af7:	0f b6 c0             	movzx  eax,al
c0010afa:	5b                   	pop    ebx
c0010afb:	31 c9                	xor    ecx,ecx
c0010afd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010b09:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b13:	0f b7 db             	movzx  ebx,bx
c0010b16:	01 db                	add    ebx,ebx
c0010b18:	01 fb                	add    ebx,edi
c0010b1a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010b1d:	84 c0                	test   al,al
c0010b1f:	0f 84 38 01 00 00    	je     c0010c5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010b25:	3c 0d                	cmp    al,0xd
c0010b27:	75 0f                	jne    c0010b38 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010b29:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010b33:	e9 1f 01 00 00       	jmp    c0010c57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b38:	3c 0a                	cmp    al,0xa
c0010b3a:	75 5b                	jne    c0010b97 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010b3c:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010b42:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010b4c:	8d 48 01             	lea    ecx,[eax+0x1]
c0010b4f:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010b55:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010b5b:	75 12                	jne    c0010b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010b66:	55                   	push   ebp
c0010b67:	e8 4a f8 ff ff       	call   c00103b6 <VgaText::scrollScreen()>
c0010b6c:	83 c4 10             	add    esp,0x10
c0010b6f:	83 ec 0c             	sub    esp,0xc
c0010b72:	55                   	push   ebp
c0010b73:	e8 e4 f6 ff ff       	call   c001025c <VgaText::updateCursor()>
c0010b78:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b80:	83 c4 10             	add    esp,0x10
c0010b83:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b89:	31 c9                	xor    ecx,ecx
c0010b8b:	0f b7 db             	movzx  ebx,bx
c0010b8e:	01 db                	add    ebx,ebx
c0010b90:	01 fb                	add    ebx,edi
c0010b92:	e9 c0 00 00 00       	jmp    c0010c57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b97:	3c 08                	cmp    al,0x8
c0010b99:	75 4e                	jne    c0010be9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010b9b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b9f:	53                   	push   ebx
c0010ba0:	53                   	push   ebx
c0010ba1:	6a 01                	push   0x1
c0010ba3:	55                   	push   ebp
c0010ba4:	e8 df fc ff ff       	call   c0010888 <VgaText::decrementCursor(bool)>
c0010ba9:	58                   	pop    eax
c0010baa:	5a                   	pop    edx
c0010bab:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010bb1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010bb7:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010bbd:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010bc3:	6a 20                	push   0x20
c0010bc5:	55                   	push   ebp
c0010bc6:	e8 99 f8 ff ff       	call   c0010464 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bcb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bd3:	83 c4 20             	add    esp,0x20
c0010bd6:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bdc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010be0:	0f b7 db             	movzx  ebx,bx
c0010be3:	01 db                	add    ebx,ebx
c0010be5:	01 fb                	add    ebx,edi
c0010be7:	eb 6e                	jmp    c0010c57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010be9:	51                   	push   ecx
c0010bea:	51                   	push   ecx
c0010beb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010bef:	50                   	push   eax
c0010bf0:	e8 5d f8 ff ff       	call   c0010452 <VgaText::combineCharAndColour(char, unsigned char)>
c0010bf5:	83 c4 10             	add    esp,0x10
c0010bf8:	66 89 03             	mov    WORD PTR [ebx],ax
c0010bfb:	39 2d e4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cae4,ebp
c0010c01:	75 2a                	jne    c0010c2d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010c03:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010c09:	85 c0                	test   eax,eax
c0010c0b:	74 20                	je     c0010c2d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010c0d:	52                   	push   edx
c0010c0e:	52                   	push   edx
c0010c0f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c15:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010c1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010c23:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010c26:	51                   	push   ecx
c0010c27:	55                   	push   ebp
c0010c28:	ff d0                	call   eax
c0010c2a:	83 c4 20             	add    esp,0x20
c0010c2d:	83 c3 02             	add    ebx,0x2
c0010c30:	50                   	push   eax
c0010c31:	50                   	push   eax
c0010c32:	6a 00                	push   0x0
c0010c34:	55                   	push   ebp
c0010c35:	e8 f8 f8 ff ff       	call   c0010532 <VgaText::incrementCursor(bool)>
c0010c3a:	83 c4 10             	add    esp,0x10
c0010c3d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010c44:	75 0f                	jne    c0010c55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010c46:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c4e:	0f b7 db             	movzx  ebx,bx
c0010c51:	01 db                	add    ebx,ebx
c0010c53:	01 fb                	add    ebx,edi
c0010c55:	b1 01                	mov    cl,0x1
c0010c57:	46                   	inc    esi
c0010c58:	e9 bd fe ff ff       	jmp    c0010b1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010c5d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	55                   	push   ebp
c0010c65:	e8 f2 f5 ff ff       	call   c001025c <VgaText::updateCursor()>
c0010c6a:	83 c4 10             	add    esp,0x10
c0010c6d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010c71:	84 c9                	test   cl,cl
c0010c73:	74 0c                	je     c0010c81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	55                   	push   ebp
c0010c79:	e8 40 fe ff ff       	call   c0010abe <VgaText::doUpdate()>
c0010c7e:	83 c4 10             	add    esp,0x10
c0010c81:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010c88:	83 c4 1c             	add    esp,0x1c
c0010c8b:	5b                   	pop    ebx
c0010c8c:	5e                   	pop    esi
c0010c8d:	5f                   	pop    edi
c0010c8e:	5d                   	pop    ebp
c0010c8f:	c3                   	ret    

c0010c90 <VgaText::clearScreen()>:
c0010c90:	57                   	push   edi
c0010c91:	56                   	push   esi
c0010c92:	31 f6                	xor    esi,esi
c0010c94:	53                   	push   ebx
c0010c95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c99:	52                   	push   edx
c0010c9a:	6a 00                	push   0x0
c0010c9c:	6a 00                	push   0x0
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 38 f8 ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c0010ca4:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010cab:	83 c4 10             	add    esp,0x10
c0010cae:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010cb4:	7e 26                	jle    c0010cdc <VgaText::clearScreen()+0x4c>
c0010cb6:	31 ff                	xor    edi,edi
c0010cb8:	50                   	push   eax
c0010cb9:	50                   	push   eax
c0010cba:	56                   	push   esi
c0010cbb:	57                   	push   edi
c0010cbc:	47                   	inc    edi
c0010cbd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cc3:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cc9:	6a 20                	push   0x20
c0010ccb:	53                   	push   ebx
c0010ccc:	e8 93 f7 ff ff       	call   c0010464 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd1:	83 c4 20             	add    esp,0x20
c0010cd4:	83 ff 50             	cmp    edi,0x50
c0010cd7:	75 df                	jne    c0010cb8 <VgaText::clearScreen()+0x28>
c0010cd9:	46                   	inc    esi
c0010cda:	eb d2                	jmp    c0010cae <VgaText::clearScreen()+0x1e>
c0010cdc:	83 ec 0c             	sub    esp,0xc
c0010cdf:	53                   	push   ebx
c0010ce0:	e8 d9 fd ff ff       	call   c0010abe <VgaText::doUpdate()>
c0010ce5:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	5b                   	pop    ebx
c0010cf0:	5e                   	pop    esi
c0010cf1:	5f                   	pop    edi
c0010cf2:	c3                   	ret    
c0010cf3:	90                   	nop

c0010cf4 <VgaText::putchar(char)>:
c0010cf4:	56                   	push   esi
c0010cf5:	53                   	push   ebx
c0010cf6:	83 ec 14             	sub    esp,0x14
c0010cf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d01:	3c 5b                	cmp    al,0x5b
c0010d03:	75 21                	jne    c0010d26 <VgaText::putchar(char)+0x32>
c0010d05:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010d0c:	74 28                	je     c0010d36 <VgaText::putchar(char)+0x42>
c0010d0e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010d17:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010d21:	e9 e2 00 00 00       	jmp    c0010e08 <VgaText::putchar(char)+0x114>
c0010d26:	3c 1b                	cmp    al,0x1b
c0010d28:	75 0c                	jne    c0010d36 <VgaText::putchar(char)+0x42>
c0010d2a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010d31:	e9 d2 00 00 00       	jmp    c0010e08 <VgaText::putchar(char)+0x114>
c0010d36:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010d3c:	84 c9                	test   cl,cl
c0010d3e:	0f 84 ab 00 00 00    	je     c0010def <VgaText::putchar(char)+0xfb>
c0010d44:	8d 50 c0             	lea    edx,[eax-0x40]
c0010d47:	80 fa 3e             	cmp    dl,0x3e
c0010d4a:	0f 87 82 00 00 00    	ja     c0010dd2 <VgaText::putchar(char)+0xde>
c0010d50:	3c 6d                	cmp    al,0x6d
c0010d52:	75 4d                	jne    c0010da1 <VgaText::putchar(char)+0xad>
c0010d54:	31 f6                	xor    esi,esi
c0010d56:	31 d2                	xor    edx,edx
c0010d58:	31 c0                	xor    eax,eax
c0010d5a:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010d60:	7e 30                	jle    c0010d92 <VgaText::putchar(char)+0x9e>
c0010d62:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010d6a:	80 fa 3b             	cmp    dl,0x3b
c0010d6d:	75 17                	jne    c0010d86 <VgaText::putchar(char)+0x92>
c0010d6f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010d73:	50                   	push   eax
c0010d74:	53                   	push   ebx
c0010d75:	e8 46 f5 ff ff       	call   c00102c0 <VgaText::doANSI_SGR(int)>
c0010d7a:	59                   	pop    ecx
c0010d7b:	31 d2                	xor    edx,edx
c0010d7d:	58                   	pop    eax
c0010d7e:	31 c0                	xor    eax,eax
c0010d80:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d84:	eb 09                	jmp    c0010d8f <VgaText::putchar(char)+0x9b>
c0010d86:	6b c0 0a             	imul   eax,eax,0xa
c0010d89:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010d8d:	88 ca                	mov    dl,cl
c0010d8f:	46                   	inc    esi
c0010d90:	eb c8                	jmp    c0010d5a <VgaText::putchar(char)+0x66>
c0010d92:	84 d2                	test   dl,dl
c0010d94:	74 31                	je     c0010dc7 <VgaText::putchar(char)+0xd3>
c0010d96:	50                   	push   eax
c0010d97:	53                   	push   ebx
c0010d98:	e8 23 f5 ff ff       	call   c00102c0 <VgaText::doANSI_SGR(int)>
c0010d9d:	58                   	pop    eax
c0010d9e:	5a                   	pop    edx
c0010d9f:	eb 26                	jmp    c0010dc7 <VgaText::putchar(char)+0xd3>
c0010da1:	3c 4a                	cmp    al,0x4a
c0010da3:	75 22                	jne    c0010dc7 <VgaText::putchar(char)+0xd3>
c0010da5:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010dac:	75 19                	jne    c0010dc7 <VgaText::putchar(char)+0xd3>
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	53                   	push   ebx
c0010db2:	e8 d9 fe ff ff       	call   c0010c90 <VgaText::clearScreen()>
c0010db7:	83 c4 0c             	add    esp,0xc
c0010dba:	6a 00                	push   0x0
c0010dbc:	6a 00                	push   0x0
c0010dbe:	53                   	push   ebx
c0010dbf:	e8 18 f7 ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010dd0:	eb 36                	jmp    c0010e08 <VgaText::putchar(char)+0x114>
c0010dd2:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010dd8:	83 fa 0e             	cmp    edx,0xe
c0010ddb:	7f 2b                	jg     c0010e08 <VgaText::putchar(char)+0x114>
c0010ddd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010de0:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010de6:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010ded:	eb 19                	jmp    c0010e08 <VgaText::putchar(char)+0x114>
c0010def:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010df5:	0f be c0             	movsx  eax,al
c0010df8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010dfe:	50                   	push   eax
c0010dff:	53                   	push   ebx
c0010e00:	e8 ab fa ff ff       	call   c00108b0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	83 c4 14             	add    esp,0x14
c0010e0b:	5b                   	pop    ebx
c0010e0c:	5e                   	pop    esi
c0010e0d:	c3                   	ret    

c0010e0e <VgaText::puts(char const*)>:
c0010e0e:	53                   	push   ebx
c0010e0f:	83 ec 08             	sub    esp,0x8
c0010e12:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010e16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010e19:	84 c0                	test   al,al
c0010e1b:	74 12                	je     c0010e2f <VgaText::puts(char const*)+0x21>
c0010e1d:	43                   	inc    ebx
c0010e1e:	51                   	push   ecx
c0010e1f:	51                   	push   ecx
c0010e20:	50                   	push   eax
c0010e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e25:	e8 ca fe ff ff       	call   c0010cf4 <VgaText::putchar(char)>
c0010e2a:	83 c4 10             	add    esp,0x10
c0010e2d:	eb e7                	jmp    c0010e16 <VgaText::puts(char const*)+0x8>
c0010e2f:	83 c4 08             	add    esp,0x8
c0010e32:	5b                   	pop    ebx
c0010e33:	c3                   	ret    

c0010e34 <VgaText::putx(unsigned int)>:
c0010e34:	57                   	push   edi
c0010e35:	b9 11 00 00 00       	mov    ecx,0x11
c0010e3a:	56                   	push   esi
c0010e3b:	be 8e 8d 02 c0       	mov    esi,0xc0028d8e
c0010e40:	53                   	push   ebx
c0010e41:	83 ec 20             	sub    esp,0x20
c0010e44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e48:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010e4c:	fc                   	cld    
c0010e4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e4f:	be 08 00 00 00       	mov    esi,0x8
c0010e54:	50                   	push   eax
c0010e55:	50                   	push   eax
c0010e56:	89 d8                	mov    eax,ebx
c0010e58:	c1 e3 04             	shl    ebx,0x4
c0010e5b:	c1 e8 1c             	shr    eax,0x1c
c0010e5e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010e63:	50                   	push   eax
c0010e64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e68:	e8 87 fe ff ff       	call   c0010cf4 <VgaText::putchar(char)>
c0010e6d:	83 c4 10             	add    esp,0x10
c0010e70:	4e                   	dec    esi
c0010e71:	75 e1                	jne    c0010e54 <VgaText::putx(unsigned int)+0x20>
c0010e73:	83 c4 20             	add    esp,0x20
c0010e76:	5b                   	pop    ebx
c0010e77:	5e                   	pop    esi
c0010e78:	5f                   	pop    edi
c0010e79:	c3                   	ret    

c0010e7a <VgaText::VgaText(char const*)>:
c0010e7a:	57                   	push   edi
c0010e7b:	56                   	push   esi
c0010e7c:	53                   	push   ebx
c0010e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e81:	83 ec 08             	sub    esp,0x8
c0010e84:	6a 00                	push   0x0
c0010e86:	50                   	push   eax
c0010e87:	e8 6e 05 00 00       	call   c00113fa <UnixFile::UnixFile(int)>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	ba f4 8d 02 c0       	mov    edx,0xc0028df4
c0010e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e98:	89 10                	mov    DWORD PTR [eax],edx
c0010e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9e:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eac:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eba:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ec5:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed0:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ede:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eec:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ef7:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f02:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010f08:	bb c0 ca 02 c0       	mov    ebx,0xc002cac0
c0010f0d:	b8 08 00 00 00       	mov    eax,0x8
c0010f12:	fc                   	cld    
c0010f13:	89 d7                	mov    edi,edx
c0010f15:	89 de                	mov    esi,ebx
c0010f17:	89 c1                	mov    ecx,eax
c0010f19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1f:	05 1e 10 00 00       	add    eax,0x101e
c0010f24:	83 ec 08             	sub    esp,0x8
c0010f27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f2b:	50                   	push   eax
c0010f2c:	e8 f9 f7 fe ff       	call   c000072a <strcpy>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f38:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	83 c0 0c             	add    eax,0xc
c0010f49:	83 ec 04             	sub    esp,0x4
c0010f4c:	68 00 0f 00 00       	push   0xf00
c0010f51:	6a 00                	push   0x0
c0010f53:	50                   	push   eax
c0010f54:	e8 32 f7 fe ff       	call   c000068b <memset>
c0010f59:	83 c4 10             	add    esp,0x10
c0010f5c:	83 ec 04             	sub    esp,0x4
c0010f5f:	6a 00                	push   0x0
c0010f61:	6a 07                	push   0x7
c0010f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f67:	e8 0c f4 ff ff       	call   c0010378 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	83 ec 08             	sub    esp,0x8
c0010f72:	6a 02                	push   0x2
c0010f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f78:	e8 49 fa ff ff       	call   c00109c6 <VgaText::setCursorHeight(int)>
c0010f7d:	83 c4 10             	add    esp,0x10
c0010f80:	83 ec 04             	sub    esp,0x4
c0010f83:	6a 00                	push   0x0
c0010f85:	6a 00                	push   0x0
c0010f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f8b:	e8 4c f5 ff ff       	call   c00104dc <VgaText::setCursor(int, int)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	6a 01                	push   0x1
c0010f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9c:	e8 d5 f2 ff ff       	call   c0010276 <VgaText::showCursor(bool)>
c0010fa1:	83 c4 10             	add    esp,0x10
c0010fa4:	83 ec 08             	sub    esp,0x8
c0010fa7:	6a 01                	push   0x1
c0010fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fad:	e8 d4 f2 ff ff       	call   c0010286 <VgaText::disableBlink(bool)>
c0010fb2:	83 c4 10             	add    esp,0x10
c0010fb5:	83 ec 0c             	sub    esp,0xc
c0010fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbc:	e8 cf fc ff ff       	call   c0010c90 <VgaText::clearScreen()>
c0010fc1:	83 c4 10             	add    esp,0x10
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd3:	05 9e 10 00 00       	add    eax,0x109e
c0010fd8:	83 ec 04             	sub    esp,0x4
c0010fdb:	68 96 00 00 00       	push   0x96
c0010fe0:	6a 00                	push   0x0
c0010fe2:	50                   	push   eax
c0010fe3:	e8 a3 f6 fe ff       	call   c000068b <memset>
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fef:	05 34 11 00 00       	add    eax,0x1134
c0010ff4:	83 ec 04             	sub    esp,0x4
c0010ff7:	68 2c 01 00 00       	push   0x12c
c0010ffc:	6a 00                	push   0x0
c0010ffe:	50                   	push   eax
c0010fff:	e8 87 f6 fe ff       	call   c000068b <memset>
c0011004:	83 c4 10             	add    esp,0x10
c0011007:	90                   	nop
c0011008:	5b                   	pop    ebx
c0011009:	5e                   	pop    esi
c001100a:	5f                   	pop    edi
c001100b:	c3                   	ret    

c001100c <VgaText::receiveKey(unsigned char)>:
c001100c:	55                   	push   ebp
c001100d:	57                   	push   edi
c001100e:	56                   	push   esi
c001100f:	53                   	push   ebx
c0011010:	83 ec 1c             	sub    esp,0x1c
c0011013:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011017:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001101b:	84 db                	test   bl,bl
c001101d:	0f 84 c9 00 00 00    	je     c00110ec <VgaText::receiveKey(unsigned char)+0xe0>
c0011023:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011029:	80 fb 08             	cmp    bl,0x8
c001102c:	75 2c                	jne    c001105a <VgaText::receiveKey(unsigned char)+0x4e>
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	57                   	push   edi
c0011032:	e8 71 f6 fe ff       	call   c00006a8 <strlen>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	85 c0                	test   eax,eax
c001103c:	74 41                	je     c001107f <VgaText::receiveKey(unsigned char)+0x73>
c001103e:	50                   	push   eax
c001103f:	50                   	push   eax
c0011040:	6a 08                	push   0x8
c0011042:	56                   	push   esi
c0011043:	e8 ac fc ff ff       	call   c0010cf4 <VgaText::putchar(char)>
c0011048:	89 3c 24             	mov    DWORD PTR [esp],edi
c001104b:	e8 58 f6 fe ff       	call   c00006a8 <strlen>
c0011050:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011058:	eb 22                	jmp    c001107c <VgaText::receiveKey(unsigned char)+0x70>
c001105a:	0f be c3             	movsx  eax,bl
c001105d:	52                   	push   edx
c001105e:	52                   	push   edx
c001105f:	50                   	push   eax
c0011060:	56                   	push   esi
c0011061:	e8 8e fc ff ff       	call   c0010cf4 <VgaText::putchar(char)>
c0011066:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001106a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001106f:	59                   	pop    ecx
c0011070:	5d                   	pop    ebp
c0011071:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011075:	50                   	push   eax
c0011076:	57                   	push   edi
c0011077:	e8 65 f7 fe ff       	call   c00007e1 <strcat>
c001107c:	83 c4 10             	add    esp,0x10
c001107f:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011086:	75 05                	jne    c001108d <VgaText::receiveKey(unsigned char)+0x81>
c0011088:	80 fb 0a             	cmp    bl,0xa
c001108b:	75 53                	jne    c00110e0 <VgaText::receiveKey(unsigned char)+0xd4>
c001108d:	83 ec 0c             	sub    esp,0xc
c0011090:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011096:	53                   	push   ebx
c0011097:	e8 0c f6 fe ff       	call   c00006a8 <strlen>
c001109c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001109f:	89 c5                	mov    ebp,eax
c00110a1:	e8 02 f6 fe ff       	call   c00006a8 <strlen>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00110ad:	3d 2c 01 00 00       	cmp    eax,0x12c
c00110b2:	76 10                	jbe    c00110c4 <VgaText::receiveKey(unsigned char)+0xb8>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	68 9f 8d 02 c0       	push   0xc0028d9f
c00110bc:	e8 86 88 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00110c1:	83 c4 10             	add    esp,0x10
c00110c4:	50                   	push   eax
c00110c5:	50                   	push   eax
c00110c6:	57                   	push   edi
c00110c7:	53                   	push   ebx
c00110c8:	e8 14 f7 fe ff       	call   c00007e1 <strcat>
c00110cd:	83 c4 0c             	add    esp,0xc
c00110d0:	68 96 00 00 00       	push   0x96
c00110d5:	6a 00                	push   0x0
c00110d7:	57                   	push   edi
c00110d8:	e8 ae f5 fe ff       	call   c000068b <memset>
c00110dd:	83 c4 10             	add    esp,0x10
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	56                   	push   esi
c00110e4:	e8 d5 f9 ff ff       	call   c0010abe <VgaText::doUpdate()>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	83 c4 1c             	add    esp,0x1c
c00110ef:	5b                   	pop    ebx
c00110f0:	5e                   	pop    esi
c00110f1:	5f                   	pop    edi
c00110f2:	5d                   	pop    ebp
c00110f3:	c3                   	ret    

c00110f4 <VgaText::write(unsigned long long, void*, int*)>:
c00110f4:	55                   	push   ebp
c00110f5:	57                   	push   edi
c00110f6:	56                   	push   esi
c00110f7:	53                   	push   ebx
c00110f8:	83 ec 0c             	sub    esp,0xc
c00110fb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00110ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011103:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011107:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001110e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011111:	39 eb                	cmp    ebx,ebp
c0011113:	74 13                	je     c0011128 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011115:	43                   	inc    ebx
c0011116:	50                   	push   eax
c0011117:	50                   	push   eax
c0011118:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001111c:	50                   	push   eax
c001111d:	56                   	push   esi
c001111e:	e8 d1 fb ff ff       	call   c0010cf4 <VgaText::putchar(char)>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	eb e9                	jmp    c0011111 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011132:	56                   	push   esi
c0011133:	e8 86 f9 ff ff       	call   c0010abe <VgaText::doUpdate()>
c0011138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001113c:	89 38                	mov    DWORD PTR [eax],edi
c001113e:	83 c4 1c             	add    esp,0x1c
c0011141:	31 c0                	xor    eax,eax
c0011143:	5b                   	pop    ebx
c0011144:	5e                   	pop    esi
c0011145:	5f                   	pop    edi
c0011146:	5d                   	pop    ebp
c0011147:	c3                   	ret    

c0011148 <newTerminal(char*)>:
c0011148:	83 ec 28             	sub    esp,0x28
c001114b:	68 60 12 00 00       	push   0x1260
c0011150:	e8 7f e3 ff ff       	call   c000f4d4 <malloc>
c0011155:	5a                   	pop    edx
c0011156:	59                   	pop    ecx
c0011157:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001115b:	50                   	push   eax
c001115c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011160:	e8 15 fd ff ff       	call   c0010e7a <VgaText::VgaText(char const*)>
c0011165:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011169:	83 c4 2c             	add    esp,0x2c
c001116c:	c3                   	ret    
c001116d:	90                   	nop

c001116e <TSS::TSS()>:
c001116e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011172:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011179:	90                   	nop
c001117a:	c3                   	ret    
c001117b:	90                   	nop

c001117c <TSS::setESP(unsigned long)>:
c001117c:	55                   	push   ebp
c001117d:	89 e5                	mov    ebp,esp
c001117f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011185:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011188:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001118b:	90                   	nop
c001118c:	5d                   	pop    ebp
c001118d:	c3                   	ret    

c001118e <TSS::flush()>:
c001118e:	55                   	push   ebp
c001118f:	89 e5                	mov    ebp,esp
c0011191:	83 ec 10             	sub    esp,0x10
c0011194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011197:	8b 00                	mov    eax,DWORD PTR [eax]
c0011199:	83 c8 03             	or     eax,0x3
c001119c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00111a0:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00111a4:	66 89 d0             	mov    ax,dx
c00111a7:	0f 00 d8             	ltr    ax
c00111aa:	90                   	nop
c00111ab:	c9                   	leave  
c00111ac:	c3                   	ret    
c00111ad:	90                   	nop

c00111ae <TSS::setup(unsigned long, unsigned long)>:
c00111ae:	55                   	push   ebp
c00111af:	89 e5                	mov    ebp,esp
c00111b1:	83 ec 18             	sub    esp,0x18
c00111b4:	83 ec 0c             	sub    esp,0xc
c00111b7:	6a 68                	push   0x68
c00111b9:	e8 16 e3 ff ff       	call   c000f4d4 <malloc>
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	89 c2                	mov    edx,eax
c00111c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00111c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111cf:	83 ec 04             	sub    esp,0x4
c00111d2:	6a 68                	push   0x68
c00111d4:	6a 00                	push   0x0
c00111d6:	50                   	push   eax
c00111d7:	e8 af f4 fe ff       	call   c000068b <memset>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111e5:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00111eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f1:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00111f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011200:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011209:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001120f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011215:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001121b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001121e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011221:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001122a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001122d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011239:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001123f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011245:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001124b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001124e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011251:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011254:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001125d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011260:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011269:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011273:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011276:	0f 20 da             	mov    edx,cr3
c0011279:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001127c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001127f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011285:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	50                   	push   eax
c001128c:	8d 45 ec             	lea    eax,[ebp-0x14]
c001128f:	50                   	push   eax
c0011290:	e8 1d da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c0011295:	83 c4 10             	add    esp,0x10
c0011298:	83 ec 08             	sub    esp,0x8
c001129b:	6a 68                	push   0x68
c001129d:	8d 45 ec             	lea    eax,[ebp-0x14]
c00112a0:	50                   	push   eax
c00112a1:	e8 28 da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00112ad:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00112b0:	83 e0 0f             	and    eax,0xf
c00112b3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00112b6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00112b9:	83 c8 40             	or     eax,0x40
c00112bc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00112bf:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00112c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112ca:	05 78 01 00 00       	add    eax,0x178
c00112cf:	83 ec 04             	sub    esp,0x4
c00112d2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00112d5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00112d8:	50                   	push   eax
c00112d9:	e8 24 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	89 c2                	mov    edx,eax
c00112e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e6:	89 10                	mov    DWORD PTR [eax],edx
c00112e8:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00112ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112f3:	05 78 01 00 00       	add    eax,0x178
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	50                   	push   eax
c00112fc:	e8 45 da ff ff       	call   c000ed46 <GDT::flush()>
c0011301:	83 c4 10             	add    esp,0x10
c0011304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011307:	8b 00                	mov    eax,DWORD PTR [eax]
c0011309:	83 ec 08             	sub    esp,0x8
c001130c:	50                   	push   eax
c001130d:	68 08 8e 02 c0       	push   0xc0028e08
c0011312:	e8 16 15 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001131d:	8b 00                	mov    eax,DWORD PTR [eax]
c001131f:	c9                   	leave  
c0011320:	c3                   	ret    
c0011321:	90                   	nop

c0011322 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011326:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001132a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011332:	75 08                	jne    c001133c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011334:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001133a:	eb 38                	jmp    c0011374 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001133c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011341:	75 17                	jne    c001135a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011348:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001134b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011351:	8b 10                	mov    edx,DWORD PTR [eax]
c0011353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011357:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001135a:	89 c1                	mov    ecx,eax
c001135c:	83 e1 fd             	and    ecx,0xfffffffd
c001135f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011365:	74 cd                	je     c0011334 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011367:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001136c:	83 e0 ef             	and    eax,0xffffffef
c001136f:	83 f8 08             	cmp    eax,0x8
c0011372:	76 c0                	jbe    c0011334 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011374:	31 c0                	xor    eax,eax
c0011376:	c3                   	ret    
c0011377:	90                   	nop

c0011378 <ReservedFilename::isAtty()>:
c0011378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001137f:	31 c0                	xor    eax,eax
c0011381:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011387:	74 09                	je     c0011392 <ReservedFilename::isAtty()+0x1a>
c0011389:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001138f:	0f 94 c0             	sete   al
c0011392:	c3                   	ret    
c0011393:	90                   	nop

c0011394 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011398:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001139c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001139f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113a3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113a8:	75 08                	jne    c00113b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00113aa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113b0:	eb 3d                	jmp    c00113ef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00113b2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113b7:	75 17                	jne    c00113d0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00113b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00113c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113cd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00113d0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113d5:	75 04                	jne    c00113db <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00113d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00113d9:	eb 14                	jmp    c00113ef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00113db:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00113e0:	74 c8                	je     c00113aa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00113e2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00113e7:	83 e0 ef             	and    eax,0xffffffef
c00113ea:	83 f8 08             	cmp    eax,0x8
c00113ed:	76 bb                	jbe    c00113aa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00113ef:	31 c0                	xor    eax,eax
c00113f1:	c3                   	ret    

c00113f2 <UnixFile::getFileDescriptor()>:
c00113f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f9:	c3                   	ret    

c00113fa <UnixFile::UnixFile(int)>:
c00113fa:	53                   	push   ebx
c00113fb:	83 ec 28             	sub    esp,0x28
c00113fe:	ba f4 8e 02 c0       	mov    edx,0xc0028ef4
c0011403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011407:	89 10                	mov    DWORD PTR [eax],edx
c0011409:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011411:	0f 8f 8c 01 00 00    	jg     c00115a3 <UnixFile::UnixFile(int)+0x1a9>
c0011417:	a1 a0 b9 02 c0       	mov    eax,ds:0xc002b9a0
c001141c:	8d 50 01             	lea    edx,[eax+0x1]
c001141f:	89 15 a0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a0,edx
c0011425:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011429:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001142c:	83 ec 08             	sub    esp,0x8
c001142f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011433:	68 78 cb 02 c0       	push   0xc002cb78
c0011438:	e8 93 5d 01 00       	call   c00271d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	a0 74 cb 02 c0       	mov    al,ds:0xc002cb74
c0011445:	83 f0 01             	xor    eax,0x1
c0011448:	84 c0                	test   al,al
c001144a:	0f 84 54 01 00 00    	je     c00115a4 <UnixFile::UnixFile(int)+0x1aa>
c0011450:	c6 05 74 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb74,0x1
c0011457:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001145f:	83 ec 0c             	sub    esp,0xc
c0011462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011466:	e8 69 e0 ff ff       	call   c000f4d4 <malloc>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	89 c3                	mov    ebx,eax
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	68 03 ff ff 0f       	push   0xfffff03
c0011478:	53                   	push   ebx
c0011479:	e8 2c 01 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c001147e:	83 c4 10             	add    esp,0x10
c0011481:	89 1d 6c cb 02 c0    	mov    DWORD PTR ds:0xc002cb6c,ebx
c0011487:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001148f:	83 ec 0c             	sub    esp,0xc
c0011492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011496:	e8 39 e0 ff ff       	call   c000f4d4 <malloc>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	89 c3                	mov    ebx,eax
c00114a0:	83 ec 08             	sub    esp,0x8
c00114a3:	68 01 ff ff 0f       	push   0xfffff01
c00114a8:	53                   	push   ebx
c00114a9:	e8 fc 00 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	89 1d 70 cb 02 c0    	mov    DWORD PTR ds:0xc002cb70,ebx
c00114b7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00114c6:	e8 09 e0 ff ff       	call   c000f4d4 <malloc>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	89 c3                	mov    ebx,eax
c00114d0:	83 ec 08             	sub    esp,0x8
c00114d3:	68 00 ff ff 0f       	push   0xfffff00
c00114d8:	53                   	push   ebx
c00114d9:	e8 cc 00 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	89 1d 64 cb 02 c0    	mov    DWORD PTR ds:0xc002cb64,ebx
c00114e7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00114f6:	e8 d9 df ff ff       	call   c000f4d4 <malloc>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	89 c3                	mov    ebx,eax
c0011500:	83 ec 08             	sub    esp,0x8
c0011503:	68 02 ff ff 0f       	push   0xfffff02
c0011508:	53                   	push   ebx
c0011509:	e8 9c 00 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	89 1d 68 cb 02 c0    	mov    DWORD PTR ds:0xc002cb68,ebx
c0011517:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001151f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011524:	7f 7e                	jg     c00115a4 <UnixFile::UnixFile(int)+0x1aa>
c0011526:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001152e:	83 ec 0c             	sub    esp,0xc
c0011531:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011535:	e8 9a df ff ff       	call   c000f4d4 <malloc>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	89 c3                	mov    ebx,eax
c001153f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011543:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	50                   	push   eax
c001154c:	53                   	push   ebx
c001154d:	e8 58 00 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011559:	89 1c 85 40 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34c0],ebx
c0011560:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001156f:	e8 60 df ff ff       	call   c000f4d4 <malloc>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	89 c3                	mov    ebx,eax
c0011579:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001157d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011582:	83 ec 08             	sub    esp,0x8
c0011585:	50                   	push   eax
c0011586:	53                   	push   ebx
c0011587:	e8 1e 00 00 00       	call   c00115aa <ReservedFilename::ReservedFilename(int)>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011593:	89 1c 85 00 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3500],ebx
c001159a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001159e:	e9 7c ff ff ff       	jmp    c001151f <UnixFile::UnixFile(int)+0x125>
c00115a3:	90                   	nop
c00115a4:	83 c4 28             	add    esp,0x28
c00115a7:	5b                   	pop    ebx
c00115a8:	c3                   	ret    
c00115a9:	90                   	nop

c00115aa <ReservedFilename::ReservedFilename(int)>:
c00115aa:	83 ec 0c             	sub    esp,0xc
c00115ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b1:	83 ec 08             	sub    esp,0x8
c00115b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115b8:	50                   	push   eax
c00115b9:	e8 3c fe ff ff       	call   c00113fa <UnixFile::UnixFile(int)>
c00115be:	83 c4 10             	add    esp,0x10
c00115c1:	ba 10 8f 02 c0       	mov    edx,0xc0028f10
c00115c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ca:	89 10                	mov    DWORD PTR [eax],edx
c00115cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00115d7:	90                   	nop
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	c3                   	ret    

c00115dc <UnixFile::~UnixFile()>:
c00115dc:	83 ec 1c             	sub    esp,0x1c
c00115df:	ba f4 8e 02 c0       	mov    edx,0xc0028ef4
c00115e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115e8:	89 10                	mov    DWORD PTR [eax],edx
c00115ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00115f6:	7f 73                	jg     c001166b <UnixFile::~UnixFile()+0x8f>
c00115f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011600:	83 ec 0c             	sub    esp,0xc
c0011603:	68 78 cb 02 c0       	push   0xc002cb78
c0011608:	e8 97 5c 01 00       	call   c00272a4 <LinkedList<UnixFile>::getFirstElement()>
c001160d:	83 c4 10             	add    esp,0x10
c0011610:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011614:	83 ec 0c             	sub    esp,0xc
c0011617:	68 78 cb 02 c0       	push   0xc002cb78
c001161c:	e8 8b 5c 01 00       	call   c00272ac <LinkedList<UnixFile>::removeFirst()>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011628:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001162c:	74 40                	je     c001166e <UnixFile::~UnixFile()+0x92>
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011635:	68 78 cb 02 c0       	push   0xc002cb78
c001163a:	e8 91 5b 01 00       	call   c00271d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001163f:	83 c4 10             	add    esp,0x10
c0011642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011646:	8d 50 01             	lea    edx,[eax+0x1]
c0011649:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001164d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011652:	0f 94 c0             	sete   al
c0011655:	84 c0                	test   al,al
c0011657:	74 a7                	je     c0011600 <UnixFile::~UnixFile()+0x24>
c0011659:	83 ec 0c             	sub    esp,0xc
c001165c:	68 cc 8e 02 c0       	push   0xc0028ecc
c0011661:	e8 e1 82 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	eb 95                	jmp    c0011600 <UnixFile::~UnixFile()+0x24>
c001166b:	90                   	nop
c001166c:	eb 01                	jmp    c001166f <UnixFile::~UnixFile()+0x93>
c001166e:	90                   	nop
c001166f:	90                   	nop
c0011670:	83 c4 1c             	add    esp,0x1c
c0011673:	c3                   	ret    

c0011674 <UnixFile::~UnixFile()>:
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167e:	e8 59 ff ff ff       	call   c00115dc <UnixFile::~UnixFile()>
c0011683:	83 c4 10             	add    esp,0x10
c0011686:	83 ec 08             	sub    esp,0x8
c0011689:	6a 0c                	push   0xc
c001168b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001168f:	e8 b9 10 00 00       	call   c001274d <operator delete(void*, unsigned long)>
c0011694:	83 c4 10             	add    esp,0x10
c0011697:	83 c4 0c             	add    esp,0xc
c001169a:	c3                   	ret    
c001169b:	90                   	nop

c001169c <ReservedFilename::~ReservedFilename()>:
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	ba 10 8f 02 c0       	mov    edx,0xc0028f10
c00116a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a8:	89 10                	mov    DWORD PTR [eax],edx
c00116aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	50                   	push   eax
c00116b2:	e8 25 ff ff ff       	call   c00115dc <UnixFile::~UnixFile()>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	90                   	nop
c00116bb:	83 c4 0c             	add    esp,0xc
c00116be:	c3                   	ret    
c00116bf:	90                   	nop

c00116c0 <ReservedFilename::~ReservedFilename()>:
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	83 ec 0c             	sub    esp,0xc
c00116c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ca:	e8 cd ff ff ff       	call   c001169c <ReservedFilename::~ReservedFilename()>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	83 ec 08             	sub    esp,0x8
c00116d5:	6a 0c                	push   0xc
c00116d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116db:	e8 6d 10 00 00       	call   c001274d <operator delete(void*, unsigned long)>
c00116e0:	83 c4 10             	add    esp,0x10
c00116e3:	83 c4 0c             	add    esp,0xc
c00116e6:	c3                   	ret    

c00116e7 <getFromFileDescriptor(int)>:
c00116e7:	53                   	push   ebx
c00116e8:	83 ec 08             	sub    esp,0x8
c00116eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116ef:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00116f5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00116fb:	7f 2c                	jg     c0011729 <getFromFileDescriptor(int)+0x42>
c00116fd:	83 ec 0c             	sub    esp,0xc
c0011700:	68 78 cb 02 c0       	push   0xc002cb78
c0011705:	e8 9a 5b 01 00       	call   c00272a4 <LinkedList<UnixFile>::getFirstElement()>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	85 c0                	test   eax,eax
c001170f:	75 04                	jne    c0011715 <getFromFileDescriptor(int)+0x2e>
c0011711:	31 c0                	xor    eax,eax
c0011713:	eb 6e                	jmp    c0011783 <getFromFileDescriptor(int)+0x9c>
c0011715:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011718:	74 69                	je     c0011783 <getFromFileDescriptor(int)+0x9c>
c001171a:	52                   	push   edx
c001171b:	52                   	push   edx
c001171c:	50                   	push   eax
c001171d:	68 78 cb 02 c0       	push   0xc002cb78
c0011722:	e8 27 5c 01 00       	call   c002734e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011727:	eb e1                	jmp    c001170a <getFromFileDescriptor(int)+0x23>
c0011729:	a1 6c cb 02 c0       	mov    eax,ds:0xc002cb6c
c001172e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011734:	74 4d                	je     c0011783 <getFromFileDescriptor(int)+0x9c>
c0011736:	a1 70 cb 02 c0       	mov    eax,ds:0xc002cb70
c001173b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011741:	74 40                	je     c0011783 <getFromFileDescriptor(int)+0x9c>
c0011743:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0011748:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001174e:	74 33                	je     c0011783 <getFromFileDescriptor(int)+0x9c>
c0011750:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c0011755:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001175b:	74 26                	je     c0011783 <getFromFileDescriptor(int)+0x9c>
c001175d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011763:	83 f8 08             	cmp    eax,0x8
c0011766:	77 09                	ja     c0011771 <getFromFileDescriptor(int)+0x8a>
c0011768:	8b 04 85 40 cb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd34c0]
c001176f:	eb 12                	jmp    c0011783 <getFromFileDescriptor(int)+0x9c>
c0011771:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011777:	83 fb 08             	cmp    ebx,0x8
c001177a:	77 95                	ja     c0011711 <getFromFileDescriptor(int)+0x2a>
c001177c:	8b 04 9d 00 cb 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3500]
c0011783:	83 c4 08             	add    esp,0x8
c0011786:	5b                   	pop    ebx
c0011787:	c3                   	ret    

c0011788 <__static_initialization_and_destruction_0(int, int)>:
c0011788:	83 ec 0c             	sub    esp,0xc
c001178b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011790:	75 34                	jne    c00117c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011792:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001179a:	75 2a                	jne    c00117c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001179c:	83 ec 0c             	sub    esp,0xc
c001179f:	68 78 cb 02 c0       	push   0xc002cb78
c00117a4:	e8 cf 59 01 00       	call   c0027178 <LinkedList<UnixFile>::LinkedList()>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	83 ec 04             	sub    esp,0x4
c00117af:	68 28 b9 02 c0       	push   0xc002b928
c00117b4:	68 78 cb 02 c0       	push   0xc002cb78
c00117b9:	68 76 71 02 c0       	push   0xc0027176
c00117be:	e8 04 0f 00 00       	call   c00126c7 <__cxa_atexit>
c00117c3:	83 c4 10             	add    esp,0x10
c00117c6:	90                   	nop
c00117c7:	83 c4 0c             	add    esp,0xc
c00117ca:	c3                   	ret    

c00117cb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00117cb:	83 ec 0c             	sub    esp,0xc
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	68 ff ff 00 00       	push   0xffff
c00117d6:	6a 01                	push   0x1
c00117d8:	e8 ab ff ff ff       	call   c0011788 <__static_initialization_and_destruction_0(int, int)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	83 c4 0c             	add    esp,0xc
c00117e3:	c3                   	ret    

c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00117e4:	53                   	push   ebx
c00117e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00117ed:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00117f3:	89 c8                	mov    eax,ecx
c00117f5:	d1 e8                	shr    eax,1
c00117f7:	03 05 a8 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b9a8
c00117fd:	83 e1 01             	and    ecx,0x1
c0011800:	8a 10                	mov    dl,BYTE PTR [eax]
c0011802:	75 09                	jne    c001180d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011804:	83 e2 f0             	and    edx,0xfffffff0
c0011807:	09 da                	or     edx,ebx
c0011809:	88 10                	mov    BYTE PTR [eax],dl
c001180b:	5b                   	pop    ebx
c001180c:	c3                   	ret    
c001180d:	c1 e3 04             	shl    ebx,0x4
c0011810:	83 e2 0f             	and    edx,0xf
c0011813:	09 da                	or     edx,ebx
c0011815:	88 10                	mov    BYTE PTR [eax],dl
c0011817:	5b                   	pop    ebx
c0011818:	c3                   	ret    

c0011819 <Virt::getPageState(unsigned long)>:
c0011819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001181d:	8b 0d a8 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b9a8
c0011823:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011829:	89 d0                	mov    eax,edx
c001182b:	d1 e8                	shr    eax,1
c001182d:	83 e2 01             	and    edx,0x1
c0011830:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011833:	75 04                	jne    c0011839 <Virt::getPageState(unsigned long)+0x20>
c0011835:	83 e0 0f             	and    eax,0xf
c0011838:	c3                   	ret    
c0011839:	c0 e8 04             	shr    al,0x4
c001183c:	c3                   	ret    

c001183d <Virt::allocateKernelVirtualPages(int)>:
c001183d:	55                   	push   ebp
c001183e:	31 ed                	xor    ebp,ebp
c0011840:	57                   	push   edi
c0011841:	56                   	push   esi
c0011842:	53                   	push   ebx
c0011843:	31 db                	xor    ebx,ebx
c0011845:	83 ec 1c             	sub    esp,0x1c
c0011848:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001184c:	8b 3d a4 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b9a4
c0011852:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011857:	57                   	push   edi
c0011858:	e8 bc ff ff ff       	call   c0011819 <Virt::getPageState(unsigned long)>
c001185d:	5a                   	pop    edx
c001185e:	84 c0                	test   al,al
c0011860:	75 3a                	jne    c001189c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011862:	85 db                	test   ebx,ebx
c0011864:	75 02                	jne    c0011868 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011866:	89 fd                	mov    ebp,edi
c0011868:	43                   	inc    ebx
c0011869:	39 f3                	cmp    ebx,esi
c001186b:	74 5a                	je     c00118c7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001186d:	47                   	inc    edi
c001186e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011874:	76 31                	jbe    c00118a7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011876:	c7 05 a4 b9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b9a4,0xc8000
c0011880:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011885:	75 28                	jne    c00118af <Virt::allocateKernelVirtualPages(int)+0x72>
c0011887:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001188c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011891:	57                   	push   edi
c0011892:	e8 82 ff ff ff       	call   c0011819 <Virt::getPageState(unsigned long)>
c0011897:	5a                   	pop    edx
c0011898:	84 c0                	test   al,al
c001189a:	74 c6                	je     c0011862 <Virt::allocateKernelVirtualPages(int)+0x25>
c001189c:	31 db                	xor    ebx,ebx
c001189e:	47                   	inc    edi
c001189f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00118a5:	77 cf                	ja     c0011876 <Virt::allocateKernelVirtualPages(int)+0x39>
c00118a7:	89 3d a4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a4,edi
c00118ad:	eb a8                	jmp    c0011857 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	68 24 8f 02 c0       	push   0xc0028f24
c00118b7:	e8 8b 80 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00118bc:	8b 3d a4 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b9a4
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	eb 90                	jmp    c0011857 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00118c7:	89 2d a4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a4,ebp
c00118cd:	4b                   	dec    ebx
c00118ce:	74 5f                	je     c001192f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00118d0:	85 f6                	test   esi,esi
c00118d2:	74 3d                	je     c0011911 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00118d4:	89 e8                	mov    eax,ebp
c00118d6:	31 db                	xor    ebx,ebx
c00118d8:	8d 7e ff             	lea    edi,[esi-0x1]
c00118db:	eb 14                	jmp    c00118f1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00118dd:	6a 01                	push   0x1
c00118df:	43                   	inc    ebx
c00118e0:	50                   	push   eax
c00118e1:	e8 fe fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118e6:	58                   	pop    eax
c00118e7:	39 f3                	cmp    ebx,esi
c00118e9:	5a                   	pop    edx
c00118ea:	74 25                	je     c0011911 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00118ec:	a1 a4 b9 02 c0       	mov    eax,ds:0xc002b9a4
c00118f1:	8d 50 01             	lea    edx,[eax+0x1]
c00118f4:	85 db                	test   ebx,ebx
c00118f6:	89 15 a4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a4,edx
c00118fc:	74 20                	je     c001191e <Virt::allocateKernelVirtualPages(int)+0xe1>
c00118fe:	39 df                	cmp    edi,ebx
c0011900:	75 db                	jne    c00118dd <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011902:	6a 03                	push   0x3
c0011904:	43                   	inc    ebx
c0011905:	50                   	push   eax
c0011906:	e8 d9 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001190b:	59                   	pop    ecx
c001190c:	39 f3                	cmp    ebx,esi
c001190e:	58                   	pop    eax
c001190f:	75 db                	jne    c00118ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011911:	83 c4 1c             	add    esp,0x1c
c0011914:	89 e8                	mov    eax,ebp
c0011916:	5b                   	pop    ebx
c0011917:	c1 e0 0c             	shl    eax,0xc
c001191a:	5e                   	pop    esi
c001191b:	5f                   	pop    edi
c001191c:	5d                   	pop    ebp
c001191d:	c3                   	ret    
c001191e:	6a 02                	push   0x2
c0011920:	bb 01 00 00 00       	mov    ebx,0x1
c0011925:	50                   	push   eax
c0011926:	e8 b9 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001192b:	58                   	pop    eax
c001192c:	5a                   	pop    edx
c001192d:	eb bd                	jmp    c00118ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c001192f:	6a 04                	push   0x4
c0011931:	8d 45 01             	lea    eax,[ebp+0x1]
c0011934:	55                   	push   ebp
c0011935:	a3 a4 b9 02 c0       	mov    ds:0xc002b9a4,eax
c001193a:	e8 a5 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001193f:	59                   	pop    ecx
c0011940:	89 e8                	mov    eax,ebp
c0011942:	5b                   	pop    ebx
c0011943:	c1 e0 0c             	shl    eax,0xc
c0011946:	83 c4 1c             	add    esp,0x1c
c0011949:	5b                   	pop    ebx
c001194a:	5e                   	pop    esi
c001194b:	5f                   	pop    edi
c001194c:	5d                   	pop    ebp
c001194d:	c3                   	ret    

c001194e <Virt::virtualMemorySetup()>:
c001194e:	53                   	push   ebx
c001194f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011954:	83 ec 08             	sub    esp,0x8
c0011957:	6a 0f                	push   0xf
c0011959:	53                   	push   ebx
c001195a:	43                   	inc    ebx
c001195b:	e8 84 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011960:	59                   	pop    ecx
c0011961:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011967:	58                   	pop    eax
c0011968:	75 ed                	jne    c0011957 <Virt::virtualMemorySetup()+0x9>
c001196a:	83 ec 08             	sub    esp,0x8
c001196d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011972:	68 00 00 00 c8       	push   0xc8000000
c0011977:	68 ab 90 02 c0       	push   0xc00290ab
c001197c:	e8 ac 0e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011981:	58                   	pop    eax
c0011982:	5a                   	pop    edx
c0011983:	68 00 f0 ff ef       	push   0xeffff000
c0011988:	68 bf 90 02 c0       	push   0xc00290bf
c001198d:	e8 9b 0e 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	83 ec 08             	sub    esp,0x8
c0011998:	6a 00                	push   0x0
c001199a:	53                   	push   ebx
c001199b:	43                   	inc    ebx
c001199c:	e8 43 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00119aa:	75 e9                	jne    c0011995 <Virt::virtualMemorySetup()+0x47>
c00119ac:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00119b1:	83 ec 08             	sub    esp,0x8
c00119b4:	6a 0f                	push   0xf
c00119b6:	53                   	push   ebx
c00119b7:	43                   	inc    ebx
c00119b8:	e8 27 fe ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00119c6:	75 e9                	jne    c00119b1 <Virt::virtualMemorySetup()+0x63>
c00119c8:	83 c4 08             	add    esp,0x8
c00119cb:	5b                   	pop    ebx
c00119cc:	c3                   	ret    

c00119cd <Virt::getAKernelVAS()>:
c00119cd:	a1 84 cb 02 c0       	mov    eax,ds:0xc002cb84
c00119d2:	c3                   	ret    

c00119d3 <Virt::setupPageSwapping(int)>:
c00119d3:	57                   	push   edi
c00119d4:	56                   	push   esi
c00119d5:	53                   	push   ebx
c00119d6:	83 ec 1c             	sub    esp,0x1c
c00119d9:	68 14 01 00 00       	push   0x114
c00119de:	e8 f1 da ff ff       	call   c000f4d4 <malloc>
c00119e3:	83 c4 0c             	add    esp,0xc
c00119e6:	89 c6                	mov    esi,eax
c00119e8:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c00119ee:	68 d3 90 02 c0       	push   0xc00290d3
c00119f3:	50                   	push   eax
c00119f4:	e8 63 13 00 00       	call   c0012d5c <File::File(char const*, Process*)>
c00119f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00119fc:	e8 37 15 00 00       	call   c0012f38 <File::unlink()>
c0011a01:	58                   	pop    eax
c0011a02:	5a                   	pop    edx
c0011a03:	6a 12                	push   0x12
c0011a05:	56                   	push   esi
c0011a06:	e8 b5 13 00 00       	call   c0012dc0 <File::open(FileOpenMode)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	85 c0                	test   eax,eax
c0011a10:	0f 85 ca 00 00 00    	jne    c0011ae0 <Virt::setupPageSwapping(int)+0x10d>
c0011a16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a22:	c1 e3 08             	shl    ebx,0x8
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	68 00 00 01 00       	push   0x10000
c0011a2d:	e8 a2 da ff ff       	call   c000f4d4 <malloc>
c0011a32:	83 c4 0c             	add    esp,0xc
c0011a35:	89 c7                	mov    edi,eax
c0011a37:	68 00 00 01 00       	push   0x10000
c0011a3c:	6a 00                	push   0x0
c0011a3e:	50                   	push   eax
c0011a3f:	e8 47 ec fe ff       	call   c000068b <memset>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	85 db                	test   ebx,ebx
c0011a49:	79 03                	jns    c0011a4e <Virt::setupPageSwapping(int)+0x7b>
c0011a4b:	83 c3 0f             	add    ebx,0xf
c0011a4e:	c1 fb 04             	sar    ebx,0x4
c0011a51:	4b                   	dec    ebx
c0011a52:	83 fb ff             	cmp    ebx,0xffffffff
c0011a55:	74 4b                	je     c0011aa2 <Virt::setupPageSwapping(int)+0xcf>
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a5c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011a60:	52                   	push   edx
c0011a61:	57                   	push   edi
c0011a62:	6a 00                	push   0x0
c0011a64:	68 00 00 01 00       	push   0x10000
c0011a69:	56                   	push   esi
c0011a6a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011a6d:	83 c4 20             	add    esp,0x20
c0011a70:	85 c0                	test   eax,eax
c0011a72:	75 59                	jne    c0011acd <Virt::setupPageSwapping(int)+0xfa>
c0011a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a78:	3d 00 00 01 00       	cmp    eax,0x10000
c0011a7d:	74 d2                	je     c0011a51 <Virt::setupPageSwapping(int)+0x7e>
c0011a7f:	83 ec 08             	sub    esp,0x8
c0011a82:	4b                   	dec    ebx
c0011a83:	50                   	push   eax
c0011a84:	68 26 91 02 c0       	push   0xc0029126
c0011a89:	e8 9f 0d 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011a8e:	c7 04 24 2f 91 02 c0 	mov    DWORD PTR [esp],0xc002912f
c0011a95:	e8 ad 7e 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011a9a:	83 c4 10             	add    esp,0x10
c0011a9d:	83 fb ff             	cmp    ebx,0xffffffff
c0011aa0:	75 b5                	jne    c0011a57 <Virt::setupPageSwapping(int)+0x84>
c0011aa2:	83 ec 0c             	sub    esp,0xc
c0011aa5:	56                   	push   esi
c0011aa6:	e8 73 13 00 00       	call   c0012e1e <File::close()>
c0011aab:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011aae:	e8 41 da ff ff       	call   c000f4f4 <rfree>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	85 f6                	test   esi,esi
c0011ab8:	74 0c                	je     c0011ac6 <Virt::setupPageSwapping(int)+0xf3>
c0011aba:	83 ec 0c             	sub    esp,0xc
c0011abd:	8b 06                	mov    eax,DWORD PTR [esi]
c0011abf:	56                   	push   esi
c0011ac0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	5b                   	pop    ebx
c0011aca:	5e                   	pop    esi
c0011acb:	5f                   	pop    edi
c0011acc:	c3                   	ret    
c0011acd:	83 ec 08             	sub    esp,0x8
c0011ad0:	50                   	push   eax
c0011ad1:	68 0e 91 02 c0       	push   0xc002910e
c0011ad6:	e8 52 0d 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	eb 94                	jmp    c0011a74 <Virt::setupPageSwapping(int)+0xa1>
c0011ae0:	83 ec 08             	sub    esp,0x8
c0011ae3:	50                   	push   eax
c0011ae4:	68 ea 90 02 c0       	push   0xc00290ea
c0011ae9:	e8 3f 0d 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011aee:	c7 04 24 f3 90 02 c0 	mov    DWORD PTR [esp],0xc00290f3
c0011af5:	e8 4d 7e 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	e9 14 ff ff ff       	jmp    c0011a16 <Virt::setupPageSwapping(int)+0x43>

c0011b02 <VAS::VAS()>:
c0011b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b11:	a3 84 cb 02 c0       	mov    ds:0xc002cb84,eax
c0011b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b22:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011b25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b29:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011b30:	90                   	nop
c0011b31:	c3                   	ret    

c0011b32 <VAS::VAS(VAS*)>:
c0011b32:	83 ec 0c             	sub    esp,0xc
c0011b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b40:	83 ec 0c             	sub    esp,0xc
c0011b43:	68 44 8f 02 c0       	push   0xc0028f44
c0011b48:	e8 fa 7d 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	90                   	nop
c0011b51:	83 c4 0c             	add    esp,0xc
c0011b54:	c3                   	ret    
c0011b55:	90                   	nop

c0011b56 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5a:	89 c2                	mov    edx,eax
c0011b5c:	c1 e8 0a             	shr    eax,0xa
c0011b5f:	c1 ea 16             	shr    edx,0x16
c0011b62:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b67:	19 c9                	sbb    ecx,ecx
c0011b69:	c1 e2 0c             	shl    edx,0xc
c0011b6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011b72:	25 fc 0f 00 00       	and    eax,0xffc
c0011b77:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011b7e:	01 d0                	add    eax,edx
c0011b80:	c3                   	ret    
c0011b81:	90                   	nop

c0011b82 <VAS::getPageTableEntry(unsigned long)>:
c0011b82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b86:	89 ca                	mov    edx,ecx
c0011b88:	c1 e9 0a             	shr    ecx,0xa
c0011b8b:	c1 ea 16             	shr    edx,0x16
c0011b8e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011b94:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011b9a:	c1 e0 0c             	shl    eax,0xc
c0011b9d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ba0:	c3                   	ret    

c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ba1:	57                   	push   edi
c0011ba2:	56                   	push   esi
c0011ba3:	be 01 00 00 00       	mov    esi,0x1
c0011ba8:	53                   	push   ebx
c0011ba9:	83 ec 10             	sub    esp,0x10
c0011bac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bb0:	c1 eb 0c             	shr    ebx,0xc
c0011bb3:	eb 3f                	jmp    c0011bf4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011bb5:	e8 13 fe ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0011bba:	83 ec 08             	sub    esp,0x8
c0011bbd:	57                   	push   edi
c0011bbe:	50                   	push   eax
c0011bbf:	e8 be ff ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c0011bc4:	83 c4 10             	add    esp,0x10
c0011bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011bcd:	f6 c4 04             	test   ah,0x4
c0011bd0:	75 5f                	jne    c0011c31 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011bd2:	80 fa 04             	cmp    dl,0x4
c0011bd5:	74 78                	je     c0011c4f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011bd7:	80 fa 02             	cmp    dl,0x2
c0011bda:	0f 84 88 00 00 00    	je     c0011c68 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011be0:	80 fa 03             	cmp    dl,0x3
c0011be3:	0f 84 ad 00 00 00    	je     c0011c96 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011be9:	fe ca                	dec    dl
c0011beb:	0f 84 92 00 00 00    	je     c0011c83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bf1:	43                   	inc    ebx
c0011bf2:	31 f6                	xor    esi,esi
c0011bf4:	53                   	push   ebx
c0011bf5:	e8 1f fc ff ff       	call   c0011819 <Virt::getPageState(unsigned long)>
c0011bfa:	5f                   	pop    edi
c0011bfb:	89 df                	mov    edi,ebx
c0011bfd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c01:	c1 e7 0c             	shl    edi,0xc
c0011c04:	84 c0                	test   al,al
c0011c06:	75 ad                	jne    c0011bb5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011c08:	83 ec 0c             	sub    esp,0xc
c0011c0b:	68 35 91 02 c0       	push   0xc0029135
c0011c10:	e8 32 7d 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011c15:	e8 b3 fd ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0011c1a:	5a                   	pop    edx
c0011c1b:	59                   	pop    ecx
c0011c1c:	57                   	push   edi
c0011c1d:	50                   	push   eax
c0011c1e:	e8 5f ff ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c2c:	f6 c4 04             	test   ah,0x4
c0011c2f:	74 c0                	je     c0011bf1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c31:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011c35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c3a:	83 ec 0c             	sub    esp,0xc
c0011c3d:	50                   	push   eax
c0011c3e:	e8 86 de ff ff       	call   c000fac9 <Phys::freePage(unsigned long)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c4a:	80 fa 04             	cmp    dl,0x4
c0011c4d:	75 88                	jne    c0011bd7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011c4f:	89 f0                	mov    eax,esi
c0011c51:	84 c0                	test   al,al
c0011c53:	75 47                	jne    c0011c9c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011c55:	c7 44 24 20 68 8f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028f68
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	5b                   	pop    ebx
c0011c61:	5e                   	pop    esi
c0011c62:	5f                   	pop    edi
c0011c63:	e9 df 7c 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c0011c68:	89 f0                	mov    eax,esi
c0011c6a:	84 c0                	test   al,al
c0011c6c:	75 15                	jne    c0011c83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c6e:	83 ec 0c             	sub    esp,0xc
c0011c71:	68 51 91 02 c0       	push   0xc0029151
c0011c76:	e8 cc 7c 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	e9 6e ff ff ff       	jmp    c0011bf1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c83:	83 ec 08             	sub    esp,0x8
c0011c86:	6a 00                	push   0x0
c0011c88:	53                   	push   ebx
c0011c89:	e8 56 fb ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8e:	83 c4 10             	add    esp,0x10
c0011c91:	e9 5b ff ff ff       	jmp    c0011bf1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c96:	89 f0                	mov    eax,esi
c0011c98:	84 c0                	test   al,al
c0011c9a:	75 15                	jne    c0011cb1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011c9c:	83 ec 08             	sub    esp,0x8
c0011c9f:	6a 00                	push   0x0
c0011ca1:	53                   	push   ebx
c0011ca2:	e8 3d fb ff ff       	call   c00117e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	5b                   	pop    ebx
c0011cae:	5e                   	pop    esi
c0011caf:	5f                   	pop    edi
c0011cb0:	c3                   	ret    
c0011cb1:	c7 44 24 20 6d 91 02 c0 	mov    DWORD PTR [esp+0x20],0xc002916d
c0011cb9:	83 c4 10             	add    esp,0x10
c0011cbc:	5b                   	pop    ebx
c0011cbd:	5e                   	pop    esi
c0011cbe:	5f                   	pop    edi
c0011cbf:	e9 83 7c 00 00       	jmp    c0019947 <Krnl::panic(char const*)>

c0011cc4 <VAS::freeAllocatedPages(unsigned long)>:
c0011cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ccc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011cd0:	74 09                	je     c0011cdb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011cd6:	e9 c6 fe ff ff       	jmp    c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cdb:	c7 44 24 04 8c 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028f8c
c0011ce3:	e9 45 0b 00 00       	jmp    c001282d <Dbg::kprintf(char const*, ...)>

c0011ce8 <VAS::virtualToPhysical(unsigned long)>:
c0011ce8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011cec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011cf0:	e8 8d fe ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c0011cf5:	5a                   	pop    edx
c0011cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf8:	59                   	pop    ecx
c0011cf9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cfe:	c3                   	ret    
c0011cff:	90                   	nop

c0011d00 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011d00:	55                   	push   ebp
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011d08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011d0c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011d10:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d14:	85 db                	test   ebx,ebx
c0011d16:	7e 22                	jle    c0011d3a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011d18:	c1 e3 0c             	shl    ebx,0xc
c0011d1b:	01 f3                	add    ebx,esi
c0011d1d:	56                   	push   esi
c0011d1e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011d24:	55                   	push   ebp
c0011d25:	e8 58 fe ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c0011d2a:	5a                   	pop    edx
c0011d2b:	59                   	pop    ecx
c0011d2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d2e:	21 f9                	and    ecx,edi
c0011d30:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011d34:	39 f3                	cmp    ebx,esi
c0011d36:	89 08                	mov    DWORD PTR [eax],ecx
c0011d38:	75 e3                	jne    c0011d1d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011d3a:	5b                   	pop    ebx
c0011d3b:	5e                   	pop    esi
c0011d3c:	5f                   	pop    edi
c0011d3d:	5d                   	pop    ebp
c0011d3e:	c3                   	ret    
c0011d3f:	90                   	nop

c0011d40 <VAS::setToWriteCombining(unsigned long, int)>:
c0011d40:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0011d45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d4b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011d52:	75 01                	jne    c0011d55 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011d54:	c3                   	ret    
c0011d55:	68 80 00 00 00       	push   0x80
c0011d5a:	6a ff                	push   0xffffffff
c0011d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d68:	e8 93 ff ff ff       	call   c0011d00 <VAS::reflagRange(unsigned long, int, int, int)>
c0011d6d:	83 c4 14             	add    esp,0x14
c0011d70:	c3                   	ret    
c0011d71:	90                   	nop

c0011d72 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011d72:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d7b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d82:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011d85:	19 c0                	sbb    eax,eax
c0011d87:	83 ca 03             	or     edx,0x3
c0011d8a:	83 e0 fc             	and    eax,0xfffffffc
c0011d8d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011d94:	0f 20 d8             	mov    eax,cr3
c0011d97:	0f 22 d8             	mov    cr3,eax
c0011d9a:	c3                   	ret    
c0011d9b:	90                   	nop

c0011d9c <VAS::~VAS()>:
c0011d9c:	83 ec 2c             	sub    esp,0x2c
c0011d9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011da7:	e8 2a b0 00 00       	call   c001cdd6 <lockScheduler()>
c0011dac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011db6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011dbc:	83 ec 04             	sub    esp,0x4
c0011dbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011dc3:	6a 01                	push   0x1
c0011dc5:	50                   	push   eax
c0011dc6:	e8 a7 ff ff ff       	call   c0011d72 <VAS::mapOtherVASIn(bool, VAS*)>
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011dd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011dde:	0f 8f d7 00 00 00    	jg     c0011ebb <VAS::~VAS()+0x11f>
c0011de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011deb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011def:	c1 e2 02             	shl    edx,0x2
c0011df2:	01 d0                	add    eax,edx
c0011df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfe:	83 e0 01             	and    eax,0x1
c0011e01:	0f 84 ab 00 00 00    	je     c0011eb2 <VAS::~VAS()+0x116>
c0011e07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011e0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011e17:	7f 75                	jg     c0011e8e <VAS::~VAS()+0xf2>
c0011e19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e1d:	c1 e0 0a             	shl    eax,0xa
c0011e20:	89 c2                	mov    edx,eax
c0011e22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e26:	01 d0                	add    eax,edx
c0011e28:	c1 e0 0c             	shl    eax,0xc
c0011e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e39:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e3f:	83 ec 04             	sub    esp,0x4
c0011e42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e46:	6a 01                	push   0x1
c0011e48:	50                   	push   eax
c0011e49:	e8 08 fd ff ff       	call   c0011b56 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e63:	25 01 04 00 00       	and    eax,0x401
c0011e68:	3d 01 04 00 00       	cmp    eax,0x401
c0011e6d:	75 19                	jne    c0011e88 <VAS::~VAS()+0xec>
c0011e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e78:	83 ec 0c             	sub    esp,0xc
c0011e7b:	50                   	push   eax
c0011e7c:	e8 48 dc ff ff       	call   c000fac9 <Phys::freePage(unsigned long)>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e88:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011e8c:	eb 81                	jmp    c0011e0f <VAS::~VAS()+0x73>
c0011e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e92:	25 00 04 00 00       	and    eax,0x400
c0011e97:	74 19                	je     c0011eb2 <VAS::~VAS()+0x116>
c0011e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ea2:	83 ec 0c             	sub    esp,0xc
c0011ea5:	50                   	push   eax
c0011ea6:	e8 1e dc ff ff       	call   c000fac9 <Phys::freePage(unsigned long)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eb2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011eb6:	e9 1b ff ff ff       	jmp    c0011dd6 <VAS::~VAS()+0x3a>
c0011ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ec2:	83 ec 0c             	sub    esp,0xc
c0011ec5:	50                   	push   eax
c0011ec6:	e8 d6 fc ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ecb:	83 c4 10             	add    esp,0x10
c0011ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ed5:	83 ec 0c             	sub    esp,0xc
c0011ed8:	50                   	push   eax
c0011ed9:	e8 eb db ff ff       	call   c000fac9 <Phys::freePage(unsigned long)>
c0011ede:	83 c4 10             	add    esp,0x10
c0011ee1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ee5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ee9:	c1 e0 02             	shl    eax,0x2
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	50                   	push   eax
c0011ef0:	68 b0 8f 02 c0       	push   0xc0028fb0
c0011ef5:	e8 33 09 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011efa:	83 c4 10             	add    esp,0x10
c0011efd:	e8 d6 ae 00 00       	call   c001cdd8 <unlockScheduler()>
c0011f02:	90                   	nop
c0011f03:	83 c4 2c             	add    esp,0x2c
c0011f06:	c3                   	ret    
c0011f07:	90                   	nop

c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011f08:	55                   	push   ebp
c0011f09:	57                   	push   edi
c0011f0a:	56                   	push   esi
c0011f0b:	53                   	push   ebx
c0011f0c:	83 ec 1c             	sub    esp,0x1c
c0011f0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f17:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011f1d:	77 08                	ja     c0011f27 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011f1f:	0f 20 d8             	mov    eax,cr3
c0011f22:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011f25:	75 47                	jne    c0011f6e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f2b:	09 d8                	or     eax,ebx
c0011f2d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f32:	75 57                	jne    c0011f8b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011f34:	89 de                	mov    esi,ebx
c0011f36:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f39:	c1 ee 16             	shr    esi,0x16
c0011f3c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011f43:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011f47:	74 54                	je     c0011f9d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011f49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f4d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011f53:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011f57:	c1 e6 0c             	shl    esi,0xc
c0011f5a:	c1 eb 0a             	shr    ebx,0xa
c0011f5d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011f63:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011f66:	83 c4 1c             	add    esp,0x1c
c0011f69:	5b                   	pop    ebx
c0011f6a:	5e                   	pop    esi
c0011f6b:	5f                   	pop    edi
c0011f6c:	5d                   	pop    ebp
c0011f6d:	c3                   	ret    
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 d0 8f 02 c0       	push   0xc0028fd0
c0011f76:	e8 b2 08 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f82:	09 d8                	or     eax,ebx
c0011f84:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f89:	74 a9                	je     c0011f34 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f8b:	83 ec 0c             	sub    esp,0xc
c0011f8e:	68 38 90 02 c0       	push   0xc0029038
c0011f93:	e8 af 79 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	eb 97                	jmp    c0011f34 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fa1:	e8 ad db ff ff       	call   c000fb53 <Phys::allocatePage()>
c0011fa6:	89 c5                	mov    ebp,eax
c0011fa8:	e8 20 fa ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0011fad:	83 ec 0c             	sub    esp,0xc
c0011fb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fb4:	6a 01                	push   0x1
c0011fb6:	e8 82 f8 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0011fbb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011fc2:	6a 01                	push   0x1
c0011fc4:	50                   	push   eax
c0011fc5:	55                   	push   ebp
c0011fc6:	81 cd 07 04 00 00    	or     ebp,0x407
c0011fcc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011fd0:	51                   	push   ecx
c0011fd1:	e8 26 02 00 00       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fd6:	83 c4 1c             	add    esp,0x1c
c0011fd9:	68 00 10 00 00       	push   0x1000
c0011fde:	6a 00                	push   0x0
c0011fe0:	50                   	push   eax
c0011fe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fe5:	e8 a1 e6 fe ff       	call   c000068b <memset>
c0011fea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011fee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ff1:	e8 ab fb ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ff6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ffa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012003:	e9 41 ff ff ff       	jmp    c0011f49 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012008 <VAS::allocatePages(int, int)>:
c0012008:	55                   	push   ebp
c0012009:	57                   	push   edi
c001200a:	56                   	push   esi
c001200b:	53                   	push   ebx
c001200c:	83 ec 1c             	sub    esp,0x1c
c001200f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012013:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0012018:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012024:	83 e0 01             	and    eax,0x1
c0012027:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001202b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001202f:	0f 85 cc 00 00 00    	jne    c0012101 <VAS::allocatePages(int, int)+0xf9>
c0012035:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001203c:	85 c0                	test   eax,eax
c001203e:	0f 84 a1 00 00 00    	je     c00120e5 <VAS::allocatePages(int, int)+0xdd>
c0012044:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001204c:	c1 e6 0c             	shl    esi,0xc
c001204f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012053:	85 c0                	test   eax,eax
c0012055:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012058:	7e 33                	jle    c001208d <VAS::allocatePages(int, int)+0x85>
c001205a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001205e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012062:	81 cd 00 04 00 00    	or     ebp,0x400
c0012068:	e8 e6 da ff ff       	call   c000fb53 <Phys::allocatePage()>
c001206d:	55                   	push   ebp
c001206e:	53                   	push   ebx
c001206f:	50                   	push   eax
c0012070:	57                   	push   edi
c0012071:	e8 92 fe ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001207e:	74 03                	je     c0012083 <VAS::allocatePages(int, int)+0x7b>
c0012080:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012083:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012089:	39 de                	cmp    esi,ebx
c001208b:	75 db                	jne    c0012068 <VAS::allocatePages(int, int)+0x60>
c001208d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012092:	75 12                	jne    c00120a6 <VAS::allocatePages(int, int)+0x9e>
c0012094:	0f 20 d8             	mov    eax,cr3
c0012097:	0f 22 d8             	mov    cr3,eax
c001209a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001209e:	83 c4 1c             	add    esp,0x1c
c00120a1:	5b                   	pop    ebx
c00120a2:	5e                   	pop    esi
c00120a3:	5f                   	pop    edi
c00120a4:	5d                   	pop    ebp
c00120a5:	c3                   	ret    
c00120a6:	c1 ee 0a             	shr    esi,0xa
c00120a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120ad:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00120b3:	c1 eb 0a             	shr    ebx,0xa
c00120b6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00120bc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120c2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120c8:	39 c3                	cmp    ebx,eax
c00120ca:	77 ce                	ja     c001209a <VAS::allocatePages(int, int)+0x92>
c00120cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120d5:	39 d8                	cmp    eax,ebx
c00120d7:	73 f3                	jae    c00120cc <VAS::allocatePages(int, int)+0xc4>
c00120d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120dd:	83 c4 1c             	add    esp,0x1c
c00120e0:	5b                   	pop    ebx
c00120e1:	5e                   	pop    esi
c00120e2:	5f                   	pop    edi
c00120e3:	5d                   	pop    ebp
c00120e4:	c3                   	ret    
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	68 5c 90 02 c0       	push   0xc002905c
c00120ed:	e8 55 78 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00120f2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	e9 43 ff ff ff       	jmp    c0012044 <VAS::allocatePages(int, int)+0x3c>
c0012101:	83 ec 0c             	sub    esp,0xc
c0012104:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012108:	e8 30 f7 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c001210d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012119:	0f 87 9b 00 00 00    	ja     c00121ba <VAS::allocatePages(int, int)+0x1b2>
c001211f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012123:	85 d2                	test   edx,edx
c0012125:	7e 3c                	jle    c0012163 <VAS::allocatePages(int, int)+0x15b>
c0012127:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001212b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001212f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012133:	c1 e5 0c             	shl    ebp,0xc
c0012136:	81 ce 00 04 00 00    	or     esi,0x400
c001213c:	01 dd                	add    ebp,ebx
c001213e:	e8 10 da ff ff       	call   c000fb53 <Phys::allocatePage()>
c0012143:	56                   	push   esi
c0012144:	53                   	push   ebx
c0012145:	50                   	push   eax
c0012146:	57                   	push   edi
c0012147:	e8 bc fd ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012154:	74 03                	je     c0012159 <VAS::allocatePages(int, int)+0x151>
c0012156:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012159:	81 c3 00 10 00 00    	add    ebx,0x1000
c001215f:	39 dd                	cmp    ebp,ebx
c0012161:	75 db                	jne    c001213e <VAS::allocatePages(int, int)+0x136>
c0012163:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012168:	0f 84 26 ff ff ff    	je     c0012094 <VAS::allocatePages(int, int)+0x8c>
c001216e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012172:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012176:	89 d3                	mov    ebx,edx
c0012178:	c1 e0 0c             	shl    eax,0xc
c001217b:	c1 eb 0a             	shr    ebx,0xa
c001217e:	01 d0                	add    eax,edx
c0012180:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012186:	c1 e8 0a             	shr    eax,0xa
c0012189:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001218f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012194:	2d 00 00 40 00       	sub    eax,0x400000
c0012199:	39 c3                	cmp    ebx,eax
c001219b:	0f 87 f9 fe ff ff    	ja     c001209a <VAS::allocatePages(int, int)+0x92>
c00121a1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121aa:	39 d8                	cmp    eax,ebx
c00121ac:	73 f3                	jae    c00121a1 <VAS::allocatePages(int, int)+0x199>
c00121ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b2:	83 c4 1c             	add    esp,0x1c
c00121b5:	5b                   	pop    ebx
c00121b6:	5e                   	pop    esi
c00121b7:	5f                   	pop    edi
c00121b8:	5d                   	pop    ebp
c00121b9:	c3                   	ret    
c00121ba:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00121bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121c5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00121cc:	0f 84 4d ff ff ff    	je     c001211f <VAS::allocatePages(int, int)+0x117>
c00121d2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00121da:	e9 40 ff ff ff       	jmp    c001211f <VAS::allocatePages(int, int)+0x117>
c00121df:	90                   	nop

c00121e0 <VAS::setCPUSpecific(unsigned long)>:
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	6a 05                	push   0x5
c00121e5:	68 00 00 40 c2       	push   0xc2400000
c00121ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121f2:	e8 11 fd ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121f7:	83 c4 1c             	add    esp,0x1c
c00121fa:	c3                   	ret    
c00121fb:	90                   	nop

c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00121fc:	55                   	push   ebp
c00121fd:	57                   	push   edi
c00121fe:	56                   	push   esi
c00121ff:	53                   	push   ebx
c0012200:	83 ec 1c             	sub    esp,0x1c
c0012203:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0012208:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001220c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012212:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012216:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001221c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012220:	83 e0 01             	and    eax,0x1
c0012223:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012227:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001222b:	85 c0                	test   eax,eax
c001222d:	7e 39                	jle    c0012268 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001222f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012233:	89 f3                	mov    ebx,esi
c0012235:	c1 e0 0c             	shl    eax,0xc
c0012238:	01 f0                	add    eax,esi
c001223a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223e:	55                   	push   ebp
c001223f:	53                   	push   ebx
c0012240:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012244:	29 f0                	sub    eax,esi
c0012246:	01 d8                	add    eax,ebx
c0012248:	50                   	push   eax
c0012249:	57                   	push   edi
c001224a:	e8 b9 fc ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c001224f:	83 c4 10             	add    esp,0x10
c0012252:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012257:	74 03                	je     c001225c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012259:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001225c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012262:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012266:	75 d6                	jne    c001223e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012268:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001226d:	75 10                	jne    c001227f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001226f:	0f 20 d8             	mov    eax,cr3
c0012272:	0f 22 d8             	mov    cr3,eax
c0012275:	83 c4 1c             	add    esp,0x1c
c0012278:	89 f0                	mov    eax,esi
c001227a:	5b                   	pop    ebx
c001227b:	5e                   	pop    esi
c001227c:	5f                   	pop    edi
c001227d:	5d                   	pop    ebp
c001227e:	c3                   	ret    
c001227f:	89 f3                	mov    ebx,esi
c0012281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012285:	c1 eb 0a             	shr    ebx,0xa
c0012288:	c1 e0 0c             	shl    eax,0xc
c001228b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012291:	01 f0                	add    eax,esi
c0012293:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012299:	c1 e8 0a             	shr    eax,0xa
c001229c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a1:	2d 00 00 40 00       	sub    eax,0x400000
c00122a6:	39 c3                	cmp    ebx,eax
c00122a8:	77 cb                	ja     c0012275 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00122aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00122ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122b3:	39 d8                	cmp    eax,ebx
c00122b5:	73 f3                	jae    c00122aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00122b7:	83 c4 1c             	add    esp,0x1c
c00122ba:	89 f0                	mov    eax,esi
c00122bc:	5b                   	pop    ebx
c00122bd:	5e                   	pop    esi
c00122be:	5f                   	pop    edi
c00122bf:	5d                   	pop    ebp
c00122c0:	c3                   	ret    
c00122c1:	90                   	nop

c00122c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00122c2:	55                   	push   ebp
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	83 ec 1c             	sub    esp,0x1c
c00122c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00122cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00122d1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00122d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00122d9:	a9 ff 0f 00 00       	test   eax,0xfff
c00122de:	75 4a                	jne    c001232a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00122e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00122e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e7:	c1 eb 16             	shr    ebx,0x16
c00122ea:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00122f1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00122f5:	74 4d                	je     c0012344 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00122f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00122fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00122ff:	c1 e8 0a             	shr    eax,0xa
c0012302:	80 fa 01             	cmp    dl,0x1
c0012305:	19 d2                	sbb    edx,edx
c0012307:	c1 e3 0c             	shl    ebx,0xc
c001230a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001230e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012314:	25 fc 0f 00 00       	and    eax,0xffc
c0012319:	01 d8                	add    eax,ebx
c001231b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012322:	83 c4 1c             	add    esp,0x1c
c0012325:	5b                   	pop    ebx
c0012326:	5e                   	pop    esi
c0012327:	5f                   	pop    edi
c0012328:	5d                   	pop    ebp
c0012329:	c3                   	ret    
c001232a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	68 88 90 02 c0       	push   0xc0029088
c0012336:	e8 0c 76 00 00       	call   c0019947 <Krnl::panic(char const*)>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012342:	eb 9c                	jmp    c00122e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012344:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012348:	e8 06 d8 ff ff       	call   c000fb53 <Phys::allocatePage()>
c001234d:	89 c5                	mov    ebp,eax
c001234f:	e8 79 f6 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001235b:	6a 01                	push   0x1
c001235d:	e8 db f4 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0012362:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012369:	6a 01                	push   0x1
c001236b:	50                   	push   eax
c001236c:	55                   	push   ebp
c001236d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012373:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012377:	51                   	push   ecx
c0012378:	e8 7f fe ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001237d:	83 c4 1c             	add    esp,0x1c
c0012380:	68 00 10 00 00       	push   0x1000
c0012385:	6a 00                	push   0x0
c0012387:	50                   	push   eax
c0012388:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001238c:	e8 fa e2 fe ff       	call   c000068b <memset>
c0012391:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012395:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012398:	e8 04 f8 ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c001239d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a0:	83 c4 10             	add    esp,0x10
c00123a3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00123a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123aa:	e9 48 ff ff ff       	jmp    c00122f7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00123af:	90                   	nop

c00123b0 <VAS::VAS(bool)>:
c00123b0:	53                   	push   ebx
c00123b1:	83 ec 28             	sub    esp,0x28
c00123b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00123bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123cb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00123cf:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00123d2:	e8 7c d7 ff ff       	call   c000fb53 <Phys::allocatePage()>
c00123d7:	89 c2                	mov    edx,eax
c00123d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00123e0:	e8 e8 f5 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c00123e5:	89 c3                	mov    ebx,eax
c00123e7:	83 ec 0c             	sub    esp,0xc
c00123ea:	6a 01                	push   0x1
c00123ec:	e8 4c f4 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c00123f1:	83 c4 10             	add    esp,0x10
c00123f4:	89 c2                	mov    edx,eax
c00123f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	6a 03                	push   0x3
c0012402:	6a 01                	push   0x1
c0012404:	52                   	push   edx
c0012405:	50                   	push   eax
c0012406:	53                   	push   ebx
c0012407:	e8 f0 fd ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001240c:	83 c4 20             	add    esp,0x20
c001240f:	89 c2                	mov    edx,eax
c0012411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012415:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012418:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012420:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012428:	7f 1c                	jg     c0012446 <VAS::VAS(bool)+0x96>
c001242a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001242e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012431:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012435:	c1 e2 02             	shl    edx,0x2
c0012438:	01 d0                	add    eax,edx
c001243a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012440:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012444:	eb da                	jmp    c0012420 <VAS::VAS(bool)+0x70>
c0012446:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001244e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012456:	7f 7a                	jg     c00124d2 <VAS::VAS(bool)+0x122>
c0012458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001245c:	2d 00 02 00 00       	sub    eax,0x200
c0012461:	c1 e0 0c             	shl    eax,0xc
c0012464:	83 c8 03             	or     eax,0x3
c0012467:	89 c2                	mov    edx,eax
c0012469:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001246e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012474:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001247a:	83 e0 10             	and    eax,0x10
c001247d:	84 c0                	test   al,al
c001247f:	74 07                	je     c0012488 <VAS::VAS(bool)+0xd8>
c0012481:	b8 00 01 00 00       	mov    eax,0x100
c0012486:	eb 05                	jmp    c001248d <VAS::VAS(bool)+0xdd>
c0012488:	b8 00 00 00 00       	mov    eax,0x0
c001248d:	09 d0                	or     eax,edx
c001248f:	89 c1                	mov    ecx,eax
c0012491:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012495:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012498:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001249c:	c1 e2 02             	shl    edx,0x2
c001249f:	01 d0                	add    eax,edx
c00124a1:	89 ca                	mov    edx,ecx
c00124a3:	89 10                	mov    DWORD PTR [eax],edx
c00124a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124a9:	2d 40 03 00 00       	sub    eax,0x340
c00124ae:	83 f8 7f             	cmp    eax,0x7f
c00124b1:	77 16                	ja     c00124c9 <VAS::VAS(bool)+0x119>
c00124b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124be:	c1 e2 02             	shl    edx,0x2
c00124c1:	01 d0                	add    eax,edx
c00124c3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124c9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00124cd:	e9 7c ff ff ff       	jmp    c001244e <VAS::VAS(bool)+0x9e>
c00124d2:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00124d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124dd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124e3:	83 e0 10             	and    eax,0x10
c00124e6:	84 c0                	test   al,al
c00124e8:	74 07                	je     c00124f1 <VAS::VAS(bool)+0x141>
c00124ea:	b8 03 41 00 00       	mov    eax,0x4103
c00124ef:	eb 05                	jmp    c00124f6 <VAS::VAS(bool)+0x146>
c00124f1:	b8 03 40 00 00       	mov    eax,0x4003
c00124f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00124fa:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00124fd:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012503:	89 02                	mov    DWORD PTR [edx],eax
c0012505:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001250a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012510:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012516:	83 ec 08             	sub    esp,0x8
c0012519:	50                   	push   eax
c001251a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001251e:	e8 bd fc ff ff       	call   c00121e0 <VAS::setCPUSpecific(unsigned long)>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001252a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001252d:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0012532:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012538:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001253e:	83 e0 10             	and    eax,0x10
c0012541:	84 c0                	test   al,al
c0012543:	74 07                	je     c001254c <VAS::VAS(bool)+0x19c>
c0012545:	b8 00 01 00 00       	mov    eax,0x100
c001254a:	eb 05                	jmp    c0012551 <VAS::VAS(bool)+0x1a1>
c001254c:	b8 00 00 00 00       	mov    eax,0x0
c0012551:	09 c2                	or     edx,eax
c0012553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001255a:	05 fc 0f 00 00       	add    eax,0xffc
c001255f:	83 ca 03             	or     edx,0x3
c0012562:	89 10                	mov    DWORD PTR [eax],edx
c0012564:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0012569:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	50                   	push   eax
c0012573:	e8 90 19 00 00       	call   c0013f08 <Device::getName()>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	83 ec 08             	sub    esp,0x8
c001257e:	68 87 91 02 c0       	push   0xc0029187
c0012583:	50                   	push   eax
c0012584:	e8 f2 e1 fe ff       	call   c000077b <strcmp>
c0012589:	83 c4 10             	add    esp,0x10
c001258c:	85 c0                	test   eax,eax
c001258e:	0f 94 c0             	sete   al
c0012591:	84 c0                	test   al,al
c0012593:	74 70                	je     c0012605 <VAS::VAS(bool)+0x255>
c0012595:	e8 1f a8 00 00       	call   c001cdb9 <disableIRQs()>
c001259a:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001259f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a5:	05 7c 09 00 00       	add    eax,0x97c
c00125aa:	83 ec 0c             	sub    esp,0xc
c00125ad:	50                   	push   eax
c00125ae:	e8 9d c9 ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bb:	89 c3                	mov    ebx,eax
c00125bd:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00125c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125c8:	05 7c 09 00 00       	add    eax,0x97c
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	50                   	push   eax
c00125d1:	e8 7a c9 ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00125d6:	83 c4 10             	add    esp,0x10
c00125d9:	83 ec 08             	sub    esp,0x8
c00125dc:	50                   	push   eax
c00125dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125e1:	e8 9c f5 ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c00125e6:	83 c4 10             	add    esp,0x10
c00125e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00125eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125f0:	6a 11                	push   0x11
c00125f2:	53                   	push   ebx
c00125f3:	50                   	push   eax
c00125f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125f8:	e8 0b f9 ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	e8 c2 a7 00 00       	call   c001cdc7 <enableIRQs()>
c0012605:	90                   	nop
c0012606:	83 c4 28             	add    esp,0x28
c0012609:	5b                   	pop    ebx
c001260a:	c3                   	ret    

c001260b <mapVASFirstTime>:
c001260b:	55                   	push   ebp
c001260c:	57                   	push   edi
c001260d:	56                   	push   esi
c001260e:	53                   	push   ebx
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012617:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001261a:	4a                   	dec    edx
c001261b:	0f 84 8e 00 00 00    	je     c00126af <mapVASFirstTime+0xa4>
c0012621:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012624:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012627:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001262c:	c1 e5 15             	shl    ebp,0x15
c001262f:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012634:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001263a:	29 eb                	sub    ebx,ebp
c001263c:	29 ee                	sub    esi,ebp
c001263e:	e8 10 d5 ff ff       	call   c000fb53 <Phys::allocatePage()>
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	68 03 04 00 00       	push   0x403
c001264b:	6a 01                	push   0x1
c001264d:	53                   	push   ebx
c001264e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012654:	50                   	push   eax
c0012655:	57                   	push   edi
c0012656:	e8 a1 fb ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001265b:	83 c4 20             	add    esp,0x20
c001265e:	39 f3                	cmp    ebx,esi
c0012660:	75 dc                	jne    c001263e <mapVASFirstTime+0x33>
c0012662:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012667:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001266c:	29 ee                	sub    esi,ebp
c001266e:	29 e8                	sub    eax,ebp
c0012670:	89 c5                	mov    ebp,eax
c0012672:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012676:	19 db                	sbb    ebx,ebx
c0012678:	e8 d6 d4 ff ff       	call   c000fb53 <Phys::allocatePage()>
c001267d:	83 e3 04             	and    ebx,0x4
c0012680:	83 ec 0c             	sub    esp,0xc
c0012683:	81 c3 03 04 00 00    	add    ebx,0x403
c0012689:	53                   	push   ebx
c001268a:	6a 01                	push   0x1
c001268c:	56                   	push   esi
c001268d:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012693:	50                   	push   eax
c0012694:	57                   	push   edi
c0012695:	e8 62 fb ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001269a:	83 c4 20             	add    esp,0x20
c001269d:	39 f5                	cmp    ebp,esi
c001269f:	75 d1                	jne    c0012672 <mapVASFirstTime+0x67>
c00126a1:	0f 20 d8             	mov    eax,cr3
c00126a4:	0f 22 d8             	mov    cr3,eax
c00126a7:	83 c4 0c             	add    esp,0xc
c00126aa:	5b                   	pop    ebx
c00126ab:	5e                   	pop    esi
c00126ac:	5f                   	pop    edi
c00126ad:	5d                   	pop    ebp
c00126ae:	c3                   	ret    
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	68 95 91 02 c0       	push   0xc0029195
c00126b7:	e8 71 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00126bc:	83 c4 10             	add    esp,0x10
c00126bf:	83 c4 0c             	add    esp,0xc
c00126c2:	5b                   	pop    ebx
c00126c3:	5e                   	pop    esi
c00126c4:	5f                   	pop    edi
c00126c5:	5d                   	pop    ebp
c00126c6:	c3                   	ret    

c00126c7 <__cxa_atexit>:
c00126c7:	31 c0                	xor    eax,eax
c00126c9:	c3                   	ret    

c00126ca <__cxa_finalize>:
c00126ca:	c3                   	ret    

c00126cb <__stack_chk_fail>:
c00126cb:	55                   	push   ebp
c00126cc:	89 e5                	mov    ebp,esp
c00126ce:	83 ec 14             	sub    esp,0x14
c00126d1:	68 ae 91 02 c0       	push   0xc00291ae
c00126d6:	e8 52 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00126db:	58                   	pop    eax
c00126dc:	5a                   	pop    edx
c00126dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00126e0:	68 fe 91 02 c0       	push   0xc00291fe
c00126e5:	e8 43 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00126ea:	59                   	pop    ecx
c00126eb:	58                   	pop    eax
c00126ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00126f2:	68 fe 91 02 c0       	push   0xc00291fe
c00126f7:	e8 31 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00126fc:	5a                   	pop    edx
c00126fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012700:	59                   	pop    ecx
c0012701:	8b 00                	mov    eax,DWORD PTR [eax]
c0012703:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012706:	68 fe 91 02 c0       	push   0xc00291fe
c001270b:	e8 1d 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0012710:	5a                   	pop    edx
c0012711:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012714:	59                   	pop    ecx
c0012715:	8b 00                	mov    eax,DWORD PTR [eax]
c0012717:	8b 00                	mov    eax,DWORD PTR [eax]
c0012719:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001271c:	68 fe 91 02 c0       	push   0xc00291fe
c0012721:	e8 07 01 00 00       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0012726:	c7 04 24 06 92 02 c0 	mov    DWORD PTR [esp],0xc0029206
c001272d:	e8 15 72 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	c9                   	leave  
c0012736:	c3                   	ret    

c0012737 <__cxa_pure_virtual>:
c0012737:	83 ec 18             	sub    esp,0x18
c001273a:	68 1e 92 02 c0       	push   0xc002921e
c001273f:	e8 03 72 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0012744:	83 c4 1c             	add    esp,0x1c
c0012747:	c3                   	ret    

c0012748 <operator new[](unsigned long)>:
c0012748:	e9 87 cd ff ff       	jmp    c000f4d4 <malloc>

c001274d <operator delete(void*, unsigned long)>:
c001274d:	e9 a2 cd ff ff       	jmp    c000f4f4 <rfree>

c0012752 <operator delete[](void*)>:
c0012752:	e9 9d cd ff ff       	jmp    c000f4f4 <rfree>

c0012757 <operator delete[](void*, unsigned long)>:
c0012757:	e9 98 cd ff ff       	jmp    c000f4f4 <rfree>

c001275c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001275c:	57                   	push   edi
c001275d:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012762:	56                   	push   esi
c0012763:	be 34 92 02 c0       	mov    esi,0xc0029234
c0012768:	53                   	push   ebx
c0012769:	83 ec 40             	sub    esp,0x40
c001276c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012770:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012774:	fc                   	cld    
c0012775:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012777:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001277b:	83 f9 3e             	cmp    ecx,0x3e
c001277e:	7e 05                	jle    c0012785 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012780:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012785:	89 df                	mov    edi,ebx
c0012787:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001278b:	eb 02                	jmp    c001278f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001278d:	89 c7                	mov    edi,eax
c001278f:	31 d2                	xor    edx,edx
c0012791:	46                   	inc    esi
c0012792:	89 f8                	mov    eax,edi
c0012794:	f7 f1                	div    ecx
c0012796:	39 cf                	cmp    edi,ecx
c0012798:	73 f3                	jae    c001278d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001279a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001279d:	eb 02                	jmp    c00127a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001279f:	89 c3                	mov    ebx,eax
c00127a1:	31 d2                	xor    edx,edx
c00127a3:	4e                   	dec    esi
c00127a4:	89 d8                	mov    eax,ebx
c00127a6:	f7 f1                	div    ecx
c00127a8:	39 cb                	cmp    ebx,ecx
c00127aa:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00127ae:	88 16                	mov    BYTE PTR [esi],dl
c00127b0:	73 ed                	jae    c001279f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00127b2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127b6:	83 c4 40             	add    esp,0x40
c00127b9:	5b                   	pop    ebx
c00127ba:	5e                   	pop    esi
c00127bb:	5f                   	pop    edi
c00127bc:	c3                   	ret    

c00127bd <Dbg::logc(char)>:
c00127bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127c1:	ba fd 03 00 00       	mov    edx,0x3fd
c00127c6:	ec                   	in     al,dx
c00127c7:	a8 20                	test   al,0x20
c00127c9:	74 fb                	je     c00127c6 <Dbg::logc(char)+0x9>
c00127cb:	ba f8 03 00 00       	mov    edx,0x3f8
c00127d0:	88 c8                	mov    al,cl
c00127d2:	ee                   	out    dx,al
c00127d3:	c3                   	ret    

c00127d4 <Dbg::logs(char*)>:
c00127d4:	53                   	push   ebx
c00127d5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00127d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127dc:	84 c0                	test   al,al
c00127de:	74 0f                	je     c00127ef <Dbg::logs(char*)+0x1b>
c00127e0:	50                   	push   eax
c00127e1:	43                   	inc    ebx
c00127e2:	e8 d6 ff ff ff       	call   c00127bd <Dbg::logc(char)>
c00127e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127ea:	5a                   	pop    edx
c00127eb:	84 c0                	test   al,al
c00127ed:	75 f1                	jne    c00127e0 <Dbg::logs(char*)+0xc>
c00127ef:	5b                   	pop    ebx
c00127f0:	c3                   	ret    

c00127f1 <Dbg::logWriteInt(unsigned int)>:
c00127f1:	83 ec 10             	sub    esp,0x10
c00127f4:	6a 0a                	push   0xa
c00127f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127fa:	50                   	push   eax
c00127fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ff:	e8 58 ff ff ff       	call   c001275c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012804:	50                   	push   eax
c0012805:	e8 ca ff ff ff       	call   c00127d4 <Dbg::logs(char*)>
c001280a:	83 c4 20             	add    esp,0x20
c001280d:	c3                   	ret    

c001280e <Dbg::logWriteIntBase(unsigned int, int)>:
c001280e:	83 ec 10             	sub    esp,0x10
c0012811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012815:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012819:	50                   	push   eax
c001281a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001281e:	e8 39 ff ff ff       	call   c001275c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012823:	50                   	push   eax
c0012824:	e8 ab ff ff ff       	call   c00127d4 <Dbg::logs(char*)>
c0012829:	83 c4 20             	add    esp,0x20
c001282c:	c3                   	ret    

c001282d <Dbg::kprintf(char const*, ...)>:
c001282d:	55                   	push   ebp
c001282e:	57                   	push   edi
c001282f:	56                   	push   esi
c0012830:	53                   	push   ebx
c0012831:	83 ec 0c             	sub    esp,0xc
c0012834:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012838:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001283c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012840:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012843:	84 c0                	test   al,al
c0012845:	74 4a                	je     c0012891 <Dbg::kprintf(char const*, ...)+0x64>
c0012847:	31 db                	xor    ebx,ebx
c0012849:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001284c:	3c 25                	cmp    al,0x25
c001284e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012851:	0f 85 e4 00 00 00    	jne    c001293b <Dbg::kprintf(char const*, ...)+0x10e>
c0012857:	83 c3 02             	add    ebx,0x2
c001285a:	8a 07                	mov    al,BYTE PTR [edi]
c001285c:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001285f:	83 e8 25             	sub    eax,0x25
c0012862:	3c 53                	cmp    al,0x53
c0012864:	0f 87 ba 00 00 00    	ja     c0012924 <Dbg::kprintf(char const*, ...)+0xf7>
c001286a:	0f b6 c0             	movzx  eax,al
c001286d:	ff 24 85 74 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d8c]
c0012874:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012878:	89 c8                	mov    eax,ecx
c001287a:	83 c1 04             	add    ecx,0x4
c001287d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012881:	ff 30                	push   DWORD PTR [eax]
c0012883:	e8 4c ff ff ff       	call   c00127d4 <Dbg::logs(char*)>
c0012888:	58                   	pop    eax
c0012889:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001288d:	84 c0                	test   al,al
c001288f:	75 b8                	jne    c0012849 <Dbg::kprintf(char const*, ...)+0x1c>
c0012891:	83 c4 0c             	add    esp,0xc
c0012894:	5b                   	pop    ebx
c0012895:	5e                   	pop    esi
c0012896:	5f                   	pop    edi
c0012897:	5d                   	pop    ebp
c0012898:	c3                   	ret    
c0012899:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001289d:	89 d0                	mov    eax,edx
c001289f:	83 c2 04             	add    edx,0x4
c00128a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128a6:	ff 30                	push   DWORD PTR [eax]
c00128a8:	e8 44 ff ff ff       	call   c00127f1 <Dbg::logWriteInt(unsigned int)>
c00128ad:	58                   	pop    eax
c00128ae:	eb d9                	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c00128b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128b4:	89 d0                	mov    eax,edx
c00128b6:	83 c2 04             	add    edx,0x4
c00128b9:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00128bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128c0:	50                   	push   eax
c00128c1:	e8 f7 fe ff ff       	call   c00127bd <Dbg::logc(char)>
c00128c6:	58                   	pop    eax
c00128c7:	eb c0                	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c00128c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128cd:	89 c8                	mov    eax,ecx
c00128cf:	83 c1 04             	add    ecx,0x4
c00128d2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128d6:	ff 30                	push   DWORD PTR [eax]
c00128d8:	e8 14 ff ff ff       	call   c00127f1 <Dbg::logWriteInt(unsigned int)>
c00128dd:	5f                   	pop    edi
c00128de:	eb a9                	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c00128e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128e4:	89 c8                	mov    eax,ecx
c00128e6:	83 c1 04             	add    ecx,0x4
c00128e9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128ed:	6a 10                	push   0x10
c00128ef:	ff 30                	push   DWORD PTR [eax]
c00128f1:	e8 18 ff ff ff       	call   c001280e <Dbg::logWriteIntBase(unsigned int, int)>
c00128f6:	59                   	pop    ecx
c00128f7:	5f                   	pop    edi
c00128f8:	eb 8f                	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c00128fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128fe:	89 d0                	mov    eax,edx
c0012900:	83 c2 08             	add    edx,0x8
c0012903:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012907:	6a 10                	push   0x10
c0012909:	ff 30                	push   DWORD PTR [eax]
c001290b:	e8 fe fe ff ff       	call   c001280e <Dbg::logWriteIntBase(unsigned int, int)>
c0012910:	58                   	pop    eax
c0012911:	5a                   	pop    edx
c0012912:	e9 72 ff ff ff       	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c0012917:	6a 25                	push   0x25
c0012919:	e8 9f fe ff ff       	call   c00127bd <Dbg::logc(char)>
c001291e:	58                   	pop    eax
c001291f:	e9 65 ff ff ff       	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c0012924:	6a 25                	push   0x25
c0012926:	e8 92 fe ff ff       	call   c00127bd <Dbg::logc(char)>
c001292b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001292e:	50                   	push   eax
c001292f:	e8 89 fe ff ff       	call   c00127bd <Dbg::logc(char)>
c0012934:	5a                   	pop    edx
c0012935:	59                   	pop    ecx
c0012936:	e9 4e ff ff ff       	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c001293b:	50                   	push   eax
c001293c:	89 eb                	mov    ebx,ebp
c001293e:	e8 7a fe ff ff       	call   c00127bd <Dbg::logc(char)>
c0012943:	89 fd                	mov    ebp,edi
c0012945:	58                   	pop    eax
c0012946:	e9 3e ff ff ff       	jmp    c0012889 <Dbg::kprintf(char const*, ...)+0x5c>
c001294b:	90                   	nop

c001294c <File::read(unsigned long long, void*, int*)>:
c001294c:	53                   	push   ebx
c001294d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012951:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012955:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001295c:	3c 19                	cmp    al,0x19
c001295e:	77 35                	ja     c0012995 <File::read(unsigned long long, void*, int*)+0x49>
c0012960:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c0012967:	85 c0                	test   eax,eax
c0012969:	74 2a                	je     c0012995 <File::read(unsigned long long, void*, int*)+0x49>
c001296b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012971:	85 c0                	test   eax,eax
c0012973:	74 20                	je     c0012995 <File::read(unsigned long long, void*, int*)+0x49>
c0012975:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012979:	74 21                	je     c001299c <File::read(unsigned long long, void*, int*)+0x50>
c001297b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001297d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012981:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001298b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001298f:	5b                   	pop    ebx
c0012990:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012993:	ff e0                	jmp    eax
c0012995:	b8 0b 00 00 00       	mov    eax,0xb
c001299a:	eb 05                	jmp    c00129a1 <File::read(unsigned long long, void*, int*)+0x55>
c001299c:	b8 05 00 00 00       	mov    eax,0x5
c00129a1:	5b                   	pop    ebx
c00129a2:	c3                   	ret    
c00129a3:	90                   	nop

c00129a4 <File::write(unsigned long long, void*, int*)>:
c00129a4:	53                   	push   ebx
c00129a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129ad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129b4:	3c 19                	cmp    al,0x19
c00129b6:	77 35                	ja     c00129ed <File::write(unsigned long long, void*, int*)+0x49>
c00129b8:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c00129bf:	85 c0                	test   eax,eax
c00129c1:	74 2a                	je     c00129ed <File::write(unsigned long long, void*, int*)+0x49>
c00129c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129c9:	85 c0                	test   eax,eax
c00129cb:	74 20                	je     c00129ed <File::write(unsigned long long, void*, int*)+0x49>
c00129cd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129d1:	74 21                	je     c00129f4 <File::write(unsigned long long, void*, int*)+0x50>
c00129d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129d9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e7:	5b                   	pop    ebx
c00129e8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00129eb:	ff e0                	jmp    eax
c00129ed:	b8 0b 00 00 00       	mov    eax,0xb
c00129f2:	eb 05                	jmp    c00129f9 <File::write(unsigned long long, void*, int*)+0x55>
c00129f4:	b8 05 00 00 00       	mov    eax,0x5
c00129f9:	5b                   	pop    ebx
c00129fa:	c3                   	ret    
c00129fb:	90                   	nop

c00129fc <Directory::read(unsigned long long, void*, int*)>:
c00129fc:	53                   	push   ebx
c00129fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a05:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a0c:	3c 19                	cmp    al,0x19
c0012a0e:	77 35                	ja     c0012a45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a10:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c0012a17:	85 c0                	test   eax,eax
c0012a19:	74 2a                	je     c0012a45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a1b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a21:	85 c0                	test   eax,eax
c0012a23:	74 20                	je     c0012a45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a29:	74 21                	je     c0012a4c <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a2d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a31:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a3f:	5b                   	pop    ebx
c0012a40:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a43:	ff e0                	jmp    eax
c0012a45:	b8 0b 00 00 00       	mov    eax,0xb
c0012a4a:	eb 05                	jmp    c0012a51 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012a4c:	b8 05 00 00 00       	mov    eax,0x5
c0012a51:	5b                   	pop    ebx
c0012a52:	c3                   	ret    
c0012a53:	90                   	nop

c0012a54 <Directory::write(unsigned long long, void*, int*)>:
c0012a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a58:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012a5f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a64:	80 fa 19             	cmp    dl,0x19
c0012a67:	77 18                	ja     c0012a81 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a69:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c0012a70:	85 d2                	test   edx,edx
c0012a72:	74 0d                	je     c0012a81 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a74:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012a7b:	19 c0                	sbb    eax,eax
c0012a7d:	83 e0 0a             	and    eax,0xa
c0012a80:	40                   	inc    eax
c0012a81:	c3                   	ret    

c0012a82 <File::isAtty()>:
c0012a82:	31 c0                	xor    eax,eax
c0012a84:	c3                   	ret    
c0012a85:	90                   	nop

c0012a86 <Directory::isAtty()>:
c0012a86:	31 c0                	xor    eax,eax
c0012a88:	c3                   	ret    
c0012a89:	90                   	nop

c0012a8a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012a8a:	b8 0a 00 00 00       	mov    eax,0xa
c0012a8f:	c3                   	ret    

c0012a90 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a90:	b8 0a 00 00 00       	mov    eax,0xa
c0012a95:	c3                   	ret    

c0012a96 <File::~File()>:
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0012a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa2:	89 10                	mov    DWORD PTR [eax],edx
c0012aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa8:	83 ec 0c             	sub    esp,0xc
c0012aab:	50                   	push   eax
c0012aac:	e8 2b eb ff ff       	call   c00115dc <UnixFile::~UnixFile()>
c0012ab1:	83 c4 10             	add    esp,0x10
c0012ab4:	90                   	nop
c0012ab5:	83 c4 0c             	add    esp,0xc
c0012ab8:	c3                   	ret    
c0012ab9:	90                   	nop

c0012aba <File::~File()>:
c0012aba:	83 ec 0c             	sub    esp,0xc
c0012abd:	83 ec 0c             	sub    esp,0xc
c0012ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ac4:	e8 cd ff ff ff       	call   c0012a96 <File::~File()>
c0012ac9:	83 c4 10             	add    esp,0x10
c0012acc:	83 ec 08             	sub    esp,0x8
c0012acf:	68 14 01 00 00       	push   0x114
c0012ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad8:	e8 70 fc ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	c3                   	ret    

c0012ae4 <Directory::~Directory()>:
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c0012aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af0:	89 10                	mov    DWORD PTR [eax],edx
c0012af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	50                   	push   eax
c0012afa:	e8 dd ea ff ff       	call   c00115dc <UnixFile::~UnixFile()>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	90                   	nop
c0012b03:	83 c4 0c             	add    esp,0xc
c0012b06:	c3                   	ret    
c0012b07:	90                   	nop

c0012b08 <Directory::~Directory()>:
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	83 ec 0c             	sub    esp,0xc
c0012b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b12:	e8 cd ff ff ff       	call   c0012ae4 <Directory::~Directory()>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	83 ec 08             	sub    esp,0x8
c0012b1d:	68 14 01 00 00       	push   0x114
c0012b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b26:	e8 22 fc ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	83 c4 0c             	add    esp,0xc
c0012b31:	c3                   	ret    

c0012b32 <Filesystem::Filesystem()>:
c0012b32:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c0012b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b3b:	89 10                	mov    DWORD PTR [eax],edx
c0012b3d:	8b 15 88 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb88
c0012b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4e:	a3 88 cb 02 c0       	mov    ds:0xc002cb88,eax
c0012b53:	90                   	nop
c0012b54:	c3                   	ret    
c0012b55:	90                   	nop

c0012b56 <Filesystem::~Filesystem()>:
c0012b56:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c0012b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b5f:	89 10                	mov    DWORD PTR [eax],edx
c0012b61:	90                   	nop
c0012b62:	c3                   	ret    
c0012b63:	90                   	nop

c0012b64 <Filesystem::~Filesystem()>:
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b6b:	e8 e6 ff ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c0012b70:	83 c4 04             	add    esp,0x4
c0012b73:	83 ec 08             	sub    esp,0x8
c0012b76:	6a 08                	push   0x8
c0012b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7c:	e8 cc fb ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	83 c4 0c             	add    esp,0xc
c0012b87:	c3                   	ret    

c0012b88 <initVFS()>:
c0012b88:	83 ec 18             	sub    esp,0x18
c0012b8b:	6a 08                	push   0x8
c0012b8d:	e8 42 c9 ff ff       	call   c000f4d4 <malloc>
c0012b92:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b95:	e8 b0 d3 00 00       	call   c001ff4a <FAT::FAT()>
c0012b9a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ba1:	e8 2e c9 ff ff       	call   c000f4d4 <malloc>
c0012ba6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ba9:	e8 12 e6 00 00       	call   c00211c0 <ISO9660::ISO9660()>
c0012bae:	83 c4 1c             	add    esp,0x1c
c0012bb1:	c3                   	ret    

c0012bb2 <standardiseFiles(char*, char const*, char const*)>:
c0012bb2:	55                   	push   ebp
c0012bb3:	57                   	push   edi
c0012bb4:	56                   	push   esi
c0012bb5:	53                   	push   ebx
c0012bb6:	81 ec 10 04 00 00    	sub    esp,0x410
c0012bbc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012bc3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012bca:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012bd1:	68 00 04 00 00       	push   0x400
c0012bd6:	6a 00                	push   0x0
c0012bd8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012bdc:	56                   	push   esi
c0012bdd:	e8 a9 da fe ff       	call   c000068b <memset>
c0012be2:	83 c4 10             	add    esp,0x10
c0012be5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012be9:	75 0b                	jne    c0012bf6 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012beb:	50                   	push   eax
c0012bec:	50                   	push   eax
c0012bed:	57                   	push   edi
c0012bee:	56                   	push   esi
c0012bef:	e8 36 db fe ff       	call   c000072a <strcpy>
c0012bf4:	eb 41                	jmp    c0012c37 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012bf6:	8a 07                	mov    al,BYTE PTR [edi]
c0012bf8:	3c 5c                	cmp    al,0x5c
c0012bfa:	74 04                	je     c0012c00 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012bfc:	3c 2f                	cmp    al,0x2f
c0012bfe:	75 18                	jne    c0012c18 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c03:	3c 60                	cmp    al,0x60
c0012c05:	7e 03                	jle    c0012c0a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012c07:	83 e8 20             	sub    eax,0x20
c0012c0a:	88 04 24             	mov    BYTE PTR [esp],al
c0012c0d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c14:	50                   	push   eax
c0012c15:	50                   	push   eax
c0012c16:	eb 18                	jmp    c0012c30 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c18:	50                   	push   eax
c0012c19:	50                   	push   eax
c0012c1a:	55                   	push   ebp
c0012c1b:	56                   	push   esi
c0012c1c:	e8 09 db fe ff       	call   c000072a <strcpy>
c0012c21:	5a                   	pop    edx
c0012c22:	59                   	pop    ecx
c0012c23:	68 46 a8 02 c0       	push   0xc002a846
c0012c28:	56                   	push   esi
c0012c29:	e8 b3 db fe ff       	call   c00007e1 <strcat>
c0012c2e:	5d                   	pop    ebp
c0012c2f:	58                   	pop    eax
c0012c30:	57                   	push   edi
c0012c31:	56                   	push   esi
c0012c32:	e8 aa db fe ff       	call   c00007e1 <strcat>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012c3d:	3c 60                	cmp    al,0x60
c0012c3f:	7e 03                	jle    c0012c44 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012c41:	83 e8 20             	sub    eax,0x20
c0012c44:	88 04 24             	mov    BYTE PTR [esp],al
c0012c47:	88 03                	mov    BYTE PTR [ebx],al
c0012c49:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c50:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012c56:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012c5a:	bf 03 00 00 00       	mov    edi,0x3
c0012c5f:	b8 03 00 00 00       	mov    eax,0x3
c0012c64:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012c67:	84 d2                	test   dl,dl
c0012c69:	0f 84 91 00 00 00    	je     c0012d00 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c6f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c72:	80 fa 5c             	cmp    dl,0x5c
c0012c75:	74 05                	je     c0012c7c <standardiseFiles(char*, char const*, char const*)+0xca>
c0012c77:	80 fa 2f             	cmp    dl,0x2f
c0012c7a:	75 12                	jne    c0012c8e <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c7c:	89 c5                	mov    ebp,eax
c0012c7e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c83:	74 09                	je     c0012c8e <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c85:	40                   	inc    eax
c0012c86:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c8a:	89 cf                	mov    edi,ecx
c0012c8c:	eb d6                	jmp    c0012c64 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c8e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c93:	75 5b                	jne    c0012cf0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c95:	80 fa 2e             	cmp    dl,0x2e
c0012c98:	75 56                	jne    c0012cf0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c9a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c9e:	74 19                	je     c0012cb9 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012ca0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ca5:	74 53                	je     c0012cfa <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ca7:	89 f9                	mov    ecx,edi
c0012ca9:	41                   	inc    ecx
c0012caa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012cad:	80 fa 2f             	cmp    dl,0x2f
c0012cb0:	74 f7                	je     c0012ca9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012cb2:	80 fa 5c             	cmp    dl,0x5c
c0012cb5:	74 f2                	je     c0012ca9 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012cb7:	eb d1                	jmp    c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cb9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012cbe:	74 3a                	je     c0012cfa <standardiseFiles(char*, char const*, char const*)+0x148>
c0012cc0:	83 f8 03             	cmp    eax,0x3
c0012cc3:	74 c5                	je     c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cc5:	41                   	inc    ecx
c0012cc6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012cc9:	80 fa 2f             	cmp    dl,0x2f
c0012ccc:	74 f7                	je     c0012cc5 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012cce:	80 fa 5c             	cmp    dl,0x5c
c0012cd1:	74 f2                	je     c0012cc5 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012cd3:	48                   	dec    eax
c0012cd4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012cd8:	75 06                	jne    c0012ce0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012cda:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012cde:	eb f3                	jmp    c0012cd3 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012ce0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ce4:	74 07                	je     c0012ced <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ce6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012cea:	48                   	dec    eax
c0012ceb:	eb f3                	jmp    c0012ce0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ced:	40                   	inc    eax
c0012cee:	eb 9a                	jmp    c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cf0:	80 fa 2f             	cmp    dl,0x2f
c0012cf3:	74 95                	je     c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cf5:	80 fa 5c             	cmp    dl,0x5c
c0012cf8:	74 90                	je     c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cfa:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012cfd:	40                   	inc    eax
c0012cfe:	eb 8a                	jmp    c0012c8a <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d00:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	53                   	push   ebx
c0012d08:	e8 9b d9 fe ff       	call   c00006a8 <strlen>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d15:	75 26                	jne    c0012d3d <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d17:	83 ec 0c             	sub    esp,0xc
c0012d1a:	53                   	push   ebx
c0012d1b:	e8 88 d9 fe ff       	call   c00006a8 <strlen>
c0012d20:	83 c4 10             	add    esp,0x10
c0012d23:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012d28:	74 26                	je     c0012d50 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012d2a:	83 ec 0c             	sub    esp,0xc
c0012d2d:	53                   	push   ebx
c0012d2e:	e8 75 d9 fe ff       	call   c00006a8 <strlen>
c0012d33:	83 c4 10             	add    esp,0x10
c0012d36:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012d3b:	eb c7                	jmp    c0012d04 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012d3d:	83 ec 0c             	sub    esp,0xc
c0012d40:	53                   	push   ebx
c0012d41:	e8 62 d9 fe ff       	call   c00006a8 <strlen>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d4e:	74 c7                	je     c0012d17 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012d50:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012d56:	5b                   	pop    ebx
c0012d57:	5e                   	pop    esi
c0012d58:	5f                   	pop    edi
c0012d59:	5d                   	pop    ebp
c0012d5a:	c3                   	ret    
c0012d5b:	90                   	nop

c0012d5c <File::File(char const*, Process*)>:
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d63:	83 ec 08             	sub    esp,0x8
c0012d66:	6a 00                	push   0x0
c0012d68:	50                   	push   eax
c0012d69:	e8 8c e6 ff ff       	call   c00113fa <UnixFile::UnixFile(int)>
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0012d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d7a:	89 10                	mov    DWORD PTR [eax],edx
c0012d7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d80:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	83 c0 0d             	add    eax,0xd
c0012d8d:	83 ec 04             	sub    esp,0x4
c0012d90:	52                   	push   edx
c0012d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d95:	50                   	push   eax
c0012d96:	e8 17 fe ff ff       	call   c0012bb2 <standardiseFiles(char*, char const*, char const*)>
c0012d9b:	83 c4 10             	add    esp,0x10
c0012d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012da5:	8d 50 bf             	lea    edx,[eax-0x41]
c0012da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dac:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012dba:	90                   	nop
c0012dbb:	83 c4 0c             	add    esp,0xc
c0012dbe:	c3                   	ret    
c0012dbf:	90                   	nop

c0012dc0 <File::open(FileOpenMode)>:
c0012dc0:	53                   	push   ebx
c0012dc1:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc6:	83 ec 08             	sub    esp,0x8
c0012dc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dcd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012dd4:	80 fa 19             	cmp    dl,0x19
c0012dd7:	77 40                	ja     c0012e19 <File::open(FileOpenMode)+0x59>
c0012dd9:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c0012de0:	85 d2                	test   edx,edx
c0012de2:	74 35                	je     c0012e19 <File::open(FileOpenMode)+0x59>
c0012de4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dea:	85 d2                	test   edx,edx
c0012dec:	74 2b                	je     c0012e19 <File::open(FileOpenMode)+0x59>
c0012dee:	b8 06 00 00 00       	mov    eax,0x6
c0012df3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012df7:	75 20                	jne    c0012e19 <File::open(FileOpenMode)+0x59>
c0012df9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dfb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e05:	51                   	push   ecx
c0012e06:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e09:	51                   	push   ecx
c0012e0a:	52                   	push   edx
c0012e0b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	85 c0                	test   eax,eax
c0012e13:	75 04                	jne    c0012e19 <File::open(FileOpenMode)+0x59>
c0012e15:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e19:	83 c4 08             	add    esp,0x8
c0012e1c:	5b                   	pop    ebx
c0012e1d:	c3                   	ret    

c0012e1e <File::close()>:
c0012e1e:	53                   	push   ebx
c0012e1f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e24:	83 ec 08             	sub    esp,0x8
c0012e27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e2b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e32:	80 fa 19             	cmp    dl,0x19
c0012e35:	77 41                	ja     c0012e78 <File::close()+0x5a>
c0012e37:	8b 1c 95 20 d0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2fe0]
c0012e3e:	85 db                	test   ebx,ebx
c0012e40:	74 36                	je     c0012e78 <File::close()+0x5a>
c0012e42:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e49:	74 2d                	je     c0012e78 <File::close()+0x5a>
c0012e4b:	b8 05 00 00 00       	mov    eax,0x5
c0012e50:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e54:	74 22                	je     c0012e78 <File::close()+0x5a>
c0012e56:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e5a:	8b 04 95 20 d0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2fe0]
c0012e61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e67:	53                   	push   ebx
c0012e68:	53                   	push   ebx
c0012e69:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e6b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e71:	50                   	push   eax
c0012e72:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	83 c4 08             	add    esp,0x8
c0012e7b:	5b                   	pop    ebx
c0012e7c:	c3                   	ret    
c0012e7d:	90                   	nop

c0012e7e <File::seek(unsigned long long)>:
c0012e7e:	56                   	push   esi
c0012e7f:	53                   	push   ebx
c0012e80:	b8 0b 00 00 00       	mov    eax,0xb
c0012e85:	51                   	push   ecx
c0012e86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e8e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e99:	80 fa 19             	cmp    dl,0x19
c0012e9c:	77 31                	ja     c0012ecf <File::seek(unsigned long long)+0x51>
c0012e9e:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c0012ea5:	85 d2                	test   edx,edx
c0012ea7:	74 26                	je     c0012ecf <File::seek(unsigned long long)+0x51>
c0012ea9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eaf:	85 d2                	test   edx,edx
c0012eb1:	74 1c                	je     c0012ecf <File::seek(unsigned long long)+0x51>
c0012eb3:	b8 05 00 00 00       	mov    eax,0x5
c0012eb8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012ebc:	74 11                	je     c0012ecf <File::seek(unsigned long long)+0x51>
c0012ebe:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ec0:	53                   	push   ebx
c0012ec1:	51                   	push   ecx
c0012ec2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012ec8:	52                   	push   edx
c0012ec9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ecc:	83 c4 10             	add    esp,0x10
c0012ecf:	5a                   	pop    edx
c0012ed0:	5b                   	pop    ebx
c0012ed1:	5e                   	pop    esi
c0012ed2:	c3                   	ret    
c0012ed3:	90                   	nop

c0012ed4 <File::tell(unsigned long long*)>:
c0012ed4:	83 ec 0c             	sub    esp,0xc
c0012ed7:	b8 0b 00 00 00       	mov    eax,0xb
c0012edc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ee0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ee7:	80 fa 19             	cmp    dl,0x19
c0012eea:	77 34                	ja     c0012f20 <File::tell(unsigned long long*)+0x4c>
c0012eec:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c0012ef3:	85 d2                	test   edx,edx
c0012ef5:	74 29                	je     c0012f20 <File::tell(unsigned long long*)+0x4c>
c0012ef7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012efd:	85 d2                	test   edx,edx
c0012eff:	74 1f                	je     c0012f20 <File::tell(unsigned long long*)+0x4c>
c0012f01:	b8 05 00 00 00       	mov    eax,0x5
c0012f06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f0a:	74 14                	je     c0012f20 <File::tell(unsigned long long*)+0x4c>
c0012f0c:	50                   	push   eax
c0012f0d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f19:	52                   	push   edx
c0012f1a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	83 c4 0c             	add    esp,0xc
c0012f23:	c3                   	ret    

c0012f24 <File::rewind()>:
c0012f24:	83 ec 10             	sub    esp,0x10
c0012f27:	6a 00                	push   0x0
c0012f29:	6a 00                	push   0x0
c0012f2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2f:	e8 4a ff ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c0012f34:	83 c4 1c             	add    esp,0x1c
c0012f37:	c3                   	ret    

c0012f38 <File::unlink()>:
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f4b:	80 f9 19             	cmp    cl,0x19
c0012f4e:	77 2f                	ja     c0012f7f <File::unlink()+0x47>
c0012f50:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0012f57:	85 c9                	test   ecx,ecx
c0012f59:	74 24                	je     c0012f7f <File::unlink()+0x47>
c0012f5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f61:	85 c9                	test   ecx,ecx
c0012f63:	74 1a                	je     c0012f7f <File::unlink()+0x47>
c0012f65:	b8 06 00 00 00       	mov    eax,0x6
c0012f6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f6e:	75 0f                	jne    c0012f7f <File::unlink()+0x47>
c0012f70:	83 c2 0d             	add    edx,0xd
c0012f73:	50                   	push   eax
c0012f74:	50                   	push   eax
c0012f75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f77:	52                   	push   edx
c0012f78:	51                   	push   ecx
c0012f79:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	83 c4 0c             	add    esp,0xc
c0012f82:	c3                   	ret    
c0012f83:	90                   	nop

c0012f84 <File::rename(char const*)>:
c0012f84:	83 ec 0c             	sub    esp,0xc
c0012f87:	b8 0b 00 00 00       	mov    eax,0xb
c0012f8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f97:	80 f9 19             	cmp    cl,0x19
c0012f9a:	77 32                	ja     c0012fce <File::rename(char const*)+0x4a>
c0012f9c:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0012fa3:	85 c9                	test   ecx,ecx
c0012fa5:	74 27                	je     c0012fce <File::rename(char const*)+0x4a>
c0012fa7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fad:	85 c9                	test   ecx,ecx
c0012faf:	74 1d                	je     c0012fce <File::rename(char const*)+0x4a>
c0012fb1:	b8 06 00 00 00       	mov    eax,0x6
c0012fb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fba:	75 12                	jne    c0012fce <File::rename(char const*)+0x4a>
c0012fbc:	83 c2 0d             	add    edx,0xd
c0012fbf:	50                   	push   eax
c0012fc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fc6:	52                   	push   edx
c0012fc7:	51                   	push   ecx
c0012fc8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	83 c4 0c             	add    esp,0xc
c0012fd1:	c3                   	ret    

c0012fd2 <File::chfatattr(unsigned char, unsigned char)>:
c0012fd2:	57                   	push   edi
c0012fd3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd8:	56                   	push   esi
c0012fd9:	53                   	push   ebx
c0012fda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012fe2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fe9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012fed:	80 f9 19             	cmp    cl,0x19
c0012ff0:	77 37                	ja     c0013029 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ff2:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0012ff9:	85 c9                	test   ecx,ecx
c0012ffb:	74 2c                	je     c0013029 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ffd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013003:	85 c9                	test   ecx,ecx
c0013005:	74 22                	je     c0013029 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013007:	b8 06 00 00 00       	mov    eax,0x6
c001300c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013010:	75 17                	jne    c0013029 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013012:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013014:	89 f0                	mov    eax,esi
c0013016:	83 c2 0d             	add    edx,0xd
c0013019:	0f b6 f0             	movzx  esi,al
c001301c:	0f b6 db             	movzx  ebx,bl
c001301f:	56                   	push   esi
c0013020:	53                   	push   ebx
c0013021:	52                   	push   edx
c0013022:	51                   	push   ecx
c0013023:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013026:	83 c4 10             	add    esp,0x10
c0013029:	5b                   	pop    ebx
c001302a:	5e                   	pop    esi
c001302b:	5f                   	pop    edi
c001302c:	c3                   	ret    
c001302d:	90                   	nop

c001302e <File::exists()>:
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	31 c0                	xor    eax,eax
c0013033:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013037:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001303e:	80 f9 19             	cmp    cl,0x19
c0013041:	77 24                	ja     c0013067 <File::exists()+0x39>
c0013043:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c001304a:	85 c9                	test   ecx,ecx
c001304c:	74 19                	je     c0013067 <File::exists()+0x39>
c001304e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013054:	85 c9                	test   ecx,ecx
c0013056:	74 0f                	je     c0013067 <File::exists()+0x39>
c0013058:	83 c2 0d             	add    edx,0xd
c001305b:	50                   	push   eax
c001305c:	50                   	push   eax
c001305d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001305f:	52                   	push   edx
c0013060:	51                   	push   ecx
c0013061:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	83 c4 0c             	add    esp,0xc
c001306a:	c3                   	ret    
c001306b:	90                   	nop

c001306c <File::stat(unsigned long long*, bool*)>:
c001306c:	56                   	push   esi
c001306d:	53                   	push   ebx
c001306e:	50                   	push   eax
c001306f:	b8 0b 00 00 00       	mov    eax,0xb
c0013074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013078:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001307c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013083:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013087:	80 f9 19             	cmp    cl,0x19
c001308a:	77 3d                	ja     c00130c9 <File::stat(unsigned long long*, bool*)+0x5d>
c001308c:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0013093:	85 c9                	test   ecx,ecx
c0013095:	74 32                	je     c00130c9 <File::stat(unsigned long long*, bool*)+0x5d>
c0013097:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 28                	je     c00130c9 <File::stat(unsigned long long*, bool*)+0x5d>
c00130a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a7:	74 13                	je     c00130bc <File::stat(unsigned long long*, bool*)+0x50>
c00130a9:	83 ec 04             	sub    esp,0x4
c00130ac:	56                   	push   esi
c00130ad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00130b3:	51                   	push   ecx
c00130b4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00130b7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00130ba:	eb 0a                	jmp    c00130c6 <File::stat(unsigned long long*, bool*)+0x5a>
c00130bc:	53                   	push   ebx
c00130bd:	83 c2 0d             	add    edx,0xd
c00130c0:	56                   	push   esi
c00130c1:	52                   	push   edx
c00130c2:	51                   	push   ecx
c00130c3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	5a                   	pop    edx
c00130ca:	5b                   	pop    ebx
c00130cb:	5e                   	pop    esi
c00130cc:	c3                   	ret    

c00130cd <getcwd(Process*, char*, int)>:
c00130cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130d1:	31 c0                	xor    eax,eax
c00130d3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00130d6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00130da:	7d 15                	jge    c00130f1 <getcwd(Process*, char*, int)+0x24>
c00130dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130e0:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00130e7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00130ea:	84 c9                	test   cl,cl
c00130ec:	74 06                	je     c00130f4 <getcwd(Process*, char*, int)+0x27>
c00130ee:	40                   	inc    eax
c00130ef:	eb e2                	jmp    c00130d3 <getcwd(Process*, char*, int)+0x6>
c00130f1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00130f4:	31 c0                	xor    eax,eax
c00130f6:	c3                   	ret    

c00130f7 <setcwd(Process*, char*)>:
c00130f7:	55                   	push   ebp
c00130f8:	57                   	push   edi
c00130f9:	56                   	push   esi
c00130fa:	53                   	push   ebx
c00130fb:	81 ec 20 02 00 00    	sub    esp,0x220
c0013101:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013108:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001310e:	57                   	push   edi
c001310f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013116:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001311a:	56                   	push   esi
c001311b:	e8 92 fa ff ff       	call   c0012bb2 <standardiseFiles(char*, char const*, char const*)>
c0013120:	89 34 24             	mov    DWORD PTR [esp],esi
c0013123:	e8 80 d5 fe ff       	call   c00006a8 <strlen>
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	83 f8 02             	cmp    eax,0x2
c001312e:	77 17                	ja     c0013147 <setcwd(Process*, char*)+0x50>
c0013130:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013135:	83 e8 41             	sub    eax,0x41
c0013138:	83 f8 19             	cmp    eax,0x19
c001313b:	76 24                	jbe    c0013161 <setcwd(Process*, char*)+0x6a>
c001313d:	b8 03 00 00 00       	mov    eax,0x3
c0013142:	e9 e0 00 00 00       	jmp    c0013227 <setcwd(Process*, char*)+0x130>
c0013147:	83 ec 0c             	sub    esp,0xc
c001314a:	56                   	push   esi
c001314b:	e8 58 d5 fe ff       	call   c00006a8 <strlen>
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	83 f8 03             	cmp    eax,0x3
c0013156:	75 34                	jne    c001318c <setcwd(Process*, char*)+0x95>
c0013158:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001315d:	75 2d                	jne    c001318c <setcwd(Process*, char*)+0x95>
c001315f:	eb cf                	jmp    c0013130 <setcwd(Process*, char*)+0x39>
c0013161:	8b 14 85 20 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2fe0]
c0013168:	b8 05 00 00 00       	mov    eax,0x5
c001316d:	85 d2                	test   edx,edx
c001316f:	0f 84 b2 00 00 00    	je     c0013227 <setcwd(Process*, char*)+0x130>
c0013175:	b8 06 00 00 00       	mov    eax,0x6
c001317a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013181:	0f 85 92 00 00 00    	jne    c0013219 <setcwd(Process*, char*)+0x122>
c0013187:	e9 9b 00 00 00       	jmp    c0013227 <setcwd(Process*, char*)+0x130>
c001318c:	83 ec 0c             	sub    esp,0xc
c001318f:	68 14 01 00 00       	push   0x114
c0013194:	e8 3b c3 ff ff       	call   c000f4d4 <malloc>
c0013199:	83 c4 0c             	add    esp,0xc
c001319c:	89 c3                	mov    ebx,eax
c001319e:	55                   	push   ebp
c001319f:	56                   	push   esi
c00131a0:	50                   	push   eax
c00131a1:	e8 b6 fb ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c00131a6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131ab:	83 c4 0c             	add    esp,0xc
c00131ae:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00131b2:	50                   	push   eax
c00131b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131b7:	50                   	push   eax
c00131b8:	53                   	push   ebx
c00131b9:	e8 ae fe ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	83 f8 02             	cmp    eax,0x2
c00131c4:	74 04                	je     c00131ca <setcwd(Process*, char*)+0xd3>
c00131c6:	85 c0                	test   eax,eax
c00131c8:	74 1c                	je     c00131e6 <setcwd(Process*, char*)+0xef>
c00131ca:	b8 01 00 00 00       	mov    eax,0x1
c00131cf:	85 db                	test   ebx,ebx
c00131d1:	74 54                	je     c0013227 <setcwd(Process*, char*)+0x130>
c00131d3:	83 ec 0c             	sub    esp,0xc
c00131d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131d8:	53                   	push   ebx
c00131d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131dc:	83 c4 10             	add    esp,0x10
c00131df:	b8 01 00 00 00       	mov    eax,0x1
c00131e4:	eb 41                	jmp    c0013227 <setcwd(Process*, char*)+0x130>
c00131e6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00131eb:	75 1c                	jne    c0013209 <setcwd(Process*, char*)+0x112>
c00131ed:	b8 02 00 00 00       	mov    eax,0x2
c00131f2:	85 db                	test   ebx,ebx
c00131f4:	74 31                	je     c0013227 <setcwd(Process*, char*)+0x130>
c00131f6:	83 ec 0c             	sub    esp,0xc
c00131f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131fb:	53                   	push   ebx
c00131fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	b8 02 00 00 00       	mov    eax,0x2
c0013207:	eb 1e                	jmp    c0013227 <setcwd(Process*, char*)+0x130>
c0013209:	85 db                	test   ebx,ebx
c001320b:	74 0c                	je     c0013219 <setcwd(Process*, char*)+0x122>
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013212:	53                   	push   ebx
c0013213:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013216:	83 c4 10             	add    esp,0x10
c0013219:	50                   	push   eax
c001321a:	50                   	push   eax
c001321b:	56                   	push   esi
c001321c:	57                   	push   edi
c001321d:	e8 08 d5 fe ff       	call   c000072a <strcpy>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	31 c0                	xor    eax,eax
c0013227:	81 c4 1c 02 00 00    	add    esp,0x21c
c001322d:	5b                   	pop    ebx
c001322e:	5e                   	pop    esi
c001322f:	5f                   	pop    edi
c0013230:	5d                   	pop    ebp
c0013231:	c3                   	ret    

c0013232 <Directory::Directory(char const*, Process*)>:
c0013232:	83 ec 0c             	sub    esp,0xc
c0013235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013239:	83 ec 08             	sub    esp,0x8
c001323c:	6a 00                	push   0x0
c001323e:	50                   	push   eax
c001323f:	e8 b6 e1 ff ff       	call   c00113fa <UnixFile::UnixFile(int)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	ba 4c 94 02 c0       	mov    edx,0xc002944c
c001324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013250:	89 10                	mov    DWORD PTR [eax],edx
c0013252:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013256:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001325c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013260:	83 c0 0d             	add    eax,0xd
c0013263:	83 ec 04             	sub    esp,0x4
c0013266:	52                   	push   edx
c0013267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326b:	50                   	push   eax
c001326c:	e8 41 f9 ff ff       	call   c0012bb2 <standardiseFiles(char*, char const*, char const*)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013278:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001327b:	8d 50 bf             	lea    edx,[eax-0x41]
c001327e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013282:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013290:	90                   	nop
c0013291:	83 c4 0c             	add    esp,0xc
c0013294:	c3                   	ret    
c0013295:	90                   	nop

c0013296 <Directory::open()>:
c0013296:	53                   	push   ebx
c0013297:	b8 0b 00 00 00       	mov    eax,0xb
c001329c:	83 ec 08             	sub    esp,0x8
c001329f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132a3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00132aa:	80 fa 19             	cmp    dl,0x19
c00132ad:	77 3d                	ja     c00132ec <Directory::open()+0x56>
c00132af:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c00132b6:	85 d2                	test   edx,edx
c00132b8:	74 32                	je     c00132ec <Directory::open()+0x56>
c00132ba:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00132c0:	85 d2                	test   edx,edx
c00132c2:	74 28                	je     c00132ec <Directory::open()+0x56>
c00132c4:	b8 06 00 00 00       	mov    eax,0x6
c00132c9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00132cd:	75 1d                	jne    c00132ec <Directory::open()+0x56>
c00132cf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00132d5:	50                   	push   eax
c00132d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00132d8:	51                   	push   ecx
c00132d9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00132dc:	51                   	push   ecx
c00132dd:	52                   	push   edx
c00132de:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	85 c0                	test   eax,eax
c00132e6:	75 04                	jne    c00132ec <Directory::open()+0x56>
c00132e8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00132ec:	83 c4 08             	add    esp,0x8
c00132ef:	5b                   	pop    ebx
c00132f0:	c3                   	ret    
c00132f1:	90                   	nop

c00132f2 <Directory::close()>:
c00132f2:	53                   	push   ebx
c00132f3:	b8 0b 00 00 00       	mov    eax,0xb
c00132f8:	83 ec 08             	sub    esp,0x8
c00132fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00132ff:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013306:	80 fa 19             	cmp    dl,0x19
c0013309:	77 41                	ja     c001334c <Directory::close()+0x5a>
c001330b:	8b 1c 95 20 d0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2fe0]
c0013312:	85 db                	test   ebx,ebx
c0013314:	74 36                	je     c001334c <Directory::close()+0x5a>
c0013316:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001331d:	74 2d                	je     c001334c <Directory::close()+0x5a>
c001331f:	b8 05 00 00 00       	mov    eax,0x5
c0013324:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013328:	74 22                	je     c001334c <Directory::close()+0x5a>
c001332a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001332e:	8b 04 95 20 d0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2fe0]
c0013335:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001333b:	53                   	push   ebx
c001333c:	53                   	push   ebx
c001333d:	8b 10                	mov    edx,DWORD PTR [eax]
c001333f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013345:	50                   	push   eax
c0013346:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	83 c4 08             	add    esp,0x8
c001334f:	5b                   	pop    ebx
c0013350:	c3                   	ret    
c0013351:	90                   	nop

c0013352 <Directory::unlink()>:
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001335e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013365:	80 f9 19             	cmp    cl,0x19
c0013368:	77 2f                	ja     c0013399 <Directory::unlink()+0x47>
c001336a:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0013371:	85 c9                	test   ecx,ecx
c0013373:	74 24                	je     c0013399 <Directory::unlink()+0x47>
c0013375:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337b:	85 c9                	test   ecx,ecx
c001337d:	74 1a                	je     c0013399 <Directory::unlink()+0x47>
c001337f:	b8 06 00 00 00       	mov    eax,0x6
c0013384:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013388:	75 0f                	jne    c0013399 <Directory::unlink()+0x47>
c001338a:	83 c2 0d             	add    edx,0xd
c001338d:	50                   	push   eax
c001338e:	50                   	push   eax
c001338f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013391:	52                   	push   edx
c0013392:	51                   	push   ecx
c0013393:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	83 c4 0c             	add    esp,0xc
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Directory::rename(char const*)>:
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	b8 0b 00 00 00       	mov    eax,0xb
c00133a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133b1:	80 f9 19             	cmp    cl,0x19
c00133b4:	77 32                	ja     c00133e8 <Directory::rename(char const*)+0x4a>
c00133b6:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c00133bd:	85 c9                	test   ecx,ecx
c00133bf:	74 27                	je     c00133e8 <Directory::rename(char const*)+0x4a>
c00133c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133c7:	85 c9                	test   ecx,ecx
c00133c9:	74 1d                	je     c00133e8 <Directory::rename(char const*)+0x4a>
c00133cb:	b8 06 00 00 00       	mov    eax,0x6
c00133d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133d4:	75 12                	jne    c00133e8 <Directory::rename(char const*)+0x4a>
c00133d6:	83 c2 0d             	add    edx,0xd
c00133d9:	50                   	push   eax
c00133da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133e0:	52                   	push   edx
c00133e1:	51                   	push   ecx
c00133e2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	83 c4 0c             	add    esp,0xc
c00133eb:	c3                   	ret    

c00133ec <Directory::exists()>:
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	31 c0                	xor    eax,eax
c00133f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133f5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133fc:	80 f9 19             	cmp    cl,0x19
c00133ff:	77 24                	ja     c0013425 <Directory::exists()+0x39>
c0013401:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0013408:	85 c9                	test   ecx,ecx
c001340a:	74 19                	je     c0013425 <Directory::exists()+0x39>
c001340c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013412:	85 c9                	test   ecx,ecx
c0013414:	74 0f                	je     c0013425 <Directory::exists()+0x39>
c0013416:	83 c2 0d             	add    edx,0xd
c0013419:	50                   	push   eax
c001341a:	50                   	push   eax
c001341b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001341d:	52                   	push   edx
c001341e:	51                   	push   ecx
c001341f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	83 c4 0c             	add    esp,0xc
c0013428:	c3                   	ret    
c0013429:	90                   	nop

c001342a <Directory::read(dirent*)>:
c001342a:	83 ec 1c             	sub    esp,0x1c
c001342d:	b8 0b 00 00 00       	mov    eax,0xb
c0013432:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013436:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001343d:	80 fa 19             	cmp    dl,0x19
c0013440:	77 30                	ja     c0013472 <Directory::read(dirent*)+0x48>
c0013442:	8b 14 95 20 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe0]
c0013449:	85 d2                	test   edx,edx
c001344b:	74 25                	je     c0013472 <Directory::read(dirent*)+0x48>
c001344d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013454:	74 1c                	je     c0013472 <Directory::read(dirent*)+0x48>
c0013456:	83 ec 0c             	sub    esp,0xc
c0013459:	8b 01                	mov    eax,DWORD PTR [ecx]
c001345b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001345f:	52                   	push   edx
c0013460:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013464:	6a 00                	push   0x0
c0013466:	68 10 01 00 00       	push   0x110
c001346b:	51                   	push   ecx
c001346c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001346f:	83 c4 20             	add    esp,0x20
c0013472:	83 c4 1c             	add    esp,0x1c
c0013475:	c3                   	ret    

c0013476 <Directory::create()>:
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	b8 0b 00 00 00       	mov    eax,0xb
c001347e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013482:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013489:	80 f9 19             	cmp    cl,0x19
c001348c:	77 2f                	ja     c00134bd <Directory::create()+0x47>
c001348e:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c0013495:	85 c9                	test   ecx,ecx
c0013497:	74 24                	je     c00134bd <Directory::create()+0x47>
c0013499:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001349f:	85 c9                	test   ecx,ecx
c00134a1:	74 1a                	je     c00134bd <Directory::create()+0x47>
c00134a3:	b8 06 00 00 00       	mov    eax,0x6
c00134a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134ac:	75 0f                	jne    c00134bd <Directory::create()+0x47>
c00134ae:	83 c2 0d             	add    edx,0xd
c00134b1:	50                   	push   eax
c00134b2:	50                   	push   eax
c00134b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b5:	52                   	push   edx
c00134b6:	51                   	push   ecx
c00134b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	83 c4 0c             	add    esp,0xc
c00134c0:	c3                   	ret    
c00134c1:	90                   	nop

c00134c2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00134c2:	b8 0a 00 00 00       	mov    eax,0xa
c00134c7:	c3                   	ret    

c00134c8 <Bus::Bus(char const*)>:
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cf:	83 ec 08             	sub    esp,0x8
c00134d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d6:	50                   	push   eax
c00134d7:	e8 30 09 00 00       	call   c0013e0c <Device::Device(char const*)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	ba 68 94 02 c0       	mov    edx,0xc0029468
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	89 10                	mov    DWORD PTR [eax],edx
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00134f8:	90                   	nop
c00134f9:	83 c4 0c             	add    esp,0xc
c00134fc:	c3                   	ret    
c00134fd:	90                   	nop

c00134fe <Bus::~Bus()>:
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	ba 68 94 02 c0       	mov    edx,0xc0029468
c0013506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350a:	89 10                	mov    DWORD PTR [eax],edx
c001350c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	50                   	push   eax
c0013514:	e8 d5 05 00 00       	call   c0013aee <Device::~Device()>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	90                   	nop
c001351d:	83 c4 0c             	add    esp,0xc
c0013520:	c3                   	ret    
c0013521:	90                   	nop

c0013522 <Bus::~Bus()>:
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	83 ec 0c             	sub    esp,0xc
c0013528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352c:	e8 cd ff ff ff       	call   c00134fe <Bus::~Bus()>
c0013531:	83 c4 10             	add    esp,0x10
c0013534:	83 ec 08             	sub    esp,0x8
c0013537:	68 58 01 00 00       	push   0x158
c001353c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013540:	e8 08 f2 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	83 c4 0c             	add    esp,0xc
c001354b:	c3                   	ret    

c001354c <Buzzer::Buzzer(char const*)>:
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013553:	83 ec 08             	sub    esp,0x8
c0013556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001355a:	50                   	push   eax
c001355b:	e8 ac 08 00 00       	call   c0013e0c <Device::Device(char const*)>
c0013560:	83 c4 10             	add    esp,0x10
c0013563:	ba 94 94 02 c0       	mov    edx,0xc0029494
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	89 10                	mov    DWORD PTR [eax],edx
c001356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013572:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001357c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013580:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001358a:	90                   	nop
c001358b:	83 c4 0c             	add    esp,0xc
c001358e:	c3                   	ret    
c001358f:	90                   	nop

c0013590 <Buzzer::~Buzzer()>:
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	ba 94 94 02 c0       	mov    edx,0xc0029494
c0013598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359c:	89 10                	mov    DWORD PTR [eax],edx
c001359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	50                   	push   eax
c00135a6:	e8 43 05 00 00       	call   c0013aee <Device::~Device()>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	90                   	nop
c00135af:	83 c4 0c             	add    esp,0xc
c00135b2:	c3                   	ret    
c00135b3:	90                   	nop

c00135b4 <Buzzer::~Buzzer()>:
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	83 ec 0c             	sub    esp,0xc
c00135ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135be:	e8 cd ff ff ff       	call   c0013590 <Buzzer::~Buzzer()>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	83 ec 08             	sub    esp,0x8
c00135c9:	68 5c 01 00 00       	push   0x15c
c00135ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d2:	e8 76 f1 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	83 c4 0c             	add    esp,0xc
c00135dd:	c3                   	ret    

c00135de <Buzzer::stop()>:
c00135de:	83 ec 14             	sub    esp,0x14
c00135e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e7:	6a 00                	push   0x0
c00135e9:	50                   	push   eax
c00135ea:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135ed:	83 c4 1c             	add    esp,0x1c
c00135f0:	c3                   	ret    

c00135f1 <beepThread(void*)>:
c00135f1:	53                   	push   ebx
c00135f2:	83 ec 08             	sub    esp,0x8
c00135f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135f9:	e8 da 97 00 00       	call   c001cdd8 <unlockScheduler()>
c00135fe:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013603:	52                   	push   edx
c0013604:	52                   	push   edx
c0013605:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001360b:	52                   	push   edx
c001360c:	50                   	push   eax
c001360d:	e8 14 9d 00 00       	call   c001d326 <nanoSleep(unsigned long long)>
c0013612:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013615:	e8 c4 ff ff ff       	call   c00135de <Buzzer::stop()>
c001361a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013622:	83 c4 18             	add    esp,0x18
c0013625:	5b                   	pop    ebx
c0013626:	e9 41 9c 00 00       	jmp    c001d26c <blockTask(TaskState)>
c001362b:	90                   	nop

c001362c <Buzzer::beep(int, int, bool)>:
c001362c:	57                   	push   edi
c001362d:	56                   	push   esi
c001362e:	53                   	push   ebx
c001362f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013633:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013637:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001363b:	52                   	push   edx
c001363c:	52                   	push   edx
c001363d:	8b 06                	mov    eax,DWORD PTR [esi]
c001363f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013643:	56                   	push   esi
c0013644:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	89 f8                	mov    eax,edi
c001364c:	84 c0                	test   al,al
c001364e:	74 1f                	je     c001366f <Buzzer::beep(int, int, bool)+0x43>
c0013650:	50                   	push   eax
c0013651:	50                   	push   eax
c0013652:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013658:	99                   	cdq    
c0013659:	52                   	push   edx
c001365a:	50                   	push   eax
c001365b:	e8 c6 9c 00 00       	call   c001d326 <nanoSleep(unsigned long long)>
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013667:	5b                   	pop    ebx
c0013668:	5e                   	pop    esi
c0013669:	5f                   	pop    edi
c001366a:	e9 6f ff ff ff       	jmp    c00135de <Buzzer::stop()>
c001366f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013675:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001367a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013682:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013686:	c7 44 24 14 f1 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc00135f1
c001368e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013692:	5b                   	pop    ebx
c0013693:	5e                   	pop    esi
c0013694:	5f                   	pop    edi
c0013695:	e9 6e 98 00 00       	jmp    c001cf08 <Process::createThread(void (*)(void*), void*, int)>

c001369a <loadClockSettings()>:
c001369a:	c7 05 94 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb94,0xa
c00136a4:	c6 05 91 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb91,0x0
c00136ab:	c6 05 90 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb90,0x1
c00136b2:	c3                   	ret    
c00136b3:	90                   	nop

c00136b4 <Clock::Clock(char const*)>:
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136bb:	83 ec 08             	sub    esp,0x8
c00136be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c2:	50                   	push   eax
c00136c3:	e8 44 07 00 00       	call   c0013e0c <Device::Device(char const*)>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c00136d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d4:	89 10                	mov    DWORD PTR [eax],edx
c00136d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136da:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00136e4:	90                   	nop
c00136e5:	83 c4 0c             	add    esp,0xc
c00136e8:	c3                   	ret    
c00136e9:	90                   	nop

c00136ea <Clock::~Clock()>:
c00136ea:	83 ec 0c             	sub    esp,0xc
c00136ed:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c00136f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f6:	89 10                	mov    DWORD PTR [eax],edx
c00136f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fc:	83 ec 0c             	sub    esp,0xc
c00136ff:	50                   	push   eax
c0013700:	e8 e9 03 00 00       	call   c0013aee <Device::~Device()>
c0013705:	83 c4 10             	add    esp,0x10
c0013708:	90                   	nop
c0013709:	83 c4 0c             	add    esp,0xc
c001370c:	c3                   	ret    
c001370d:	90                   	nop

c001370e <Clock::~Clock()>:
c001370e:	83 ec 0c             	sub    esp,0xc
c0013711:	83 ec 0c             	sub    esp,0xc
c0013714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013718:	e8 cd ff ff ff       	call   c00136ea <Clock::~Clock()>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	83 ec 08             	sub    esp,0x8
c0013723:	68 58 01 00 00       	push   0x158
c0013728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001372c:	e8 1c f0 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	83 c4 0c             	add    esp,0xc
c0013737:	c3                   	ret    

c0013738 <Clock::timeInSecondsLocal()>:
c0013738:	53                   	push   ebx
c0013739:	83 ec 14             	sub    esp,0x14
c001373c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013740:	8b 10                	mov    edx,DWORD PTR [eax]
c0013742:	50                   	push   eax
c0013743:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013746:	0f b6 0d 90 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb90
c001374d:	03 0d 94 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb94
c0013753:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013759:	89 cb                	mov    ebx,ecx
c001375b:	c1 fb 1f             	sar    ebx,0x1f
c001375e:	01 c8                	add    eax,ecx
c0013760:	11 da                	adc    edx,ebx
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	31 c9                	xor    ecx,ecx
c0013767:	80 3d 91 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb91,0x0
c001376e:	74 05                	je     c0013775 <Clock::timeInSecondsLocal()+0x3d>
c0013770:	b9 08 07 00 00       	mov    ecx,0x708
c0013775:	31 db                	xor    ebx,ebx
c0013777:	01 c8                	add    eax,ecx
c0013779:	11 da                	adc    edx,ebx
c001377b:	83 c4 08             	add    esp,0x8
c001377e:	5b                   	pop    ebx
c001377f:	c3                   	ret    

c0013780 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013780:	57                   	push   edi
c0013781:	56                   	push   esi
c0013782:	53                   	push   ebx
c0013783:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001378b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001378d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013791:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013794:	0f b6 05 90 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cb90
c001379b:	03 05 94 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb94
c00137a1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00137a7:	99                   	cdq    
c00137a8:	29 c6                	sub    esi,eax
c00137aa:	19 d7                	sbb    edi,edx
c00137ac:	89 f0                	mov    eax,esi
c00137ae:	89 fa                	mov    edx,edi
c00137b0:	31 f6                	xor    esi,esi
c00137b2:	80 3d 91 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb91,0x0
c00137b9:	74 05                	je     c00137c0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00137bb:	be 08 07 00 00       	mov    esi,0x708
c00137c0:	31 ff                	xor    edi,edi
c00137c2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00137c6:	29 f0                	sub    eax,esi
c00137c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137cc:	19 fa                	sbb    edx,edi
c00137ce:	89 d8                	mov    eax,ebx
c00137d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137d4:	5b                   	pop    ebx
c00137d5:	5e                   	pop    esi
c00137d6:	5f                   	pop    edi
c00137d7:	ff e0                	jmp    eax

c00137d9 <datetimeToSeconds(datetime_t)>:
c00137d9:	55                   	push   ebp
c00137da:	57                   	push   edi
c00137db:	56                   	push   esi
c00137dc:	53                   	push   ebx
c00137dd:	83 ec 14             	sub    esp,0x14
c00137e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00137e4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00137e8:	89 d3                	mov    ebx,edx
c00137ea:	0f b6 c6             	movzx  eax,dh
c00137ed:	c1 eb 10             	shr    ebx,0x10
c00137f0:	48                   	dec    eax
c00137f1:	66 81 eb 6c 07       	sub    bx,0x76c
c00137f6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137fa:	0f b6 f5             	movzx  esi,ch
c00137fd:	89 cf                	mov    edi,ecx
c00137ff:	6b f6 3c             	imul   esi,esi,0x3c
c0013802:	c1 ef 10             	shr    edi,0x10
c0013805:	0f b6 c9             	movzx  ecx,cl
c0013808:	89 f8                	mov    eax,edi
c001380a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013810:	0f b6 f8             	movzx  edi,al
c0013813:	0f b6 d2             	movzx  edx,dl
c0013816:	01 fe                	add    esi,edi
c0013818:	01 f1                	add    ecx,esi
c001381a:	0f b7 f3             	movzx  esi,bx
c001381d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013821:	c1 f9 1f             	sar    ecx,0x1f
c0013824:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013829:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001382d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013832:	8b 0c 8d 00 95 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b00]
c0013839:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001383d:	76 29                	jbe    c0013868 <datetimeToSeconds(datetime_t)+0x8f>
c001383f:	f6 c3 03             	test   bl,0x3
c0013842:	75 24                	jne    c0013868 <datetimeToSeconds(datetime_t)+0x8f>
c0013844:	31 d2                	xor    edx,edx
c0013846:	bf 64 00 00 00       	mov    edi,0x64
c001384b:	89 d8                	mov    eax,ebx
c001384d:	66 f7 f7             	div    di
c0013850:	66 85 d2             	test   dx,dx
c0013853:	75 12                	jne    c0013867 <datetimeToSeconds(datetime_t)+0x8e>
c0013855:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001385b:	bf 90 01 00 00       	mov    edi,0x190
c0013860:	99                   	cdq    
c0013861:	f7 ff                	idiv   edi
c0013863:	85 d2                	test   edx,edx
c0013865:	75 01                	jne    c0013868 <datetimeToSeconds(datetime_t)+0x8f>
c0013867:	41                   	inc    ecx
c0013868:	66 83 fb 46          	cmp    bx,0x46
c001386c:	76 45                	jbe    c00138b3 <datetimeToSeconds(datetime_t)+0xda>
c001386e:	bb 46 00 00 00       	mov    ebx,0x46
c0013873:	bf 64 00 00 00       	mov    edi,0x64
c0013878:	bd 90 01 00 00       	mov    ebp,0x190
c001387d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013882:	f6 c3 03             	test   bl,0x3
c0013885:	75 23                	jne    c00138aa <datetimeToSeconds(datetime_t)+0xd1>
c0013887:	89 d8                	mov    eax,ebx
c0013889:	99                   	cdq    
c001388a:	f7 ff                	idiv   edi
c001388c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013891:	85 d2                	test   edx,edx
c0013893:	75 15                	jne    c00138aa <datetimeToSeconds(datetime_t)+0xd1>
c0013895:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001389b:	99                   	cdq    
c001389c:	f7 fd                	idiv   ebp
c001389e:	83 fa 01             	cmp    edx,0x1
c00138a1:	19 c0                	sbb    eax,eax
c00138a3:	f7 d0                	not    eax
c00138a5:	05 6e 01 00 00       	add    eax,0x16e
c00138aa:	01 c1                	add    ecx,eax
c00138ac:	43                   	inc    ebx
c00138ad:	39 f3                	cmp    ebx,esi
c00138af:	7c cc                	jl     c001387d <datetimeToSeconds(datetime_t)+0xa4>
c00138b1:	eb 35                	jmp    c00138e8 <datetimeToSeconds(datetime_t)+0x10f>
c00138b3:	74 33                	je     c00138e8 <datetimeToSeconds(datetime_t)+0x10f>
c00138b5:	b8 45 00 00 00       	mov    eax,0x45
c00138ba:	89 c2                	mov    edx,eax
c00138bc:	83 e2 03             	and    edx,0x3
c00138bf:	39 f0                	cmp    eax,esi
c00138c1:	7e 0f                	jle    c00138d2 <datetimeToSeconds(datetime_t)+0xf9>
c00138c3:	83 fa 01             	cmp    edx,0x1
c00138c6:	19 d2                	sbb    edx,edx
c00138c8:	48                   	dec    eax
c00138c9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00138d0:	eb e8                	jmp    c00138ba <datetimeToSeconds(datetime_t)+0xe1>
c00138d2:	b8 6d 01 00 00       	mov    eax,0x16d
c00138d7:	85 d2                	test   edx,edx
c00138d9:	75 0b                	jne    c00138e6 <datetimeToSeconds(datetime_t)+0x10d>
c00138db:	66 83 fb 01          	cmp    bx,0x1
c00138df:	19 c0                	sbb    eax,eax
c00138e1:	05 6e 01 00 00       	add    eax,0x16e
c00138e6:	29 c1                	sub    ecx,eax
c00138e8:	b8 80 51 01 00       	mov    eax,0x15180
c00138ed:	f7 e9                	imul   ecx
c00138ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00138f3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00138f7:	83 c4 14             	add    esp,0x14
c00138fa:	5b                   	pop    ebx
c00138fb:	5e                   	pop    esi
c00138fc:	5f                   	pop    edi
c00138fd:	5d                   	pop    ebp
c00138fe:	c3                   	ret    
c00138ff:	90                   	nop

c0013900 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013900:	57                   	push   edi
c0013901:	56                   	push   esi
c0013902:	53                   	push   ebx
c0013903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013907:	8b 06                	mov    eax,DWORD PTR [esi]
c0013909:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001390c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013910:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013914:	e8 c0 fe ff ff       	call   c00137d9 <datetimeToSeconds(datetime_t)>
c0013919:	59                   	pop    ecx
c001391a:	0f b6 0d 90 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb90
c0013921:	5b                   	pop    ebx
c0013922:	03 0d 94 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb94
c0013928:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001392e:	89 cb                	mov    ebx,ecx
c0013930:	c1 fb 1f             	sar    ebx,0x1f
c0013933:	29 c8                	sub    eax,ecx
c0013935:	19 da                	sbb    edx,ebx
c0013937:	31 c9                	xor    ecx,ecx
c0013939:	80 3d 91 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb91,0x0
c0013940:	74 05                	je     c0013947 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013942:	b9 08 07 00 00       	mov    ecx,0x708
c0013947:	31 db                	xor    ebx,ebx
c0013949:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001394d:	29 c8                	sub    eax,ecx
c001394f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013953:	19 da                	sbb    edx,ebx
c0013955:	89 f8                	mov    eax,edi
c0013957:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001395b:	5b                   	pop    ebx
c001395c:	5e                   	pop    esi
c001395d:	5f                   	pop    edi
c001395e:	ff e0                	jmp    eax

c0013960 <secondsToDatetime(unsigned long long)>:
c0013960:	55                   	push   ebp
c0013961:	57                   	push   edi
c0013962:	56                   	push   esi
c0013963:	53                   	push   ebx
c0013964:	83 ec 1c             	sub    esp,0x1c
c0013967:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001396b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001396f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013973:	6a 00                	push   0x0
c0013975:	68 80 51 01 00       	push   0x15180
c001397a:	55                   	push   ebp
c001397b:	57                   	push   edi
c001397c:	e8 db 1a 01 00       	call   c002545c <__udivdi3>
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001398a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001398e:	6a 00                	push   0x0
c0013990:	68 80 51 01 00       	push   0x15180
c0013995:	55                   	push   ebp
c0013996:	57                   	push   edi
c0013997:	bf 10 0e 00 00       	mov    edi,0xe10
c001399c:	e8 bb 1b 01 00       	call   c002555c <__umoddi3>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	99                   	cdq    
c00139a5:	f7 ff                	idiv   edi
c00139a7:	bf 3c 00 00 00       	mov    edi,0x3c
c00139ac:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00139af:	89 d0                	mov    eax,edx
c00139b1:	99                   	cdq    
c00139b2:	f7 ff                	idiv   edi
c00139b4:	85 db                	test   ebx,ebx
c00139b6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00139b9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00139bc:	79 11                	jns    c00139cf <secondsToDatetime(unsigned long long)+0x6f>
c00139be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00139c2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00139c8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00139cd:	eb 07                	jmp    c00139d6 <secondsToDatetime(unsigned long long)+0x76>
c00139cf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00139d4:	89 d8                	mov    eax,ebx
c00139d6:	bf b4 05 00 00       	mov    edi,0x5b4
c00139db:	99                   	cdq    
c00139dc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00139e1:	f7 f9                	idiv   ecx
c00139e3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00139e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139ec:	31 d2                	xor    edx,edx
c00139ee:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00139f6:	01 c3                	add    ebx,eax
c00139f8:	89 d8                	mov    eax,ebx
c00139fa:	f7 f1                	div    ecx
c00139fc:	31 d2                	xor    edx,edx
c00139fe:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a01:	89 d8                	mov    eax,ebx
c0013a03:	f7 f7                	div    edi
c0013a05:	31 d2                	xor    edx,edx
c0013a07:	29 c1                	sub    ecx,eax
c0013a09:	89 d8                	mov    eax,ebx
c0013a0b:	f7 f5                	div    ebp
c0013a0d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013a12:	29 c1                	sub    ecx,eax
c0013a14:	31 d2                	xor    edx,edx
c0013a16:	89 c8                	mov    eax,ecx
c0013a18:	f7 f5                	div    ebp
c0013a1a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013a1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a23:	31 d2                	xor    edx,edx
c0013a25:	89 c8                	mov    eax,ecx
c0013a27:	f7 f5                	div    ebp
c0013a29:	31 d2                	xor    edx,edx
c0013a2b:	01 c3                	add    ebx,eax
c0013a2d:	89 c8                	mov    eax,ecx
c0013a2f:	f7 f7                	div    edi
c0013a31:	bf 99 00 00 00       	mov    edi,0x99
c0013a36:	29 c3                	sub    ebx,eax
c0013a38:	31 d2                	xor    edx,edx
c0013a3a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013a42:	29 c3                	sub    ebx,eax
c0013a44:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a47:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013a4a:	bb 05 00 00 00       	mov    ebx,0x5
c0013a4f:	83 c1 02             	add    ecx,0x2
c0013a52:	89 c8                	mov    eax,ecx
c0013a54:	f7 f7                	div    edi
c0013a56:	31 d2                	xor    edx,edx
c0013a58:	89 c7                	mov    edi,eax
c0013a5a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013a60:	83 c0 02             	add    eax,0x2
c0013a63:	f7 f3                	div    ebx
c0013a65:	89 eb                	mov    ebx,ebp
c0013a67:	29 c3                	sub    ebx,eax
c0013a69:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a6f:	88 1e                	mov    BYTE PTR [esi],bl
c0013a71:	19 c0                	sbb    eax,eax
c0013a73:	31 d2                	xor    edx,edx
c0013a75:	83 e0 0c             	and    eax,0xc
c0013a78:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a7c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a84:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a88:	83 f9 01             	cmp    ecx,0x1
c0013a8b:	0f 96 c2             	setbe  dl
c0013a8e:	41                   	inc    ecx
c0013a8f:	01 d0                	add    eax,edx
c0013a91:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a94:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a98:	83 c4 1c             	add    esp,0x1c
c0013a9b:	89 f0                	mov    eax,esi
c0013a9d:	5b                   	pop    ebx
c0013a9e:	5e                   	pop    esi
c0013a9f:	5f                   	pop    edi
c0013aa0:	5d                   	pop    ebp
c0013aa1:	c2 04 00             	ret    0x4

c0013aa4 <Clock::timeInDatetimeLocal()>:
c0013aa4:	53                   	push   ebx
c0013aa5:	83 ec 14             	sub    esp,0x14
c0013aa8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ab0:	e8 83 fc ff ff       	call   c0013738 <Clock::timeInSecondsLocal()>
c0013ab5:	83 c4 0c             	add    esp,0xc
c0013ab8:	52                   	push   edx
c0013ab9:	50                   	push   eax
c0013aba:	53                   	push   ebx
c0013abb:	e8 a0 fe ff ff       	call   c0013960 <secondsToDatetime(unsigned long long)>
c0013ac0:	89 d8                	mov    eax,ebx
c0013ac2:	83 c4 14             	add    esp,0x14
c0013ac5:	5b                   	pop    ebx
c0013ac6:	c2 04 00             	ret    0x4
c0013ac9:	90                   	nop

c0013aca <Device::hibernate()>:
c0013aca:	c3                   	ret    
c0013acb:	90                   	nop

c0013acc <Device::wake()>:
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Device::detect()>:
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Device::disableLegacy()>:
c0013ad0:	c3                   	ret    
c0013ad1:	90                   	nop

c0013ad2 <Device::powerSaving(PowerSavingLevel)>:
c0013ad2:	c3                   	ret    
c0013ad3:	90                   	nop

c0013ad4 <DriverlessDevice::close(int, int, void*)>:
c0013ad4:	31 c0                	xor    eax,eax
c0013ad6:	c3                   	ret    
c0013ad7:	90                   	nop

c0013ad8 <DriverlessDevice::detect()>:
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <DriverlessDevice::open(int, int, void*)>:
c0013ada:	83 ec 18             	sub    esp,0x18
c0013add:	68 30 95 02 c0       	push   0xc0029530
c0013ae2:	e8 60 5e 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0013ae7:	83 c8 ff             	or     eax,0xffffffff
c0013aea:	83 c4 1c             	add    esp,0x1c
c0013aed:	c3                   	ret    

c0013aee <Device::~Device()>:
c0013aee:	ba 58 95 02 c0       	mov    edx,0xc0029558
c0013af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af7:	89 10                	mov    DWORD PTR [eax],edx
c0013af9:	90                   	nop
c0013afa:	c3                   	ret    
c0013afb:	90                   	nop

c0013afc <Device::~Device()>:
c0013afc:	83 ec 0c             	sub    esp,0xc
c0013aff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b03:	e8 e6 ff ff ff       	call   c0013aee <Device::~Device()>
c0013b08:	83 c4 04             	add    esp,0x4
c0013b0b:	83 ec 08             	sub    esp,0x8
c0013b0e:	68 58 01 00 00       	push   0x158
c0013b13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b17:	e8 31 ec ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0013b1c:	83 c4 10             	add    esp,0x10
c0013b1f:	83 c4 0c             	add    esp,0xc
c0013b22:	c3                   	ret    
c0013b23:	90                   	nop

c0013b24 <Device::findAndLoadDriver()>:
c0013b24:	c3                   	ret    
c0013b25:	90                   	nop

c0013b26 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013b26:	57                   	push   edi
c0013b27:	b9 09 00 00 00       	mov    ecx,0x9
c0013b2c:	56                   	push   esi
c0013b2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013b31:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013b35:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013b3f:	81 c7 18 01 00 00    	add    edi,0x118
c0013b45:	fc                   	cld    
c0013b46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b48:	5e                   	pop    esi
c0013b49:	5f                   	pop    edi
c0013b4a:	c3                   	ret    
c0013b4b:	90                   	nop

c0013b4c <Device::preOpenACPI(void*, char*, char*)>:
c0013b4c:	56                   	push   esi
c0013b4d:	53                   	push   ebx
c0013b4e:	83 ec 08             	sub    esp,0x8
c0013b51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013b55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013b59:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b67:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013b6d:	6a 1e                	push   0x1e
c0013b6f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013b75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b79:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013b7f:	50                   	push   eax
c0013b80:	e8 d0 ca fe ff       	call   c0000655 <memcpy>
c0013b85:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013b89:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013b8d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013b95:	83 c4 14             	add    esp,0x14
c0013b98:	5b                   	pop    ebx
c0013b99:	5e                   	pop    esi
c0013b9a:	e9 b6 ca fe ff       	jmp    c0000655 <memcpy>
c0013b9f:	90                   	nop

c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ba4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ba9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013bb0:	75 0b                	jne    c0013bbd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013bbb:	eb 1e                	jmp    c0013bdb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013bbd:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0013bc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013bc8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013bce:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bd0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bd8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013bdb:	ff e0                	jmp    eax
c0013bdd:	90                   	nop

c0013bde <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013be7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013bee:	75 0b                	jne    c0013bfb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bf2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bf6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013bf9:	eb 1e                	jmp    c0013c19 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013bfb:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0013c00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c06:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c16:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013c19:	ff e0                	jmp    eax
c0013c1b:	90                   	nop

c0013c1c <Device::addChild(Device*)>:
c0013c1c:	53                   	push   ebx
c0013c1d:	83 ec 08             	sub    esp,0x8
c0013c20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c28:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013c2e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013c34:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013c36:	85 d2                	test   edx,edx
c0013c38:	74 04                	je     c0013c3e <Device::addChild(Device*)+0x22>
c0013c3a:	89 d3                	mov    ebx,edx
c0013c3c:	eb f6                	jmp    c0013c34 <Device::addChild(Device*)+0x18>
c0013c3e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013c41:	83 ec 0c             	sub    esp,0xc
c0013c44:	6a 08                	push   0x8
c0013c46:	e8 89 b8 ff ff       	call   c000f4d4 <malloc>
c0013c4b:	89 03                	mov    DWORD PTR [ebx],eax
c0013c4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c5a:	83 c4 18             	add    esp,0x18
c0013c5d:	5b                   	pop    ebx
c0013c5e:	c3                   	ret    
c0013c5f:	90                   	nop

c0013c60 <Device::removeAllChildren()>:
c0013c60:	56                   	push   esi
c0013c61:	53                   	push   ebx
c0013c62:	52                   	push   edx
c0013c63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c67:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c70:	74 17                	je     c0013c89 <Device::removeAllChildren()+0x29>
c0013c72:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c75:	85 c0                	test   eax,eax
c0013c77:	74 0c                	je     c0013c85 <Device::removeAllChildren()+0x25>
c0013c79:	83 ec 0c             	sub    esp,0xc
c0013c7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c7e:	50                   	push   eax
c0013c7f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c87:	eb e4                	jmp    c0013c6d <Device::removeAllChildren()+0xd>
c0013c89:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c95:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ca2:	58                   	pop    eax
c0013ca3:	5b                   	pop    ebx
c0013ca4:	5e                   	pop    esi
c0013ca5:	c3                   	ret    

c0013ca6 <Device::hibernateAll()>:
c0013ca6:	53                   	push   ebx
c0013ca7:	83 ec 14             	sub    esp,0x14
c0013caa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cb0:	53                   	push   ebx
c0013cb1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013cb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cba:	83 c4 10             	add    esp,0x10
c0013cbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cc0:	74 0f                	je     c0013cd1 <Device::hibernateAll()+0x2b>
c0013cc2:	83 ec 0c             	sub    esp,0xc
c0013cc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cc8:	e8 d9 ff ff ff       	call   c0013ca6 <Device::hibernateAll()>
c0013ccd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ccf:	eb e9                	jmp    c0013cba <Device::hibernateAll()+0x14>
c0013cd1:	83 c4 08             	add    esp,0x8
c0013cd4:	5b                   	pop    ebx
c0013cd5:	c3                   	ret    

c0013cd6 <Device::wakeAll()>:
c0013cd6:	53                   	push   ebx
c0013cd7:	83 ec 14             	sub    esp,0x14
c0013cda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ce0:	53                   	push   ebx
c0013ce1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ce4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cf0:	74 0f                	je     c0013d01 <Device::wakeAll()+0x2b>
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cf8:	e8 d9 ff ff ff       	call   c0013cd6 <Device::wakeAll()>
c0013cfd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cff:	eb e9                	jmp    c0013cea <Device::wakeAll()+0x14>
c0013d01:	83 c4 08             	add    esp,0x8
c0013d04:	5b                   	pop    ebx
c0013d05:	c3                   	ret    

c0013d06 <Device::detectAll()>:
c0013d06:	53                   	push   ebx
c0013d07:	83 ec 14             	sub    esp,0x14
c0013d0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d10:	53                   	push   ebx
c0013d11:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013d14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d20:	74 0f                	je     c0013d31 <Device::detectAll()+0x2b>
c0013d22:	83 ec 0c             	sub    esp,0xc
c0013d25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d28:	e8 d9 ff ff ff       	call   c0013d06 <Device::detectAll()>
c0013d2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d2f:	eb e9                	jmp    c0013d1a <Device::detectAll()+0x14>
c0013d31:	83 c4 08             	add    esp,0x8
c0013d34:	5b                   	pop    ebx
c0013d35:	c3                   	ret    

c0013d36 <Device::disableLegacyAll()>:
c0013d36:	53                   	push   ebx
c0013d37:	83 ec 14             	sub    esp,0x14
c0013d3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d40:	53                   	push   ebx
c0013d41:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013d44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d4a:	83 c4 10             	add    esp,0x10
c0013d4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d50:	74 0f                	je     c0013d61 <Device::disableLegacyAll()+0x2b>
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d58:	e8 d9 ff ff ff       	call   c0013d36 <Device::disableLegacyAll()>
c0013d5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d5f:	eb e9                	jmp    c0013d4a <Device::disableLegacyAll()+0x14>
c0013d61:	83 c4 08             	add    esp,0x8
c0013d64:	5b                   	pop    ebx
c0013d65:	c3                   	ret    

c0013d66 <Device::loadDriversForAll()>:
c0013d66:	53                   	push   ebx
c0013d67:	83 ec 08             	sub    esp,0x8
c0013d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d74:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013d76:	85 db                	test   ebx,ebx
c0013d78:	74 12                	je     c0013d8c <Device::loadDriversForAll()+0x26>
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013d80:	e8 e1 ff ff ff       	call   c0013d66 <Device::loadDriversForAll()>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	89 d8                	mov    eax,ebx
c0013d8a:	eb e8                	jmp    c0013d74 <Device::loadDriversForAll()+0xe>
c0013d8c:	83 c4 08             	add    esp,0x8
c0013d8f:	5b                   	pop    ebx
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Device::closeAll()>:
c0013d92:	53                   	push   ebx
c0013d93:	83 ec 08             	sub    esp,0x8
c0013d96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9c:	6a 00                	push   0x0
c0013d9e:	6a 00                	push   0x0
c0013da0:	6a 00                	push   0x0
c0013da2:	53                   	push   ebx
c0013da3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013da6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db2:	74 0f                	je     c0013dc3 <Device::closeAll()+0x31>
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dba:	e8 d3 ff ff ff       	call   c0013d92 <Device::closeAll()>
c0013dbf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc1:	eb e9                	jmp    c0013dac <Device::closeAll()+0x1a>
c0013dc3:	83 c4 08             	add    esp,0x8
c0013dc6:	5b                   	pop    ebx
c0013dc7:	c3                   	ret    

c0013dc8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013dc8:	56                   	push   esi
c0013dc9:	53                   	push   ebx
c0013dca:	83 ec 0c             	sub    esp,0xc
c0013dcd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dd1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013dd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd7:	56                   	push   esi
c0013dd8:	53                   	push   ebx
c0013dd9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ddc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de8:	74 0f                	je     c0013df9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013dea:	52                   	push   edx
c0013deb:	52                   	push   edx
c0013dec:	56                   	push   esi
c0013ded:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df0:	e8 d3 ff ff ff       	call   c0013dc8 <Device::powerSavingAll(PowerSavingLevel)>
c0013df5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df7:	eb e9                	jmp    c0013de2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013df9:	58                   	pop    eax
c0013dfa:	5b                   	pop    ebx
c0013dfb:	5e                   	pop    esi
c0013dfc:	c3                   	ret    
c0013dfd:	90                   	nop

c0013dfe <Device::setName(char const*)>:
c0013dfe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013e06:	e9 1f c9 fe ff       	jmp    c000072a <strcpy>
c0013e0b:	90                   	nop

c0013e0c <Device::Device(char const*)>:
c0013e0c:	83 ec 1c             	sub    esp,0x1c
c0013e0f:	ba 58 95 02 c0       	mov    edx,0xc0029558
c0013e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e18:	89 10                	mov    DWORD PTR [eax],edx
c0013e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e48:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e52:	83 ec 08             	sub    esp,0x8
c0013e55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e5d:	e8 9c ff ff ff       	call   c0013dfe <Device::setName(char const*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e6d:	83 ec 0c             	sub    esp,0xc
c0013e70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e74:	e8 5b b6 ff ff       	call   c000f4d4 <malloc>
c0013e79:	83 c4 10             	add    esp,0x10
c0013e7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e8d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ead:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ece:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013edc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f02:	90                   	nop
c0013f03:	83 c4 1c             	add    esp,0x1c
c0013f06:	c3                   	ret    
c0013f07:	90                   	nop

c0013f08 <Device::getName()>:
c0013f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f0c:	05 d0 00 00 00       	add    eax,0xd0
c0013f11:	c3                   	ret    

c0013f12 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f19:	83 ec 08             	sub    esp,0x8
c0013f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f20:	50                   	push   eax
c0013f21:	e8 e6 fe ff ff       	call   c0013e0c <Device::Device(char const*)>
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	ba 84 95 02 c0       	mov    edx,0xc0029584
c0013f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f32:	89 10                	mov    DWORD PTR [eax],edx
c0013f34:	90                   	nop
c0013f35:	83 c4 0c             	add    esp,0xc
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013f3a:	57                   	push   edi
c0013f3b:	56                   	push   esi
c0013f3c:	53                   	push   ebx
c0013f3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f49:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013f4f:	75 0c                	jne    c0013f5d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013f51:	52                   	push   edx
c0013f52:	52                   	push   edx
c0013f53:	53                   	push   ebx
c0013f54:	56                   	push   esi
c0013f55:	e8 40 34 01 00       	call   c002739a <LinkedList<Device>::addElement(Device*)>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f66:	74 12                	je     c0013f7a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f68:	50                   	push   eax
c0013f69:	57                   	push   edi
c0013f6a:	56                   	push   esi
c0013f6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f6e:	e8 c7 ff ff ff       	call   c0013f3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	eb e9                	jmp    c0013f63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f7a:	5b                   	pop    ebx
c0013f7b:	5e                   	pop    esi
c0013f7c:	5f                   	pop    edi
c0013f7d:	c3                   	ret    

c0013f7e <getDevicesOfType(DeviceType)>:
c0013f7e:	53                   	push   ebx
c0013f7f:	83 ec 14             	sub    esp,0x14
c0013f82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f86:	53                   	push   ebx
c0013f87:	e8 ea 34 01 00       	call   c0027476 <LinkedList<Device>::LinkedList()>
c0013f8c:	83 c4 0c             	add    esp,0xc
c0013f8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f93:	53                   	push   ebx
c0013f94:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c0013f9a:	e8 9b ff ff ff       	call   c0013f3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f9f:	89 d8                	mov    eax,ebx
c0013fa1:	83 c4 18             	add    esp,0x18
c0013fa4:	5b                   	pop    ebx
c0013fa5:	c2 04 00             	ret    0x4

c0013fa8 <HardDiskController::HardDiskController(char const*)>:
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faf:	83 ec 08             	sub    esp,0x8
c0013fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fb6:	50                   	push   eax
c0013fb7:	e8 50 fe ff ff       	call   c0013e0c <Device::Device(char const*)>
c0013fbc:	83 c4 10             	add    esp,0x10
c0013fbf:	ba b0 95 02 c0       	mov    edx,0xc00295b0
c0013fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc8:	89 10                	mov    DWORD PTR [eax],edx
c0013fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013fd8:	90                   	nop
c0013fd9:	83 c4 0c             	add    esp,0xc
c0013fdc:	c3                   	ret    
c0013fdd:	90                   	nop

c0013fde <HardDiskController::~HardDiskController()>:
c0013fde:	83 ec 0c             	sub    esp,0xc
c0013fe1:	ba b0 95 02 c0       	mov    edx,0xc00295b0
c0013fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fea:	89 10                	mov    DWORD PTR [eax],edx
c0013fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff0:	83 ec 0c             	sub    esp,0xc
c0013ff3:	50                   	push   eax
c0013ff4:	e8 f5 fa ff ff       	call   c0013aee <Device::~Device()>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	90                   	nop
c0013ffd:	83 c4 0c             	add    esp,0xc
c0014000:	c3                   	ret    
c0014001:	90                   	nop

c0014002 <HardDiskController::~HardDiskController()>:
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400c:	e8 cd ff ff ff       	call   c0013fde <HardDiskController::~HardDiskController()>
c0014011:	83 c4 10             	add    esp,0x10
c0014014:	83 ec 08             	sub    esp,0x8
c0014017:	68 58 01 00 00       	push   0x158
c001401c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014020:	e8 28 e7 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0014025:	83 c4 10             	add    esp,0x10
c0014028:	83 c4 0c             	add    esp,0xc
c001402b:	c3                   	ret    

c001402c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014033:	83 ec 08             	sub    esp,0x8
c0014036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001403a:	50                   	push   eax
c001403b:	e8 cc fd ff ff       	call   c0013e0c <Device::Device(char const*)>
c0014040:	83 c4 10             	add    esp,0x10
c0014043:	ba dc 95 02 c0       	mov    edx,0xc00295dc
c0014048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404c:	89 10                	mov    DWORD PTR [eax],edx
c001404e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014052:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014068:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014076:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001407a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014084:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001408e:	90                   	nop
c001408f:	83 c4 0c             	add    esp,0xc
c0014092:	c3                   	ret    
c0014093:	90                   	nop

c0014094 <PhysicalDisk::startCache()>:
c0014094:	56                   	push   esi
c0014095:	53                   	push   ebx
c0014096:	83 ec 10             	sub    esp,0x10
c0014099:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001409d:	6a 30                	push   0x30
c001409f:	e8 30 b4 ff ff       	call   c000f4d4 <malloc>
c00140a4:	89 c6                	mov    esi,eax
c00140a6:	58                   	pop    eax
c00140a7:	5a                   	pop    edx
c00140a8:	53                   	push   ebx
c00140a9:	56                   	push   esi
c00140aa:	e8 dd 25 00 00       	call   c001668c <VCache::VCache(PhysicalDisk*)>
c00140af:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00140b5:	83 c4 14             	add    esp,0x14
c00140b8:	5b                   	pop    ebx
c00140b9:	5e                   	pop    esi
c00140ba:	c3                   	ret    
c00140bb:	90                   	nop

c00140bc <PhysicalDisk::~PhysicalDisk()>:
c00140bc:	83 ec 0c             	sub    esp,0xc
c00140bf:	ba dc 95 02 c0       	mov    edx,0xc00295dc
c00140c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c8:	89 10                	mov    DWORD PTR [eax],edx
c00140ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	50                   	push   eax
c00140d2:	e8 17 fa ff ff       	call   c0013aee <Device::~Device()>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	90                   	nop
c00140db:	83 c4 0c             	add    esp,0xc
c00140de:	c3                   	ret    
c00140df:	90                   	nop

c00140e0 <PhysicalDisk::~PhysicalDisk()>:
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ea:	e8 cd ff ff ff       	call   c00140bc <PhysicalDisk::~PhysicalDisk()>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	83 ec 08             	sub    esp,0x8
c00140f5:	68 6c 01 00 00       	push   0x16c
c00140fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140fe:	e8 4a e6 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	83 c4 0c             	add    esp,0xc
c0014109:	c3                   	ret    

c001410a <FPU::FPU(char const*)>:
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014111:	83 ec 08             	sub    esp,0x8
c0014114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014118:	50                   	push   eax
c0014119:	e8 ee fc ff ff       	call   c0013e0c <Device::Device(char const*)>
c001411e:	83 c4 10             	add    esp,0x10
c0014121:	ba 1c 96 02 c0       	mov    edx,0xc002961c
c0014126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412a:	89 10                	mov    DWORD PTR [eax],edx
c001412c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014130:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001413a:	90                   	nop
c001413b:	83 c4 0c             	add    esp,0xc
c001413e:	c3                   	ret    
c001413f:	90                   	nop

c0014140 <FPU::~FPU()>:
c0014140:	83 ec 0c             	sub    esp,0xc
c0014143:	ba 1c 96 02 c0       	mov    edx,0xc002961c
c0014148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414c:	89 10                	mov    DWORD PTR [eax],edx
c001414e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014152:	83 ec 0c             	sub    esp,0xc
c0014155:	50                   	push   eax
c0014156:	e8 93 f9 ff ff       	call   c0013aee <Device::~Device()>
c001415b:	83 c4 10             	add    esp,0x10
c001415e:	90                   	nop
c001415f:	83 c4 0c             	add    esp,0xc
c0014162:	c3                   	ret    
c0014163:	90                   	nop

c0014164 <FPU::~FPU()>:
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	83 ec 0c             	sub    esp,0xc
c001416a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001416e:	e8 cd ff ff ff       	call   c0014140 <FPU::~FPU()>
c0014173:	83 c4 10             	add    esp,0x10
c0014176:	83 ec 08             	sub    esp,0x8
c0014179:	68 58 01 00 00       	push   0x158
c001417e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014182:	e8 c6 e5 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	83 c4 0c             	add    esp,0xc
c001418d:	c3                   	ret    

c001418e <setupFPU()>:
c001418e:	53                   	push   ebx
c001418f:	83 ec 08             	sub    esp,0x8
c0014192:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c0014198:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001419f:	74 19                	je     c00141ba <setupFPU()+0x2c>
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	68 58 01 00 00       	push   0x158
c00141a9:	e8 26 b3 ff ff       	call   c000f4d4 <malloc>
c00141ae:	89 c3                	mov    ebx,eax
c00141b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141b3:	e8 30 fe 00 00       	call   c0023fe8 <AVX::AVX()>
c00141b8:	eb 5b                	jmp    c0014215 <setupFPU()+0x87>
c00141ba:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00141c0:	84 c0                	test   al,al
c00141c2:	79 19                	jns    c00141dd <setupFPU()+0x4f>
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	68 58 01 00 00       	push   0x158
c00141cc:	e8 03 b3 ff ff       	call   c000f4d4 <malloc>
c00141d1:	89 c3                	mov    ebx,eax
c00141d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00141d6:	e8 33 ff 00 00       	call   c002410e <SSE::SSE()>
c00141db:	eb 38                	jmp    c0014215 <setupFPU()+0x87>
c00141dd:	a8 20                	test   al,0x20
c00141df:	74 19                	je     c00141fa <setupFPU()+0x6c>
c00141e1:	83 ec 0c             	sub    esp,0xc
c00141e4:	68 58 01 00 00       	push   0x158
c00141e9:	e8 e6 b2 ff ff       	call   c000f4d4 <malloc>
c00141ee:	89 c3                	mov    ebx,eax
c00141f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00141f3:	e8 80 fe 00 00       	call   c0024078 <MMX::MMX()>
c00141f8:	eb 1b                	jmp    c0014215 <setupFPU()+0x87>
c00141fa:	a8 10                	test   al,0x10
c00141fc:	74 1c                	je     c001421a <setupFPU()+0x8c>
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	68 58 01 00 00       	push   0x158
c0014206:	e8 c9 b2 ff ff       	call   c000f4d4 <malloc>
c001420b:	89 c3                	mov    ebx,eax
c001420d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014210:	e8 87 ff 00 00       	call   c002419c <x87::x87()>
c0014215:	83 c4 10             	add    esp,0x10
c0014218:	eb 24                	jmp    c001423e <setupFPU()+0xb0>
c001421a:	83 e0 ef             	and    eax,0xffffffef
c001421d:	83 ec 0c             	sub    esp,0xc
c0014220:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014226:	68 08 96 02 c0       	push   0xc0029608
c001422b:	e8 fd e5 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014230:	0f 20 c0             	mov    eax,cr0
c0014233:	83 c8 04             	or     eax,0x4
c0014236:	0f 22 c0             	mov    cr0,eax
c0014239:	31 db                	xor    ebx,ebx
c001423b:	83 c4 10             	add    esp,0x10
c001423e:	89 d8                	mov    eax,ebx
c0014240:	83 c4 08             	add    esp,0x8
c0014243:	5b                   	pop    ebx
c0014244:	c3                   	ret    
c0014245:	90                   	nop

c0014246 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001424a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001424e:	c1 e0 04             	shl    eax,0x4
c0014251:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014255:	8d 50 10             	lea    edx,[eax+0x10]
c0014258:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001425e:	74 08                	je     c0014268 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014260:	83 c0 04             	add    eax,0x4
c0014263:	39 d0                	cmp    eax,edx
c0014265:	75 f1                	jne    c0014258 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014267:	c3                   	ret    
c0014268:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014272:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001427c:	eb e2                	jmp    c0014260 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001427e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001427e:	57                   	push   edi
c001427f:	31 c0                	xor    eax,eax
c0014281:	56                   	push   esi
c0014282:	53                   	push   ebx
c0014283:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001428b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001428f:	89 da                	mov    edx,ebx
c0014291:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014295:	c1 e2 04             	shl    edx,0x4
c0014298:	01 ca                	add    edx,ecx
c001429a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00142a2:	74 16                	je     c00142ba <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00142a4:	40                   	inc    eax
c00142a5:	83 f8 04             	cmp    eax,0x4
c00142a8:	75 f0                	jne    c001429a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00142aa:	c7 44 24 10 4c 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc002964c
c00142b2:	5b                   	pop    ebx
c00142b3:	5e                   	pop    esi
c00142b4:	5f                   	pop    edi
c00142b5:	e9 8d 56 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c00142ba:	8d 04 98             	lea    eax,[eax+ebx*4]
c00142bd:	8d 04 81             	lea    eax,[ecx+eax*4]
c00142c0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00142c6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00142cc:	5b                   	pop    ebx
c00142cd:	5e                   	pop    esi
c00142ce:	5f                   	pop    edi
c00142cf:	c3                   	ret    

c00142d0 <doubleFault(regs*, void*)>:
c00142d0:	55                   	push   ebp
c00142d1:	89 e5                	mov    ebp,esp
c00142d3:	83 ec 08             	sub    esp,0x8
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	68 87 96 02 c0       	push   0xc0029687
c00142de:	e8 64 56 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	90                   	nop
c00142e7:	c9                   	leave  
c00142e8:	c3                   	ret    
c00142e9:	90                   	nop

c00142ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142ea:	56                   	push   esi
c00142eb:	53                   	push   ebx
c00142ec:	50                   	push   eax
c00142ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142f5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142fa:	75 35                	jne    c0014331 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00142fc:	8d 43 20             	lea    eax,[ebx+0x20]
c00142ff:	31 d2                	xor    edx,edx
c0014301:	89 c1                	mov    ecx,eax
c0014303:	c1 e1 04             	shl    ecx,0x4
c0014306:	01 f1                	add    ecx,esi
c0014308:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014310:	74 3e                	je     c0014350 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014312:	42                   	inc    edx
c0014313:	83 fa 04             	cmp    edx,0x4
c0014316:	75 f0                	jne    c0014308 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014318:	83 ec 0c             	sub    esp,0xc
c001431b:	68 cc 96 02 c0       	push   0xc00296cc
c0014320:	e8 22 56 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001432d:	5a                   	pop    edx
c001432e:	5b                   	pop    ebx
c001432f:	5e                   	pop    esi
c0014330:	c3                   	ret    
c0014331:	83 ec 0c             	sub    esp,0xc
c0014334:	56                   	push   esi
c0014335:	e8 ce fb ff ff       	call   c0013f08 <Device::getName()>
c001433a:	83 c4 10             	add    esp,0x10
c001433d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014340:	75 ba                	jne    c00142fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014342:	83 fb 0f             	cmp    ebx,0xf
c0014345:	7f 29                	jg     c0014370 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014347:	0f b6 9b 60 bc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd43a0]
c001434e:	eb ac                	jmp    c00142fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014350:	8d 04 82             	lea    eax,[edx+eax*4]
c0014353:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014357:	8d 04 86             	lea    eax,[esi+eax*4]
c001435a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014364:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001436a:	89 d8                	mov    eax,ebx
c001436c:	5a                   	pop    edx
c001436d:	5b                   	pop    ebx
c001436e:	5e                   	pop    esi
c001436f:	c3                   	ret    
c0014370:	83 ec 0c             	sub    esp,0xc
c0014373:	68 94 96 02 c0       	push   0xc0029694
c0014378:	e8 ca 55 00 00       	call   c0019947 <Krnl::panic(char const*)>
c001437d:	83 c4 10             	add    esp,0x10
c0014380:	e9 77 ff ff ff       	jmp    c00142fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014385:	90                   	nop

c0014386 <InterruptController::clearAllHandlers(int, bool)>:
c0014386:	56                   	push   esi
c0014387:	53                   	push   ebx
c0014388:	52                   	push   edx
c0014389:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001438d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014391:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014396:	75 61                	jne    c00143f9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014398:	8d 46 20             	lea    eax,[esi+0x20]
c001439b:	c1 e6 04             	shl    esi,0x4
c001439e:	c1 e0 04             	shl    eax,0x4
c00143a1:	01 de                	add    esi,ebx
c00143a3:	01 d8                	add    eax,ebx
c00143a5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00143af:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00143b9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00143c3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00143cd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00143d7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00143e1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00143eb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00143f5:	58                   	pop    eax
c00143f6:	5b                   	pop    ebx
c00143f7:	5e                   	pop    esi
c00143f8:	c3                   	ret    
c00143f9:	83 ec 0c             	sub    esp,0xc
c00143fc:	53                   	push   ebx
c00143fd:	e8 06 fb ff ff       	call   c0013f08 <Device::getName()>
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014408:	75 8e                	jne    c0014398 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001440a:	83 fe 0f             	cmp    esi,0xf
c001440d:	7f 09                	jg     c0014418 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001440f:	0f b6 b6 60 bc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd43a0]
c0014416:	eb 80                	jmp    c0014398 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	68 08 97 02 c0       	push   0xc0029708
c0014420:	e8 22 55 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0014425:	83 c4 10             	add    esp,0x10
c0014428:	e9 6b ff ff ff       	jmp    c0014398 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001442d:	90                   	nop

c001442e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001442e:	56                   	push   esi
c001442f:	53                   	push   ebx
c0014430:	52                   	push   edx
c0014431:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014435:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014439:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001443e:	75 3a                	jne    c001447a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014440:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014444:	8d 50 20             	lea    edx,[eax+0x20]
c0014447:	c1 e2 04             	shl    edx,0x4
c001444a:	8d 04 16             	lea    eax,[esi+edx*1]
c001444d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014451:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014457:	74 0b                	je     c0014464 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014459:	83 c0 04             	add    eax,0x4
c001445c:	39 d0                	cmp    eax,edx
c001445e:	75 f1                	jne    c0014451 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014460:	58                   	pop    eax
c0014461:	5b                   	pop    ebx
c0014462:	5e                   	pop    esi
c0014463:	c3                   	ret    
c0014464:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001446e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014478:	eb df                	jmp    c0014459 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	56                   	push   esi
c001447e:	e8 85 fa ff ff       	call   c0013f08 <Device::getName()>
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014489:	75 b5                	jne    c0014440 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001448b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014490:	7f 11                	jg     c00144a3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014496:	0f b6 80 60 bc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd43a0]
c001449d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144a1:	eb 9d                	jmp    c0014440 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	68 08 97 02 c0       	push   0xc0029708
c00144ab:	e8 97 54 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	eb 8b                	jmp    c0014440 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00144b5 <nmiHandler(regs*, void*)>:
c00144b5:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00144ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144be:	e9 5d a7 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c00144c3 <int_handler>:
c00144c3:	55                   	push   ebp
c00144c4:	57                   	push   edi
c00144c5:	56                   	push   esi
c00144c6:	53                   	push   ebx
c00144c7:	83 ec 0c             	sub    esp,0xc
c00144ca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144ce:	80 3d 40 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d540,0x0
c00144d5:	74 0b                	je     c00144e2 <int_handler+0x1f>
c00144d7:	fa                   	cli    
c00144d8:	f4                   	hlt    
c00144d9:	80 3d 40 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d540,0x0
c00144e0:	75 f5                	jne    c00144d7 <int_handler+0x14>
c00144e2:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00144e7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00144ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00144f0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00144f6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144f9:	83 f8 17             	cmp    eax,0x17
c00144fc:	77 13                	ja     c0014511 <int_handler+0x4e>
c00144fe:	83 ec 08             	sub    esp,0x8
c0014501:	8b 17                	mov    edx,DWORD PTR [edi]
c0014503:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014506:	0f b6 c0             	movzx  eax,al
c0014509:	50                   	push   eax
c001450a:	57                   	push   edi
c001450b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	83 c3 15             	add    ebx,0x15
c0014514:	c1 e3 04             	shl    ebx,0x4
c0014517:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001451b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014522:	31 db                	xor    ebx,ebx
c0014524:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014528:	85 c0                	test   eax,eax
c001452a:	74 13                	je     c001453f <int_handler+0x7c>
c001452c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001452f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014533:	74 1c                	je     c0014551 <int_handler+0x8e>
c0014535:	83 ec 08             	sub    esp,0x8
c0014538:	52                   	push   edx
c0014539:	56                   	push   esi
c001453a:	ff d0                	call   eax
c001453c:	83 c4 10             	add    esp,0x10
c001453f:	43                   	inc    ebx
c0014540:	83 fb 04             	cmp    ebx,0x4
c0014543:	75 df                	jne    c0014524 <int_handler+0x61>
c0014545:	83 c4 0c             	add    esp,0xc
c0014548:	31 c0                	xor    eax,eax
c001454a:	5b                   	pop    ebx
c001454b:	31 d2                	xor    edx,edx
c001454d:	5e                   	pop    esi
c001454e:	5f                   	pop    edi
c001454f:	5d                   	pop    ebp
c0014550:	c3                   	ret    
c0014551:	83 ec 08             	sub    esp,0x8
c0014554:	52                   	push   edx
c0014555:	56                   	push   esi
c0014556:	ff d0                	call   eax
c0014558:	83 c4 10             	add    esp,0x10
c001455b:	83 c4 0c             	add    esp,0xc
c001455e:	5b                   	pop    ebx
c001455f:	5e                   	pop    esi
c0014560:	5f                   	pop    edi
c0014561:	5d                   	pop    ebp
c0014562:	c3                   	ret    
c0014563:	90                   	nop

c0014564 <InterruptController::InterruptController(char const*)>:
c0014564:	83 ec 1c             	sub    esp,0x1c
c0014567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456b:	83 ec 08             	sub    esp,0x8
c001456e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014572:	50                   	push   eax
c0014573:	e8 94 f8 ff ff       	call   c0013e0c <Device::Device(char const*)>
c0014578:	83 c4 10             	add    esp,0x10
c001457b:	ba 3c 99 02 c0       	mov    edx,0xc002993c
c0014580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014584:	89 10                	mov    DWORD PTR [eax],edx
c0014586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014594:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001459c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00145a4:	7f 5e                	jg     c0014604 <InterruptController::InterruptController(char const*)+0xa0>
c00145a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145ae:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00145b3:	7f 49                	jg     c00145fe <InterruptController::InterruptController(char const*)+0x9a>
c00145b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145c8:	01 ca                	add    edx,ecx
c00145ca:	83 c2 54             	add    edx,0x54
c00145cd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145dd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145e8:	01 ca                	add    edx,ecx
c00145ea:	81 c2 54 04 00 00    	add    edx,0x454
c00145f0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145f8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145fc:	eb b0                	jmp    c00145ae <InterruptController::InterruptController(char const*)+0x4a>
c00145fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014602:	eb 98                	jmp    c001459c <InterruptController::InterruptController(char const*)+0x38>
c0014604:	90                   	nop
c0014605:	83 c4 1c             	add    esp,0x1c
c0014608:	c3                   	ret    
c0014609:	90                   	nop

c001460a <InterruptController::~InterruptController()>:
c001460a:	83 ec 0c             	sub    esp,0xc
c001460d:	ba 3c 99 02 c0       	mov    edx,0xc002993c
c0014612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014616:	89 10                	mov    DWORD PTR [eax],edx
c0014618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	50                   	push   eax
c0014620:	e8 c9 f4 ff ff       	call   c0013aee <Device::~Device()>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	90                   	nop
c0014629:	83 c4 0c             	add    esp,0xc
c001462c:	c3                   	ret    
c001462d:	90                   	nop

c001462e <InterruptController::~InterruptController()>:
c001462e:	83 ec 0c             	sub    esp,0xc
c0014631:	83 ec 0c             	sub    esp,0xc
c0014634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014638:	e8 cd ff ff ff       	call   c001460a <InterruptController::~InterruptController()>
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	83 ec 08             	sub    esp,0x8
c0014643:	68 58 21 00 00       	push   0x2158
c0014648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464c:	e8 fc e0 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	83 c4 0c             	add    esp,0xc
c0014657:	c3                   	ret    

c0014658 <displayDebugInfo(regs*)>:
c0014658:	55                   	push   ebp
c0014659:	57                   	push   edi
c001465a:	56                   	push   esi
c001465b:	53                   	push   ebx
c001465c:	83 ec 24             	sub    esp,0x24
c001465f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014663:	0f 20 c2             	mov    edx,cr0
c0014666:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001466a:	0f 20 d7             	mov    edi,cr2
c001466d:	0f 20 de             	mov    esi,cr3
c0014670:	0f 20 e5             	mov    ebp,cr4
c0014673:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014676:	68 42 97 02 c0       	push   0xc0029742
c001467b:	e8 ad e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014680:	58                   	pop    eax
c0014681:	5a                   	pop    edx
c0014682:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014685:	68 4d 97 02 c0       	push   0xc002974d
c001468a:	e8 9e e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001468f:	59                   	pop    ecx
c0014690:	58                   	pop    eax
c0014691:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014694:	68 58 97 02 c0       	push   0xc0029758
c0014699:	e8 8f e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001469e:	58                   	pop    eax
c001469f:	5a                   	pop    edx
c00146a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146a3:	68 63 97 02 c0       	push   0xc0029763
c00146a8:	e8 80 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146ad:	59                   	pop    ecx
c00146ae:	58                   	pop    eax
c00146af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00146b2:	68 6e 97 02 c0       	push   0xc002976e
c00146b7:	e8 71 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146bc:	58                   	pop    eax
c00146bd:	5a                   	pop    edx
c00146be:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00146c1:	68 79 97 02 c0       	push   0xc0029779
c00146c6:	e8 62 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146cb:	59                   	pop    ecx
c00146cc:	58                   	pop    eax
c00146cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146d0:	68 84 97 02 c0       	push   0xc0029784
c00146d5:	e8 53 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146da:	58                   	pop    eax
c00146db:	5a                   	pop    edx
c00146dc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00146df:	68 8f 97 02 c0       	push   0xc002978f
c00146e4:	e8 44 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146e9:	59                   	pop    ecx
c00146ea:	58                   	pop    eax
c00146eb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146ee:	68 9a 97 02 c0       	push   0xc002979a
c00146f3:	e8 35 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00146f8:	58                   	pop    eax
c00146f9:	5a                   	pop    edx
c00146fa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146fd:	68 a9 97 02 c0       	push   0xc00297a9
c0014702:	e8 26 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014707:	59                   	pop    ecx
c0014708:	58                   	pop    eax
c0014709:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001470c:	68 b4 97 02 c0       	push   0xc00297b4
c0014711:	e8 17 e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014716:	58                   	pop    eax
c0014717:	5a                   	pop    edx
c0014718:	57                   	push   edi
c0014719:	68 bf 97 02 c0       	push   0xc00297bf
c001471e:	e8 0a e1 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014723:	59                   	pop    ecx
c0014724:	58                   	pop    eax
c0014725:	56                   	push   esi
c0014726:	68 ca 97 02 c0       	push   0xc00297ca
c001472b:	e8 fd e0 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014730:	58                   	pop    eax
c0014731:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473c:	e8 ae c2 ff ff       	call   c00109ef <setActiveTerminal(VgaText*)>
c0014741:	58                   	pop    eax
c0014742:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014745:	5a                   	pop    edx
c0014746:	c1 e0 05             	shl    eax,0x5
c0014749:	05 c0 b9 02 c0       	add    eax,0xc002b9c0
c001474e:	50                   	push   eax
c001474f:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014754:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475a:	e8 af c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001475f:	59                   	pop    ecx
c0014760:	58                   	pop    eax
c0014761:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014766:	68 d5 97 02 c0       	push   0xc00297d5
c001476b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014771:	e8 98 c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014776:	58                   	pop    eax
c0014777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001477c:	5a                   	pop    edx
c001477d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014780:	83 c0 0c             	add    eax,0xc
c0014783:	50                   	push   eax
c0014784:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014789:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478f:	e8 7a c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014794:	59                   	pop    ecx
c0014795:	58                   	pop    eax
c0014796:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001479b:	68 de 97 02 c0       	push   0xc00297de
c00147a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a6:	e8 63 c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00147ab:	58                   	pop    eax
c00147ac:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00147b1:	5a                   	pop    edx
c00147b2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bb:	e8 74 c6 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00147c0:	59                   	pop    ecx
c00147c1:	58                   	pop    eax
c00147c2:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00147c7:	68 e6 97 02 c0       	push   0xc00297e6
c00147cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d2:	e8 37 c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00147d7:	58                   	pop    eax
c00147d8:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00147dd:	5a                   	pop    edx
c00147de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 48 c6 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00147ec:	59                   	pop    ecx
c00147ed:	58                   	pop    eax
c00147ee:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00147f3:	68 ee 97 02 c0       	push   0xc00297ee
c00147f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fe:	e8 0b c6 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014803:	58                   	pop    eax
c0014804:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014809:	5a                   	pop    edx
c001480a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001480d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014813:	e8 1c c6 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014818:	59                   	pop    ecx
c0014819:	58                   	pop    eax
c001481a:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001481f:	68 f6 97 02 c0       	push   0xc00297f6
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 df c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001482f:	58                   	pop    eax
c0014830:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014835:	5a                   	pop    edx
c0014836:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014839:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483f:	e8 f0 c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014844:	59                   	pop    ecx
c0014845:	58                   	pop    eax
c0014846:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001484b:	68 fe 97 02 c0       	push   0xc00297fe
c0014850:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014856:	e8 b3 c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001485b:	58                   	pop    eax
c001485c:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014861:	5a                   	pop    edx
c0014862:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014865:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486b:	e8 c4 c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014870:	59                   	pop    ecx
c0014871:	58                   	pop    eax
c0014872:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014877:	68 06 98 02 c0       	push   0xc0029806
c001487c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014882:	e8 87 c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014887:	58                   	pop    eax
c0014888:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001488d:	5a                   	pop    edx
c001488e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014897:	e8 98 c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c001489c:	59                   	pop    ecx
c001489d:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00148a2:	5b                   	pop    ebx
c00148a3:	68 0e 98 02 c0       	push   0xc002980e
c00148a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ae:	e8 5b c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00148b3:	58                   	pop    eax
c00148b4:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00148b9:	5a                   	pop    edx
c00148ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148be:	52                   	push   edx
c00148bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c5:	e8 6a c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00148ca:	59                   	pop    ecx
c00148cb:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00148d0:	5b                   	pop    ebx
c00148d1:	68 17 98 02 c0       	push   0xc0029817
c00148d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dc:	e8 2d c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00148e1:	58                   	pop    eax
c00148e2:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00148e7:	5a                   	pop    edx
c00148e8:	57                   	push   edi
c00148e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ef:	e8 40 c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00148f4:	59                   	pop    ecx
c00148f5:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00148fa:	5b                   	pop    ebx
c00148fb:	68 1f 98 02 c0       	push   0xc002981f
c0014900:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014906:	e8 03 c5 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001490b:	5f                   	pop    edi
c001490c:	58                   	pop    eax
c001490d:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014912:	56                   	push   esi
c0014913:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014919:	e8 16 c5 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c001491e:	58                   	pop    eax
c001491f:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014924:	5a                   	pop    edx
c0014925:	68 27 98 02 c0       	push   0xc0029827
c001492a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014930:	e8 d9 c4 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014935:	59                   	pop    ecx
c0014936:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001493b:	5b                   	pop    ebx
c001493c:	55                   	push   ebp
c001493d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014943:	e8 ec c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014948:	5e                   	pop    esi
c0014949:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001494e:	5f                   	pop    edi
c001494f:	68 2f 98 02 c0       	push   0xc002982f
c0014954:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495a:	e8 af c4 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001495f:	0f 21 c0             	mov    eax,db0
c0014962:	5d                   	pop    ebp
c0014963:	5a                   	pop    edx
c0014964:	50                   	push   eax
c0014965:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001496a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014970:	e8 bf c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014975:	59                   	pop    ecx
c0014976:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001497b:	5b                   	pop    ebx
c001497c:	68 38 98 02 c0       	push   0xc0029838
c0014981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014987:	e8 82 c4 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c001498c:	0f 21 c8             	mov    eax,db1
c001498f:	5e                   	pop    esi
c0014990:	5f                   	pop    edi
c0014991:	50                   	push   eax
c0014992:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014997:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499d:	e8 92 c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00149a2:	5d                   	pop    ebp
c00149a3:	58                   	pop    eax
c00149a4:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00149a9:	68 40 98 02 c0       	push   0xc0029840
c00149ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b4:	e8 55 c4 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00149b9:	0f 21 d0             	mov    eax,db2
c00149bc:	5a                   	pop    edx
c00149bd:	59                   	pop    ecx
c00149be:	50                   	push   eax
c00149bf:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00149c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ca:	e8 65 c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00149cf:	5b                   	pop    ebx
c00149d0:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00149d5:	5e                   	pop    esi
c00149d6:	68 48 98 02 c0       	push   0xc0029848
c00149db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e1:	e8 28 c4 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00149e6:	0f 21 d8             	mov    eax,db3
c00149e9:	5f                   	pop    edi
c00149ea:	5d                   	pop    ebp
c00149eb:	50                   	push   eax
c00149ec:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00149f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f7:	e8 38 c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c00149fc:	58                   	pop    eax
c00149fd:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014a02:	5a                   	pop    edx
c0014a03:	68 50 98 02 c0       	push   0xc0029850
c0014a08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0e:	e8 fb c3 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014a13:	0f 21 f0             	mov    eax,db6
c0014a16:	59                   	pop    ecx
c0014a17:	5b                   	pop    ebx
c0014a18:	50                   	push   eax
c0014a19:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a24:	e8 0b c4 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014a29:	5e                   	pop    esi
c0014a2a:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014a2f:	5f                   	pop    edi
c0014a30:	68 58 98 02 c0       	push   0xc0029858
c0014a35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3b:	e8 ce c3 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0014a40:	0f 21 f8             	mov    eax,db7
c0014a43:	5d                   	pop    ebp
c0014a44:	5a                   	pop    edx
c0014a45:	50                   	push   eax
c0014a46:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0014a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a51:	e8 de c3 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0014a56:	fa                   	cli    
c0014a57:	f4                   	hlt    
c0014a58:	83 c4 10             	add    esp,0x10
c0014a5b:	eb fe                	jmp    c0014a5b <displayDebugInfo(regs*)+0x403>

c0014a5d <x87EmulHandler(regs*, void*)>:
c0014a5d:	53                   	push   ebx
c0014a5e:	83 ec 14             	sub    esp,0x14
c0014a61:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a65:	53                   	push   ebx
c0014a66:	e8 ff 9f 00 00       	call   c001ea6a <Vm::x87Handler(regs*)>
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	84 c0                	test   al,al
c0014a70:	74 05                	je     c0014a77 <x87EmulHandler(regs*, void*)+0x1a>
c0014a72:	83 c4 08             	add    esp,0x8
c0014a75:	5b                   	pop    ebx
c0014a76:	c3                   	ret    
c0014a77:	83 ec 0c             	sub    esp,0xc
c0014a7a:	68 60 98 02 c0       	push   0xc0029860
c0014a7f:	e8 a9 dd ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014a84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a87:	e8 cc fb ff ff       	call   c0014658 <displayDebugInfo(regs*)>

c0014a8c <gpFault(regs*, void*)>:
c0014a8c:	53                   	push   ebx
c0014a8d:	83 ec 14             	sub    esp,0x14
c0014a90:	c7 05 b0 cb 02 c0 e7 dd 01 c0 	mov    DWORD PTR ds:0xc002cbb0,0xc001dde7
c0014a9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a9e:	53                   	push   ebx
c0014a9f:	e8 43 93 00 00       	call   c001dde7 <Vm::faultHandler(regs*)>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	84 c0                	test   al,al
c0014aa9:	74 05                	je     c0014ab0 <gpFault(regs*, void*)+0x24>
c0014aab:	83 c4 08             	add    esp,0x8
c0014aae:	5b                   	pop    ebx
c0014aaf:	c3                   	ret    
c0014ab0:	83 ec 0c             	sub    esp,0xc
c0014ab3:	68 76 98 02 c0       	push   0xc0029876
c0014ab8:	e8 70 dd ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ac0:	e8 93 fb ff ff       	call   c0014658 <displayDebugInfo(regs*)>

c0014ac5 <pgFault(regs*, void*)>:
c0014ac5:	83 ec 18             	sub    esp,0x18
c0014ac8:	68 91 98 02 c0       	push   0xc0029891
c0014acd:	e8 5b dd ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014ad2:	58                   	pop    eax
c0014ad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ad7:	e8 7c fb ff ff       	call   c0014658 <displayDebugInfo(regs*)>

c0014adc <otherISRHandler(regs*, void*)>:
c0014adc:	53                   	push   ebx
c0014add:	83 ec 0c             	sub    esp,0xc
c0014ae0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ae4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ae7:	50                   	push   eax
c0014ae8:	50                   	push   eax
c0014ae9:	68 9e 98 02 c0       	push   0xc002989e
c0014aee:	e8 3a dd ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014af3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014af6:	e8 5d fb ff ff       	call   c0014658 <displayDebugInfo(regs*)>

c0014afb <opcodeFault(regs*, void*)>:
c0014afb:	55                   	push   ebp
c0014afc:	89 e5                	mov    ebp,esp
c0014afe:	56                   	push   esi
c0014aff:	53                   	push   ebx
c0014b00:	83 ec 40             	sub    esp,0x40
c0014b03:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0014b08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b0e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b14:	84 c0                	test   al,al
c0014b16:	74 24                	je     c0014b3c <opcodeFault(regs*, void*)+0x41>
c0014b18:	83 ec 0c             	sub    esp,0xc
c0014b1b:	68 bc 98 02 c0       	push   0xc00298bc
c0014b20:	e8 08 dd ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014b25:	83 c4 10             	add    esp,0x10
c0014b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2e:	8d 50 19             	lea    edx,[eax+0x19]
c0014b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b34:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b37:	e9 77 05 00 00       	jmp    c00150b3 <opcodeFault(regs*, void*)+0x5b8>
c0014b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b45:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b49:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b59:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5b:	3c f0                	cmp    al,0xf0
c0014b5d:	75 17                	jne    c0014b76 <opcodeFault(regs*, void*)+0x7b>
c0014b5f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b68:	8d 50 01             	lea    edx,[eax+0x1]
c0014b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b71:	e9 da 00 00 00       	jmp    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b79:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7b:	3c f2                	cmp    al,0xf2
c0014b7d:	74 09                	je     c0014b88 <opcodeFault(regs*, void*)+0x8d>
c0014b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b82:	8a 00                	mov    al,BYTE PTR [eax]
c0014b84:	3c f3                	cmp    al,0xf3
c0014b86:	75 1b                	jne    c0014ba3 <opcodeFault(regs*, void*)+0xa8>
c0014b88:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b8c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b95:	8d 50 01             	lea    edx,[eax+0x1]
c0014b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b9e:	e9 ad 00 00 00       	jmp    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014ba3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba8:	3c 66                	cmp    al,0x66
c0014baa:	75 1f                	jne    c0014bcb <opcodeFault(regs*, void*)+0xd0>
c0014bac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bb0:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014bb4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bbd:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bc6:	e9 85 00 00 00       	jmp    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bce:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd0:	3c 67                	cmp    al,0x67
c0014bd2:	75 18                	jne    c0014bec <opcodeFault(regs*, void*)+0xf1>
c0014bd4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bd8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014be1:	8d 50 01             	lea    edx,[eax+0x1]
c0014be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bea:	eb 64                	jmp    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014bec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bef:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf1:	3c 2e                	cmp    al,0x2e
c0014bf3:	74 09                	je     c0014bfe <opcodeFault(regs*, void*)+0x103>
c0014bf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf8:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfa:	3c 3e                	cmp    al,0x3e
c0014bfc:	75 18                	jne    c0014c16 <opcodeFault(regs*, void*)+0x11b>
c0014bfe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c02:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c0b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c14:	eb 3a                	jmp    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014c16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c19:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1b:	3c 36                	cmp    al,0x36
c0014c1d:	74 1b                	je     c0014c3a <opcodeFault(regs*, void*)+0x13f>
c0014c1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c22:	8a 00                	mov    al,BYTE PTR [eax]
c0014c24:	3c 26                	cmp    al,0x26
c0014c26:	74 12                	je     c0014c3a <opcodeFault(regs*, void*)+0x13f>
c0014c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2d:	3c 64                	cmp    al,0x64
c0014c2f:	74 09                	je     c0014c3a <opcodeFault(regs*, void*)+0x13f>
c0014c31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c34:	8a 00                	mov    al,BYTE PTR [eax]
c0014c36:	3c 65                	cmp    al,0x65
c0014c38:	75 16                	jne    c0014c50 <opcodeFault(regs*, void*)+0x155>
c0014c3a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c3e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c47:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c53:	8a 00                	mov    al,BYTE PTR [eax]
c0014c55:	3c 0f                	cmp    al,0xf
c0014c57:	0f 85 ad 00 00 00    	jne    c0014d0a <opcodeFault(regs*, void*)+0x20f>
c0014c5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c60:	40                   	inc    eax
c0014c61:	8a 00                	mov    al,BYTE PTR [eax]
c0014c63:	3c c2                	cmp    al,0xc2
c0014c65:	74 0e                	je     c0014c75 <opcodeFault(regs*, void*)+0x17a>
c0014c67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6a:	40                   	inc    eax
c0014c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6d:	3c c3                	cmp    al,0xc3
c0014c6f:	0f 85 95 00 00 00    	jne    c0014d0a <opcodeFault(regs*, void*)+0x20f>
c0014c75:	83 ec 0c             	sub    esp,0xc
c0014c78:	68 df 98 02 c0       	push   0xc00298df
c0014c7d:	e8 ab db ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c88:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c8b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c94:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca2:	88 10                	mov    BYTE PTR [eax],dl
c0014ca4:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ca7:	50                   	push   eax
c0014ca8:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014cab:	50                   	push   eax
c0014cac:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014caf:	50                   	push   eax
c0014cb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cb3:	e8 c0 44 00 00       	call   c0019178 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cc4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cc7:	01 d0                	add    eax,edx
c0014cc9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cd5:	48                   	dec    eax
c0014cd6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cdf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce5:	83 ec 04             	sub    esp,0x4
c0014ce8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ceb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014cee:	50                   	push   eax
c0014cef:	e8 75 b4 fe ff       	call   c0000169 <voodooXADD>
c0014cf4:	83 c4 10             	add    esp,0x10
c0014cf7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014cfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014cfd:	01 c2                	add    edx,eax
c0014cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d05:	e9 a9 03 00 00       	jmp    c00150b3 <opcodeFault(regs*, void*)+0x5b8>
c0014d0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0f:	3c 0f                	cmp    al,0xf
c0014d11:	0f 85 8b 01 00 00    	jne    c0014ea2 <opcodeFault(regs*, void*)+0x3a7>
c0014d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1a:	40                   	inc    eax
c0014d1b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1d:	3c c7                	cmp    al,0xc7
c0014d1f:	0f 86 7d 01 00 00    	jbe    c0014ea2 <opcodeFault(regs*, void*)+0x3a7>
c0014d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d28:	40                   	inc    eax
c0014d29:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2b:	3c cf                	cmp    al,0xcf
c0014d2d:	0f 87 6f 01 00 00    	ja     c0014ea2 <opcodeFault(regs*, void*)+0x3a7>
c0014d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d36:	40                   	inc    eax
c0014d37:	8a 00                	mov    al,BYTE PTR [eax]
c0014d39:	83 c0 38             	add    eax,0x38
c0014d3c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d3f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d43:	75 0b                	jne    c0014d50 <opcodeFault(regs*, void*)+0x255>
c0014d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d48:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d4e:	eb 75                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014d50:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d54:	75 0b                	jne    c0014d61 <opcodeFault(regs*, void*)+0x266>
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d5c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5f:	eb 64                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014d61:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d65:	75 0b                	jne    c0014d72 <opcodeFault(regs*, void*)+0x277>
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d70:	eb 53                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014d72:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d76:	75 0b                	jne    c0014d83 <opcodeFault(regs*, void*)+0x288>
c0014d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d81:	eb 42                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014d83:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d87:	75 0b                	jne    c0014d94 <opcodeFault(regs*, void*)+0x299>
c0014d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d92:	eb 31                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014d94:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d98:	75 0b                	jne    c0014da5 <opcodeFault(regs*, void*)+0x2aa>
c0014d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014da0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da3:	eb 20                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014da5:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014da9:	75 0b                	jne    c0014db6 <opcodeFault(regs*, void*)+0x2bb>
c0014dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014db1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014db4:	eb 0f                	jmp    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014db6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dba:	75 09                	jne    c0014dc5 <opcodeFault(regs*, void*)+0x2ca>
c0014dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014dc2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dc5:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dc9:	74 10                	je     c0014ddb <opcodeFault(regs*, void*)+0x2e0>
c0014dcb:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014dd2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dd9:	eb 2d                	jmp    c0014e08 <opcodeFault(regs*, void*)+0x30d>
c0014ddb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dde:	c1 e0 18             	shl    eax,0x18
c0014de1:	89 c2                	mov    edx,eax
c0014de3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de6:	c1 e0 08             	shl    eax,0x8
c0014de9:	25 00 00 ff 00       	and    eax,0xff0000
c0014dee:	09 c2                	or     edx,eax
c0014df0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014df3:	c1 e8 08             	shr    eax,0x8
c0014df6:	25 00 ff 00 00       	and    eax,0xff00
c0014dfb:	09 c2                	or     edx,eax
c0014dfd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e00:	c1 e8 18             	shr    eax,0x18
c0014e03:	09 d0                	or     eax,edx
c0014e05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e08:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e0c:	75 0b                	jne    c0014e19 <opcodeFault(regs*, void*)+0x31e>
c0014e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e17:	eb 75                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e19:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e1d:	75 0b                	jne    c0014e2a <opcodeFault(regs*, void*)+0x32f>
c0014e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e25:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e28:	eb 64                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e2a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e2e:	75 0b                	jne    c0014e3b <opcodeFault(regs*, void*)+0x340>
c0014e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e36:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e39:	eb 53                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e3b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e3f:	75 0b                	jne    c0014e4c <opcodeFault(regs*, void*)+0x351>
c0014e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e44:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e47:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e4a:	eb 42                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e4c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e50:	75 0b                	jne    c0014e5d <opcodeFault(regs*, void*)+0x362>
c0014e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e55:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e58:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e5b:	eb 31                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e5d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e61:	75 0b                	jne    c0014e6e <opcodeFault(regs*, void*)+0x373>
c0014e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e66:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e6c:	eb 20                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e6e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e72:	75 0b                	jne    c0014e7f <opcodeFault(regs*, void*)+0x384>
c0014e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e77:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e7a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e7d:	eb 0f                	jmp    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e7f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e83:	75 09                	jne    c0014e8e <opcodeFault(regs*, void*)+0x393>
c0014e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e8b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e94:	8d 50 02             	lea    edx,[eax+0x2]
c0014e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e9d:	e9 11 02 00 00       	jmp    c00150b3 <opcodeFault(regs*, void*)+0x5b8>
c0014ea2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea7:	3c 0f                	cmp    al,0xf
c0014ea9:	0f 85 76 01 00 00    	jne    c0015025 <opcodeFault(regs*, void*)+0x52a>
c0014eaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb2:	40                   	inc    eax
c0014eb3:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb5:	3c c7                	cmp    al,0xc7
c0014eb7:	0f 85 68 01 00 00    	jne    c0015025 <opcodeFault(regs*, void*)+0x52a>
c0014ebd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ecf:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ed2:	50                   	push   eax
c0014ed3:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ed6:	50                   	push   eax
c0014ed7:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014eda:	50                   	push   eax
c0014edb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ede:	e8 95 42 00 00       	call   c0019178 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ee9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014eec:	83 f0 01             	xor    eax,0x1
c0014eef:	84 c0                	test   al,al
c0014ef1:	0f 84 2e 01 00 00    	je     c0015025 <opcodeFault(regs*, void*)+0x52a>
c0014ef7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014efa:	3c 01                	cmp    al,0x1
c0014efc:	0f 85 23 01 00 00    	jne    c0015025 <opcodeFault(regs*, void*)+0x52a>
c0014f02:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f05:	83 f0 01             	xor    eax,0x1
c0014f08:	84 c0                	test   al,al
c0014f0a:	0f 84 15 01 00 00    	je     c0015025 <opcodeFault(regs*, void*)+0x52a>
c0014f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f13:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f16:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f19:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f20:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f23:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f26:	89 c2                	mov    edx,eax
c0014f28:	b8 00 00 00 00       	mov    eax,0x0
c0014f2d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f30:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f36:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f39:	ba 00 00 00 00       	mov    edx,0x0
c0014f3e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f41:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f47:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f4a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f4d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f54:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f57:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f5a:	89 c2                	mov    edx,eax
c0014f5c:	b8 00 00 00 00       	mov    eax,0x0
c0014f61:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f64:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f6d:	ba 00 00 00 00       	mov    edx,0x0
c0014f72:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f75:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f78:	e8 59 7e 00 00       	call   c001cdd6 <lockScheduler()>
c0014f7d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f83:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f85:	89 c1                	mov    ecx,eax
c0014f87:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f8a:	89 cb                	mov    ebx,ecx
c0014f8c:	89 d0                	mov    eax,edx
c0014f8e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f91:	89 c6                	mov    esi,eax
c0014f93:	89 f0                	mov    eax,esi
c0014f95:	09 d8                	or     eax,ebx
c0014f97:	85 c0                	test   eax,eax
c0014f99:	75 21                	jne    c0014fbc <opcodeFault(regs*, void*)+0x4c1>
c0014f9b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f9e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014fa1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fa4:	89 01                	mov    DWORD PTR [ecx],eax
c0014fa6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014faf:	83 c8 40             	or     eax,0x40
c0014fb2:	89 c2                	mov    edx,eax
c0014fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fba:	eb 3e                	jmp    c0014ffa <opcodeFault(regs*, void*)+0x4ff>
c0014fbc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fc7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fca:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fd3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fd6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fd9:	89 d0                	mov    eax,edx
c0014fdb:	31 d2                	xor    edx,edx
c0014fdd:	89 c3                	mov    ebx,eax
c0014fdf:	89 d6                	mov    esi,edx
c0014fe1:	89 da                	mov    edx,ebx
c0014fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fef:	83 e0 bf             	and    eax,0xffffffbf
c0014ff2:	89 c2                	mov    edx,eax
c0014ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ffa:	e8 d9 7d 00 00       	call   c001cdd8 <unlockScheduler()>
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015005:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015008:	01 c2                	add    edx,eax
c001500a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015010:	83 ec 0c             	sub    esp,0xc
c0015013:	68 ee 98 02 c0       	push   0xc00298ee
c0015018:	e8 10 d8 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001501d:	83 c4 10             	add    esp,0x10
c0015020:	e9 8e 00 00 00       	jmp    c00150b3 <opcodeFault(regs*, void*)+0x5b8>
c0015025:	83 ec 0c             	sub    esp,0xc
c0015028:	68 01 99 02 c0       	push   0xc0029901
c001502d:	e8 fb d7 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015038:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015041:	c1 e0 04             	shl    eax,0x4
c0015044:	01 d0                	add    eax,edx
c0015046:	83 c0 03             	add    eax,0x3
c0015049:	8a 00                	mov    al,BYTE PTR [eax]
c001504b:	0f b6 d8             	movzx  ebx,al
c001504e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015051:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015057:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001505a:	c1 e0 04             	shl    eax,0x4
c001505d:	01 d0                	add    eax,edx
c001505f:	83 c0 02             	add    eax,0x2
c0015062:	8a 00                	mov    al,BYTE PTR [eax]
c0015064:	0f b6 c8             	movzx  ecx,al
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001506d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015070:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015073:	c1 e0 04             	shl    eax,0x4
c0015076:	01 d0                	add    eax,edx
c0015078:	40                   	inc    eax
c0015079:	8a 00                	mov    al,BYTE PTR [eax]
c001507b:	0f b6 d0             	movzx  edx,al
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015087:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001508a:	c1 e0 04             	shl    eax,0x4
c001508d:	01 f0                	add    eax,esi
c001508f:	8a 00                	mov    al,BYTE PTR [eax]
c0015091:	0f b6 c0             	movzx  eax,al
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	53                   	push   ebx
c0015098:	51                   	push   ecx
c0015099:	52                   	push   edx
c001509a:	50                   	push   eax
c001509b:	68 14 99 02 c0       	push   0xc0029914
c00150a0:	e8 88 d7 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00150a5:	83 c4 20             	add    esp,0x20
c00150a8:	83 ec 0c             	sub    esp,0xc
c00150ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150ae:	e8 a5 f5 ff ff       	call   c0014658 <displayDebugInfo(regs*)>
c00150b3:	8d 65 f8             	lea    esp,[ebp-0x8]
c00150b6:	5b                   	pop    ebx
c00150b7:	5e                   	pop    esi
c00150b8:	5d                   	pop    ebp
c00150b9:	c3                   	ret    

c00150ba <displayProgramFault(char const*)>:
c00150ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150c2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00150c8:	85 c0                	test   eax,eax
c00150ca:	74 15                	je     c00150e1 <displayProgramFault(char const*)+0x27>
c00150cc:	83 ec 0c             	sub    esp,0xc
c00150cf:	6a 04                	push   0x4
c00150d1:	6a 0f                	push   0xf
c00150d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150d7:	50                   	push   eax
c00150d8:	e8 f3 b9 ff ff       	call   c0010ad0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00150dd:	83 c4 1c             	add    esp,0x1c
c00150e0:	c3                   	ret    
c00150e1:	c3                   	ret    

c00150e2 <setupInterruptController()>:
c00150e2:	55                   	push   ebp
c00150e3:	89 e5                	mov    ebp,esp
c00150e5:	53                   	push   ebx
c00150e6:	83 ec 24             	sub    esp,0x24
c00150e9:	b8 00 00 00 00       	mov    eax,0x0
c00150ee:	85 c0                	test   eax,eax
c00150f0:	0f 95 c0             	setne  al
c00150f3:	84 c0                	test   al,al
c00150f5:	74 5b                	je     c0015152 <setupInterruptController()+0x70>
c00150f7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00150fe:	83 ec 0c             	sub    esp,0xc
c0015101:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015104:	e8 cb a3 ff ff       	call   c000f4d4 <malloc>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	89 c3                	mov    ebx,eax
c001510e:	83 ec 0c             	sub    esp,0xc
c0015111:	53                   	push   ebx
c0015112:	e8 c3 f2 00 00       	call   c00243da <APIC::APIC()>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001511d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015120:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015123:	8b 00                	mov    eax,DWORD PTR [eax]
c0015125:	83 c0 08             	add    eax,0x8
c0015128:	8b 00                	mov    eax,DWORD PTR [eax]
c001512a:	6a 00                	push   0x0
c001512c:	6a 00                	push   0x0
c001512e:	6a 00                	push   0x0
c0015130:	52                   	push   edx
c0015131:	ff d0                	call   eax
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001513b:	83 ec 08             	sub    esp,0x8
c001513e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015141:	50                   	push   eax
c0015142:	e8 d5 ea ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001514d:	e9 52 03 00 00       	jmp    c00154a4 <setupInterruptController()+0x3c2>
c0015152:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0015157:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001515d:	83 e0 01             	and    eax,0x1
c0015160:	84 c0                	test   al,al
c0015162:	0f 95 c0             	setne  al
c0015165:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015168:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001516f:	83 ec 0c             	sub    esp,0xc
c0015172:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015175:	e8 5a a3 ff ff       	call   c000f4d4 <malloc>
c001517a:	83 c4 10             	add    esp,0x10
c001517d:	89 c3                	mov    ebx,eax
c001517f:	83 ec 0c             	sub    esp,0xc
c0015182:	53                   	push   ebx
c0015183:	e8 aa f7 00 00       	call   c0024932 <PIC::PIC()>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001518e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015194:	8b 00                	mov    eax,DWORD PTR [eax]
c0015196:	83 c0 08             	add    eax,0x8
c0015199:	8b 00                	mov    eax,DWORD PTR [eax]
c001519b:	6a 00                	push   0x0
c001519d:	6a 00                	push   0x0
c001519f:	6a 00                	push   0x0
c00151a1:	52                   	push   edx
c00151a2:	ff d0                	call   eax
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00151ab:	74 73                	je     c0015220 <setupInterruptController()+0x13e>
c00151ad:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	83 c0 0c             	add    eax,0xc
c00151b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ba:	6a 00                	push   0x0
c00151bc:	6a 00                	push   0x0
c00151be:	6a 00                	push   0x0
c00151c0:	52                   	push   edx
c00151c1:	ff d0                	call   eax
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00151ca:	74 15                	je     c00151e1 <setupInterruptController()+0xff>
c00151cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d1:	83 c0 04             	add    eax,0x4
c00151d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d6:	83 ec 0c             	sub    esp,0xc
c00151d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dc:	ff d0                	call   eax
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00151ee:	e8 e1 a2 ff ff       	call   c000f4d4 <malloc>
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	89 c3                	mov    ebx,eax
c00151f8:	83 ec 0c             	sub    esp,0xc
c00151fb:	53                   	push   ebx
c00151fc:	e8 d9 f1 00 00       	call   c00243da <APIC::APIC()>
c0015201:	83 c4 10             	add    esp,0x10
c0015204:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015207:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001520a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520d:	8b 00                	mov    eax,DWORD PTR [eax]
c001520f:	83 c0 08             	add    eax,0x8
c0015212:	8b 00                	mov    eax,DWORD PTR [eax]
c0015214:	6a 00                	push   0x0
c0015216:	6a 00                	push   0x0
c0015218:	6a 00                	push   0x0
c001521a:	52                   	push   edx
c001521b:	ff d0                	call   eax
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0015225:	83 ec 08             	sub    esp,0x8
c0015228:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522b:	50                   	push   eax
c001522c:	e8 eb e9 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8b 00                	mov    eax,DWORD PTR [eax]
c0015239:	83 c0 24             	add    eax,0x24
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	6a 00                	push   0x0
c0015240:	68 dc 4a 01 c0       	push   0xc0014adc
c0015245:	6a 00                	push   0x0
c0015247:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524a:	ff d0                	call   eax
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015252:	8b 00                	mov    eax,DWORD PTR [eax]
c0015254:	83 c0 24             	add    eax,0x24
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	6a 00                	push   0x0
c001525b:	68 dc 4a 01 c0       	push   0xc0014adc
c0015260:	6a 01                	push   0x1
c0015262:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015265:	ff d0                	call   eax
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526d:	8b 00                	mov    eax,DWORD PTR [eax]
c001526f:	83 c0 24             	add    eax,0x24
c0015272:	8b 00                	mov    eax,DWORD PTR [eax]
c0015274:	6a 00                	push   0x0
c0015276:	68 b5 44 01 c0       	push   0xc00144b5
c001527b:	6a 02                	push   0x2
c001527d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015280:	ff d0                	call   eax
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015288:	8b 00                	mov    eax,DWORD PTR [eax]
c001528a:	83 c0 24             	add    eax,0x24
c001528d:	8b 00                	mov    eax,DWORD PTR [eax]
c001528f:	6a 00                	push   0x0
c0015291:	68 dc 4a 01 c0       	push   0xc0014adc
c0015296:	6a 03                	push   0x3
c0015298:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529b:	ff d0                	call   eax
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a5:	83 c0 24             	add    eax,0x24
c00152a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152aa:	6a 00                	push   0x0
c00152ac:	68 dc 4a 01 c0       	push   0xc0014adc
c00152b1:	6a 04                	push   0x4
c00152b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b6:	ff d0                	call   eax
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152be:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c0:	83 c0 24             	add    eax,0x24
c00152c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c5:	6a 00                	push   0x0
c00152c7:	68 dc 4a 01 c0       	push   0xc0014adc
c00152cc:	6a 05                	push   0x5
c00152ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d1:	ff d0                	call   eax
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152db:	83 c0 24             	add    eax,0x24
c00152de:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e0:	6a 00                	push   0x0
c00152e2:	68 fb 4a 01 c0       	push   0xc0014afb
c00152e7:	6a 06                	push   0x6
c00152e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ec:	ff d0                	call   eax
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f6:	83 c0 24             	add    eax,0x24
c00152f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fb:	6a 00                	push   0x0
c00152fd:	68 5d 4a 01 c0       	push   0xc0014a5d
c0015302:	6a 07                	push   0x7
c0015304:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015307:	ff d0                	call   eax
c0015309:	83 c4 10             	add    esp,0x10
c001530c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015311:	83 c0 24             	add    eax,0x24
c0015314:	8b 00                	mov    eax,DWORD PTR [eax]
c0015316:	6a 00                	push   0x0
c0015318:	68 d0 42 01 c0       	push   0xc00142d0
c001531d:	6a 08                	push   0x8
c001531f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015322:	ff d0                	call   eax
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532a:	8b 00                	mov    eax,DWORD PTR [eax]
c001532c:	83 c0 24             	add    eax,0x24
c001532f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015331:	6a 00                	push   0x0
c0015333:	68 dc 4a 01 c0       	push   0xc0014adc
c0015338:	6a 09                	push   0x9
c001533a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533d:	ff d0                	call   eax
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	8b 00                	mov    eax,DWORD PTR [eax]
c0015347:	83 c0 24             	add    eax,0x24
c001534a:	8b 00                	mov    eax,DWORD PTR [eax]
c001534c:	6a 00                	push   0x0
c001534e:	68 dc 4a 01 c0       	push   0xc0014adc
c0015353:	6a 0a                	push   0xa
c0015355:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015358:	ff d0                	call   eax
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015360:	8b 00                	mov    eax,DWORD PTR [eax]
c0015362:	83 c0 24             	add    eax,0x24
c0015365:	8b 00                	mov    eax,DWORD PTR [eax]
c0015367:	6a 00                	push   0x0
c0015369:	68 dc 4a 01 c0       	push   0xc0014adc
c001536e:	6a 0b                	push   0xb
c0015370:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015373:	ff d0                	call   eax
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537b:	8b 00                	mov    eax,DWORD PTR [eax]
c001537d:	83 c0 24             	add    eax,0x24
c0015380:	8b 00                	mov    eax,DWORD PTR [eax]
c0015382:	6a 00                	push   0x0
c0015384:	68 dc 4a 01 c0       	push   0xc0014adc
c0015389:	6a 0c                	push   0xc
c001538b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538e:	ff d0                	call   eax
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015396:	8b 00                	mov    eax,DWORD PTR [eax]
c0015398:	83 c0 24             	add    eax,0x24
c001539b:	8b 00                	mov    eax,DWORD PTR [eax]
c001539d:	6a 00                	push   0x0
c001539f:	68 8c 4a 01 c0       	push   0xc0014a8c
c00153a4:	6a 0d                	push   0xd
c00153a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a9:	ff d0                	call   eax
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b3:	83 c0 24             	add    eax,0x24
c00153b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b8:	6a 00                	push   0x0
c00153ba:	68 c5 4a 01 c0       	push   0xc0014ac5
c00153bf:	6a 0e                	push   0xe
c00153c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c4:	ff d0                	call   eax
c00153c6:	83 c4 10             	add    esp,0x10
c00153c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ce:	83 c0 24             	add    eax,0x24
c00153d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d3:	6a 00                	push   0x0
c00153d5:	68 dc 4a 01 c0       	push   0xc0014adc
c00153da:	6a 0f                	push   0xf
c00153dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153df:	ff d0                	call   eax
c00153e1:	83 c4 10             	add    esp,0x10
c00153e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e9:	83 c0 24             	add    eax,0x24
c00153ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ee:	6a 00                	push   0x0
c00153f0:	68 dc 4a 01 c0       	push   0xc0014adc
c00153f5:	6a 10                	push   0x10
c00153f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153fa:	ff d0                	call   eax
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8b 00                	mov    eax,DWORD PTR [eax]
c0015404:	83 c0 24             	add    eax,0x24
c0015407:	8b 00                	mov    eax,DWORD PTR [eax]
c0015409:	6a 00                	push   0x0
c001540b:	68 dc 4a 01 c0       	push   0xc0014adc
c0015410:	6a 11                	push   0x11
c0015412:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015415:	ff d0                	call   eax
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541d:	8b 00                	mov    eax,DWORD PTR [eax]
c001541f:	83 c0 24             	add    eax,0x24
c0015422:	8b 00                	mov    eax,DWORD PTR [eax]
c0015424:	6a 00                	push   0x0
c0015426:	68 dc 4a 01 c0       	push   0xc0014adc
c001542b:	6a 12                	push   0x12
c001542d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015430:	ff d0                	call   eax
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015438:	8b 00                	mov    eax,DWORD PTR [eax]
c001543a:	83 c0 24             	add    eax,0x24
c001543d:	8b 00                	mov    eax,DWORD PTR [eax]
c001543f:	6a 00                	push   0x0
c0015441:	68 dc 4a 01 c0       	push   0xc0014adc
c0015446:	6a 13                	push   0x13
c0015448:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001544b:	ff d0                	call   eax
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8b 00                	mov    eax,DWORD PTR [eax]
c0015455:	83 c0 24             	add    eax,0x24
c0015458:	8b 00                	mov    eax,DWORD PTR [eax]
c001545a:	6a 00                	push   0x0
c001545c:	68 dc 4a 01 c0       	push   0xc0014adc
c0015461:	6a 14                	push   0x14
c0015463:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015466:	ff d0                	call   eax
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015470:	83 c0 24             	add    eax,0x24
c0015473:	8b 00                	mov    eax,DWORD PTR [eax]
c0015475:	6a 00                	push   0x0
c0015477:	68 dc 4a 01 c0       	push   0xc0014adc
c001547c:	6a 1e                	push   0x1e
c001547e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015481:	ff d0                	call   eax
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015489:	8b 00                	mov    eax,DWORD PTR [eax]
c001548b:	83 c0 24             	add    eax,0x24
c001548e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015490:	6a 00                	push   0x0
c0015492:	68 6b b7 01 c0       	push   0xc001b76b
c0015497:	6a 60                	push   0x60
c0015499:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001549c:	ff d0                	call   eax
c001549e:	83 c4 10             	add    esp,0x10
c00154a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154a7:	c9                   	leave  
c00154a8:	c3                   	ret    
c00154a9:	90                   	nop

c00154aa <InterruptController::convertLegacyIRQNumber(int)>:
c00154aa:	55                   	push   ebp
c00154ab:	89 e5                	mov    ebp,esp
c00154ad:	83 ec 08             	sub    esp,0x8
c00154b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b3:	83 ec 0c             	sub    esp,0xc
c00154b6:	50                   	push   eax
c00154b7:	e8 4c ea ff ff       	call   c0013f08 <Device::getName()>
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	8a 00                	mov    al,BYTE PTR [eax]
c00154c1:	3c 41                	cmp    al,0x41
c00154c3:	0f 94 c0             	sete   al
c00154c6:	84 c0                	test   al,al
c00154c8:	74 28                	je     c00154f2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00154ca:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00154ce:	7f 12                	jg     c00154e2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00154d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00154d3:	05 60 bc 02 c0       	add    eax,0xc002bc60
c00154d8:	8a 00                	mov    al,BYTE PTR [eax]
c00154da:	0f b6 c0             	movzx  eax,al
c00154dd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00154e0:	eb 10                	jmp    c00154f2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	68 94 96 02 c0       	push   0xc0029694
c00154ea:	e8 58 44 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00154ef:	83 c4 10             	add    esp,0x10
c00154f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00154f5:	c9                   	leave  
c00154f6:	c3                   	ret    
c00154f7:	90                   	nop

c00154f8 <startGUI(void*)>:
c00154f8:	55                   	push   ebp
c00154f9:	89 e5                	mov    ebp,esp
c00154fb:	53                   	push   ebx
c00154fc:	83 ec 04             	sub    esp,0x4
c00154ff:	e8 d4 78 00 00       	call   c001cdd8 <unlockScheduler()>
c0015504:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c001550a:	83 ec 08             	sub    esp,0x8
c001550d:	6a 01                	push   0x1
c001550f:	68 7c 99 02 c0       	push   0xc002997c
c0015514:	e8 49 72 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	83 ec 08             	sub    esp,0x8
c001551f:	53                   	push   ebx
c0015520:	50                   	push   eax
c0015521:	e8 4b 74 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c001552f:	83 ec 08             	sub    esp,0x8
c0015532:	6a 01                	push   0x1
c0015534:	68 96 99 02 c0       	push   0xc0029996
c0015539:	e8 24 72 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	53                   	push   ebx
c0015545:	50                   	push   eax
c0015546:	e8 26 74 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	90                   	nop
c001554f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015552:	c9                   	leave  
c0015553:	c3                   	ret    

c0015554 <startGUIVESA(void*)>:
c0015554:	55                   	push   ebp
c0015555:	89 e5                	mov    ebp,esp
c0015557:	53                   	push   ebx
c0015558:	83 ec 04             	sub    esp,0x4
c001555b:	e8 78 78 00 00       	call   c001cdd8 <unlockScheduler()>
c0015560:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c0015566:	83 ec 08             	sub    esp,0x8
c0015569:	6a 01                	push   0x1
c001556b:	68 b0 99 02 c0       	push   0xc00299b0
c0015570:	e8 ed 71 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c0015575:	83 c4 10             	add    esp,0x10
c0015578:	83 ec 08             	sub    esp,0x8
c001557b:	53                   	push   ebx
c001557c:	50                   	push   eax
c001557d:	e8 ef 73 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c001558b:	83 ec 08             	sub    esp,0x8
c001558e:	6a 01                	push   0x1
c0015590:	68 96 99 02 c0       	push   0xc0029996
c0015595:	e8 c8 71 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c001559a:	83 c4 10             	add    esp,0x10
c001559d:	83 ec 08             	sub    esp,0x8
c00155a0:	53                   	push   ebx
c00155a1:	50                   	push   eax
c00155a2:	e8 ca 73 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	90                   	nop
c00155ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155ae:	c9                   	leave  
c00155af:	c3                   	ret    

c00155b0 <sendKeyToTerminal(unsigned char)>:
c00155b0:	55                   	push   ebp
c00155b1:	89 e5                	mov    ebp,esp
c00155b3:	83 ec 28             	sub    esp,0x28
c00155b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00155bc:	a1 e4 ca 02 c0       	mov    eax,ds:0xc002cae4
c00155c1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00155c5:	83 ec 08             	sub    esp,0x8
c00155c8:	52                   	push   edx
c00155c9:	50                   	push   eax
c00155ca:	e8 3d ba ff ff       	call   c001100c <VgaText::receiveKey(unsigned char)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00155d6:	75 41                	jne    c0015619 <sendKeyToTerminal(unsigned char)+0x69>
c00155d8:	e8 20 78 00 00       	call   c001cdfd <lockStuff()>
c00155dd:	a1 c0 cb 02 c0       	mov    eax,ds:0xc002cbc0
c00155e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155e5:	c7 05 c0 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cbc0,0x0
c00155ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155f3:	74 1f                	je     c0015614 <sendKeyToTerminal(unsigned char)+0x64>
c00155f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00155fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015601:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015604:	83 ec 0c             	sub    esp,0xc
c0015607:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001560a:	e8 df 7d 00 00       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	eb db                	jmp    c00155ef <sendKeyToTerminal(unsigned char)+0x3f>
c0015614:	e8 7e 7b 00 00       	call   c001d197 <unlockStuff()>
c0015619:	90                   	nop
c001561a:	c9                   	leave  
c001561b:	c3                   	ret    

c001561c <sendKeyboardToken(KeyboardToken)>:
c001561c:	55                   	push   ebp
c001561d:	89 e5                	mov    ebp,esp
c001561f:	83 ec 18             	sub    esp,0x18
c0015622:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015628:	0f b7 c0             	movzx  eax,ax
c001562b:	83 f2 01             	xor    edx,0x1
c001562e:	88 90 e0 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd3420],dl
c0015634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015637:	66 3d 03 02          	cmp    ax,0x203
c001563b:	75 07                	jne    c0015644 <sendKeyboardToken(KeyboardToken)+0x28>
c001563d:	a0 e0 cc 02 c0       	mov    al,ds:0xc002cce0
c0015642:	84 c0                	test   al,al
c0015644:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015648:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001564b:	a0 e8 cf 02 c0       	mov    al,ds:0xc002cfe8
c0015650:	38 c2                	cmp    dl,al
c0015652:	74 1c                	je     c0015670 <sendKeyboardToken(KeyboardToken)+0x54>
c0015654:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015657:	a2 e8 cf 02 c0       	mov    ds:0xc002cfe8,al
c001565c:	a0 e8 cf 02 c0       	mov    al,ds:0xc002cfe8
c0015661:	0f b6 c0             	movzx  eax,al
c0015664:	83 ec 0c             	sub    esp,0xc
c0015667:	50                   	push   eax
c0015668:	e8 57 ab ff ff       	call   c00101c4 <setTerminalScrollLock(bool)>
c001566d:	83 c4 10             	add    esp,0x10
c0015670:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015673:	84 c0                	test   al,al
c0015675:	0f 84 ae 00 00 00    	je     c0015729 <sendKeyboardToken(KeyboardToken)+0x10d>
c001567b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567e:	66 3d 10 03          	cmp    ax,0x310
c0015682:	75 06                	jne    c001568a <sendKeyboardToken(KeyboardToken)+0x6e>
c0015684:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001568a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568d:	66 3d 11 03          	cmp    ax,0x311
c0015691:	75 06                	jne    c0015699 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015693:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569c:	66 3d 12 03          	cmp    ax,0x312
c00156a0:	75 06                	jne    c00156a8 <sendKeyboardToken(KeyboardToken)+0x8c>
c00156a2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00156a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ab:	66 3d 13 03          	cmp    ax,0x313
c00156af:	75 06                	jne    c00156b7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00156b1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00156b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ba:	66 3d 14 03          	cmp    ax,0x314
c00156be:	75 06                	jne    c00156c6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00156c0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00156c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c9:	66 3d 15 03          	cmp    ax,0x315
c00156cd:	75 06                	jne    c00156d5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00156cf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d8:	66 3d 16 03          	cmp    ax,0x316
c00156dc:	75 06                	jne    c00156e4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00156de:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00156e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e7:	66 3d 17 03          	cmp    ax,0x317
c00156eb:	75 06                	jne    c00156f3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00156ed:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	66 3d 18 03          	cmp    ax,0x318
c00156fa:	75 06                	jne    c0015702 <sendKeyboardToken(KeyboardToken)+0xe6>
c00156fc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	66 3d 19 03          	cmp    ax,0x319
c0015709:	75 06                	jne    c0015711 <sendKeyboardToken(KeyboardToken)+0xf5>
c001570b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015714:	66 3d 1a 03          	cmp    ax,0x31a
c0015718:	0f 85 c9 00 00 00    	jne    c00157e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001571e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015724:	e9 be 00 00 00       	jmp    c00157e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	66 3d 10 03          	cmp    ax,0x310
c0015730:	75 0a                	jne    c001573c <sendKeyboardToken(KeyboardToken)+0x120>
c0015732:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015738:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	66 3d 11 03          	cmp    ax,0x311
c0015743:	75 0a                	jne    c001574f <sendKeyboardToken(KeyboardToken)+0x133>
c0015745:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001574b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001574f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015752:	66 3d 12 03          	cmp    ax,0x312
c0015756:	75 0a                	jne    c0015762 <sendKeyboardToken(KeyboardToken)+0x146>
c0015758:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001575e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015765:	66 3d 13 03          	cmp    ax,0x313
c0015769:	75 0a                	jne    c0015775 <sendKeyboardToken(KeyboardToken)+0x159>
c001576b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015771:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015778:	66 3d 14 03          	cmp    ax,0x314
c001577c:	75 0a                	jne    c0015788 <sendKeyboardToken(KeyboardToken)+0x16c>
c001577e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015784:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	66 3d 15 03          	cmp    ax,0x315
c001578f:	75 0a                	jne    c001579b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015791:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015797:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001579b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579e:	66 3d 16 03          	cmp    ax,0x316
c00157a2:	75 0a                	jne    c00157ae <sendKeyboardToken(KeyboardToken)+0x192>
c00157a4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00157aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	66 3d 17 03          	cmp    ax,0x317
c00157b5:	75 0a                	jne    c00157c1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00157b7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00157bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c4:	66 3d 18 03          	cmp    ax,0x318
c00157c8:	75 0a                	jne    c00157d4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00157ca:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00157d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d7:	66 3d 19 03          	cmp    ax,0x319
c00157db:	75 0a                	jne    c00157e7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00157dd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00157e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	66 3d 00 02          	cmp    ax,0x200
c00157ee:	75 2c                	jne    c001581c <sendKeyboardToken(KeyboardToken)+0x200>
c00157f0:	a0 e0 cf 02 c0       	mov    al,ds:0xc002cfe0
c00157f5:	83 f0 01             	xor    eax,0x1
c00157f8:	84 c0                	test   al,al
c00157fa:	74 20                	je     c001581c <sendKeyboardToken(KeyboardToken)+0x200>
c00157fc:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0015801:	6a 01                	push   0x1
c0015803:	6a 00                	push   0x0
c0015805:	68 f8 54 01 c0       	push   0xc00154f8
c001580a:	50                   	push   eax
c001580b:	e8 f8 76 00 00       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	c6 05 e0 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cfe0,0x1
c001581a:	eb 33                	jmp    c001584f <sendKeyboardToken(KeyboardToken)+0x233>
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	66 3d 01 02          	cmp    ax,0x201
c0015823:	75 2a                	jne    c001584f <sendKeyboardToken(KeyboardToken)+0x233>
c0015825:	a0 e0 cf 02 c0       	mov    al,ds:0xc002cfe0
c001582a:	83 f0 01             	xor    eax,0x1
c001582d:	84 c0                	test   al,al
c001582f:	74 1e                	je     c001584f <sendKeyboardToken(KeyboardToken)+0x233>
c0015831:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0015836:	6a 01                	push   0x1
c0015838:	6a 00                	push   0x0
c001583a:	68 54 55 01 c0       	push   0xc0015554
c001583f:	50                   	push   eax
c0015840:	e8 c3 76 00 00       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	c6 05 e0 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cfe0,0x1
c001584f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015852:	66 3d 1d 03          	cmp    ax,0x31d
c0015856:	75 06                	jne    c001585e <sendKeyboardToken(KeyboardToken)+0x242>
c0015858:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	66 3d 1c 03          	cmp    ax,0x31c
c0015865:	75 06                	jne    c001586d <sendKeyboardToken(KeyboardToken)+0x251>
c0015867:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	66 3d 1b 03          	cmp    ax,0x31b
c0015874:	75 06                	jne    c001587c <sendKeyboardToken(KeyboardToken)+0x260>
c0015876:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	66 3d 1e 03          	cmp    ax,0x31e
c0015883:	75 06                	jne    c001588b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015885:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001588b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588e:	66 3d 1f 03          	cmp    ax,0x31f
c0015892:	75 06                	jne    c001589a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015894:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	66 3d 1a 03          	cmp    ax,0x31a
c00158a1:	75 06                	jne    c00158a9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00158a3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00158a9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00158ad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158b0:	83 f0 01             	xor    eax,0x1
c00158b3:	84 c0                	test   al,al
c00158b5:	74 77                	je     c001592e <sendKeyboardToken(KeyboardToken)+0x312>
c00158b7:	a0 e1 cc 02 c0       	mov    al,ds:0xc002cce1
c00158bc:	84 c0                	test   al,al
c00158be:	74 41                	je     c0015901 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00158c0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158c4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00158c8:	74 2b                	je     c00158f5 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00158ca:	8b 15 e4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfe4
c00158d0:	89 d0                	mov    eax,edx
c00158d2:	c1 e0 02             	shl    eax,0x2
c00158d5:	01 d0                	add    eax,edx
c00158d7:	01 c0                	add    eax,eax
c00158d9:	a3 e4 cf 02 c0       	mov    ds:0xc002cfe4,eax
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	0f b7 c0             	movzx  eax,ax
c00158e4:	8d 50 d0             	lea    edx,[eax-0x30]
c00158e7:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c00158ec:	01 d0                	add    eax,edx
c00158ee:	a3 e4 cf 02 c0       	mov    ds:0xc002cfe4,eax
c00158f3:	eb 6d                	jmp    c0015962 <sendKeyboardToken(KeyboardToken)+0x346>
c00158f5:	c7 05 e4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe4,0x0
c00158ff:	eb 61                	jmp    c0015962 <sendKeyboardToken(KeyboardToken)+0x346>
c0015901:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0015906:	85 c0                	test   eax,eax
c0015908:	74 18                	je     c0015922 <sendKeyboardToken(KeyboardToken)+0x306>
c001590a:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c001590f:	0f b6 c0             	movzx  eax,al
c0015912:	83 ec 0c             	sub    esp,0xc
c0015915:	50                   	push   eax
c0015916:	e8 95 fc ff ff       	call   c00155b0 <sendKeyToTerminal(unsigned char)>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015922:	c7 05 e4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe4,0x0
c001592c:	eb 34                	jmp    c0015962 <sendKeyboardToken(KeyboardToken)+0x346>
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	66 3d 01 01          	cmp    ax,0x101
c0015935:	75 2b                	jne    c0015962 <sendKeyboardToken(KeyboardToken)+0x346>
c0015937:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c001593c:	85 c0                	test   eax,eax
c001593e:	74 18                	je     c0015958 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015940:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0015945:	0f b6 c0             	movzx  eax,al
c0015948:	83 ec 0c             	sub    esp,0xc
c001594b:	50                   	push   eax
c001594c:	e8 5f fc ff ff       	call   c00155b0 <sendKeyToTerminal(unsigned char)>
c0015951:	83 c4 10             	add    esp,0x10
c0015954:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015958:	c7 05 e4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe4,0x0
c0015962:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015965:	83 f0 01             	xor    eax,0x1
c0015968:	84 c0                	test   al,al
c001596a:	74 4c                	je     c00159b8 <sendKeyboardToken(KeyboardToken)+0x39c>
c001596c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001596f:	83 f0 01             	xor    eax,0x1
c0015972:	84 c0                	test   al,al
c0015974:	74 42                	je     c00159b8 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015976:	a0 e0 cc 02 c0       	mov    al,ds:0xc002cce0
c001597b:	83 f0 01             	xor    eax,0x1
c001597e:	84 c0                	test   al,al
c0015980:	74 36                	je     c00159b8 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015985:	66 83 f8 1f          	cmp    ax,0x1f
c0015989:	76 09                	jbe    c0015994 <sendKeyboardToken(KeyboardToken)+0x378>
c001598b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598e:	66 83 f8 7e          	cmp    ax,0x7e
c0015992:	76 12                	jbe    c00159a6 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015997:	66 83 f8 0a          	cmp    ax,0xa
c001599b:	74 09                	je     c00159a6 <sendKeyboardToken(KeyboardToken)+0x38a>
c001599d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a0:	66 83 f8 08          	cmp    ax,0x8
c00159a4:	75 12                	jne    c00159b8 <sendKeyboardToken(KeyboardToken)+0x39c>
c00159a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a9:	0f b6 c0             	movzx  eax,al
c00159ac:	83 ec 0c             	sub    esp,0xc
c00159af:	50                   	push   eax
c00159b0:	e8 fb fb ff ff       	call   c00155b0 <sendKeyToTerminal(unsigned char)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159bb:	83 f0 01             	xor    eax,0x1
c00159be:	84 c0                	test   al,al
c00159c0:	74 4f                	je     c0015a11 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00159c2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159c5:	83 f0 01             	xor    eax,0x1
c00159c8:	84 c0                	test   al,al
c00159ca:	74 45                	je     c0015a11 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00159cc:	a0 e0 cc 02 c0       	mov    al,ds:0xc002cce0
c00159d1:	84 c0                	test   al,al
c00159d3:	74 3c                	je     c0015a11 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00159d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d8:	66 83 f8 3f          	cmp    ax,0x3f
c00159dc:	76 33                	jbe    c0015a11 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00159de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e1:	66 83 f8 7f          	cmp    ax,0x7f
c00159e5:	77 2a                	ja     c0015a11 <sendKeyboardToken(KeyboardToken)+0x3f5>
c00159e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ea:	88 c2                	mov    dl,al
c00159ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ef:	66 83 f8 5f          	cmp    ax,0x5f
c00159f3:	76 04                	jbe    c00159f9 <sendKeyboardToken(KeyboardToken)+0x3dd>
c00159f5:	b0 20                	mov    al,0x20
c00159f7:	eb 02                	jmp    c00159fb <sendKeyboardToken(KeyboardToken)+0x3df>
c00159f9:	b0 00                	mov    al,0x0
c00159fb:	29 c2                	sub    edx,eax
c00159fd:	88 d0                	mov    al,dl
c00159ff:	83 e8 40             	sub    eax,0x40
c0015a02:	0f b6 c0             	movzx  eax,al
c0015a05:	83 ec 0c             	sub    esp,0xc
c0015a08:	50                   	push   eax
c0015a09:	e8 a2 fb ff ff       	call   c00155b0 <sendKeyToTerminal(unsigned char)>
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a14:	66 3d 00 03          	cmp    ax,0x300
c0015a18:	75 0f                	jne    c0015a29 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015a1a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a1d:	83 f0 01             	xor    eax,0x1
c0015a20:	84 c0                	test   al,al
c0015a22:	74 05                	je     c0015a29 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015a24:	e8 78 b0 ff ff       	call   c0010aa1 <doTerminalCycle()>
c0015a29:	90                   	nop
c0015a2a:	c9                   	leave  
c0015a2b:	c3                   	ret    

c0015a2c <clearInternalKeybuffer(VgaText*)>:
c0015a2c:	55                   	push   ebp
c0015a2d:	89 e5                	mov    ebp,esp
c0015a2f:	83 ec 08             	sub    esp,0x8
c0015a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a35:	05 34 11 00 00       	add    eax,0x1134
c0015a3a:	83 ec 0c             	sub    esp,0xc
c0015a3d:	50                   	push   eax
c0015a3e:	e8 65 ac fe ff       	call   c00006a8 <strlen>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a49:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a4f:	83 ec 04             	sub    esp,0x4
c0015a52:	50                   	push   eax
c0015a53:	6a 00                	push   0x0
c0015a55:	52                   	push   edx
c0015a56:	e8 30 ac fe ff       	call   c000068b <memset>
c0015a5b:	83 c4 10             	add    esp,0x10
c0015a5e:	90                   	nop
c0015a5f:	c9                   	leave  
c0015a60:	c3                   	ret    

c0015a61 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015a61:	55                   	push   ebp
c0015a62:	89 e5                	mov    ebp,esp
c0015a64:	83 ec 18             	sub    esp,0x18
c0015a67:	fb                   	sti    
c0015a68:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015a6f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015a73:	0f 84 8a 00 00 00    	je     c0015b03 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a82:	84 c0                	test   al,al
c0015a84:	75 11                	jne    c0015a97 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015a86:	e8 4b 73 00 00       	call   c001cdd6 <lockScheduler()>
c0015a8b:	e8 82 76 00 00       	call   c001d112 <schedule()>
c0015a90:	e8 43 73 00 00       	call   c001cdd8 <unlockScheduler()>
c0015a95:	eb e2                	jmp    c0015a79 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015a97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a9a:	8d 50 01             	lea    edx,[eax+0x1]
c0015a9d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015aa0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015aa3:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015aa9:	88 10                	mov    BYTE PTR [eax],dl
c0015aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aae:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015ab4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aba:	05 34 11 00 00       	add    eax,0x1134
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	50                   	push   eax
c0015ac3:	e8 e0 ab fe ff       	call   c00006a8 <strlen>
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ace:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ad4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ad7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ada:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ae0:	83 ec 04             	sub    esp,0x4
c0015ae3:	50                   	push   eax
c0015ae4:	51                   	push   ecx
c0015ae5:	52                   	push   edx
c0015ae6:	e8 32 ab fe ff       	call   c000061d <memmove>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015af1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015af4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015af8:	0f 85 71 ff ff ff    	jne    c0015a6f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015afe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b01:	eb 03                	jmp    c0015b06 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	c9                   	leave  
c0015b07:	c3                   	ret    

c0015b08 <Keyboard::Keyboard(char const*)>:
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b0f:	83 ec 08             	sub    esp,0x8
c0015b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b16:	50                   	push   eax
c0015b17:	e8 f0 e2 ff ff       	call   c0013e0c <Device::Device(char const*)>
c0015b1c:	83 c4 10             	add    esp,0x10
c0015b1f:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c0015b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b28:	89 10                	mov    DWORD PTR [eax],edx
c0015b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015b38:	c6 05 c4 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cbc4,0x1
c0015b3f:	90                   	nop
c0015b40:	83 c4 0c             	add    esp,0xc
c0015b43:	c3                   	ret    

c0015b44 <Keyboard::~Keyboard()>:
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	ba d4 99 02 c0       	mov    edx,0xc00299d4
c0015b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b50:	89 10                	mov    DWORD PTR [eax],edx
c0015b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b56:	83 ec 0c             	sub    esp,0xc
c0015b59:	50                   	push   eax
c0015b5a:	e8 8f df ff ff       	call   c0013aee <Device::~Device()>
c0015b5f:	83 c4 10             	add    esp,0x10
c0015b62:	90                   	nop
c0015b63:	83 c4 0c             	add    esp,0xc
c0015b66:	c3                   	ret    
c0015b67:	90                   	nop

c0015b68 <Keyboard::~Keyboard()>:
c0015b68:	83 ec 0c             	sub    esp,0xc
c0015b6b:	83 ec 0c             	sub    esp,0xc
c0015b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b72:	e8 cd ff ff ff       	call   c0015b44 <Keyboard::~Keyboard()>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	83 ec 08             	sub    esp,0x8
c0015b7d:	68 5c 01 00 00       	push   0x15c
c0015b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b86:	e8 c2 cb ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	83 c4 0c             	add    esp,0xc
c0015b91:	c3                   	ret    

c0015b92 <LogicalDisk::close(int, int, void*)>:
c0015b92:	83 c8 ff             	or     eax,0xffffffff
c0015b95:	c3                   	ret    

c0015b96 <LogicalDisk::~LogicalDisk()>:
c0015b96:	83 ec 0c             	sub    esp,0xc
c0015b99:	ba 84 9a 02 c0       	mov    edx,0xc0029a84
c0015b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba2:	89 10                	mov    DWORD PTR [eax],edx
c0015ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	50                   	push   eax
c0015bac:	e8 3d df ff ff       	call   c0013aee <Device::~Device()>
c0015bb1:	83 c4 10             	add    esp,0x10
c0015bb4:	90                   	nop
c0015bb5:	83 c4 0c             	add    esp,0xc
c0015bb8:	c3                   	ret    
c0015bb9:	90                   	nop

c0015bba <LogicalDisk::~LogicalDisk()>:
c0015bba:	83 ec 0c             	sub    esp,0xc
c0015bbd:	83 ec 0c             	sub    esp,0xc
c0015bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bc4:	e8 cd ff ff ff       	call   c0015b96 <LogicalDisk::~LogicalDisk()>
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	83 ec 08             	sub    esp,0x8
c0015bcf:	68 74 01 00 00       	push   0x174
c0015bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bd8:	e8 70 cb ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	83 c4 0c             	add    esp,0xc
c0015be3:	c3                   	ret    

c0015be4 <LogicalDisk::open(int, int, void*)>:
c0015be4:	83 ec 18             	sub    esp,0x18
c0015be7:	68 00 9a 02 c0       	push   0xc0029a00
c0015bec:	e8 56 3d 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0015bf1:	83 c8 ff             	or     eax,0xffffffff
c0015bf4:	83 c4 1c             	add    esp,0x1c
c0015bf7:	c3                   	ret    

c0015bf8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015bf8:	53                   	push   ebx
c0015bf9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c05:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c0b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c11:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015c17:	77 10                	ja     c0015c29 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015c19:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015c1f:	89 d3                	mov    ebx,edx
c0015c21:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015c27:	72 05                	jb     c0015c2e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015c29:	83 c8 ff             	or     eax,0xffffffff
c0015c2c:	89 c2                	mov    edx,eax
c0015c2e:	5b                   	pop    ebx
c0015c2f:	c3                   	ret    

c0015c30 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015c30:	56                   	push   esi
c0015c31:	83 c8 ff             	or     eax,0xffffffff
c0015c34:	53                   	push   ebx
c0015c35:	89 c2                	mov    edx,eax
c0015c37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015c3b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015c3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c43:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c49:	77 27                	ja     c0015c72 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c4b:	89 d8                	mov    eax,ebx
c0015c4d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015c53:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015c59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c5e:	89 c2                	mov    edx,eax
c0015c60:	73 10                	jae    c0015c72 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c62:	89 c8                	mov    eax,ecx
c0015c64:	89 da                	mov    edx,ebx
c0015c66:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c6c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c72:	5b                   	pop    ebx
c0015c73:	5e                   	pop    esi
c0015c74:	c3                   	ret    
c0015c75:	90                   	nop

c0015c76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c76:	83 ec 1c             	sub    esp,0x1c
c0015c79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c9c:	83 ec 08             	sub    esp,0x8
c0015c9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca3:	50                   	push   eax
c0015ca4:	e8 63 e1 ff ff       	call   c0013e0c <Device::Device(char const*)>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	ba 84 9a 02 c0       	mov    edx,0xc0029a84
c0015cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb5:	89 10                	mov    DWORD PTR [eax],edx
c0015cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cbb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015cdb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015cdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ce3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ce7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ced:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015cf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015cf7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015cfa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cfe:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d04:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d12:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d26:	90                   	nop
c0015d27:	83 c4 1c             	add    esp,0x1c
c0015d2a:	c3                   	ret    
c0015d2b:	90                   	nop

c0015d2c <LogicalDisk::assignDriveLetter()>:
c0015d2c:	55                   	push   ebp
c0015d2d:	57                   	push   edi
c0015d2e:	56                   	push   esi
c0015d2f:	53                   	push   ebx
c0015d30:	83 ec 14             	sub    esp,0x14
c0015d33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d37:	8b 3d 00 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d000
c0015d3d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015d43:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015d47:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015d4d:	8b 3d 04 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d004
c0015d53:	3c 01                	cmp    al,0x1
c0015d55:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015d59:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015d5d:	19 c0                	sbb    eax,eax
c0015d5f:	83 e0 02             	and    eax,0x2
c0015d62:	83 c0 41             	add    eax,0x41
c0015d65:	0f be e8             	movsx  ebp,al
c0015d68:	3c 43                	cmp    al,0x43
c0015d6a:	75 10                	jne    c0015d7c <LogicalDisk::assignDriveLetter()+0x50>
c0015d6c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d73:	75 5d                	jne    c0015dd2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d75:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d7a:	75 56                	jne    c0015dd2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d7c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d7f:	ba 01 00 00 00       	mov    edx,0x1
c0015d84:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d88:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d8c:	d3 e2                	shl    edx,cl
c0015d8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d92:	89 d7                	mov    edi,edx
c0015d94:	89 d6                	mov    esi,edx
c0015d96:	c1 ff 1f             	sar    edi,0x1f
c0015d99:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d9d:	21 f9                	and    ecx,edi
c0015d9f:	09 d1                	or     ecx,edx
c0015da1:	75 2f                	jne    c0015dd2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015da3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015da7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015dab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015db1:	09 f2                	or     edx,esi
c0015db3:	89 15 00 d0 02 c0    	mov    DWORD PTR ds:0xc002d000,edx
c0015db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dbd:	09 fa                	or     edx,edi
c0015dbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015dc3:	89 15 04 d0 02 c0    	mov    DWORD PTR ds:0xc002d004,edx
c0015dc9:	89 1c bd 20 d0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2fe0],ebx
c0015dd0:	eb 08                	jmp    c0015dda <LogicalDisk::assignDriveLetter()+0xae>
c0015dd2:	45                   	inc    ebp
c0015dd3:	40                   	inc    eax
c0015dd4:	3c 5b                	cmp    al,0x5b
c0015dd6:	75 90                	jne    c0015d68 <LogicalDisk::assignDriveLetter()+0x3c>
c0015dd8:	31 c0                	xor    eax,eax
c0015dda:	83 c4 14             	add    esp,0x14
c0015ddd:	5b                   	pop    ebx
c0015dde:	5e                   	pop    esi
c0015ddf:	5f                   	pop    edi
c0015de0:	5d                   	pop    ebp
c0015de1:	c3                   	ret    

c0015de2 <LogicalDisk::mount()>:
c0015de2:	56                   	push   esi
c0015de3:	53                   	push   ebx
c0015de4:	51                   	push   ecx
c0015de5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015de9:	8b 1d 88 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb88
c0015def:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015df9:	85 db                	test   ebx,ebx
c0015dfb:	74 50                	je     c0015e4d <LogicalDisk::mount()+0x6b>
c0015dfd:	e8 bf 6f 00 00       	call   c001cdc1 <getIRQNestingLevel()>
c0015e02:	52                   	push   edx
c0015e03:	52                   	push   edx
c0015e04:	50                   	push   eax
c0015e05:	68 24 9a 02 c0       	push   0xc0029a24
c0015e0a:	e8 1e ca ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0015e0f:	83 c4 0c             	add    esp,0xc
c0015e12:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e19:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e1b:	83 e8 41             	sub    eax,0x41
c0015e1e:	50                   	push   eax
c0015e1f:	56                   	push   esi
c0015e20:	53                   	push   ebx
c0015e21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	84 c0                	test   al,al
c0015e29:	74 08                	je     c0015e33 <LogicalDisk::mount()+0x51>
c0015e2b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015e31:	eb 1c                	jmp    c0015e4f <LogicalDisk::mount()+0x6d>
c0015e33:	e8 89 6f 00 00       	call   c001cdc1 <getIRQNestingLevel()>
c0015e38:	51                   	push   ecx
c0015e39:	51                   	push   ecx
c0015e3a:	50                   	push   eax
c0015e3b:	68 3f 9a 02 c0       	push   0xc0029a3f
c0015e40:	e8 e8 c9 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0015e45:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e48:	83 c4 10             	add    esp,0x10
c0015e4b:	eb ac                	jmp    c0015df9 <LogicalDisk::mount()+0x17>
c0015e4d:	31 c0                	xor    eax,eax
c0015e4f:	5a                   	pop    edx
c0015e50:	5b                   	pop    ebx
c0015e51:	5e                   	pop    esi
c0015e52:	c3                   	ret    
c0015e53:	90                   	nop

c0015e54 <LogicalDisk::unmount()>:
c0015e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e58:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e62:	c3                   	ret    
c0015e63:	90                   	nop

c0015e64 <LogicalDisk::unassignDriveLetter()>:
c0015e64:	57                   	push   edi
c0015e65:	56                   	push   esi
c0015e66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015e71:	84 c9                	test   cl,cl
c0015e73:	75 0f                	jne    c0015e84 <LogicalDisk::unassignDriveLetter()+0x20>
c0015e75:	c7 44 24 0c 5a 9a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029a5a
c0015e7d:	5e                   	pop    esi
c0015e7e:	5f                   	pop    edi
c0015e7f:	e9 c3 3a 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c0015e84:	83 e9 41             	sub    ecx,0x41
c0015e87:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e8e:	b8 01 00 00 00       	mov    eax,0x1
c0015e93:	c7 04 8d 20 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2fe0],0x0
c0015e9e:	d3 e0                	shl    eax,cl
c0015ea0:	89 c7                	mov    edi,eax
c0015ea2:	f7 d0                	not    eax
c0015ea4:	c1 ff 1f             	sar    edi,0x1f
c0015ea7:	21 05 00 d0 02 c0    	and    DWORD PTR ds:0xc002d000,eax
c0015ead:	89 fe                	mov    esi,edi
c0015eaf:	f7 d6                	not    esi
c0015eb1:	21 35 04 d0 02 c0    	and    DWORD PTR ds:0xc002d004,esi
c0015eb7:	5e                   	pop    esi
c0015eb8:	5f                   	pop    edi
c0015eb9:	c3                   	ret    

c0015eba <LogicalDisk::read(unsigned long long, int, void*)>:
c0015eba:	57                   	push   edi
c0015ebb:	56                   	push   esi
c0015ebc:	53                   	push   ebx
c0015ebd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ec1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ecd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ed3:	77 41                	ja     c0015f16 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015ed5:	99                   	cdq    
c0015ed6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015edc:	01 c8                	add    eax,ecx
c0015ede:	11 da                	adc    edx,ebx
c0015ee0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ee6:	19 d7                	sbb    edi,edx
c0015ee8:	72 33                	jb     c0015f1d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015eea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ef0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ef6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015efa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015efe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f0e:	5b                   	pop    ebx
c0015f0f:	5e                   	pop    esi
c0015f10:	5f                   	pop    edi
c0015f11:	e9 f8 09 00 00       	jmp    c001690e <VCache::read(unsigned long long, int, void*)>
c0015f16:	b8 05 00 00 00       	mov    eax,0x5
c0015f1b:	eb 05                	jmp    c0015f22 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f1d:	b8 07 00 00 00       	mov    eax,0x7
c0015f22:	5b                   	pop    ebx
c0015f23:	5e                   	pop    esi
c0015f24:	5f                   	pop    edi
c0015f25:	c3                   	ret    

c0015f26 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f26:	57                   	push   edi
c0015f27:	56                   	push   esi
c0015f28:	53                   	push   ebx
c0015f29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f3f:	77 41                	ja     c0015f82 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015f41:	99                   	cdq    
c0015f42:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f48:	01 c8                	add    eax,ecx
c0015f4a:	11 da                	adc    edx,ebx
c0015f4c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f52:	19 d7                	sbb    edi,edx
c0015f54:	72 33                	jb     c0015f89 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015f56:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f5c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f62:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f66:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f6a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f7a:	5b                   	pop    ebx
c0015f7b:	5e                   	pop    esi
c0015f7c:	5f                   	pop    edi
c0015f7d:	e9 a8 08 00 00       	jmp    c001682a <VCache::write(unsigned long long, int, void*)>
c0015f82:	b8 05 00 00 00       	mov    eax,0x5
c0015f87:	eb 05                	jmp    c0015f8e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f89:	b8 07 00 00 00       	mov    eax,0x7
c0015f8e:	5b                   	pop    ebx
c0015f8f:	5e                   	pop    esi
c0015f90:	5f                   	pop    edi
c0015f91:	c3                   	ret    

c0015f92 <Mouse::Mouse(char const*)>:
c0015f92:	83 ec 0c             	sub    esp,0xc
c0015f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f99:	83 ec 08             	sub    esp,0x8
c0015f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fa0:	50                   	push   eax
c0015fa1:	e8 66 de ff ff       	call   c0013e0c <Device::Device(char const*)>
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	ba b0 9a 02 c0       	mov    edx,0xc0029ab0
c0015fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb2:	89 10                	mov    DWORD PTR [eax],edx
c0015fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015fc2:	90                   	nop
c0015fc3:	83 c4 0c             	add    esp,0xc
c0015fc6:	c3                   	ret    
c0015fc7:	90                   	nop

c0015fc8 <Mouse::~Mouse()>:
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	ba b0 9a 02 c0       	mov    edx,0xc0029ab0
c0015fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd4:	89 10                	mov    DWORD PTR [eax],edx
c0015fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fda:	83 ec 0c             	sub    esp,0xc
c0015fdd:	50                   	push   eax
c0015fde:	e8 0b db ff ff       	call   c0013aee <Device::~Device()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	90                   	nop
c0015fe7:	83 c4 0c             	add    esp,0xc
c0015fea:	c3                   	ret    
c0015feb:	90                   	nop

c0015fec <Mouse::~Mouse()>:
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	83 ec 0c             	sub    esp,0xc
c0015ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff6:	e8 cd ff ff ff       	call   c0015fc8 <Mouse::~Mouse()>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	83 ec 08             	sub    esp,0x8
c0016001:	68 58 01 00 00       	push   0x158
c0016006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001600a:	e8 3e c7 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c001600f:	83 c4 10             	add    esp,0x10
c0016012:	83 c4 0c             	add    esp,0xc
c0016015:	c3                   	ret    

c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016016:	55                   	push   ebp
c0016017:	57                   	push   edi
c0016018:	56                   	push   esi
c0016019:	53                   	push   ebx
c001601a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016020:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016027:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001602e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016035:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001603c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016040:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016044:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001604b:	e8 b8 de ff ff       	call   c0013f08 <Device::getName()>
c0016050:	5a                   	pop    edx
c0016051:	59                   	pop    ecx
c0016052:	50                   	push   eax
c0016053:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016057:	55                   	push   ebp
c0016058:	e8 cd a6 fe ff       	call   c000072a <strcpy>
c001605d:	5b                   	pop    ebx
c001605e:	58                   	pop    eax
c001605f:	68 d4 9a 02 c0       	push   0xc0029ad4
c0016064:	55                   	push   ebp
c0016065:	e8 77 a7 fe ff       	call   c00007e1 <strcat>
c001606a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016071:	e8 5e 94 ff ff       	call   c000f4d4 <malloc>
c0016076:	83 c4 0c             	add    esp,0xc
c0016079:	89 c3                	mov    ebx,eax
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016081:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016085:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001608c:	55                   	push   ebp
c001608d:	50                   	push   eax
c001608e:	e8 e3 fb ff ff       	call   c0015c76 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016093:	83 c4 14             	add    esp,0x14
c0016096:	53                   	push   ebx
c0016097:	e8 90 fc ff ff       	call   c0015d2c <LogicalDisk::assignDriveLetter()>
c001609c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001609f:	e8 3e fd ff ff       	call   c0015de2 <LogicalDisk::mount()>
c00160a4:	58                   	pop    eax
c00160a5:	5a                   	pop    edx
c00160a6:	53                   	push   ebx
c00160a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160ae:	e8 69 db ff ff       	call   c0013c1c <Device::addChild(Device*)>
c00160b3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00160b9:	5b                   	pop    ebx
c00160ba:	5e                   	pop    esi
c00160bb:	5f                   	pop    edi
c00160bc:	5d                   	pop    ebp
c00160bd:	c3                   	ret    

c00160be <createPartitionsForDisk(PhysicalDisk*)>:
c00160be:	55                   	push   ebp
c00160bf:	57                   	push   edi
c00160c0:	56                   	push   esi
c00160c1:	53                   	push   ebx
c00160c2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00160c8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00160cf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00160d5:	3d 00 02 00 00       	cmp    eax,0x200
c00160da:	74 27                	je     c0016103 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00160dc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00160e2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00160e8:	83 ec 10             	sub    esp,0x10
c00160eb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00160ef:	99                   	cdq    
c00160f0:	c1 e6 0a             	shl    esi,0xa
c00160f3:	52                   	push   edx
c00160f4:	89 fd                	mov    ebp,edi
c00160f6:	50                   	push   eax
c00160f7:	55                   	push   ebp
c00160f8:	56                   	push   esi
c00160f9:	e8 5e f3 00 00       	call   c002545c <__udivdi3>
c00160fe:	e9 b1 00 00 00       	jmp    c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016103:	83 ec 0c             	sub    esp,0xc
c0016106:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016108:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001610c:	56                   	push   esi
c001610d:	6a 01                	push   0x1
c001610f:	6a 00                	push   0x0
c0016111:	6a 00                	push   0x0
c0016113:	53                   	push   ebx
c0016114:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016117:	83 c4 20             	add    esp,0x20
c001611a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016122:	75 0a                	jne    c001612e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016124:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001612c:	74 2c                	je     c001615a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001612e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016134:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001613a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016140:	83 ec 10             	sub    esp,0x10
c0016143:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016147:	89 f7                	mov    edi,esi
c0016149:	c1 e0 0a             	shl    eax,0xa
c001614c:	c1 ff 1f             	sar    edi,0x1f
c001614f:	57                   	push   edi
c0016150:	56                   	push   esi
c0016151:	52                   	push   edx
c0016152:	50                   	push   eax
c0016153:	e8 04 f3 00 00       	call   c002545c <__udivdi3>
c0016158:	eb 5a                	jmp    c00161b4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001615a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016161:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016168:	83 e1 7f             	and    ecx,0x7f
c001616b:	83 e0 7f             	and    eax,0x7f
c001616e:	01 c1                	add    ecx,eax
c0016170:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016177:	83 e0 7f             	and    eax,0x7f
c001617a:	01 c1                	add    ecx,eax
c001617c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016183:	83 e0 7f             	and    eax,0x7f
c0016186:	00 c1                	add    cl,al
c0016188:	74 41                	je     c00161cb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001618a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016190:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016196:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001619c:	83 ec 10             	sub    esp,0x10
c001619f:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161a3:	89 f7                	mov    edi,esi
c00161a5:	c1 e0 0a             	shl    eax,0xa
c00161a8:	c1 ff 1f             	sar    edi,0x1f
c00161ab:	57                   	push   edi
c00161ac:	56                   	push   esi
c00161ad:	52                   	push   edx
c00161ae:	50                   	push   eax
c00161af:	e8 a8 f2 00 00       	call   c002545c <__udivdi3>
c00161b4:	83 c4 14             	add    esp,0x14
c00161b7:	52                   	push   edx
c00161b8:	50                   	push   eax
c00161b9:	6a 00                	push   0x0
c00161bb:	6a 00                	push   0x0
c00161bd:	53                   	push   ebx
c00161be:	e8 53 fe ff ff       	call   c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00161c3:	83 c4 20             	add    esp,0x20
c00161c6:	e9 79 01 00 00       	jmp    c0016344 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00161cb:	89 f0                	mov    eax,esi
c00161cd:	31 f6                	xor    esi,esi
c00161cf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00161d6:	75 02                	jne    c00161da <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00161d8:	89 f1                	mov    ecx,esi
c00161da:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00161e1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00161e8:	c1 e2 08             	shl    edx,0x8
c00161eb:	c1 e7 10             	shl    edi,0x10
c00161ee:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00161f6:	09 fa                	or     edx,edi
c00161f8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016200:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016207:	83 c0 10             	add    eax,0x10
c001620a:	09 fa                	or     edx,edi
c001620c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016213:	c1 e7 18             	shl    edi,0x18
c0016216:	09 fa                	or     edx,edi
c0016218:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001621f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016223:	c1 e7 10             	shl    edi,0x10
c0016226:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001622d:	c1 e2 08             	shl    edx,0x8
c0016230:	09 fa                	or     edx,edi
c0016232:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016239:	09 fa                	or     edx,edi
c001623b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016242:	c1 e7 18             	shl    edi,0x18
c0016245:	09 fa                	or     edx,edi
c0016247:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001624b:	46                   	inc    esi
c001624c:	83 fe 04             	cmp    esi,0x4
c001624f:	0f 85 7a ff ff ff    	jne    c00161cf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016259:	83 f0 01             	xor    eax,0x1
c001625c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016260:	75 57                	jne    c00162b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016266:	83 f0 01             	xor    eax,0x1
c0016269:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001626d:	75 4a                	jne    c00162b9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001626f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016273:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001627b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016283:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016289:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001628f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016295:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016299:	89 f7                	mov    edi,esi
c001629b:	c1 e0 0a             	shl    eax,0xa
c001629e:	c1 ff 1f             	sar    edi,0x1f
c00162a1:	57                   	push   edi
c00162a2:	56                   	push   esi
c00162a3:	52                   	push   edx
c00162a4:	50                   	push   eax
c00162a5:	e8 b2 f1 00 00       	call   c002545c <__udivdi3>
c00162aa:	83 c4 10             	add    esp,0x10
c00162ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00162b5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00162b9:	84 c9                	test   cl,cl
c00162bb:	74 53                	je     c0016310 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00162bd:	0f b6 c9             	movzx  ecx,cl
c00162c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00162c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162cc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00162d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162d8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00162dc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00162e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00162e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162f0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00162f4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00162f8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00162fc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016300:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016304:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016308:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001630c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016310:	31 ed                	xor    ebp,ebp
c0016312:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016316:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001631a:	89 f8                	mov    eax,edi
c001631c:	09 f0                	or     eax,esi
c001631e:	74 1e                	je     c001633e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016320:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016324:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016328:	89 d1                	mov    ecx,edx
c001632a:	09 c1                	or     ecx,eax
c001632c:	74 10                	je     c001633e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001632e:	83 ec 0c             	sub    esp,0xc
c0016331:	57                   	push   edi
c0016332:	56                   	push   esi
c0016333:	52                   	push   edx
c0016334:	50                   	push   eax
c0016335:	53                   	push   ebx
c0016336:	e8 db fc ff ff       	call   c0016016 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001633b:	83 c4 20             	add    esp,0x20
c001633e:	45                   	inc    ebp
c001633f:	83 fd 04             	cmp    ebp,0x4
c0016342:	75 ce                	jne    c0016312 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016344:	81 c4 5c 02 00 00    	add    esp,0x25c
c001634a:	5b                   	pop    ebx
c001634b:	5e                   	pop    esi
c001634c:	5f                   	pop    edi
c001634d:	5d                   	pop    ebp
c001634e:	c3                   	ret    
c001634f:	90                   	nop

c0016350 <Serial::Serial(char const*)>:
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016357:	83 ec 08             	sub    esp,0x8
c001635a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635e:	50                   	push   eax
c001635f:	e8 a8 da ff ff       	call   c0013e0c <Device::Device(char const*)>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	ba e8 9a 02 c0       	mov    edx,0xc0029ae8
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	89 10                	mov    DWORD PTR [eax],edx
c0016372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016376:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016380:	90                   	nop
c0016381:	83 c4 0c             	add    esp,0xc
c0016384:	c3                   	ret    
c0016385:	90                   	nop

c0016386 <Serial::~Serial()>:
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	ba e8 9a 02 c0       	mov    edx,0xc0029ae8
c001638e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016392:	89 10                	mov    DWORD PTR [eax],edx
c0016394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	50                   	push   eax
c001639c:	e8 4d d7 ff ff       	call   c0013aee <Device::~Device()>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	90                   	nop
c00163a5:	83 c4 0c             	add    esp,0xc
c00163a8:	c3                   	ret    
c00163a9:	90                   	nop

c00163aa <Serial::~Serial()>:
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	83 ec 0c             	sub    esp,0xc
c00163b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b4:	e8 cd ff ff ff       	call   c0016386 <Serial::~Serial()>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	83 ec 08             	sub    esp,0x8
c00163bf:	68 58 01 00 00       	push   0x158
c00163c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c8:	e8 80 c3 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	83 c4 0c             	add    esp,0xc
c00163d3:	c3                   	ret    

c00163d4 <Timer::Timer(char const*)>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163db:	83 ec 08             	sub    esp,0x8
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	50                   	push   eax
c00163e3:	e8 24 da ff ff       	call   c0013e0c <Device::Device(char const*)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	ba 2c 9b 02 c0       	mov    edx,0xc0029b2c
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	89 10                	mov    DWORD PTR [eax],edx
c00163f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fa:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016404:	90                   	nop
c0016405:	83 c4 0c             	add    esp,0xc
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <Timer::~Timer()>:
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	ba 2c 9b 02 c0       	mov    edx,0xc0029b2c
c0016412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016416:	89 10                	mov    DWORD PTR [eax],edx
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	50                   	push   eax
c0016420:	e8 c9 d6 ff ff       	call   c0013aee <Device::~Device()>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	90                   	nop
c0016429:	83 c4 0c             	add    esp,0xc
c001642c:	c3                   	ret    
c001642d:	90                   	nop

c001642e <Timer::~Timer()>:
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016438:	e8 cd ff ff ff       	call   c001640a <Timer::~Timer()>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	83 ec 08             	sub    esp,0x8
c0016443:	68 5c 01 00 00       	push   0x15c
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 fc c2 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 c4 0c             	add    esp,0xc
c0016457:	c3                   	ret    

c0016458 <Timer::read()>:
c0016458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001645c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016462:	c3                   	ret    

c0016463 <timerHandler(unsigned long long)>:
c0016463:	55                   	push   ebp
c0016464:	57                   	push   edi
c0016465:	56                   	push   esi
c0016466:	53                   	push   ebx
c0016467:	83 ec 0c             	sub    esp,0xc
c001646a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001646e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016472:	01 35 90 d0 02 c0    	add    DWORD PTR ds:0xc002d090,esi
c0016478:	11 3d 94 d0 02 c0    	adc    DWORD PTR ds:0xc002d094,edi
c001647e:	80 3d 0d ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca0d,0x0
c0016485:	0f 84 07 01 00 00    	je     c0016592 <timerHandler(unsigned long long)+0x12f>
c001648b:	e8 6d 69 00 00       	call   c001cdfd <lockStuff()>
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	68 3c df 02 c0       	push   0xc002df3c
c0016498:	e8 31 10 01 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001649d:	c7 04 24 3c df 02 c0 	mov    DWORD PTR [esp],0xc002df3c
c00164a4:	89 c3                	mov    ebx,eax
c00164a6:	e8 2b 10 01 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	84 c0                	test   al,al
c00164b0:	74 60                	je     c0016512 <timerHandler(unsigned long long)+0xaf>
c00164b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164b8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00164bb:	85 c0                	test   eax,eax
c00164bd:	0f 85 91 00 00 00    	jne    c0016554 <timerHandler(unsigned long long)+0xf1>
c00164c3:	e9 be 00 00 00       	jmp    c0016586 <timerHandler(unsigned long long)+0x123>
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	55                   	push   ebp
c00164cc:	e8 1d 6f 00 00       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	39 eb                	cmp    ebx,ebp
c00164d6:	75 12                	jne    c00164ea <timerHandler(unsigned long long)+0x87>
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	68 3c df 02 c0       	push   0xc002df3c
c00164e0:	e8 e9 0f 01 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e5:	89 c3                	mov    ebx,eax
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	68 3c df 02 c0       	push   0xc002df3c
c00164f2:	e8 df 0f 01 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	84 c0                	test   al,al
c00164fc:	75 b4                	jne    c00164b2 <timerHandler(unsigned long long)+0x4f>
c00164fe:	83 ec 0c             	sub    esp,0xc
c0016501:	68 3c df 02 c0       	push   0xc002df3c
c0016506:	e8 c3 0f 01 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	39 d8                	cmp    eax,ebx
c0016510:	74 a0                	je     c00164b2 <timerHandler(unsigned long long)+0x4f>
c0016512:	83 ec 0c             	sub    esp,0xc
c0016515:	68 3c df 02 c0       	push   0xc002df3c
c001651a:	e8 af 0f 01 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001651f:	c7 04 24 3c df 02 c0 	mov    DWORD PTR [esp],0xc002df3c
c0016526:	89 c5                	mov    ebp,eax
c0016528:	e8 c5 0f 01 00       	call   c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001652d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016536:	39 15 90 d0 02 c0    	cmp    DWORD PTR ds:0xc002d090,edx
c001653c:	a1 94 d0 02 c0       	mov    eax,ds:0xc002d094
c0016541:	19 c8                	sbb    eax,ecx
c0016543:	73 83                	jae    c00164c8 <timerHandler(unsigned long long)+0x65>
c0016545:	50                   	push   eax
c0016546:	50                   	push   eax
c0016547:	55                   	push   ebp
c0016548:	68 3c df 02 c0       	push   0xc002df3c
c001654d:	e8 4e 10 01 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016552:	eb 93                	jmp    c00164e7 <timerHandler(unsigned long long)+0x84>
c0016554:	80 3d 0c ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca0c,0x0
c001655b:	74 29                	je     c0016586 <timerHandler(unsigned long long)+0x123>
c001655d:	39 c6                	cmp    esi,eax
c001655f:	bb 00 00 00 00       	mov    ebx,0x0
c0016564:	19 df                	sbb    edi,ebx
c0016566:	72 19                	jb     c0016581 <timerHandler(unsigned long long)+0x11e>
c0016568:	e8 69 68 00 00       	call   c001cdd6 <lockScheduler()>
c001656d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016572:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016575:	e8 98 6b 00 00       	call   c001d112 <schedule()>
c001657a:	e8 59 68 00 00       	call   c001cdd8 <unlockScheduler()>
c001657f:	eb 05                	jmp    c0016586 <timerHandler(unsigned long long)+0x123>
c0016581:	29 f0                	sub    eax,esi
c0016583:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016586:	83 c4 0c             	add    esp,0xc
c0016589:	5b                   	pop    ebx
c001658a:	5e                   	pop    esi
c001658b:	5f                   	pop    edi
c001658c:	5d                   	pop    ebp
c001658d:	e9 05 6c 00 00       	jmp    c001d197 <unlockStuff()>
c0016592:	83 c4 0c             	add    esp,0xc
c0016595:	5b                   	pop    ebx
c0016596:	5e                   	pop    esi
c0016597:	5f                   	pop    edi
c0016598:	5d                   	pop    ebp
c0016599:	c3                   	ret    

c001659a <setupTimer(int)>:
c001659a:	57                   	push   edi
c001659b:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00165a0:	56                   	push   esi
c00165a1:	53                   	push   ebx
c00165a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165b5:	e8 4e d9 ff ff       	call   c0013f08 <Device::getName()>
c00165ba:	83 c4 10             	add    esp,0x10
c00165bd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00165c0:	0f 85 8d 00 00 00    	jne    c0016653 <setupTimer(int)+0xb9>
c00165c6:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00165cb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00165d2:	74 7f                	je     c0016653 <setupTimer(int)+0xb9>
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	68 5c 01 00 00       	push   0x15c
c00165dc:	e8 f3 8e ff ff       	call   c000f4d4 <malloc>
c00165e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00165e4:	89 c3                	mov    ebx,eax
c00165e6:	e8 51 ea 00 00       	call   c002503c <PIT::PIT()>
c00165eb:	59                   	pop    ecx
c00165ec:	5f                   	pop    edi
c00165ed:	53                   	push   ebx
c00165ee:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c00165f4:	e8 23 d6 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c00165f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165fb:	6a 00                	push   0x0
c00165fd:	6a 00                	push   0x0
c00165ff:	56                   	push   esi
c0016600:	53                   	push   ebx
c0016601:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016604:	83 c4 14             	add    esp,0x14
c0016607:	68 60 01 00 00       	push   0x160
c001660c:	e8 c3 8e ff ff       	call   c000f4d4 <malloc>
c0016611:	89 04 24             	mov    DWORD PTR [esp],eax
c0016614:	89 c7                	mov    edi,eax
c0016616:	e8 d1 e8 00 00       	call   c0024eec <APICTimer::APICTimer()>
c001661b:	6a 00                	push   0x0
c001661d:	6a 00                	push   0x0
c001661f:	56                   	push   esi
c0016620:	57                   	push   edi
c0016621:	e8 c8 e7 00 00       	call   c0024dee <APICTimer::open(int, int, void*)>
c0016626:	83 c4 20             	add    esp,0x20
c0016629:	8b 03                	mov    eax,DWORD PTR [ebx]
c001662b:	6a 00                	push   0x0
c001662d:	6a 00                	push   0x0
c001662f:	6a 00                	push   0x0
c0016631:	53                   	push   ebx
c0016632:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016635:	58                   	pop    eax
c0016636:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001663b:	5a                   	pop    edx
c001663c:	57                   	push   edi
c001663d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016643:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016649:	e8 ce d5 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	eb 33                	jmp    c0016686 <setupTimer(int)+0xec>
c0016653:	83 ec 0c             	sub    esp,0xc
c0016656:	68 5c 01 00 00       	push   0x15c
c001665b:	e8 74 8e ff ff       	call   c000f4d4 <malloc>
c0016660:	89 04 24             	mov    DWORD PTR [esp],eax
c0016663:	89 c3                	mov    ebx,eax
c0016665:	e8 d2 e9 00 00       	call   c002503c <PIT::PIT()>
c001666a:	58                   	pop    eax
c001666b:	5a                   	pop    edx
c001666c:	53                   	push   ebx
c001666d:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c0016673:	e8 a4 d5 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0016678:	8b 03                	mov    eax,DWORD PTR [ebx]
c001667a:	6a 00                	push   0x0
c001667c:	6a 00                	push   0x0
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016683:	83 c4 20             	add    esp,0x20
c0016686:	89 d8                	mov    eax,ebx
c0016688:	5b                   	pop    ebx
c0016689:	5e                   	pop    esi
c001668a:	5f                   	pop    edi
c001668b:	c3                   	ret    

c001668c <VCache::VCache(PhysicalDisk*)>:
c001668c:	53                   	push   ebx
c001668d:	83 ec 18             	sub    esp,0x18
c0016690:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c0016695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016699:	89 10                	mov    DWORD PTR [eax],edx
c001669b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00166a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00166b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00166bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00166ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00166d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00166e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166e8:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166f7:	e8 d8 8d ff ff       	call   c000f4d4 <malloc>
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	89 c3                	mov    ebx,eax
c0016701:	83 ec 0c             	sub    esp,0xc
c0016704:	53                   	push   ebx
c0016705:	e8 ec 67 00 00       	call   c001cef6 <Mutex::Mutex()>
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016711:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016718:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001671c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001671f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016723:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001672a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001672e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016738:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001673b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001673f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016745:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001674b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001674f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016752:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016759:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001675d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016761:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016767:	c1 e0 06             	shl    eax,0x6
c001676a:	83 ec 0c             	sub    esp,0xc
c001676d:	50                   	push   eax
c001676e:	e8 61 8d ff ff       	call   c000f4d4 <malloc>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	89 c2                	mov    edx,eax
c0016778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001677f:	90                   	nop
c0016780:	83 c4 18             	add    esp,0x18
c0016783:	5b                   	pop    ebx
c0016784:	c3                   	ret    
c0016785:	90                   	nop

c0016786 <VCache::writeWriteBuffer()>:
c0016786:	53                   	push   ebx
c0016787:	83 ec 14             	sub    esp,0x14
c001678a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001678e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016791:	8b 10                	mov    edx,DWORD PTR [eax]
c0016793:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016796:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016799:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001679c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001679f:	50                   	push   eax
c00167a0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00167a3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00167aa:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00167b1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00167b5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00167bc:	83 c4 28             	add    esp,0x28
c00167bf:	5b                   	pop    ebx
c00167c0:	c3                   	ret    
c00167c1:	90                   	nop

c00167c2 <VCache::~VCache()>:
c00167c2:	83 ec 0c             	sub    esp,0xc
c00167c5:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 10                	mov    DWORD PTR [eax],edx
c00167d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00167d7:	84 c0                	test   al,al
c00167d9:	74 0f                	je     c00167ea <VCache::~VCache()+0x28>
c00167db:	83 ec 0c             	sub    esp,0xc
c00167de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e2:	e8 9f ff ff ff       	call   c0016786 <VCache::writeWriteBuffer()>
c00167e7:	83 c4 10             	add    esp,0x10
c00167ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00167f1:	83 ec 0c             	sub    esp,0xc
c00167f4:	50                   	push   eax
c00167f5:	e8 ea 8c ff ff       	call   c000f4e4 <free>
c00167fa:	83 c4 10             	add    esp,0x10
c00167fd:	90                   	nop
c00167fe:	83 c4 0c             	add    esp,0xc
c0016801:	c3                   	ret    

c0016802 <VCache::~VCache()>:
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001680c:	e8 b1 ff ff ff       	call   c00167c2 <VCache::~VCache()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	83 ec 08             	sub    esp,0x8
c0016817:	6a 30                	push   0x30
c0016819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001681d:	e8 2b bf ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	83 c4 0c             	add    esp,0xc
c0016828:	c3                   	ret    
c0016829:	90                   	nop

c001682a <VCache::write(unsigned long long, int, void*)>:
c001682a:	55                   	push   ebp
c001682b:	57                   	push   edi
c001682c:	56                   	push   esi
c001682d:	53                   	push   ebx
c001682e:	83 ec 28             	sub    esp,0x28
c0016831:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016835:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016839:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001683d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016841:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016844:	e8 0f 6b 00 00       	call   c001d358 <Semaphore::acquire()>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016850:	74 66                	je     c00168b8 <VCache::write(unsigned long long, int, void*)+0x8e>
c0016852:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016855:	99                   	cdq    
c0016856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001685a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001685d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016860:	89 c1                	mov    ecx,eax
c0016862:	89 d0                	mov    eax,edx
c0016864:	31 f1                	xor    ecx,esi
c0016866:	31 f8                	xor    eax,edi
c0016868:	89 ca                	mov    edx,ecx
c001686a:	09 c2                	or     edx,eax
c001686c:	75 3e                	jne    c00168ac <VCache::write(unsigned long long, int, void*)+0x82>
c001686e:	83 fd 01             	cmp    ebp,0x1
c0016871:	75 39                	jne    c00168ac <VCache::write(unsigned long long, int, void*)+0x82>
c0016873:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016876:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001687c:	51                   	push   ecx
c001687d:	50                   	push   eax
c001687e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016882:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016886:	0f af c8             	imul   ecx,eax
c0016889:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001688c:	51                   	push   ecx
c001688d:	e8 c3 9d fe ff       	call   c0000655 <memcpy>
c0016892:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	40                   	inc    eax
c0016899:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001689c:	83 f8 40             	cmp    eax,0x40
c001689f:	75 57                	jne    c00168f8 <VCache::write(unsigned long long, int, void*)+0xce>
c00168a1:	83 ec 0c             	sub    esp,0xc
c00168a4:	53                   	push   ebx
c00168a5:	e8 dc fe ff ff       	call   c0016786 <VCache::writeWriteBuffer()>
c00168aa:	eb 34                	jmp    c00168e0 <VCache::write(unsigned long long, int, void*)+0xb6>
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	53                   	push   ebx
c00168b0:	e8 d1 fe ff ff       	call   c0016786 <VCache::writeWriteBuffer()>
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168bb:	83 fd 3f             	cmp    ebp,0x3f
c00168be:	7f 25                	jg     c00168e5 <VCache::write(unsigned long long, int, void*)+0xbb>
c00168c0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00168c3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00168c6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00168c9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00168cd:	52                   	push   edx
c00168ce:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00168d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168d8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168db:	e8 75 9d fe ff       	call   c0000655 <memcpy>
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	eb 13                	jmp    c00168f8 <VCache::write(unsigned long long, int, void*)+0xce>
c00168e5:	83 ec 0c             	sub    esp,0xc
c00168e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00168ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00168ee:	55                   	push   ebp
c00168ef:	57                   	push   edi
c00168f0:	56                   	push   esi
c00168f1:	50                   	push   eax
c00168f2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00168f5:	83 c4 20             	add    esp,0x20
c00168f8:	83 ec 0c             	sub    esp,0xc
c00168fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168fe:	e8 03 70 00 00       	call   c001d906 <Semaphore::release()>
c0016903:	83 c4 2c             	add    esp,0x2c
c0016906:	31 c0                	xor    eax,eax
c0016908:	5b                   	pop    ebx
c0016909:	5e                   	pop    esi
c001690a:	5f                   	pop    edi
c001690b:	5d                   	pop    ebp
c001690c:	c3                   	ret    
c001690d:	90                   	nop

c001690e <VCache::read(unsigned long long, int, void*)>:
c001690e:	57                   	push   edi
c001690f:	56                   	push   esi
c0016910:	53                   	push   ebx
c0016911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016915:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016919:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016923:	e8 30 6a 00 00       	call   c001d358 <Semaphore::acquire()>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001692f:	74 0c                	je     c001693d <VCache::read(unsigned long long, int, void*)+0x2f>
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	53                   	push   ebx
c0016935:	e8 4c fe ff ff       	call   c0016786 <VCache::writeWriteBuffer()>
c001693a:	83 c4 10             	add    esp,0x10
c001693d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	8b 10                	mov    edx,DWORD PTR [eax]
c0016945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001694d:	57                   	push   edi
c001694e:	56                   	push   esi
c001694f:	50                   	push   eax
c0016950:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016953:	83 c4 14             	add    esp,0x14
c0016956:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016959:	e8 a8 6f 00 00       	call   c001d906 <Semaphore::release()>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	31 c0                	xor    eax,eax
c0016963:	5b                   	pop    ebx
c0016964:	5e                   	pop    esi
c0016965:	5f                   	pop    edi
c0016966:	c3                   	ret    
c0016967:	90                   	nop

c0016968 <Video::putrect(int, int, int, int, unsigned int)>:
c0016968:	55                   	push   ebp
c0016969:	57                   	push   edi
c001696a:	56                   	push   esi
c001696b:	53                   	push   ebx
c001696c:	83 ec 1c             	sub    esp,0x1c
c001696f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016973:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016977:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001697b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001697f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016987:	01 df                	add    edi,ebx
c0016989:	39 fb                	cmp    ebx,edi
c001698b:	7d 1f                	jge    c00169ac <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001698d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016991:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016995:	7d 12                	jge    c00169a9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016997:	8b 16                	mov    edx,DWORD PTR [esi]
c0016999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001699d:	53                   	push   ebx
c001699e:	55                   	push   ebp
c001699f:	45                   	inc    ebp
c00169a0:	56                   	push   esi
c00169a1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	eb e8                	jmp    c0016991 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00169a9:	43                   	inc    ebx
c00169aa:	eb dd                	jmp    c0016989 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00169ac:	83 c4 1c             	add    esp,0x1c
c00169af:	5b                   	pop    ebx
c00169b0:	5e                   	pop    esi
c00169b1:	5f                   	pop    edi
c00169b2:	5d                   	pop    ebp
c00169b3:	c3                   	ret    

c00169b4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00169b4:	55                   	push   ebp
c00169b5:	57                   	push   edi
c00169b6:	31 ff                	xor    edi,edi
c00169b8:	56                   	push   esi
c00169b9:	53                   	push   ebx
c00169ba:	83 ec 1c             	sub    esp,0x1c
c00169bd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00169c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00169c5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00169cc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00169d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169d5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00169d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00169dd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00169e0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169e4:	01 f9                	add    ecx,edi
c00169e6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00169ea:	7d 2f                	jge    c0016a1b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00169ec:	31 f6                	xor    esi,esi
c00169ee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00169f2:	01 f2                	add    edx,esi
c00169f4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00169f8:	7d 1a                	jge    c0016a14 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00169fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00169fd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016a00:	46                   	inc    esi
c0016a01:	51                   	push   ecx
c0016a02:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016a06:	52                   	push   edx
c0016a07:	55                   	push   ebp
c0016a08:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a12:	eb da                	jmp    c00169ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016a14:	47                   	inc    edi
c0016a15:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016a19:	eb c5                	jmp    c00169e0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016a1b:	83 c4 1c             	add    esp,0x1c
c0016a1e:	5b                   	pop    ebx
c0016a1f:	5e                   	pop    esi
c0016a20:	5f                   	pop    edi
c0016a21:	5d                   	pop    ebp
c0016a22:	c3                   	ret    
c0016a23:	90                   	nop

c0016a24 <Video::blit(unsigned int*, int, int, int, int)>:
c0016a24:	55                   	push   ebp
c0016a25:	57                   	push   edi
c0016a26:	56                   	push   esi
c0016a27:	53                   	push   ebx
c0016a28:	83 ec 1c             	sub    esp,0x1c
c0016a2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016a2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a33:	85 c0                	test   eax,eax
c0016a35:	79 02                	jns    c0016a39 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016a37:	31 c0                	xor    eax,eax
c0016a39:	c1 e0 02             	shl    eax,0x2
c0016a3c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016a4c:	39 d8                	cmp    eax,ebx
c0016a4e:	7e 49                	jle    c0016a99 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016a50:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a56:	7c 41                	jl     c0016a99 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016a58:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016a5c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a60:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016a64:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016a68:	39 f9                	cmp    ecx,edi
c0016a6a:	7e 22                	jle    c0016a8e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016a6c:	83 c5 04             	add    ebp,0x4
c0016a6f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a75:	7c 14                	jl     c0016a8b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016a77:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a79:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016a7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a84:	56                   	push   esi
c0016a85:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	47                   	inc    edi
c0016a8c:	eb d2                	jmp    c0016a60 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a92:	43                   	inc    ebx
c0016a93:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016a97:	eb ab                	jmp    c0016a44 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016a99:	83 c4 1c             	add    esp,0x1c
c0016a9c:	5b                   	pop    ebx
c0016a9d:	5e                   	pop    esi
c0016a9e:	5f                   	pop    edi
c0016a9f:	5d                   	pop    ebp
c0016aa0:	c3                   	ret    
c0016aa1:	90                   	nop

c0016aa2 <Video::clearScreen(unsigned int)>:
c0016aa2:	57                   	push   edi
c0016aa3:	56                   	push   esi
c0016aa4:	53                   	push   ebx
c0016aa5:	31 db                	xor    ebx,ebx
c0016aa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016aab:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ab1:	7e 1f                	jle    c0016ad2 <Video::clearScreen(unsigned int)+0x30>
c0016ab3:	31 ff                	xor    edi,edi
c0016ab5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016abb:	7e 12                	jle    c0016acf <Video::clearScreen(unsigned int)+0x2d>
c0016abd:	8b 06                	mov    eax,DWORD PTR [esi]
c0016abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ac3:	53                   	push   ebx
c0016ac4:	57                   	push   edi
c0016ac5:	47                   	inc    edi
c0016ac6:	56                   	push   esi
c0016ac7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	eb e6                	jmp    c0016ab5 <Video::clearScreen(unsigned int)+0x13>
c0016acf:	43                   	inc    ebx
c0016ad0:	eb d9                	jmp    c0016aab <Video::clearScreen(unsigned int)+0x9>
c0016ad2:	5b                   	pop    ebx
c0016ad3:	5e                   	pop    esi
c0016ad4:	5f                   	pop    edi
c0016ad5:	c3                   	ret    

c0016ad6 <Video::putpixel(int, int, unsigned int)>:
c0016ad6:	c7 44 24 04 64 9b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029b64
c0016ade:	e9 64 2e 00 00       	jmp    c0019947 <Krnl::panic(char const*)>
c0016ae3:	90                   	nop

c0016ae4 <Video::Video(char const*)>:
c0016ae4:	83 ec 0c             	sub    esp,0xc
c0016ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aeb:	83 ec 08             	sub    esp,0x8
c0016aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af2:	50                   	push   eax
c0016af3:	e8 14 d3 ff ff       	call   c0013e0c <Device::Device(char const*)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	ba e8 9b 02 c0       	mov    edx,0xc0029be8
c0016b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b04:	89 10                	mov    DWORD PTR [eax],edx
c0016b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b0a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016b14:	90                   	nop
c0016b15:	83 c4 0c             	add    esp,0xc
c0016b18:	c3                   	ret    
c0016b19:	90                   	nop

c0016b1a <Video::~Video()>:
c0016b1a:	83 ec 0c             	sub    esp,0xc
c0016b1d:	ba e8 9b 02 c0       	mov    edx,0xc0029be8
c0016b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b26:	89 10                	mov    DWORD PTR [eax],edx
c0016b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	50                   	push   eax
c0016b30:	e8 b9 cf ff ff       	call   c0013aee <Device::~Device()>
c0016b35:	83 c4 10             	add    esp,0x10
c0016b38:	90                   	nop
c0016b39:	83 c4 0c             	add    esp,0xc
c0016b3c:	c3                   	ret    
c0016b3d:	90                   	nop

c0016b3e <Video::~Video()>:
c0016b3e:	83 ec 0c             	sub    esp,0xc
c0016b41:	83 ec 0c             	sub    esp,0xc
c0016b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b48:	e8 cd ff ff ff       	call   c0016b1a <Video::~Video()>
c0016b4d:	83 c4 10             	add    esp,0x10
c0016b50:	83 ec 08             	sub    esp,0x8
c0016b53:	68 64 01 00 00       	push   0x164
c0016b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b5c:	e8 ec bb ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0016b61:	83 c4 10             	add    esp,0x10
c0016b64:	83 c4 0c             	add    esp,0xc
c0016b67:	c3                   	ret    

c0016b68 <Video::isMonochrome()>:
c0016b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b6c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016b72:	c3                   	ret    
c0016b73:	90                   	nop

c0016b74 <Video::getWidth()>:
c0016b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b7e:	c3                   	ret    
c0016b7f:	90                   	nop

c0016b80 <Video::getHeight()>:
c0016b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b84:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b8a:	c3                   	ret    
c0016b8b:	90                   	nop

c0016b8c <Video::drawCursor(int, int, unsigned char*, int)>:
c0016b8c:	55                   	push   ebp
c0016b8d:	57                   	push   edi
c0016b8e:	56                   	push   esi
c0016b8f:	53                   	push   ebx
c0016b90:	83 ec 2c             	sub    esp,0x2c
c0016b93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b97:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b9b:	83 f8 01             	cmp    eax,0x1
c0016b9e:	19 c9                	sbb    ecx,ecx
c0016ba0:	31 db                	xor    ebx,ebx
c0016ba2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016ba6:	89 cd                	mov    ebp,ecx
c0016ba8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016bb0:	f7 d5                	not    ebp
c0016bb2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016bbc:	01 d8                	add    eax,ebx
c0016bbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc2:	56                   	push   esi
c0016bc3:	e8 b8 ff ff ff       	call   c0016b80 <Video::getHeight()>
c0016bc8:	59                   	pop    ecx
c0016bc9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016bcd:	7e 70                	jle    c0016c3f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016bcf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016bd3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016bd7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016bda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016be2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016be9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bed:	89 f8                	mov    eax,edi
c0016bef:	83 c0 20             	add    eax,0x20
c0016bf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bf6:	56                   	push   esi
c0016bf7:	e8 78 ff ff ff       	call   c0016b74 <Video::getWidth()>
c0016bfc:	5a                   	pop    edx
c0016bfd:	39 c7                	cmp    edi,eax
c0016bff:	7d 34                	jge    c0016c35 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016c01:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016c06:	74 05                	je     c0016c0d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016c08:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c0a:	55                   	push   ebp
c0016c0b:	eb 0d                	jmp    c0016c1a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016c0d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016c12:	74 12                	je     c0016c26 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016c14:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c1e:	57                   	push   edi
c0016c1f:	56                   	push   esi
c0016c20:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016c2a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016c2e:	47                   	inc    edi
c0016c2f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016c33:	75 c1                	jne    c0016bf6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016c35:	43                   	inc    ebx
c0016c36:	83 fb 20             	cmp    ebx,0x20
c0016c39:	0f 85 79 ff ff ff    	jne    c0016bb8 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016c3f:	83 c4 2c             	add    esp,0x2c
c0016c42:	5b                   	pop    ebx
c0016c43:	5e                   	pop    esi
c0016c44:	5f                   	pop    edi
c0016c45:	5d                   	pop    ebp
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016c48:	55                   	push   ebp
c0016c49:	57                   	push   edi
c0016c4a:	56                   	push   esi
c0016c4b:	53                   	push   ebx
c0016c4c:	83 ec 28             	sub    esp,0x28
c0016c4f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c53:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016c57:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016c5b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016c5f:	c1 e7 08             	shl    edi,0x8
c0016c62:	01 c7                	add    edi,eax
c0016c64:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016c68:	c1 e0 08             	shl    eax,0x8
c0016c6b:	01 d0                	add    eax,edx
c0016c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c75:	0f af c7             	imul   eax,edi
c0016c78:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016c7f:	50                   	push   eax
c0016c80:	e8 4f 88 ff ff       	call   c000f4d4 <malloc>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	89 c5                	mov    ebp,eax
c0016c8a:	85 c0                	test   eax,eax
c0016c8c:	75 15                	jne    c0016ca3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016c8e:	83 ec 0c             	sub    esp,0xc
c0016c91:	68 85 9b 02 c0       	push   0xc0029b85
c0016c96:	e8 92 bb ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	e9 1c 01 00 00       	jmp    c0016dbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016ca3:	be 12 00 00 00       	mov    esi,0x12
c0016ca8:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016cac:	74 11                	je     c0016cbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016cae:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016cb2:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016cb6:	c1 fe 03             	sar    esi,0x3
c0016cb9:	0f af f0             	imul   esi,eax
c0016cbc:	83 c6 12             	add    esi,0x12
c0016cbf:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016cc3:	74 04                	je     c0016cc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016cc5:	85 ff                	test   edi,edi
c0016cc7:	75 12                	jne    c0016cdb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016cc9:	83 ec 0c             	sub    esp,0xc
c0016ccc:	68 9c 9b 02 c0       	push   0xc0029b9c
c0016cd1:	e8 57 bb ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0016cd6:	e9 ce 00 00 00       	jmp    c0016da9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016cdb:	52                   	push   edx
c0016cdc:	52                   	push   edx
c0016cdd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016ce1:	50                   	push   eax
c0016ce2:	68 b1 9b 02 c0       	push   0xc0029bb1
c0016ce7:	e8 41 bb ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0016cec:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	80 fa 02             	cmp    dl,0x2
c0016cf6:	0f 85 98 00 00 00    	jne    c0016d94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016cfc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016d01:	75 10                	jne    c0016d13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016d03:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016d07:	75 0a                	jne    c0016d13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016d09:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016d0c:	83 e8 18             	sub    eax,0x18
c0016d0f:	a8 f7                	test   al,0xf7
c0016d11:	74 0a                	je     c0016d1d <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	68 be 9b 02 c0       	push   0xc0029bbe
c0016d1b:	eb 7f                	jmp    c0016d9c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016d1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d25:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016d2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d31:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016d39:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016d3d:	75 0c                	jne    c0016d4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016d3f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016d44:	c1 e0 18             	shl    eax,0x18
c0016d47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d4b:	41                   	inc    ecx
c0016d4c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016d51:	c1 e2 10             	shl    edx,0x10
c0016d54:	89 d0                	mov    eax,edx
c0016d56:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016d5b:	c1 e2 08             	shl    edx,0x8
c0016d5e:	09 c2                	or     edx,eax
c0016d60:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016d64:	09 c2                	or     edx,eax
c0016d66:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016d6a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016d6e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016d72:	c1 f8 03             	sar    eax,0x3
c0016d75:	01 c6                	add    esi,eax
c0016d77:	89 c8                	mov    eax,ecx
c0016d79:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016d7d:	39 c7                	cmp    edi,eax
c0016d7f:	7f b0                	jg     c0016d31 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016d81:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016d85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d89:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016d8c:	7e 22                	jle    c0016db0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016d8e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016d92:	eb 99                	jmp    c0016d2d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016d94:	50                   	push   eax
c0016d95:	50                   	push   eax
c0016d96:	52                   	push   edx
c0016d97:	68 cc 9b 02 c0       	push   0xc0029bcc
c0016d9c:	e8 8c ba ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0016da1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016da4:	e8 3b 87 ff ff       	call   c000f4e4 <free>
c0016da9:	83 c4 10             	add    esp,0x10
c0016dac:	31 ed                	xor    ebp,ebp
c0016dae:	eb 0f                	jmp    c0016dbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016db0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016db4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016db7:	89 38                	mov    DWORD PTR [eax],edi
c0016db9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016dbd:	89 08                	mov    DWORD PTR [eax],ecx
c0016dbf:	83 c4 1c             	add    esp,0x1c
c0016dc2:	89 e8                	mov    eax,ebp
c0016dc4:	5b                   	pop    ebx
c0016dc5:	5e                   	pop    esi
c0016dc6:	5f                   	pop    edi
c0016dc7:	5d                   	pop    ebp
c0016dc8:	c3                   	ret    
c0016dc9:	90                   	nop

c0016dca <Video::putTGA(int, int, unsigned char*, int)>:
c0016dca:	55                   	push   ebp
c0016dcb:	57                   	push   edi
c0016dcc:	56                   	push   esi
c0016dcd:	53                   	push   ebx
c0016dce:	83 ec 28             	sub    esp,0x28
c0016dd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016dd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016dd9:	50                   	push   eax
c0016dda:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016dde:	50                   	push   eax
c0016ddf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016de3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016de7:	56                   	push   esi
c0016de8:	e8 5b fe ff ff       	call   c0016c48 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ded:	83 c4 20             	add    esp,0x20
c0016df0:	85 c0                	test   eax,eax
c0016df2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016df6:	74 35                	je     c0016e2d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016df8:	89 c7                	mov    edi,eax
c0016dfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016dfe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016e02:	39 d8                	cmp    eax,ebx
c0016e04:	7e 27                	jle    c0016e2d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016e06:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e0e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016e12:	39 e8                	cmp    eax,ebp
c0016e14:	7e 14                	jle    c0016e2a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016e16:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e18:	83 c7 04             	add    edi,0x4
c0016e1b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016e1e:	53                   	push   ebx
c0016e1f:	55                   	push   ebp
c0016e20:	45                   	inc    ebp
c0016e21:	56                   	push   esi
c0016e22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	eb e0                	jmp    c0016e0a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016e2a:	43                   	inc    ebx
c0016e2b:	eb cd                	jmp    c0016dfa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016e2d:	83 c4 1c             	add    esp,0x1c
c0016e30:	5b                   	pop    ebx
c0016e31:	5e                   	pop    esi
c0016e32:	5f                   	pop    edi
c0016e33:	5d                   	pop    ebp
c0016e34:	c3                   	ret    
c0016e35:	90                   	nop

c0016e36 <ACPI::close(int, int, void*)>:
c0016e36:	83 ec 1c             	sub    esp,0x1c
c0016e39:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016e41:	74 0a                	je     c0016e4d <ACPI::close(int, int, void*)+0x17>
c0016e43:	b8 00 00 00 00       	mov    eax,0x0
c0016e48:	e9 9a 00 00 00       	jmp    c0016ee7 <ACPI::close(int, int, void*)+0xb1>
c0016e4d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e52:	75 37                	jne    c0016e8b <ACPI::close(int, int, void*)+0x55>
c0016e54:	83 ec 0c             	sub    esp,0xc
c0016e57:	68 28 9c 02 c0       	push   0xc0029c28
c0016e5c:	e8 cc b9 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	a1 a8 d0 02 c0       	mov    eax,ds:0xc002d0a8
c0016e69:	85 c0                	test   eax,eax
c0016e6b:	74 07                	je     c0016e74 <ACPI::close(int, int, void*)+0x3e>
c0016e6d:	a1 a8 d0 02 c0       	mov    eax,ds:0xc002d0a8
c0016e72:	ff d0                	call   eax
c0016e74:	83 ec 0c             	sub    esp,0xc
c0016e77:	68 fc 9c 02 c0       	push   0xc0029cfc
c0016e7c:	e8 c6 2a 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e89:	eb 5c                	jmp    c0016ee7 <ACPI::close(int, int, void*)+0xb1>
c0016e8b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016e90:	75 50                	jne    c0016ee2 <ACPI::close(int, int, void*)+0xac>
c0016e92:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c0016e97:	85 c0                	test   eax,eax
c0016e99:	74 07                	je     c0016ea2 <ACPI::close(int, int, void*)+0x6c>
c0016e9b:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c0016ea0:	ff d0                	call   eax
c0016ea2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016ea7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016eac:	83 e0 02             	and    eax,0x2
c0016eaf:	74 1c                	je     c0016ecd <ACPI::close(int, int, void*)+0x97>
c0016eb1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016eb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ebc:	89 c2                	mov    edx,eax
c0016ebe:	ec                   	in     al,dx
c0016ebf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016ec3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016ec7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016ecb:	eb da                	jmp    c0016ea7 <ACPI::close(int, int, void*)+0x71>
c0016ecd:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016ed4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016ed9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016edd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ee1:	ee                   	out    dx,al
c0016ee2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ee7:	83 c4 1c             	add    esp,0x1c
c0016eea:	c3                   	ret    

c0016eeb <findRSDP()>:
c0016eeb:	83 ec 1c             	sub    esp,0x1c
c0016eee:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0016ef3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ef9:	83 e0 04             	and    eax,0x4
c0016efc:	84 c0                	test   al,al
c0016efe:	75 07                	jne    c0016f07 <findRSDP()+0x1c>
c0016f00:	b8 00 00 00 00       	mov    eax,0x0
c0016f05:	eb 6a                	jmp    c0016f71 <findRSDP()+0x86>
c0016f07:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c0016f0c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016f11:	7f 1b                	jg     c0016f2e <findRSDP()+0x43>
c0016f13:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0016f18:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016f1e:	83 e2 fb             	and    edx,0xfffffffb
c0016f21:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016f27:	b8 00 00 00 00       	mov    eax,0x0
c0016f2c:	eb 43                	jmp    c0016f71 <findRSDP()+0x86>
c0016f2e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016f36:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016f3e:	77 2c                	ja     c0016f6c <findRSDP()+0x81>
c0016f40:	83 ec 04             	sub    esp,0x4
c0016f43:	6a 08                	push   0x8
c0016f45:	68 35 9c 02 c0       	push   0xc0029c35
c0016f4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f4e:	e8 9f 96 fe ff       	call   c00005f2 <memcmp>
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	85 c0                	test   eax,eax
c0016f58:	0f 94 c0             	sete   al
c0016f5b:	84 c0                	test   al,al
c0016f5d:	74 06                	je     c0016f65 <findRSDP()+0x7a>
c0016f5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f63:	eb 0c                	jmp    c0016f71 <findRSDP()+0x86>
c0016f65:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016f6a:	eb ca                	jmp    c0016f36 <findRSDP()+0x4b>
c0016f6c:	b8 00 00 00 00       	mov    eax,0x0
c0016f71:	83 c4 1c             	add    esp,0x1c
c0016f74:	c3                   	ret    

c0016f75 <loadACPITables(unsigned char*)>:
c0016f75:	56                   	push   esi
c0016f76:	53                   	push   ebx
c0016f77:	83 ec 44             	sub    esp,0x44
c0016f7a:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0016f7f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f85:	83 e0 04             	and    eax,0x4
c0016f88:	84 c0                	test   al,al
c0016f8a:	0f 84 05 02 00 00    	je     c0017195 <loadACPITables(unsigned char*)+0x220>
c0016f90:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c0016f95:	84 c0                	test   al,al
c0016f97:	74 75                	je     c001700e <loadACPITables(unsigned char*)+0x99>
c0016f99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016fa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fa8:	83 e8 24             	sub    eax,0x24
c0016fab:	c1 e8 03             	shr    eax,0x3
c0016fae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016fb2:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fbe:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016fc2:	0f 8d b2 00 00 00    	jge    c001707a <loadACPITables(unsigned char*)+0x105>
c0016fc8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fcc:	83 c0 24             	add    eax,0x24
c0016fcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fd7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016fdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fdf:	c1 e0 03             	shl    eax,0x3
c0016fe2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016fe6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016fed:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fef:	89 c1                	mov    ecx,eax
c0016ff1:	a1 ac d0 02 c0       	mov    eax,ds:0xc002d0ac
c0016ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0016ff9:	89 15 ac d0 02 c0    	mov    DWORD PTR ds:0xc002d0ac,edx
c0016fff:	89 ca                	mov    edx,ecx
c0017001:	89 14 c5 c4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f3c],edx
c0017008:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001700c:	eb ac                	jmp    c0016fba <loadACPITables(unsigned char*)+0x45>
c001700e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017012:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001701d:	83 e8 24             	sub    eax,0x24
c0017020:	c1 e8 02             	shr    eax,0x2
c0017023:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017027:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001702f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017033:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017037:	7d 41                	jge    c001707a <loadACPITables(unsigned char*)+0x105>
c0017039:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001703d:	83 c0 24             	add    eax,0x24
c0017040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017044:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017048:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001704c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017050:	c1 e0 02             	shl    eax,0x2
c0017053:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017057:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001705b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001705d:	a1 ac d0 02 c0       	mov    eax,ds:0xc002d0ac
c0017062:	8d 50 01             	lea    edx,[eax+0x1]
c0017065:	89 15 ac d0 02 c0    	mov    DWORD PTR ds:0xc002d0ac,edx
c001706b:	89 ca                	mov    edx,ecx
c001706d:	89 14 c5 c4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f3c],edx
c0017074:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017078:	eb b5                	jmp    c001702f <loadACPITables(unsigned char*)+0xba>
c001707a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017082:	a1 ac d0 02 c0       	mov    eax,ds:0xc002d0ac
c0017087:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001708b:	0f 8d 05 01 00 00    	jge    c0017196 <loadACPITables(unsigned char*)+0x221>
c0017091:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017095:	8b 04 c5 c4 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2f3c]
c001709c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ac:	25 ff 0f 00 00       	and    eax,0xfff
c00170b1:	89 c6                	mov    esi,eax
c00170b3:	e8 15 a9 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c00170b8:	89 c3                	mov    ebx,eax
c00170ba:	83 ec 0c             	sub    esp,0xc
c00170bd:	6a 01                	push   0x1
c00170bf:	e8 79 a7 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170cb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170d1:	83 ec 0c             	sub    esp,0xc
c00170d4:	6a 01                	push   0x1
c00170d6:	6a 01                	push   0x1
c00170d8:	50                   	push   eax
c00170d9:	52                   	push   edx
c00170da:	53                   	push   ebx
c00170db:	e8 1c b1 ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170e0:	83 c4 20             	add    esp,0x20
c00170e3:	09 f0                	or     eax,esi
c00170e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ed:	c1 e0 03             	shl    eax,0x3
c00170f0:	05 c0 d0 02 c0       	add    eax,0xc002d0c0
c00170f5:	83 ec 04             	sub    esp,0x4
c00170f8:	6a 04                	push   0x4
c00170fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170fe:	50                   	push   eax
c00170ff:	e8 51 95 fe ff       	call   c0000655 <memcpy>
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001710b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001710e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017116:	05 00 10 00 00       	add    eax,0x1000
c001711b:	c1 e8 0c             	shr    eax,0xc
c001711e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017126:	89 04 24             	mov    DWORD PTR [esp],eax
c0017129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712d:	25 ff 0f 00 00       	and    eax,0xfff
c0017132:	89 c6                	mov    esi,eax
c0017134:	e8 94 a8 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0017139:	89 c3                	mov    ebx,eax
c001713b:	83 ec 0c             	sub    esp,0xc
c001713e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017142:	e8 f6 a6 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0017147:	83 c4 10             	add    esp,0x10
c001714a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001714e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	6a 01                	push   0x1
c0017159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001715d:	50                   	push   eax
c001715e:	52                   	push   edx
c001715f:	53                   	push   ebx
c0017160:	e8 97 b0 ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017165:	83 c4 20             	add    esp,0x20
c0017168:	09 f0                	or     eax,esi
c001716a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001716e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	50                   	push   eax
c0017175:	e8 27 aa ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c001717a:	83 c4 10             	add    esp,0x10
c001717d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017185:	89 14 c5 c4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f3c],edx
c001718c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017190:	e9 ed fe ff ff       	jmp    c0017082 <loadACPITables(unsigned char*)+0x10d>
c0017195:	90                   	nop
c0017196:	83 c4 44             	add    esp,0x44
c0017199:	5b                   	pop    ebx
c001719a:	5e                   	pop    esi
c001719b:	c3                   	ret    

c001719c <findRSDT(unsigned char*)>:
c001719c:	56                   	push   esi
c001719d:	53                   	push   ebx
c001719e:	83 ec 44             	sub    esp,0x44
c00171a1:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00171a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171ac:	83 e0 04             	and    eax,0x4
c00171af:	84 c0                	test   al,al
c00171b1:	75 0a                	jne    c00171bd <findRSDT(unsigned char*)+0x21>
c00171b3:	b8 00 00 00 00       	mov    eax,0x0
c00171b8:	e9 f7 00 00 00       	jmp    c00172b4 <findRSDT(unsigned char*)+0x118>
c00171bd:	83 ec 04             	sub    esp,0x4
c00171c0:	6a 24                	push   0x24
c00171c2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00171c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171ca:	50                   	push   eax
c00171cb:	e8 85 94 fe ff       	call   c0000655 <memcpy>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00171d7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00171db:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00171e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171fb:	25 ff 0f 00 00       	and    eax,0xfff
c0017200:	89 c6                	mov    esi,eax
c0017202:	e8 c6 a7 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0017207:	89 c3                	mov    ebx,eax
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	6a 02                	push   0x2
c001720e:	e8 2a a6 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001721a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017220:	83 ec 0c             	sub    esp,0xc
c0017223:	6a 01                	push   0x1
c0017225:	6a 02                	push   0x2
c0017227:	50                   	push   eax
c0017228:	52                   	push   edx
c0017229:	53                   	push   ebx
c001722a:	e8 cd af ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001722f:	83 c4 20             	add    esp,0x20
c0017232:	09 f0                	or     eax,esi
c0017234:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001723c:	25 ff 0f 00 00       	and    eax,0xfff
c0017241:	89 c6                	mov    esi,eax
c0017243:	e8 85 a7 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c0017248:	89 c3                	mov    ebx,eax
c001724a:	83 ec 0c             	sub    esp,0xc
c001724d:	6a 02                	push   0x2
c001724f:	e8 e9 a5 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001725b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017261:	83 ec 0c             	sub    esp,0xc
c0017264:	6a 01                	push   0x1
c0017266:	6a 02                	push   0x2
c0017268:	50                   	push   eax
c0017269:	52                   	push   edx
c001726a:	53                   	push   ebx
c001726b:	e8 8c af ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017270:	83 c4 20             	add    esp,0x20
c0017273:	09 f0                	or     eax,esi
c0017275:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017279:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001727e:	75 11                	jne    c0017291 <findRSDT(unsigned char*)+0xf5>
c0017280:	c6 05 c0 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c0,0x0
c0017287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001728b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001728f:	eb 1f                	jmp    c00172b0 <findRSDT(unsigned char*)+0x114>
c0017291:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017296:	75 11                	jne    c00172a9 <findRSDT(unsigned char*)+0x10d>
c0017298:	c6 05 c0 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2c0,0x1
c001729f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172a3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172a7:	eb 07                	jmp    c00172b0 <findRSDT(unsigned char*)+0x114>
c00172a9:	b8 00 00 00 00       	mov    eax,0x0
c00172ae:	eb 04                	jmp    c00172b4 <findRSDT(unsigned char*)+0x118>
c00172b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172b4:	83 c4 44             	add    esp,0x44
c00172b7:	5b                   	pop    ebx
c00172b8:	5e                   	pop    esi
c00172b9:	c3                   	ret    

c00172ba <findDataTable(unsigned char*, char*)>:
c00172ba:	83 ec 1c             	sub    esp,0x1c
c00172bd:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00172c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172c8:	83 e0 04             	and    eax,0x4
c00172cb:	84 c0                	test   al,al
c00172cd:	75 07                	jne    c00172d6 <findDataTable(unsigned char*, char*)+0x1c>
c00172cf:	b8 00 00 00 00       	mov    eax,0x0
c00172d4:	eb 7c                	jmp    c0017352 <findDataTable(unsigned char*, char*)+0x98>
c00172d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172de:	a1 ac d0 02 c0       	mov    eax,ds:0xc002d0ac
c00172e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00172e7:	7d 3a                	jge    c0017323 <findDataTable(unsigned char*, char*)+0x69>
c00172e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172ed:	c1 e0 03             	shl    eax,0x3
c00172f0:	05 c0 d0 02 c0       	add    eax,0xc002d0c0
c00172f5:	83 ec 04             	sub    esp,0x4
c00172f8:	6a 04                	push   0x4
c00172fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172fe:	50                   	push   eax
c00172ff:	e8 ee 92 fe ff       	call   c00005f2 <memcmp>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	85 c0                	test   eax,eax
c0017309:	0f 94 c0             	sete   al
c001730c:	84 c0                	test   al,al
c001730e:	74 0d                	je     c001731d <findDataTable(unsigned char*, char*)+0x63>
c0017310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017314:	8b 04 c5 c4 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2f3c]
c001731b:	eb 35                	jmp    c0017352 <findDataTable(unsigned char*, char*)+0x98>
c001731d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017321:	eb bb                	jmp    c00172de <findDataTable(unsigned char*, char*)+0x24>
c0017323:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c0017328:	84 c0                	test   al,al
c001732a:	74 07                	je     c0017333 <findDataTable(unsigned char*, char*)+0x79>
c001732c:	b8 58 00 00 00       	mov    eax,0x58
c0017331:	eb 05                	jmp    c0017338 <findDataTable(unsigned char*, char*)+0x7e>
c0017333:	b8 52 00 00 00       	mov    eax,0x52
c0017338:	83 ec 04             	sub    esp,0x4
c001733b:	50                   	push   eax
c001733c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017340:	68 20 9d 02 c0       	push   0xc0029d20
c0017345:	e8 e3 b4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	b8 00 00 00 00       	mov    eax,0x0
c0017352:	83 c4 1c             	add    esp,0x1c
c0017355:	c3                   	ret    

c0017356 <scanMADT()>:
c0017356:	53                   	push   ebx
c0017357:	83 ec 38             	sub    esp,0x38
c001735a:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001735f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017365:	83 e0 04             	and    eax,0x4
c0017368:	84 c0                	test   al,al
c001736a:	0f 84 63 04 00 00    	je     c00177d3 <scanMADT()+0x47d>
c0017370:	e8 76 fb ff ff       	call   c0016eeb <findRSDP()>
c0017375:	a3 cc d2 02 c0       	mov    ds:0xc002d2cc,eax
c001737a:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c001737f:	85 c0                	test   eax,eax
c0017381:	75 19                	jne    c001739c <scanMADT()+0x46>
c0017383:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0017388:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001738e:	83 e2 fb             	and    edx,0xfffffffb
c0017391:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017397:	e9 3b 04 00 00       	jmp    c00177d7 <scanMADT()+0x481>
c001739c:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00173a1:	83 ec 0c             	sub    esp,0xc
c00173a4:	50                   	push   eax
c00173a5:	e8 f2 fd ff ff       	call   c001719c <findRSDT(unsigned char*)>
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	a3 c8 d2 02 c0       	mov    ds:0xc002d2c8,eax
c00173b2:	a1 c8 d2 02 c0       	mov    eax,ds:0xc002d2c8
c00173b7:	85 c0                	test   eax,eax
c00173b9:	75 19                	jne    c00173d4 <scanMADT()+0x7e>
c00173bb:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00173c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00173c6:	83 e2 fb             	and    edx,0xfffffffb
c00173c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173cf:	e9 03 04 00 00       	jmp    c00177d7 <scanMADT()+0x481>
c00173d4:	a1 c8 d2 02 c0       	mov    eax,ds:0xc002d2c8
c00173d9:	83 ec 0c             	sub    esp,0xc
c00173dc:	50                   	push   eax
c00173dd:	e8 93 fb ff ff       	call   c0016f75 <loadACPITables(unsigned char*)>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	a1 c8 d2 02 c0       	mov    eax,ds:0xc002d2c8
c00173ea:	83 ec 08             	sub    esp,0x8
c00173ed:	68 3e 9c 02 c0       	push   0xc0029c3e
c00173f2:	50                   	push   eax
c00173f3:	e8 c2 fe ff ff       	call   c00172ba <findDataTable(unsigned char*, char*)>
c00173f8:	83 c4 10             	add    esp,0x10
c00173fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017404:	75 19                	jne    c001741f <scanMADT()+0xc9>
c0017406:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001740b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017411:	83 e2 fe             	and    edx,0xfffffffe
c0017414:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001741a:	e9 b8 03 00 00       	jmp    c00177d7 <scanMADT()+0x481>
c001741f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017427:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001742b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001742e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017432:	0f 87 9f 03 00 00    	ja     c00177d7 <scanMADT()+0x481>
c0017438:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017440:	0f 87 91 03 00 00    	ja     c00177d7 <scanMADT()+0x481>
c0017446:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001744a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001744e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017452:	8d 50 01             	lea    edx,[eax+0x1]
c0017455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017459:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001745d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017461:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017465:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017469:	8d 50 01             	lea    edx,[eax+0x1]
c001746c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017470:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017474:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017478:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001747c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017481:	0f 86 4f 03 00 00    	jbe    c00177d6 <scanMADT()+0x480>
c0017487:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001748c:	75 57                	jne    c00174e5 <scanMADT()+0x18f>
c001748e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017492:	8d 50 01             	lea    edx,[eax+0x1]
c0017495:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017499:	8a 15 c0 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d4c0
c001749f:	0f b6 d2             	movzx  edx,dl
c00174a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00174a6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00174aa:	88 82 00 d5 02 c0    	mov    BYTE PTR [edx-0x3ffd2b00],al
c00174b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b4:	8d 50 01             	lea    edx,[eax+0x1]
c00174b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174bb:	8a 15 c0 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d4c0
c00174c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00174c4:	88 0d c0 d4 02 c0    	mov    BYTE PTR ds:0xc002d4c0,cl
c00174ca:	0f b6 d2             	movzx  edx,dl
c00174cd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00174d1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00174d5:	88 82 e0 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2b20],al
c00174db:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174e0:	e9 da 02 00 00       	jmp    c00177bf <scanMADT()+0x469>
c00174e5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00174ea:	0f 85 14 01 00 00    	jne    c0017604 <scanMADT()+0x2ae>
c00174f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f4:	8d 50 01             	lea    edx,[eax+0x1]
c00174f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174fb:	8a 15 80 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d380
c0017501:	0f b6 d2             	movzx  edx,dl
c0017504:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017508:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001750c:	88 82 a0 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2c60],al
c0017512:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001751a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001751e:	01 d0                	add    eax,edx
c0017520:	83 c0 2c             	add    eax,0x2c
c0017523:	8a 00                	mov    al,BYTE PTR [eax]
c0017525:	0f b6 d0             	movzx  edx,al
c0017528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752c:	8d 48 01             	lea    ecx,[eax+0x1]
c001752f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017533:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017537:	0f b6 c0             	movzx  eax,al
c001753a:	c1 e0 08             	shl    eax,0x8
c001753d:	89 d1                	mov    ecx,edx
c001753f:	09 c1                	or     ecx,eax
c0017541:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017545:	8d 50 02             	lea    edx,[eax+0x2]
c0017548:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001754c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017550:	0f b6 c0             	movzx  eax,al
c0017553:	c1 e0 10             	shl    eax,0x10
c0017556:	09 c1                	or     ecx,eax
c0017558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001755c:	8d 50 03             	lea    edx,[eax+0x3]
c001755f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017563:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017567:	0f b6 c0             	movzx  eax,al
c001756a:	c1 e0 18             	shl    eax,0x18
c001756d:	09 c1                	or     ecx,eax
c001756f:	89 ca                	mov    edx,ecx
c0017571:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c0017576:	0f b6 c0             	movzx  eax,al
c0017579:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c0017580:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017585:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001758d:	01 d0                	add    eax,edx
c001758f:	83 c0 2c             	add    eax,0x2c
c0017592:	8a 00                	mov    al,BYTE PTR [eax]
c0017594:	0f b6 d0             	movzx  edx,al
c0017597:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759b:	8d 48 01             	lea    ecx,[eax+0x1]
c001759e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175a6:	0f b6 c0             	movzx  eax,al
c00175a9:	c1 e0 08             	shl    eax,0x8
c00175ac:	89 d1                	mov    ecx,edx
c00175ae:	09 c1                	or     ecx,eax
c00175b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175b4:	8d 50 02             	lea    edx,[eax+0x2]
c00175b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175bf:	0f b6 c0             	movzx  eax,al
c00175c2:	c1 e0 10             	shl    eax,0x10
c00175c5:	09 c1                	or     ecx,eax
c00175c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175cb:	8d 50 03             	lea    edx,[eax+0x3]
c00175ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175d6:	0f b6 c0             	movzx  eax,al
c00175d9:	c1 e0 18             	shl    eax,0x18
c00175dc:	09 c1                	or     ecx,eax
c00175de:	89 ca                	mov    edx,ecx
c00175e0:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00175e5:	0f b6 c0             	movzx  eax,al
c00175e8:	89 14 85 40 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2bc0],edx
c00175ef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175f4:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c00175f9:	40                   	inc    eax
c00175fa:	a2 80 d3 02 c0       	mov    ds:0xc002d380,al
c00175ff:	e9 bb 01 00 00       	jmp    c00177bf <scanMADT()+0x469>
c0017604:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017609:	0f 85 e9 00 00 00    	jne    c00176f8 <scanMADT()+0x3a2>
c001760f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017613:	8d 50 01             	lea    edx,[eax+0x1]
c0017616:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001761a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001761e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017622:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762a:	8d 50 01             	lea    edx,[eax+0x1]
c001762d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017631:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017635:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017639:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001763d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017645:	01 d0                	add    eax,edx
c0017647:	83 c0 2c             	add    eax,0x2c
c001764a:	8a 00                	mov    al,BYTE PTR [eax]
c001764c:	0f b6 d0             	movzx  edx,al
c001764f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017653:	8d 48 01             	lea    ecx,[eax+0x1]
c0017656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001765a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001765e:	0f b6 c0             	movzx  eax,al
c0017661:	c1 e0 08             	shl    eax,0x8
c0017664:	89 d1                	mov    ecx,edx
c0017666:	09 c1                	or     ecx,eax
c0017668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001766c:	8d 50 02             	lea    edx,[eax+0x2]
c001766f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017673:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017677:	0f b6 c0             	movzx  eax,al
c001767a:	c1 e0 10             	shl    eax,0x10
c001767d:	09 c1                	or     ecx,eax
c001767f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017683:	8d 50 03             	lea    edx,[eax+0x3]
c0017686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001768a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001768e:	0f b6 c0             	movzx  eax,al
c0017691:	c1 e0 18             	shl    eax,0x18
c0017694:	09 c8                	or     eax,ecx
c0017696:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001769a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001769f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176a7:	01 d0                	add    eax,edx
c00176a9:	83 c0 2c             	add    eax,0x2c
c00176ac:	8a 00                	mov    al,BYTE PTR [eax]
c00176ae:	0f b6 c0             	movzx  eax,al
c00176b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00176b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176bc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00176c0:	0f b6 d2             	movzx  edx,dl
c00176c3:	c1 e2 08             	shl    edx,0x8
c00176c6:	09 d0                	or     eax,edx
c00176c8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00176cd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176d2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00176d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176db:	88 90 60 bc 02 c0    	mov    BYTE PTR [eax-0x3ffd43a0],dl
c00176e1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00176e6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00176eb:	66 89 84 12 60 d3 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2ca0],ax
c00176f3:	e9 c7 00 00 00       	jmp    c00177bf <scanMADT()+0x469>
c00176f8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00176fd:	0f 85 b0 00 00 00    	jne    c00177b3 <scanMADT()+0x45d>
c0017703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017707:	8d 50 01             	lea    edx,[eax+0x1]
c001770a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001770e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017712:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017716:	0f b6 c0             	movzx  eax,al
c0017719:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001771d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017725:	01 d0                	add    eax,edx
c0017727:	83 c0 2c             	add    eax,0x2c
c001772a:	8a 00                	mov    al,BYTE PTR [eax]
c001772c:	0f b6 d0             	movzx  edx,al
c001772f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017733:	8d 48 01             	lea    ecx,[eax+0x1]
c0017736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001773a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001773e:	0f b6 c0             	movzx  eax,al
c0017741:	c1 e0 08             	shl    eax,0x8
c0017744:	09 d0                	or     eax,edx
c0017746:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001774a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001774f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017753:	8d 50 01             	lea    edx,[eax+0x1]
c0017756:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001775a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001775e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017762:	0f b6 c0             	movzx  eax,al
c0017765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776d:	c1 e0 08             	shl    eax,0x8
c0017770:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017774:	89 c1                	mov    ecx,eax
c0017776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001777a:	c1 e0 18             	shl    eax,0x18
c001777d:	89 c3                	mov    ebx,eax
c001777f:	a1 d0 d2 02 c0       	mov    eax,ds:0xc002d2d0
c0017784:	8d 50 01             	lea    edx,[eax+0x1]
c0017787:	89 15 d0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2d0,edx
c001778d:	09 d9                	or     ecx,ebx
c001778f:	89 ca                	mov    edx,ecx
c0017791:	89 14 85 e0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d20],edx
c0017798:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001779c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177a4:	68 50 9d 02 c0       	push   0xc0029d50
c00177a9:	e8 7f b0 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00177ae:	83 c4 10             	add    esp,0x10
c00177b1:	eb 0c                	jmp    c00177bf <scanMADT()+0x469>
c00177b3:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00177b8:	75 05                	jne    c00177bf <scanMADT()+0x469>
c00177ba:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00177bf:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00177c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177c8:	01 d0                	add    eax,edx
c00177ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177ce:	e9 54 fc ff ff       	jmp    c0017427 <scanMADT()+0xd1>
c00177d3:	90                   	nop
c00177d4:	eb 01                	jmp    c00177d7 <scanMADT()+0x481>
c00177d6:	90                   	nop
c00177d7:	83 c4 38             	add    esp,0x38
c00177da:	5b                   	pop    ebx
c00177db:	c3                   	ret    

c00177dc <ACPI::ACPI()>:
c00177dc:	83 ec 0c             	sub    esp,0xc
c00177df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177e3:	83 ec 08             	sub    esp,0x8
c00177e6:	68 43 9c 02 c0       	push   0xc0029c43
c00177eb:	50                   	push   eax
c00177ec:	e8 1b c6 ff ff       	call   c0013e0c <Device::Device(char const*)>
c00177f1:	83 c4 10             	add    esp,0x10
c00177f4:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c00177f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177fd:	89 10                	mov    DWORD PTR [eax],edx
c00177ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017803:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001780a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001780e:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001781c:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001782a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017831:	e8 20 fb ff ff       	call   c0017356 <scanMADT()>
c0017836:	90                   	nop
c0017837:	83 c4 0c             	add    esp,0xc
c001783a:	c3                   	ret    
c001783b:	90                   	nop

c001783c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001783c:	83 ec 2c             	sub    esp,0x2c
c001783f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017847:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001784b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001784f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017854:	88 d0                	mov    al,dl
c0017856:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001785a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001785f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017867:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001786b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017871:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017875:	0f 8d 97 00 00 00    	jge    c0017912 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001787b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001787f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017883:	83 c2 2a             	add    edx,0x2a
c0017886:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001788a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001788f:	75 78                	jne    c0017909 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017891:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017899:	83 c2 2a             	add    edx,0x2a
c001789c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00178a0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00178a4:	75 63                	jne    c0017909 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00178a6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00178ab:	74 3a                	je     c00178e7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00178ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178b5:	83 c2 2a             	add    edx,0x2a
c00178b8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00178bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c3:	39 c2                	cmp    edx,eax
c00178c5:	74 10                	je     c00178d7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00178c7:	83 ec 0c             	sub    esp,0xc
c00178ca:	68 8c 9d 02 c0       	push   0xc0029d8c
c00178cf:	e8 73 20 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	83 ec 0c             	sub    esp,0xc
c00178da:	68 48 9c 02 c0       	push   0xc0029c48
c00178df:	e8 63 20 00 00       	call   c0019947 <Krnl::panic(char const*)>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00178eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178f3:	83 c2 2a             	add    edx,0x2a
c00178f6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00178fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00178fc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00178ff:	89 01                	mov    DWORD PTR [ecx],eax
c0017901:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017904:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017909:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001790d:	e9 55 ff ff ff       	jmp    c0017867 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017912:	90                   	nop
c0017913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017917:	83 c4 2c             	add    esp,0x2c
c001791a:	c2 04 00             	ret    0x4
c001791d:	90                   	nop

c001791e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001791e:	56                   	push   esi
c001791f:	53                   	push   ebx
c0017920:	83 ec 14             	sub    esp,0x14
c0017923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017927:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001792b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001792f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017934:	88 c8                	mov    al,cl
c0017936:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001793a:	88 d0                	mov    al,dl
c001793c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017944:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001794a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017954:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017959:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001795e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017963:	83 ec 04             	sub    esp,0x4
c0017966:	56                   	push   esi
c0017967:	53                   	push   ebx
c0017968:	51                   	push   ecx
c0017969:	52                   	push   edx
c001796a:	50                   	push   eax
c001796b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001796f:	68 bc 9d 02 c0       	push   0xc0029dbc
c0017974:	e8 b4 ae ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0017979:	83 c4 20             	add    esp,0x20
c001797c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017980:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001798d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017991:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017999:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001799f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179a3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00179a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179aa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00179af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00179b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00179bd:	8d 48 01             	lea    ecx,[eax+0x1]
c00179c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c4:	83 c2 2a             	add    edx,0x2a
c00179c7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00179cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cf:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00179d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00179dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00179e0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00179ee:	8d 50 01             	lea    edx,[eax+0x1]
c00179f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f5:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00179fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ff:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a05:	3d 00 08 00 00       	cmp    eax,0x800
c0017a0a:	75 10                	jne    c0017a1c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	68 57 9c 02 c0       	push   0xc0029c57
c0017a14:	e8 2e 1f 00 00       	call   c0019947 <Krnl::panic(char const*)>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	90                   	nop
c0017a1d:	83 c4 14             	add    esp,0x14
c0017a20:	5b                   	pop    ebx
c0017a21:	5e                   	pop    esi
c0017a22:	c3                   	ret    
c0017a23:	90                   	nop

c0017a24 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017a24:	b8 00 00 00 00       	mov    eax,0x0
c0017a29:	c3                   	ret    

c0017a2a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017a2a:	83 ec 1c             	sub    esp,0x1c
c0017a2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017a34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a38:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0017a3d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017a42:	83 ec 08             	sub    esp,0x8
c0017a45:	52                   	push   edx
c0017a46:	50                   	push   eax
c0017a47:	e8 a0 70 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017a53:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0017a58:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017a5d:	83 ec 04             	sub    esp,0x4
c0017a60:	6a 01                	push   0x1
c0017a62:	52                   	push   edx
c0017a63:	50                   	push   eax
c0017a64:	e8 99 71 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	90                   	nop
c0017a6d:	83 c4 1c             	add    esp,0x1c
c0017a70:	c3                   	ret    
c0017a71:	90                   	nop

c0017a72 <ACPI::open(int, int, void*)>:
c0017a72:	53                   	push   ebx
c0017a73:	83 ec 28             	sub    esp,0x28
c0017a76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a7a:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a85:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017a8b:	84 c0                	test   al,al
c0017a8d:	74 67                	je     c0017af6 <ACPI::open(int, int, void*)+0x84>
c0017a8f:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017a97:	83 ec 0c             	sub    esp,0xc
c0017a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a9e:	e8 31 7a ff ff       	call   c000f4d4 <malloc>
c0017aa3:	83 c4 10             	add    esp,0x10
c0017aa6:	89 c3                	mov    ebx,eax
c0017aa8:	83 ec 0c             	sub    esp,0xc
c0017aab:	53                   	push   ebx
c0017aac:	e8 47 9e 00 00       	call   c00218f8 <PCI::PCI()>
c0017ab1:	83 c4 10             	add    esp,0x10
c0017ab4:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017ab8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017abc:	83 ec 08             	sub    esp,0x8
c0017abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ac3:	50                   	push   eax
c0017ac4:	e8 53 c1 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ad2:	83 c0 08             	add    eax,0x8
c0017ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ad7:	6a 00                	push   0x0
c0017ad9:	6a 00                	push   0x0
c0017adb:	6a 00                	push   0x0
c0017add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017ae1:	ff d0                	call   eax
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	83 ec 0c             	sub    esp,0xc
c0017ae9:	68 74 9c 02 c0       	push   0xc0029c74
c0017aee:	e8 3a ad ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0017af3:	83 c4 10             	add    esp,0x10
c0017af6:	83 ec 0c             	sub    esp,0xc
c0017af9:	68 7f 9c 02 c0       	push   0xc0029c7f
c0017afe:	e8 9f 41 00 00       	call   c001bca2 <Thr::loadKernelSymbolTable(char const*)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c0017b0c:	83 ec 08             	sub    esp,0x8
c0017b0f:	6a 01                	push   0x1
c0017b11:	68 9d 9c 02 c0       	push   0xc0029c9d
c0017b16:	e8 47 4c 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c0017b1b:	83 c4 10             	add    esp,0x10
c0017b1e:	83 ec 08             	sub    esp,0x8
c0017b21:	53                   	push   ebx
c0017b22:	50                   	push   eax
c0017b23:	e8 49 4e 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c0017b31:	83 ec 08             	sub    esp,0x8
c0017b34:	6a 01                	push   0x1
c0017b36:	68 ba 9c 02 c0       	push   0xc0029cba
c0017b3b:	e8 22 4c 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	83 ec 08             	sub    esp,0x8
c0017b46:	53                   	push   ebx
c0017b47:	50                   	push   eax
c0017b48:	e8 24 4e 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0017b55:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b5b:	83 e0 04             	and    eax,0x4
c0017b5e:	84 c0                	test   al,al
c0017b60:	0f 84 d6 00 00 00    	je     c0017c3c <ACPI::open(int, int, void*)+0x1ca>
c0017b66:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b75:	e8 5a 79 ff ff       	call   c000f4d4 <malloc>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	89 c3                	mov    ebx,eax
c0017b7f:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0017b84:	83 ec 04             	sub    esp,0x4
c0017b87:	50                   	push   eax
c0017b88:	68 d7 9c 02 c0       	push   0xc0029cd7
c0017b8d:	53                   	push   ebx
c0017b8e:	e8 c9 b1 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c0017b93:	83 c4 10             	add    esp,0x10
c0017b96:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017b9a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b9f:	74 17                	je     c0017bb8 <ACPI::open(int, int, void*)+0x146>
c0017ba1:	83 ec 0c             	sub    esp,0xc
c0017ba4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ba8:	e8 81 b4 ff ff       	call   c001302e <File::exists()>
c0017bad:	83 c4 10             	add    esp,0x10
c0017bb0:	84 c0                	test   al,al
c0017bb2:	74 04                	je     c0017bb8 <ACPI::open(int, int, void*)+0x146>
c0017bb4:	b0 01                	mov    al,0x1
c0017bb6:	eb 02                	jmp    c0017bba <ACPI::open(int, int, void*)+0x148>
c0017bb8:	b0 00                	mov    al,0x0
c0017bba:	84 c0                	test   al,al
c0017bbc:	74 25                	je     c0017be3 <ACPI::open(int, int, void*)+0x171>
c0017bbe:	8b 1d 08 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca08
c0017bc4:	83 ec 08             	sub    esp,0x8
c0017bc7:	6a 01                	push   0x1
c0017bc9:	68 d7 9c 02 c0       	push   0xc0029cd7
c0017bce:	e8 8f 4b 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	83 ec 08             	sub    esp,0x8
c0017bd9:	53                   	push   ebx
c0017bda:	50                   	push   eax
c0017bdb:	e8 91 4d 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017be8:	74 1e                	je     c0017c08 <ACPI::open(int, int, void*)+0x196>
c0017bea:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017bef:	74 17                	je     c0017c08 <ACPI::open(int, int, void*)+0x196>
c0017bf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bf7:	83 c0 08             	add    eax,0x8
c0017bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bfc:	83 ec 0c             	sub    esp,0xc
c0017bff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c03:	ff d0                	call   eax
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	a1 c8 d2 02 c0       	mov    eax,ds:0xc002d2c8
c0017c0d:	83 ec 08             	sub    esp,0x8
c0017c10:	68 f4 9c 02 c0       	push   0xc0029cf4
c0017c15:	50                   	push   eax
c0017c16:	e8 9f f6 ff ff       	call   c00172ba <findDataTable(unsigned char*, char*)>
c0017c1b:	83 c4 10             	add    esp,0x10
c0017c1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c22:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017c27:	74 13                	je     c0017c3c <ACPI::open(int, int, void*)+0x1ca>
c0017c29:	83 ec 08             	sub    esp,0x8
c0017c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c34:	e8 f1 fd ff ff       	call   c0017a2a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017c39:	83 c4 10             	add    esp,0x10
c0017c3c:	b8 00 00 00 00       	mov    eax,0x0
c0017c41:	83 c4 28             	add    esp,0x28
c0017c44:	5b                   	pop    ebx
c0017c45:	c3                   	ret    

c0017c46 <ACPI::sleep()>:
c0017c46:	83 ec 0c             	sub    esp,0xc
c0017c49:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c0017c4e:	85 c0                	test   eax,eax
c0017c50:	74 07                	je     c0017c59 <ACPI::sleep()+0x13>
c0017c52:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c0017c57:	ff d0                	call   eax
c0017c59:	90                   	nop
c0017c5a:	83 c4 0c             	add    esp,0xc
c0017c5d:	c3                   	ret    

c0017c5e <CPU::close(int, int, void*)>:
c0017c5e:	31 c0                	xor    eax,eax
c0017c60:	c3                   	ret    
c0017c61:	90                   	nop

c0017c62 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017c62:	55                   	push   ebp
c0017c63:	57                   	push   edi
c0017c64:	56                   	push   esi
c0017c65:	53                   	push   ebx
c0017c66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c6e:	89 ce                	mov    esi,ecx
c0017c70:	89 d5                	mov    ebp,edx
c0017c72:	80 f9 04             	cmp    cl,0x4
c0017c75:	75 28                	jne    c0017c9f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017c77:	8d 42 f9             	lea    eax,[edx-0x7]
c0017c7a:	3c 03                	cmp    al,0x3
c0017c7c:	0f 86 63 01 00 00    	jbe    c0017de5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c82:	80 fa 03             	cmp    dl,0x3
c0017c85:	0f 84 5a 01 00 00    	je     c0017de5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c8b:	8d 7a f2             	lea    edi,[edx-0xe]
c0017c8e:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017c93:	89 fb                	mov    ebx,edi
c0017c95:	80 fb 01             	cmp    bl,0x1
c0017c98:	77 4e                	ja     c0017ce8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017c9a:	e9 52 01 00 00       	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c9f:	80 f9 05             	cmp    cl,0x5
c0017ca2:	75 4d                	jne    c0017cf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017ca4:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017ca9:	80 fa 03             	cmp    dl,0x3
c0017cac:	0f 86 3f 01 00 00    	jbe    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cb2:	8d 7a fa             	lea    edi,[edx-0x6]
c0017cb5:	b8 50 be 02 c0       	mov    eax,0xc002be50
c0017cba:	89 fb                	mov    ebx,edi
c0017cbc:	80 fb 01             	cmp    bl,0x1
c0017cbf:	0f 86 2c 01 00 00    	jbe    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc5:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017cca:	80 fa 08             	cmp    dl,0x8
c0017ccd:	0f 84 1e 01 00 00    	je     c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd3:	89 d7                	mov    edi,edx
c0017cd5:	b8 70 be 02 c0       	mov    eax,0xc002be70
c0017cda:	83 e7 fb             	and    edi,0xfffffffb
c0017cdd:	89 fb                	mov    ebx,edi
c0017cdf:	80 fb 09             	cmp    bl,0x9
c0017ce2:	0f 84 09 01 00 00    	je     c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce8:	31 c0                	xor    eax,eax
c0017cea:	89 eb                	mov    ebx,ebp
c0017cec:	0f b6 fb             	movzx  edi,bl
c0017cef:	eb 30                	jmp    c0017d21 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017cf1:	31 c0                	xor    eax,eax
c0017cf3:	80 f9 06             	cmp    cl,0x6
c0017cf6:	75 f2                	jne    c0017cea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017cf8:	80 fa 0a             	cmp    dl,0xa
c0017cfb:	77 ed                	ja     c0017cea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017cfd:	bf de 05 00 00       	mov    edi,0x5de
c0017d02:	0f a3 d7             	bt     edi,edx
c0017d05:	73 e3                	jae    c0017cea <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017d07:	b8 80 be 02 c0       	mov    eax,0xc002be80
c0017d0c:	e9 e0 00 00 00       	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d11:	39 c7                	cmp    edi,eax
c0017d13:	0f 84 d3 00 00 00    	je     c0017dec <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017d19:	40                   	inc    eax
c0017d1a:	3d d0 00 00 00       	cmp    eax,0xd0
c0017d1f:	74 09                	je     c0017d2a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017d21:	89 f3                	mov    ebx,esi
c0017d23:	80 fb 0f             	cmp    bl,0xf
c0017d26:	75 f1                	jne    c0017d19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017d28:	eb e7                	jmp    c0017d11 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017d2a:	80 f9 10             	cmp    cl,0x10
c0017d2d:	75 14                	jne    c0017d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017d2f:	8d 42 fc             	lea    eax,[edx-0x4]
c0017d32:	83 e0 fb             	and    eax,0xfffffffb
c0017d35:	3c 02                	cmp    al,0x2
c0017d37:	76 34                	jbe    c0017d6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017d39:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017d3e:	80 fa 02             	cmp    dl,0x2
c0017d41:	eb 24                	jmp    c0017d67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017d43:	80 f9 11             	cmp    cl,0x11
c0017d46:	75 13                	jne    c0017d5b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017d48:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017d4d:	80 fa 03             	cmp    dl,0x3
c0017d50:	0f 85 9b 00 00 00    	jne    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d56:	e9 91 00 00 00       	jmp    c0017dec <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017d5b:	80 f9 12             	cmp    cl,0x12
c0017d5e:	75 14                	jne    c0017d74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017d60:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017d65:	fe ca                	dec    dl
c0017d67:	0f 85 84 00 00 00    	jne    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d6d:	b8 a0 be 02 c0       	mov    eax,0xc002bea0
c0017d72:	eb 7d                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d74:	80 f9 14             	cmp    cl,0x14
c0017d77:	75 12                	jne    c0017d8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017d79:	4a                   	dec    edx
c0017d7a:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017d7f:	80 fa 01             	cmp    dl,0x1
c0017d82:	77 6d                	ja     c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d84:	b8 b0 be 02 c0       	mov    eax,0xc002beb0
c0017d89:	eb 66                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d8b:	80 f9 15             	cmp    cl,0x15
c0017d8e:	75 31                	jne    c0017dc1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017d90:	b8 c0 be 02 c0       	mov    eax,0xc002bec0
c0017d95:	80 fa 01             	cmp    dl,0x1
c0017d98:	74 57                	je     c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d9a:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017d9f:	80 fa 13             	cmp    dl,0x13
c0017da2:	76 0c                	jbe    c0017db0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017da4:	80 fa 30             	cmp    dl,0x30
c0017da7:	75 48                	jne    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017da9:	b8 e0 be 02 c0       	mov    eax,0xc002bee0
c0017dae:	eb 41                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017db0:	b9 04 00 09 00       	mov    ecx,0x90004
c0017db5:	0f a3 d1             	bt     ecx,edx
c0017db8:	73 37                	jae    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dba:	b8 d0 be 02 c0       	mov    eax,0xc002bed0
c0017dbf:	eb 30                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dc1:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017dc6:	80 f9 16             	cmp    cl,0x16
c0017dc9:	75 26                	jne    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dcb:	b8 f0 be 02 c0       	mov    eax,0xc002bef0
c0017dd0:	84 d2                	test   dl,dl
c0017dd2:	74 1d                	je     c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dd4:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017dd9:	80 fa 30             	cmp    dl,0x30
c0017ddc:	75 13                	jne    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dde:	b8 00 bf 02 c0       	mov    eax,0xc002bf00
c0017de3:	eb 0c                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017de5:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017dea:	eb 05                	jmp    c0017df1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dec:	b8 90 be 02 c0       	mov    eax,0xc002be90
c0017df1:	5b                   	pop    ebx
c0017df2:	5e                   	pop    esi
c0017df3:	5f                   	pop    edi
c0017df4:	5d                   	pop    ebp
c0017df5:	c3                   	ret    

c0017df6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017df6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017dfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017dfe:	80 f9 04             	cmp    cl,0x4
c0017e01:	75 6b                	jne    c0017e6e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017e03:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e08:	80 fa 01             	cmp    dl,0x1
c0017e0b:	0f 86 92 02 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e11:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e16:	80 fa 02             	cmp    dl,0x2
c0017e19:	0f 84 84 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1f:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e24:	80 fa 03             	cmp    dl,0x3
c0017e27:	0f 84 76 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2d:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017e32:	80 fa 04             	cmp    dl,0x4
c0017e35:	0f 84 68 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3b:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017e40:	80 fa 05             	cmp    dl,0x5
c0017e43:	0f 84 5a 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e49:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e4e:	80 fa 07             	cmp    dl,0x7
c0017e51:	0f 84 4c 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e57:	83 ea 08             	sub    edx,0x8
c0017e5a:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017e5f:	80 fa 01             	cmp    dl,0x1
c0017e62:	0f 87 3b 02 00 00    	ja     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e68:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017e6d:	c3                   	ret    
c0017e6e:	80 f9 05             	cmp    cl,0x5
c0017e71:	75 45                	jne    c0017eb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017e73:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017e76:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017e7b:	80 f9 02             	cmp    cl,0x2
c0017e7e:	0f 86 1f 02 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e84:	80 fa 04             	cmp    dl,0x4
c0017e87:	0f 84 f3 01 00 00    	je     c0018080 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017e8d:	80 fa 07             	cmp    dl,0x7
c0017e90:	0f 84 0d 02 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e96:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017e9b:	80 fa 08             	cmp    dl,0x8
c0017e9e:	0f 84 ff 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ea4:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0017ea9:	80 fa 09             	cmp    dl,0x9
c0017eac:	0f 85 f1 01 00 00    	jne    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb2:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017eb7:	c3                   	ret    
c0017eb8:	80 f9 06             	cmp    cl,0x6
c0017ebb:	0f 85 85 01 00 00    	jne    c0018046 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017ec1:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017ec6:	80 fa 01             	cmp    dl,0x1
c0017ec9:	0f 84 d4 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ecf:	8d 42 fb             	lea    eax,[edx-0x5]
c0017ed2:	3c 01                	cmp    al,0x1
c0017ed4:	0f 86 ac 01 00 00    	jbe    c0018086 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017eda:	80 fa 03             	cmp    dl,0x3
c0017edd:	0f 84 a3 01 00 00    	je     c0018086 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017ee3:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017ee6:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017eeb:	80 f9 01             	cmp    cl,0x1
c0017eee:	0f 86 af 01 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef4:	80 fa 09             	cmp    dl,0x9
c0017ef7:	0f 84 8f 01 00 00    	je     c001808c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017efd:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017f00:	80 f9 01             	cmp    cl,0x1
c0017f03:	0f 86 9a 01 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f09:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017f0e:	80 fa 0d             	cmp    dl,0xd
c0017f11:	0f 84 8c 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f17:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017f1c:	80 fa 0e             	cmp    dl,0xe
c0017f1f:	0f 84 7e 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f25:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017f2a:	80 fa 0f             	cmp    dl,0xf
c0017f2d:	0f 84 70 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f33:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017f38:	80 fa 15             	cmp    dl,0x15
c0017f3b:	0f 84 62 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f41:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017f44:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017f49:	80 f9 01             	cmp    cl,0x1
c0017f4c:	0f 86 51 01 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f52:	80 fa 1a             	cmp    dl,0x1a
c0017f55:	0f 84 37 01 00 00    	je     c0018092 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017f5b:	80 fa 1c             	cmp    dl,0x1c
c0017f5e:	0f 84 34 01 00 00    	je     c0018098 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017f64:	80 fa 1d             	cmp    dl,0x1d
c0017f67:	0f 84 36 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f6d:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017f72:	80 fa 25             	cmp    dl,0x25
c0017f75:	0f 84 28 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f7b:	8d 4a da             	lea    ecx,[edx-0x26]
c0017f7e:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017f83:	80 f9 01             	cmp    cl,0x1
c0017f86:	0f 86 17 01 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8c:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017f91:	80 fa 2a             	cmp    dl,0x2a
c0017f94:	0f 84 09 01 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f9a:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017f9f:	80 fa 2c             	cmp    dl,0x2c
c0017fa2:	0f 84 fb 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa8:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017fad:	80 fa 2d             	cmp    dl,0x2d
c0017fb0:	0f 84 ed 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb6:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017fbb:	80 fa 2e             	cmp    dl,0x2e
c0017fbe:	0f 84 df 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fc4:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017fc9:	80 fa 2f             	cmp    dl,0x2f
c0017fcc:	0f 84 d1 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fd2:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017fd5:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017fda:	80 f9 01             	cmp    cl,0x1
c0017fdd:	0f 86 c0 00 00 00    	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fe3:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017fe8:	80 fa 37             	cmp    dl,0x37
c0017feb:	0f 84 b2 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ff1:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017ff6:	80 fa 3a             	cmp    dl,0x3a
c0017ff9:	0f 84 a4 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fff:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0018004:	80 fa 3c             	cmp    dl,0x3c
c0018007:	0f 84 96 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001800d:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0018012:	80 fa 3d             	cmp    dl,0x3d
c0018015:	0f 84 88 00 00 00    	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001801b:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0018020:	80 fa 3e             	cmp    dl,0x3e
c0018023:	74 7e                	je     c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018025:	8d 42 bb             	lea    eax,[edx-0x45]
c0018028:	3c 01                	cmp    al,0x1
c001802a:	76 72                	jbe    c001809e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001802c:	80 fa 3f             	cmp    dl,0x3f
c001802f:	74 6d                	je     c001809e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018031:	80 fa 4a             	cmp    dl,0x4a
c0018034:	74 0a                	je     c0018040 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018036:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c001803b:	80 fa 4d             	cmp    dl,0x4d
c001803e:	75 63                	jne    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018040:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0018045:	c3                   	ret    
c0018046:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c001804b:	80 f9 0b             	cmp    cl,0xb
c001804e:	75 0a                	jne    c001805a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018050:	fe ca                	dec    dl
c0018052:	75 4f                	jne    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018054:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0018059:	c3                   	ret    
c001805a:	80 f9 0f             	cmp    cl,0xf
c001805d:	75 44                	jne    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001805f:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0018064:	80 fa 02             	cmp    dl,0x2
c0018067:	76 3a                	jbe    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018069:	8d 42 fd             	lea    eax,[edx-0x3]
c001806c:	3c 01                	cmp    al,0x1
c001806e:	76 0a                	jbe    c001807a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018070:	b8 3e a1 02 c0       	mov    eax,0xc002a13e
c0018075:	80 fa 06             	cmp    dl,0x6
c0018078:	75 29                	jne    c00180a3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001807a:	b8 10 be 02 c0       	mov    eax,0xc002be10
c001807f:	c3                   	ret    
c0018080:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0018085:	c3                   	ret    
c0018086:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c001808b:	c3                   	ret    
c001808c:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0018091:	c3                   	ret    
c0018092:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0018097:	c3                   	ret    
c0018098:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c001809d:	c3                   	ret    
c001809e:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c00180a3:	c3                   	ret    

c00180a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00180a4:	60                   	pusha  
c00180a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00180a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180b1:	9c                   	pushf  
c00180b2:	fa                   	cli    
c00180b3:	0f 09                	wbinvd 
c00180b5:	0f 30                	wrmsr  
c00180b7:	9d                   	popf   
c00180b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180bc:	89 02                	mov    DWORD PTR [edx],eax
c00180be:	61                   	popa   
c00180bf:	c3                   	ret    

c00180c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00180c0:	60                   	pusha  
c00180c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00180c5:	9c                   	pushf  
c00180c6:	fa                   	cli    
c00180c7:	0f 09                	wbinvd 
c00180c9:	31 c0                	xor    eax,eax
c00180cb:	31 d2                	xor    edx,edx
c00180cd:	0f 32                	rdmsr  
c00180cf:	9d                   	popf   
c00180d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180d4:	89 02                	mov    DWORD PTR [edx],eax
c00180d6:	61                   	popa   
c00180d7:	c3                   	ret    

c00180d8 <CPU::AMD_K6_writeback(int, int, int)>:
c00180d8:	56                   	push   esi
c00180d9:	53                   	push   ebx
c00180da:	83 ec 10             	sub    esp,0x10
c00180dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00180e6:	75 5d                	jne    c0018145 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00180e8:	83 f8 08             	cmp    eax,0x8
c00180eb:	75 09                	jne    c00180f6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00180ed:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00180f2:	7e 13                	jle    c0018107 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00180f4:	eb 30                	jmp    c0018126 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00180f6:	83 f8 06             	cmp    eax,0x6
c00180f9:	7c 4a                	jl     c0018145 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00180fb:	83 f8 07             	cmp    eax,0x7
c00180fe:	7e 07                	jle    c0018107 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018100:	83 f8 09             	cmp    eax,0x9
c0018103:	74 21                	je     c0018126 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018105:	eb 3e                	jmp    c0018145 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018107:	89 e6                	mov    esi,esp
c0018109:	8b 1d 44 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca44
c001810f:	56                   	push   esi
c0018110:	c1 eb 15             	shr    ebx,0x15
c0018113:	68 82 00 00 c0       	push   0xc0000082
c0018118:	83 e3 7e             	and    ebx,0x7e
c001811b:	e8 a0 ff ff ff       	call   c00180c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018120:	56                   	push   esi
c0018121:	6a 00                	push   0x0
c0018123:	53                   	push   ebx
c0018124:	eb 12                	jmp    c0018138 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018126:	89 e3                	mov    ebx,esp
c0018128:	53                   	push   ebx
c0018129:	68 82 00 00 c0       	push   0xc0000082
c001812e:	e8 8d ff ff ff       	call   c00180c0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018133:	53                   	push   ebx
c0018134:	6a 00                	push   0x0
c0018136:	6a 00                	push   0x0
c0018138:	68 82 00 00 c0       	push   0xc0000082
c001813d:	e8 62 ff ff ff       	call   c00180a4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018142:	83 c4 18             	add    esp,0x18
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	5b                   	pop    ebx
c0018149:	5e                   	pop    esi
c001814a:	c3                   	ret    
c001814b:	90                   	nop

c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001814c:	55                   	push   ebp
c001814d:	57                   	push   edi
c001814e:	56                   	push   esi
c001814f:	53                   	push   ebx
c0018150:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018154:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018158:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001815c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018160:	39 05 20 bf 02 c0    	cmp    DWORD PTR ds:0xc002bf20,eax
c0018166:	75 23                	jne    c001818b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018168:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c001816d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018171:	89 06                	mov    DWORD PTR [esi],eax
c0018173:	a1 28 d5 02 c0       	mov    eax,ds:0xc002d528
c0018178:	89 07                	mov    DWORD PTR [edi],eax
c001817a:	a1 24 d5 02 c0       	mov    eax,ds:0xc002d524
c001817f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018182:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c0018187:	89 02                	mov    DWORD PTR [edx],eax
c0018189:	eb 3f                	jmp    c00181ca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001818b:	31 c9                	xor    ecx,ecx
c001818d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018191:	0f a2                	cpuid  
c0018193:	89 06                	mov    DWORD PTR [esi],eax
c0018195:	89 1f                	mov    DWORD PTR [edi],ebx
c0018197:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001819b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001819e:	89 10                	mov    DWORD PTR [eax],edx
c00181a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181a4:	a3 20 bf 02 c0       	mov    ds:0xc002bf20,eax
c00181a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00181ab:	a3 2c d5 02 c0       	mov    ds:0xc002d52c,eax
c00181b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00181b2:	a3 28 d5 02 c0       	mov    ds:0xc002d528,eax
c00181b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00181ba:	a3 24 d5 02 c0       	mov    ds:0xc002d524,eax
c00181bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00181c5:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c00181ca:	5b                   	pop    ebx
c00181cb:	5e                   	pop    esi
c00181cc:	5f                   	pop    edi
c00181cd:	5d                   	pop    ebp
c00181ce:	c3                   	ret    
c00181cf:	90                   	nop

c00181d0 <CPU::cpuidCheckEDX(unsigned int)>:
c00181d0:	83 ec 10             	sub    esp,0x10
c00181d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d7:	50                   	push   eax
c00181d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181dc:	50                   	push   eax
c00181dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181e1:	50                   	push   eax
c00181e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181e6:	50                   	push   eax
c00181e7:	6a 01                	push   0x1
c00181e9:	e8 5e ff ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181f2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00181f6:	0f 95 c0             	setne  al
c00181f9:	83 c4 24             	add    esp,0x24
c00181fc:	c3                   	ret    
c00181fd:	90                   	nop

c00181fe <CPU::cpuidCheckECX(unsigned int)>:
c00181fe:	83 ec 10             	sub    esp,0x10
c0018201:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018205:	50                   	push   eax
c0018206:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001820a:	50                   	push   eax
c001820b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001820f:	50                   	push   eax
c0018210:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018214:	50                   	push   eax
c0018215:	6a 01                	push   0x1
c0018217:	e8 30 ff ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001821c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018220:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018224:	0f 95 c0             	setne  al
c0018227:	83 c4 24             	add    esp,0x24
c001822a:	c3                   	ret    
c001822b:	90                   	nop

c001822c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001822c:	83 ec 10             	sub    esp,0x10
c001822f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018233:	50                   	push   eax
c0018234:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018238:	50                   	push   eax
c0018239:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001823d:	50                   	push   eax
c001823e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018242:	50                   	push   eax
c0018243:	6a 07                	push   0x7
c0018245:	e8 02 ff ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001824a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001824e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018252:	0f 95 c0             	setne  al
c0018255:	83 c4 24             	add    esp,0x24
c0018258:	c3                   	ret    
c0018259:	90                   	nop

c001825a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001825a:	83 ec 10             	sub    esp,0x10
c001825d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018261:	50                   	push   eax
c0018262:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018266:	50                   	push   eax
c0018267:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001826b:	50                   	push   eax
c001826c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018270:	50                   	push   eax
c0018271:	6a 07                	push   0x7
c0018273:	e8 d4 fe ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018278:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001827c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018280:	0f 95 c0             	setne  al
c0018283:	83 c4 24             	add    esp,0x24
c0018286:	c3                   	ret    
c0018287:	90                   	nop

c0018288 <CPU::CPU()>:
c0018288:	83 ec 0c             	sub    esp,0xc
c001828b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001828f:	83 ec 08             	sub    esp,0x8
c0018292:	68 3e a1 02 c0       	push   0xc002a13e
c0018297:	50                   	push   eax
c0018298:	e8 6f bb ff ff       	call   c0013e0c <Device::Device(char const*)>
c001829d:	83 c4 10             	add    esp,0x10
c00182a0:	ba 18 a2 02 c0       	mov    edx,0xc002a218
c00182a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a9:	89 10                	mov    DWORD PTR [eax],edx
c00182ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182af:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00182b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bd:	05 78 01 00 00       	add    eax,0x178
c00182c2:	83 ec 0c             	sub    esp,0xc
c00182c5:	50                   	push   eax
c00182c6:	e8 21 6a ff ff       	call   c000ecec <GDT::GDT()>
c00182cb:	83 c4 10             	add    esp,0x10
c00182ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d2:	05 7c 09 00 00       	add    eax,0x97c
c00182d7:	83 ec 0c             	sub    esp,0xc
c00182da:	50                   	push   eax
c00182db:	e8 6e 6c ff ff       	call   c000ef4e <IDT::IDT()>
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e7:	05 7c 11 00 00       	add    eax,0x117c
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	50                   	push   eax
c00182f0:	e8 79 8e ff ff       	call   c001116e <TSS::TSS()>
c00182f5:	83 c4 10             	add    esp,0x10
c00182f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018307:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018311:	90                   	nop
c0018312:	83 c4 0c             	add    esp,0xc
c0018315:	c3                   	ret    

c0018316 <CPU::displayFeatures()>:
c0018316:	53                   	push   ebx
c0018317:	83 ec 10             	sub    esp,0x10
c001831a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001831e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018324:	68 4c 9e 02 c0       	push   0xc0029e4c
c0018329:	e8 ff a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001832e:	59                   	pop    ecx
c001832f:	58                   	pop    eax
c0018330:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018336:	50                   	push   eax
c0018337:	68 5d 9e 02 c0       	push   0xc0029e5d
c001833c:	e8 ec a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018341:	58                   	pop    eax
c0018342:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018348:	5a                   	pop    edx
c0018349:	c1 e8 0e             	shr    eax,0xe
c001834c:	0f b6 c0             	movzx  eax,al
c001834f:	50                   	push   eax
c0018350:	68 6e 9e 02 c0       	push   0xc0029e6e
c0018355:	e8 d3 a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001835a:	59                   	pop    ecx
c001835b:	58                   	pop    eax
c001835c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018362:	66 c1 e8 06          	shr    ax,0x6
c0018366:	0f b6 c0             	movzx  eax,al
c0018369:	50                   	push   eax
c001836a:	68 7f 9e 02 c0       	push   0xc0029e7f
c001836f:	e8 b9 a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018374:	c7 04 24 1b a3 02 c0 	mov    DWORD PTR [esp],0xc002a31b
c001837b:	e8 ad a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018380:	83 c4 10             	add    esp,0x10
c0018383:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018388:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001838f:	74 05                	je     c0018396 <CPU::displayFeatures()+0x80>
c0018391:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c0018396:	52                   	push   edx
c0018397:	52                   	push   edx
c0018398:	50                   	push   eax
c0018399:	68 90 9e 02 c0       	push   0xc0029e90
c001839e:	e8 8a a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00183ab:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00183b2:	78 05                	js     c00183b9 <CPU::displayFeatures()+0xa3>
c00183b4:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00183b9:	51                   	push   ecx
c00183ba:	51                   	push   ecx
c00183bb:	50                   	push   eax
c00183bc:	68 a7 9e 02 c0       	push   0xc0029ea7
c00183c1:	e8 67 a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00183c6:	83 c4 10             	add    esp,0x10
c00183c9:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00183ce:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00183d5:	75 05                	jne    c00183dc <CPU::displayFeatures()+0xc6>
c00183d7:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00183dc:	52                   	push   edx
c00183dd:	52                   	push   edx
c00183de:	50                   	push   eax
c00183df:	68 be 9e 02 c0       	push   0xc0029ebe
c00183e4:	e8 44 a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00183f1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00183f8:	75 05                	jne    c00183ff <CPU::displayFeatures()+0xe9>
c00183fa:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00183ff:	51                   	push   ecx
c0018400:	51                   	push   ecx
c0018401:	50                   	push   eax
c0018402:	68 d5 9e 02 c0       	push   0xc0029ed5
c0018407:	e8 21 a4 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001840c:	83 c4 10             	add    esp,0x10
c001840f:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c0018414:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001841b:	75 05                	jne    c0018422 <CPU::displayFeatures()+0x10c>
c001841d:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018422:	52                   	push   edx
c0018423:	52                   	push   edx
c0018424:	50                   	push   eax
c0018425:	68 ec 9e 02 c0       	push   0xc0029eec
c001842a:	e8 fe a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001842f:	83 c4 10             	add    esp,0x10
c0018432:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c0018437:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001843e:	75 05                	jne    c0018445 <CPU::displayFeatures()+0x12f>
c0018440:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018445:	51                   	push   ecx
c0018446:	51                   	push   ecx
c0018447:	50                   	push   eax
c0018448:	68 03 9f 02 c0       	push   0xc0029f03
c001844d:	e8 db a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c001845a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018461:	75 05                	jne    c0018468 <CPU::displayFeatures()+0x152>
c0018463:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018468:	52                   	push   edx
c0018469:	52                   	push   edx
c001846a:	50                   	push   eax
c001846b:	68 1a 9f 02 c0       	push   0xc0029f1a
c0018470:	e8 b8 a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c001847d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018484:	75 05                	jne    c001848b <CPU::displayFeatures()+0x175>
c0018486:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c001848b:	51                   	push   ecx
c001848c:	51                   	push   ecx
c001848d:	50                   	push   eax
c001848e:	68 31 9f 02 c0       	push   0xc0029f31
c0018493:	e8 95 a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00184a0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00184a7:	75 05                	jne    c00184ae <CPU::displayFeatures()+0x198>
c00184a9:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00184ae:	52                   	push   edx
c00184af:	52                   	push   edx
c00184b0:	50                   	push   eax
c00184b1:	68 48 9f 02 c0       	push   0xc0029f48
c00184b6:	e8 72 a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00184bb:	83 c4 10             	add    esp,0x10
c00184be:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00184c3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00184ca:	75 05                	jne    c00184d1 <CPU::displayFeatures()+0x1bb>
c00184cc:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00184d1:	51                   	push   ecx
c00184d2:	51                   	push   ecx
c00184d3:	50                   	push   eax
c00184d4:	68 5f 9f 02 c0       	push   0xc0029f5f
c00184d9:	e8 4f a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c00184e6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00184ed:	75 05                	jne    c00184f4 <CPU::displayFeatures()+0x1de>
c00184ef:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c00184f4:	52                   	push   edx
c00184f5:	52                   	push   edx
c00184f6:	50                   	push   eax
c00184f7:	68 76 9f 02 c0       	push   0xc0029f76
c00184fc:	e8 2c a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018501:	83 c4 10             	add    esp,0x10
c0018504:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c0018509:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018510:	75 05                	jne    c0018517 <CPU::displayFeatures()+0x201>
c0018512:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018517:	51                   	push   ecx
c0018518:	51                   	push   ecx
c0018519:	50                   	push   eax
c001851a:	68 8d 9f 02 c0       	push   0xc0029f8d
c001851f:	e8 09 a3 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018524:	83 c4 10             	add    esp,0x10
c0018527:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c001852c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018533:	75 05                	jne    c001853a <CPU::displayFeatures()+0x224>
c0018535:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c001853a:	52                   	push   edx
c001853b:	52                   	push   edx
c001853c:	50                   	push   eax
c001853d:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018542:	e8 e6 a2 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0018547:	83 c4 10             	add    esp,0x10
c001854a:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c001854f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018556:	78 05                	js     c001855d <CPU::displayFeatures()+0x247>
c0018558:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c001855d:	51                   	push   ecx
c001855e:	51                   	push   ecx
c001855f:	50                   	push   eax
c0018560:	68 bb 9f 02 c0       	push   0xc0029fbb
c0018565:	e8 c3 a2 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	b8 18 8a 02 c0       	mov    eax,0xc0028a18
c0018572:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018579:	75 05                	jne    c0018580 <CPU::displayFeatures()+0x26a>
c001857b:	b8 1c 8a 02 c0       	mov    eax,0xc0028a1c
c0018580:	52                   	push   edx
c0018581:	52                   	push   edx
c0018582:	50                   	push   eax
c0018583:	68 d2 9f 02 c0       	push   0xc0029fd2
c0018588:	e8 a0 a2 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001858d:	83 c4 18             	add    esp,0x18
c0018590:	5b                   	pop    ebx
c0018591:	c3                   	ret    

c0018592 <CPU::detectFeatures()>:
c0018592:	55                   	push   ebp
c0018593:	57                   	push   edi
c0018594:	56                   	push   esi
c0018595:	53                   	push   ebx
c0018596:	83 ec 50             	sub    esp,0x50
c0018599:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001859d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00185a7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00185ae:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00185b4:	6a 0d                	push   0xd
c00185b6:	6a 00                	push   0x0
c00185b8:	57                   	push   edi
c00185b9:	e8 cd 80 fe ff       	call   c000068b <memset>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00185c6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00185cd:	0f 84 20 09 00 00    	je     c0018ef3 <CPU::detectFeatures()+0x961>
c00185d3:	83 ec 0c             	sub    esp,0xc
c00185d6:	6a 10                	push   0x10
c00185d8:	e8 f3 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c00185dd:	83 e0 01             	and    eax,0x1
c00185e0:	8d 14 00             	lea    edx,[eax+eax*1]
c00185e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185e9:	83 e0 fd             	and    eax,0xfffffffd
c00185ec:	09 d0                	or     eax,edx
c00185ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185f4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00185fb:	e8 d0 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c0018600:	83 e0 01             	and    eax,0x1
c0018603:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001860a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018610:	83 e0 fb             	and    eax,0xfffffffb
c0018613:	09 d0                	or     eax,edx
c0018615:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001861b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018622:	e8 a9 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c0018627:	83 e0 01             	and    eax,0x1
c001862a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018631:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018637:	83 e0 f7             	and    eax,0xfffffff7
c001863a:	09 d0                	or     eax,edx
c001863c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018642:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018649:	e8 82 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c001864e:	83 e0 01             	and    eax,0x1
c0018651:	c1 e0 04             	shl    eax,0x4
c0018654:	88 c2                	mov    dl,al
c0018656:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001865c:	83 e0 ef             	and    eax,0xffffffef
c001865f:	09 d0                	or     eax,edx
c0018661:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018667:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001866e:	e8 5d fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c0018673:	83 e0 01             	and    eax,0x1
c0018676:	c1 e0 05             	shl    eax,0x5
c0018679:	88 c2                	mov    dl,al
c001867b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018681:	83 e0 df             	and    eax,0xffffffdf
c0018684:	09 d0                	or     eax,edx
c0018686:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001868c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018693:	e8 38 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c0018698:	83 e0 01             	and    eax,0x1
c001869b:	8d 14 00             	lea    edx,[eax+eax*1]
c001869e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00186a4:	83 e0 fd             	and    eax,0xfffffffd
c00186a7:	09 d0                	or     eax,edx
c00186a9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00186af:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00186b6:	e8 15 fb ff ff       	call   c00181d0 <CPU::cpuidCheckEDX(unsigned int)>
c00186bb:	83 e0 01             	and    eax,0x1
c00186be:	c1 e0 06             	shl    eax,0x6
c00186c1:	88 c2                	mov    dl,al
c00186c3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00186c9:	83 e0 bf             	and    eax,0xffffffbf
c00186cc:	09 d0                	or     eax,edx
c00186ce:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00186d4:	58                   	pop    eax
c00186d5:	8d 74 24 28          	lea    esi,[esp+0x28]
c00186d9:	56                   	push   esi
c00186da:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00186de:	55                   	push   ebp
c00186df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00186e3:	50                   	push   eax
c00186e4:	8d 54 24 28          	lea    edx,[esp+0x28]
c00186e8:	52                   	push   edx
c00186e9:	6a 00                	push   0x0
c00186eb:	e8 5c fa ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186f0:	83 c4 1c             	add    esp,0x1c
c00186f3:	6a 04                	push   0x4
c00186f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00186f9:	50                   	push   eax
c00186fa:	57                   	push   edi
c00186fb:	e8 55 7f fe ff       	call   c0000655 <memcpy>
c0018700:	83 c4 0c             	add    esp,0xc
c0018703:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018709:	6a 04                	push   0x4
c001870b:	56                   	push   esi
c001870c:	50                   	push   eax
c001870d:	e8 43 7f fe ff       	call   c0000655 <memcpy>
c0018712:	83 c4 0c             	add    esp,0xc
c0018715:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001871b:	6a 04                	push   0x4
c001871d:	55                   	push   ebp
c001871e:	50                   	push   eax
c001871f:	e8 31 7f fe ff       	call   c0000655 <memcpy>
c0018724:	58                   	pop    eax
c0018725:	5a                   	pop    edx
c0018726:	68 e9 9f 02 c0       	push   0xc0029fe9
c001872b:	57                   	push   edi
c001872c:	e8 4a 80 fe ff       	call   c000077b <strcmp>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	85 c0                	test   eax,eax
c0018736:	75 0f                	jne    c0018747 <CPU::detectFeatures()+0x1b5>
c0018738:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018742:	e9 22 02 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018747:	50                   	push   eax
c0018748:	50                   	push   eax
c0018749:	68 f6 9f 02 c0       	push   0xc0029ff6
c001874e:	57                   	push   edi
c001874f:	e8 27 80 fe ff       	call   c000077b <strcmp>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	85 c0                	test   eax,eax
c0018759:	74 dd                	je     c0018738 <CPU::detectFeatures()+0x1a6>
c001875b:	51                   	push   ecx
c001875c:	51                   	push   ecx
c001875d:	68 03 a0 02 c0       	push   0xc002a003
c0018762:	57                   	push   edi
c0018763:	e8 13 80 fe ff       	call   c000077b <strcmp>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	85 c0                	test   eax,eax
c001876d:	74 2a                	je     c0018799 <CPU::detectFeatures()+0x207>
c001876f:	52                   	push   edx
c0018770:	52                   	push   edx
c0018771:	68 10 a0 02 c0       	push   0xc002a010
c0018776:	57                   	push   edi
c0018777:	e8 ff 7f fe ff       	call   c000077b <strcmp>
c001877c:	83 c4 10             	add    esp,0x10
c001877f:	85 c0                	test   eax,eax
c0018781:	74 16                	je     c0018799 <CPU::detectFeatures()+0x207>
c0018783:	50                   	push   eax
c0018784:	50                   	push   eax
c0018785:	68 1d a0 02 c0       	push   0xc002a01d
c001878a:	57                   	push   edi
c001878b:	e8 eb 7f fe ff       	call   c000077b <strcmp>
c0018790:	83 c4 10             	add    esp,0x10
c0018793:	85 c0                	test   eax,eax
c0018795:	74 48                	je     c00187df <CPU::detectFeatures()+0x24d>
c0018797:	eb 0f                	jmp    c00187a8 <CPU::detectFeatures()+0x216>
c0018799:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00187a3:	e9 c1 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c00187a8:	50                   	push   eax
c00187a9:	50                   	push   eax
c00187aa:	68 2a a0 02 c0       	push   0xc002a02a
c00187af:	57                   	push   edi
c00187b0:	e8 c6 7f fe ff       	call   c000077b <strcmp>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	85 c0                	test   eax,eax
c00187ba:	74 23                	je     c00187df <CPU::detectFeatures()+0x24d>
c00187bc:	50                   	push   eax
c00187bd:	50                   	push   eax
c00187be:	68 37 a0 02 c0       	push   0xc002a037
c00187c3:	57                   	push   edi
c00187c4:	e8 b2 7f fe ff       	call   c000077b <strcmp>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	85 c0                	test   eax,eax
c00187ce:	75 1e                	jne    c00187ee <CPU::detectFeatures()+0x25c>
c00187d0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00187da:	e9 8a 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c00187df:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00187e9:	e9 7b 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c00187ee:	50                   	push   eax
c00187ef:	50                   	push   eax
c00187f0:	68 44 a0 02 c0       	push   0xc002a044
c00187f5:	57                   	push   edi
c00187f6:	e8 80 7f fe ff       	call   c000077b <strcmp>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	85 c0                	test   eax,eax
c0018800:	75 0f                	jne    c0018811 <CPU::detectFeatures()+0x27f>
c0018802:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001880c:	e9 58 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018811:	50                   	push   eax
c0018812:	50                   	push   eax
c0018813:	68 03 a0 02 c0       	push   0xc002a003
c0018818:	57                   	push   edi
c0018819:	e8 5d 7f fe ff       	call   c000077b <strcmp>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	85 c0                	test   eax,eax
c0018823:	75 0f                	jne    c0018834 <CPU::detectFeatures()+0x2a2>
c0018825:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001882f:	e9 35 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018834:	50                   	push   eax
c0018835:	50                   	push   eax
c0018836:	68 51 a0 02 c0       	push   0xc002a051
c001883b:	57                   	push   edi
c001883c:	e8 3a 7f fe ff       	call   c000077b <strcmp>
c0018841:	83 c4 10             	add    esp,0x10
c0018844:	85 c0                	test   eax,eax
c0018846:	75 0f                	jne    c0018857 <CPU::detectFeatures()+0x2c5>
c0018848:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018852:	e9 12 01 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018857:	51                   	push   ecx
c0018858:	51                   	push   ecx
c0018859:	68 5e a0 02 c0       	push   0xc002a05e
c001885e:	57                   	push   edi
c001885f:	e8 17 7f fe ff       	call   c000077b <strcmp>
c0018864:	83 c4 10             	add    esp,0x10
c0018867:	85 c0                	test   eax,eax
c0018869:	75 0f                	jne    c001887a <CPU::detectFeatures()+0x2e8>
c001886b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018875:	e9 ef 00 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c001887a:	52                   	push   edx
c001887b:	52                   	push   edx
c001887c:	68 6b a0 02 c0       	push   0xc002a06b
c0018881:	57                   	push   edi
c0018882:	e8 f4 7e fe ff       	call   c000077b <strcmp>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	85 c0                	test   eax,eax
c001888c:	75 0f                	jne    c001889d <CPU::detectFeatures()+0x30b>
c001888e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018898:	e9 cc 00 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c001889d:	50                   	push   eax
c001889e:	50                   	push   eax
c001889f:	68 78 a0 02 c0       	push   0xc002a078
c00188a4:	57                   	push   edi
c00188a5:	e8 d1 7e fe ff       	call   c000077b <strcmp>
c00188aa:	83 c4 10             	add    esp,0x10
c00188ad:	85 c0                	test   eax,eax
c00188af:	75 0f                	jne    c00188c0 <CPU::detectFeatures()+0x32e>
c00188b1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00188bb:	e9 a9 00 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c00188c0:	50                   	push   eax
c00188c1:	50                   	push   eax
c00188c2:	68 85 a0 02 c0       	push   0xc002a085
c00188c7:	57                   	push   edi
c00188c8:	e8 ae 7e fe ff       	call   c000077b <strcmp>
c00188cd:	83 c4 10             	add    esp,0x10
c00188d0:	85 c0                	test   eax,eax
c00188d2:	75 0f                	jne    c00188e3 <CPU::detectFeatures()+0x351>
c00188d4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00188de:	e9 86 00 00 00       	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c00188e3:	50                   	push   eax
c00188e4:	50                   	push   eax
c00188e5:	68 92 a0 02 c0       	push   0xc002a092
c00188ea:	57                   	push   edi
c00188eb:	e8 8b 7e fe ff       	call   c000077b <strcmp>
c00188f0:	83 c4 10             	add    esp,0x10
c00188f3:	85 c0                	test   eax,eax
c00188f5:	75 0c                	jne    c0018903 <CPU::detectFeatures()+0x371>
c00188f7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018901:	eb 66                	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018903:	50                   	push   eax
c0018904:	50                   	push   eax
c0018905:	68 9f a0 02 c0       	push   0xc002a09f
c001890a:	57                   	push   edi
c001890b:	e8 6b 7e fe ff       	call   c000077b <strcmp>
c0018910:	83 c4 10             	add    esp,0x10
c0018913:	85 c0                	test   eax,eax
c0018915:	75 0c                	jne    c0018923 <CPU::detectFeatures()+0x391>
c0018917:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018921:	eb 46                	jmp    c0018969 <CPU::detectFeatures()+0x3d7>
c0018923:	50                   	push   eax
c0018924:	50                   	push   eax
c0018925:	68 ac a0 02 c0       	push   0xc002a0ac
c001892a:	57                   	push   edi
c001892b:	e8 4b 7e fe ff       	call   c000077b <strcmp>
c0018930:	83 c4 10             	add    esp,0x10
c0018933:	85 c0                	test   eax,eax
c0018935:	74 e0                	je     c0018917 <CPU::detectFeatures()+0x385>
c0018937:	50                   	push   eax
c0018938:	50                   	push   eax
c0018939:	68 b9 a0 02 c0       	push   0xc002a0b9
c001893e:	57                   	push   edi
c001893f:	e8 37 7e fe ff       	call   c000077b <strcmp>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	85 c0                	test   eax,eax
c0018949:	74 cc                	je     c0018917 <CPU::detectFeatures()+0x385>
c001894b:	51                   	push   ecx
c001894c:	51                   	push   ecx
c001894d:	68 c6 a0 02 c0       	push   0xc002a0c6
c0018952:	57                   	push   edi
c0018953:	e8 23 7e fe ff       	call   c000077b <strcmp>
c0018958:	83 c4 10             	add    esp,0x10
c001895b:	85 c0                	test   eax,eax
c001895d:	74 b8                	je     c0018917 <CPU::detectFeatures()+0x385>
c001895f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018969:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001896e:	0f 86 be 00 00 00    	jbe    c0018a32 <CPU::detectFeatures()+0x4a0>
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	68 80 00 00 00       	push   0x80
c001897c:	e8 ab f8 ff ff       	call   c001822c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018981:	83 e0 01             	and    eax,0x1
c0018984:	c1 e0 06             	shl    eax,0x6
c0018987:	88 c2                	mov    dl,al
c0018989:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001898f:	83 e0 bf             	and    eax,0xffffffbf
c0018992:	09 d0                	or     eax,edx
c0018994:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001899a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00189a1:	e8 86 f8 ff ff       	call   c001822c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00189a6:	83 e0 01             	and    eax,0x1
c00189a9:	c1 e0 04             	shl    eax,0x4
c00189ac:	88 c2                	mov    dl,al
c00189ae:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189b4:	83 e0 ef             	and    eax,0xffffffef
c00189b7:	09 d0                	or     eax,edx
c00189b9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189bf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00189c6:	e8 61 f8 ff ff       	call   c001822c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00189cb:	c1 e0 07             	shl    eax,0x7
c00189ce:	88 c2                	mov    dl,al
c00189d0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189d6:	83 e0 7f             	and    eax,0x7f
c00189d9:	09 d0                	or     eax,edx
c00189db:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189e1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00189e8:	e8 6d f8 ff ff       	call   c001825a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00189ed:	83 e0 01             	and    eax,0x1
c00189f0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00189f7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189fd:	83 e0 f7             	and    eax,0xfffffff7
c0018a00:	09 d0                	or     eax,edx
c0018a02:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a08:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018a0f:	e8 46 f8 ff ff       	call   c001825a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	83 e0 01             	and    eax,0x1
c0018a1a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a21:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a27:	83 e0 fb             	and    eax,0xfffffffb
c0018a2a:	09 d0                	or     eax,edx
c0018a2c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a32:	83 ec 0c             	sub    esp,0xc
c0018a35:	56                   	push   esi
c0018a36:	55                   	push   ebp
c0018a37:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018a3b:	57                   	push   edi
c0018a3c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a40:	50                   	push   eax
c0018a41:	6a 01                	push   0x1
c0018a43:	e8 04 f7 ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a48:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018a4c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018a52:	88 ca                	mov    dl,cl
c0018a54:	83 e0 f0             	and    eax,0xfffffff0
c0018a57:	83 e2 0f             	and    edx,0xf
c0018a5a:	09 d0                	or     eax,edx
c0018a5c:	88 ca                	mov    dl,cl
c0018a5e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018a64:	c0 ea 04             	shr    dl,0x4
c0018a67:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018a6b:	0f b6 c2             	movzx  eax,dl
c0018a6e:	83 c4 20             	add    esp,0x20
c0018a71:	c1 e0 06             	shl    eax,0x6
c0018a74:	89 c5                	mov    ebp,eax
c0018a76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a7c:	66 25 3f c0          	and    ax,0xc03f
c0018a80:	09 e8                	or     eax,ebp
c0018a82:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a89:	89 c8                	mov    eax,ecx
c0018a8b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018a91:	c1 e8 08             	shr    eax,0x8
c0018a94:	83 e2 3f             	and    edx,0x3f
c0018a97:	83 e0 0f             	and    eax,0xf
c0018a9a:	89 c5                	mov    ebp,eax
c0018a9c:	c1 e5 06             	shl    ebp,0x6
c0018a9f:	09 d5                	or     ebp,edx
c0018aa1:	89 ea                	mov    edx,ebp
c0018aa3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018aa9:	88 c2                	mov    dl,al
c0018aab:	c0 ea 02             	shr    dl,0x2
c0018aae:	89 d5                	mov    ebp,edx
c0018ab0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018ab6:	83 e2 c0             	and    edx,0xffffffc0
c0018ab9:	09 d5                	or     ebp,edx
c0018abb:	89 ea                	mov    edx,ebp
c0018abd:	89 cd                	mov    ebp,ecx
c0018abf:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018ac5:	c1 ed 0c             	shr    ebp,0xc
c0018ac8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018ace:	83 e5 03             	and    ebp,0x3
c0018ad1:	83 e2 cf             	and    edx,0xffffffcf
c0018ad4:	c1 e5 04             	shl    ebp,0x4
c0018ad7:	09 d5                	or     ebp,edx
c0018ad9:	3c 06                	cmp    al,0x6
c0018adb:	89 ea                	mov    edx,ebp
c0018add:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ae3:	74 04                	je     c0018ae9 <CPU::detectFeatures()+0x557>
c0018ae5:	3c 0f                	cmp    al,0xf
c0018ae7:	75 5c                	jne    c0018b45 <CPU::detectFeatures()+0x5b3>
c0018ae9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018aed:	89 cd                	mov    ebp,ecx
c0018aef:	c1 ed 10             	shr    ebp,0x10
c0018af2:	c1 e5 04             	shl    ebp,0x4
c0018af5:	09 ea                	or     edx,ebp
c0018af7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018afd:	0f b6 d2             	movzx  edx,dl
c0018b00:	66 81 e5 3f c0       	and    bp,0xc03f
c0018b05:	c1 e2 06             	shl    edx,0x6
c0018b08:	09 ea                	or     edx,ebp
c0018b0a:	3c 0f                	cmp    al,0xf
c0018b0c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018b13:	75 30                	jne    c0018b45 <CPU::detectFeatures()+0x5b3>
c0018b15:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018b1b:	c1 e9 14             	shr    ecx,0x14
c0018b1e:	83 e0 3f             	and    eax,0x3f
c0018b21:	83 c1 0f             	add    ecx,0xf
c0018b24:	88 ca                	mov    dl,cl
c0018b26:	c0 e9 02             	shr    cl,0x2
c0018b29:	c1 e2 06             	shl    edx,0x6
c0018b2c:	09 d0                	or     eax,edx
c0018b2e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018b34:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018b3a:	83 e0 c0             	and    eax,0xffffffc0
c0018b3d:	09 c1                	or     ecx,eax
c0018b3f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018b45:	83 ec 0c             	sub    esp,0xc
c0018b48:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018b4f:	56                   	push   esi
c0018b50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b54:	50                   	push   eax
c0018b55:	57                   	push   edi
c0018b56:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018b5a:	55                   	push   ebp
c0018b5b:	68 00 00 00 80       	push   0x80000000
c0018b60:	e8 e7 f5 ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b65:	83 c4 20             	add    esp,0x20
c0018b68:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018b70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b74:	76 1e                	jbe    c0018b94 <CPU::detectFeatures()+0x602>
c0018b76:	83 ec 0c             	sub    esp,0xc
c0018b79:	56                   	push   esi
c0018b7a:	50                   	push   eax
c0018b7b:	57                   	push   edi
c0018b7c:	55                   	push   ebp
c0018b7d:	68 01 00 00 80       	push   0x80000001
c0018b82:	e8 c5 f5 ff ff       	call   c001814c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b87:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018b91:	83 c4 20             	add    esp,0x20
c0018b94:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018b9a:	83 f8 01             	cmp    eax,0x1
c0018b9d:	75 6f                	jne    c0018c0e <CPU::detectFeatures()+0x67c>
c0018b9f:	51                   	push   ecx
c0018ba0:	51                   	push   ecx
c0018ba1:	68 d2 a0 02 c0       	push   0xc002a0d2
c0018ba6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018baa:	56                   	push   esi
c0018bab:	e8 7a 7b fe ff       	call   c000072a <strcpy>
c0018bb0:	5f                   	pop    edi
c0018bb1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bb7:	5d                   	pop    ebp
c0018bb8:	66 c1 e8 06          	shr    ax,0x6
c0018bbc:	0f b6 c0             	movzx  eax,al
c0018bbf:	50                   	push   eax
c0018bc0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bc6:	c1 e8 0e             	shr    eax,0xe
c0018bc9:	0f b6 c0             	movzx  eax,al
c0018bcc:	50                   	push   eax
c0018bcd:	e8 24 f2 ff ff       	call   c0017df6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018bd2:	5a                   	pop    edx
c0018bd3:	59                   	pop    ecx
c0018bd4:	50                   	push   eax
c0018bd5:	56                   	push   esi
c0018bd6:	e8 06 7c fe ff       	call   c00007e1 <strcat>
c0018bdb:	5f                   	pop    edi
c0018bdc:	5d                   	pop    ebp
c0018bdd:	56                   	push   esi
c0018bde:	53                   	push   ebx
c0018bdf:	e8 1a b2 ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018be4:	58                   	pop    eax
c0018be5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018beb:	5a                   	pop    edx
c0018bec:	68 d9 a0 02 c0       	push   0xc002a0d9
c0018bf1:	50                   	push   eax
c0018bf2:	e8 84 7b fe ff       	call   c000077b <strcmp>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	85 c0                	test   eax,eax
c0018bfc:	0f 85 71 03 00 00    	jne    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018c02:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018c09:	e9 65 03 00 00       	jmp    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018c0e:	83 f8 02             	cmp    eax,0x2
c0018c11:	0f 85 b5 00 00 00    	jne    c0018ccc <CPU::detectFeatures()+0x73a>
c0018c17:	57                   	push   edi
c0018c18:	57                   	push   edi
c0018c19:	68 eb a0 02 c0       	push   0xc002a0eb
c0018c1e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018c22:	56                   	push   esi
c0018c23:	e8 02 7b fe ff       	call   c000072a <strcpy>
c0018c28:	5d                   	pop    ebp
c0018c29:	58                   	pop    eax
c0018c2a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c30:	66 c1 e8 06          	shr    ax,0x6
c0018c34:	0f b6 c0             	movzx  eax,al
c0018c37:	50                   	push   eax
c0018c38:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c3e:	c1 e8 0e             	shr    eax,0xe
c0018c41:	0f b6 c0             	movzx  eax,al
c0018c44:	50                   	push   eax
c0018c45:	e8 18 f0 ff ff       	call   c0017c62 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018c4a:	5a                   	pop    edx
c0018c4b:	59                   	pop    ecx
c0018c4c:	50                   	push   eax
c0018c4d:	56                   	push   esi
c0018c4e:	e8 8e 7b fe ff       	call   c00007e1 <strcat>
c0018c53:	5f                   	pop    edi
c0018c54:	5d                   	pop    ebp
c0018c55:	56                   	push   esi
c0018c56:	53                   	push   ebx
c0018c57:	e8 a2 b1 ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018c5c:	58                   	pop    eax
c0018c5d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018c63:	5a                   	pop    edx
c0018c64:	68 f0 a0 02 c0       	push   0xc002a0f0
c0018c69:	50                   	push   eax
c0018c6a:	e8 0c 7b fe ff       	call   c000077b <strcmp>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	85 c0                	test   eax,eax
c0018c74:	75 20                	jne    c0018c96 <CPU::detectFeatures()+0x704>
c0018c76:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c0018c7c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018c82:	a8 01                	test   al,0x1
c0018c84:	74 10                	je     c0018c96 <CPU::detectFeatures()+0x704>
c0018c86:	83 e0 fe             	and    eax,0xfffffffe
c0018c89:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018c8f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018c96:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c9c:	c1 e8 0e             	shr    eax,0xe
c0018c9f:	3c 05                	cmp    al,0x5
c0018ca1:	0f 85 cc 02 00 00    	jne    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018ca7:	56                   	push   esi
c0018ca8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018cae:	83 e0 0f             	and    eax,0xf
c0018cb1:	50                   	push   eax
c0018cb2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cb8:	66 c1 e8 06          	shr    ax,0x6
c0018cbc:	0f b6 c0             	movzx  eax,al
c0018cbf:	50                   	push   eax
c0018cc0:	6a 05                	push   0x5
c0018cc2:	e8 11 f4 ff ff       	call   c00180d8 <CPU::AMD_K6_writeback(int, int, int)>
c0018cc7:	e9 1f 02 00 00       	jmp    c0018eeb <CPU::detectFeatures()+0x959>
c0018ccc:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ccf:	83 fa 01             	cmp    edx,0x1
c0018cd2:	76 09                	jbe    c0018cdd <CPU::detectFeatures()+0x74b>
c0018cd4:	83 f8 06             	cmp    eax,0x6
c0018cd7:	0f 85 91 01 00 00    	jne    c0018e6e <CPU::detectFeatures()+0x8dc>
c0018cdd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ce3:	c1 ea 0e             	shr    edx,0xe
c0018ce6:	80 fa 05             	cmp    dl,0x5
c0018ce9:	75 7b                	jne    c0018d66 <CPU::detectFeatures()+0x7d4>
c0018ceb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cf1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018cf6:	66 81 fa 00 01       	cmp    dx,0x100
c0018cfb:	75 0c                	jne    c0018d09 <CPU::detectFeatures()+0x777>
c0018cfd:	51                   	push   ecx
c0018cfe:	51                   	push   ecx
c0018cff:	68 f7 a0 02 c0       	push   0xc002a0f7
c0018d04:	e9 dc 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d09:	66 81 fa 00 02       	cmp    dx,0x200
c0018d0e:	75 0c                	jne    c0018d1c <CPU::detectFeatures()+0x78a>
c0018d10:	52                   	push   edx
c0018d11:	52                   	push   edx
c0018d12:	68 0a a1 02 c0       	push   0xc002a10a
c0018d17:	e9 c9 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d1c:	66 81 fa 40 02       	cmp    dx,0x240
c0018d21:	75 0c                	jne    c0018d2f <CPU::detectFeatures()+0x79d>
c0018d23:	50                   	push   eax
c0018d24:	50                   	push   eax
c0018d25:	68 1c a1 02 c0       	push   0xc002a11c
c0018d2a:	e9 b6 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d2f:	83 f8 06             	cmp    eax,0x6
c0018d32:	75 0c                	jne    c0018d40 <CPU::detectFeatures()+0x7ae>
c0018d34:	50                   	push   eax
c0018d35:	50                   	push   eax
c0018d36:	68 2e a1 02 c0       	push   0xc002a12e
c0018d3b:	e9 a5 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d40:	83 f8 04             	cmp    eax,0x4
c0018d43:	75 0c                	jne    c0018d51 <CPU::detectFeatures()+0x7bf>
c0018d45:	50                   	push   eax
c0018d46:	50                   	push   eax
c0018d47:	68 3a a1 02 c0       	push   0xc002a13a
c0018d4c:	e9 94 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d51:	83 f8 03             	cmp    eax,0x3
c0018d54:	0f 85 19 02 00 00    	jne    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018d5a:	50                   	push   eax
c0018d5b:	50                   	push   eax
c0018d5c:	68 42 a1 02 c0       	push   0xc002a142
c0018d61:	e9 7f 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d66:	80 fa 06             	cmp    dl,0x6
c0018d69:	0f 85 db 00 00 00    	jne    c0018e4a <CPU::detectFeatures()+0x8b8>
c0018d6f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018d75:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018d7a:	66 81 fa 80 01       	cmp    dx,0x180
c0018d7f:	75 0c                	jne    c0018d8d <CPU::detectFeatures()+0x7fb>
c0018d81:	50                   	push   eax
c0018d82:	50                   	push   eax
c0018d83:	68 4d a1 02 c0       	push   0xc002a14d
c0018d88:	e9 58 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018d8d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018d93:	66 f7 c1 80 ff       	test   cx,0xff80
c0018d98:	75 0c                	jne    c0018da6 <CPU::detectFeatures()+0x814>
c0018d9a:	50                   	push   eax
c0018d9b:	50                   	push   eax
c0018d9c:	68 5d a1 02 c0       	push   0xc002a15d
c0018da1:	e9 3f 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018da6:	66 81 fa 40 02       	cmp    dx,0x240
c0018dab:	75 0c                	jne    c0018db9 <CPU::detectFeatures()+0x827>
c0018dad:	55                   	push   ebp
c0018dae:	55                   	push   ebp
c0018daf:	68 64 a1 02 c0       	push   0xc002a164
c0018db4:	e9 2c 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018db9:	66 81 fa 80 02       	cmp    dx,0x280
c0018dbe:	75 0c                	jne    c0018dcc <CPU::detectFeatures()+0x83a>
c0018dc0:	57                   	push   edi
c0018dc1:	57                   	push   edi
c0018dc2:	68 6d a1 02 c0       	push   0xc002a16d
c0018dc7:	e9 19 01 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018dcc:	66 81 fa 40 03       	cmp    dx,0x340
c0018dd1:	74 ed                	je     c0018dc0 <CPU::detectFeatures()+0x82e>
c0018dd3:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018dd8:	75 0c                	jne    c0018de6 <CPU::detectFeatures()+0x854>
c0018dda:	56                   	push   esi
c0018ddb:	56                   	push   esi
c0018ddc:	68 74 a1 02 c0       	push   0xc002a174
c0018de1:	e9 ff 00 00 00       	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018de6:	83 f8 06             	cmp    eax,0x6
c0018de9:	0f 84 45 ff ff ff    	je     c0018d34 <CPU::detectFeatures()+0x7a2>
c0018def:	83 f8 04             	cmp    eax,0x4
c0018df2:	0f 84 4d ff ff ff    	je     c0018d45 <CPU::detectFeatures()+0x7b3>
c0018df8:	83 f8 03             	cmp    eax,0x3
c0018dfb:	0f 85 72 01 00 00    	jne    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018e01:	51                   	push   ecx
c0018e02:	51                   	push   ecx
c0018e03:	68 7d a1 02 c0       	push   0xc002a17d
c0018e08:	53                   	push   ebx
c0018e09:	e8 f0 af ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018e0e:	b1 c1                	mov    cl,0xc1
c0018e10:	88 c8                	mov    al,cl
c0018e12:	e6 22                	out    0x22,al
c0018e14:	e4 23                	in     al,0x23
c0018e16:	88 c2                	mov    dl,al
c0018e18:	88 c8                	mov    al,cl
c0018e1a:	e6 22                	out    0x22,al
c0018e1c:	88 d0                	mov    al,dl
c0018e1e:	83 c8 10             	or     eax,0x10
c0018e21:	e6 23                	out    0x23,al
c0018e23:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018e2a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018e2d:	89 d0                	mov    eax,edx
c0018e2f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018e35:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018e39:	40                   	inc    eax
c0018e3a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018e40:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018e45:	e9 a1 00 00 00       	jmp    c0018eeb <CPU::detectFeatures()+0x959>
c0018e4a:	83 f8 06             	cmp    eax,0x6
c0018e4d:	0f 84 e1 fe ff ff    	je     c0018d34 <CPU::detectFeatures()+0x7a2>
c0018e53:	83 f8 04             	cmp    eax,0x4
c0018e56:	0f 84 e9 fe ff ff    	je     c0018d45 <CPU::detectFeatures()+0x7b3>
c0018e5c:	83 f8 03             	cmp    eax,0x3
c0018e5f:	0f 85 0e 01 00 00    	jne    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018e65:	52                   	push   edx
c0018e66:	52                   	push   edx
c0018e67:	68 88 a1 02 c0       	push   0xc002a188
c0018e6c:	eb 77                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018e6e:	83 f8 07             	cmp    eax,0x7
c0018e71:	75 09                	jne    c0018e7c <CPU::detectFeatures()+0x8ea>
c0018e73:	50                   	push   eax
c0018e74:	50                   	push   eax
c0018e75:	68 92 a1 02 c0       	push   0xc002a192
c0018e7a:	eb 69                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018e7c:	83 f8 0a             	cmp    eax,0xa
c0018e7f:	75 09                	jne    c0018e8a <CPU::detectFeatures()+0x8f8>
c0018e81:	50                   	push   eax
c0018e82:	50                   	push   eax
c0018e83:	68 9d a1 02 c0       	push   0xc002a19d
c0018e88:	eb 5b                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018e8a:	83 f8 0b             	cmp    eax,0xb
c0018e8d:	75 09                	jne    c0018e98 <CPU::detectFeatures()+0x906>
c0018e8f:	50                   	push   eax
c0018e90:	50                   	push   eax
c0018e91:	68 a5 a1 02 c0       	push   0xc002a1a5
c0018e96:	eb 4d                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018e98:	83 f8 08             	cmp    eax,0x8
c0018e9b:	75 09                	jne    c0018ea6 <CPU::detectFeatures()+0x914>
c0018e9d:	50                   	push   eax
c0018e9e:	50                   	push   eax
c0018e9f:	68 ae a1 02 c0       	push   0xc002a1ae
c0018ea4:	eb 3f                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018ea6:	83 f8 09             	cmp    eax,0x9
c0018ea9:	75 09                	jne    c0018eb4 <CPU::detectFeatures()+0x922>
c0018eab:	50                   	push   eax
c0018eac:	50                   	push   eax
c0018ead:	68 b6 a1 02 c0       	push   0xc002a1b6
c0018eb2:	eb 31                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018eb4:	83 f8 05             	cmp    eax,0x5
c0018eb7:	75 09                	jne    c0018ec2 <CPU::detectFeatures()+0x930>
c0018eb9:	50                   	push   eax
c0018eba:	50                   	push   eax
c0018ebb:	68 be a1 02 c0       	push   0xc002a1be
c0018ec0:	eb 23                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018ec2:	83 f8 0c             	cmp    eax,0xc
c0018ec5:	75 09                	jne    c0018ed0 <CPU::detectFeatures()+0x93e>
c0018ec7:	55                   	push   ebp
c0018ec8:	55                   	push   ebp
c0018ec9:	68 cc a1 02 c0       	push   0xc002a1cc
c0018ece:	eb 15                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018ed0:	83 f8 0d             	cmp    eax,0xd
c0018ed3:	75 09                	jne    c0018ede <CPU::detectFeatures()+0x94c>
c0018ed5:	57                   	push   edi
c0018ed6:	57                   	push   edi
c0018ed7:	68 d7 a1 02 c0       	push   0xc002a1d7
c0018edc:	eb 07                	jmp    c0018ee5 <CPU::detectFeatures()+0x953>
c0018ede:	56                   	push   esi
c0018edf:	56                   	push   esi
c0018ee0:	68 eb a1 02 c0       	push   0xc002a1eb
c0018ee5:	53                   	push   ebx
c0018ee6:	e8 13 af ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	e9 80 00 00 00       	jmp    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018ef3:	51                   	push   ecx
c0018ef4:	51                   	push   ecx
c0018ef5:	68 37 a0 02 c0       	push   0xc002a037
c0018efa:	57                   	push   edi
c0018efb:	e8 2a 78 fe ff       	call   c000072a <strcpy>
c0018f00:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f0a:	e8 54 73 fe ff       	call   c0000263 <is486>
c0018f0f:	83 c4 10             	add    esp,0x10
c0018f12:	85 c0                	test   eax,eax
c0018f14:	74 2b                	je     c0018f41 <CPU::detectFeatures()+0x9af>
c0018f16:	52                   	push   edx
c0018f17:	52                   	push   edx
c0018f18:	68 f7 a1 02 c0       	push   0xc002a1f7
c0018f1d:	53                   	push   ebx
c0018f1e:	e8 db ae ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018f23:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f2a:	0f 20 c0             	mov    eax,cr0
c0018f2d:	83 e0 14             	and    eax,0x14
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	83 f8 04             	cmp    eax,0x4
c0018f36:	75 1f                	jne    c0018f57 <CPU::detectFeatures()+0x9c5>
c0018f38:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018f3f:	eb 32                	jmp    c0018f73 <CPU::detectFeatures()+0x9e1>
c0018f41:	50                   	push   eax
c0018f42:	50                   	push   eax
c0018f43:	68 02 a2 02 c0       	push   0xc002a202
c0018f48:	53                   	push   ebx
c0018f49:	e8 b0 ae ff ff       	call   c0013dfe <Device::setName(char const*)>
c0018f4e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018f55:	eb d3                	jmp    c0018f2a <CPU::detectFeatures()+0x998>
c0018f57:	e8 e2 72 fe ff       	call   c000023e <hasLegacyFPU>
c0018f5c:	83 e0 01             	and    eax,0x1
c0018f5f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f62:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f68:	83 e0 fd             	and    eax,0xfffffffd
c0018f6b:	09 d0                	or     eax,edx
c0018f6d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f73:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018f7a:	83 c4 4c             	add    esp,0x4c
c0018f7d:	5b                   	pop    ebx
c0018f7e:	5e                   	pop    esi
c0018f7f:	5f                   	pop    edi
c0018f80:	5d                   	pop    ebp
c0018f81:	c3                   	ret    

c0018f82 <CPU::setupSMEP()>:
c0018f82:	0f 20 e0             	mov    eax,cr4
c0018f85:	0d 00 00 10 00       	or     eax,0x100000
c0018f8a:	0f 22 e0             	mov    cr4,eax
c0018f8d:	c3                   	ret    

c0018f8e <CPU::setupUMIP()>:
c0018f8e:	0f 20 e0             	mov    eax,cr4
c0018f91:	80 cc 08             	or     ah,0x8
c0018f94:	0f 22 e0             	mov    cr4,eax
c0018f97:	c3                   	ret    

c0018f98 <CPU::setupTSC()>:
c0018f98:	0f 20 e0             	mov    eax,cr4
c0018f9b:	83 c8 04             	or     eax,0x4
c0018f9e:	0f 22 e0             	mov    cr4,eax
c0018fa1:	c3                   	ret    

c0018fa2 <CPU::setupLargePages()>:
c0018fa2:	0f 20 e0             	mov    eax,cr4
c0018fa5:	83 c8 10             	or     eax,0x10
c0018fa8:	0f 22 e0             	mov    cr4,eax
c0018fab:	c3                   	ret    

c0018fac <CPU::setupPAT()>:
c0018fac:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0018fb1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018fb8:	74 2c                	je     c0018fe6 <CPU::setupPAT()+0x3a>
c0018fba:	53                   	push   ebx
c0018fbb:	83 ec 10             	sub    esp,0x10
c0018fbe:	68 77 02 00 00       	push   0x277
c0018fc3:	50                   	push   eax
c0018fc4:	e8 b3 5a ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018fc9:	83 e2 f8             	and    edx,0xfffffff8
c0018fcc:	83 ca 01             	or     edx,0x1
c0018fcf:	52                   	push   edx
c0018fd0:	50                   	push   eax
c0018fd1:	68 77 02 00 00       	push   0x277
c0018fd6:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c0018fdc:	e8 c7 5a ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018fe1:	83 c4 28             	add    esp,0x28
c0018fe4:	5b                   	pop    ebx
c0018fe5:	c3                   	ret    
c0018fe6:	c3                   	ret    
c0018fe7:	90                   	nop

c0018fe8 <CPU::setupMTRR()>:
c0018fe8:	c3                   	ret    
c0018fe9:	90                   	nop

c0018fea <CPU::setupGlobalPages()>:
c0018fea:	0f 20 e0             	mov    eax,cr4
c0018fed:	0c 80                	or     al,0x80
c0018fef:	0f 22 e0             	mov    cr4,eax
c0018ff2:	c3                   	ret    
c0018ff3:	90                   	nop

c0018ff4 <CPU::allowUsermodeDataAccess()>:
c0018ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ff8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018fff:	74 03                	je     c0019004 <CPU::allowUsermodeDataAccess()+0x10>
c0019001:	0f 01 cb             	stac   
c0019004:	c3                   	ret    
c0019005:	90                   	nop

c0019006 <CPU::prohibitUsermodeDataAccess()>:
c0019006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001900a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019011:	74 03                	je     c0019016 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019013:	0f 01 ca             	clac   
c0019016:	c3                   	ret    
c0019017:	90                   	nop

c0019018 <CPU::setupSMAP()>:
c0019018:	0f 20 e0             	mov    eax,cr4
c001901b:	0d 00 00 20 00       	or     eax,0x200000
c0019020:	0f 22 e0             	mov    cr4,eax
c0019023:	eb e1                	jmp    c0019006 <CPU::prohibitUsermodeDataAccess()>
c0019025:	90                   	nop

c0019026 <CPU::setupFeatures()>:
c0019026:	83 ec 0c             	sub    esp,0xc
c0019029:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001902d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019034:	74 07                	je     c001903d <CPU::setupFeatures()+0x17>
c0019036:	52                   	push   edx
c0019037:	e8 46 ff ff ff       	call   c0018f82 <CPU::setupSMEP()>
c001903c:	58                   	pop    eax
c001903d:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019044:	74 07                	je     c001904d <CPU::setupFeatures()+0x27>
c0019046:	52                   	push   edx
c0019047:	e8 cc ff ff ff       	call   c0019018 <CPU::setupSMAP()>
c001904c:	58                   	pop    eax
c001904d:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019054:	74 07                	je     c001905d <CPU::setupFeatures()+0x37>
c0019056:	52                   	push   edx
c0019057:	e8 32 ff ff ff       	call   c0018f8e <CPU::setupUMIP()>
c001905c:	58                   	pop    eax
c001905d:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019064:	74 07                	je     c001906d <CPU::setupFeatures()+0x47>
c0019066:	52                   	push   edx
c0019067:	e8 2c ff ff ff       	call   c0018f98 <CPU::setupTSC()>
c001906c:	58                   	pop    eax
c001906d:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019074:	74 07                	je     c001907d <CPU::setupFeatures()+0x57>
c0019076:	52                   	push   edx
c0019077:	e8 26 ff ff ff       	call   c0018fa2 <CPU::setupLargePages()>
c001907c:	59                   	pop    ecx
c001907d:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019084:	74 07                	je     c001908d <CPU::setupFeatures()+0x67>
c0019086:	52                   	push   edx
c0019087:	e8 5e ff ff ff       	call   c0018fea <CPU::setupGlobalPages()>
c001908c:	58                   	pop    eax
c001908d:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019094:	74 0c                	je     c00190a2 <CPU::setupFeatures()+0x7c>
c0019096:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001909a:	83 c4 0c             	add    esp,0xc
c001909d:	e9 0a ff ff ff       	jmp    c0018fac <CPU::setupPAT()>
c00190a2:	83 c4 0c             	add    esp,0xc
c00190a5:	c3                   	ret    

c00190a6 <CPU::open(int, int, void*)>:
c00190a6:	57                   	push   edi
c00190a7:	56                   	push   esi
c00190a8:	53                   	push   ebx
c00190a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00190ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190b1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00190b7:	83 ec 0c             	sub    esp,0xc
c00190ba:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00190c0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00190c6:	50                   	push   eax
c00190c7:	e8 9c 5c ff ff       	call   c000ed68 <GDT::setup()>
c00190cc:	83 c4 0c             	add    esp,0xc
c00190cf:	6a 00                	push   0x0
c00190d1:	68 ef be ad de       	push   0xdeadbeef
c00190d6:	57                   	push   edi
c00190d7:	e8 d2 80 ff ff       	call   c00111ae <TSS::setup(unsigned long, unsigned long)>
c00190dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00190df:	e8 aa 80 ff ff       	call   c001118e <TSS::flush()>
c00190e4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00190ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00190ed:	e8 d2 5e ff ff       	call   c000efc4 <IDT::setup()>
c00190f2:	b8 00 04 00 00       	mov    eax,0x400
c00190f7:	0f 23 f8             	mov    db7,eax
c00190fa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019104:	e8 4a 6a ff ff       	call   c000fb53 <Phys::allocatePage()>
c0019109:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001910f:	89 30                	mov    DWORD PTR [eax],esi
c0019111:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019117:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001911a:	58                   	pop    eax
c001911b:	5a                   	pop    edx
c001911c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019122:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019126:	e8 b5 90 ff ff       	call   c00121e0 <VAS::setCPUSpecific(unsigned long)>
c001912b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001912e:	e8 5f f4 ff ff       	call   c0018592 <CPU::detectFeatures()>
c0019133:	e8 aa bf ff ff       	call   c00150e2 <setupInterruptController()>
c0019138:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001913e:	a1 20 ca 02 c0       	mov    eax,ds:0xc002ca20
c0019143:	83 e0 10             	and    eax,0x10
c0019146:	83 f8 01             	cmp    eax,0x1
c0019149:	19 c0                	sbb    eax,eax
c001914b:	83 e0 46             	and    eax,0x46
c001914e:	83 c0 1e             	add    eax,0x1e
c0019151:	89 04 24             	mov    DWORD PTR [esp],eax
c0019154:	e8 41 d4 ff ff       	call   c001659a <setupTimer(int)>
c0019159:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001915f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019162:	e8 bf fe ff ff       	call   c0019026 <CPU::setupFeatures()>
c0019167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001916a:	e8 a7 f1 ff ff       	call   c0018316 <CPU::displayFeatures()>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	31 c0                	xor    eax,eax
c0019174:	5b                   	pop    ebx
c0019175:	5e                   	pop    esi
c0019176:	5f                   	pop    edi
c0019177:	c3                   	ret    

c0019178 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019178:	57                   	push   edi
c0019179:	56                   	push   esi
c001917a:	53                   	push   ebx
c001917b:	51                   	push   ecx
c001917c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019180:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019183:	0f 02 c0             	lar    eax,ax
c0019186:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019189:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001918d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019190:	88 ca                	mov    dl,cl
c0019192:	c0 ea 06             	shr    dl,0x6
c0019195:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019199:	89 ca                	mov    edx,ecx
c001919b:	66 c1 ea 03          	shr    dx,0x3
c001919f:	83 e2 07             	and    edx,0x7
c00191a2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00191a7:	88 17                	mov    BYTE PTR [edi],dl
c00191a9:	0f 84 a6 01 00 00    	je     c0019355 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00191af:	83 e1 07             	and    ecx,0x7
c00191b2:	80 f9 04             	cmp    cl,0x4
c00191b5:	0f 84 98 00 00 00    	je     c0019253 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00191bb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00191c0:	0f 95 c0             	setne  al
c00191c3:	80 f9 05             	cmp    cl,0x5
c00191c6:	0f 95 c2             	setne  dl
c00191c9:	08 c2                	or     dl,al
c00191cb:	74 79                	je     c0019246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00191cd:	84 c9                	test   cl,cl
c00191cf:	75 05                	jne    c00191d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00191d1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00191d4:	eb 3c                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00191d6:	80 f9 01             	cmp    cl,0x1
c00191d9:	75 05                	jne    c00191e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00191db:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00191de:	eb 32                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00191e0:	80 f9 02             	cmp    cl,0x2
c00191e3:	75 05                	jne    c00191ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00191e5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00191e8:	eb 28                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00191ea:	31 c0                	xor    eax,eax
c00191ec:	80 f9 03             	cmp    cl,0x3
c00191ef:	75 05                	jne    c00191f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00191f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00191f4:	eb 1c                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00191f6:	80 f9 05             	cmp    cl,0x5
c00191f9:	75 05                	jne    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00191fb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00191fe:	eb 12                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019200:	80 f9 06             	cmp    cl,0x6
c0019203:	75 05                	jne    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019205:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019208:	eb 08                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001920a:	80 f9 07             	cmp    cl,0x7
c001920d:	75 03                	jne    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001920f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019212:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019217:	75 10                	jne    c0019229 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019219:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001921d:	b9 03 00 00 00       	mov    ecx,0x3
c0019222:	01 d0                	add    eax,edx
c0019224:	e9 37 01 00 00       	jmp    c0019360 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019229:	b9 02 00 00 00       	mov    ecx,0x2
c001922e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019233:	0f 85 27 01 00 00    	jne    c0019360 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019239:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001923c:	b9 06 00 00 00       	mov    ecx,0x6
c0019241:	e9 1a 01 00 00       	jmp    c0019360 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019246:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019249:	b9 06 00 00 00       	mov    ecx,0x6
c001924e:	e9 0f 01 00 00       	jmp    c0019362 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019253:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019256:	88 ca                	mov    dl,cl
c0019258:	c0 ea 06             	shr    dl,0x6
c001925b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001925f:	89 ca                	mov    edx,ecx
c0019261:	66 c1 ea 03          	shr    dx,0x3
c0019265:	83 e2 07             	and    edx,0x7
c0019268:	80 e1 07             	and    cl,0x7
c001926b:	75 05                	jne    c0019272 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001926d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019270:	eb 4c                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019272:	80 f9 01             	cmp    cl,0x1
c0019275:	75 05                	jne    c001927c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019277:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001927a:	eb 42                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001927c:	80 f9 02             	cmp    cl,0x2
c001927f:	75 05                	jne    c0019286 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019281:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019284:	eb 38                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019286:	80 f9 03             	cmp    cl,0x3
c0019289:	75 05                	jne    c0019290 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001928b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001928e:	eb 2e                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019290:	80 f9 04             	cmp    cl,0x4
c0019293:	75 12                	jne    c00192a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019295:	f6 c4 60             	test   ah,0x60
c0019298:	75 08                	jne    c00192a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001929a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001929d:	8d 78 14             	lea    edi,[eax+0x14]
c00192a0:	eb 1c                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00192a2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00192a5:	eb 17                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00192a7:	80 f9 05             	cmp    cl,0x5
c00192aa:	75 05                	jne    c00192b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00192ac:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00192af:	eb 0d                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00192b1:	80 f9 06             	cmp    cl,0x6
c00192b4:	75 05                	jne    c00192bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00192b6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00192b9:	eb 03                	jmp    c00192be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00192bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00192be:	84 d2                	test   dl,dl
c00192c0:	75 05                	jne    c00192c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00192c2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00192c5:	eb 3c                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192c7:	80 fa 01             	cmp    dl,0x1
c00192ca:	75 05                	jne    c00192d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00192cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00192cf:	eb 32                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192d1:	80 fa 02             	cmp    dl,0x2
c00192d4:	75 05                	jne    c00192db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00192d6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00192d9:	eb 28                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192db:	80 fa 03             	cmp    dl,0x3
c00192de:	75 05                	jne    c00192e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00192e0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00192e3:	eb 1e                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192e5:	31 c0                	xor    eax,eax
c00192e7:	80 fa 04             	cmp    dl,0x4
c00192ea:	74 17                	je     c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192ec:	80 fa 05             	cmp    dl,0x5
c00192ef:	75 05                	jne    c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00192f1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00192f4:	eb 0d                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00192f6:	80 fa 06             	cmp    dl,0x6
c00192f9:	75 05                	jne    c0019300 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00192fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00192fe:	eb 03                	jmp    c0019303 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019300:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019303:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019308:	0f 94 c2             	sete   dl
c001930b:	80 f9 05             	cmp    cl,0x5
c001930e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019312:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019317:	d3 e0                	shl    eax,cl
c0019319:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001931d:	74 0a                	je     c0019329 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001931f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019322:	b9 07 00 00 00       	mov    ecx,0x7
c0019327:	eb 37                	jmp    c0019360 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019329:	01 f8                	add    eax,edi
c001932b:	b9 03 00 00 00       	mov    ecx,0x3
c0019330:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019335:	74 2b                	je     c0019362 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019337:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001933c:	75 0d                	jne    c001934b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001933e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019342:	01 c8                	add    eax,ecx
c0019344:	b9 04 00 00 00       	mov    ecx,0x4
c0019349:	eb 17                	jmp    c0019362 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001934b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001934e:	b9 07 00 00 00       	mov    ecx,0x7
c0019353:	eb 0d                	jmp    c0019362 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019355:	b9 02 00 00 00       	mov    ecx,0x2
c001935a:	b2 01                	mov    dl,0x1
c001935c:	31 c0                	xor    eax,eax
c001935e:	eb 02                	jmp    c0019362 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019360:	31 d2                	xor    edx,edx
c0019362:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019366:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019368:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001936c:	88 11                	mov    BYTE PTR [ecx],dl
c001936e:	5a                   	pop    edx
c001936f:	5b                   	pop    ebx
c0019370:	5e                   	pop    esi
c0019371:	5f                   	pop    edi
c0019372:	c3                   	ret    
c0019373:	90                   	nop

c0019374 <EnvVarContainer::getEnv(char const*)>:
c0019374:	57                   	push   edi
c0019375:	56                   	push   esi
c0019376:	53                   	push   ebx
c0019377:	31 db                	xor    ebx,ebx
c0019379:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001937d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001937f:	7e 2b                	jle    c00193ac <EnvVarContainer::getEnv(char const*)+0x38>
c0019381:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019388:	50                   	push   eax
c0019389:	50                   	push   eax
c001938a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001938d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019390:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019394:	e8 e2 73 fe ff       	call   c000077b <strcmp>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	85 c0                	test   eax,eax
c001939e:	75 09                	jne    c00193a9 <EnvVarContainer::getEnv(char const*)+0x35>
c00193a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00193a3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00193a7:	eb 05                	jmp    c00193ae <EnvVarContainer::getEnv(char const*)+0x3a>
c00193a9:	43                   	inc    ebx
c00193aa:	eb d1                	jmp    c001937d <EnvVarContainer::getEnv(char const*)+0x9>
c00193ac:	31 c0                	xor    eax,eax
c00193ae:	5b                   	pop    ebx
c00193af:	5e                   	pop    esi
c00193b0:	5f                   	pop    edi
c00193b1:	c3                   	ret    

c00193b2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00193b2:	57                   	push   edi
c00193b3:	56                   	push   esi
c00193b4:	53                   	push   ebx
c00193b5:	83 ec 1c             	sub    esp,0x1c
c00193b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00193bc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00193c0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00193c4:	57                   	push   edi
c00193c5:	e8 de 72 fe ff       	call   c00006a8 <strlen>
c00193ca:	40                   	inc    eax
c00193cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00193ce:	e8 01 61 ff ff       	call   c000f4d4 <malloc>
c00193d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00193d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193da:	e8 c9 72 fe ff       	call   c00006a8 <strlen>
c00193df:	40                   	inc    eax
c00193e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00193e3:	e8 ec 60 ff ff       	call   c000f4d4 <malloc>
c00193e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00193ef:	e8 b4 72 fe ff       	call   c00006a8 <strlen>
c00193f4:	83 c4 0c             	add    esp,0xc
c00193f7:	40                   	inc    eax
c00193f8:	50                   	push   eax
c00193f9:	6a 00                	push   0x0
c00193fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00193ff:	e8 87 72 fe ff       	call   c000068b <memset>
c0019404:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019407:	e8 9c 72 fe ff       	call   c00006a8 <strlen>
c001940c:	83 c4 0c             	add    esp,0xc
c001940f:	40                   	inc    eax
c0019410:	50                   	push   eax
c0019411:	57                   	push   edi
c0019412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019416:	e8 3a 72 fe ff       	call   c0000655 <memcpy>
c001941b:	89 34 24             	mov    DWORD PTR [esp],esi
c001941e:	e8 85 72 fe ff       	call   c00006a8 <strlen>
c0019423:	83 c4 0c             	add    esp,0xc
c0019426:	40                   	inc    eax
c0019427:	50                   	push   eax
c0019428:	6a 00                	push   0x0
c001942a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001942e:	e8 58 72 fe ff       	call   c000068b <memset>
c0019433:	89 34 24             	mov    DWORD PTR [esp],esi
c0019436:	e8 6d 72 fe ff       	call   c00006a8 <strlen>
c001943b:	83 c4 0c             	add    esp,0xc
c001943e:	40                   	inc    eax
c001943f:	50                   	push   eax
c0019440:	56                   	push   esi
c0019441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019445:	e8 0b 72 fe ff       	call   c0000655 <memcpy>
c001944a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001944c:	40                   	inc    eax
c001944d:	89 03                	mov    DWORD PTR [ebx],eax
c001944f:	c1 e0 03             	shl    eax,0x3
c0019452:	5a                   	pop    edx
c0019453:	59                   	pop    ecx
c0019454:	50                   	push   eax
c0019455:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019458:	e8 63 60 ff ff       	call   c000f4c0 <realloc>
c001945d:	83 c4 0c             	add    esp,0xc
c0019460:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019463:	6a 08                	push   0x8
c0019465:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019469:	52                   	push   edx
c001946a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001946c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019470:	50                   	push   eax
c0019471:	e8 df 71 fe ff       	call   c0000655 <memcpy>
c0019476:	83 c4 20             	add    esp,0x20
c0019479:	5b                   	pop    ebx
c001947a:	5e                   	pop    esi
c001947b:	5f                   	pop    edi
c001947c:	c3                   	ret    
c001947d:	90                   	nop

c001947e <EnvVarContainer::deleteEnv(char const*)>:
c001947e:	c3                   	ret    
c001947f:	90                   	nop

c0019480 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019480:	55                   	push   ebp
c0019481:	57                   	push   edi
c0019482:	56                   	push   esi
c0019483:	53                   	push   ebx
c0019484:	81 ec 38 01 00 00    	sub    esp,0x138
c001948a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019491:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019498:	68 14 01 00 00       	push   0x114
c001949d:	e8 32 60 ff ff       	call   c000f4d4 <malloc>
c00194a2:	83 c4 0c             	add    esp,0xc
c00194a5:	89 c7                	mov    edi,eax
c00194a7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00194aa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00194b1:	50                   	push   eax
c00194b2:	e8 a5 98 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c00194b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194ba:	e8 6f 9b ff ff       	call   c001302e <File::exists()>
c00194bf:	83 c4 10             	add    esp,0x10
c00194c2:	84 c0                	test   al,al
c00194c4:	75 31                	jne    c00194f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00194c6:	51                   	push   ecx
c00194c7:	51                   	push   ecx
c00194c8:	6a 12                	push   0x12
c00194ca:	57                   	push   edi
c00194cb:	e8 f0 98 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c00194d0:	8b 07                	mov    eax,DWORD PTR [edi]
c00194d2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00194d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00194d8:	e8 cb 71 fe ff       	call   c00006a8 <strlen>
c00194dd:	5a                   	pop    edx
c00194de:	31 d2                	xor    edx,edx
c00194e0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00194e4:	51                   	push   ecx
c00194e5:	55                   	push   ebp
c00194e6:	52                   	push   edx
c00194e7:	50                   	push   eax
c00194e8:	57                   	push   edi
c00194e9:	ff d3                	call   ebx
c00194eb:	83 c4 14             	add    esp,0x14
c00194ee:	57                   	push   edi
c00194ef:	e8 2a 99 ff ff       	call   c0012e1e <File::close()>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	31 db                	xor    ebx,ebx
c00194f9:	50                   	push   eax
c00194fa:	31 ed                	xor    ebp,ebp
c00194fc:	68 00 01 00 00       	push   0x100
c0019501:	6a 00                	push   0x0
c0019503:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019507:	50                   	push   eax
c0019508:	e8 7e 71 fe ff       	call   c000068b <memset>
c001950d:	58                   	pop    eax
c001950e:	5a                   	pop    edx
c001950f:	6a 01                	push   0x1
c0019511:	57                   	push   edi
c0019512:	e8 a9 98 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	83 ec 0c             	sub    esp,0xc
c001951d:	8b 07                	mov    eax,DWORD PTR [edi]
c001951f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019523:	51                   	push   ecx
c0019524:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019528:	52                   	push   edx
c0019529:	6a 00                	push   0x0
c001952b:	6a 01                	push   0x1
c001952d:	57                   	push   edi
c001952e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019531:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019535:	83 c4 20             	add    esp,0x20
c0019538:	3c 0d                	cmp    al,0xd
c001953a:	0f 84 12 01 00 00    	je     c0019652 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019540:	85 db                	test   ebx,ebx
c0019542:	0f 84 fd 00 00 00    	je     c0019645 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019548:	3c 0a                	cmp    al,0xa
c001954a:	74 13                	je     c001955f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001954c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019551:	74 0c                	je     c001955f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019553:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019559:	0f 8e e6 00 00 00    	jle    c0019645 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	8d 53 01             	lea    edx,[ebx+0x1]
c0019565:	29 dd                	sub    ebp,ebx
c0019567:	52                   	push   edx
c0019568:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001956c:	e8 63 5f ff ff       	call   c000f4d4 <malloc>
c0019571:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019574:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019578:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001957b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001957f:	e8 50 5f ff ff       	call   c000f4d4 <malloc>
c0019584:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019588:	83 c4 0c             	add    esp,0xc
c001958b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001958f:	52                   	push   edx
c0019590:	6a 00                	push   0x0
c0019592:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019596:	e8 f0 70 fe ff       	call   c000068b <memset>
c001959b:	83 c4 0c             	add    esp,0xc
c001959e:	53                   	push   ebx
c001959f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00195a3:	55                   	push   ebp
c00195a4:	01 eb                	add    ebx,ebp
c00195a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00195aa:	e8 a6 70 fe ff       	call   c0000655 <memcpy>
c00195af:	83 c4 0c             	add    esp,0xc
c00195b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00195b6:	51                   	push   ecx
c00195b7:	6a 00                	push   0x0
c00195b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195bd:	e8 c9 70 fe ff       	call   c000068b <memset>
c00195c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195c5:	e8 de 70 fe ff       	call   c00006a8 <strlen>
c00195ca:	83 c4 0c             	add    esp,0xc
c00195cd:	50                   	push   eax
c00195ce:	53                   	push   ebx
c00195cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195d3:	e8 7d 70 fe ff       	call   c0000655 <memcpy>
c00195d8:	5b                   	pop    ebx
c00195d9:	58                   	pop    eax
c00195da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00195de:	68 3c a2 02 c0       	push   0xc002a23c
c00195e3:	e8 45 92 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00195e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00195ea:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00195ed:	40                   	inc    eax
c00195ee:	83 c4 10             	add    esp,0x10
c00195f1:	89 06                	mov    DWORD PTR [esi],eax
c00195f3:	85 d2                	test   edx,edx
c00195f5:	75 0c                	jne    c0019603 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	6a 08                	push   0x8
c00195fc:	e8 d3 5e ff ff       	call   c000f4d4 <malloc>
c0019601:	eb 0c                	jmp    c001960f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019603:	c1 e0 03             	shl    eax,0x3
c0019606:	51                   	push   ecx
c0019607:	51                   	push   ecx
c0019608:	50                   	push   eax
c0019609:	52                   	push   edx
c001960a:	e8 b1 5e ff ff       	call   c000f4c0 <realloc>
c001960f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019612:	83 c4 10             	add    esp,0x10
c0019615:	31 db                	xor    ebx,ebx
c0019617:	52                   	push   edx
c0019618:	6a 08                	push   0x8
c001961a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001961e:	50                   	push   eax
c001961f:	8b 16                	mov    edx,DWORD PTR [esi]
c0019621:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019624:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019628:	50                   	push   eax
c0019629:	e8 27 70 fe ff       	call   c0000655 <memcpy>
c001962e:	83 c4 0c             	add    esp,0xc
c0019631:	68 00 01 00 00       	push   0x100
c0019636:	6a 00                	push   0x0
c0019638:	55                   	push   ebp
c0019639:	31 ed                	xor    ebp,ebp
c001963b:	e8 4b 70 fe ff       	call   c000068b <memset>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	eb 0d                	jmp    c0019652 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019645:	3c 3d                	cmp    al,0x3d
c0019647:	74 07                	je     c0019650 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019649:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001964d:	45                   	inc    ebp
c001964e:	eb 02                	jmp    c0019652 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019650:	89 eb                	mov    ebx,ebp
c0019652:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019657:	0f 85 bd fe ff ff    	jne    c001951a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001965d:	50                   	push   eax
c001965e:	50                   	push   eax
c001965f:	ff 36                	push   DWORD PTR [esi]
c0019661:	68 4a a2 02 c0       	push   0xc002a24a
c0019666:	e8 c2 91 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001966b:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019671:	5b                   	pop    ebx
c0019672:	5e                   	pop    esi
c0019673:	5f                   	pop    edi
c0019674:	5d                   	pop    ebp
c0019675:	c3                   	ret    

c0019676 <EnvVarContainer::__loadSystem()>:
c0019676:	83 ec 10             	sub    esp,0x10
c0019679:	68 40 bf 02 c0       	push   0xc002bf40
c001967e:	68 75 a2 02 c0       	push   0xc002a275
c0019683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019687:	e8 f4 fd ff ff       	call   c0019480 <EnvVarContainer::loadFrom(char const*, char const*)>
c001968c:	83 c4 1c             	add    esp,0x1c
c001968f:	c3                   	ret    

c0019690 <EnvVarContainer::__loadUser()>:
c0019690:	c3                   	ret    
c0019691:	90                   	nop

c0019692 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019696:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001969c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00196a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00196b2:	90                   	nop
c00196b3:	c3                   	ret    

c00196b4 <EnvVarContainer::~EnvVarContainer()>:
c00196b4:	83 ec 0c             	sub    esp,0xc
c00196b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00196be:	85 c0                	test   eax,eax
c00196c0:	74 1d                	je     c00196df <EnvVarContainer::~EnvVarContainer()+0x2b>
c00196c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00196c8:	85 c0                	test   eax,eax
c00196ca:	74 13                	je     c00196df <EnvVarContainer::~EnvVarContainer()+0x2b>
c00196cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00196d3:	83 ec 0c             	sub    esp,0xc
c00196d6:	50                   	push   eax
c00196d7:	e8 08 5e ff ff       	call   c000f4e4 <free>
c00196dc:	83 c4 10             	add    esp,0x10
c00196df:	90                   	nop
c00196e0:	83 c4 0c             	add    esp,0xc
c00196e3:	c3                   	ret    

c00196e4 <Krnl::getEnv(Process*, char const*)>:
c00196e4:	53                   	push   ebx
c00196e5:	83 ec 08             	sub    esp,0x8
c00196e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196f0:	39 05 54 df 02 c0    	cmp    DWORD PTR ds:0xc002df54,eax
c00196f6:	74 04                	je     c00196fc <Krnl::getEnv(Process*, char const*)+0x18>
c00196f8:	85 c0                	test   eax,eax
c00196fa:	75 0b                	jne    c0019707 <Krnl::getEnv(Process*, char const*)+0x23>
c00196fc:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0019701:	85 c0                	test   eax,eax
c0019703:	75 19                	jne    c001971e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019705:	eb 27                	jmp    c001972e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019707:	52                   	push   edx
c0019708:	52                   	push   edx
c0019709:	53                   	push   ebx
c001970a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019710:	e8 5f fc ff ff       	call   c0019374 <EnvVarContainer::getEnv(char const*)>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	85 c0                	test   eax,eax
c001971a:	75 28                	jne    c0019744 <Krnl::getEnv(Process*, char const*)+0x60>
c001971c:	eb de                	jmp    c00196fc <Krnl::getEnv(Process*, char const*)+0x18>
c001971e:	52                   	push   edx
c001971f:	52                   	push   edx
c0019720:	53                   	push   ebx
c0019721:	50                   	push   eax
c0019722:	e8 4d fc ff ff       	call   c0019374 <EnvVarContainer::getEnv(char const*)>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	85 c0                	test   eax,eax
c001972c:	75 16                	jne    c0019744 <Krnl::getEnv(Process*, char const*)+0x60>
c001972e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019732:	a1 34 d5 02 c0       	mov    eax,ds:0xc002d534
c0019737:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001973b:	83 c4 08             	add    esp,0x8
c001973e:	5b                   	pop    ebx
c001973f:	e9 30 fc ff ff       	jmp    c0019374 <EnvVarContainer::getEnv(char const*)>
c0019744:	83 c4 08             	add    esp,0x8
c0019747:	5b                   	pop    ebx
c0019748:	c3                   	ret    

c0019749 <Krnl::setEnvSystem(char const*, char const*)>:
c0019749:	83 ec 10             	sub    esp,0x10
c001974c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019750:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019754:	ff 35 34 d5 02 c0    	push   DWORD PTR ds:0xc002d534
c001975a:	e8 53 fc ff ff       	call   c00193b2 <EnvVarContainer::setEnv(char const*, char const*)>
c001975f:	83 c4 1c             	add    esp,0x1c
c0019762:	c3                   	ret    

c0019763 <Krnl::setEnvUser(char const*, char const*)>:
c0019763:	a1 30 d5 02 c0       	mov    eax,ds:0xc002d530
c0019768:	85 c0                	test   eax,eax
c001976a:	74 15                	je     c0019781 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001976c:	83 ec 10             	sub    esp,0x10
c001976f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019773:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019777:	50                   	push   eax
c0019778:	e8 35 fc ff ff       	call   c00193b2 <EnvVarContainer::setEnv(char const*, char const*)>
c001977d:	83 c4 1c             	add    esp,0x1c
c0019780:	c3                   	ret    
c0019781:	c3                   	ret    

c0019782 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019786:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001978c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019790:	e9 1d fc ff ff       	jmp    c00193b2 <EnvVarContainer::setEnv(char const*, char const*)>

c0019795 <Krnl::deleteEnvSystem(char const*)>:
c0019795:	c3                   	ret    

c0019796 <Krnl::deleteEnvUser(char const*)>:
c0019796:	c3                   	ret    

c0019797 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019797:	c3                   	ret    

c0019798 <Krnl::newProcessEnv(Process*)>:
c0019798:	83 ec 28             	sub    esp,0x28
c001979b:	6a 0c                	push   0xc
c001979d:	e8 32 5d ff ff       	call   c000f4d4 <malloc>
c00197a2:	5a                   	pop    edx
c00197a3:	59                   	pop    ecx
c00197a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197a8:	50                   	push   eax
c00197a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197ad:	e8 e0 fe ff ff       	call   c0019692 <EnvVarContainer::EnvVarContainer(Process*)>
c00197b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197b6:	83 c4 2c             	add    esp,0x2c
c00197b9:	c3                   	ret    

c00197ba <Krnl::copyProcessEnv(Process*, Process*)>:
c00197ba:	56                   	push   esi
c00197bb:	53                   	push   ebx
c00197bc:	83 ec 10             	sub    esp,0x10
c00197bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197c3:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c00197c9:	6a 0c                	push   0xc
c00197cb:	e8 04 5d ff ff       	call   c000f4d4 <malloc>
c00197d0:	89 c3                	mov    ebx,eax
c00197d2:	58                   	pop    eax
c00197d3:	5a                   	pop    edx
c00197d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197d8:	53                   	push   ebx
c00197d9:	e8 b4 fe ff ff       	call   c0019692 <EnvVarContainer::EnvVarContainer(Process*)>
c00197de:	8b 06                	mov    eax,DWORD PTR [esi]
c00197e0:	89 03                	mov    DWORD PTR [ebx],eax
c00197e2:	c1 e0 03             	shl    eax,0x3
c00197e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00197e8:	e8 e7 5c ff ff       	call   c000f4d4 <malloc>
c00197ed:	83 c4 0c             	add    esp,0xc
c00197f0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00197f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00197f5:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c00197fc:	52                   	push   edx
c00197fd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019800:	50                   	push   eax
c0019801:	e8 4f 6e fe ff       	call   c0000655 <memcpy>
c0019806:	89 d8                	mov    eax,ebx
c0019808:	83 c4 14             	add    esp,0x14
c001980b:	5b                   	pop    ebx
c001980c:	5e                   	pop    esi
c001980d:	c3                   	ret    

c001980e <Krnl::loadSystemEnv()>:
c001980e:	53                   	push   ebx
c001980f:	83 ec 14             	sub    esp,0x14
c0019812:	6a 0c                	push   0xc
c0019814:	e8 bb 5c ff ff       	call   c000f4d4 <malloc>
c0019819:	89 c3                	mov    ebx,eax
c001981b:	58                   	pop    eax
c001981c:	5a                   	pop    edx
c001981d:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c0019823:	53                   	push   ebx
c0019824:	e8 69 fe ff ff       	call   c0019692 <EnvVarContainer::EnvVarContainer(Process*)>
c0019829:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001982c:	89 1d 34 d5 02 c0    	mov    DWORD PTR ds:0xc002d534,ebx
c0019832:	e8 3f fe ff ff       	call   c0019676 <EnvVarContainer::__loadSystem()>
c0019837:	83 c4 18             	add    esp,0x18
c001983a:	5b                   	pop    ebx
c001983b:	c3                   	ret    

c001983c <Krnl::loadUserEnv()>:
c001983c:	53                   	push   ebx
c001983d:	83 ec 14             	sub    esp,0x14
c0019840:	6a 0c                	push   0xc
c0019842:	e8 8d 5c ff ff       	call   c000f4d4 <malloc>
c0019847:	89 c3                	mov    ebx,eax
c0019849:	58                   	pop    eax
c001984a:	5a                   	pop    edx
c001984b:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c0019851:	53                   	push   ebx
c0019852:	e8 3b fe ff ff       	call   c0019692 <EnvVarContainer::EnvVarContainer(Process*)>
c0019857:	89 1d 30 d5 02 c0    	mov    DWORD PTR ds:0xc002d530,ebx
c001985d:	83 c4 18             	add    esp,0x18
c0019860:	5b                   	pop    ebx
c0019861:	c3                   	ret    

c0019862 <Krnl::flushEnv()>:
c0019862:	c3                   	ret    

c0019863 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019863:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019867:	8b 15 30 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d530
c001986d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019873:	a1 34 d5 02 c0       	mov    eax,ds:0xc002d534
c0019878:	8b 00                	mov    eax,DWORD PTR [eax]
c001987a:	03 01                	add    eax,DWORD PTR [ecx]
c001987c:	85 d2                	test   edx,edx
c001987e:	74 02                	je     c0019882 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019880:	03 02                	add    eax,DWORD PTR [edx]
c0019882:	c3                   	ret    

c0019883 <Krnl::getProcessEnvPair(Process*, int)>:
c0019883:	57                   	push   edi
c0019884:	8b 0d 30 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d530
c001988a:	56                   	push   esi
c001988b:	85 c9                	test   ecx,ecx
c001988d:	53                   	push   ebx
c001988e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019892:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019896:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001989c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00198a2:	75 47                	jne    c00198eb <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00198a4:	39 c3                	cmp    ebx,eax
c00198a6:	7c 47                	jl     c00198ef <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c00198a8:	8b 15 34 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d534
c00198ae:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198b0:	01 c1                	add    ecx,eax
c00198b2:	39 d9                	cmp    ecx,ebx
c00198b4:	7e 6c                	jle    c0019922 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00198b6:	51                   	push   ecx
c00198b7:	89 d9                	mov    ecx,ebx
c00198b9:	29 c1                	sub    ecx,eax
c00198bb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00198be:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c00198c2:	53                   	push   ebx
c00198c3:	68 97 a2 02 c0       	push   0xc002a297
c00198c8:	e8 60 8f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00198cd:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c00198d3:	2b 18                	sub    ebx,DWORD PTR [eax]
c00198d5:	a1 34 d5 02 c0       	mov    eax,ds:0xc002d534
c00198da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00198dd:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c00198e1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00198e4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00198e7:	89 06                	mov    DWORD PTR [esi],eax
c00198e9:	eb 51                	jmp    c001993c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c00198eb:	39 c3                	cmp    ebx,eax
c00198ed:	7d 05                	jge    c00198f4 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c00198ef:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00198f2:	eb 20                	jmp    c0019914 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c00198f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00198f6:	8d 14 07             	lea    edx,[edi+eax*1]
c00198f9:	39 da                	cmp    edx,ebx
c00198fb:	7e 04                	jle    c0019901 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c00198fd:	29 c3                	sub    ebx,eax
c00198ff:	eb 10                	jmp    c0019911 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019901:	8b 0d 34 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d534
c0019907:	03 11                	add    edx,DWORD PTR [ecx]
c0019909:	39 da                	cmp    edx,ebx
c001990b:	7e 15                	jle    c0019922 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001990d:	29 c3                	sub    ebx,eax
c001990f:	29 fb                	sub    ebx,edi
c0019911:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019914:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019918:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001991b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001991e:	89 06                	mov    DWORD PTR [esi],eax
c0019920:	eb 1d                	jmp    c001993f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	68 ab a2 02 c0       	push   0xc002a2ab
c001992a:	e8 18 00 00 00       	call   c0019947 <Krnl::panic(char const*)>
c001992f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019935:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	89 f0                	mov    eax,esi
c0019941:	5b                   	pop    ebx
c0019942:	5e                   	pop    esi
c0019943:	5f                   	pop    edi
c0019944:	c2 04 00             	ret    0x4

c0019947 <Krnl::panic(char const*)>:
c0019947:	55                   	push   ebp
c0019948:	89 e5                	mov    ebp,esp
c001994a:	53                   	push   ebx
c001994b:	50                   	push   eax
c001994c:	a1 3c d5 02 c0       	mov    eax,ds:0xc002d53c
c0019951:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019954:	85 c0                	test   eax,eax
c0019956:	74 02                	je     c001995a <Krnl::panic(char const*)+0x13>
c0019958:	ff d0                	call   eax
c001995a:	fa                   	cli    
c001995b:	c6 05 40 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d540,0x1
c0019962:	83 ec 08             	sub    esp,0x8
c0019965:	c6 05 44 b9 02 c0 00 	mov    BYTE PTR ds:0xc002b944,0x0
c001996c:	53                   	push   ebx
c001996d:	68 c5 a2 02 c0       	push   0xc002a2c5
c0019972:	e8 b6 8e ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0019977:	58                   	pop    eax
c0019978:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001997d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019983:	e8 67 70 ff ff       	call   c00109ef <setActiveTerminal(VgaText*)>
c0019988:	83 c4 0c             	add    esp,0xc
c001998b:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019990:	6a 01                	push   0x1
c0019992:	6a 0f                	push   0xf
c0019994:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001999a:	e8 d9 69 ff ff       	call   c0010378 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001999f:	5a                   	pop    edx
c00199a0:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00199a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ab:	e8 e0 72 ff ff       	call   c0010c90 <VgaText::clearScreen()>
c00199b0:	59                   	pop    ecx
c00199b1:	58                   	pop    eax
c00199b2:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00199b7:	68 de a2 02 c0       	push   0xc002a2de
c00199bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c2:	e8 47 74 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00199c7:	58                   	pop    eax
c00199c8:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00199cd:	5a                   	pop    edx
c00199ce:	68 84 a3 02 c0       	push   0xc002a384
c00199d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d9:	e8 30 74 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00199de:	59                   	pop    ecx
c00199df:	58                   	pop    eax
c00199e0:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00199e5:	68 fa a2 02 c0       	push   0xc002a2fa
c00199ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199f0:	e8 19 74 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c00199f5:	58                   	pop    eax
c00199f6:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c00199fb:	5a                   	pop    edx
c00199fc:	53                   	push   ebx
c00199fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a03:	e8 06 74 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a08:	59                   	pop    ecx
c0019a09:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a0e:	5b                   	pop    ebx
c0019a0f:	68 1a a3 02 c0       	push   0xc002a31a
c0019a14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1a:	e8 ef 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a1f:	58                   	pop    eax
c0019a20:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a25:	5a                   	pop    edx
c0019a26:	68 c0 a3 02 c0       	push   0xc002a3c0
c0019a2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a31:	e8 d8 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a36:	59                   	pop    ecx
c0019a37:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a3c:	5b                   	pop    ebx
c0019a3d:	68 fa a2 02 c0       	push   0xc002a2fa
c0019a42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a48:	e8 c1 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a4d:	58                   	pop    eax
c0019a4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a53:	5a                   	pop    edx
c0019a54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a57:	83 c0 0c             	add    eax,0xc
c0019a5a:	50                   	push   eax
c0019a5b:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a66:	e8 a3 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a6b:	59                   	pop    ecx
c0019a6c:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a71:	5b                   	pop    ebx
c0019a72:	68 19 a3 02 c0       	push   0xc002a319
c0019a77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a7d:	e8 8c 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a82:	58                   	pop    eax
c0019a83:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a88:	5a                   	pop    edx
c0019a89:	68 ec a3 02 c0       	push   0xc002a3ec
c0019a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a94:	e8 75 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019a99:	59                   	pop    ecx
c0019a9a:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019a9f:	5b                   	pop    ebx
c0019aa0:	68 2c a4 02 c0       	push   0xc002a42c
c0019aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aab:	e8 5e 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019ab0:	58                   	pop    eax
c0019ab1:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019ab6:	5a                   	pop    edx
c0019ab7:	68 05 a3 02 c0       	push   0xc002a305
c0019abc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ac2:	e8 47 73 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019ac7:	59                   	pop    ecx
c0019ac8:	5b                   	pop    ebx
c0019ac9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019acc:	68 1d a3 02 c0       	push   0xc002a31d
c0019ad1:	e8 57 8d ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0019ad6:	58                   	pop    eax
c0019ad7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ada:	5a                   	pop    edx
c0019adb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ade:	68 26 a3 02 c0       	push   0xc002a326
c0019ae3:	e8 45 8d ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0019ae8:	59                   	pop    ecx
c0019ae9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019aec:	5b                   	pop    ebx
c0019aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019af2:	68 2f a3 02 c0       	push   0xc002a32f
c0019af7:	e8 31 8d ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0019afc:	58                   	pop    eax
c0019afd:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b02:	5a                   	pop    edx
c0019b03:	68 70 a4 02 c0       	push   0xc002a470
c0019b08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b0e:	e8 fb 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019b13:	59                   	pop    ecx
c0019b14:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b19:	5b                   	pop    ebx
c0019b1a:	68 38 a3 02 c0       	push   0xc002a338
c0019b1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b25:	e8 e4 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019b2a:	0f 20 c0             	mov    eax,cr0
c0019b2d:	5a                   	pop    edx
c0019b2e:	59                   	pop    ecx
c0019b2f:	50                   	push   eax
c0019b30:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b3b:	e8 f4 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019b40:	5b                   	pop    ebx
c0019b41:	58                   	pop    eax
c0019b42:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b47:	68 42 a3 02 c0       	push   0xc002a342
c0019b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b52:	e8 b7 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019b57:	0f 20 d0             	mov    eax,cr2
c0019b5a:	5a                   	pop    edx
c0019b5b:	59                   	pop    ecx
c0019b5c:	50                   	push   eax
c0019b5d:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b68:	e8 c7 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019b6d:	5b                   	pop    ebx
c0019b6e:	58                   	pop    eax
c0019b6f:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b74:	68 4c a3 02 c0       	push   0xc002a34c
c0019b79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b7f:	e8 8a 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019b84:	0f 20 d8             	mov    eax,cr3
c0019b87:	5a                   	pop    edx
c0019b88:	59                   	pop    ecx
c0019b89:	50                   	push   eax
c0019b8a:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019b8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b95:	e8 9a 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019b9a:	5b                   	pop    ebx
c0019b9b:	58                   	pop    eax
c0019b9c:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019ba1:	68 5f a3 02 c0       	push   0xc002a35f
c0019ba6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bac:	e8 5d 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019bb1:	0f 20 e0             	mov    eax,cr4
c0019bb4:	5a                   	pop    edx
c0019bb5:	59                   	pop    ecx
c0019bb6:	50                   	push   eax
c0019bb7:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019bbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bc2:	e8 6d 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019bc7:	5b                   	pop    ebx
c0019bc8:	58                   	pop    eax
c0019bc9:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019bce:	68 69 a3 02 c0       	push   0xc002a369
c0019bd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bd9:	e8 30 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019bde:	5a                   	pop    edx
c0019bdf:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019be4:	59                   	pop    ecx
c0019be5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019beb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019bee:	50                   	push   eax
c0019bef:	e8 40 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019bf4:	5b                   	pop    ebx
c0019bf5:	58                   	pop    eax
c0019bf6:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019bfb:	68 80 a3 02 c0       	push   0xc002a380
c0019c00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c06:	e8 03 72 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019c0b:	5a                   	pop    edx
c0019c0c:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019c11:	59                   	pop    ecx
c0019c12:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019c18:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c1b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019c1e:	50                   	push   eax
c0019c1f:	e8 10 72 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019c24:	5b                   	pop    ebx
c0019c25:	58                   	pop    eax
c0019c26:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019c2b:	68 80 a3 02 c0       	push   0xc002a380
c0019c30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c36:	e8 d3 71 ff ff       	call   c0010e0e <VgaText::puts(char const*)>
c0019c3b:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c0019c40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019c49:	8b 12                	mov    edx,DWORD PTR [edx]
c0019c4b:	59                   	pop    ecx
c0019c4c:	5b                   	pop    ebx
c0019c4d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019c50:	50                   	push   eax
c0019c51:	e8 de 71 ff ff       	call   c0010e34 <VgaText::putx(unsigned int)>
c0019c56:	83 c4 10             	add    esp,0x10
c0019c59:	b2 fe                	mov    dl,0xfe
c0019c5b:	e4 60                	in     al,0x60
c0019c5d:	3c 1c                	cmp    al,0x1c
c0019c5f:	74 04                	je     c0019c65 <Krnl::panic(char const*)+0x31e>
c0019c61:	3c 5a                	cmp    al,0x5a
c0019c63:	75 f6                	jne    c0019c5b <Krnl::panic(char const*)+0x314>
c0019c65:	e4 64                	in     al,0x64
c0019c67:	a8 02                	test   al,0x2
c0019c69:	75 fa                	jne    c0019c65 <Krnl::panic(char const*)+0x31e>
c0019c6b:	88 d0                	mov    al,dl
c0019c6d:	e6 64                	out    0x64,al
c0019c6f:	fa                   	cli    
c0019c70:	f4                   	hlt    
c0019c71:	eb e8                	jmp    c0019c5b <Krnl::panic(char const*)+0x314>

c0019c73 <Net::switchEndian16(unsigned short)>:
c0019c73:	83 ec 04             	sub    esp,0x4
c0019c76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c7a:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019c7e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c82:	c1 f8 08             	sar    eax,0x8
c0019c85:	89 c2                	mov    edx,eax
c0019c87:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c8b:	c1 e0 08             	shl    eax,0x8
c0019c8e:	09 d0                	or     eax,edx
c0019c90:	83 c4 04             	add    esp,0x4
c0019c93:	c3                   	ret    

c0019c94 <Net::switchEndian32(unsigned int)>:
c0019c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c98:	c1 e8 18             	shr    eax,0x18
c0019c9b:	89 c2                	mov    edx,eax
c0019c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca1:	c1 e0 08             	shl    eax,0x8
c0019ca4:	25 00 00 ff 00       	and    eax,0xff0000
c0019ca9:	09 c2                	or     edx,eax
c0019cab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019caf:	c1 e8 08             	shr    eax,0x8
c0019cb2:	25 00 ff 00 00       	and    eax,0xff00
c0019cb7:	09 c2                	or     edx,eax
c0019cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cbd:	c1 e0 18             	shl    eax,0x18
c0019cc0:	09 d0                	or     eax,edx
c0019cc2:	c3                   	ret    

c0019cc3 <Net::crc32Calc(unsigned char*, int)>:
c0019cc3:	83 ec 10             	sub    esp,0x10
c0019cc6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ccb:	75 07                	jne    c0019cd4 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019ccd:	b8 00 00 00 00       	mov    eax,0x0
c0019cd2:	eb 7c                	jmp    c0019d50 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019cd4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019cd9:	7f 07                	jg     c0019ce2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019cdb:	b8 00 00 00 00       	mov    eax,0x0
c0019ce0:	eb 6e                	jmp    c0019d50 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019ce2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019cea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019cfa:	7d 4e                	jge    c0019d4a <Net::crc32Calc(unsigned char*, int)+0x87>
c0019cfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d04:	01 d0                	add    eax,edx
c0019d06:	8a 00                	mov    al,BYTE PTR [eax]
c0019d08:	0f b6 c0             	movzx  eax,al
c0019d0b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019d0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d17:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019d1c:	7f 26                	jg     c0019d44 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d22:	83 e0 01             	and    eax,0x1
c0019d25:	74 0d                	je     c0019d34 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019d27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d2b:	d1 e8                	shr    eax,1
c0019d2d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019d32:	eb 06                	jmp    c0019d3a <Net::crc32Calc(unsigned char*, int)+0x77>
c0019d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d38:	d1 e8                	shr    eax,1
c0019d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d42:	eb d3                	jmp    c0019d17 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019d44:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019d48:	eb a8                	jmp    c0019cf2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d4e:	f7 d0                	not    eax
c0019d50:	83 c4 10             	add    esp,0x10
c0019d53:	c3                   	ret    

c0019d54 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019d54:	83 ec 1c             	sub    esp,0x1c
c0019d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d67:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019d6c:	7f 14                	jg     c0019d82 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019d6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d72:	8d 50 01             	lea    edx,[eax+0x1]
c0019d75:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d79:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019d7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d80:	eb e5                	jmp    c0019d67 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019d82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d86:	8d 50 01             	lea    edx,[eax+0x1]
c0019d89:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d8d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019d90:	83 ec 04             	sub    esp,0x4
c0019d93:	6a 06                	push   0x6
c0019d95:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019d99:	50                   	push   eax
c0019d9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d9e:	e8 b2 68 fe ff       	call   c0000655 <memcpy>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019dab:	83 ec 04             	sub    esp,0x4
c0019dae:	6a 06                	push   0x6
c0019db0:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019db4:	50                   	push   eax
c0019db5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019db9:	e8 97 68 fe ff       	call   c0000655 <memcpy>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019dc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dca:	0f b7 c0             	movzx  eax,ax
c0019dcd:	c1 f8 08             	sar    eax,0x8
c0019dd0:	89 c1                	mov    ecx,eax
c0019dd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd6:	8d 50 01             	lea    edx,[eax+0x1]
c0019dd9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ddd:	88 ca                	mov    dl,cl
c0019ddf:	88 10                	mov    BYTE PTR [eax],dl
c0019de1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019de5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019de9:	8d 48 01             	lea    ecx,[eax+0x1]
c0019dec:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019df0:	88 10                	mov    BYTE PTR [eax],dl
c0019df2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dfa:	83 ec 04             	sub    esp,0x4
c0019dfd:	52                   	push   edx
c0019dfe:	50                   	push   eax
c0019dff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019e03:	e8 4d 68 fe ff       	call   c0000655 <memcpy>
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e0f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019e13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e17:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019e1b:	83 ec 08             	sub    esp,0x8
c0019e1e:	50                   	push   eax
c0019e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019e23:	e8 9b fe ff ff       	call   c0019cc3 <Net::crc32Calc(unsigned char*, int)>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e33:	c1 e8 18             	shr    eax,0x18
c0019e36:	89 c1                	mov    ecx,eax
c0019e38:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e3c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e43:	88 ca                	mov    dl,cl
c0019e45:	88 10                	mov    BYTE PTR [eax],dl
c0019e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e4b:	c1 e8 10             	shr    eax,0x10
c0019e4e:	89 c1                	mov    ecx,eax
c0019e50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e54:	8d 50 01             	lea    edx,[eax+0x1]
c0019e57:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e5b:	88 ca                	mov    dl,cl
c0019e5d:	88 10                	mov    BYTE PTR [eax],dl
c0019e5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e63:	c1 e8 08             	shr    eax,0x8
c0019e66:	89 c1                	mov    ecx,eax
c0019e68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e6f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e73:	88 ca                	mov    dl,cl
c0019e75:	88 10                	mov    BYTE PTR [eax],dl
c0019e77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e7b:	8d 50 01             	lea    edx,[eax+0x1]
c0019e7e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e86:	88 10                	mov    BYTE PTR [eax],dl
c0019e88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e8c:	83 c4 1c             	add    esp,0x1c
c0019e8f:	c3                   	ret    

c0019e90 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019e90:	83 ec 2c             	sub    esp,0x2c
c0019e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e9b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019ea0:	83 ec 04             	sub    esp,0x4
c0019ea3:	6a 06                	push   0x6
c0019ea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ea9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ead:	83 c0 0e             	add    eax,0xe
c0019eb0:	50                   	push   eax
c0019eb1:	e8 9f 67 fe ff       	call   c0000655 <memcpy>
c0019eb6:	83 c4 10             	add    esp,0x10
c0019eb9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019ebe:	83 ec 04             	sub    esp,0x4
c0019ec1:	6a 06                	push   0x6
c0019ec3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ec7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ecb:	83 c0 08             	add    eax,0x8
c0019ece:	50                   	push   eax
c0019ecf:	e8 81 67 fe ff       	call   c0000655 <memcpy>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019edc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ee0:	8d 50 01             	lea    edx,[eax+0x1]
c0019ee3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ee7:	8a 00                	mov    al,BYTE PTR [eax]
c0019ee9:	0f b6 c0             	movzx  eax,al
c0019eec:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019ef1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ef5:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019efc:	8a 00                	mov    al,BYTE PTR [eax]
c0019efe:	0f b6 c0             	movzx  eax,al
c0019f01:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019f06:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019f0b:	c1 e0 08             	shl    eax,0x8
c0019f0e:	89 c2                	mov    edx,eax
c0019f10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f14:	09 d0                	or     eax,edx
c0019f16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f1a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019f1e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019f23:	75 3a                	jne    c0019f5f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f29:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019f2c:	66 3d dc 05          	cmp    ax,0x5dc
c0019f30:	77 10                	ja     c0019f42 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f36:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019f39:	0f b7 c0             	movzx  eax,ax
c0019f3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019f40:	eb 1d                	jmp    c0019f5f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019f42:	83 ec 0c             	sub    esp,0xc
c0019f45:	68 98 a4 02 c0       	push   0xc002a498
c0019f4a:	e8 de 88 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0019f4f:	83 c4 10             	add    esp,0x10
c0019f52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f56:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019f5a:	e9 c0 00 00 00       	jmp    c001a01f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019f5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f67:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f69:	83 ec 04             	sub    esp,0x4
c0019f6c:	52                   	push   edx
c0019f6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f71:	50                   	push   eax
c0019f72:	e8 de 66 fe ff       	call   c0000655 <memcpy>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f7e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019f82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f86:	8d 50 01             	lea    edx,[eax+0x1]
c0019f89:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f8d:	8a 00                	mov    al,BYTE PTR [eax]
c0019f8f:	0f b6 c0             	movzx  eax,al
c0019f92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f9a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019fa1:	8a 00                	mov    al,BYTE PTR [eax]
c0019fa3:	0f b6 c0             	movzx  eax,al
c0019fa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019faa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019fae:	8d 50 01             	lea    edx,[eax+0x1]
c0019fb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019fb5:	8a 00                	mov    al,BYTE PTR [eax]
c0019fb7:	0f b6 c0             	movzx  eax,al
c0019fba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019fc2:	8d 50 01             	lea    edx,[eax+0x1]
c0019fc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019fc9:	8a 00                	mov    al,BYTE PTR [eax]
c0019fcb:	0f b6 c0             	movzx  eax,al
c0019fce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fd6:	c1 e0 18             	shl    eax,0x18
c0019fd9:	89 c2                	mov    edx,eax
c0019fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fdf:	c1 e0 10             	shl    eax,0x10
c0019fe2:	09 c2                	or     edx,eax
c0019fe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fe8:	c1 e0 08             	shl    eax,0x8
c0019feb:	09 d0                	or     eax,edx
c0019fed:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019ff1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ff5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ff9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019ffd:	83 e8 04             	sub    eax,0x4
c001a000:	83 ec 08             	sub    esp,0x8
c001a003:	50                   	push   eax
c001a004:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a008:	e8 b6 fc ff ff       	call   c0019cc3 <Net::crc32Calc(unsigned char*, int)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a014:	0f 94 c2             	sete   dl
c001a017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a01b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a01e:	90                   	nop
c001a01f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a023:	83 c4 2c             	add    esp,0x2c
c001a026:	c2 04 00             	ret    0x4

c001a029 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a029:	55                   	push   ebp
c001a02a:	57                   	push   edi
c001a02b:	56                   	push   esi
c001a02c:	53                   	push   ebx
c001a02d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a033:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a03a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a03c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a03f:	80 fb 40             	cmp    bl,0x40
c001a042:	75 1b                	jne    c001a05f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a044:	8a 16                	mov    dl,BYTE PTR [esi]
c001a046:	84 d2                	test   dl,dl
c001a048:	0f 84 f1 00 00 00    	je     c001a13f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a04e:	8d 46 01             	lea    eax,[esi+0x1]
c001a051:	80 fa 3a             	cmp    dl,0x3a
c001a054:	74 04                	je     c001a05a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a056:	89 c6                	mov    esi,eax
c001a058:	eb ea                	jmp    c001a044 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a05a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a05d:	89 c6                	mov    esi,eax
c001a05f:	50                   	push   eax
c001a060:	6a 40                	push   0x40
c001a062:	6a 00                	push   0x0
c001a064:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a068:	50                   	push   eax
c001a069:	e8 1d 66 fe ff       	call   c000068b <memset>
c001a06e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a075:	31 c0                	xor    eax,eax
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a07c:	84 c9                	test   cl,cl
c001a07e:	0f 84 bb 00 00 00    	je     c001a13f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a084:	3d c7 00 00 00       	cmp    eax,0xc7
c001a089:	0f 8f b0 00 00 00    	jg     c001a13f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a08f:	80 f9 0a             	cmp    cl,0xa
c001a092:	0f 85 98 00 00 00    	jne    c001a130 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a098:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a09d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a0a1:	a8 df                	test   al,0xdf
c001a0a3:	0f 94 c1             	sete   cl
c001a0a6:	3c 23                	cmp    al,0x23
c001a0a8:	0f 94 c2             	sete   dl
c001a0ab:	08 d1                	or     cl,dl
c001a0ad:	75 4a                	jne    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0af:	8d 50 f7             	lea    edx,[eax-0x9]
c001a0b2:	80 fa 01             	cmp    dl,0x1
c001a0b5:	76 42                	jbe    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0b7:	3c 5b                	cmp    al,0x5b
c001a0b9:	75 42                	jne    c001a0fd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a0bb:	80 fb 40             	cmp    bl,0x40
c001a0be:	75 39                	jne    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0c0:	83 ec 0c             	sub    esp,0xc
c001a0c3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a0c7:	52                   	push   edx
c001a0c8:	e8 db 65 fe ff       	call   c00006a8 <strlen>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	83 f8 3f             	cmp    eax,0x3f
c001a0d3:	77 6a                	ja     c001a13f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a0d5:	50                   	push   eax
c001a0d6:	50                   	push   eax
c001a0d7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a0db:	52                   	push   edx
c001a0dc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a0e0:	52                   	push   edx
c001a0e1:	e8 44 66 fe ff       	call   c000072a <strcpy>
c001a0e6:	58                   	pop    eax
c001a0e7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a0eb:	52                   	push   edx
c001a0ec:	e8 b7 65 fe ff       	call   c00006a8 <strlen>
c001a0f1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	31 d2                	xor    edx,edx
c001a0fb:	eb 3a                	jmp    c001a137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a0fd:	80 fb 40             	cmp    bl,0x40
c001a100:	74 06                	je     c001a108 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a102:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a106:	eb 20                	jmp    c001a128 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a108:	50                   	push   eax
c001a109:	50                   	push   eax
c001a10a:	55                   	push   ebp
c001a10b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a10f:	50                   	push   eax
c001a110:	e8 66 66 fe ff       	call   c000077b <strcmp>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	85 c0                	test   eax,eax
c001a11a:	75 dd                	jne    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a11c:	eb e4                	jmp    c001a102 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a11e:	8d 50 01             	lea    edx,[eax+0x1]
c001a121:	80 f9 3d             	cmp    cl,0x3d
c001a124:	74 1d                	je     c001a143 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a126:	89 d0                	mov    eax,edx
c001a128:	8a 08                	mov    cl,BYTE PTR [eax]
c001a12a:	84 c9                	test   cl,cl
c001a12c:	75 f0                	jne    c001a11e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a12e:	eb 0f                	jmp    c001a13f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a130:	8d 50 01             	lea    edx,[eax+0x1]
c001a133:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a137:	47                   	inc    edi
c001a138:	89 d0                	mov    eax,edx
c001a13a:	e9 3b ff ff ff       	jmp    c001a07a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a13f:	31 c0                	xor    eax,eax
c001a141:	eb 33                	jmp    c001a176 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a143:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a147:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a14a:	50                   	push   eax
c001a14b:	50                   	push   eax
c001a14c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a150:	50                   	push   eax
c001a151:	56                   	push   esi
c001a152:	e8 24 66 fe ff       	call   c000077b <strcmp>
c001a157:	83 c4 10             	add    esp,0x10
c001a15a:	85 c0                	test   eax,eax
c001a15c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a160:	75 97                	jne    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a162:	51                   	push   ecx
c001a163:	51                   	push   ecx
c001a164:	52                   	push   edx
c001a165:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a16c:	e8 b9 65 fe ff       	call   c000072a <strcpy>
c001a171:	83 c4 10             	add    esp,0x10
c001a174:	b0 01                	mov    al,0x1
c001a176:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a17c:	5b                   	pop    ebx
c001a17d:	5e                   	pop    esi
c001a17e:	5f                   	pop    edi
c001a17f:	5d                   	pop    ebp
c001a180:	c3                   	ret    

c001a181 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a181:	57                   	push   edi
c001a182:	56                   	push   esi
c001a183:	53                   	push   ebx
c001a184:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a18a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a191:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a198:	53                   	push   ebx
c001a199:	e8 0a 65 fe ff       	call   c00006a8 <strlen>
c001a19e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1a1:	89 c7                	mov    edi,eax
c001a1a3:	e8 00 65 fe ff       	call   c00006a8 <strlen>
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a1af:	3d ff 00 00 00       	cmp    eax,0xff
c001a1b4:	0f 87 d3 00 00 00    	ja     c001a28d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a1ba:	57                   	push   edi
c001a1bb:	57                   	push   edi
c001a1bc:	56                   	push   esi
c001a1bd:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a1c1:	56                   	push   esi
c001a1c2:	e8 63 65 fe ff       	call   c000072a <strcpy>
c001a1c7:	58                   	pop    eax
c001a1c8:	5a                   	pop    edx
c001a1c9:	68 46 a8 02 c0       	push   0xc002a846
c001a1ce:	56                   	push   esi
c001a1cf:	e8 0d 66 fe ff       	call   c00007e1 <strcat>
c001a1d4:	59                   	pop    ecx
c001a1d5:	5f                   	pop    edi
c001a1d6:	53                   	push   ebx
c001a1d7:	56                   	push   esi
c001a1d8:	e8 04 66 fe ff       	call   c00007e1 <strcat>
c001a1dd:	58                   	pop    eax
c001a1de:	5a                   	pop    edx
c001a1df:	68 e4 a4 02 c0       	push   0xc002a4e4
c001a1e4:	56                   	push   esi
c001a1e5:	e8 f7 65 fe ff       	call   c00007e1 <strcat>
c001a1ea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a1f1:	e8 de 52 ff ff       	call   c000f4d4 <malloc>
c001a1f6:	83 c4 0c             	add    esp,0xc
c001a1f9:	89 c3                	mov    ebx,eax
c001a1fb:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c001a201:	56                   	push   esi
c001a202:	50                   	push   eax
c001a203:	e8 54 8b ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001a208:	83 c4 10             	add    esp,0x10
c001a20b:	85 db                	test   ebx,ebx
c001a20d:	74 7e                	je     c001a28d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a20f:	51                   	push   ecx
c001a210:	51                   	push   ecx
c001a211:	6a 01                	push   0x1
c001a213:	53                   	push   ebx
c001a214:	e8 a7 8b ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	85 c0                	test   eax,eax
c001a21e:	74 08                	je     c001a228 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a220:	83 ec 0c             	sub    esp,0xc
c001a223:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a225:	53                   	push   ebx
c001a226:	eb 5f                	jmp    c001a287 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a228:	52                   	push   edx
c001a229:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a22d:	50                   	push   eax
c001a22e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a232:	50                   	push   eax
c001a233:	53                   	push   ebx
c001a234:	e8 33 8e ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c001a239:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a23d:	83 c4 10             	add    esp,0x10
c001a240:	89 c1                	mov    ecx,eax
c001a242:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a246:	74 31                	je     c001a279 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	50                   	push   eax
c001a24c:	e8 83 52 ff ff       	call   c000f4d4 <malloc>
c001a251:	89 c6                	mov    esi,eax
c001a253:	58                   	pop    eax
c001a254:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a256:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a25a:	52                   	push   edx
c001a25b:	56                   	push   esi
c001a25c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a260:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a264:	53                   	push   ebx
c001a265:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a268:	83 c4 20             	add    esp,0x20
c001a26b:	85 c0                	test   eax,eax
c001a26d:	75 0a                	jne    c001a279 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a26f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a273:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a277:	74 18                	je     c001a291 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a279:	83 ec 0c             	sub    esp,0xc
c001a27c:	53                   	push   ebx
c001a27d:	e8 9c 8b ff ff       	call   c0012e1e <File::close()>
c001a282:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a287:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a28a:	83 c4 10             	add    esp,0x10
c001a28d:	31 c0                	xor    eax,eax
c001a28f:	eb 3b                	jmp    c001a2cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a291:	83 ec 0c             	sub    esp,0xc
c001a294:	53                   	push   ebx
c001a295:	e8 84 8b ff ff       	call   c0012e1e <File::close()>
c001a29a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a29c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a29f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a2a2:	83 c4 0c             	add    esp,0xc
c001a2a5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a2ac:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a2b3:	56                   	push   esi
c001a2b4:	e8 70 fd ff ff       	call   c001a029 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a2b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2bc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a2c0:	e8 1f 52 ff ff       	call   c000f4e4 <free>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a2cc:	81 c4 20 01 00 00    	add    esp,0x120
c001a2d2:	5b                   	pop    ebx
c001a2d3:	5e                   	pop    esi
c001a2d4:	5f                   	pop    edi
c001a2d5:	c3                   	ret    

c001a2d6 <Reg::getLine(char*, char*, char*)>:
c001a2d6:	57                   	push   edi
c001a2d7:	56                   	push   esi
c001a2d8:	53                   	push   ebx
c001a2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a2dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a2e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a2e5:	57                   	push   edi
c001a2e6:	56                   	push   esi
c001a2e7:	53                   	push   ebx
c001a2e8:	68 e9 a4 02 c0       	push   0xc002a4e9
c001a2ed:	e8 8f fe ff ff       	call   c001a181 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	84 c0                	test   al,al
c001a2f7:	75 10                	jne    c001a309 <Reg::getLine(char*, char*, char*)+0x33>
c001a2f9:	57                   	push   edi
c001a2fa:	56                   	push   esi
c001a2fb:	53                   	push   ebx
c001a2fc:	68 0e a5 02 c0       	push   0xc002a50e
c001a301:	e8 7b fe ff ff       	call   c001a181 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a306:	83 c4 10             	add    esp,0x10
c001a309:	5b                   	pop    ebx
c001a30a:	5e                   	pop    esi
c001a30b:	5f                   	pop    edi
c001a30c:	c3                   	ret    

c001a30d <Reg::readInt(char*, char*, int*)>:
c001a30d:	55                   	push   ebp
c001a30e:	57                   	push   edi
c001a30f:	56                   	push   esi
c001a310:	53                   	push   ebx
c001a311:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a317:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a31b:	57                   	push   edi
c001a31c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a323:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a32a:	e8 a7 ff ff ff       	call   c001a2d6 <Reg::getLine(char*, char*, char*)>
c001a32f:	83 c4 10             	add    esp,0x10
c001a332:	84 c0                	test   al,al
c001a334:	0f 84 b3 00 00 00    	je     c001a3ed <Reg::readInt(char*, char*, int*)+0xe0>
c001a33a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a33e:	80 fa 2b             	cmp    dl,0x2b
c001a341:	74 0c                	je     c001a34f <Reg::readInt(char*, char*, int*)+0x42>
c001a343:	80 fa 2d             	cmp    dl,0x2d
c001a346:	75 0e                	jne    c001a356 <Reg::readInt(char*, char*, int*)+0x49>
c001a348:	ba 01 00 00 00       	mov    edx,0x1
c001a34d:	eb 0b                	jmp    c001a35a <Reg::readInt(char*, char*, int*)+0x4d>
c001a34f:	ba 01 00 00 00       	mov    edx,0x1
c001a354:	eb 02                	jmp    c001a358 <Reg::readInt(char*, char*, int*)+0x4b>
c001a356:	31 d2                	xor    edx,edx
c001a358:	31 c0                	xor    eax,eax
c001a35a:	be 0a 00 00 00       	mov    esi,0xa
c001a35f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a364:	75 20                	jne    c001a386 <Reg::readInt(char*, char*, int*)+0x79>
c001a366:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a36a:	80 f9 78             	cmp    cl,0x78
c001a36d:	75 0a                	jne    c001a379 <Reg::readInt(char*, char*, int*)+0x6c>
c001a36f:	83 c2 02             	add    edx,0x2
c001a372:	be 10 00 00 00       	mov    esi,0x10
c001a377:	eb 0d                	jmp    c001a386 <Reg::readInt(char*, char*, int*)+0x79>
c001a379:	80 f9 62             	cmp    cl,0x62
c001a37c:	75 08                	jne    c001a386 <Reg::readInt(char*, char*, int*)+0x79>
c001a37e:	83 c2 02             	add    edx,0x2
c001a381:	be 02 00 00 00       	mov    esi,0x2
c001a386:	01 d7                	add    edi,edx
c001a388:	31 d2                	xor    edx,edx
c001a38a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a38c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a390:	80 fb 0d             	cmp    bl,0xd
c001a393:	0f 94 c3             	sete   bl
c001a396:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a39b:	0f 94 c1             	sete   cl
c001a39e:	08 cb                	or     bl,cl
c001a3a0:	75 3a                	jne    c001a3dc <Reg::readInt(char*, char*, int*)+0xcf>
c001a3a2:	0f af d6             	imul   edx,esi
c001a3a5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a3aa:	83 fe 10             	cmp    esi,0x10
c001a3ad:	75 26                	jne    c001a3d5 <Reg::readInt(char*, char*, int*)+0xc8>
c001a3af:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a3b3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a3b6:	89 e9                	mov    ecx,ebp
c001a3b8:	80 f9 05             	cmp    cl,0x5
c001a3bb:	77 06                	ja     c001a3c3 <Reg::readInt(char*, char*, int*)+0xb6>
c001a3bd:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a3c1:	eb 16                	jmp    c001a3d9 <Reg::readInt(char*, char*, int*)+0xcc>
c001a3c3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a3c7:	83 e9 61             	sub    ecx,0x61
c001a3ca:	80 f9 05             	cmp    cl,0x5
c001a3cd:	77 06                	ja     c001a3d5 <Reg::readInt(char*, char*, int*)+0xc8>
c001a3cf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a3d3:	eb 04                	jmp    c001a3d9 <Reg::readInt(char*, char*, int*)+0xcc>
c001a3d5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a3d9:	47                   	inc    edi
c001a3da:	eb ae                	jmp    c001a38a <Reg::readInt(char*, char*, int*)+0x7d>
c001a3dc:	84 c0                	test   al,al
c001a3de:	74 02                	je     c001a3e2 <Reg::readInt(char*, char*, int*)+0xd5>
c001a3e0:	f7 da                	neg    edx
c001a3e2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a3e9:	89 10                	mov    DWORD PTR [eax],edx
c001a3eb:	88 d8                	mov    al,bl
c001a3ed:	81 c4 ec 00 00 00    	add    esp,0xec
c001a3f3:	5b                   	pop    ebx
c001a3f4:	5e                   	pop    esi
c001a3f5:	5f                   	pop    edi
c001a3f6:	5d                   	pop    ebp
c001a3f7:	c3                   	ret    

c001a3f8 <Reg::readString(char*, char*, char*, int)>:
c001a3f8:	57                   	push   edi
c001a3f9:	56                   	push   esi
c001a3fa:	53                   	push   ebx
c001a3fb:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a401:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a408:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a40c:	57                   	push   edi
c001a40d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a414:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a41b:	e8 b6 fe ff ff       	call   c001a2d6 <Reg::getLine(char*, char*, char*)>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	89 c6                	mov    esi,eax
c001a425:	84 c0                	test   al,al
c001a427:	74 44                	je     c001a46d <Reg::readString(char*, char*, char*, int)+0x75>
c001a429:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a430:	31 c0                	xor    eax,eax
c001a432:	4a                   	dec    edx
c001a433:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a436:	84 c9                	test   cl,cl
c001a438:	74 0f                	je     c001a449 <Reg::readString(char*, char*, char*, int)+0x51>
c001a43a:	39 c2                	cmp    edx,eax
c001a43c:	7e 0b                	jle    c001a449 <Reg::readString(char*, char*, char*, int)+0x51>
c001a43e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a441:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a446:	40                   	inc    eax
c001a447:	eb ea                	jmp    c001a433 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a449:	83 ec 0c             	sub    esp,0xc
c001a44c:	53                   	push   ebx
c001a44d:	e8 56 62 fe ff       	call   c00006a8 <strlen>
c001a452:	83 c4 10             	add    esp,0x10
c001a455:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a45a:	75 11                	jne    c001a46d <Reg::readString(char*, char*, char*, int)+0x75>
c001a45c:	83 ec 0c             	sub    esp,0xc
c001a45f:	53                   	push   ebx
c001a460:	e8 43 62 fe ff       	call   c00006a8 <strlen>
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a46d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a473:	89 f0                	mov    eax,esi
c001a475:	5b                   	pop    ebx
c001a476:	5e                   	pop    esi
c001a477:	5f                   	pop    edi
c001a478:	c3                   	ret    

c001a479 <Reg::readBool(char*, char*, bool*)>:
c001a479:	83 ec 20             	sub    esp,0x20
c001a47c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a480:	50                   	push   eax
c001a481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a489:	e8 7f fe ff ff       	call   c001a30d <Reg::readInt(char*, char*, int*)>
c001a48e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a493:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a497:	0f 95 02             	setne  BYTE PTR [edx]
c001a49a:	83 c4 2c             	add    esp,0x2c
c001a49d:	c3                   	ret    

c001a49e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a49e:	53                   	push   ebx
c001a49f:	83 ec 1c             	sub    esp,0x1c
c001a4a2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a4a6:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a4aa:	50                   	push   eax
c001a4ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4b3:	e8 c1 ff ff ff       	call   c001a479 <Reg::readBool(char*, char*, bool*)>
c001a4b8:	83 c4 10             	add    esp,0x10
c001a4bb:	84 c0                	test   al,al
c001a4bd:	74 04                	je     c001a4c3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a4bf:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a4c3:	88 d8                	mov    al,bl
c001a4c5:	83 c4 18             	add    esp,0x18
c001a4c8:	5b                   	pop    ebx
c001a4c9:	c3                   	ret    

c001a4ca <Reg::readIntWithDefault(char*, char*, int)>:
c001a4ca:	53                   	push   ebx
c001a4cb:	83 ec 1c             	sub    esp,0x1c
c001a4ce:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a4d2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4d6:	50                   	push   eax
c001a4d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4df:	e8 29 fe ff ff       	call   c001a30d <Reg::readInt(char*, char*, int*)>
c001a4e4:	83 c4 10             	add    esp,0x10
c001a4e7:	84 c0                	test   al,al
c001a4e9:	74 04                	je     c001a4ef <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a4eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a4ef:	89 d8                	mov    eax,ebx
c001a4f1:	83 c4 18             	add    esp,0x18
c001a4f4:	5b                   	pop    ebx
c001a4f5:	c3                   	ret    

c001a4f6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a4f6:	57                   	push   edi
c001a4f7:	56                   	push   esi
c001a4f8:	53                   	push   ebx
c001a4f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4fd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a501:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a505:	56                   	push   esi
c001a506:	53                   	push   ebx
c001a507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a50f:	e8 e4 fe ff ff       	call   c001a3f8 <Reg::readString(char*, char*, char*, int)>
c001a514:	83 c4 10             	add    esp,0x10
c001a517:	84 c0                	test   al,al
c001a519:	75 1b                	jne    c001a536 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a51b:	50                   	push   eax
c001a51c:	56                   	push   esi
c001a51d:	4e                   	dec    esi
c001a51e:	6a 00                	push   0x0
c001a520:	53                   	push   ebx
c001a521:	e8 65 61 fe ff       	call   c000068b <memset>
c001a526:	83 c4 0c             	add    esp,0xc
c001a529:	56                   	push   esi
c001a52a:	57                   	push   edi
c001a52b:	53                   	push   ebx
c001a52c:	89 fb                	mov    ebx,edi
c001a52e:	e8 22 61 fe ff       	call   c0000655 <memcpy>
c001a533:	83 c4 10             	add    esp,0x10
c001a536:	89 d8                	mov    eax,ebx
c001a538:	5b                   	pop    ebx
c001a539:	5e                   	pop    esi
c001a53a:	5f                   	pop    edi
c001a53b:	c3                   	ret    

c001a53c <Sys::exit(regs*)>:
c001a53c:	83 ec 18             	sub    esp,0x18
c001a53f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a543:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a546:	e8 ce 32 00 00       	call   c001d819 <terminateTask(int)>
c001a54b:	83 c8 ff             	or     eax,0xffffffff
c001a54e:	83 c4 1c             	add    esp,0x1c
c001a551:	89 c2                	mov    edx,eax
c001a553:	c3                   	ret    

c001a554 <Sys::getCwd(regs*)>:
c001a554:	83 ec 10             	sub    esp,0x10
c001a557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a55b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a55e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a566:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a569:	e8 5f 8b ff ff       	call   c00130cd <getcwd(Process*, char*, int)>
c001a56e:	83 c4 1c             	add    esp,0x1c
c001a571:	99                   	cdq    
c001a572:	c3                   	ret    

c001a573 <Sys::getPID(regs*)>:
c001a573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a578:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a57b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a57d:	99                   	cdq    
c001a57e:	c3                   	ret    

c001a57f <Sys::loadDLL(regs*)>:
c001a57f:	56                   	push   esi
c001a580:	53                   	push   ebx
c001a581:	31 d2                	xor    edx,edx
c001a583:	51                   	push   ecx
c001a584:	b8 01 00 00 00       	mov    eax,0x1
c001a589:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a58d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a591:	0f 84 8c 00 00 00    	je     c001a623 <Sys::loadDLL(regs*)+0xa4>
c001a597:	83 ec 0c             	sub    esp,0xc
c001a59a:	68 14 01 00 00       	push   0x114
c001a59f:	e8 30 4f ff ff       	call   c000f4d4 <malloc>
c001a5a4:	83 c4 0c             	add    esp,0xc
c001a5a7:	89 c3                	mov    ebx,eax
c001a5a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a5b1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a5b4:	53                   	push   ebx
c001a5b5:	e8 a2 87 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	31 d2                	xor    edx,edx
c001a5bf:	b8 02 00 00 00       	mov    eax,0x2
c001a5c4:	85 db                	test   ebx,ebx
c001a5c6:	74 5b                	je     c001a623 <Sys::loadDLL(regs*)+0xa4>
c001a5c8:	83 ec 0c             	sub    esp,0xc
c001a5cb:	53                   	push   ebx
c001a5cc:	e8 5d 8a ff ff       	call   c001302e <File::exists()>
c001a5d1:	83 c4 10             	add    esp,0x10
c001a5d4:	84 c0                	test   al,al
c001a5d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5d8:	75 11                	jne    c001a5eb <Sys::loadDLL(regs*)+0x6c>
c001a5da:	83 ec 0c             	sub    esp,0xc
c001a5dd:	53                   	push   ebx
c001a5de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5e1:	83 c4 10             	add    esp,0x10
c001a5e4:	b8 03 00 00 00       	mov    eax,0x3
c001a5e9:	eb 36                	jmp    c001a621 <Sys::loadDLL(regs*)+0xa2>
c001a5eb:	83 ec 0c             	sub    esp,0xc
c001a5ee:	53                   	push   ebx
c001a5ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5f2:	58                   	pop    eax
c001a5f3:	5a                   	pop    edx
c001a5f4:	6a 00                	push   0x0
c001a5f6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a5f9:	e8 64 21 00 00       	call   c001c762 <Thr::loadDLL(char const*, bool)>
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	89 c1                	mov    ecx,eax
c001a603:	31 d2                	xor    edx,edx
c001a605:	b8 04 00 00 00       	mov    eax,0x4
c001a60a:	85 c9                	test   ecx,ecx
c001a60c:	74 15                	je     c001a623 <Sys::loadDLL(regs*)+0xa4>
c001a60e:	53                   	push   ebx
c001a60f:	53                   	push   ebx
c001a610:	ff 35 08 ca 02 c0    	push   DWORD PTR ds:0xc002ca08
c001a616:	51                   	push   ecx
c001a617:	e8 55 23 00 00       	call   c001c971 <Thr::executeDLL(unsigned long, void*)>
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	31 c0                	xor    eax,eax
c001a621:	31 d2                	xor    edx,edx
c001a623:	59                   	pop    ecx
c001a624:	5b                   	pop    ebx
c001a625:	5e                   	pop    esi
c001a626:	c3                   	ret    

c001a627 <Sys::read(regs*)>:
c001a627:	57                   	push   edi
c001a628:	56                   	push   esi
c001a629:	53                   	push   ebx
c001a62a:	83 ec 10             	sub    esp,0x10
c001a62d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a631:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a634:	83 f8 02             	cmp    eax,0x2
c001a637:	77 10                	ja     c001a649 <Sys::read(regs*)+0x22>
c001a639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a63e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a641:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a647:	eb 0e                	jmp    c001a657 <Sys::read(regs*)+0x30>
c001a649:	83 ec 0c             	sub    esp,0xc
c001a64c:	50                   	push   eax
c001a64d:	e8 95 70 ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	89 c1                	mov    ecx,eax
c001a657:	83 c8 ff             	or     eax,0xffffffff
c001a65a:	85 c9                	test   ecx,ecx
c001a65c:	89 c2                	mov    edx,eax
c001a65e:	74 28                	je     c001a688 <Sys::read(regs*)+0x61>
c001a660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a668:	31 ff                	xor    edi,edi
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a66f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a673:	52                   	push   edx
c001a674:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a677:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a67a:	57                   	push   edi
c001a67b:	56                   	push   esi
c001a67c:	51                   	push   ecx
c001a67d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a684:	83 c4 20             	add    esp,0x20
c001a687:	99                   	cdq    
c001a688:	83 c4 10             	add    esp,0x10
c001a68b:	5b                   	pop    ebx
c001a68c:	5e                   	pop    esi
c001a68d:	5f                   	pop    edi
c001a68e:	c3                   	ret    

c001a68f <Sys::sbrk(regs*)>:
c001a68f:	56                   	push   esi
c001a690:	53                   	push   ebx
c001a691:	50                   	push   eax
c001a692:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a697:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a69b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a69e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a6a1:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a6a7:	85 db                	test   ebx,ebx
c001a6a9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a6ac:	74 02                	je     c001a6b0 <Sys::sbrk(regs*)+0x21>
c001a6ae:	79 06                	jns    c001a6b6 <Sys::sbrk(regs*)+0x27>
c001a6b0:	89 f0                	mov    eax,esi
c001a6b2:	31 d2                	xor    edx,edx
c001a6b4:	eb 2a                	jmp    c001a6e0 <Sys::sbrk(regs*)+0x51>
c001a6b6:	83 c8 ff             	or     eax,0xffffffff
c001a6b9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a6bf:	89 c2                	mov    edx,eax
c001a6c1:	77 1d                	ja     c001a6e0 <Sys::sbrk(regs*)+0x51>
c001a6c3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a6c9:	50                   	push   eax
c001a6ca:	c1 ea 0c             	shr    edx,0xc
c001a6cd:	68 07 04 00 00       	push   0x407
c001a6d2:	52                   	push   edx
c001a6d3:	51                   	push   ecx
c001a6d4:	e8 2f 79 ff ff       	call   c0012008 <VAS::allocatePages(int, int)>
c001a6d9:	89 f0                	mov    eax,esi
c001a6db:	31 d2                	xor    edx,edx
c001a6dd:	83 c4 10             	add    esp,0x10
c001a6e0:	59                   	pop    ecx
c001a6e1:	5b                   	pop    ebx
c001a6e2:	5e                   	pop    esi
c001a6e3:	c3                   	ret    

c001a6e4 <Sys::setCwd(regs*)>:
c001a6e4:	83 ec 14             	sub    esp,0x14
c001a6e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6eb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a6ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a6f6:	e8 fc 89 ff ff       	call   c00130f7 <setcwd(Process*, char*)>
c001a6fb:	83 c4 1c             	add    esp,0x1c
c001a6fe:	99                   	cdq    
c001a6ff:	c3                   	ret    

c001a700 <Sys::write(regs*)>:
c001a700:	57                   	push   edi
c001a701:	56                   	push   esi
c001a702:	53                   	push   ebx
c001a703:	83 ec 10             	sub    esp,0x10
c001a706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a70a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a70d:	83 f8 02             	cmp    eax,0x2
c001a710:	77 10                	ja     c001a722 <Sys::write(regs*)+0x22>
c001a712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a717:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a71a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a720:	eb 0e                	jmp    c001a730 <Sys::write(regs*)+0x30>
c001a722:	83 ec 0c             	sub    esp,0xc
c001a725:	50                   	push   eax
c001a726:	e8 bc 6f ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	89 c1                	mov    ecx,eax
c001a730:	83 c8 ff             	or     eax,0xffffffff
c001a733:	85 c9                	test   ecx,ecx
c001a735:	89 c2                	mov    edx,eax
c001a737:	74 28                	je     c001a761 <Sys::write(regs*)+0x61>
c001a739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a741:	31 ff                	xor    edi,edi
c001a743:	83 ec 0c             	sub    esp,0xc
c001a746:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a748:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a74c:	52                   	push   edx
c001a74d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a750:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a753:	57                   	push   edi
c001a754:	56                   	push   esi
c001a755:	51                   	push   ecx
c001a756:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a759:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a75d:	83 c4 20             	add    esp,0x20
c001a760:	99                   	cdq    
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	5b                   	pop    ebx
c001a765:	5e                   	pop    esi
c001a766:	5f                   	pop    edi
c001a767:	c3                   	ret    

c001a768 <Sys::yield(regs*)>:
c001a768:	57                   	push   edi
c001a769:	56                   	push   esi
c001a76a:	53                   	push   ebx
c001a76b:	e8 66 26 00 00       	call   c001cdd6 <lockScheduler()>
c001a770:	e8 9d 29 00 00       	call   c001d112 <schedule()>
c001a775:	e8 5e 26 00 00       	call   c001cdd8 <unlockScheduler()>
c001a77a:	8b 35 90 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d090
c001a780:	8b 3d 94 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d094
c001a786:	89 f0                	mov    eax,esi
c001a788:	89 fb                	mov    ebx,edi
c001a78a:	89 f1                	mov    ecx,esi
c001a78c:	c1 e0 07             	shl    eax,0x7
c001a78f:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a793:	25 80 30 0f 00       	and    eax,0xf3080
c001a798:	c1 eb 17             	shr    ebx,0x17
c001a79b:	31 c8                	xor    eax,ecx
c001a79d:	89 da                	mov    edx,ebx
c001a79f:	5b                   	pop    ebx
c001a7a0:	5e                   	pop    esi
c001a7a1:	5f                   	pop    edi
c001a7a2:	c3                   	ret    

c001a7a3 <sysCallSeekDir(regs*)>:
c001a7a3:	31 c0                	xor    eax,eax
c001a7a5:	31 d2                	xor    edx,edx
c001a7a7:	c3                   	ret    

c001a7a8 <sysCallTellDir(regs*)>:
c001a7a8:	31 c0                	xor    eax,eax
c001a7aa:	31 d2                	xor    edx,edx
c001a7ac:	c3                   	ret    

c001a7ad <sysCallVerify(regs*)>:
c001a7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7b1:	31 d2                	xor    edx,edx
c001a7b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a7b6:	c3                   	ret    

c001a7b7 <sysCallGetArgc(regs*)>:
c001a7b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7bf:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a7c5:	99                   	cdq    
c001a7c6:	c3                   	ret    

c001a7c7 <sysFormatDisk(regs*)>:
c001a7c7:	56                   	push   esi
c001a7c8:	53                   	push   ebx
c001a7c9:	53                   	push   ebx
c001a7ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7ce:	8b 1d 88 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb88
c001a7d4:	eb 25                	jmp    c001a7fb <sysFormatDisk(regs*)+0x34>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a7dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a7de:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a7e1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a7e4:	50                   	push   eax
c001a7e5:	ff 34 85 20 d0 02 c0 	push   DWORD PTR [eax*4-0x3ffd2fe0]
c001a7ec:	53                   	push   ebx
c001a7ed:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a7f0:	83 c4 20             	add    esp,0x20
c001a7f3:	83 f8 08             	cmp    eax,0x8
c001a7f6:	75 12                	jne    c001a80a <sysFormatDisk(regs*)+0x43>
c001a7f8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a7fb:	85 db                	test   ebx,ebx
c001a7fd:	75 d7                	jne    c001a7d6 <sysFormatDisk(regs*)+0xf>
c001a7ff:	59                   	pop    ecx
c001a800:	b8 03 00 00 00       	mov    eax,0x3
c001a805:	31 d2                	xor    edx,edx
c001a807:	5b                   	pop    ebx
c001a808:	5e                   	pop    esi
c001a809:	c3                   	ret    
c001a80a:	85 c0                	test   eax,eax
c001a80c:	74 1b                	je     c001a829 <sysFormatDisk(regs*)+0x62>
c001a80e:	83 f8 09             	cmp    eax,0x9
c001a811:	74 0b                	je     c001a81e <sysFormatDisk(regs*)+0x57>
c001a813:	59                   	pop    ecx
c001a814:	b8 02 00 00 00       	mov    eax,0x2
c001a819:	31 d2                	xor    edx,edx
c001a81b:	5b                   	pop    ebx
c001a81c:	5e                   	pop    esi
c001a81d:	c3                   	ret    
c001a81e:	59                   	pop    ecx
c001a81f:	b8 01 00 00 00       	mov    eax,0x1
c001a824:	31 d2                	xor    edx,edx
c001a826:	5b                   	pop    ebx
c001a827:	5e                   	pop    esi
c001a828:	c3                   	ret    
c001a829:	59                   	pop    ecx
c001a82a:	31 c0                	xor    eax,eax
c001a82c:	31 d2                	xor    edx,edx
c001a82e:	5b                   	pop    ebx
c001a82f:	5e                   	pop    esi
c001a830:	c3                   	ret    

c001a831 <sysSetDiskVolumeLabel(regs*)>:
c001a831:	56                   	push   esi
c001a832:	53                   	push   ebx
c001a833:	53                   	push   ebx
c001a834:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a838:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a83b:	83 f8 19             	cmp    eax,0x19
c001a83e:	77 29                	ja     c001a869 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a840:	8b 0c 85 20 d0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2fe0]
c001a847:	85 c9                	test   ecx,ecx
c001a849:	74 1e                	je     c001a869 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a84b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a84e:	85 d2                	test   edx,edx
c001a850:	74 17                	je     c001a869 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a852:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a858:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a85a:	52                   	push   edx
c001a85b:	50                   	push   eax
c001a85c:	51                   	push   ecx
c001a85d:	53                   	push   ebx
c001a85e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	99                   	cdq    
c001a865:	59                   	pop    ecx
c001a866:	5b                   	pop    ebx
c001a867:	5e                   	pop    esi
c001a868:	c3                   	ret    
c001a869:	59                   	pop    ecx
c001a86a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a86f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a874:	5b                   	pop    ebx
c001a875:	5e                   	pop    esi
c001a876:	c3                   	ret    

c001a877 <sysGetDiskVolumeLabel(regs*)>:
c001a877:	57                   	push   edi
c001a878:	56                   	push   esi
c001a879:	53                   	push   ebx
c001a87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a881:	83 fa 19             	cmp    edx,0x19
c001a884:	77 34                	ja     c001a8ba <sysGetDiskVolumeLabel(regs*)+0x43>
c001a886:	8b 0c 95 20 d0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2fe0]
c001a88d:	85 c9                	test   ecx,ecx
c001a88f:	74 29                	je     c001a8ba <sysGetDiskVolumeLabel(regs*)+0x43>
c001a891:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a894:	85 db                	test   ebx,ebx
c001a896:	74 22                	je     c001a8ba <sysGetDiskVolumeLabel(regs*)+0x43>
c001a898:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a89b:	85 c0                	test   eax,eax
c001a89d:	74 1b                	je     c001a8ba <sysGetDiskVolumeLabel(regs*)+0x43>
c001a89f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a8a5:	83 ec 0c             	sub    esp,0xc
c001a8a8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a8aa:	50                   	push   eax
c001a8ab:	53                   	push   ebx
c001a8ac:	52                   	push   edx
c001a8ad:	51                   	push   ecx
c001a8ae:	56                   	push   esi
c001a8af:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a8b2:	83 c4 20             	add    esp,0x20
c001a8b5:	99                   	cdq    
c001a8b6:	5b                   	pop    ebx
c001a8b7:	5e                   	pop    esi
c001a8b8:	5f                   	pop    edi
c001a8b9:	c3                   	ret    
c001a8ba:	5b                   	pop    ebx
c001a8bb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a8c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8c5:	5e                   	pop    esi
c001a8c6:	5f                   	pop    edi
c001a8c7:	c3                   	ret    

c001a8c8 <sysShutdown(regs*)>:
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a8d2:	85 c0                	test   eax,eax
c001a8d4:	74 18                	je     c001a8ee <sysShutdown(regs*)+0x26>
c001a8d6:	83 f8 01             	cmp    eax,0x1
c001a8d9:	74 38                	je     c001a913 <sysShutdown(regs*)+0x4b>
c001a8db:	83 f8 02             	cmp    eax,0x2
c001a8de:	74 24                	je     c001a904 <sysShutdown(regs*)+0x3c>
c001a8e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8ea:	83 c4 0c             	add    esp,0xc
c001a8ed:	c3                   	ret    
c001a8ee:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001a8f3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8f5:	6a 00                	push   0x0
c001a8f7:	6a 00                	push   0x0
c001a8f9:	6a 00                	push   0x0
c001a8fb:	50                   	push   eax
c001a8fc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a8ff:	83 c4 10             	add    esp,0x10
c001a902:	eb dc                	jmp    c001a8e0 <sysShutdown(regs*)+0x18>
c001a904:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001a909:	8b 10                	mov    edx,DWORD PTR [eax]
c001a90b:	6a 00                	push   0x0
c001a90d:	6a 00                	push   0x0
c001a90f:	6a 01                	push   0x1
c001a911:	eb e8                	jmp    c001a8fb <sysShutdown(regs*)+0x33>
c001a913:	a1 a0 d0 02 c0       	mov    eax,ds:0xc002d0a0
c001a918:	85 c0                	test   eax,eax
c001a91a:	74 02                	je     c001a91e <sysShutdown(regs*)+0x56>
c001a91c:	ff d0                	call   eax
c001a91e:	31 c0                	xor    eax,eax
c001a920:	31 d2                	xor    edx,edx
c001a922:	83 c4 0c             	add    esp,0xc
c001a925:	c3                   	ret    

c001a926 <sysCallRealpath(regs*)>:
c001a926:	83 ec 0c             	sub    esp,0xc
c001a929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a930:	85 d2                	test   edx,edx
c001a932:	74 07                	je     c001a93b <sysCallRealpath(regs*)+0x15>
c001a934:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a937:	85 c0                	test   eax,eax
c001a939:	75 0b                	jne    c001a946 <sysCallRealpath(regs*)+0x20>
c001a93b:	b8 01 00 00 00       	mov    eax,0x1
c001a940:	31 d2                	xor    edx,edx
c001a942:	83 c4 0c             	add    esp,0xc
c001a945:	c3                   	ret    
c001a946:	51                   	push   ecx
c001a947:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a94d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a950:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a956:	51                   	push   ecx
c001a957:	52                   	push   edx
c001a958:	50                   	push   eax
c001a959:	e8 54 82 ff ff       	call   c0012bb2 <standardiseFiles(char*, char const*, char const*)>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	31 c0                	xor    eax,eax
c001a963:	31 d2                	xor    edx,edx
c001a965:	83 c4 0c             	add    esp,0xc
c001a968:	c3                   	ret    

c001a969 <sysCallReadDir(regs*)>:
c001a969:	53                   	push   ebx
c001a96a:	83 ec 18             	sub    esp,0x18
c001a96d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a971:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a974:	83 f8 02             	cmp    eax,0x2
c001a977:	76 53                	jbe    c001a9cc <sysCallReadDir(regs*)+0x63>
c001a979:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a97c:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a982:	77 4f                	ja     c001a9d3 <sysCallReadDir(regs*)+0x6a>
c001a984:	83 ec 0c             	sub    esp,0xc
c001a987:	50                   	push   eax
c001a988:	e8 5a 6d ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	85 c0                	test   eax,eax
c001a992:	74 50                	je     c001a9e4 <sysCallReadDir(regs*)+0x7b>
c001a994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a99c:	83 ec 0c             	sub    esp,0xc
c001a99f:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9a1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a9a5:	51                   	push   ecx
c001a9a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a9a9:	6a 00                	push   0x0
c001a9ab:	68 10 01 00 00       	push   0x110
c001a9b0:	50                   	push   eax
c001a9b1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a9b4:	83 c4 20             	add    esp,0x20
c001a9b7:	85 c0                	test   eax,eax
c001a9b9:	74 38                	je     c001a9f3 <sysCallReadDir(regs*)+0x8a>
c001a9bb:	83 f8 07             	cmp    eax,0x7
c001a9be:	74 0c                	je     c001a9cc <sysCallReadDir(regs*)+0x63>
c001a9c0:	b8 02 00 00 00       	mov    eax,0x2
c001a9c5:	31 d2                	xor    edx,edx
c001a9c7:	83 c4 18             	add    esp,0x18
c001a9ca:	5b                   	pop    ebx
c001a9cb:	c3                   	ret    
c001a9cc:	b8 01 00 00 00       	mov    eax,0x1
c001a9d1:	eb f2                	jmp    c001a9c5 <sysCallReadDir(regs*)+0x5c>
c001a9d3:	83 ec 08             	sub    esp,0x8
c001a9d6:	52                   	push   edx
c001a9d7:	68 2c a5 02 c0       	push   0xc002a52c
c001a9dc:	e8 4c 7e ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9ee:	83 c4 18             	add    esp,0x18
c001a9f1:	5b                   	pop    ebx
c001a9f2:	c3                   	ret    
c001a9f3:	31 c0                	xor    eax,eax
c001a9f5:	eb ce                	jmp    c001a9c5 <sysCallReadDir(regs*)+0x5c>

c001a9f7 <sysCallIsATTY(regs*)>:
c001a9f7:	83 ec 0c             	sub    esp,0xc
c001a9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aa01:	83 f8 02             	cmp    eax,0x2
c001aa04:	76 07                	jbe    c001aa0d <sysCallIsATTY(regs*)+0x16>
c001aa06:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aa0b:	75 26                	jne    c001aa33 <sysCallIsATTY(regs*)+0x3c>
c001aa0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa15:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aa1b:	85 c0                	test   eax,eax
c001aa1d:	74 24                	je     c001aa43 <sysCallIsATTY(regs*)+0x4c>
c001aa1f:	83 ec 0c             	sub    esp,0xc
c001aa22:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa24:	50                   	push   eax
c001aa25:	ff 12                	call   DWORD PTR [edx]
c001aa27:	31 d2                	xor    edx,edx
c001aa29:	0f b6 c0             	movzx  eax,al
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	83 c4 0c             	add    esp,0xc
c001aa32:	c3                   	ret    
c001aa33:	83 ec 0c             	sub    esp,0xc
c001aa36:	50                   	push   eax
c001aa37:	e8 ab 6c ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	85 c0                	test   eax,eax
c001aa41:	75 dc                	jne    c001aa1f <sysCallIsATTY(regs*)+0x28>
c001aa43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa4d:	83 c4 0c             	add    esp,0xc
c001aa50:	c3                   	ret    

c001aa51 <sysCallSeek(regs*)>:
c001aa51:	53                   	push   ebx
c001aa52:	83 ec 08             	sub    esp,0x8
c001aa55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa5c:	83 f8 02             	cmp    eax,0x2
c001aa5f:	76 4a                	jbe    c001aaab <sysCallSeek(regs*)+0x5a>
c001aa61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa66:	77 32                	ja     c001aa9a <sysCallSeek(regs*)+0x49>
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	50                   	push   eax
c001aa6c:	e8 76 6c ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001aa71:	83 c4 0c             	add    esp,0xc
c001aa74:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001aa77:	31 db                	xor    ebx,ebx
c001aa79:	53                   	push   ebx
c001aa7a:	51                   	push   ecx
c001aa7b:	50                   	push   eax
c001aa7c:	e8 fd 83 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001aa81:	83 c4 10             	add    esp,0x10
c001aa84:	85 c0                	test   eax,eax
c001aa86:	0f 95 c0             	setne  al
c001aa89:	31 d2                	xor    edx,edx
c001aa8b:	0f b6 c0             	movzx  eax,al
c001aa8e:	f7 d8                	neg    eax
c001aa90:	83 d2 00             	adc    edx,0x0
c001aa93:	83 c4 08             	add    esp,0x8
c001aa96:	f7 da                	neg    edx
c001aa98:	5b                   	pop    ebx
c001aa99:	c3                   	ret    
c001aa9a:	83 ec 08             	sub    esp,0x8
c001aa9d:	50                   	push   eax
c001aa9e:	68 9b a5 02 c0       	push   0xc002a59b
c001aaa3:	e8 85 7d ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aab0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aab5:	83 c4 08             	add    esp,0x8
c001aab8:	5b                   	pop    ebx
c001aab9:	c3                   	ret    

c001aaba <sysCallTell(regs*)>:
c001aaba:	53                   	push   ebx
c001aabb:	83 ec 08             	sub    esp,0x8
c001aabe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aac2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aac5:	83 f8 02             	cmp    eax,0x2
c001aac8:	76 5e                	jbe    c001ab28 <sysCallTell(regs*)+0x6e>
c001aaca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aacf:	77 2d                	ja     c001aafe <sysCallTell(regs*)+0x44>
c001aad1:	83 ec 0c             	sub    esp,0xc
c001aad4:	50                   	push   eax
c001aad5:	e8 0d 6c ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001aada:	5a                   	pop    edx
c001aadb:	59                   	pop    ecx
c001aadc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aadf:	50                   	push   eax
c001aae0:	e8 ef 83 ff ff       	call   c0012ed4 <File::tell(unsigned long long*)>
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	85 c0                	test   eax,eax
c001aaea:	0f 95 c0             	setne  al
c001aaed:	31 d2                	xor    edx,edx
c001aaef:	0f b6 c0             	movzx  eax,al
c001aaf2:	f7 d8                	neg    eax
c001aaf4:	83 d2 00             	adc    edx,0x0
c001aaf7:	83 c4 08             	add    esp,0x8
c001aafa:	f7 da                	neg    edx
c001aafc:	5b                   	pop    ebx
c001aafd:	c3                   	ret    
c001aafe:	83 ec 08             	sub    esp,0x8
c001ab01:	50                   	push   eax
c001ab02:	68 b5 a5 02 c0       	push   0xc002a5b5
c001ab07:	e8 21 7d ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001ab0c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab1f:	31 d2                	xor    edx,edx
c001ab21:	31 c0                	xor    eax,eax
c001ab23:	83 c4 08             	add    esp,0x8
c001ab26:	5b                   	pop    ebx
c001ab27:	c3                   	ret    
c001ab28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab32:	83 c4 08             	add    esp,0x8
c001ab35:	5b                   	pop    ebx
c001ab36:	c3                   	ret    

c001ab37 <sysCallSize(regs*)>:
c001ab37:	53                   	push   ebx
c001ab38:	83 ec 18             	sub    esp,0x18
c001ab3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab42:	83 f8 02             	cmp    eax,0x2
c001ab45:	76 64                	jbe    c001abab <sysCallSize(regs*)+0x74>
c001ab47:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ab4c:	77 33                	ja     c001ab81 <sysCallSize(regs*)+0x4a>
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	50                   	push   eax
c001ab52:	e8 90 6b ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001ab57:	83 c4 0c             	add    esp,0xc
c001ab5a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ab5e:	52                   	push   edx
c001ab5f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ab62:	50                   	push   eax
c001ab63:	e8 04 85 ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	85 c0                	test   eax,eax
c001ab6d:	0f 95 c0             	setne  al
c001ab70:	31 d2                	xor    edx,edx
c001ab72:	0f b6 c0             	movzx  eax,al
c001ab75:	f7 d8                	neg    eax
c001ab77:	83 d2 00             	adc    edx,0x0
c001ab7a:	83 c4 18             	add    esp,0x18
c001ab7d:	f7 da                	neg    edx
c001ab7f:	5b                   	pop    ebx
c001ab80:	c3                   	ret    
c001ab81:	83 ec 08             	sub    esp,0x8
c001ab84:	50                   	push   eax
c001ab85:	68 cf a5 02 c0       	push   0xc002a5cf
c001ab8a:	e8 9e 7c ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001ab8f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aba2:	31 d2                	xor    edx,edx
c001aba4:	31 c0                	xor    eax,eax
c001aba6:	83 c4 18             	add    esp,0x18
c001aba9:	5b                   	pop    ebx
c001abaa:	c3                   	ret    
c001abab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abb0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abb5:	83 c4 18             	add    esp,0x18
c001abb8:	5b                   	pop    ebx
c001abb9:	c3                   	ret    

c001abba <sysCallSizeFromFilename(regs*)>:
c001abba:	57                   	push   edi
c001abbb:	56                   	push   esi
c001abbc:	53                   	push   ebx
c001abbd:	83 ec 20             	sub    esp,0x20
c001abc0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001abc4:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001abc7:	83 fb 02             	cmp    ebx,0x2
c001abca:	0f 86 99 00 00 00    	jbe    c001ac69 <sysCallSizeFromFilename(regs*)+0xaf>
c001abd0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001abd6:	77 65                	ja     c001ac3d <sysCallSizeFromFilename(regs*)+0x83>
c001abd8:	83 ec 0c             	sub    esp,0xc
c001abdb:	68 14 01 00 00       	push   0x114
c001abe0:	e8 ef 48 ff ff       	call   c000f4d4 <malloc>
c001abe5:	83 c4 0c             	add    esp,0xc
c001abe8:	89 c6                	mov    esi,eax
c001abea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abef:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abf2:	53                   	push   ebx
c001abf3:	56                   	push   esi
c001abf4:	e8 63 81 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001abf9:	83 c4 0c             	add    esp,0xc
c001abfc:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ac00:	50                   	push   eax
c001ac01:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ac04:	56                   	push   esi
c001ac05:	e8 62 84 ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c001ac0a:	83 c4 10             	add    esp,0x10
c001ac0d:	85 f6                	test   esi,esi
c001ac0f:	74 14                	je     c001ac25 <sysCallSizeFromFilename(regs*)+0x6b>
c001ac11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac15:	8b 16                	mov    edx,DWORD PTR [esi]
c001ac17:	83 ec 0c             	sub    esp,0xc
c001ac1a:	56                   	push   esi
c001ac1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac25:	85 c0                	test   eax,eax
c001ac27:	0f 95 c0             	setne  al
c001ac2a:	31 d2                	xor    edx,edx
c001ac2c:	0f b6 c0             	movzx  eax,al
c001ac2f:	f7 d8                	neg    eax
c001ac31:	83 d2 00             	adc    edx,0x0
c001ac34:	83 c4 20             	add    esp,0x20
c001ac37:	f7 da                	neg    edx
c001ac39:	5b                   	pop    ebx
c001ac3a:	5e                   	pop    esi
c001ac3b:	5f                   	pop    edi
c001ac3c:	c3                   	ret    
c001ac3d:	83 ec 08             	sub    esp,0x8
c001ac40:	53                   	push   ebx
c001ac41:	68 cf a5 02 c0       	push   0xc002a5cf
c001ac46:	e8 e2 7b ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001ac4b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ac4e:	83 c4 10             	add    esp,0x10
c001ac51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ac57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ac5e:	31 d2                	xor    edx,edx
c001ac60:	83 c4 20             	add    esp,0x20
c001ac63:	31 c0                	xor    eax,eax
c001ac65:	5b                   	pop    ebx
c001ac66:	5e                   	pop    esi
c001ac67:	5f                   	pop    edi
c001ac68:	c3                   	ret    
c001ac69:	83 c4 20             	add    esp,0x20
c001ac6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac71:	5b                   	pop    ebx
c001ac72:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac77:	5e                   	pop    esi
c001ac78:	5f                   	pop    edi
c001ac79:	c3                   	ret    

c001ac7a <sysCallClose(regs*)>:
c001ac7a:	53                   	push   ebx
c001ac7b:	83 ec 08             	sub    esp,0x8
c001ac7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac85:	83 f8 02             	cmp    eax,0x2
c001ac88:	76 50                	jbe    c001acda <sysCallClose(regs*)+0x60>
c001ac8a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ac8f:	74 58                	je     c001ace9 <sysCallClose(regs*)+0x6f>
c001ac91:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac96:	74 60                	je     c001acf8 <sysCallClose(regs*)+0x7e>
c001ac98:	77 2f                	ja     c001acc9 <sysCallClose(regs*)+0x4f>
c001ac9a:	83 ec 0c             	sub    esp,0xc
c001ac9d:	50                   	push   eax
c001ac9e:	e8 44 6a ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001aca3:	89 c3                	mov    ebx,eax
c001aca5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aca8:	e8 71 81 ff ff       	call   c0012e1e <File::close()>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	85 db                	test   ebx,ebx
c001acb2:	74 0c                	je     c001acc0 <sysCallClose(regs*)+0x46>
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acb9:	53                   	push   ebx
c001acba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	31 c0                	xor    eax,eax
c001acc2:	31 d2                	xor    edx,edx
c001acc4:	83 c4 08             	add    esp,0x8
c001acc7:	5b                   	pop    ebx
c001acc8:	c3                   	ret    
c001acc9:	83 ec 08             	sub    esp,0x8
c001accc:	50                   	push   eax
c001accd:	68 50 a5 02 c0       	push   0xc002a550
c001acd2:	e8 56 7b ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ace4:	83 c4 08             	add    esp,0x8
c001ace7:	5b                   	pop    ebx
c001ace8:	c3                   	ret    
c001ace9:	83 ec 0c             	sub    esp,0xc
c001acec:	68 ea a5 02 c0       	push   0xc002a5ea
c001acf1:	e8 37 7b ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001acf6:	eb c5                	jmp    c001acbd <sysCallClose(regs*)+0x43>
c001acf8:	83 ec 0c             	sub    esp,0xc
c001acfb:	68 f8 a5 02 c0       	push   0xc002a5f8
c001ad00:	eb ef                	jmp    c001acf1 <sysCallClose(regs*)+0x77>

c001ad02 <sysCallOpenDir(regs*)>:
c001ad02:	56                   	push   esi
c001ad03:	53                   	push   ebx
c001ad04:	53                   	push   ebx
c001ad05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad09:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ad0c:	85 f6                	test   esi,esi
c001ad0e:	74 59                	je     c001ad69 <sysCallOpenDir(regs*)+0x67>
c001ad10:	83 ec 0c             	sub    esp,0xc
c001ad13:	68 14 01 00 00       	push   0x114
c001ad18:	e8 b7 47 ff ff       	call   c000f4d4 <malloc>
c001ad1d:	83 c4 0c             	add    esp,0xc
c001ad20:	89 c6                	mov    esi,eax
c001ad22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad27:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad2d:	56                   	push   esi
c001ad2e:	e8 ff 84 ff ff       	call   c0013232 <Directory::Directory(char const*, Process*)>
c001ad33:	83 c4 10             	add    esp,0x10
c001ad36:	85 f6                	test   esi,esi
c001ad38:	74 2f                	je     c001ad69 <sysCallOpenDir(regs*)+0x67>
c001ad3a:	83 ec 0c             	sub    esp,0xc
c001ad3d:	56                   	push   esi
c001ad3e:	e8 53 85 ff ff       	call   c0013296 <Directory::open()>
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	85 c0                	test   eax,eax
c001ad48:	75 1f                	jne    c001ad69 <sysCallOpenDir(regs*)+0x67>
c001ad4a:	83 ec 0c             	sub    esp,0xc
c001ad4d:	56                   	push   esi
c001ad4e:	e8 9f 66 ff ff       	call   c00113f2 <UnixFile::getFileDescriptor()>
c001ad53:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	89 02                	mov    DWORD PTR [edx],eax
c001ad5b:	c1 f8 1f             	sar    eax,0x1f
c001ad5e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ad61:	31 c0                	xor    eax,eax
c001ad63:	59                   	pop    ecx
c001ad64:	31 d2                	xor    edx,edx
c001ad66:	5b                   	pop    ebx
c001ad67:	5e                   	pop    esi
c001ad68:	c3                   	ret    
c001ad69:	59                   	pop    ecx
c001ad6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad74:	5b                   	pop    ebx
c001ad75:	5e                   	pop    esi
c001ad76:	c3                   	ret    

c001ad77 <sysCallCloseDir(regs*)>:
c001ad77:	53                   	push   ebx
c001ad78:	83 ec 08             	sub    esp,0x8
c001ad7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad82:	83 f8 02             	cmp    eax,0x2
c001ad85:	76 47                	jbe    c001adce <sysCallCloseDir(regs*)+0x57>
c001ad87:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad8c:	77 2f                	ja     c001adbd <sysCallCloseDir(regs*)+0x46>
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	50                   	push   eax
c001ad92:	e8 50 69 ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001ad97:	89 c3                	mov    ebx,eax
c001ad99:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad9c:	e8 51 85 ff ff       	call   c00132f2 <Directory::close()>
c001ada1:	83 c4 10             	add    esp,0x10
c001ada4:	85 db                	test   ebx,ebx
c001ada6:	74 0c                	je     c001adb4 <sysCallCloseDir(regs*)+0x3d>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adad:	53                   	push   ebx
c001adae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adb1:	83 c4 10             	add    esp,0x10
c001adb4:	31 c0                	xor    eax,eax
c001adb6:	31 d2                	xor    edx,edx
c001adb8:	83 c4 08             	add    esp,0x8
c001adbb:	5b                   	pop    ebx
c001adbc:	c3                   	ret    
c001adbd:	83 ec 08             	sub    esp,0x8
c001adc0:	50                   	push   eax
c001adc1:	68 78 a5 02 c0       	push   0xc002a578
c001adc6:	e8 62 7a ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001adcb:	83 c4 10             	add    esp,0x10
c001adce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001add3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001add8:	83 c4 08             	add    esp,0x8
c001addb:	5b                   	pop    ebx
c001addc:	c3                   	ret    

c001addd <sysCallMakeDir(regs*)>:
c001addd:	56                   	push   esi
c001adde:	53                   	push   ebx
c001addf:	83 ec 10             	sub    esp,0x10
c001ade2:	68 14 01 00 00       	push   0x114
c001ade7:	e8 e8 46 ff ff       	call   c000f4d4 <malloc>
c001adec:	83 c4 0c             	add    esp,0xc
c001adef:	89 c3                	mov    ebx,eax
c001adf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adf6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adfd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae00:	53                   	push   ebx
c001ae01:	e8 2c 84 ff ff       	call   c0013232 <Directory::Directory(char const*, Process*)>
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	85 db                	test   ebx,ebx
c001ae0b:	74 32                	je     c001ae3f <sysCallMakeDir(regs*)+0x62>
c001ae0d:	83 ec 0c             	sub    esp,0xc
c001ae10:	53                   	push   ebx
c001ae11:	e8 60 86 ff ff       	call   c0013476 <Directory::create()>
c001ae16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae19:	89 c6                	mov    esi,eax
c001ae1b:	e8 d2 84 ff ff       	call   c00132f2 <Directory::close()>
c001ae20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	31 c0                	xor    eax,eax
c001ae2d:	59                   	pop    ecx
c001ae2e:	85 f6                	test   esi,esi
c001ae30:	5b                   	pop    ebx
c001ae31:	0f 95 c0             	setne  al
c001ae34:	5e                   	pop    esi
c001ae35:	31 d2                	xor    edx,edx
c001ae37:	f7 d8                	neg    eax
c001ae39:	83 d2 00             	adc    edx,0x0
c001ae3c:	f7 da                	neg    edx
c001ae3e:	c3                   	ret    
c001ae3f:	59                   	pop    ecx
c001ae40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae4a:	5b                   	pop    ebx
c001ae4b:	5e                   	pop    esi
c001ae4c:	c3                   	ret    

c001ae4d <sysCallWait(regs*)>:
c001ae4d:	83 ec 10             	sub    esp,0x10
c001ae50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae54:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae57:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae5d:	e8 2b 24 00 00       	call   c001d28d <waitTask(int, int*, int)>
c001ae62:	83 c4 1c             	add    esp,0x1c
c001ae65:	99                   	cdq    
c001ae66:	c3                   	ret    

c001ae67 <sysCallNotImpl(regs*)>:
c001ae67:	83 ec 18             	sub    esp,0x18
c001ae6a:	68 06 a6 02 c0       	push   0xc002a606
c001ae6f:	e8 d3 ea ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001ae74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae79:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae7e:	83 c4 1c             	add    esp,0x1c
c001ae81:	c3                   	ret    

c001ae82 <sysPanic(regs*)>:
c001ae82:	83 ec 18             	sub    esp,0x18
c001ae85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae89:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae8c:	e8 b6 ea ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001ae91:	c7 04 24 20 a6 02 c0 	mov    DWORD PTR [esp],0xc002a620
c001ae98:	e8 aa ea ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001ae9d:	b8 01 00 00 00       	mov    eax,0x1
c001aea2:	31 d2                	xor    edx,edx
c001aea4:	83 c4 1c             	add    esp,0x1c
c001aea7:	c3                   	ret    

c001aea8 <sysCallRmdir(regs*)>:
c001aea8:	56                   	push   esi
c001aea9:	53                   	push   ebx
c001aeaa:	83 ec 20             	sub    esp,0x20
c001aead:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aeb1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001aeb4:	68 14 01 00 00       	push   0x114
c001aeb9:	e8 16 46 ff ff       	call   c000f4d4 <malloc>
c001aebe:	83 c4 0c             	add    esp,0xc
c001aec1:	89 c3                	mov    ebx,eax
c001aec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aec8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aecb:	56                   	push   esi
c001aecc:	53                   	push   ebx
c001aecd:	e8 8a 7e ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001aed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aed5:	e8 5e 80 ff ff       	call   c0012f38 <File::unlink()>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	85 db                	test   ebx,ebx
c001aedf:	74 14                	je     c001aef5 <sysCallRmdir(regs*)+0x4d>
c001aee1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aee5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aee7:	83 ec 0c             	sub    esp,0xc
c001aeea:	53                   	push   ebx
c001aeeb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aef5:	85 c0                	test   eax,eax
c001aef7:	0f 95 c0             	setne  al
c001aefa:	31 d2                	xor    edx,edx
c001aefc:	0f b6 c0             	movzx  eax,al
c001aeff:	f7 d8                	neg    eax
c001af01:	83 d2 00             	adc    edx,0x0
c001af04:	83 c4 14             	add    esp,0x14
c001af07:	f7 da                	neg    edx
c001af09:	5b                   	pop    ebx
c001af0a:	5e                   	pop    esi
c001af0b:	c3                   	ret    

c001af0c <sysCallUnlink(regs*)>:
c001af0c:	56                   	push   esi
c001af0d:	53                   	push   ebx
c001af0e:	83 ec 20             	sub    esp,0x20
c001af11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af15:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001af18:	68 14 01 00 00       	push   0x114
c001af1d:	e8 b2 45 ff ff       	call   c000f4d4 <malloc>
c001af22:	83 c4 0c             	add    esp,0xc
c001af25:	89 c3                	mov    ebx,eax
c001af27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af2c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af2f:	56                   	push   esi
c001af30:	53                   	push   ebx
c001af31:	e8 26 7e ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001af36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af39:	e8 fa 7f ff ff       	call   c0012f38 <File::unlink()>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	85 db                	test   ebx,ebx
c001af43:	74 14                	je     c001af59 <sysCallUnlink(regs*)+0x4d>
c001af45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af49:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af4b:	83 ec 0c             	sub    esp,0xc
c001af4e:	53                   	push   ebx
c001af4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af59:	85 c0                	test   eax,eax
c001af5b:	0f 95 c0             	setne  al
c001af5e:	31 d2                	xor    edx,edx
c001af60:	0f b6 c0             	movzx  eax,al
c001af63:	f7 d8                	neg    eax
c001af65:	83 d2 00             	adc    edx,0x0
c001af68:	83 c4 14             	add    esp,0x14
c001af6b:	f7 da                	neg    edx
c001af6d:	5b                   	pop    ebx
c001af6e:	5e                   	pop    esi
c001af6f:	c3                   	ret    

c001af70 <sysCallGetArgv(regs*)>:
c001af70:	83 ec 0c             	sub    esp,0xc
c001af73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af77:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af7a:	85 c0                	test   eax,eax
c001af7c:	78 2b                	js     c001afa9 <sysCallGetArgv(regs*)+0x39>
c001af7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001af84:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001af87:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001af8d:	7d 1a                	jge    c001afa9 <sysCallGetArgv(regs*)+0x39>
c001af8f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001af96:	85 c0                	test   eax,eax
c001af98:	74 17                	je     c001afb1 <sysCallGetArgv(regs*)+0x41>
c001af9a:	83 ec 08             	sub    esp,0x8
c001af9d:	50                   	push   eax
c001af9e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001afa1:	e8 84 57 fe ff       	call   c000072a <strcpy>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	31 c0                	xor    eax,eax
c001afab:	31 d2                	xor    edx,edx
c001afad:	83 c4 0c             	add    esp,0xc
c001afb0:	c3                   	ret    
c001afb1:	b8 01 00 00 00       	mov    eax,0x1
c001afb6:	31 d2                	xor    edx,edx
c001afb8:	83 c4 0c             	add    esp,0xc
c001afbb:	c3                   	ret    

c001afbc <sysCallTTYName(regs*)>:
c001afbc:	56                   	push   esi
c001afbd:	53                   	push   ebx
c001afbe:	53                   	push   ebx
c001afbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afc3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001afc6:	85 c0                	test   eax,eax
c001afc8:	74 5f                	je     c001b029 <sysCallTTYName(regs*)+0x6d>
c001afca:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001afcd:	83 f8 02             	cmp    eax,0x2
c001afd0:	77 3e                	ja     c001b010 <sysCallTTYName(regs*)+0x54>
c001afd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afda:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001afe0:	85 db                	test   ebx,ebx
c001afe2:	74 45                	je     c001b029 <sysCallTTYName(regs*)+0x6d>
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe9:	53                   	push   ebx
c001afea:	ff 10                	call   DWORD PTR [eax]
c001afec:	83 c4 10             	add    esp,0x10
c001afef:	84 c0                	test   al,al
c001aff1:	74 41                	je     c001b034 <sysCallTTYName(regs*)+0x78>
c001aff3:	83 ec 08             	sub    esp,0x8
c001aff6:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001affc:	53                   	push   ebx
c001affd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b000:	e8 25 57 fe ff       	call   c000072a <strcpy>
c001b005:	83 c4 10             	add    esp,0x10
c001b008:	31 c0                	xor    eax,eax
c001b00a:	59                   	pop    ecx
c001b00b:	31 d2                	xor    edx,edx
c001b00d:	5b                   	pop    ebx
c001b00e:	5e                   	pop    esi
c001b00f:	c3                   	ret    
c001b010:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b015:	74 bb                	je     c001afd2 <sysCallTTYName(regs*)+0x16>
c001b017:	83 ec 0c             	sub    esp,0xc
c001b01a:	50                   	push   eax
c001b01b:	e8 c7 66 ff ff       	call   c00116e7 <getFromFileDescriptor(int)>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	89 c3                	mov    ebx,eax
c001b025:	85 db                	test   ebx,ebx
c001b027:	75 bb                	jne    c001afe4 <sysCallTTYName(regs*)+0x28>
c001b029:	59                   	pop    ecx
c001b02a:	b8 01 00 00 00       	mov    eax,0x1
c001b02f:	31 d2                	xor    edx,edx
c001b031:	5b                   	pop    ebx
c001b032:	5e                   	pop    esi
c001b033:	c3                   	ret    
c001b034:	59                   	pop    ecx
c001b035:	b8 02 00 00 00       	mov    eax,0x2
c001b03a:	31 d2                	xor    edx,edx
c001b03c:	5b                   	pop    ebx
c001b03d:	5e                   	pop    esi
c001b03e:	c3                   	ret    

c001b03f <sysCallUSleep(regs*)>:
c001b03f:	83 ec 14             	sub    esp,0x14
c001b042:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b047:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b04b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b052:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b055:	01 ca                	add    edx,ecx
c001b057:	52                   	push   edx
c001b058:	50                   	push   eax
c001b059:	e8 c8 22 00 00       	call   c001d326 <nanoSleep(unsigned long long)>
c001b05e:	31 c0                	xor    eax,eax
c001b060:	31 d2                	xor    edx,edx
c001b062:	83 c4 1c             	add    esp,0x1c
c001b065:	c3                   	ret    

c001b066 <sysCallSpawn(regs*)>:
c001b066:	56                   	push   esi
c001b067:	53                   	push   ebx
c001b068:	53                   	push   ebx
c001b069:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b06d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b070:	85 f6                	test   esi,esi
c001b072:	75 08                	jne    c001b07c <sysCallSpawn(regs*)+0x16>
c001b074:	59                   	pop    ecx
c001b075:	31 c0                	xor    eax,eax
c001b077:	31 d2                	xor    edx,edx
c001b079:	5b                   	pop    ebx
c001b07a:	5e                   	pop    esi
c001b07b:	c3                   	ret    
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	68 3f 07 00 00       	push   0x73f
c001b084:	e8 4b 44 ff ff       	call   c000f4d4 <malloc>
c001b089:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b08c:	89 c6                	mov    esi,eax
c001b08e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b093:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b096:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b099:	56                   	push   esi
c001b09a:	e8 87 19 00 00       	call   c001ca26 <Process::Process(char const*, Process*, char**)>
c001b09f:	83 c4 20             	add    esp,0x20
c001b0a2:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b0a9:	75 c9                	jne    c001b074 <sysCallSpawn(regs*)+0xe>
c001b0ab:	83 ec 0c             	sub    esp,0xc
c001b0ae:	56                   	push   esi
c001b0af:	e8 38 1f 00 00       	call   c001cfec <Process::createUserThread()>
c001b0b4:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	99                   	cdq    
c001b0ba:	59                   	pop    ecx
c001b0bb:	5b                   	pop    ebx
c001b0bc:	5e                   	pop    esi
c001b0bd:	c3                   	ret    

c001b0be <sysCallGetEnv(regs*)>:
c001b0be:	57                   	push   edi
c001b0bf:	56                   	push   esi
c001b0c0:	53                   	push   ebx
c001b0c1:	83 ec 1c             	sub    esp,0x1c
c001b0c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0cd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b0d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b0d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0d6:	e8 88 e7 ff ff       	call   c0019863 <Krnl::getProcessTotalEnvCount(Process*)>
c001b0db:	83 c4 10             	add    esp,0x10
c001b0de:	39 c7                	cmp    edi,eax
c001b0e0:	7c 14                	jl     c001b0f6 <sysCallGetEnv(regs*)+0x38>
c001b0e2:	85 f6                	test   esi,esi
c001b0e4:	75 0b                	jne    c001b0f1 <sysCallGetEnv(regs*)+0x33>
c001b0e6:	83 c4 10             	add    esp,0x10
c001b0e9:	31 c0                	xor    eax,eax
c001b0eb:	5b                   	pop    ebx
c001b0ec:	31 d2                	xor    edx,edx
c001b0ee:	5e                   	pop    esi
c001b0ef:	5f                   	pop    edi
c001b0f0:	c3                   	ret    
c001b0f1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0f4:	eb f0                	jmp    c001b0e6 <sysCallGetEnv(regs*)+0x28>
c001b0f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0fa:	52                   	push   edx
c001b0fb:	57                   	push   edi
c001b0fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b102:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b105:	50                   	push   eax
c001b106:	e8 78 e7 ff ff       	call   c0019883 <Krnl::getProcessEnvPair(Process*, int)>
c001b10b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b112:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b116:	83 c4 0c             	add    esp,0xc
c001b119:	85 c9                	test   ecx,ecx
c001b11b:	75 23                	jne    c001b140 <sysCallGetEnv(regs*)+0x82>
c001b11d:	83 ec 0c             	sub    esp,0xc
c001b120:	50                   	push   eax
c001b121:	e8 82 55 fe ff       	call   c00006a8 <strlen>
c001b126:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b129:	89 c3                	mov    ebx,eax
c001b12b:	e8 78 55 fe ff       	call   c00006a8 <strlen>
c001b130:	83 c4 10             	add    esp,0x10
c001b133:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	31 d2                	xor    edx,edx
c001b13c:	5b                   	pop    ebx
c001b13d:	5e                   	pop    esi
c001b13e:	5f                   	pop    edi
c001b13f:	c3                   	ret    
c001b140:	83 ec 08             	sub    esp,0x8
c001b143:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b146:	50                   	push   eax
c001b147:	56                   	push   esi
c001b148:	e8 dd 55 fe ff       	call   c000072a <strcpy>
c001b14d:	58                   	pop    eax
c001b14e:	5a                   	pop    edx
c001b14f:	68 2f a6 02 c0       	push   0xc002a62f
c001b154:	56                   	push   esi
c001b155:	e8 87 56 fe ff       	call   c00007e1 <strcat>
c001b15a:	59                   	pop    ecx
c001b15b:	5b                   	pop    ebx
c001b15c:	57                   	push   edi
c001b15d:	56                   	push   esi
c001b15e:	e8 7e 56 fe ff       	call   c00007e1 <strcat>
c001b163:	83 c4 10             	add    esp,0x10
c001b166:	e9 7b ff ff ff       	jmp    c001b0e6 <sysCallGetEnv(regs*)+0x28>

c001b16b <sysAppSettings(regs*)>:
c001b16b:	53                   	push   ebx
c001b16c:	83 ec 08             	sub    esp,0x8
c001b16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b173:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b176:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b17c:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b181:	66 3d c0 09          	cmp    ax,0x9c0
c001b185:	75 2f                	jne    c001b1b6 <sysAppSettings(regs*)+0x4b>
c001b187:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b18d:	83 e0 1f             	and    eax,0x1f
c001b190:	3c 01                	cmp    al,0x1
c001b192:	74 2e                	je     c001b1c2 <sysAppSettings(regs*)+0x57>
c001b194:	3c 07                	cmp    al,0x7
c001b196:	0f 84 bd 00 00 00    	je     c001b259 <sysAppSettings(regs*)+0xee>
c001b19c:	84 c0                	test   al,al
c001b19e:	0f 84 dc 00 00 00    	je     c001b280 <sysAppSettings(regs*)+0x115>
c001b1a4:	3c 08                	cmp    al,0x8
c001b1a6:	74 6d                	je     c001b215 <sysAppSettings(regs*)+0xaa>
c001b1a8:	0f b6 c0             	movzx  eax,al
c001b1ab:	83 c4 08             	add    esp,0x8
c001b1ae:	05 e8 03 00 00       	add    eax,0x3e8
c001b1b3:	5b                   	pop    ebx
c001b1b4:	99                   	cdq    
c001b1b5:	c3                   	ret    
c001b1b6:	b8 01 00 00 00       	mov    eax,0x1
c001b1bb:	31 d2                	xor    edx,edx
c001b1bd:	83 c4 08             	add    esp,0x8
c001b1c0:	5b                   	pop    ebx
c001b1c1:	c3                   	ret    
c001b1c2:	51                   	push   ecx
c001b1c3:	68 00 01 00 00       	push   0x100
c001b1c8:	6a 00                	push   0x0
c001b1ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1d2:	83 c0 0c             	add    eax,0xc
c001b1d5:	50                   	push   eax
c001b1d6:	e8 b0 54 fe ff       	call   c000068b <memset>
c001b1db:	83 c4 0c             	add    esp,0xc
c001b1de:	68 ff 00 00 00       	push   0xff
c001b1e3:	53                   	push   ebx
c001b1e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1ec:	83 c0 0c             	add    eax,0xc
c001b1ef:	50                   	push   eax
c001b1f0:	e8 60 54 fe ff       	call   c0000655 <memcpy>
c001b1f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1fa:	5b                   	pop    ebx
c001b1fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1fe:	5a                   	pop    edx
c001b1ff:	8d 50 0c             	lea    edx,[eax+0xc]
c001b202:	52                   	push   edx
c001b203:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b209:	e8 54 56 ff ff       	call   c0010862 <VgaText::setTitle(char*)>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	31 c0                	xor    eax,eax
c001b213:	eb a6                	jmp    c001b1bb <sysAppSettings(regs*)+0x50>
c001b215:	83 ec 08             	sub    esp,0x8
c001b218:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b21e:	83 e0 0f             	and    eax,0xf
c001b221:	50                   	push   eax
c001b222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b22a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b230:	e8 1d 56 ff ff       	call   c0010852 <VgaText::setTitleColour(VgaColour)>
c001b235:	58                   	pop    eax
c001b236:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b23c:	5a                   	pop    edx
c001b23d:	c1 e8 04             	shr    eax,0x4
c001b240:	83 e0 0f             	and    eax,0xf
c001b243:	50                   	push   eax
c001b244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b249:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b24c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b252:	e8 eb 55 ff ff       	call   c0010842 <VgaText::setTitleTextColour(VgaColour)>
c001b257:	eb b5                	jmp    c001b20e <sysAppSettings(regs*)+0xa3>
c001b259:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b25e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b261:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b267:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b26d:	c0 e8 06             	shr    al,0x6
c001b270:	83 e0 01             	and    eax,0x1
c001b273:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b279:	31 c0                	xor    eax,eax
c001b27b:	e9 3b ff ff ff       	jmp    c001b1bb <sysAppSettings(regs*)+0x50>
c001b280:	b8 02 00 00 00       	mov    eax,0x2
c001b285:	e9 31 ff ff ff       	jmp    c001b1bb <sysAppSettings(regs*)+0x50>

c001b28a <sysSetFatAttrib(regs*)>:
c001b28a:	57                   	push   edi
c001b28b:	56                   	push   esi
c001b28c:	53                   	push   ebx
c001b28d:	83 ec 1c             	sub    esp,0x1c
c001b290:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b294:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b297:	68 14 01 00 00       	push   0x114
c001b29c:	e8 33 42 ff ff       	call   c000f4d4 <malloc>
c001b2a1:	83 c4 0c             	add    esp,0xc
c001b2a4:	89 c3                	mov    ebx,eax
c001b2a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2ae:	57                   	push   edi
c001b2af:	53                   	push   ebx
c001b2b0:	e8 a7 7a ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001b2b5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b2b8:	83 c4 0c             	add    esp,0xc
c001b2bb:	0f b6 d4             	movzx  edx,ah
c001b2be:	0f b6 c0             	movzx  eax,al
c001b2c1:	52                   	push   edx
c001b2c2:	50                   	push   eax
c001b2c3:	53                   	push   ebx
c001b2c4:	e8 09 7d ff ff       	call   c0012fd2 <File::chfatattr(unsigned char, unsigned char)>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	85 db                	test   ebx,ebx
c001b2ce:	74 14                	je     c001b2e4 <sysSetFatAttrib(regs*)+0x5a>
c001b2d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	53                   	push   ebx
c001b2da:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2e4:	85 c0                	test   eax,eax
c001b2e6:	0f 95 c0             	setne  al
c001b2e9:	31 d2                	xor    edx,edx
c001b2eb:	0f b6 c0             	movzx  eax,al
c001b2ee:	f7 d8                	neg    eax
c001b2f0:	83 d2 00             	adc    edx,0x0
c001b2f3:	83 c4 10             	add    esp,0x10
c001b2f6:	f7 da                	neg    edx
c001b2f8:	5b                   	pop    ebx
c001b2f9:	5e                   	pop    esi
c001b2fa:	5f                   	pop    edi
c001b2fb:	c3                   	ret    

c001b2fc <sysPipe(regs*)>:
c001b2fc:	57                   	push   edi
c001b2fd:	56                   	push   esi
c001b2fe:	53                   	push   ebx
c001b2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b303:	83 ec 0c             	sub    esp,0xc
c001b306:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b309:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b30c:	6a 20                	push   0x20
c001b30e:	e8 c1 41 ff ff       	call   c000f4d4 <malloc>
c001b313:	89 c3                	mov    ebx,eax
c001b315:	58                   	pop    eax
c001b316:	5a                   	pop    edx
c001b317:	68 00 50 00 00       	push   0x5000
c001b31c:	53                   	push   ebx
c001b31d:	e8 c8 4d ff ff       	call   c00100ea <Pipe::Pipe(int)>
c001b322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b325:	e8 c8 60 ff ff       	call   c00113f2 <UnixFile::getFileDescriptor()>
c001b32a:	89 07                	mov    DWORD PTR [edi],eax
c001b32c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b32f:	e8 be 60 ff ff       	call   c00113f2 <UnixFile::getFileDescriptor()>
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	89 06                	mov    DWORD PTR [esi],eax
c001b339:	31 d2                	xor    edx,edx
c001b33b:	5b                   	pop    ebx
c001b33c:	31 c0                	xor    eax,eax
c001b33e:	5e                   	pop    esi
c001b33f:	5f                   	pop    edi
c001b340:	c3                   	ret    

c001b341 <sysGetUnixTime(regs*)>:
c001b341:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001b346:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b34c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b350:	e9 e3 83 ff ff       	jmp    c0013738 <Clock::timeInSecondsLocal()>

c001b355 <string_ends_with(char const*, char const*)>:
c001b355:	57                   	push   edi
c001b356:	56                   	push   esi
c001b357:	53                   	push   ebx
c001b358:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b35c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b360:	83 ec 0c             	sub    esp,0xc
c001b363:	53                   	push   ebx
c001b364:	e8 3f 53 fe ff       	call   c00006a8 <strlen>
c001b369:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b36c:	89 c6                	mov    esi,eax
c001b36e:	e8 35 53 fe ff       	call   c00006a8 <strlen>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	39 c6                	cmp    esi,eax
c001b378:	7d 06                	jge    c001b380 <string_ends_with(char const*, char const*)+0x2b>
c001b37a:	5b                   	pop    ebx
c001b37b:	31 c0                	xor    eax,eax
c001b37d:	5e                   	pop    esi
c001b37e:	5f                   	pop    edi
c001b37f:	c3                   	ret    
c001b380:	83 ec 08             	sub    esp,0x8
c001b383:	29 c6                	sub    esi,eax
c001b385:	57                   	push   edi
c001b386:	01 f3                	add    ebx,esi
c001b388:	53                   	push   ebx
c001b389:	e8 ed 53 fe ff       	call   c000077b <strcmp>
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	85 c0                	test   eax,eax
c001b393:	5b                   	pop    ebx
c001b394:	0f 94 c0             	sete   al
c001b397:	5e                   	pop    esi
c001b398:	0f b6 c0             	movzx  eax,al
c001b39b:	5f                   	pop    edi
c001b39c:	c3                   	ret    

c001b39d <sysCallOpen(regs*)>:
c001b39d:	56                   	push   esi
c001b39e:	53                   	push   ebx
c001b39f:	81 ec 04 01 00 00    	sub    esp,0x104
c001b3a5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b3ac:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b3af:	85 c9                	test   ecx,ecx
c001b3b1:	0f 84 b3 00 00 00    	je     c001b46a <sysCallOpen(regs*)+0xcd>
c001b3b7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b3ba:	85 c0                	test   eax,eax
c001b3bc:	0f 84 a8 00 00 00    	je     c001b46a <sysCallOpen(regs*)+0xcd>
c001b3c2:	52                   	push   edx
c001b3c3:	68 31 a6 02 c0       	push   0xc002a631
c001b3c8:	50                   	push   eax
c001b3c9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b3cd:	56                   	push   esi
c001b3ce:	e8 df 77 ff ff       	call   c0012bb2 <standardiseFiles(char*, char const*, char const*)>
c001b3d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001b3d6:	e8 cd 52 fe ff       	call   c00006a8 <strlen>
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	48                   	dec    eax
c001b3df:	74 1d                	je     c001b3fe <sysCallOpen(regs*)+0x61>
c001b3e1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b3e4:	eb 0f                	jmp    c001b3f5 <sysCallOpen(regs*)+0x58>
c001b3e6:	80 fa 3a             	cmp    dl,0x3a
c001b3e9:	74 0f                	je     c001b3fa <sysCallOpen(regs*)+0x5d>
c001b3eb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b3ef:	48                   	dec    eax
c001b3f0:	74 0c                	je     c001b3fe <sysCallOpen(regs*)+0x61>
c001b3f2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b3f5:	80 fa 2e             	cmp    dl,0x2e
c001b3f8:	75 ec                	jne    c001b3e6 <sysCallOpen(regs*)+0x49>
c001b3fa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b3fe:	83 ec 08             	sub    esp,0x8
c001b401:	68 35 a6 02 c0       	push   0xc002a635
c001b406:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b409:	e8 47 ff ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b40e:	83 c4 10             	add    esp,0x10
c001b411:	85 c0                	test   eax,eax
c001b413:	75 17                	jne    c001b42c <sysCallOpen(regs*)+0x8f>
c001b415:	83 ec 08             	sub    esp,0x8
c001b418:	68 56 a6 02 c0       	push   0xc002a656
c001b41d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b420:	e8 30 ff ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b425:	83 c4 10             	add    esp,0x10
c001b428:	85 c0                	test   eax,eax
c001b42a:	74 51                	je     c001b47d <sysCallOpen(regs*)+0xe0>
c001b42c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b42f:	83 ec 08             	sub    esp,0x8
c001b432:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b438:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b43f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b442:	ff 30                	push   DWORD PTR [eax]
c001b444:	68 3a a6 02 c0       	push   0xc002a63a
c001b449:	e8 df 73 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001b44e:	c7 04 24 49 a6 02 c0 	mov    DWORD PTR [esp],0xc002a649
c001b455:	e8 d3 73 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001b45a:	83 c4 10             	add    esp,0x10
c001b45d:	81 c4 04 01 00 00    	add    esp,0x104
c001b463:	31 c0                	xor    eax,eax
c001b465:	31 d2                	xor    edx,edx
c001b467:	5b                   	pop    ebx
c001b468:	5e                   	pop    esi
c001b469:	c3                   	ret    
c001b46a:	81 c4 04 01 00 00    	add    esp,0x104
c001b470:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b475:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b47a:	5b                   	pop    ebx
c001b47b:	5e                   	pop    esi
c001b47c:	c3                   	ret    
c001b47d:	83 ec 08             	sub    esp,0x8
c001b480:	68 36 a6 02 c0       	push   0xc002a636
c001b485:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b488:	e8 ee 52 fe ff       	call   c000077b <strcmp>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	85 c0                	test   eax,eax
c001b492:	74 98                	je     c001b42c <sysCallOpen(regs*)+0x8f>
c001b494:	83 ec 08             	sub    esp,0x8
c001b497:	68 35 a6 02 c0       	push   0xc002a635
c001b49c:	56                   	push   esi
c001b49d:	e8 b3 fe ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	85 c0                	test   eax,eax
c001b4a7:	75 83                	jne    c001b42c <sysCallOpen(regs*)+0x8f>
c001b4a9:	83 ec 08             	sub    esp,0x8
c001b4ac:	68 5b a6 02 c0       	push   0xc002a65b
c001b4b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4b4:	e8 9c fe ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b4b9:	83 c4 10             	add    esp,0x10
c001b4bc:	85 c0                	test   eax,eax
c001b4be:	0f 85 d9 00 00 00    	jne    c001b59d <sysCallOpen(regs*)+0x200>
c001b4c4:	83 ec 08             	sub    esp,0x8
c001b4c7:	68 60 a6 02 c0       	push   0xc002a660
c001b4cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4cf:	e8 81 fe ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	85 c0                	test   eax,eax
c001b4d9:	0f 85 be 00 00 00    	jne    c001b59d <sysCallOpen(regs*)+0x200>
c001b4df:	83 ec 08             	sub    esp,0x8
c001b4e2:	68 5c a6 02 c0       	push   0xc002a65c
c001b4e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4ea:	e8 8c 52 fe ff       	call   c000077b <strcmp>
c001b4ef:	83 c4 10             	add    esp,0x10
c001b4f2:	85 c0                	test   eax,eax
c001b4f4:	0f 84 a3 00 00 00    	je     c001b59d <sysCallOpen(regs*)+0x200>
c001b4fa:	83 ec 08             	sub    esp,0x8
c001b4fd:	68 5b a6 02 c0       	push   0xc002a65b
c001b502:	56                   	push   esi
c001b503:	e8 4d fe ff ff       	call   c001b355 <string_ends_with(char const*, char const*)>
c001b508:	83 c4 10             	add    esp,0x10
c001b50b:	85 c0                	test   eax,eax
c001b50d:	0f 85 8a 00 00 00    	jne    c001b59d <sysCallOpen(regs*)+0x200>
c001b513:	83 ec 0c             	sub    esp,0xc
c001b516:	68 14 01 00 00       	push   0x114
c001b51b:	e8 b4 3f ff ff       	call   c000f4d4 <malloc>
c001b520:	83 c4 0c             	add    esp,0xc
c001b523:	89 c6                	mov    esi,eax
c001b525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b52a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b52d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b530:	56                   	push   esi
c001b531:	e8 26 78 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	85 f6                	test   esi,esi
c001b53b:	0f 84 29 ff ff ff    	je     c001b46a <sysCallOpen(regs*)+0xcd>
c001b541:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b544:	0f b6 c2             	movzx  eax,dl
c001b547:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b54a:	89 d0                	mov    eax,edx
c001b54c:	83 e0 01             	and    eax,0x1
c001b54f:	f6 c2 02             	test   dl,0x2
c001b552:	74 03                	je     c001b557 <sysCallOpen(regs*)+0x1ba>
c001b554:	83 c8 02             	or     eax,0x2
c001b557:	f6 c2 04             	test   dl,0x4
c001b55a:	74 03                	je     c001b55f <sysCallOpen(regs*)+0x1c2>
c001b55c:	83 c8 04             	or     eax,0x4
c001b55f:	f6 c2 08             	test   dl,0x8
c001b562:	74 03                	je     c001b567 <sysCallOpen(regs*)+0x1ca>
c001b564:	83 c8 0a             	or     eax,0xa
c001b567:	83 e2 10             	and    edx,0x10
c001b56a:	74 03                	je     c001b56f <sysCallOpen(regs*)+0x1d2>
c001b56c:	83 c8 12             	or     eax,0x12
c001b56f:	83 ec 08             	sub    esp,0x8
c001b572:	50                   	push   eax
c001b573:	56                   	push   esi
c001b574:	e8 47 78 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	85 c0                	test   eax,eax
c001b57e:	0f 85 e6 fe ff ff    	jne    c001b46a <sysCallOpen(regs*)+0xcd>
c001b584:	83 ec 0c             	sub    esp,0xc
c001b587:	56                   	push   esi
c001b588:	e8 65 5e ff ff       	call   c00113f2 <UnixFile::getFileDescriptor()>
c001b58d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b590:	89 02                	mov    DWORD PTR [edx],eax
c001b592:	c1 f8 1f             	sar    eax,0x1f
c001b595:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b598:	e9 bd fe ff ff       	jmp    c001b45a <sysCallOpen(regs*)+0xbd>
c001b59d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5a0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b5a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5ad:	e9 ab fe ff ff       	jmp    c001b45d <sysCallOpen(regs*)+0xc0>

c001b5b2 <setupSystemCalls()>:
c001b5b2:	c7 05 60 d5 02 c0 68 a7 01 c0 	mov    DWORD PTR ds:0xc002d560,0xc001a768
c001b5bc:	c7 05 64 d5 02 c0 3c a5 01 c0 	mov    DWORD PTR ds:0xc002d564,0xc001a53c
c001b5c6:	c7 05 68 d5 02 c0 8f a6 01 c0 	mov    DWORD PTR ds:0xc002d568,0xc001a68f
c001b5d0:	c7 05 6c d5 02 c0 00 a7 01 c0 	mov    DWORD PTR ds:0xc002d56c,0xc001a700
c001b5da:	c7 05 70 d5 02 c0 27 a6 01 c0 	mov    DWORD PTR ds:0xc002d570,0xc001a627
c001b5e4:	c7 05 74 d5 02 c0 73 a5 01 c0 	mov    DWORD PTR ds:0xc002d574,0xc001a573
c001b5ee:	c7 05 78 d5 02 c0 54 a5 01 c0 	mov    DWORD PTR ds:0xc002d578,0xc001a554
c001b5f8:	c7 05 7c d5 02 c0 e4 a6 01 c0 	mov    DWORD PTR ds:0xc002d57c,0xc001a6e4
c001b602:	c7 05 84 d5 02 c0 7a ac 01 c0 	mov    DWORD PTR ds:0xc002d584,0xc001ac7a
c001b60c:	c7 05 80 d5 02 c0 9d b3 01 c0 	mov    DWORD PTR ds:0xc002d580,0xc001b39d
c001b616:	c7 05 88 d5 02 c0 02 ad 01 c0 	mov    DWORD PTR ds:0xc002d588,0xc001ad02
c001b620:	c7 05 8c d5 02 c0 69 a9 01 c0 	mov    DWORD PTR ds:0xc002d58c,0xc001a969
c001b62a:	c7 05 90 d5 02 c0 a3 a7 01 c0 	mov    DWORD PTR ds:0xc002d590,0xc001a7a3
c001b634:	c7 05 94 d5 02 c0 a8 a7 01 c0 	mov    DWORD PTR ds:0xc002d594,0xc001a7a8
c001b63e:	c7 05 98 d5 02 c0 dd ad 01 c0 	mov    DWORD PTR ds:0xc002d598,0xc001addd
c001b648:	c7 05 9c d5 02 c0 77 ad 01 c0 	mov    DWORD PTR ds:0xc002d59c,0xc001ad77
c001b652:	c7 05 a0 d5 02 c0 51 aa 01 c0 	mov    DWORD PTR ds:0xc002d5a0,0xc001aa51
c001b65c:	c7 05 a4 d5 02 c0 ba aa 01 c0 	mov    DWORD PTR ds:0xc002d5a4,0xc001aaba
c001b666:	c7 05 a8 d5 02 c0 37 ab 01 c0 	mov    DWORD PTR ds:0xc002d5a8,0xc001ab37
c001b670:	c7 05 ac d5 02 c0 ad a7 01 c0 	mov    DWORD PTR ds:0xc002d5ac,0xc001a7ad
c001b67a:	c7 05 b0 d5 02 c0 4d ae 01 c0 	mov    DWORD PTR ds:0xc002d5b0,0xc001ae4d
c001b684:	c7 05 b4 d5 02 c0 67 ae 01 c0 	mov    DWORD PTR ds:0xc002d5b4,0xc001ae67
c001b68e:	c7 05 b8 d5 02 c0 67 ae 01 c0 	mov    DWORD PTR ds:0xc002d5b8,0xc001ae67
c001b698:	c7 05 bc d5 02 c0 a8 ae 01 c0 	mov    DWORD PTR ds:0xc002d5bc,0xc001aea8
c001b6a2:	c7 05 c0 d5 02 c0 0c af 01 c0 	mov    DWORD PTR ds:0xc002d5c0,0xc001af0c
c001b6ac:	c7 05 c4 d5 02 c0 b7 a7 01 c0 	mov    DWORD PTR ds:0xc002d5c4,0xc001a7b7
c001b6b6:	c7 05 c8 d5 02 c0 70 af 01 c0 	mov    DWORD PTR ds:0xc002d5c8,0xc001af70
c001b6c0:	c7 05 cc d5 02 c0 26 a9 01 c0 	mov    DWORD PTR ds:0xc002d5cc,0xc001a926
c001b6ca:	c7 05 d0 d5 02 c0 bc af 01 c0 	mov    DWORD PTR ds:0xc002d5d0,0xc001afbc
c001b6d4:	c7 05 d4 d5 02 c0 f7 a9 01 c0 	mov    DWORD PTR ds:0xc002d5d4,0xc001a9f7
c001b6de:	c7 05 d8 d5 02 c0 3f b0 01 c0 	mov    DWORD PTR ds:0xc002d5d8,0xc001b03f
c001b6e8:	c7 05 dc d5 02 c0 ba ab 01 c0 	mov    DWORD PTR ds:0xc002d5dc,0xc001abba
c001b6f2:	c7 05 e0 d5 02 c0 66 b0 01 c0 	mov    DWORD PTR ds:0xc002d5e0,0xc001b066
c001b6fc:	c7 05 e4 d5 02 c0 be b0 01 c0 	mov    DWORD PTR ds:0xc002d5e4,0xc001b0be
c001b706:	c7 05 e8 d5 02 c0 6b b1 01 c0 	mov    DWORD PTR ds:0xc002d5e8,0xc001b16b
c001b710:	c7 05 ec d5 02 c0 c7 a7 01 c0 	mov    DWORD PTR ds:0xc002d5ec,0xc001a7c7
c001b71a:	c7 05 f0 d5 02 c0 31 a8 01 c0 	mov    DWORD PTR ds:0xc002d5f0,0xc001a831
c001b724:	c7 05 f4 d5 02 c0 77 a8 01 c0 	mov    DWORD PTR ds:0xc002d5f4,0xc001a877
c001b72e:	c7 05 f8 d5 02 c0 8a b2 01 c0 	mov    DWORD PTR ds:0xc002d5f8,0xc001b28a
c001b738:	c7 05 fc d5 02 c0 82 ae 01 c0 	mov    DWORD PTR ds:0xc002d5fc,0xc001ae82
c001b742:	c7 05 00 d6 02 c0 c8 a8 01 c0 	mov    DWORD PTR ds:0xc002d600,0xc001a8c8
c001b74c:	c7 05 04 d6 02 c0 fc b2 01 c0 	mov    DWORD PTR ds:0xc002d604,0xc001b2fc
c001b756:	c7 05 08 d6 02 c0 41 b3 01 c0 	mov    DWORD PTR ds:0xc002d608,0xc001b341
c001b760:	c7 05 0c d6 02 c0 7f a5 01 c0 	mov    DWORD PTR ds:0xc002d60c,0xc001a57f
c001b76a:	c3                   	ret    

c001b76b <systemCall(regs*, void*)>:
c001b76b:	53                   	push   ebx
c001b76c:	83 ec 08             	sub    esp,0x8
c001b76f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b773:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b776:	83 f8 7f             	cmp    eax,0x7f
c001b779:	77 16                	ja     c001b791 <systemCall(regs*, void*)+0x26>
c001b77b:	8b 14 85 60 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2aa0]
c001b782:	85 d2                	test   edx,edx
c001b784:	74 0b                	je     c001b791 <systemCall(regs*, void*)+0x26>
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	53                   	push   ebx
c001b78a:	ff d2                	call   edx
c001b78c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b78f:	eb 0d                	jmp    c001b79e <systemCall(regs*, void*)+0x33>
c001b791:	52                   	push   edx
c001b792:	52                   	push   edx
c001b793:	50                   	push   eax
c001b794:	68 65 a6 02 c0       	push   0xc002a665
c001b799:	e8 8f 70 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001b79e:	83 c4 10             	add    esp,0x10
c001b7a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	83 c4 08             	add    esp,0x8
c001b7ab:	5b                   	pop    ebx
c001b7ac:	c3                   	ret    

c001b7ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b7ad:	55                   	push   ebp
c001b7ae:	89 e5                	mov    ebp,esp
c001b7b0:	57                   	push   edi
c001b7b1:	56                   	push   esi
c001b7b2:	53                   	push   ebx
c001b7b3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b7b9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b7bc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b7bf:	85 c0                	test   eax,eax
c001b7c1:	0f 95 c1             	setne  cl
c001b7c4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b7c8:	0f 94 c2             	sete   dl
c001b7cb:	84 d1                	test   cl,dl
c001b7cd:	74 26                	je     c001b7f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b7cf:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b7d6:	74 1d                	je     c001b7f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b7d8:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b7db:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b7e1:	89 d6                	mov    esi,edx
c001b7e3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b7e9:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b7ef:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b7f2:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b7f5:	83 ec 0c             	sub    esp,0xc
c001b7f8:	05 ff 0f 00 00       	add    eax,0xfff
c001b7fd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b800:	6a 01                	push   0x1
c001b802:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b808:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b80e:	e8 2a 60 ff ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	89 c6                	mov    esi,eax
c001b818:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b81e:	0f 86 21 01 00 00    	jbe    c001b945 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b824:	c1 eb 0c             	shr    ebx,0xc
c001b827:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b831:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b837:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b83a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b83d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b843:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b846:	29 d8                	sub    eax,ebx
c001b848:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b84e:	0f 83 f4 00 00 00    	jae    c001b948 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b85d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b860:	3d 00 10 00 00       	cmp    eax,0x1000
c001b865:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b867:	52                   	push   edx
c001b868:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b86e:	52                   	push   edx
c001b86f:	76 05                	jbe    c001b876 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b871:	b8 00 10 00 00       	mov    eax,0x1000
c001b876:	31 d2                	xor    edx,edx
c001b878:	52                   	push   edx
c001b879:	50                   	push   eax
c001b87a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b87d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b880:	83 c4 20             	add    esp,0x20
c001b883:	85 c0                	test   eax,eax
c001b885:	74 1f                	je     c001b8a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b887:	51                   	push   ecx
c001b888:	51                   	push   ecx
c001b889:	50                   	push   eax
c001b88a:	68 79 a6 02 c0       	push   0xc002a679
c001b88f:	e8 99 6f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001b894:	89 34 24             	mov    DWORD PTR [esp],esi
c001b897:	e8 05 63 ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c001b89c:	83 c4 10             	add    esp,0x10
c001b89f:	31 c0                	xor    eax,eax
c001b8a1:	e9 7c 01 00 00       	jmp    c001ba22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b8a6:	e8 2b 15 00 00       	call   c001cdd6 <lockScheduler()>
c001b8ab:	e8 a3 42 ff ff       	call   c000fb53 <Phys::allocatePage()>
c001b8b0:	6a 07                	push   0x7
c001b8b2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b8b8:	56                   	push   esi
c001b8b9:	50                   	push   eax
c001b8ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8c0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b8c3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b8c9:	e8 3a 66 ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b8ce:	83 c4 0c             	add    esp,0xc
c001b8d1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8d7:	6a 00                	push   0x0
c001b8d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8df:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b8e2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b8e8:	e8 85 64 ff ff       	call   c0011d72 <VAS::mapOtherVASIn(bool, VAS*)>
c001b8ed:	58                   	pop    eax
c001b8ee:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b8f4:	5a                   	pop    edx
c001b8f5:	68 07 04 00 00       	push   0x407
c001b8fa:	53                   	push   ebx
c001b8fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b901:	50                   	push   eax
c001b902:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b908:	6a 00                	push   0x0
c001b90a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b912:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b918:	e8 a5 69 ff ff       	call   c00122c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b91d:	83 c4 1c             	add    esp,0x1c
c001b920:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b926:	68 00 10 00 00       	push   0x1000
c001b92b:	50                   	push   eax
c001b92c:	56                   	push   esi
c001b92d:	e8 23 4d fe ff       	call   c0000655 <memcpy>
c001b932:	e8 a1 14 00 00       	call   c001cdd8 <unlockScheduler()>
c001b937:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	e9 f5 fe ff ff       	jmp    c001b83a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b945:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b948:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b952:	0f 86 bc 00 00 00    	jbe    c001ba14 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b958:	e8 79 14 00 00       	call   c001cdd6 <lockScheduler()>
c001b95d:	51                   	push   ecx
c001b95e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b964:	6a 00                	push   0x0
c001b966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b96e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b974:	e8 f9 63 ff ff       	call   c0011d72 <VAS::mapOtherVASIn(bool, VAS*)>
c001b979:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b97f:	83 c4 10             	add    esp,0x10
c001b982:	c1 e8 0c             	shr    eax,0xc
c001b985:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b98f:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b995:	e8 b9 41 ff ff       	call   c000fb53 <Phys::allocatePage()>
c001b99a:	6a 07                	push   0x7
c001b99c:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b9a2:	56                   	push   esi
c001b9a3:	50                   	push   eax
c001b9a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b9aa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b9ad:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b9b3:	e8 50 65 ff ff       	call   c0011f08 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b9b8:	58                   	pop    eax
c001b9b9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b9bf:	5a                   	pop    edx
c001b9c0:	68 07 04 00 00       	push   0x407
c001b9c5:	53                   	push   ebx
c001b9c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b9cc:	50                   	push   eax
c001b9cd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b9d3:	6a 00                	push   0x0
c001b9d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9dd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b9e3:	e8 da 68 ff ff       	call   c00122c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b9e8:	83 c4 1c             	add    esp,0x1c
c001b9eb:	68 00 10 00 00       	push   0x1000
c001b9f0:	6a 00                	push   0x0
c001b9f2:	56                   	push   esi
c001b9f3:	e8 93 4c fe ff       	call   c000068b <memset>
c001b9f8:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b9fe:	83 c4 10             	add    esp,0x10
c001ba01:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001ba07:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001ba0d:	77 86                	ja     c001b995 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001ba0f:	e8 c4 13 00 00       	call   c001cdd8 <unlockScheduler()>
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	56                   	push   esi
c001ba18:	e8 84 61 ff ff       	call   c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	b0 01                	mov    al,0x1
c001ba22:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ba25:	5b                   	pop    ebx
c001ba26:	5e                   	pop    esi
c001ba27:	5f                   	pop    edi
c001ba28:	5d                   	pop    ebp
c001ba29:	c3                   	ret    

c001ba2a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ba2a:	55                   	push   ebp
c001ba2b:	57                   	push   edi
c001ba2c:	56                   	push   esi
c001ba2d:	53                   	push   ebx
c001ba2e:	83 ec 48             	sub    esp,0x48
c001ba31:	68 14 01 00 00       	push   0x114
c001ba36:	e8 99 3a ff ff       	call   c000f4d4 <malloc>
c001ba3b:	83 c4 0c             	add    esp,0xc
c001ba3e:	89 c6                	mov    esi,eax
c001ba40:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ba44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ba48:	50                   	push   eax
c001ba49:	e8 0e 73 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001ba4e:	58                   	pop    eax
c001ba4f:	5a                   	pop    edx
c001ba50:	6a 01                	push   0x1
c001ba52:	56                   	push   esi
c001ba53:	e8 68 73 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001ba58:	83 c4 10             	add    esp,0x10
c001ba5b:	85 c0                	test   eax,eax
c001ba5d:	0f 85 47 01 00 00    	jne    c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba63:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ba6b:	83 ec 0c             	sub    esp,0xc
c001ba6e:	6a 34                	push   0x34
c001ba70:	e8 5f 3a ff ff       	call   c000f4d4 <malloc>
c001ba75:	89 c3                	mov    ebx,eax
c001ba77:	58                   	pop    eax
c001ba78:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba7a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ba7e:	57                   	push   edi
c001ba7f:	53                   	push   ebx
c001ba80:	6a 00                	push   0x0
c001ba82:	6a 34                	push   0x34
c001ba84:	56                   	push   esi
c001ba85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ba88:	83 c4 20             	add    esp,0x20
c001ba8b:	85 c0                	test   eax,eax
c001ba8d:	0f 85 17 01 00 00    	jne    c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba93:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ba99:	0f 85 0b 01 00 00    	jne    c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba9f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa2:	85 c0                	test   eax,eax
c001baa4:	0f 84 00 01 00 00    	je     c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001baaa:	31 d2                	xor    edx,edx
c001baac:	55                   	push   ebp
c001baad:	52                   	push   edx
c001baae:	50                   	push   eax
c001baaf:	56                   	push   esi
c001bab0:	e8 c9 73 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bab5:	83 c4 10             	add    esp,0x10
c001bab8:	85 c0                	test   eax,eax
c001baba:	0f 85 ea 00 00 00    	jne    c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bac0:	83 ec 0c             	sub    esp,0xc
c001bac3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bac6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001baca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bace:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bad2:	0f af c2             	imul   eax,edx
c001bad5:	50                   	push   eax
c001bad6:	e8 f9 39 ff ff       	call   c000f4d4 <malloc>
c001badb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001badd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bae1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bae4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bae8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001baec:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001baf0:	0f af c2             	imul   eax,edx
c001baf3:	99                   	cdq    
c001baf4:	52                   	push   edx
c001baf5:	50                   	push   eax
c001baf6:	56                   	push   esi
c001baf7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bafa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bafd:	83 c4 20             	add    esp,0x20
c001bb00:	85 c0                	test   eax,eax
c001bb02:	0f 84 a2 00 00 00    	je     c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bb08:	31 d2                	xor    edx,edx
c001bb0a:	51                   	push   ecx
c001bb0b:	52                   	push   edx
c001bb0c:	50                   	push   eax
c001bb0d:	56                   	push   esi
c001bb0e:	e8 6b 73 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 c0                	test   eax,eax
c001bb18:	0f 85 8c 00 00 00    	jne    c001bbaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bb1e:	83 ec 0c             	sub    esp,0xc
c001bb21:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bb25:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bb29:	31 ed                	xor    ebp,ebp
c001bb2b:	0f af c2             	imul   eax,edx
c001bb2e:	50                   	push   eax
c001bb2f:	e8 a0 39 ff ff       	call   c000f4d4 <malloc>
c001bb34:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bb36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb41:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bb45:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bb49:	0f af c2             	imul   eax,edx
c001bb4c:	99                   	cdq    
c001bb4d:	52                   	push   edx
c001bb4e:	50                   	push   eax
c001bb4f:	56                   	push   esi
c001bb50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb53:	83 c4 20             	add    esp,0x20
c001bb56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bb5e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bb62:	0f 86 80 00 00 00    	jbe    c001bbe8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bb68:	0f b7 fd             	movzx  edi,bp
c001bb6b:	c1 e7 05             	shl    edi,0x5
c001bb6e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bb72:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bb75:	75 6b                	jne    c001bbe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb77:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bb7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb7e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bb81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb85:	52                   	push   edx
c001bb86:	31 d2                	xor    edx,edx
c001bb88:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bb8b:	52                   	push   edx
c001bb8c:	50                   	push   eax
c001bb8d:	56                   	push   esi
c001bb8e:	e8 eb 72 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	85 c0                	test   eax,eax
c001bb98:	74 17                	je     c001bbb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	68 a4 a6 02 c0       	push   0xc002a6a4
c001bba2:	e8 86 6c ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001bba7:	83 c4 10             	add    esp,0x10
c001bbaa:	31 c0                	xor    eax,eax
c001bbac:	e9 87 00 00 00       	jmp    c001bc38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bbb1:	83 ec 0c             	sub    esp,0xc
c001bbb4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bbb7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bbba:	50                   	push   eax
c001bbbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbc3:	56                   	push   esi
c001bbc4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bbc8:	e8 e0 fb ff ff       	call   c001b7ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bbcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bbd1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bbd5:	83 c4 20             	add    esp,0x20
c001bbd8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bbdc:	73 04                	jae    c001bbe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bbde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbe2:	45                   	inc    ebp
c001bbe3:	e9 76 ff ff ff       	jmp    c001bb5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bbe8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bbec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbf4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bbfa:	83 ec 0c             	sub    esp,0xc
c001bbfd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bc03:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bc08:	05 00 10 00 00       	add    eax,0x1000
c001bc0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc14:	e8 cb 38 ff ff       	call   c000f4e4 <free>
c001bc19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc1c:	e8 c3 38 ff ff       	call   c000f4e4 <free>
c001bc21:	58                   	pop    eax
c001bc22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc26:	e8 b9 38 ff ff       	call   c000f4e4 <free>
c001bc2b:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc2e:	e8 eb 71 ff ff       	call   c0012e1e <File::close()>
c001bc33:	83 c4 10             	add    esp,0x10
c001bc36:	b0 01                	mov    al,0x1
c001bc38:	83 c4 3c             	add    esp,0x3c
c001bc3b:	5b                   	pop    ebx
c001bc3c:	5e                   	pop    esi
c001bc3d:	5f                   	pop    edi
c001bc3e:	5d                   	pop    ebp
c001bc3f:	c3                   	ret    

c001bc40 <Thr::runtimeReferenceHelper()>:
c001bc40:	83 ec 18             	sub    esp,0x18
c001bc43:	68 ac a6 02 c0       	push   0xc002a6ac
c001bc48:	e8 e0 6b ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001bc4d:	fa                   	cli    
c001bc4e:	83 c4 10             	add    esp,0x10
c001bc51:	eb fe                	jmp    c001bc51 <Thr::runtimeReferenceHelper()+0x11>

c001bc53 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bc53:	57                   	push   edi
c001bc54:	56                   	push   esi
c001bc55:	53                   	push   ebx
c001bc56:	31 db                	xor    ebx,ebx
c001bc58:	39 1d 00 df 02 c0    	cmp    DWORD PTR ds:0xc002df00,ebx
c001bc5e:	7e 3c                	jle    c001bc9c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bc60:	8b 34 9d 80 de 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2180]
c001bc67:	31 ff                	xor    edi,edi
c001bc69:	39 3c 9d 80 dd 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2280],edi
c001bc70:	7e 27                	jle    c001bc99 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bc72:	50                   	push   eax
c001bc73:	50                   	push   eax
c001bc74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc78:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc7a:	03 04 9d 00 de 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2200]
c001bc81:	50                   	push   eax
c001bc82:	e8 f4 4a fe ff       	call   c000077b <strcmp>
c001bc87:	83 c4 10             	add    esp,0x10
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	75 05                	jne    c001bc93 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bc8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bc91:	eb 0b                	jmp    c001bc9e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bc93:	83 c6 10             	add    esi,0x10
c001bc96:	47                   	inc    edi
c001bc97:	eb d0                	jmp    c001bc69 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bc99:	43                   	inc    ebx
c001bc9a:	eb bc                	jmp    c001bc58 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bc9c:	31 c0                	xor    eax,eax
c001bc9e:	5b                   	pop    ebx
c001bc9f:	5e                   	pop    esi
c001bca0:	5f                   	pop    edi
c001bca1:	c3                   	ret    

c001bca2 <Thr::loadKernelSymbolTable(char const*)>:
c001bca2:	55                   	push   ebp
c001bca3:	57                   	push   edi
c001bca4:	56                   	push   esi
c001bca5:	53                   	push   ebx
c001bca6:	83 ec 68             	sub    esp,0x68
c001bca9:	8b 35 54 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df54
c001bcaf:	68 14 01 00 00       	push   0x114
c001bcb4:	e8 1b 38 ff ff       	call   c000f4d4 <malloc>
c001bcb9:	83 c4 0c             	add    esp,0xc
c001bcbc:	89 c3                	mov    ebx,eax
c001bcbe:	56                   	push   esi
c001bcbf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bcc3:	50                   	push   eax
c001bcc4:	e8 93 70 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001bcc9:	5e                   	pop    esi
c001bcca:	5f                   	pop    edi
c001bccb:	6a 01                	push   0x1
c001bccd:	53                   	push   ebx
c001bcce:	e8 ed 70 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	31 d2                	xor    edx,edx
c001bcd8:	85 c0                	test   eax,eax
c001bcda:	0f 85 74 02 00 00    	jne    c001bf54 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bce0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bce8:	83 ec 0c             	sub    esp,0xc
c001bceb:	6a 34                	push   0x34
c001bced:	e8 e2 37 ff ff       	call   c000f4d4 <malloc>
c001bcf2:	59                   	pop    ecx
c001bcf3:	89 c7                	mov    edi,eax
c001bcf5:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bcf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcfb:	56                   	push   esi
c001bcfc:	57                   	push   edi
c001bcfd:	6a 00                	push   0x0
c001bcff:	6a 34                	push   0x34
c001bd01:	53                   	push   ebx
c001bd02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd05:	83 c4 20             	add    esp,0x20
c001bd08:	85 c0                	test   eax,eax
c001bd0a:	74 17                	je     c001bd23 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	68 ce a6 02 c0       	push   0xc002a6ce
c001bd14:	e8 2e dc ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001bd19:	83 c4 10             	add    esp,0x10
c001bd1c:	31 d2                	xor    edx,edx
c001bd1e:	e9 31 02 00 00       	jmp    c001bf54 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bd23:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bd29:	75 e1                	jne    c001bd0c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd2b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bd2e:	85 c0                	test   eax,eax
c001bd30:	74 da                	je     c001bd0c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd32:	52                   	push   edx
c001bd33:	31 d2                	xor    edx,edx
c001bd35:	52                   	push   edx
c001bd36:	50                   	push   eax
c001bd37:	53                   	push   ebx
c001bd38:	e8 41 71 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	85 c0                	test   eax,eax
c001bd42:	75 c8                	jne    c001bd0c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd44:	83 ec 0c             	sub    esp,0xc
c001bd47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bd4b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd4f:	31 ed                	xor    ebp,ebp
c001bd51:	0f af c2             	imul   eax,edx
c001bd54:	50                   	push   eax
c001bd55:	e8 7a 37 ff ff       	call   c000f4d4 <malloc>
c001bd5a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bd5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd60:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd67:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bd6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd6f:	0f af c2             	imul   eax,edx
c001bd72:	99                   	cdq    
c001bd73:	52                   	push   edx
c001bd74:	50                   	push   eax
c001bd75:	53                   	push   ebx
c001bd76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd79:	83 c4 20             	add    esp,0x20
c001bd7c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bd84:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bd8c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bd94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd9c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bda0:	0f 86 aa 00 00 00    	jbe    c001be50 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bda6:	0f b7 f5             	movzx  esi,bp
c001bda9:	6b f6 28             	imul   esi,esi,0x28
c001bdac:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bdb0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bdb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdb7:	50                   	push   eax
c001bdb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bdbc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bdc0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bdc2:	6b c0 28             	imul   eax,eax,0x28
c001bdc5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bdc9:	89 d0                	mov    eax,edx
c001bdcb:	31 d2                	xor    edx,edx
c001bdcd:	52                   	push   edx
c001bdce:	50                   	push   eax
c001bdcf:	53                   	push   ebx
c001bdd0:	e8 a9 70 ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bdd5:	83 c4 0c             	add    esp,0xc
c001bdd8:	6a 20                	push   0x20
c001bdda:	6a 00                	push   0x0
c001bddc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bde0:	52                   	push   edx
c001bde1:	e8 a5 48 fe ff       	call   c000068b <memset>
c001bde6:	58                   	pop    eax
c001bde7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bded:	51                   	push   ecx
c001bdee:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bdf2:	52                   	push   edx
c001bdf3:	6a 00                	push   0x0
c001bdf5:	6a 1f                	push   0x1f
c001bdf7:	53                   	push   ebx
c001bdf8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bdfb:	83 c4 18             	add    esp,0x18
c001bdfe:	68 e5 a6 02 c0       	push   0xc002a6e5
c001be03:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001be07:	52                   	push   edx
c001be08:	e8 6e 49 fe ff       	call   c000077b <strcmp>
c001be0d:	83 c4 10             	add    esp,0x10
c001be10:	85 c0                	test   eax,eax
c001be12:	75 0f                	jne    c001be23 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001be14:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001be17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be23:	50                   	push   eax
c001be24:	50                   	push   eax
c001be25:	68 ed a6 02 c0       	push   0xc002a6ed
c001be2a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001be2e:	50                   	push   eax
c001be2f:	e8 47 49 fe ff       	call   c000077b <strcmp>
c001be34:	83 c4 10             	add    esp,0x10
c001be37:	85 c0                	test   eax,eax
c001be39:	75 0f                	jne    c001be4a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001be3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001be3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be4a:	45                   	inc    ebp
c001be4b:	e9 4c ff ff ff       	jmp    c001bd9c <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001be50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001be55:	75 10                	jne    c001be67 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001be57:	83 ec 0c             	sub    esp,0xc
c001be5a:	68 f5 a6 02 c0       	push   0xc002a6f5
c001be5f:	e8 e3 da ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001be64:	83 c4 10             	add    esp,0x10
c001be67:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001be6c:	75 10                	jne    c001be7e <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001be6e:	83 ec 0c             	sub    esp,0xc
c001be71:	68 f5 a6 02 c0       	push   0xc002a6f5
c001be76:	e8 cc da ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001be7b:	83 c4 10             	add    esp,0x10
c001be7e:	31 d2                	xor    edx,edx
c001be80:	50                   	push   eax
c001be81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be85:	52                   	push   edx
c001be86:	50                   	push   eax
c001be87:	53                   	push   ebx
c001be88:	e8 f1 6f ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001be8d:	5a                   	pop    edx
c001be8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be92:	e8 3d 36 ff ff       	call   c000f4d4 <malloc>
c001be97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be9f:	31 c9                	xor    ecx,ecx
c001bea1:	5e                   	pop    esi
c001bea2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bea4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bea8:	55                   	push   ebp
c001bea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bead:	51                   	push   ecx
c001beae:	52                   	push   edx
c001beaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001beb3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001beb7:	53                   	push   ebx
c001beb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bebb:	83 c4 14             	add    esp,0x14
c001bebe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bec2:	e8 0d 36 ff ff       	call   c000f4d4 <malloc>
c001bec7:	89 c6                	mov    esi,eax
c001bec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001becb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bece:	56                   	push   esi
c001becf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bed3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bed7:	51                   	push   ecx
c001bed8:	52                   	push   edx
c001bed9:	53                   	push   ebx
c001beda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bedd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bee1:	8b 15 00 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df00
c001bee7:	83 c4 1c             	add    esp,0x1c
c001beea:	c1 e8 04             	shr    eax,0x4
c001beed:	89 04 95 80 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2280],eax
c001bef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bef8:	31 d2                	xor    edx,edx
c001befa:	52                   	push   edx
c001befb:	50                   	push   eax
c001befc:	53                   	push   ebx
c001befd:	e8 7c 6f ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bf02:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bf04:	31 d2                	xor    edx,edx
c001bf06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf09:	56                   	push   esi
c001bf0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf0e:	52                   	push   edx
c001bf0f:	50                   	push   eax
c001bf10:	53                   	push   ebx
c001bf11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf14:	83 c4 14             	add    esp,0x14
c001bf17:	53                   	push   ebx
c001bf18:	e8 01 6f ff ff       	call   c0012e1e <File::close()>
c001bf1d:	5d                   	pop    ebp
c001bf1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf22:	e8 bd 35 ff ff       	call   c000f4e4 <free>
c001bf27:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf2a:	e8 b5 35 ff ff       	call   c000f4e4 <free>
c001bf2f:	a1 00 df 02 c0       	mov    eax,ds:0xc002df00
c001bf34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf38:	8d 50 01             	lea    edx,[eax+0x1]
c001bf3b:	89 0c 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],ecx
c001bf42:	89 15 00 df 02 c0    	mov    DWORD PTR ds:0xc002df00,edx
c001bf48:	89 34 85 00 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2200],esi
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	b2 01                	mov    dl,0x1
c001bf54:	83 c4 5c             	add    esp,0x5c
c001bf57:	88 d0                	mov    al,dl
c001bf59:	5b                   	pop    ebx
c001bf5a:	5e                   	pop    esi
c001bf5b:	5f                   	pop    edi
c001bf5c:	5d                   	pop    ebp
c001bf5d:	c3                   	ret    

c001bf5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bf5e:	55                   	push   ebp
c001bf5f:	57                   	push   edi
c001bf60:	56                   	push   esi
c001bf61:	53                   	push   ebx
c001bf62:	81 ec 68 03 00 00    	sub    esp,0x368
c001bf68:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bf6f:	8b 1d 54 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df54
c001bf75:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bf79:	68 14 01 00 00       	push   0x114
c001bf7e:	e8 51 35 ff ff       	call   c000f4d4 <malloc>
c001bf83:	83 c4 0c             	add    esp,0xc
c001bf86:	89 c5                	mov    ebp,eax
c001bf88:	53                   	push   ebx
c001bf89:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bf90:	50                   	push   eax
c001bf91:	e8 c6 6d ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001bf96:	58                   	pop    eax
c001bf97:	5a                   	pop    edx
c001bf98:	6a 01                	push   0x1
c001bf9a:	55                   	push   ebp
c001bf9b:	e8 20 6e ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001bfa0:	83 c4 10             	add    esp,0x10
c001bfa3:	85 c0                	test   eax,eax
c001bfa5:	0f 85 f2 06 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfab:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bfb3:	83 ec 0c             	sub    esp,0xc
c001bfb6:	6a 34                	push   0x34
c001bfb8:	e8 17 35 ff ff       	call   c000f4d4 <malloc>
c001bfbd:	89 c7                	mov    edi,eax
c001bfbf:	58                   	pop    eax
c001bfc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bfc3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bfc7:	53                   	push   ebx
c001bfc8:	57                   	push   edi
c001bfc9:	6a 00                	push   0x0
c001bfcb:	6a 34                	push   0x34
c001bfcd:	55                   	push   ebp
c001bfce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bfd1:	83 c4 20             	add    esp,0x20
c001bfd4:	85 c0                	test   eax,eax
c001bfd6:	0f 85 c1 06 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfdc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bfe2:	0f 85 b5 06 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfe8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bfeb:	85 c0                	test   eax,eax
c001bfed:	0f 84 aa 06 00 00    	je     c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bff3:	31 d2                	xor    edx,edx
c001bff5:	56                   	push   esi
c001bff6:	52                   	push   edx
c001bff7:	50                   	push   eax
c001bff8:	55                   	push   ebp
c001bff9:	e8 80 6e ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	85 c0                	test   eax,eax
c001c003:	0f 85 94 06 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c009:	83 ec 0c             	sub    esp,0xc
c001c00c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c00f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c013:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c017:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c01b:	0f af c2             	imul   eax,edx
c001c01e:	50                   	push   eax
c001c01f:	e8 b0 34 ff ff       	call   c000f4d4 <malloc>
c001c024:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c027:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c02b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c032:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c036:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c03a:	0f af c2             	imul   eax,edx
c001c03d:	99                   	cdq    
c001c03e:	52                   	push   edx
c001c03f:	50                   	push   eax
c001c040:	55                   	push   ebp
c001c041:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c044:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c047:	83 c4 20             	add    esp,0x20
c001c04a:	85 c0                	test   eax,eax
c001c04c:	0f 84 4b 06 00 00    	je     c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c052:	31 d2                	xor    edx,edx
c001c054:	51                   	push   ecx
c001c055:	52                   	push   edx
c001c056:	50                   	push   eax
c001c057:	55                   	push   ebp
c001c058:	e8 21 6e ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	85 c0                	test   eax,eax
c001c062:	0f 85 35 06 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c068:	83 ec 0c             	sub    esp,0xc
c001c06b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c06f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c073:	31 f6                	xor    esi,esi
c001c075:	0f af c2             	imul   eax,edx
c001c078:	50                   	push   eax
c001c079:	e8 56 34 ff ff       	call   c000f4d4 <malloc>
c001c07e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c081:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c085:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c088:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c08c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c090:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c094:	0f af c2             	imul   eax,edx
c001c097:	99                   	cdq    
c001c098:	52                   	push   edx
c001c099:	50                   	push   eax
c001c09a:	55                   	push   ebp
c001c09b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c09e:	83 c4 20             	add    esp,0x20
c001c0a1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c0a5:	0f 86 8a 00 00 00    	jbe    c001c135 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c0ab:	0f b7 de             	movzx  ebx,si
c001c0ae:	c1 e3 05             	shl    ebx,0x5
c001c0b1:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c0b5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c0b8:	75 75                	jne    c001c12f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c0ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c0bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c0c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0c8:	52                   	push   edx
c001c0c9:	31 d2                	xor    edx,edx
c001c0cb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c0ce:	52                   	push   edx
c001c0cf:	50                   	push   eax
c001c0d0:	55                   	push   ebp
c001c0d1:	e8 a8 6d ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c0d6:	83 c4 10             	add    esp,0x10
c001c0d9:	85 c0                	test   eax,eax
c001c0db:	0f 85 bc 05 00 00    	jne    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c0e1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c0e8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c0eb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c0ef:	31 d2                	xor    edx,edx
c001c0f1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c0f5:	83 ec 0c             	sub    esp,0xc
c001c0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c103:	50                   	push   eax
c001c104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c108:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c10c:	52                   	push   edx
c001c10d:	50                   	push   eax
c001c10e:	55                   	push   ebp
c001c10f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c112:	83 c4 1c             	add    esp,0x1c
c001c115:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c118:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c11b:	50                   	push   eax
c001c11c:	6a 00                	push   0x0
c001c11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c122:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c126:	50                   	push   eax
c001c127:	e8 5f 45 fe ff       	call   c000068b <memset>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	46                   	inc    esi
c001c130:	e9 6c ff ff ff       	jmp    c001c0a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c135:	31 db                	xor    ebx,ebx
c001c137:	50                   	push   eax
c001c138:	68 00 01 00 00       	push   0x100
c001c13d:	6a 00                	push   0x0
c001c13f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c143:	50                   	push   eax
c001c144:	e8 42 45 fe ff       	call   c000068b <memset>
c001c149:	83 c4 0c             	add    esp,0xc
c001c14c:	68 00 01 00 00       	push   0x100
c001c151:	6a 00                	push   0x0
c001c153:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c15a:	50                   	push   eax
c001c15b:	e8 2b 45 fe ff       	call   c000068b <memset>
c001c160:	83 c4 10             	add    esp,0x10
c001c163:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c16b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c173:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c17b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c183:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c18b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c18f:	0f 86 30 01 00 00    	jbe    c001c2c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c195:	0f b7 f3             	movzx  esi,bx
c001c198:	6b f6 28             	imul   esi,esi,0x28
c001c19b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c19f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1a6:	50                   	push   eax
c001c1a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1ab:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c1af:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1b1:	6b d2 28             	imul   edx,edx,0x28
c001c1b4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c1b8:	31 d2                	xor    edx,edx
c001c1ba:	52                   	push   edx
c001c1bb:	50                   	push   eax
c001c1bc:	55                   	push   ebp
c001c1bd:	e8 bc 6c ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c1c2:	83 c4 0c             	add    esp,0xc
c001c1c5:	6a 20                	push   0x20
c001c1c7:	6a 00                	push   0x0
c001c1c9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c1d0:	51                   	push   ecx
c001c1d1:	e8 b5 44 fe ff       	call   c000068b <memset>
c001c1d6:	58                   	pop    eax
c001c1d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1da:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c1de:	52                   	push   edx
c001c1df:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c1e6:	51                   	push   ecx
c001c1e7:	6a 00                	push   0x0
c001c1e9:	6a 1f                	push   0x1f
c001c1eb:	55                   	push   ebp
c001c1ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1ef:	83 c4 1c             	add    esp,0x1c
c001c1f2:	6a 09                	push   0x9
c001c1f4:	68 0f a7 02 c0       	push   0xc002a70f
c001c1f9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c200:	51                   	push   ecx
c001c201:	e8 ec 43 fe ff       	call   c00005f2 <memcmp>
c001c206:	83 c4 10             	add    esp,0x10
c001c209:	85 c0                	test   eax,eax
c001c20b:	75 21                	jne    c001c22e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c20d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c215:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c219:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c21d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c220:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c227:	89 c8                	mov    eax,ecx
c001c229:	40                   	inc    eax
c001c22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c22e:	50                   	push   eax
c001c22f:	6a 09                	push   0x9
c001c231:	68 19 a7 02 c0       	push   0xc002a719
c001c236:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c23d:	50                   	push   eax
c001c23e:	e8 af 43 fe ff       	call   c00005f2 <memcmp>
c001c243:	83 c4 10             	add    esp,0x10
c001c246:	85 c0                	test   eax,eax
c001c248:	75 21                	jne    c001c26b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c24e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c256:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c25a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c25d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c264:	89 c8                	mov    eax,ecx
c001c266:	40                   	inc    eax
c001c267:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c26b:	50                   	push   eax
c001c26c:	50                   	push   eax
c001c26d:	68 e5 a6 02 c0       	push   0xc002a6e5
c001c272:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c279:	50                   	push   eax
c001c27a:	e8 fc 44 fe ff       	call   c000077b <strcmp>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	85 c0                	test   eax,eax
c001c284:	75 0f                	jne    c001c295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c286:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c289:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c28d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c295:	50                   	push   eax
c001c296:	50                   	push   eax
c001c297:	68 ed a6 02 c0       	push   0xc002a6ed
c001c29c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c2a3:	50                   	push   eax
c001c2a4:	e8 d2 44 fe ff       	call   c000077b <strcmp>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	85 c0                	test   eax,eax
c001c2ae:	75 0f                	jne    c001c2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c2b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c2b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2bf:	43                   	inc    ebx
c001c2c0:	e9 c6 fe ff ff       	jmp    c001c18b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c2c5:	31 d2                	xor    edx,edx
c001c2c7:	50                   	push   eax
c001c2c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2cc:	52                   	push   edx
c001c2cd:	50                   	push   eax
c001c2ce:	55                   	push   ebp
c001c2cf:	e8 aa 6b ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c2d4:	5a                   	pop    edx
c001c2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2d9:	e8 f6 31 ff ff       	call   c000f4d4 <malloc>
c001c2de:	31 d2                	xor    edx,edx
c001c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c2e4:	59                   	pop    ecx
c001c2e5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2e8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c2ec:	53                   	push   ebx
c001c2ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c2f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2f5:	52                   	push   edx
c001c2f6:	50                   	push   eax
c001c2f7:	55                   	push   ebp
c001c2f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2fb:	83 c4 14             	add    esp,0x14
c001c2fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c302:	e8 cd 31 ff ff       	call   c000f4d4 <malloc>
c001c307:	31 d2                	xor    edx,edx
c001c309:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c30d:	83 c4 0c             	add    esp,0xc
c001c310:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c314:	52                   	push   edx
c001c315:	50                   	push   eax
c001c316:	55                   	push   ebp
c001c317:	e8 62 6b ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c31c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c31f:	31 d2                	xor    edx,edx
c001c321:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c324:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c32c:	52                   	push   edx
c001c32d:	50                   	push   eax
c001c32e:	55                   	push   ebp
c001c32f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c332:	83 c4 20             	add    esp,0x20
c001c335:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c33d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c341:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c345:	0f 84 56 03 00 00    	je     c001c6a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c34b:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c352:	31 d2                	xor    edx,edx
c001c354:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c358:	c1 e8 03             	shr    eax,0x3
c001c35b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c35f:	50                   	push   eax
c001c360:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c364:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c368:	52                   	push   edx
c001c369:	50                   	push   eax
c001c36a:	55                   	push   ebp
c001c36b:	e8 0e 6b ff ff       	call   c0012e7e <File::seek(unsigned long long)>
c001c370:	58                   	pop    eax
c001c371:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c375:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c37c:	e8 53 31 ff ff       	call   c000f4d4 <malloc>
c001c381:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c384:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c388:	31 d2                	xor    edx,edx
c001c38a:	58                   	pop    eax
c001c38b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c38f:	50                   	push   eax
c001c390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c394:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c398:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c39f:	52                   	push   edx
c001c3a0:	50                   	push   eax
c001c3a1:	55                   	push   ebp
c001c3a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3a5:	83 c4 20             	add    esp,0x20
c001c3a8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c3b0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c3b4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c3b8:	0f 8d c7 02 00 00    	jge    c001c685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c3be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3c6:	31 db                	xor    ebx,ebx
c001c3c8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c3cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3d3:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c3d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3db:	c1 e8 08             	shr    eax,0x8
c001c3de:	89 c6                	mov    esi,eax
c001c3e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c3e4:	c1 e6 04             	shl    esi,0x4
c001c3e7:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c3eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3f2:	85 c0                	test   eax,eax
c001c3f4:	0f 85 17 01 00 00    	jne    c001c511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c3fa:	83 ec 0c             	sub    esp,0xc
c001c3fd:	b3 01                	mov    bl,0x1
c001c3ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c403:	03 06                	add    eax,DWORD PTR [esi]
c001c405:	50                   	push   eax
c001c406:	e8 48 f8 ff ff       	call   c001bc53 <Thr::getAddressOfKernelSymbol(char const*)>
c001c40b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c417:	0f 85 f4 00 00 00    	jne    c001c511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c41d:	50                   	push   eax
c001c41e:	50                   	push   eax
c001c41f:	68 23 a7 02 c0       	push   0xc002a723
c001c424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c428:	03 06                	add    eax,DWORD PTR [esi]
c001c42a:	50                   	push   eax
c001c42b:	e8 4b 43 fe ff       	call   c000077b <strcmp>
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	85 c0                	test   eax,eax
c001c435:	75 0a                	jne    c001c441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c437:	b8 5c 54 02 c0       	mov    eax,0xc002545c
c001c43c:	e9 ca 00 00 00       	jmp    c001c50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c441:	50                   	push   eax
c001c442:	50                   	push   eax
c001c443:	68 2d a7 02 c0       	push   0xc002a72d
c001c448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c44c:	03 06                	add    eax,DWORD PTR [esi]
c001c44e:	50                   	push   eax
c001c44f:	e8 27 43 fe ff       	call   c000077b <strcmp>
c001c454:	83 c4 10             	add    esp,0x10
c001c457:	85 c0                	test   eax,eax
c001c459:	75 0a                	jne    c001c465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c45b:	b8 90 51 02 c0       	mov    eax,0xc0025190
c001c460:	e9 a6 00 00 00       	jmp    c001c50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c465:	53                   	push   ebx
c001c466:	53                   	push   ebx
c001c467:	68 36 a7 02 c0       	push   0xc002a736
c001c46c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c470:	03 06                	add    eax,DWORD PTR [esi]
c001c472:	50                   	push   eax
c001c473:	e8 03 43 fe ff       	call   c000077b <strcmp>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	85 c0                	test   eax,eax
c001c47d:	75 0a                	jne    c001c489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c47f:	b8 5c 55 02 c0       	mov    eax,0xc002555c
c001c484:	e9 82 00 00 00       	jmp    c001c50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c489:	51                   	push   ecx
c001c48a:	51                   	push   ecx
c001c48b:	68 40 a7 02 c0       	push   0xc002a740
c001c490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c494:	03 06                	add    eax,DWORD PTR [esi]
c001c496:	50                   	push   eax
c001c497:	e8 df 42 fe ff       	call   c000077b <strcmp>
c001c49c:	83 c4 10             	add    esp,0x10
c001c49f:	85 c0                	test   eax,eax
c001c4a1:	74 63                	je     c001c506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c4a3:	50                   	push   eax
c001c4a4:	50                   	push   eax
c001c4a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4a9:	03 06                	add    eax,DWORD PTR [esi]
c001c4ab:	50                   	push   eax
c001c4ac:	68 49 a7 02 c0       	push   0xc002a749
c001c4b1:	e8 77 63 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001c4b6:	58                   	pop    eax
c001c4b7:	5a                   	pop    edx
c001c4b8:	68 63 a7 02 c0       	push   0xc002a763
c001c4bd:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c4c4:	53                   	push   ebx
c001c4c5:	e8 60 42 fe ff       	call   c000072a <strcpy>
c001c4ca:	59                   	pop    ecx
c001c4cb:	58                   	pop    eax
c001c4cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4d0:	03 06                	add    eax,DWORD PTR [esi]
c001c4d2:	50                   	push   eax
c001c4d3:	53                   	push   ebx
c001c4d4:	e8 08 43 fe ff       	call   c00007e1 <strcat>
c001c4d9:	58                   	pop    eax
c001c4da:	5a                   	pop    edx
c001c4db:	68 f9 a7 02 c0       	push   0xc002a7f9
c001c4e0:	53                   	push   ebx
c001c4e1:	e8 fb 42 fe ff       	call   c00007e1 <strcat>
c001c4e6:	83 c4 10             	add    esp,0x10
c001c4e9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4ee:	0f 84 4b 01 00 00    	je     c001c63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4f4:	83 ec 0c             	sub    esp,0xc
c001c4f7:	53                   	push   ebx
c001c4f8:	e8 4a d4 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c4fd:	83 c4 10             	add    esp,0x10
c001c500:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c504:	eb 0b                	jmp    c001c511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c506:	b8 dc 52 02 c0       	mov    eax,0xc00252dc
c001c50b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c50f:	b3 01                	mov    bl,0x1
c001c511:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c516:	0f 85 80 00 00 00    	jne    c001c59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c51c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c523:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c527:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c52b:	01 ce                	add    esi,ecx
c001c52d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c535:	8b 06                	mov    eax,DWORD PTR [esi]
c001c537:	0f 94 c2             	sete   dl
c001c53a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c542:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c547:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c54b:	84 db                	test   bl,bl
c001c54d:	74 31                	je     c001c580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c54f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c553:	01 c3                	add    ebx,eax
c001c555:	84 d2                	test   dl,dl
c001c557:	75 0a                	jne    c001c563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c559:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c55d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c561:	76 32                	jbe    c001c595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c563:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c568:	0f 84 d1 00 00 00    	je     c001c63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c56e:	83 ec 0c             	sub    esp,0xc
c001c571:	68 7a a7 02 c0       	push   0xc002a77a
c001c576:	e8 cc d3 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	eb 15                	jmp    c001c595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c580:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c583:	84 d2                	test   dl,dl
c001c585:	75 0e                	jne    c001c595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c587:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c58b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c58f:	77 04                	ja     c001c595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c591:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c595:	89 1e                	mov    DWORD PTR [esi],ebx
c001c597:	e9 e0 00 00 00       	jmp    c001c67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c59c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c5a1:	75 6e                	jne    c001c611 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c5a3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c5aa:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c5ae:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c5b2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c5ba:	74 17                	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c5bc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c5c4:	74 0d                	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c5c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c5ca:	83 e8 04             	sub    eax,0x4
c001c5cd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c5d1:	76 17                	jbe    c001c5ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c5d3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c5d8:	74 65                	je     c001c63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	68 96 a7 02 c0       	push   0xc002a796
c001c5e2:	e8 60 d3 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c5e7:	83 c4 10             	add    esp,0x10
c001c5ea:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5ec:	84 db                	test   bl,bl
c001c5ee:	74 13                	je     c001c603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c5f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c5f4:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c5fb:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c5ff:	01 d0                	add    eax,edx
c001c601:	eb 06                	jmp    c001c609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c603:	89 d0                	mov    eax,edx
c001c605:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c609:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c60d:	89 06                	mov    DWORD PTR [esi],eax
c001c60f:	eb 6b                	jmp    c001c67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c611:	50                   	push   eax
c001c612:	50                   	push   eax
c001c613:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c618:	50                   	push   eax
c001c619:	68 b2 a7 02 c0       	push   0xc002a7b2
c001c61e:	e8 0a 62 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c62b:	74 12                	je     c001c63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c62d:	83 ec 0c             	sub    esp,0xc
c001c630:	68 bd a7 02 c0       	push   0xc002a7bd
c001c635:	e8 0d d3 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c63a:	83 c4 10             	add    esp,0x10
c001c63d:	eb 3d                	jmp    c001c67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c63f:	83 ec 0c             	sub    esp,0xc
c001c642:	55                   	push   ebp
c001c643:	e8 d6 67 ff ff       	call   c0012e1e <File::close()>
c001c648:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c64b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c64e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c651:	59                   	pop    ecx
c001c652:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c656:	e8 89 2e ff ff       	call   c000f4e4 <free>
c001c65b:	5b                   	pop    ebx
c001c65c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c660:	e8 7f 2e ff ff       	call   c000f4e4 <free>
c001c665:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c668:	e8 77 2e ff ff       	call   c000f4e4 <free>
c001c66d:	5e                   	pop    esi
c001c66e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c672:	e8 6d 2e ff ff       	call   c000f4e4 <free>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	eb 21                	jmp    c001c69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c67c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c680:	e9 2b fd ff ff       	jmp    c001c3b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c685:	83 ec 0c             	sub    esp,0xc
c001c688:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c68c:	e8 53 2e ff ff       	call   c000f4e4 <free>
c001c691:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c695:	83 c4 10             	add    esp,0x10
c001c698:	e9 a0 fc ff ff       	jmp    c001c33d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c69d:	31 c0                	xor    eax,eax
c001c69f:	eb 33                	jmp    c001c6d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c6a1:	83 ec 0c             	sub    esp,0xc
c001c6a4:	55                   	push   ebp
c001c6a5:	e8 74 67 ff ff       	call   c0012e1e <File::close()>
c001c6aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6b3:	58                   	pop    eax
c001c6b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6b8:	e8 27 2e ff ff       	call   c000f4e4 <free>
c001c6bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6c0:	e8 1f 2e ff ff       	call   c000f4e4 <free>
c001c6c5:	5a                   	pop    edx
c001c6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c6ca:	e8 15 2e ff ff       	call   c000f4e4 <free>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	b0 01                	mov    al,0x1
c001c6d4:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c6da:	5b                   	pop    ebx
c001c6db:	5e                   	pop    esi
c001c6dc:	5f                   	pop    edi
c001c6dd:	5d                   	pop    ebp
c001c6de:	c3                   	ret    

c001c6df <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c6df:	56                   	push   esi
c001c6e0:	31 d2                	xor    edx,edx
c001c6e2:	53                   	push   ebx
c001c6e3:	8b 1d 60 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d760
c001c6e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6ed:	39 d3                	cmp    ebx,edx
c001c6ef:	7e 1b                	jle    c001c70c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c6f1:	8b 04 95 80 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2680]
c001c6f8:	39 c8                	cmp    eax,ecx
c001c6fa:	77 0d                	ja     c001c709 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c6fc:	8b 34 95 80 d7 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2880]
c001c703:	01 c6                	add    esi,eax
c001c705:	39 ce                	cmp    esi,ecx
c001c707:	77 05                	ja     c001c70e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c709:	42                   	inc    edx
c001c70a:	eb e1                	jmp    c001c6ed <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c70c:	31 c0                	xor    eax,eax
c001c70e:	5b                   	pop    ebx
c001c70f:	5e                   	pop    esi
c001c710:	c3                   	ret    

c001c711 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c711:	53                   	push   ebx
c001c712:	31 c0                	xor    eax,eax
c001c714:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c718:	8b 1d 60 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d760
c001c71e:	39 c3                	cmp    ebx,eax
c001c720:	7e 22                	jle    c001c744 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c722:	8b 14 85 80 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2680]
c001c729:	39 ca                	cmp    edx,ecx
c001c72b:	77 14                	ja     c001c741 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c72d:	03 14 85 80 d7 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2880]
c001c734:	39 ca                	cmp    edx,ecx
c001c736:	76 09                	jbe    c001c741 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c738:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c001c73f:	eb 05                	jmp    c001c746 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c741:	40                   	inc    eax
c001c742:	eb da                	jmp    c001c71e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c744:	31 c0                	xor    eax,eax
c001c746:	5b                   	pop    ebx
c001c747:	c3                   	ret    

c001c748 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c748:	53                   	push   ebx
c001c749:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c74d:	53                   	push   ebx
c001c74e:	e8 8c ff ff ff       	call   c001c6df <Thr::getDriverBaseFromAddress(unsigned long)>
c001c753:	5a                   	pop    edx
c001c754:	31 d2                	xor    edx,edx
c001c756:	85 c0                	test   eax,eax
c001c758:	74 04                	je     c001c75e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c75a:	89 da                	mov    edx,ebx
c001c75c:	29 c2                	sub    edx,eax
c001c75e:	89 d0                	mov    eax,edx
c001c760:	5b                   	pop    ebx
c001c761:	c3                   	ret    

c001c762 <Thr::loadDLL(char const*, bool)>:
c001c762:	55                   	push   ebp
c001c763:	57                   	push   edi
c001c764:	56                   	push   esi
c001c765:	53                   	push   ebx
c001c766:	81 ec 34 01 00 00    	sub    esp,0x134
c001c76c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c773:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c77a:	56                   	push   esi
c001c77b:	68 d5 a7 02 c0       	push   0xc002a7d5
c001c780:	e8 a8 60 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001c785:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c78c:	e8 43 2d ff ff       	call   c000f4d4 <malloc>
c001c791:	83 c4 0c             	add    esp,0xc
c001c794:	89 c3                	mov    ebx,eax
c001c796:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c001c79c:	56                   	push   esi
c001c79d:	50                   	push   eax
c001c79e:	e8 b9 65 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	85 db                	test   ebx,ebx
c001c7a8:	75 3c                	jne    c001c7e6 <Thr::loadDLL(char const*, bool)+0x84>
c001c7aa:	89 e8                	mov    eax,ebp
c001c7ac:	84 c0                	test   al,al
c001c7ae:	0f 84 b0 01 00 00    	je     c001c964 <Thr::loadDLL(char const*, bool)+0x202>
c001c7b4:	50                   	push   eax
c001c7b5:	50                   	push   eax
c001c7b6:	68 e6 a7 02 c0       	push   0xc002a7e6
c001c7bb:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c7bf:	57                   	push   edi
c001c7c0:	e8 65 3f fe ff       	call   c000072a <strcpy>
c001c7c5:	58                   	pop    eax
c001c7c6:	5a                   	pop    edx
c001c7c7:	56                   	push   esi
c001c7c8:	57                   	push   edi
c001c7c9:	e8 13 40 fe ff       	call   c00007e1 <strcat>
c001c7ce:	59                   	pop    ecx
c001c7cf:	58                   	pop    eax
c001c7d0:	68 f9 a7 02 c0       	push   0xc002a7f9
c001c7d5:	57                   	push   edi
c001c7d6:	e8 06 40 fe ff       	call   c00007e1 <strcat>
c001c7db:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7de:	e8 64 d1 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	50                   	push   eax
c001c7e7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c7eb:	50                   	push   eax
c001c7ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c7f0:	50                   	push   eax
c001c7f1:	53                   	push   ebx
c001c7f2:	e8 75 68 ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c001c7f7:	83 c4 10             	add    esp,0x10
c001c7fa:	85 db                	test   ebx,ebx
c001c7fc:	74 0c                	je     c001c80a <Thr::loadDLL(char const*, bool)+0xa8>
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c803:	53                   	push   ebx
c001c804:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c80f:	75 0a                	jne    c001c81b <Thr::loadDLL(char const*, bool)+0xb9>
c001c811:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c815:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c819:	75 3c                	jne    c001c857 <Thr::loadDLL(char const*, bool)+0xf5>
c001c81b:	89 e8                	mov    eax,ebp
c001c81d:	84 c0                	test   al,al
c001c81f:	0f 84 3d 01 00 00    	je     c001c962 <Thr::loadDLL(char const*, bool)+0x200>
c001c825:	50                   	push   eax
c001c826:	50                   	push   eax
c001c827:	68 e6 a7 02 c0       	push   0xc002a7e6
c001c82c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c830:	53                   	push   ebx
c001c831:	e8 f4 3e fe ff       	call   c000072a <strcpy>
c001c836:	58                   	pop    eax
c001c837:	5a                   	pop    edx
c001c838:	56                   	push   esi
c001c839:	53                   	push   ebx
c001c83a:	e8 a2 3f fe ff       	call   c00007e1 <strcat>
c001c83f:	59                   	pop    ecx
c001c840:	5f                   	pop    edi
c001c841:	68 f9 a7 02 c0       	push   0xc002a7f9
c001c846:	53                   	push   ebx
c001c847:	e8 95 3f fe ff       	call   c00007e1 <strcat>
c001c84c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c84f:	e8 f3 d0 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	e8 71 51 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c001c85c:	51                   	push   ecx
c001c85d:	6a 03                	push   0x3
c001c85f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c863:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c867:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c86d:	83 d3 00             	adc    ebx,0x0
c001c870:	89 ca                	mov    edx,ecx
c001c872:	89 d1                	mov    ecx,edx
c001c874:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c878:	51                   	push   ecx
c001c879:	50                   	push   eax
c001c87a:	e8 89 57 ff ff       	call   c0012008 <VAS::allocatePages(int, int)>
c001c87f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c882:	89 c3                	mov    ebx,eax
c001c884:	e8 1f 3e fe ff       	call   c00006a8 <strlen>
c001c889:	8b 3d 60 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d760
c001c88f:	40                   	inc    eax
c001c890:	89 04 24             	mov    DWORD PTR [esp],eax
c001c893:	e8 3c 2c ff ff       	call   c000f4d4 <malloc>
c001c898:	89 04 bd 80 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2480],eax
c001c89f:	5f                   	pop    edi
c001c8a0:	58                   	pop    eax
c001c8a1:	a1 60 d7 02 c0       	mov    eax,ds:0xc002d760
c001c8a6:	56                   	push   esi
c001c8a7:	ff 34 85 80 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2480]
c001c8ae:	e8 77 3e fe ff       	call   c000072a <strcpy>
c001c8b3:	a1 60 d7 02 c0       	mov    eax,ds:0xc002d760
c001c8b8:	8d 50 01             	lea    edx,[eax+0x1]
c001c8bb:	89 1c 85 80 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2680],ebx
c001c8c2:	89 15 60 d7 02 c0    	mov    DWORD PTR ds:0xc002d760,edx
c001c8c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c8cc:	83 c4 0c             	add    esp,0xc
c001c8cf:	89 14 85 80 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2880],edx
c001c8d6:	6a 01                	push   0x1
c001c8d8:	53                   	push   ebx
c001c8d9:	56                   	push   esi
c001c8da:	e8 7f f6 ff ff       	call   c001bf5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	89 c7                	mov    edi,eax
c001c8e4:	fe c8                	dec    al
c001c8e6:	74 16                	je     c001c8fe <Thr::loadDLL(char const*, bool)+0x19c>
c001c8e8:	89 e8                	mov    eax,ebp
c001c8ea:	84 c0                	test   al,al
c001c8ec:	74 10                	je     c001c8fe <Thr::loadDLL(char const*, bool)+0x19c>
c001c8ee:	83 ec 0c             	sub    esp,0xc
c001c8f1:	68 fb a7 02 c0       	push   0xc002a7fb
c001c8f6:	e8 4c d0 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c8fb:	83 c4 10             	add    esp,0x10
c001c8fe:	31 f6                	xor    esi,esi
c001c900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c908:	05 ff 0f 00 00       	add    eax,0xfff
c001c90d:	83 d2 00             	adc    edx,0x0
c001c910:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c914:	c1 ea 0c             	shr    edx,0xc
c001c917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c91b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c91f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c923:	ba 00 00 00 00       	mov    edx,0x0
c001c928:	89 d0                	mov    eax,edx
c001c92a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c92e:	73 2c                	jae    c001c95c <Thr::loadDLL(char const*, bool)+0x1fa>
c001c930:	e8 98 50 ff ff       	call   c00119cd <Virt::getAKernelVAS()>
c001c935:	89 f5                	mov    ebp,esi
c001c937:	c1 e5 0c             	shl    ebp,0xc
c001c93a:	52                   	push   edx
c001c93b:	01 dd                	add    ebp,ebx
c001c93d:	52                   	push   edx
c001c93e:	55                   	push   ebp
c001c93f:	50                   	push   eax
c001c940:	e8 3d 52 ff ff       	call   c0011b82 <VAS::getPageTableEntry(unsigned long)>
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c94b:	75 0c                	jne    c001c959 <Thr::loadDLL(char const*, bool)+0x1f7>
c001c94d:	83 ec 0c             	sub    esp,0xc
c001c950:	55                   	push   ebp
c001c951:	e8 73 31 ff ff       	call   c000fac9 <Phys::freePage(unsigned long)>
c001c956:	83 c4 10             	add    esp,0x10
c001c959:	46                   	inc    esi
c001c95a:	eb a4                	jmp    c001c900 <Thr::loadDLL(char const*, bool)+0x19e>
c001c95c:	89 f8                	mov    eax,edi
c001c95e:	84 c0                	test   al,al
c001c960:	75 02                	jne    c001c964 <Thr::loadDLL(char const*, bool)+0x202>
c001c962:	31 db                	xor    ebx,ebx
c001c964:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c96a:	89 d8                	mov    eax,ebx
c001c96c:	5b                   	pop    ebx
c001c96d:	5e                   	pop    esi
c001c96e:	5f                   	pop    edi
c001c96f:	5d                   	pop    ebp
c001c970:	c3                   	ret    

c001c971 <Thr::executeDLL(unsigned long, void*)>:
c001c971:	56                   	push   esi
c001c972:	53                   	push   ebx
c001c973:	51                   	push   ecx
c001c974:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c978:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c97c:	85 db                	test   ebx,ebx
c001c97e:	75 10                	jne    c001c990 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	68 1a a8 02 c0       	push   0xc002a81a
c001c988:	e8 ba cf ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c994:	89 d8                	mov    eax,ebx
c001c996:	5a                   	pop    edx
c001c997:	5b                   	pop    ebx
c001c998:	5e                   	pop    esi
c001c999:	ff e0                	jmp    eax
c001c99b:	90                   	nop

c001c99c <changeTSS>:
c001c99c:	83 ec 14             	sub    esp,0x14
c001c99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c9a7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c9ac:	c1 e2 15             	shl    edx,0x15
c001c9af:	29 d0                	sub    eax,edx
c001c9b1:	50                   	push   eax
c001c9b2:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001c9b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9bd:	05 7c 11 00 00       	add    eax,0x117c
c001c9c2:	50                   	push   eax
c001c9c3:	e8 b4 47 ff ff       	call   c001117c <TSS::setESP(unsigned long)>
c001c9c8:	83 c4 1c             	add    esp,0x1c
c001c9cb:	c3                   	ret    

c001c9cc <Process::addArgs(char**)>:
c001c9cc:	57                   	push   edi
c001c9cd:	56                   	push   esi
c001c9ce:	53                   	push   ebx
c001c9cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c9d7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c9e1:	85 ff                	test   edi,edi
c001c9e3:	74 3d                	je     c001ca22 <Process::addArgs(char**)+0x56>
c001c9e5:	8b 07                	mov    eax,DWORD PTR [edi]
c001c9e7:	85 c0                	test   eax,eax
c001c9e9:	74 37                	je     c001ca22 <Process::addArgs(char**)+0x56>
c001c9eb:	31 db                	xor    ebx,ebx
c001c9ed:	83 ec 0c             	sub    esp,0xc
c001c9f0:	50                   	push   eax
c001c9f1:	e8 b2 3c fe ff       	call   c00006a8 <strlen>
c001c9f6:	40                   	inc    eax
c001c9f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9fa:	e8 d5 2a ff ff       	call   c000f4d4 <malloc>
c001c9ff:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ca06:	5a                   	pop    edx
c001ca07:	59                   	pop    ecx
c001ca08:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ca0b:	43                   	inc    ebx
c001ca0c:	50                   	push   eax
c001ca0d:	e8 18 3d fe ff       	call   c000072a <strcpy>
c001ca12:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ca1e:	85 c0                	test   eax,eax
c001ca20:	75 cb                	jne    c001c9ed <Process::addArgs(char**)+0x21>
c001ca22:	5b                   	pop    ebx
c001ca23:	5e                   	pop    esi
c001ca24:	5f                   	pop    edi
c001ca25:	c3                   	ret    

c001ca26 <Process::Process(char const*, Process*, char**)>:
c001ca26:	56                   	push   esi
c001ca27:	53                   	push   ebx
c001ca28:	83 ec 14             	sub    esp,0x14
c001ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2f:	05 0c 02 00 00       	add    eax,0x20c
c001ca34:	bb 07 00 00 00       	mov    ebx,0x7
c001ca39:	89 c6                	mov    esi,eax
c001ca3b:	85 db                	test   ebx,ebx
c001ca3d:	78 12                	js     c001ca51 <Process::Process(char const*, Process*, char**)+0x2b>
c001ca3f:	83 ec 0c             	sub    esp,0xc
c001ca42:	56                   	push   esi
c001ca43:	e8 ca ac 00 00       	call   c0027712 <ThreadControlBlock::ThreadControlBlock()>
c001ca48:	83 c4 10             	add    esp,0x10
c001ca4b:	83 c6 63             	add    esi,0x63
c001ca4e:	4b                   	dec    ebx
c001ca4f:	eb ea                	jmp    c001ca3b <Process::Process(char const*, Process*, char**)+0x15>
c001ca51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca55:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ca5c:	83 ec 0c             	sub    esp,0xc
c001ca5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca63:	e8 30 cd ff ff       	call   c0019798 <Krnl::newProcessEnv(Process*)>
c001ca68:	83 c4 10             	add    esp,0x10
c001ca6b:	89 c2                	mov    edx,eax
c001ca6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca71:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ca77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca7b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ca84:	a1 90 bf 02 c0       	mov    eax,ds:0xc002bf90
c001ca89:	8d 50 01             	lea    edx,[eax+0x1]
c001ca8c:	89 15 90 bf 02 c0    	mov    DWORD PTR ds:0xc002bf90,edx
c001ca92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca96:	89 02                	mov    DWORD PTR [edx],eax
c001ca98:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001caa0:	83 ec 0c             	sub    esp,0xc
c001caa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001caa7:	e8 28 2a ff ff       	call   c000f4d4 <malloc>
c001caac:	83 c4 10             	add    esp,0x10
c001caaf:	89 c3                	mov    ebx,eax
c001cab1:	83 ec 08             	sub    esp,0x8
c001cab4:	6a 00                	push   0x0
c001cab6:	53                   	push   ebx
c001cab7:	e8 f4 58 ff ff       	call   c00123b0 <VAS::VAS(bool)>
c001cabc:	83 c4 10             	add    esp,0x10
c001cabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cacd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cadb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cadf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cae9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001caef:	85 c0                	test   eax,eax
c001caf1:	74 42                	je     c001cb35 <Process::Process(char const*, Process*, char**)+0x10f>
c001caf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cafd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb07:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cb0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb11:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb17:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb21:	05 0c 01 00 00       	add    eax,0x10c
c001cb26:	83 ec 08             	sub    esp,0x8
c001cb29:	52                   	push   edx
c001cb2a:	50                   	push   eax
c001cb2b:	e8 fa 3b fe ff       	call   c000072a <strcpy>
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	eb 63                	jmp    c001cb98 <Process::Process(char const*, Process*, char**)+0x172>
c001cb35:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb44:	e8 8b 29 ff ff       	call   c000f4d4 <malloc>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	89 c3                	mov    ebx,eax
c001cb4e:	83 ec 08             	sub    esp,0x8
c001cb51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb55:	53                   	push   ebx
c001cb56:	e8 1f 43 ff ff       	call   c0010e7a <VgaText::VgaText(char const*)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb62:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	50                   	push   eax
c001cb76:	e8 4a 36 ff ff       	call   c00101c5 <addToTerminalCycle(VgaText*)>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb82:	05 0c 01 00 00       	add    eax,0x10c
c001cb87:	83 ec 08             	sub    esp,0x8
c001cb8a:	68 44 a8 02 c0       	push   0xc002a844
c001cb8f:	50                   	push   eax
c001cb90:	e8 95 3b fe ff       	call   c000072a <strcpy>
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb9c:	83 c0 0c             	add    eax,0xc
c001cb9f:	83 ec 08             	sub    esp,0x8
c001cba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cba6:	50                   	push   eax
c001cba7:	e8 7e 3b fe ff       	call   c000072a <strcpy>
c001cbac:	83 c4 10             	add    esp,0x10
c001cbaf:	83 ec 08             	sub    esp,0x8
c001cbb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cbb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbba:	e8 0d fe ff ff       	call   c001c9cc <Process::addArgs(char**)>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	83 ec 08             	sub    esp,0x8
c001cbc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbcd:	e8 58 ee ff ff       	call   c001ba2a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cbd2:	83 c4 10             	add    esp,0x10
c001cbd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cbd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cbdd:	83 f0 01             	xor    eax,0x1
c001cbe0:	88 c2                	mov    dl,al
c001cbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbe6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cbec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cbf1:	83 ec 08             	sub    esp,0x8
c001cbf4:	50                   	push   eax
c001cbf5:	68 40 a9 02 c0       	push   0xc002a940
c001cbfa:	e8 2e 5c ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	90                   	nop
c001cc03:	83 c4 14             	add    esp,0x14
c001cc06:	5b                   	pop    ebx
c001cc07:	5e                   	pop    esi
c001cc08:	c3                   	ret    
c001cc09:	90                   	nop

c001cc0a <Process::Process(bool, char const*, Process*, char**)>:
c001cc0a:	56                   	push   esi
c001cc0b:	53                   	push   ebx
c001cc0c:	83 ec 24             	sub    esp,0x24
c001cc0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc1b:	05 0c 02 00 00       	add    eax,0x20c
c001cc20:	bb 07 00 00 00       	mov    ebx,0x7
c001cc25:	89 c6                	mov    esi,eax
c001cc27:	85 db                	test   ebx,ebx
c001cc29:	78 12                	js     c001cc3d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cc2b:	83 ec 0c             	sub    esp,0xc
c001cc2e:	56                   	push   esi
c001cc2f:	e8 de aa 00 00       	call   c0027712 <ThreadControlBlock::ThreadControlBlock()>
c001cc34:	83 c4 10             	add    esp,0x10
c001cc37:	83 c6 63             	add    esi,0x63
c001cc3a:	4b                   	dec    ebx
c001cc3b:	eb ea                	jmp    c001cc27 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc41:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc4f:	e8 44 cb ff ff       	call   c0019798 <Krnl::newProcessEnv(Process*)>
c001cc54:	83 c4 10             	add    esp,0x10
c001cc57:	89 c2                	mov    edx,eax
c001cc59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc5d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cc63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc67:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cc70:	a1 90 bf 02 c0       	mov    eax,ds:0xc002bf90
c001cc75:	8d 50 01             	lea    edx,[eax+0x1]
c001cc78:	89 15 90 bf 02 c0    	mov    DWORD PTR ds:0xc002bf90,edx
c001cc7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc82:	89 02                	mov    DWORD PTR [edx],eax
c001cc84:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cc8c:	83 ec 0c             	sub    esp,0xc
c001cc8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc93:	e8 3c 28 ff ff       	call   c000f4d4 <malloc>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	89 c3                	mov    ebx,eax
c001cc9d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cca2:	83 ec 08             	sub    esp,0x8
c001cca5:	50                   	push   eax
c001cca6:	53                   	push   ebx
c001cca7:	e8 04 57 ff ff       	call   c00123b0 <VAS::VAS(bool)>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccb3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ccb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccbd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ccc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cccb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cccf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ccd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccd9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ccdf:	85 c0                	test   eax,eax
c001cce1:	74 42                	je     c001cd25 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cce7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cced:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ccf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccf7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ccfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd01:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cd07:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cd0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd11:	05 0c 01 00 00       	add    eax,0x10c
c001cd16:	83 ec 08             	sub    esp,0x8
c001cd19:	52                   	push   edx
c001cd1a:	50                   	push   eax
c001cd1b:	e8 0a 3a fe ff       	call   c000072a <strcpy>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	eb 63                	jmp    c001cd88 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cd25:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cd2d:	83 ec 0c             	sub    esp,0xc
c001cd30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cd34:	e8 9b 27 ff ff       	call   c000f4d4 <malloc>
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	89 c3                	mov    ebx,eax
c001cd3e:	83 ec 08             	sub    esp,0x8
c001cd41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cd45:	53                   	push   ebx
c001cd46:	e8 2f 41 ff ff       	call   c0010e7a <VgaText::VgaText(char const*)>
c001cd4b:	83 c4 10             	add    esp,0x10
c001cd4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd52:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cd58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd5c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cd62:	83 ec 0c             	sub    esp,0xc
c001cd65:	50                   	push   eax
c001cd66:	e8 5a 34 ff ff       	call   c00101c5 <addToTerminalCycle(VgaText*)>
c001cd6b:	83 c4 10             	add    esp,0x10
c001cd6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd72:	05 0c 01 00 00       	add    eax,0x10c
c001cd77:	83 ec 08             	sub    esp,0x8
c001cd7a:	68 44 a8 02 c0       	push   0xc002a844
c001cd7f:	50                   	push   eax
c001cd80:	e8 a5 39 fe ff       	call   c000072a <strcpy>
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd8c:	83 c0 0c             	add    eax,0xc
c001cd8f:	83 ec 08             	sub    esp,0x8
c001cd92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cd96:	50                   	push   eax
c001cd97:	e8 8e 39 fe ff       	call   c000072a <strcpy>
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	83 ec 08             	sub    esp,0x8
c001cda2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cda6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdaa:	e8 1d fc ff ff       	call   c001c9cc <Process::addArgs(char**)>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	90                   	nop
c001cdb3:	83 c4 24             	add    esp,0x24
c001cdb6:	5b                   	pop    ebx
c001cdb7:	5e                   	pop    esi
c001cdb8:	c3                   	ret    

c001cdb9 <disableIRQs()>:
c001cdb9:	fa                   	cli    
c001cdba:	ff 05 2c df 02 c0    	inc    DWORD PTR ds:0xc002df2c
c001cdc0:	c3                   	ret    

c001cdc1 <getIRQNestingLevel()>:
c001cdc1:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c001cdc6:	c3                   	ret    

c001cdc7 <enableIRQs()>:
c001cdc7:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c001cdcc:	48                   	dec    eax
c001cdcd:	a3 2c df 02 c0       	mov    ds:0xc002df2c,eax
c001cdd2:	75 01                	jne    c001cdd5 <enableIRQs()+0xe>
c001cdd4:	fb                   	sti    
c001cdd5:	c3                   	ret    

c001cdd6 <lockScheduler()>:
c001cdd6:	eb e1                	jmp    c001cdb9 <disableIRQs()>

c001cdd8 <unlockScheduler()>:
c001cdd8:	eb ed                	jmp    c001cdc7 <enableIRQs()>

c001cdda <userModeEntryPoint(void*)>:
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	e8 f6 ff ff ff       	call   c001cdd8 <unlockScheduler()>
c001cde2:	fb                   	sti    
c001cde3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cde8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdeb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cdf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdf5:	83 c4 0c             	add    esp,0xc
c001cdf8:	e9 e2 34 fe ff       	jmp    c00002df <goToUsermode>

c001cdfd <lockStuff()>:
c001cdfd:	e8 b7 ff ff ff       	call   c001cdb9 <disableIRQs()>
c001ce02:	ff 05 28 df 02 c0    	inc    DWORD PTR ds:0xc002df28
c001ce08:	c3                   	ret    

c001ce09 <taskStartupFunction>:
c001ce09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce0e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ce11:	c3                   	ret    

c001ce12 <updateTimeUsed()>:
c001ce12:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c001ce17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce1d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ce24:	74 50                	je     c001ce76 <updateTimeUsed()+0x64>
c001ce26:	57                   	push   edi
c001ce27:	56                   	push   esi
c001ce28:	53                   	push   ebx
c001ce29:	0f 31                	rdtsc  
c001ce2b:	89 c1                	mov    ecx,eax
c001ce2d:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c001ce32:	2b 0d 58 df 02 c0    	sub    ecx,DWORD PTR ds:0xc002df58
c001ce38:	89 d3                	mov    ebx,edx
c001ce3a:	89 0d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ecx
c001ce40:	1b 1d 5c df 02 c0    	sbb    ebx,DWORD PTR ds:0xc002df5c
c001ce46:	a3 58 df 02 c0       	mov    ds:0xc002df58,eax
c001ce4b:	89 1d 64 df 02 c0    	mov    DWORD PTR ds:0xc002df64,ebx
c001ce51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce56:	89 15 6c df 02 c0    	mov    DWORD PTR ds:0xc002df6c,edx
c001ce5c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ce5f:	89 15 5c df 02 c0    	mov    DWORD PTR ds:0xc002df5c,edx
c001ce65:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ce68:	01 f1                	add    ecx,esi
c001ce6a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ce6d:	11 fb                	adc    ebx,edi
c001ce6f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ce72:	5b                   	pop    ebx
c001ce73:	5e                   	pop    esi
c001ce74:	5f                   	pop    edi
c001ce75:	c3                   	ret    
c001ce76:	c3                   	ret    

c001ce77 <switchToThread(ThreadControlBlock*)>:
c001ce77:	53                   	push   ebx
c001ce78:	83 ec 08             	sub    esp,0x8
c001ce7b:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001ce80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce84:	85 c0                	test   eax,eax
c001ce86:	75 30                	jne    c001ceb8 <switchToThread(ThreadControlBlock*)+0x41>
c001ce88:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ce8b:	3c ff                	cmp    al,0xff
c001ce8d:	74 25                	je     c001ceb4 <switchToThread(ThreadControlBlock*)+0x3d>
c001ce8f:	0f b6 d0             	movzx  edx,al
c001ce92:	b8 84 03 00 00       	mov    eax,0x384
c001ce97:	29 d0                	sub    eax,edx
c001ce99:	c1 e0 10             	shl    eax,0x10
c001ce9c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ce9f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cea2:	e8 6b ff ff ff       	call   c001ce12 <updateTimeUsed()>
c001cea7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ceab:	83 c4 08             	add    esp,0x8
c001ceae:	5b                   	pop    ebx
c001ceaf:	e9 63 34 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ceb4:	31 c0                	xor    eax,eax
c001ceb6:	eb e7                	jmp    c001ce9f <switchToThread(ThreadControlBlock*)+0x28>
c001ceb8:	c7 05 24 df 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x1
c001cec2:	83 c4 08             	add    esp,0x8
c001cec5:	5b                   	pop    ebx
c001cec6:	c3                   	ret    
c001cec7:	90                   	nop

c001cec8 <Semaphore::Semaphore(int)>:
c001cec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cecc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ced0:	89 10                	mov    DWORD PTR [eax],edx
c001ced2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cedd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cef3:	90                   	nop
c001cef4:	c3                   	ret    
c001cef5:	90                   	nop

c001cef6 <Mutex::Mutex()>:
c001cef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cefa:	6a 01                	push   0x1
c001cefc:	50                   	push   eax
c001cefd:	e8 c6 ff ff ff       	call   c001cec8 <Semaphore::Semaphore(int)>
c001cf02:	83 c4 08             	add    esp,0x8
c001cf05:	90                   	nop
c001cf06:	c3                   	ret    
c001cf07:	90                   	nop

c001cf08 <Process::createThread(void (*)(void*), void*, int)>:
c001cf08:	55                   	push   ebp
c001cf09:	31 c9                	xor    ecx,ecx
c001cf0b:	57                   	push   edi
c001cf0c:	56                   	push   esi
c001cf0d:	53                   	push   ebx
c001cf0e:	83 ec 1c             	sub    esp,0x1c
c001cf11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cf15:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001cf1c:	89 f2                	mov    edx,esi
c001cf1e:	0f b7 c2             	movzx  eax,dx
c001cf21:	83 e2 01             	and    edx,0x1
c001cf24:	74 14                	je     c001cf3a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001cf26:	d1 f8                	sar    eax,1
c001cf28:	41                   	inc    ecx
c001cf29:	89 c2                	mov    edx,eax
c001cf2b:	83 f9 10             	cmp    ecx,0x10
c001cf2e:	75 ee                	jne    c001cf1e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cf30:	83 c4 1c             	add    esp,0x1c
c001cf33:	31 c0                	xor    eax,eax
c001cf35:	5b                   	pop    ebx
c001cf36:	5e                   	pop    esi
c001cf37:	5f                   	pop    edi
c001cf38:	5d                   	pop    ebp
c001cf39:	c3                   	ret    
c001cf3a:	83 ec 08             	sub    esp,0x8
c001cf3d:	b8 01 00 00 00       	mov    eax,0x1
c001cf42:	d3 e0                	shl    eax,cl
c001cf44:	09 c6                	or     esi,eax
c001cf46:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cf4c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cf53:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cf56:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cf59:	01 ce                	add    esi,ecx
c001cf5b:	89 f0                	mov    eax,esi
c001cf5d:	c1 e0 05             	shl    eax,0x5
c001cf60:	01 c6                	add    esi,eax
c001cf62:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cf65:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cf6b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cf71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cf75:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cf7b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cf81:	89 ca                	mov    edx,ecx
c001cf83:	f7 da                	neg    edx
c001cf85:	c1 e2 15             	shl    edx,0x15
c001cf88:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cf8e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cf94:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cf98:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cfa2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cfa8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cfac:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cfb2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cfbc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cfc6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cfcd:	50                   	push   eax
c001cfce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfd2:	68 48 df 02 c0       	push   0xc002df48
c001cfd7:	e8 c4 a5 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cfdc:	83 c4 10             	add    esp,0x10
c001cfdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfe3:	83 c4 1c             	add    esp,0x1c
c001cfe6:	5b                   	pop    ebx
c001cfe7:	5e                   	pop    esi
c001cfe8:	5f                   	pop    edi
c001cfe9:	5d                   	pop    ebp
c001cfea:	c3                   	ret    
c001cfeb:	90                   	nop

c001cfec <Process::createUserThread()>:
c001cfec:	83 ec 0c             	sub    esp,0xc
c001cfef:	68 80 00 00 00       	push   0x80
c001cff4:	6a 00                	push   0x0
c001cff6:	68 da cd 01 c0       	push   0xc001cdda
c001cffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfff:	e8 04 ff ff ff       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c001d004:	83 c4 1c             	add    esp,0x1c
c001d007:	c3                   	ret    

c001d008 <setupMultitasking(void (*)())>:
c001d008:	56                   	push   esi
c001d009:	53                   	push   ebx
c001d00a:	53                   	push   ebx
c001d00b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d00f:	eb 10                	jmp    c001d021 <setupMultitasking(void (*)())+0x19>
c001d011:	83 ec 0c             	sub    esp,0xc
c001d014:	68 48 df 02 c0       	push   0xc002df48
c001d019:	e8 d4 a4 00 00       	call   c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d01e:	83 c4 10             	add    esp,0x10
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	68 48 df 02 c0       	push   0xc002df48
c001d029:	e8 a8 a4 00 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d02e:	83 c4 10             	add    esp,0x10
c001d031:	84 c0                	test   al,al
c001d033:	74 dc                	je     c001d011 <setupMultitasking(void (*)())+0x9>
c001d035:	83 ec 0c             	sub    esp,0xc
c001d038:	68 3f 07 00 00       	push   0x73f
c001d03d:	e8 92 24 ff ff       	call   c000f4d4 <malloc>
c001d042:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d049:	89 c3                	mov    ebx,eax
c001d04b:	6a 00                	push   0x0
c001d04d:	68 48 a8 02 c0       	push   0xc002a848
c001d052:	6a 01                	push   0x1
c001d054:	50                   	push   eax
c001d055:	e8 b0 fb ff ff       	call   c001cc0a <Process::Process(bool, char const*, Process*, char**)>
c001d05a:	83 c4 18             	add    esp,0x18
c001d05d:	89 1d 54 df 02 c0    	mov    DWORD PTR ds:0xc002df54,ebx
c001d063:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d069:	68 68 a9 02 c0       	push   0xc002a968
c001d06e:	e8 ba 57 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d073:	58                   	pop    eax
c001d074:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d07a:	e8 70 39 ff ff       	call   c00109ef <setActiveTerminal(VgaText*)>
c001d07f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d087:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d08d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d090:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d09a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d0a0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d0a6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d0b0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d0ba:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d0c4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d0ca:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d0d0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d0da:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d0e0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d0ea:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d0f0:	5a                   	pop    edx
c001d0f1:	59                   	pop    ecx
c001d0f2:	68 44 a8 02 c0       	push   0xc002a844
c001d0f7:	50                   	push   eax
c001d0f8:	e8 2d 36 fe ff       	call   c000072a <strcpy>
c001d0fd:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d104:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d108:	83 c4 14             	add    esp,0x14
c001d10b:	5b                   	pop    ebx
c001d10c:	5e                   	pop    esi
c001d10d:	e9 f7 31 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d112 <schedule()>:
c001d112:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001d117:	85 c0                	test   eax,eax
c001d119:	74 0b                	je     c001d126 <schedule()+0x14>
c001d11b:	c7 05 24 df 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x1
c001d125:	c3                   	ret    
c001d126:	53                   	push   ebx
c001d127:	83 ec 14             	sub    esp,0x14
c001d12a:	68 48 df 02 c0       	push   0xc002df48
c001d12f:	e8 a2 a3 00 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	84 c0                	test   al,al
c001d139:	75 38                	jne    c001d173 <schedule()+0x61>
c001d13b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d143:	4a                   	dec    edx
c001d144:	74 32                	je     c001d178 <schedule()+0x66>
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	68 48 df 02 c0       	push   0xc002df48
c001d14e:	e8 7b a3 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d153:	c7 04 24 48 df 02 c0 	mov    DWORD PTR [esp],0xc002df48
c001d15a:	89 c3                	mov    ebx,eax
c001d15c:	e8 91 a3 00 00       	call   c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d161:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d16b:	e8 07 fd ff ff       	call   c001ce77 <switchToThread(ThreadControlBlock*)>
c001d170:	83 c4 10             	add    esp,0x10
c001d173:	83 c4 08             	add    esp,0x8
c001d176:	5b                   	pop    ebx
c001d177:	c3                   	ret    
c001d178:	83 ec 08             	sub    esp,0x8
c001d17b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d182:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d188:	68 48 df 02 c0       	push   0xc002df48
c001d18d:	e8 0e a4 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d192:	83 c4 10             	add    esp,0x10
c001d195:	eb af                	jmp    c001d146 <schedule()+0x34>

c001d197 <unlockStuff()>:
c001d197:	a1 28 df 02 c0       	mov    eax,ds:0xc002df28
c001d19c:	48                   	dec    eax
c001d19d:	a3 28 df 02 c0       	mov    ds:0xc002df28,eax
c001d1a2:	75 09                	jne    c001d1ad <unlockStuff()+0x16>
c001d1a4:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c001d1a9:	85 c0                	test   eax,eax
c001d1ab:	75 05                	jne    c001d1b2 <unlockStuff()+0x1b>
c001d1ad:	e9 15 fc ff ff       	jmp    c001cdc7 <enableIRQs()>
c001d1b2:	83 ec 0c             	sub    esp,0xc
c001d1b5:	c7 05 24 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x0
c001d1bf:	e8 4e ff ff ff       	call   c001d112 <schedule()>
c001d1c4:	83 c4 0c             	add    esp,0xc
c001d1c7:	e9 fb fb ff ff       	jmp    c001cdc7 <enableIRQs()>

c001d1cc <Semaphore::tryAcquire()>:
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d3:	e8 25 fc ff ff       	call   c001cdfd <lockStuff()>
c001d1d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d1db:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d1dd:	7c 0b                	jl     c001d1ea <Semaphore::tryAcquire()+0x1e>
c001d1df:	e8 b3 ff ff ff       	call   c001d197 <unlockStuff()>
c001d1e4:	31 c0                	xor    eax,eax
c001d1e6:	83 c4 0c             	add    esp,0xc
c001d1e9:	c3                   	ret    
c001d1ea:	42                   	inc    edx
c001d1eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1ee:	e8 a4 ff ff ff       	call   c001d197 <unlockStuff()>
c001d1f3:	b0 01                	mov    al,0x1
c001d1f5:	83 c4 0c             	add    esp,0xc
c001d1f8:	c3                   	ret    
c001d1f9:	90                   	nop

c001d1fa <Semaphore::assertLocked(char const*)>:
c001d1fa:	83 ec 0c             	sub    esp,0xc
c001d1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d201:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d205:	e8 f3 fb ff ff       	call   c001cdfd <lockStuff()>
c001d20a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d20c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d20f:	7c 05                	jl     c001d216 <Semaphore::assertLocked(char const*)+0x1c>
c001d211:	83 c4 0c             	add    esp,0xc
c001d214:	eb 81                	jmp    c001d197 <unlockStuff()>
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	52                   	push   edx
c001d21a:	e8 28 c7 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	83 c4 0c             	add    esp,0xc
c001d225:	e9 6d ff ff ff       	jmp    c001d197 <unlockStuff()>

c001d22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	e8 8f fb ff ff       	call   c001cdc1 <getIRQNestingLevel()>
c001d232:	83 ec 08             	sub    esp,0x8
c001d235:	50                   	push   eax
c001d236:	68 9c a9 02 c0       	push   0xc002a99c
c001d23b:	e8 ed 55 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d240:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d249:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d24c:	e8 c1 fe ff ff       	call   c001d112 <schedule()>
c001d251:	e8 82 fb ff ff       	call   c001cdd8 <unlockScheduler()>
c001d256:	e8 66 fb ff ff       	call   c001cdc1 <getIRQNestingLevel()>
c001d25b:	5a                   	pop    edx
c001d25c:	59                   	pop    ecx
c001d25d:	50                   	push   eax
c001d25e:	68 d0 a9 02 c0       	push   0xc002a9d0
c001d263:	e8 c5 55 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d268:	83 c4 1c             	add    esp,0x1c
c001d26b:	c3                   	ret    

c001d26c <blockTask(TaskState)>:
c001d26c:	83 ec 0c             	sub    esp,0xc
c001d26f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d273:	e8 5e fb ff ff       	call   c001cdd6 <lockScheduler()>
c001d278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d27d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d280:	e8 8d fe ff ff       	call   c001d112 <schedule()>
c001d285:	83 c4 0c             	add    esp,0xc
c001d288:	e9 4b fb ff ff       	jmp    c001cdd8 <unlockScheduler()>

c001d28d <waitTask(int, int*, int)>:
c001d28d:	83 ec 18             	sub    esp,0x18
c001d290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d299:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d29c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2a5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d2a8:	6a 07                	push   0x7
c001d2aa:	e8 bd ff ff ff       	call   c001d26c <blockTask(TaskState)>
c001d2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2b4:	83 c4 10             	add    esp,0x10
c001d2b7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d2ba:	85 d2                	test   edx,edx
c001d2bc:	74 0a                	je     c001d2c8 <waitTask(int, int*, int)+0x3b>
c001d2be:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d2c1:	89 02                	mov    DWORD PTR [edx],eax
c001d2c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2c8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d2cb:	83 c4 0c             	add    esp,0xc
c001d2ce:	c3                   	ret    

c001d2cf <nanoSleepUntil(unsigned long long)>:
c001d2cf:	83 ec 0c             	sub    esp,0xc
c001d2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2da:	3b 05 90 d0 02 c0    	cmp    eax,DWORD PTR ds:0xc002d090
c001d2e0:	89 d1                	mov    ecx,edx
c001d2e2:	1b 0d 94 d0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d094
c001d2e8:	73 04                	jae    c001d2ee <nanoSleepUntil(unsigned long long)+0x1f>
c001d2ea:	83 c4 0c             	add    esp,0xc
c001d2ed:	c3                   	ret    
c001d2ee:	e8 0a fb ff ff       	call   c001cdfd <lockStuff()>
c001d2f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2f9:	83 ec 08             	sub    esp,0x8
c001d2fc:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d2ff:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d302:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d308:	68 3c df 02 c0       	push   0xc002df3c
c001d30d:	e8 8e a2 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d312:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d319:	e8 4e ff ff ff       	call   c001d26c <blockTask(TaskState)>
c001d31e:	83 c4 1c             	add    esp,0x1c
c001d321:	e9 71 fe ff ff       	jmp    c001d197 <unlockStuff()>

c001d326 <nanoSleep(unsigned long long)>:
c001d326:	a1 90 d0 02 c0       	mov    eax,ds:0xc002d090
c001d32b:	8b 15 94 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d094
c001d331:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d335:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d339:	eb 94                	jmp    c001d2cf <nanoSleepUntil(unsigned long long)>

c001d33b <sleep(unsigned long long)>:
c001d33b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d343:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d348:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d34c:	01 ca                	add    edx,ecx
c001d34e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d352:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d356:	eb ce                	jmp    c001d326 <nanoSleep(unsigned long long)>

c001d358 <Semaphore::acquire()>:
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d35f:	e8 99 fa ff ff       	call   c001cdfd <lockStuff()>
c001d364:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d367:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d369:	7d 0c                	jge    c001d377 <Semaphore::acquire()+0x1f>
c001d36b:	42                   	inc    edx
c001d36c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d36f:	83 c4 0c             	add    esp,0xc
c001d372:	e9 20 fe ff ff       	jmp    c001d197 <unlockStuff()>
c001d377:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d37d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d384:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d387:	85 d2                	test   edx,edx
c001d389:	74 2a                	je     c001d3b5 <Semaphore::acquire()+0x5d>
c001d38b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d38e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d394:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d397:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d3a3:	6a 05                	push   0x5
c001d3a5:	e8 c2 fe ff ff       	call   c001d26c <blockTask(TaskState)>
c001d3aa:	83 c4 10             	add    esp,0x10
c001d3ad:	83 c4 0c             	add    esp,0xc
c001d3b0:	e9 e2 fd ff ff       	jmp    c001d197 <unlockStuff()>
c001d3b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d3bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d3be:	eb d7                	jmp    c001d397 <Semaphore::acquire()+0x3f>

c001d3c0 <taskReturned>:
c001d3c0:	83 ec 18             	sub    esp,0x18
c001d3c3:	68 04 aa 02 c0       	push   0xc002aa04
c001d3c8:	e8 7a c5 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001d3cd:	83 c4 10             	add    esp,0x10
c001d3d0:	83 ec 0c             	sub    esp,0xc
c001d3d3:	6a 02                	push   0x2
c001d3d5:	e8 92 fe ff ff       	call   c001d26c <blockTask(TaskState)>
c001d3da:	e8 f7 f9 ff ff       	call   c001cdd6 <lockScheduler()>
c001d3df:	e8 2e fd ff ff       	call   c001d112 <schedule()>
c001d3e4:	e8 ef f9 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d3e9:	83 c4 10             	add    esp,0x10
c001d3ec:	eb e2                	jmp    c001d3d0 <taskReturned+0x10>

c001d3ee <unblockTask(ThreadControlBlock*)>:
c001d3ee:	53                   	push   ebx
c001d3ef:	83 ec 08             	sub    esp,0x8
c001d3f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3f6:	e8 db f9 ff ff       	call   c001cdd6 <lockScheduler()>
c001d3fb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d3fe:	85 c0                	test   eax,eax
c001d400:	74 5c                	je     c001d45e <unblockTask(ThreadControlBlock*)+0x70>
c001d402:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d405:	48                   	dec    eax
c001d406:	74 31                	je     c001d439 <unblockTask(ThreadControlBlock*)+0x4b>
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	68 48 df 02 c0       	push   0xc002df48
c001d410:	e8 b9 a0 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d415:	83 c4 10             	add    esp,0x10
c001d418:	85 c0                	test   eax,eax
c001d41a:	75 17                	jne    c001d433 <unblockTask(ThreadControlBlock*)+0x45>
c001d41c:	eb 65                	jmp    c001d483 <unblockTask(ThreadControlBlock*)+0x95>
c001d41e:	83 ec 08             	sub    esp,0x8
c001d421:	50                   	push   eax
c001d422:	68 48 df 02 c0       	push   0xc002df48
c001d427:	e8 7c a3 00 00       	call   c00277a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	85 c0                	test   eax,eax
c001d431:	74 50                	je     c001d483 <unblockTask(ThreadControlBlock*)+0x95>
c001d433:	39 c3                	cmp    ebx,eax
c001d435:	75 e7                	jne    c001d41e <unblockTask(ThreadControlBlock*)+0x30>
c001d437:	eb 1c                	jmp    c001d455 <unblockTask(ThreadControlBlock*)+0x67>
c001d439:	83 ec 0c             	sub    esp,0xc
c001d43c:	68 f4 aa 02 c0       	push   0xc002aaf4
c001d441:	e8 e7 53 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d446:	c7 04 24 80 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa80
c001d44d:	e8 db 53 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	83 c4 08             	add    esp,0x8
c001d458:	5b                   	pop    ebx
c001d459:	e9 7a f9 ff ff       	jmp    c001cdd8 <unlockScheduler()>
c001d45e:	83 ec 0c             	sub    esp,0xc
c001d461:	68 38 aa 02 c0       	push   0xc002aa38
c001d466:	e8 c2 53 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d46b:	c7 04 24 80 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa80
c001d472:	e8 b6 53 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	83 c4 08             	add    esp,0x8
c001d47d:	5b                   	pop    ebx
c001d47e:	e9 55 f9 ff ff       	jmp    c001cdd8 <unlockScheduler()>
c001d483:	83 ec 08             	sub    esp,0x8
c001d486:	53                   	push   ebx
c001d487:	68 48 df 02 c0       	push   0xc002df48
c001d48c:	e8 0f a1 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	83 c4 08             	add    esp,0x8
c001d497:	5b                   	pop    ebx
c001d498:	e9 3b f9 ff ff       	jmp    c001cdd8 <unlockScheduler()>

c001d49d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d49d:	55                   	push   ebp
c001d49e:	57                   	push   edi
c001d49f:	56                   	push   esi
c001d4a0:	53                   	push   ebx
c001d4a1:	83 ec 1c             	sub    esp,0x1c
c001d4a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4ab:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d4b1:	85 ff                	test   edi,edi
c001d4b3:	7e 20                	jle    c001d4d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d4b5:	31 f6                	xor    esi,esi
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d4c1:	46                   	inc    esi
c001d4c2:	e8 1d 20 ff ff       	call   c000f4e4 <free>
c001d4c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4ca:	83 c4 10             	add    esp,0x10
c001d4cd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d4d3:	7f e2                	jg     c001d4b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d4d5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d4e4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d4e7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d4ea:	d3 c0                	rol    eax,cl
c001d4ec:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d4f3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d4f6:	89 f7                	mov    edi,esi
c001d4f8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d500:	0f 85 74 01 00 00    	jne    c001d67a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d506:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d50c:	85 ed                	test   ebp,ebp
c001d50e:	74 1b                	je     c001d52b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	55                   	push   ebp
c001d514:	e8 9b c1 ff ff       	call   c00196b4 <EnvVarContainer::~EnvVarContainer()>
c001d519:	59                   	pop    ecx
c001d51a:	5e                   	pop    esi
c001d51b:	6a 0c                	push   0xc
c001d51d:	55                   	push   ebp
c001d51e:	e8 2a 52 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c001d523:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	89 f7                	mov    edi,esi
c001d52b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d531:	85 c0                	test   eax,eax
c001d533:	0f 84 aa 00 00 00    	je     c001d5e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d539:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d53c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d540:	31 c9                	xor    ecx,ecx
c001d542:	eb 10                	jmp    c001d554 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d544:	41                   	inc    ecx
c001d545:	83 f9 10             	cmp    ecx,0x10
c001d548:	0f 84 95 00 00 00    	je     c001d5e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d54e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d554:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d55b:	d3 fa                	sar    edx,cl
c001d55d:	83 e2 01             	and    edx,0x1
c001d560:	74 e2                	je     c001d544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d562:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d565:	01 ca                	add    edx,ecx
c001d567:	89 d5                	mov    ebp,edx
c001d569:	c1 e5 05             	shl    ebp,0x5
c001d56c:	01 ea                	add    edx,ebp
c001d56e:	01 d0                	add    eax,edx
c001d570:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d576:	83 fd 07             	cmp    ebp,0x7
c001d579:	75 c9                	jne    c001d544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d57b:	05 40 02 00 00       	add    eax,0x240
c001d580:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d583:	83 fd ff             	cmp    ebp,0xffffffff
c001d586:	0f 8c 08 01 00 00    	jl     c001d694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d58c:	0f 84 b9 01 00 00    	je     c001d74b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d592:	85 ed                	test   ebp,ebp
c001d594:	0f 84 a0 01 00 00    	je     c001d73a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d59a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d59c:	75 a6                	jne    c001d544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d59e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d5a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5a8:	01 d0                	add    eax,edx
c001d5aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d5ae:	83 ec 0c             	sub    esp,0xc
c001d5b1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d5b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5ba:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5c0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d5c7:	50                   	push   eax
c001d5c8:	e8 21 fe ff ff       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d5d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5d7:	89 f7                	mov    edi,esi
c001d5d9:	41                   	inc    ecx
c001d5da:	83 f9 10             	cmp    ecx,0x10
c001d5dd:	0f 85 6b ff ff ff    	jne    c001d54e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d5e3:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d5e9:	85 c0                	test   eax,eax
c001d5eb:	74 5d                	je     c001d64a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d5ed:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d5f3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d5f9:	74 4f                	je     c001d64a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	68 48 df 02 c0       	push   0xc002df48
c001d603:	e8 c6 9e 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d608:	c7 04 24 48 df 02 c0 	mov    DWORD PTR [esp],0xc002df48
c001d60f:	89 c7                	mov    edi,eax
c001d611:	e8 c0 9e 00 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	84 c0                	test   al,al
c001d61b:	0f 84 e4 00 00 00    	je     c001d705 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d621:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d624:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d62a:	85 d2                	test   edx,edx
c001d62c:	74 0f                	je     c001d63d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d62e:	83 ec 0c             	sub    esp,0xc
c001d631:	8b 02                	mov    eax,DWORD PTR [edx]
c001d633:	52                   	push   edx
c001d634:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d637:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d63a:	83 c4 10             	add    esp,0x10
c001d63d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d647:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d64a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d650:	85 db                	test   ebx,ebx
c001d652:	74 16                	je     c001d66a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	53                   	push   ebx
c001d658:	e8 3f 47 ff ff       	call   c0011d9c <VAS::~VAS()>
c001d65d:	58                   	pop    eax
c001d65e:	5a                   	pop    edx
c001d65f:	6a 10                	push   0x10
c001d661:	53                   	push   ebx
c001d662:	e8 e6 50 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c001d667:	83 c4 10             	add    esp,0x10
c001d66a:	83 ec 0c             	sub    esp,0xc
c001d66d:	68 4f a8 02 c0       	push   0xc002a84f
c001d672:	e8 b6 51 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	83 ec 08             	sub    esp,0x8
c001d67d:	68 3f 07 00 00       	push   0x73f
c001d682:	68 5d a8 02 c0       	push   0xc002a85d
c001d687:	e8 a1 51 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d68c:	83 c4 2c             	add    esp,0x2c
c001d68f:	5b                   	pop    ebx
c001d690:	5e                   	pop    esi
c001d691:	5f                   	pop    edi
c001d692:	5d                   	pop    ebp
c001d693:	c3                   	ret    
c001d694:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d698:	83 ec 0c             	sub    esp,0xc
c001d69b:	68 38 ab 02 c0       	push   0xc002ab38
c001d6a0:	e8 a2 c2 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001d6a5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d6a8:	83 c4 10             	add    esp,0x10
c001d6ab:	89 f7                	mov    edi,esi
c001d6ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6b1:	e9 8e fe ff ff       	jmp    c001d544 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d6b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6bc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d6c2:	75 1c                	jne    c001d6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	68 a0 ab 02 c0       	push   0xc002aba0
c001d6cc:	e8 5c 51 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d6d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d6d8:	e8 8f fb ff ff       	call   c001d26c <blockTask(TaskState)>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	83 ec 08             	sub    esp,0x8
c001d6e3:	56                   	push   esi
c001d6e4:	68 48 df 02 c0       	push   0xc002df48
c001d6e9:	e8 b2 9e 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6ee:	c7 04 24 48 df 02 c0 	mov    DWORD PTR [esp],0xc002df48
c001d6f5:	e8 d4 9d 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	39 f8                	cmp    eax,edi
c001d6ff:	0f 84 1c ff ff ff    	je     c001d621 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d705:	83 ec 0c             	sub    esp,0xc
c001d708:	68 48 df 02 c0       	push   0xc002df48
c001d70d:	e8 bc 9d 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d712:	c7 04 24 48 df 02 c0 	mov    DWORD PTR [esp],0xc002df48
c001d719:	89 c6                	mov    esi,eax
c001d71b:	e8 d2 9d 00 00       	call   c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d720:	83 c4 10             	add    esp,0x10
c001d723:	39 f3                	cmp    ebx,esi
c001d725:	74 b9                	je     c001d6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d727:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d72a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d72d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d733:	75 ab                	jne    c001d6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d735:	e9 7c ff ff ff       	jmp    c001d6b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d73a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d73e:	83 ec 0c             	sub    esp,0xc
c001d741:	68 6c ab 02 c0       	push   0xc002ab6c
c001d746:	e9 55 ff ff ff       	jmp    c001d6a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d74b:	8b 36                	mov    esi,DWORD PTR [esi]
c001d74d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d751:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d754:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d757:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d75d:	01 d7                	add    edi,edx
c001d75f:	89 f8                	mov    eax,edi
c001d761:	e9 44 fe ff ff       	jmp    c001d5aa <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d766 <cleanerTaskFunction(void*)>:
c001d766:	53                   	push   ebx
c001d767:	83 ec 08             	sub    esp,0x8
c001d76a:	e8 69 f6 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d76f:	e8 62 f6 ff ff       	call   c001cdd6 <lockScheduler()>
c001d774:	80 3d 0c df 02 c0 00 	cmp    BYTE PTR ds:0xc002df0c,0x0
c001d77b:	0f 85 8e 00 00 00    	jne    c001d80f <cleanerTaskFunction(void*)+0xa9>
c001d781:	83 ec 0c             	sub    esp,0xc
c001d784:	6a 02                	push   0x2
c001d786:	e8 9f fa ff ff       	call   c001d22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d78b:	83 c4 10             	add    esp,0x10
c001d78e:	c6 05 0c df 02 c0 00 	mov    BYTE PTR ds:0xc002df0c,0x0
c001d795:	e8 63 f6 ff ff       	call   c001cdfd <lockStuff()>
c001d79a:	e8 37 f6 ff ff       	call   c001cdd6 <lockScheduler()>
c001d79f:	83 ec 0c             	sub    esp,0xc
c001d7a2:	68 30 df 02 c0       	push   0xc002df30
c001d7a7:	e8 2a 9d 00 00       	call   c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7ac:	83 c4 10             	add    esp,0x10
c001d7af:	84 c0                	test   al,al
c001d7b1:	75 40                	jne    c001d7f3 <cleanerTaskFunction(void*)+0x8d>
c001d7b3:	83 ec 0c             	sub    esp,0xc
c001d7b6:	68 30 df 02 c0       	push   0xc002df30
c001d7bb:	e8 0e 9d 00 00       	call   c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d7c0:	c7 04 24 30 df 02 c0 	mov    DWORD PTR [esp],0xc002df30
c001d7c7:	89 c3                	mov    ebx,eax
c001d7c9:	e8 24 9d 00 00       	call   c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d7ce:	c7 04 24 73 a8 02 c0 	mov    DWORD PTR [esp],0xc002a873
c001d7d5:	e8 53 50 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d7da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7dd:	e8 bb fc ff ff       	call   c001d49d <cleanupTerminatedTask(ThreadControlBlock*)>
c001d7e2:	c7 04 24 8c a8 02 c0 	mov    DWORD PTR [esp],0xc002a88c
c001d7e9:	e8 3f 50 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	eb ac                	jmp    c001d79f <cleanerTaskFunction(void*)+0x39>
c001d7f3:	e8 e0 f5 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d7f8:	e8 9a f9 ff ff       	call   c001d197 <unlockStuff()>
c001d7fd:	e8 d4 f5 ff ff       	call   c001cdd6 <lockScheduler()>
c001d802:	80 3d 0c df 02 c0 00 	cmp    BYTE PTR ds:0xc002df0c,0x0
c001d809:	0f 84 72 ff ff ff    	je     c001d781 <cleanerTaskFunction(void*)+0x1b>
c001d80f:	e8 c4 f5 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d814:	e9 75 ff ff ff       	jmp    c001d78e <cleanerTaskFunction(void*)+0x28>

c001d819 <terminateTask(int)>:
c001d819:	83 ec 14             	sub    esp,0x14
c001d81c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d821:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d824:	83 c0 0c             	add    eax,0xc
c001d827:	50                   	push   eax
c001d828:	68 c8 ab 02 c0       	push   0xc002abc8
c001d82d:	e8 fb 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d832:	e8 c6 f5 ff ff       	call   c001cdfd <lockStuff()>
c001d837:	e8 9a f5 ff ff       	call   c001cdd6 <lockScheduler()>
c001d83c:	c7 04 24 9f a8 02 c0 	mov    DWORD PTR [esp],0xc002a89f
c001d843:	e8 e5 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d848:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d84c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d851:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d854:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d859:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d85c:	5a                   	pop    edx
c001d85d:	59                   	pop    ecx
c001d85e:	50                   	push   eax
c001d85f:	68 30 df 02 c0       	push   0xc002df30
c001d864:	e8 37 9d 00 00       	call   c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d86e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d875:	c7 04 24 b9 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8b9
c001d87c:	e8 ac 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001d889:	85 c0                	test   eax,eax
c001d88b:	74 5a                	je     c001d8e7 <terminateTask(int)+0xce>
c001d88d:	83 ec 0c             	sub    esp,0xc
c001d890:	68 d3 a8 02 c0       	push   0xc002a8d3
c001d895:	e8 93 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d89a:	58                   	pop    eax
c001d89b:	c6 05 0c df 02 c0 01 	mov    BYTE PTR ds:0xc002df0c,0x1
c001d8a2:	ff 35 08 df 02 c0    	push   DWORD PTR ds:0xc002df08
c001d8a8:	e8 41 fb ff ff       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001d8ad:	c7 04 24 ed a8 02 c0 	mov    DWORD PTR [esp],0xc002a8ed
c001d8b4:	e8 74 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	e8 17 f5 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d8c1:	e8 d1 f8 ff ff       	call   c001d197 <unlockStuff()>
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	68 25 a9 02 c0       	push   0xc002a925
c001d8ce:	e8 5a 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d8d3:	83 c4 10             	add    esp,0x10
c001d8d6:	e8 fb f4 ff ff       	call   c001cdd6 <lockScheduler()>
c001d8db:	e8 32 f8 ff ff       	call   c001d112 <schedule()>
c001d8e0:	e8 f3 f4 ff ff       	call   c001cdd8 <unlockScheduler()>
c001d8e5:	eb ef                	jmp    c001d8d6 <terminateTask(int)+0xbd>
c001d8e7:	83 ec 0c             	sub    esp,0xc
c001d8ea:	68 07 a9 02 c0       	push   0xc002a907
c001d8ef:	e8 39 4f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001d8f4:	83 c4 10             	add    esp,0x10
c001d8f7:	eb c3                	jmp    c001d8bc <terminateTask(int)+0xa3>

c001d8f9 <Thr::terminateFromIRQ(int)>:
c001d8f9:	83 ec 18             	sub    esp,0x18
c001d8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d900:	e8 14 ff ff ff       	call   c001d819 <terminateTask(int)>
c001d905:	90                   	nop

c001d906 <Semaphore::release()>:
c001d906:	83 ec 0c             	sub    esp,0xc
c001d909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d90d:	e8 eb f4 ff ff       	call   c001cdfd <lockStuff()>
c001d912:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d915:	85 d2                	test   edx,edx
c001d917:	74 1a                	je     c001d933 <Semaphore::release()+0x2d>
c001d919:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d91c:	83 ec 0c             	sub    esp,0xc
c001d91f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d922:	52                   	push   edx
c001d923:	e8 c6 fa ff ff       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001d928:	83 c4 10             	add    esp,0x10
c001d92b:	83 c4 0c             	add    esp,0xc
c001d92e:	e9 64 f8 ff ff       	jmp    c001d197 <unlockStuff()>
c001d933:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d936:	83 c4 0c             	add    esp,0xc
c001d939:	e9 59 f8 ff ff       	jmp    c001d197 <unlockStuff()>

c001d93e <__static_initialization_and_destruction_0(int, int)>:
c001d93e:	83 ec 0c             	sub    esp,0xc
c001d941:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d946:	0f 85 88 00 00 00    	jne    c001d9d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d94c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d954:	75 7e                	jne    c001d9d4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d956:	83 ec 0c             	sub    esp,0xc
c001d959:	68 48 df 02 c0       	push   0xc002df48
c001d95e:	e8 ed 9d 00 00       	call   c0027750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d963:	83 c4 10             	add    esp,0x10
c001d966:	83 ec 04             	sub    esp,0x4
c001d969:	68 28 b9 02 c0       	push   0xc002b928
c001d96e:	68 48 df 02 c0       	push   0xc002df48
c001d973:	68 10 77 02 c0       	push   0xc0027710
c001d978:	e8 4a 4d ff ff       	call   c00126c7 <__cxa_atexit>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	83 ec 0c             	sub    esp,0xc
c001d983:	68 3c df 02 c0       	push   0xc002df3c
c001d988:	e8 c3 9d 00 00       	call   c0027750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d98d:	83 c4 10             	add    esp,0x10
c001d990:	83 ec 04             	sub    esp,0x4
c001d993:	68 28 b9 02 c0       	push   0xc002b928
c001d998:	68 3c df 02 c0       	push   0xc002df3c
c001d99d:	68 10 77 02 c0       	push   0xc0027710
c001d9a2:	e8 20 4d ff ff       	call   c00126c7 <__cxa_atexit>
c001d9a7:	83 c4 10             	add    esp,0x10
c001d9aa:	83 ec 0c             	sub    esp,0xc
c001d9ad:	68 30 df 02 c0       	push   0xc002df30
c001d9b2:	e8 99 9d 00 00       	call   c0027750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d9b7:	83 c4 10             	add    esp,0x10
c001d9ba:	83 ec 04             	sub    esp,0x4
c001d9bd:	68 28 b9 02 c0       	push   0xc002b928
c001d9c2:	68 30 df 02 c0       	push   0xc002df30
c001d9c7:	68 10 77 02 c0       	push   0xc0027710
c001d9cc:	e8 f6 4c ff ff       	call   c00126c7 <__cxa_atexit>
c001d9d1:	83 c4 10             	add    esp,0x10
c001d9d4:	90                   	nop
c001d9d5:	83 c4 0c             	add    esp,0xc
c001d9d8:	c3                   	ret    

c001d9d9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	83 ec 08             	sub    esp,0x8
c001d9df:	68 ff ff 00 00       	push   0xffff
c001d9e4:	6a 01                	push   0x1
c001d9e6:	e8 53 ff ff ff       	call   c001d93e <__static_initialization_and_destruction_0(int, int)>
c001d9eb:	83 c4 10             	add    esp,0x10
c001d9ee:	83 c4 0c             	add    esp,0xc
c001d9f1:	c3                   	ret    

c001d9f2 <Vm::inbv(unsigned short)>:
c001d9f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9f6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d9fb:	75 06                	jne    c001da03 <Vm::inbv(unsigned short)+0x11>
c001d9fd:	a0 8c df 02 c0       	mov    al,ds:0xc002df8c
c001da02:	c3                   	ret    
c001da03:	ec                   	in     al,dx
c001da04:	c3                   	ret    

c001da05 <Vm::outbv(unsigned short, unsigned char)>:
c001da05:	53                   	push   ebx
c001da06:	83 ec 08             	sub    esp,0x8
c001da09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001da11:	66 81 fa fe fe       	cmp    dx,0xfefe
c001da16:	75 38                	jne    c001da50 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001da18:	0f b6 c3             	movzx  eax,bl
c001da1b:	51                   	push   ecx
c001da1c:	51                   	push   ecx
c001da1d:	50                   	push   eax
c001da1e:	68 e7 ab 02 c0       	push   0xc002abe7
c001da23:	e8 05 4e ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001da28:	8b 15 8c df 02 c0    	mov    edx,DWORD PTR ds:0xc002df8c
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	8d 42 01             	lea    eax,[edx+0x1]
c001da34:	88 9a a0 df 02 c0    	mov    BYTE PTR [edx-0x3ffd2060],bl
c001da3a:	a3 8c df 02 c0       	mov    ds:0xc002df8c,eax
c001da3f:	83 f8 20             	cmp    eax,0x20
c001da42:	75 0f                	jne    c001da53 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001da44:	c7 05 8c df 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002df8c,0x1f
c001da4e:	eb 03                	jmp    c001da53 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001da50:	88 d8                	mov    al,bl
c001da52:	ee                   	out    dx,al
c001da53:	83 c4 08             	add    esp,0x8
c001da56:	5b                   	pop    ebx
c001da57:	c3                   	ret    

c001da58 <Vm::realToLinear(unsigned short, unsigned short)>:
c001da58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001da5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001da62:	c1 e0 04             	shl    eax,0x4
c001da65:	01 d0                	add    eax,edx
c001da67:	c3                   	ret    

c001da68 <Vm::getSegment(unsigned int)>:
c001da68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da6c:	c1 e8 10             	shr    eax,0x10
c001da6f:	c3                   	ret    

c001da70 <Vm::getOffset(unsigned int)>:
c001da70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da74:	c3                   	ret    

c001da75 <Vm::mainloop2()>:
c001da75:	83 ec 0c             	sub    esp,0xc
c001da78:	e8 59 f3 ff ff       	call   c001cdd6 <lockScheduler()>
c001da7d:	83 ec 0c             	sub    esp,0xc
c001da80:	c6 05 85 df 02 c0 01 	mov    BYTE PTR ds:0xc002df85,0x1
c001da87:	6a 02                	push   0x2
c001da89:	e8 9c f7 ff ff       	call   c001d22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da93:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001da97:	52                   	push   edx
c001da98:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001da9c:	52                   	push   edx
c001da9d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001daa1:	52                   	push   edx
c001daa2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001daa6:	50                   	push   eax
c001daa7:	e8 03 28 fe ff       	call   c00002af <goToVM86>
c001daac:	83 c4 2c             	add    esp,0x2c
c001daaf:	c3                   	ret    

c001dab0 <Vm::mainVm8086Loop(void*)>:
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	e8 20 f3 ff ff       	call   c001cdd8 <unlockScheduler()>
c001dab8:	83 c4 0c             	add    esp,0xc
c001dabb:	eb b8                	jmp    c001da75 <Vm::mainloop2()>

c001dabd <Vm::mainloop3(unsigned long)>:
c001dabd:	53                   	push   ebx
c001dabe:	83 ec 08             	sub    esp,0x8
c001dac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dac5:	e8 0c f3 ff ff       	call   c001cdd6 <lockScheduler()>
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	89 1d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ebx
c001dad3:	6a 02                	push   0x2
c001dad5:	c6 05 84 df 02 c0 01 	mov    BYTE PTR ds:0xc002df84,0x1
c001dadc:	e8 49 f7 ff ff       	call   c001d22a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dae1:	83 c4 18             	add    esp,0x18
c001dae4:	5b                   	pop    ebx
c001dae5:	eb 8e                	jmp    c001da75 <Vm::mainloop2()>

c001dae7 <Vm::initialise8086()>:
c001dae7:	83 ec 0c             	sub    esp,0xc
c001daea:	68 80 00 00 00       	push   0x80
c001daef:	6a 00                	push   0x0
c001daf1:	68 b0 da 01 c0       	push   0xc001dab0
c001daf6:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c001dafc:	e8 07 f4 ff ff       	call   c001cf08 <Process::createThread(void (*)(void*), void*, int)>
c001db01:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001db08:	a3 88 df 02 c0       	mov    ds:0xc002df88,eax
c001db0d:	68 00 01 00 00       	push   0x100
c001db12:	a1 54 df 02 c0       	mov    eax,ds:0xc002df54
c001db17:	6a 00                	push   0x0
c001db19:	6a 00                	push   0x0
c001db1b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001db21:	e8 d6 46 ff ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001db26:	83 c4 2c             	add    esp,0x2c
c001db29:	c3                   	ret    

c001db2a <Vm::finish8086()>:
c001db2a:	53                   	push   ebx
c001db2b:	83 ec 08             	sub    esp,0x8
c001db2e:	e8 a3 f2 ff ff       	call   c001cdd6 <lockScheduler()>
c001db33:	80 3d 84 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df84,0x0
c001db3a:	75 0c                	jne    c001db48 <Vm::finish8086()+0x1e>
c001db3c:	e8 d1 f5 ff ff       	call   c001d112 <schedule()>
c001db41:	e8 92 f2 ff ff       	call   c001cdd8 <unlockScheduler()>
c001db46:	eb e6                	jmp    c001db2e <Vm::finish8086()+0x4>
c001db48:	83 ec 0c             	sub    esp,0xc
c001db4b:	8b 1d 80 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df80
c001db51:	ff 35 88 df 02 c0    	push   DWORD PTR ds:0xc002df88
c001db57:	c6 05 84 df 02 c0 00 	mov    BYTE PTR ds:0xc002df84,0x0
c001db5e:	e8 8b f8 ff ff       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001db63:	e8 70 f2 ff ff       	call   c001cdd8 <unlockScheduler()>
c001db68:	89 d8                	mov    eax,ebx
c001db6a:	83 c4 18             	add    esp,0x18
c001db6d:	5b                   	pop    ebx
c001db6e:	c3                   	ret    

c001db6f <Vm::getOutput8086(unsigned char*)>:
c001db6f:	83 ec 10             	sub    esp,0x10
c001db72:	ff 35 8c df 02 c0    	push   DWORD PTR ds:0xc002df8c
c001db78:	68 a0 df 02 c0       	push   0xc002dfa0
c001db7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db81:	e8 cf 2a fe ff       	call   c0000655 <memcpy>
c001db86:	a1 8c df 02 c0       	mov    eax,ds:0xc002df8c
c001db8b:	c7 05 8c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df8c,0x0
c001db95:	83 c4 1c             	add    esp,0x1c
c001db98:	c3                   	ret    

c001db99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001db99:	55                   	push   ebp
c001db9a:	57                   	push   edi
c001db9b:	56                   	push   esi
c001db9c:	53                   	push   ebx
c001db9d:	83 ec 2c             	sub    esp,0x2c
c001dba0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dba4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001dba8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001dbac:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dbb0:	e8 21 f2 ff ff       	call   c001cdd6 <lockScheduler()>
c001dbb5:	a0 85 df 02 c0       	mov    al,ds:0xc002df85
c001dbba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbbe:	84 c0                	test   al,al
c001dbc0:	75 0c                	jne    c001dbce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001dbc2:	e8 4b f5 ff ff       	call   c001d112 <schedule()>
c001dbc7:	e8 0c f2 ff ff       	call   c001cdd8 <unlockScheduler()>
c001dbcc:	eb e2                	jmp    c001dbb0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001dbce:	a1 88 df 02 c0       	mov    eax,ds:0xc002df88
c001dbd3:	c7 05 8c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df8c,0x0
c001dbdd:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001dbe1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001dbe5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001dbe9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001dbed:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001dbf1:	50                   	push   eax
c001dbf2:	6a 20                	push   0x20
c001dbf4:	6a 00                	push   0x0
c001dbf6:	68 a0 df 02 c0       	push   0xc002dfa0
c001dbfb:	e8 8b 2a fe ff       	call   c000068b <memset>
c001dc00:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dc07:	e8 c8 18 ff ff       	call   c000f4d4 <malloc>
c001dc0c:	83 c4 0c             	add    esp,0xc
c001dc0f:	89 c7                	mov    edi,eax
c001dc11:	ff 35 54 df 02 c0    	push   DWORD PTR ds:0xc002df54
c001dc17:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc1b:	50                   	push   eax
c001dc1c:	e8 3b 51 ff ff       	call   c0012d5c <File::File(char const*, Process*)>
c001dc21:	83 c4 10             	add    esp,0x10
c001dc24:	85 ff                	test   edi,edi
c001dc26:	75 0a                	jne    c001dc32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	68 03 ac 02 c0       	push   0xc002ac03
c001dc30:	eb 27                	jmp    c001dc59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dc32:	50                   	push   eax
c001dc33:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dc37:	50                   	push   eax
c001dc38:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dc3c:	50                   	push   eax
c001dc3d:	57                   	push   edi
c001dc3e:	e8 29 54 ff ff       	call   c001306c <File::stat(unsigned long long*, bool*)>
c001dc43:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dc48:	83 c4 10             	add    esp,0x10
c001dc4b:	89 e8                	mov    eax,ebp
c001dc4d:	84 c0                	test   al,al
c001dc4f:	74 19                	je     c001dc6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dc51:	83 ec 0c             	sub    esp,0xc
c001dc54:	68 17 ac 02 c0       	push   0xc002ac17
c001dc59:	e8 e9 bc ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001dc5e:	31 ed                	xor    ebp,ebp
c001dc60:	e8 73 f1 ff ff       	call   c001cdd8 <unlockScheduler()>
c001dc65:	83 c4 10             	add    esp,0x10
c001dc68:	eb 75                	jmp    c001dcdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dc6a:	50                   	push   eax
c001dc6b:	50                   	push   eax
c001dc6c:	6a 01                	push   0x1
c001dc6e:	57                   	push   edi
c001dc6f:	e8 4c 51 ff ff       	call   c0012dc0 <File::open(FileOpenMode)>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	85 c0                	test   eax,eax
c001dc79:	74 17                	je     c001dc92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dc7b:	83 ec 0c             	sub    esp,0xc
c001dc7e:	68 30 ac 02 c0       	push   0xc002ac30
c001dc83:	e8 bf bc ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001dc88:	e8 4b f1 ff ff       	call   c001cdd8 <unlockScheduler()>
c001dc8d:	83 c4 10             	add    esp,0x10
c001dc90:	eb 4d                	jmp    c001dcdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dc92:	0f b7 f6             	movzx  esi,si
c001dc95:	50                   	push   eax
c001dc96:	0f b7 db             	movzx  ebx,bx
c001dc99:	50                   	push   eax
c001dc9a:	56                   	push   esi
c001dc9b:	53                   	push   ebx
c001dc9c:	e8 b7 fd ff ff       	call   c001da58 <Vm::realToLinear(unsigned short, unsigned short)>
c001dca1:	5a                   	pop    edx
c001dca2:	8b 17                	mov    edx,DWORD PTR [edi]
c001dca4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dca8:	51                   	push   ecx
c001dca9:	50                   	push   eax
c001dcaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dcae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dcb2:	57                   	push   edi
c001dcb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dcb6:	83 c4 14             	add    esp,0x14
c001dcb9:	57                   	push   edi
c001dcba:	e8 5f 51 ff ff       	call   c0012e1e <File::close()>
c001dcbf:	c6 05 85 df 02 c0 00 	mov    BYTE PTR ds:0xc002df85,0x0
c001dcc6:	e8 0d f1 ff ff       	call   c001cdd8 <unlockScheduler()>
c001dccb:	59                   	pop    ecx
c001dccc:	ff 35 88 df 02 c0    	push   DWORD PTR ds:0xc002df88
c001dcd2:	e8 17 f7 ff ff       	call   c001d3ee <unblockTask(ThreadControlBlock*)>
c001dcd7:	83 c4 10             	add    esp,0x10
c001dcda:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dcdf:	83 c4 2c             	add    esp,0x2c
c001dce2:	89 e8                	mov    eax,ebp
c001dce4:	5b                   	pop    ebx
c001dce5:	5e                   	pop    esi
c001dce6:	5f                   	pop    edi
c001dce7:	5d                   	pop    ebp
c001dce8:	c3                   	ret    

c001dce9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dce9:	57                   	push   edi
c001dcea:	56                   	push   esi
c001dceb:	53                   	push   ebx
c001dcec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dcf8:	83 e8 06             	sub    eax,0x6
c001dcfb:	0f b7 c0             	movzx  eax,ax
c001dcfe:	50                   	push   eax
c001dcff:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dd04:	50                   	push   eax
c001dd05:	e8 4e fd ff ff       	call   c001da58 <Vm::realToLinear(unsigned short, unsigned short)>
c001dd0a:	5a                   	pop    edx
c001dd0b:	5e                   	pop    esi
c001dd0c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dd0f:	8d 56 fa             	lea    edx,[esi-0x6]
c001dd12:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dd18:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dd1b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dd1e:	83 c2 02             	add    edx,0x2
c001dd21:	66 89 10             	mov    WORD PTR [eax],dx
c001dd24:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dd27:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dd2b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dd2e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dd32:	89 d6                	mov    esi,edx
c001dd34:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dd3a:	66 81 e6 ff fd       	and    si,0xfdff
c001dd3f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dd43:	74 07                	je     c001dd4c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dd45:	89 d6                	mov    esi,edx
c001dd47:	66 81 ce 00 02       	or     si,0x200
c001dd4c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd55:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dd59:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dd61:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dd64:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dd6c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd6f:	5b                   	pop    ebx
c001dd70:	5e                   	pop    esi
c001dd71:	5f                   	pop    edi
c001dd72:	c3                   	ret    

c001dd73 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dd73:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd78:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd7d:	c1 e0 04             	shl    eax,0x4
c001dd80:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dd83:	c3                   	ret    

c001dd84 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dd84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd89:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd8e:	c1 e0 04             	shl    eax,0x4
c001dd91:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dd95:	c3                   	ret    

c001dd96 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dd96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dda0:	c1 e0 04             	shl    eax,0x4
c001dda3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dda6:	c3                   	ret    

c001dda7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dda7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ddac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ddb1:	c1 e0 04             	shl    eax,0x4
c001ddb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddb8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ddbb:	c3                   	ret    

c001ddbc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ddbc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ddc1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ddc6:	c1 e0 04             	shl    eax,0x4
c001ddc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddcd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ddd1:	c3                   	ret    

c001ddd2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ddd2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ddd7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dddc:	c1 e0 04             	shl    eax,0x4
c001dddf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dde3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dde6:	c3                   	ret    

c001dde7 <Vm::faultHandler(regs*)>:
c001dde7:	55                   	push   ebp
c001dde8:	57                   	push   edi
c001dde9:	56                   	push   esi
c001ddea:	53                   	push   ebx
c001ddeb:	83 ec 1c             	sub    esp,0x1c
c001ddee:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ddf2:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ddf5:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ddf8:	0f b7 c1             	movzx  eax,cx
c001ddfb:	50                   	push   eax
c001ddfc:	0f b7 c3             	movzx  eax,bx
c001ddff:	c1 e3 04             	shl    ebx,0x4
c001de02:	50                   	push   eax
c001de03:	e8 50 fc ff ff       	call   c001da58 <Vm::realToLinear(unsigned short, unsigned short)>
c001de08:	5a                   	pop    edx
c001de09:	89 c5                	mov    ebp,eax
c001de0b:	5e                   	pop    esi
c001de0c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001de10:	50                   	push   eax
c001de11:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001de15:	50                   	push   eax
c001de16:	e8 3d fc ff ff       	call   c001da58 <Vm::realToLinear(unsigned short, unsigned short)>
c001de1b:	01 cb                	add    ebx,ecx
c001de1d:	89 c6                	mov    esi,eax
c001de1f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001de23:	50                   	push   eax
c001de24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de28:	50                   	push   eax
c001de29:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001de2d:	50                   	push   eax
c001de2e:	55                   	push   ebp
c001de2f:	53                   	push   ebx
c001de30:	b3 06                	mov    bl,0x6
c001de32:	68 49 ac 02 c0       	push   0xc002ac49
c001de37:	e8 f1 49 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001de3c:	83 c4 20             	add    esp,0x20
c001de3f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001de44:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001de49:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001de4d:	3c 9d                	cmp    al,0x9d
c001de4f:	0f 84 d7 02 00 00    	je     c001e12c <Vm::faultHandler(regs*)+0x345>
c001de55:	0f 87 a3 00 00 00    	ja     c001defe <Vm::faultHandler(regs*)+0x117>
c001de5b:	3c 66                	cmp    al,0x66
c001de5d:	0f 84 15 02 00 00    	je     c001e078 <Vm::faultHandler(regs*)+0x291>
c001de63:	77 5f                	ja     c001dec4 <Vm::faultHandler(regs*)+0xdd>
c001de65:	3c 36                	cmp    al,0x36
c001de67:	0f 84 f1 01 00 00    	je     c001e05e <Vm::faultHandler(regs*)+0x277>
c001de6d:	77 28                	ja     c001de97 <Vm::faultHandler(regs*)+0xb0>
c001de6f:	3c 26                	cmp    al,0x26
c001de71:	0f 84 99 01 00 00    	je     c001e010 <Vm::faultHandler(regs*)+0x229>
c001de77:	3c 2e                	cmp    al,0x2e
c001de79:	0f 85 3b 07 00 00    	jne    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001de7f:	83 ec 0c             	sub    esp,0xc
c001de82:	31 db                	xor    ebx,ebx
c001de84:	68 5e ac 02 c0       	push   0xc002ac5e
c001de89:	e8 9f 49 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001de8e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	45                   	inc    ebp
c001de95:	eb b2                	jmp    c001de49 <Vm::faultHandler(regs*)+0x62>
c001de97:	3c 64                	cmp    al,0x64
c001de99:	0f 84 8b 01 00 00    	je     c001e02a <Vm::faultHandler(regs*)+0x243>
c001de9f:	0f 87 9f 01 00 00    	ja     c001e044 <Vm::faultHandler(regs*)+0x25d>
c001dea5:	3c 3e                	cmp    al,0x3e
c001dea7:	0f 85 0d 07 00 00    	jne    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	b3 01                	mov    bl,0x1
c001deb2:	68 62 ac 02 c0       	push   0xc002ac62
c001deb7:	e8 71 49 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001debc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001debf:	83 c4 10             	add    esp,0x10
c001dec2:	eb d0                	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001dec4:	3c 6d                	cmp    al,0x6d
c001dec6:	0f 84 af 03 00 00    	je     c001e27b <Vm::faultHandler(regs*)+0x494>
c001decc:	77 15                	ja     c001dee3 <Vm::faultHandler(regs*)+0xfc>
c001dece:	3c 67                	cmp    al,0x67
c001ded0:	0f 84 bf 01 00 00    	je     c001e095 <Vm::faultHandler(regs*)+0x2ae>
c001ded6:	3c 6c                	cmp    al,0x6c
c001ded8:	0f 84 3f 03 00 00    	je     c001e21d <Vm::faultHandler(regs*)+0x436>
c001dede:	e9 d7 06 00 00       	jmp    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001dee3:	3c 6f                	cmp    al,0x6f
c001dee5:	0f 84 a4 04 00 00    	je     c001e38f <Vm::faultHandler(regs*)+0x5a8>
c001deeb:	0f 82 11 04 00 00    	jb     c001e302 <Vm::faultHandler(regs*)+0x51b>
c001def1:	3c 9c                	cmp    al,0x9c
c001def3:	0f 84 ba 01 00 00    	je     c001e0b3 <Vm::faultHandler(regs*)+0x2cc>
c001def9:	e9 bc 06 00 00       	jmp    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001defe:	3c ec                	cmp    al,0xec
c001df00:	0f 84 24 06 00 00    	je     c001e52a <Vm::faultHandler(regs*)+0x743>
c001df06:	0f 87 93 00 00 00    	ja     c001df9f <Vm::faultHandler(regs*)+0x1b8>
c001df0c:	3c e4                	cmp    al,0xe4
c001df0e:	0f 84 5c 05 00 00    	je     c001e470 <Vm::faultHandler(regs*)+0x689>
c001df14:	77 6a                	ja     c001df80 <Vm::faultHandler(regs*)+0x199>
c001df16:	3c cd                	cmp    al,0xcd
c001df18:	0f 84 7e 02 00 00    	je     c001e19c <Vm::faultHandler(regs*)+0x3b5>
c001df1e:	3c cf                	cmp    al,0xcf
c001df20:	0f 85 94 06 00 00    	jne    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	68 a6 ac 02 c0       	push   0xc002aca6
c001df2e:	e8 fa 48 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001df33:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001df36:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001df39:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001df3d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001df40:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001df44:	0d 00 02 02 00       	or     eax,0x20200
c001df49:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001df4c:	56                   	push   esi
c001df4d:	53                   	push   ebx
c001df4e:	52                   	push   edx
c001df4f:	68 ac ac 02 c0       	push   0xc002acac
c001df54:	e8 d4 48 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001df59:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001df5d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df63:	66 c1 e8 09          	shr    ax,0x9
c001df67:	83 e0 01             	and    eax,0x1
c001df6a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001df6d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001df70:	83 c0 06             	add    eax,0x6
c001df73:	25 ff ff 00 00       	and    eax,0xffff
c001df78:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001df7b:	e9 95 02 00 00       	jmp    c001e215 <Vm::faultHandler(regs*)+0x42e>
c001df80:	3c e6                	cmp    al,0xe6
c001df82:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001df86:	0f 84 4e 05 00 00    	je     c001e4da <Vm::faultHandler(regs*)+0x6f3>
c001df8c:	0f 82 0a 05 00 00    	jb     c001e49c <Vm::faultHandler(regs*)+0x6b5>
c001df92:	3c e7                	cmp    al,0xe7
c001df94:	0f 84 69 05 00 00    	je     c001e503 <Vm::faultHandler(regs*)+0x71c>
c001df9a:	e9 1b 06 00 00       	jmp    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001df9f:	3c ef                	cmp    al,0xef
c001dfa1:	0f 84 e6 05 00 00    	je     c001e58d <Vm::faultHandler(regs*)+0x7a6>
c001dfa7:	77 37                	ja     c001dfe0 <Vm::faultHandler(regs*)+0x1f9>
c001dfa9:	3c ed                	cmp    al,0xed
c001dfab:	0f 84 a3 05 00 00    	je     c001e554 <Vm::faultHandler(regs*)+0x76d>
c001dfb1:	3c ee                	cmp    al,0xee
c001dfb3:	0f 85 01 06 00 00    	jne    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001dfb9:	52                   	push   edx
c001dfba:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001dfbd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001dfc0:	68 47 ad 02 c0       	push   0xc002ad47
c001dfc5:	e8 63 48 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001dfca:	59                   	pop    ecx
c001dfcb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001dfcf:	5b                   	pop    ebx
c001dfd0:	50                   	push   eax
c001dfd1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001dfd5:	50                   	push   eax
c001dfd6:	e8 2a fa ff ff       	call   c001da05 <Vm::outbv(unsigned short, unsigned char)>
c001dfdb:	e9 a5 05 00 00       	jmp    c001e585 <Vm::faultHandler(regs*)+0x79e>
c001dfe0:	3c fa                	cmp    al,0xfa
c001dfe2:	0f 84 f7 01 00 00    	je     c001e1df <Vm::faultHandler(regs*)+0x3f8>
c001dfe8:	3c fb                	cmp    al,0xfb
c001dfea:	0f 84 0a 02 00 00    	je     c001e1fa <Vm::faultHandler(regs*)+0x413>
c001dff0:	3c f3                	cmp    al,0xf3
c001dff2:	0f 85 c2 05 00 00    	jne    c001e5ba <Vm::faultHandler(regs*)+0x7d3>
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	68 7f ac 02 c0       	push   0xc002ac7f
c001e000:	e8 28 48 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e005:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	e9 84 fe ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	b3 02                	mov    bl,0x2
c001e015:	68 5a ac 02 c0       	push   0xc002ac5a
c001e01a:	e8 0e 48 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e01f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	e9 6a fe ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e02a:	83 ec 0c             	sub    esp,0xc
c001e02d:	b3 03                	mov    bl,0x3
c001e02f:	68 66 ac 02 c0       	push   0xc002ac66
c001e034:	e8 f4 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e039:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e03c:	83 c4 10             	add    esp,0x10
c001e03f:	e9 50 fe ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	b3 04                	mov    bl,0x4
c001e049:	68 6a ac 02 c0       	push   0xc002ac6a
c001e04e:	e8 da 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e053:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	e9 36 fe ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e05e:	83 ec 0c             	sub    esp,0xc
c001e061:	b3 05                	mov    bl,0x5
c001e063:	68 6e ac 02 c0       	push   0xc002ac6e
c001e068:	e8 c0 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e06d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e070:	83 c4 10             	add    esp,0x10
c001e073:	e9 1c fe ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e078:	83 ec 0c             	sub    esp,0xc
c001e07b:	68 72 ac 02 c0       	push   0xc002ac72
c001e080:	e8 a8 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e085:	83 c4 10             	add    esp,0x10
c001e088:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e08b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e090:	e9 ff fd ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e095:	50                   	push   eax
c001e096:	50                   	push   eax
c001e097:	6a 01                	push   0x1
c001e099:	68 77 ac 02 c0       	push   0xc002ac77
c001e09e:	e8 8a 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e0a3:	83 c4 10             	add    esp,0x10
c001e0a6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e0a9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e0ae:	e9 e1 fd ff ff       	jmp    c001de94 <Vm::faultHandler(regs*)+0xad>
c001e0b3:	83 ec 0c             	sub    esp,0xc
c001e0b6:	68 85 ac 02 c0       	push   0xc002ac85
c001e0bb:	e8 6d 47 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e0c0:	83 c4 10             	add    esp,0x10
c001e0c3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e0c6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e0cb:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e0ce:	74 2f                	je     c001e0ff <Vm::faultHandler(regs*)+0x318>
c001e0d0:	83 ea 04             	sub    edx,0x4
c001e0d3:	25 ff 0d 00 00       	and    eax,0xdff
c001e0d8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e0de:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e0e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e0e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0ea:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e0ee:	0f 84 bf 04 00 00    	je     c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e0f4:	80 cc 02             	or     ah,0x2
c001e0f7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e0fa:	e9 b4 04 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e0ff:	83 ea 02             	sub    edx,0x2
c001e102:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e108:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e10b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e10f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e115:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e119:	74 05                	je     c001e120 <Vm::faultHandler(regs*)+0x339>
c001e11b:	80 cc 02             	or     ah,0x2
c001e11e:	eb 03                	jmp    c001e123 <Vm::faultHandler(regs*)+0x33c>
c001e120:	80 e4 fd             	and    ah,0xfd
c001e123:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e127:	e9 87 04 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e12c:	83 ec 0c             	sub    esp,0xc
c001e12f:	68 8c ac 02 c0       	push   0xc002ac8c
c001e134:	e8 f4 46 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e139:	83 c4 10             	add    esp,0x10
c001e13c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e141:	74 28                	je     c001e16b <Vm::faultHandler(regs*)+0x384>
c001e143:	8b 06                	mov    eax,DWORD PTR [esi]
c001e145:	25 ff 0d 00 00       	and    eax,0xdff
c001e14a:	0d 00 02 02 00       	or     eax,0x20200
c001e14f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e152:	8b 06                	mov    eax,DWORD PTR [esi]
c001e154:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e15a:	c1 e8 09             	shr    eax,0x9
c001e15d:	83 e0 01             	and    eax,0x1
c001e160:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e163:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e166:	83 c0 04             	add    eax,0x4
c001e169:	eb 24                	jmp    c001e18f <Vm::faultHandler(regs*)+0x3a8>
c001e16b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e16e:	0d 00 02 02 00       	or     eax,0x20200
c001e173:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e176:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e179:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e17f:	66 c1 e8 09          	shr    ax,0x9
c001e183:	83 e0 01             	and    eax,0x1
c001e186:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e189:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e18c:	83 c0 02             	add    eax,0x2
c001e18f:	25 ff ff 00 00       	and    eax,0xffff
c001e194:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e197:	e9 17 04 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e19c:	53                   	push   ebx
c001e19d:	53                   	push   ebx
c001e19e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1a2:	50                   	push   eax
c001e1a3:	68 92 ac 02 c0       	push   0xc002ac92
c001e1a8:	e8 80 46 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e1ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1b1:	83 c4 10             	add    esp,0x10
c001e1b4:	3c ee                	cmp    al,0xee
c001e1b6:	75 10                	jne    c001e1c8 <Vm::faultHandler(regs*)+0x3e1>
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e1be:	e8 fa f8 ff ff       	call   c001dabd <Vm::mainloop3(unsigned long)>
c001e1c3:	e9 c0 03 00 00       	jmp    c001e588 <Vm::faultHandler(regs*)+0x7a1>
c001e1c8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	53                   	push   ebx
c001e1d0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e1d4:	53                   	push   ebx
c001e1d5:	55                   	push   ebp
c001e1d6:	50                   	push   eax
c001e1d7:	57                   	push   edi
c001e1d8:	e8 0c fb ff ff       	call   c001dce9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e1dd:	eb 36                	jmp    c001e215 <Vm::faultHandler(regs*)+0x42e>
c001e1df:	83 ec 0c             	sub    esp,0xc
c001e1e2:	68 9c ac 02 c0       	push   0xc002ac9c
c001e1e7:	e8 41 46 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e1ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1f1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e1f5:	e9 8b 03 00 00       	jmp    c001e585 <Vm::faultHandler(regs*)+0x79e>
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	68 a1 ac 02 c0       	push   0xc002aca1
c001e202:	e8 26 46 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e210:	e9 70 03 00 00       	jmp    c001e585 <Vm::faultHandler(regs*)+0x79e>
c001e215:	83 c4 20             	add    esp,0x20
c001e218:	e9 99 03 00 00       	jmp    c001e5b6 <Vm::faultHandler(regs*)+0x7cf>
c001e21d:	83 ec 0c             	sub    esp,0xc
c001e220:	68 df ac 02 c0       	push   0xc002acdf
c001e225:	e8 03 46 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e22a:	83 c4 10             	add    esp,0x10
c001e22d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e230:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e235:	74 0d                	je     c001e244 <Vm::faultHandler(regs*)+0x45d>
c001e237:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e23e:	0f 87 9e 01 00 00    	ja     c001e3e2 <Vm::faultHandler(regs*)+0x5fb>
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e24b:	0f b7 db             	movzx  ebx,bx
c001e24e:	50                   	push   eax
c001e24f:	e8 9e f7 ff ff       	call   c001d9f2 <Vm::inbv(unsigned short)>
c001e254:	83 c4 0c             	add    esp,0xc
c001e257:	0f b6 c0             	movzx  eax,al
c001e25a:	50                   	push   eax
c001e25b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e25f:	50                   	push   eax
c001e260:	53                   	push   ebx
c001e261:	e8 41 fb ff ff       	call   c001dda7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e26c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e270:	74 03                	je     c001e275 <Vm::faultHandler(regs*)+0x48e>
c001e272:	48                   	dec    eax
c001e273:	eb 01                	jmp    c001e276 <Vm::faultHandler(regs*)+0x48f>
c001e275:	40                   	inc    eax
c001e276:	0f b7 c0             	movzx  eax,ax
c001e279:	eb 7f                	jmp    c001e2fa <Vm::faultHandler(regs*)+0x513>
c001e27b:	83 ec 0c             	sub    esp,0xc
c001e27e:	68 11 ad 02 c0       	push   0xc002ad11
c001e283:	e8 a5 45 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e288:	83 c4 10             	add    esp,0x10
c001e28b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e28e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e293:	74 0d                	je     c001e2a2 <Vm::faultHandler(regs*)+0x4bb>
c001e295:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e29c:	0f 87 40 01 00 00    	ja     c001e3e2 <Vm::faultHandler(regs*)+0x5fb>
c001e2a2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e2a5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e2a9:	0f b7 db             	movzx  ebx,bx
c001e2ac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e2b1:	74 20                	je     c001e2d3 <Vm::faultHandler(regs*)+0x4ec>
c001e2b3:	ed                   	in     eax,dx
c001e2b4:	51                   	push   ecx
c001e2b5:	50                   	push   eax
c001e2b6:	56                   	push   esi
c001e2b7:	53                   	push   ebx
c001e2b8:	e8 15 fb ff ff       	call   c001ddd2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e2bd:	83 c4 10             	add    esp,0x10
c001e2c0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e2c3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2c7:	74 05                	je     c001e2ce <Vm::faultHandler(regs*)+0x4e7>
c001e2c9:	83 e8 04             	sub    eax,0x4
c001e2cc:	eb 27                	jmp    c001e2f5 <Vm::faultHandler(regs*)+0x50e>
c001e2ce:	83 c0 04             	add    eax,0x4
c001e2d1:	eb 22                	jmp    c001e2f5 <Vm::faultHandler(regs*)+0x50e>
c001e2d3:	66 ed                	in     ax,dx
c001e2d5:	0f b7 c0             	movzx  eax,ax
c001e2d8:	52                   	push   edx
c001e2d9:	50                   	push   eax
c001e2da:	56                   	push   esi
c001e2db:	53                   	push   ebx
c001e2dc:	e8 db fa ff ff       	call   c001ddbc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e2e1:	83 c4 10             	add    esp,0x10
c001e2e4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e2e7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2eb:	74 05                	je     c001e2f2 <Vm::faultHandler(regs*)+0x50b>
c001e2ed:	83 e8 02             	sub    eax,0x2
c001e2f0:	eb 03                	jmp    c001e2f5 <Vm::faultHandler(regs*)+0x50e>
c001e2f2:	83 c0 02             	add    eax,0x2
c001e2f5:	25 ff ff 00 00       	and    eax,0xffff
c001e2fa:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e2fd:	e9 b1 02 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	4b                   	dec    ebx
c001e306:	68 17 ad 02 c0       	push   0xc002ad17
c001e30b:	e8 1d 45 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e310:	83 c4 10             	add    esp,0x10
c001e313:	80 fb 05             	cmp    bl,0x5
c001e316:	77 0a                	ja     c001e322 <Vm::faultHandler(regs*)+0x53b>
c001e318:	0f b6 db             	movzx  ebx,bl
c001e31b:	ff 24 9d 88 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5278]
c001e322:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e326:	eb 1b                	jmp    c001e343 <Vm::faultHandler(regs*)+0x55c>
c001e328:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e32c:	eb 15                	jmp    c001e343 <Vm::faultHandler(regs*)+0x55c>
c001e32e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e332:	eb 0f                	jmp    c001e343 <Vm::faultHandler(regs*)+0x55c>
c001e334:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e338:	eb 09                	jmp    c001e343 <Vm::faultHandler(regs*)+0x55c>
c001e33a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e33d:	eb 04                	jmp    c001e343 <Vm::faultHandler(regs*)+0x55c>
c001e33f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e343:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e348:	74 0d                	je     c001e357 <Vm::faultHandler(regs*)+0x570>
c001e34a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e351:	0f 87 8b 00 00 00    	ja     c001e3e2 <Vm::faultHandler(regs*)+0x5fb>
c001e357:	53                   	push   ebx
c001e358:	53                   	push   ebx
c001e359:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e35d:	52                   	push   edx
c001e35e:	50                   	push   eax
c001e35f:	e8 0f fa ff ff       	call   c001dd73 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e364:	5e                   	pop    esi
c001e365:	0f b6 c0             	movzx  eax,al
c001e368:	5d                   	pop    ebp
c001e369:	50                   	push   eax
c001e36a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e36e:	50                   	push   eax
c001e36f:	e8 91 f6 ff ff       	call   c001da05 <Vm::outbv(unsigned short, unsigned char)>
c001e374:	83 c4 10             	add    esp,0x10
c001e377:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e37a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e37e:	74 03                	je     c001e383 <Vm::faultHandler(regs*)+0x59c>
c001e380:	48                   	dec    eax
c001e381:	eb 01                	jmp    c001e384 <Vm::faultHandler(regs*)+0x59d>
c001e383:	40                   	inc    eax
c001e384:	0f b7 c0             	movzx  eax,ax
c001e387:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e38a:	e9 24 02 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e38f:	83 ec 0c             	sub    esp,0xc
c001e392:	4b                   	dec    ebx
c001e393:	68 17 ad 02 c0       	push   0xc002ad17
c001e398:	e8 90 44 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e39d:	83 c4 10             	add    esp,0x10
c001e3a0:	80 fb 05             	cmp    bl,0x5
c001e3a3:	77 0a                	ja     c001e3af <Vm::faultHandler(regs*)+0x5c8>
c001e3a5:	0f b6 db             	movzx  ebx,bl
c001e3a8:	ff 24 9d a0 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5260]
c001e3af:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e3b3:	eb 1b                	jmp    c001e3d0 <Vm::faultHandler(regs*)+0x5e9>
c001e3b5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e3b9:	eb 15                	jmp    c001e3d0 <Vm::faultHandler(regs*)+0x5e9>
c001e3bb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e3bf:	eb 0f                	jmp    c001e3d0 <Vm::faultHandler(regs*)+0x5e9>
c001e3c1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e3c5:	eb 09                	jmp    c001e3d0 <Vm::faultHandler(regs*)+0x5e9>
c001e3c7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e3ca:	eb 04                	jmp    c001e3d0 <Vm::faultHandler(regs*)+0x5e9>
c001e3cc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e3d0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e3d3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e3d8:	74 39                	je     c001e413 <Vm::faultHandler(regs*)+0x62c>
c001e3da:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e3e0:	76 31                	jbe    c001e413 <Vm::faultHandler(regs*)+0x62c>
c001e3e2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e3e6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e3ea:	51                   	push   ecx
c001e3eb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e3ef:	51                   	push   ecx
c001e3f0:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e3f4:	51                   	push   ecx
c001e3f5:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e3f9:	51                   	push   ecx
c001e3fa:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3fe:	52                   	push   edx
c001e3ff:	50                   	push   eax
c001e400:	50                   	push   eax
c001e401:	68 e4 ac 02 c0       	push   0xc002ace4
c001e406:	e8 22 44 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e40b:	83 c4 20             	add    esp,0x20
c001e40e:	e9 fb 01 00 00       	jmp    c001e60e <Vm::faultHandler(regs*)+0x827>
c001e413:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e416:	0f b7 d3             	movzx  edx,bx
c001e419:	81 e6 00 04 00 00    	and    esi,0x400
c001e41f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e422:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e427:	74 1d                	je     c001e446 <Vm::faultHandler(regs*)+0x65f>
c001e429:	51                   	push   ecx
c001e42a:	51                   	push   ecx
c001e42b:	52                   	push   edx
c001e42c:	50                   	push   eax
c001e42d:	e8 64 f9 ff ff       	call   c001dd96 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e432:	83 c4 10             	add    esp,0x10
c001e435:	89 ea                	mov    edx,ebp
c001e437:	ef                   	out    dx,eax
c001e438:	85 f6                	test   esi,esi
c001e43a:	74 05                	je     c001e441 <Vm::faultHandler(regs*)+0x65a>
c001e43c:	83 eb 04             	sub    ebx,0x4
c001e43f:	eb 21                	jmp    c001e462 <Vm::faultHandler(regs*)+0x67b>
c001e441:	83 c3 04             	add    ebx,0x4
c001e444:	eb 1c                	jmp    c001e462 <Vm::faultHandler(regs*)+0x67b>
c001e446:	51                   	push   ecx
c001e447:	51                   	push   ecx
c001e448:	52                   	push   edx
c001e449:	50                   	push   eax
c001e44a:	e8 35 f9 ff ff       	call   c001dd84 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	89 ea                	mov    edx,ebp
c001e454:	66 ef                	out    dx,ax
c001e456:	85 f6                	test   esi,esi
c001e458:	74 05                	je     c001e45f <Vm::faultHandler(regs*)+0x678>
c001e45a:	83 eb 02             	sub    ebx,0x2
c001e45d:	eb 03                	jmp    c001e462 <Vm::faultHandler(regs*)+0x67b>
c001e45f:	83 c3 02             	add    ebx,0x2
c001e462:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e468:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e46b:	e9 43 01 00 00       	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e470:	53                   	push   ebx
c001e471:	53                   	push   ebx
c001e472:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e476:	50                   	push   eax
c001e477:	68 1d ad 02 c0       	push   0xc002ad1d
c001e47c:	e8 ac 43 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e481:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e488:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e48c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e48f:	e8 5e f5 ff ff       	call   c001d9f2 <Vm::inbv(unsigned short)>
c001e494:	0f b6 c0             	movzx  eax,al
c001e497:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e49a:	eb 5e                	jmp    c001e4fa <Vm::faultHandler(regs*)+0x713>
c001e49c:	51                   	push   ecx
c001e49d:	51                   	push   ecx
c001e49e:	53                   	push   ebx
c001e49f:	68 23 ad 02 c0       	push   0xc002ad23
c001e4a4:	e8 84 43 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4b1:	74 07                	je     c001e4ba <Vm::faultHandler(regs*)+0x6d3>
c001e4b3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4b7:	ed                   	in     eax,dx
c001e4b8:	eb 14                	jmp    c001e4ce <Vm::faultHandler(regs*)+0x6e7>
c001e4ba:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e4bd:	66 31 db             	xor    bx,bx
c001e4c0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e4c3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4c7:	66 ed                	in     ax,dx
c001e4c9:	0f b7 c0             	movzx  eax,ax
c001e4cc:	09 d8                	or     eax,ebx
c001e4ce:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4d1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e4d5:	e9 dc 00 00 00       	jmp    c001e5b6 <Vm::faultHandler(regs*)+0x7cf>
c001e4da:	50                   	push   eax
c001e4db:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4de:	53                   	push   ebx
c001e4df:	68 29 ad 02 c0       	push   0xc002ad29
c001e4e4:	e8 44 43 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e4e9:	58                   	pop    eax
c001e4ea:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e4ee:	5a                   	pop    edx
c001e4ef:	50                   	push   eax
c001e4f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e4f4:	50                   	push   eax
c001e4f5:	e8 0b f5 ff ff       	call   c001da05 <Vm::outbv(unsigned short, unsigned char)>
c001e4fa:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e4fe:	e9 85 00 00 00       	jmp    c001e588 <Vm::faultHandler(regs*)+0x7a1>
c001e503:	50                   	push   eax
c001e504:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e507:	53                   	push   ebx
c001e508:	68 32 ad 02 c0       	push   0xc002ad32
c001e50d:	e8 1b 43 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e519:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e51e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e521:	74 03                	je     c001e526 <Vm::faultHandler(regs*)+0x73f>
c001e523:	ef                   	out    dx,eax
c001e524:	eb ab                	jmp    c001e4d1 <Vm::faultHandler(regs*)+0x6ea>
c001e526:	66 ef                	out    dx,ax
c001e528:	eb a7                	jmp    c001e4d1 <Vm::faultHandler(regs*)+0x6ea>
c001e52a:	55                   	push   ebp
c001e52b:	55                   	push   ebp
c001e52c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e52f:	68 3b ad 02 c0       	push   0xc002ad3b
c001e534:	e8 f4 42 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e539:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e540:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e544:	89 04 24             	mov    DWORD PTR [esp],eax
c001e547:	e8 a6 f4 ff ff       	call   c001d9f2 <Vm::inbv(unsigned short)>
c001e54c:	0f b6 c0             	movzx  eax,al
c001e54f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e552:	eb 31                	jmp    c001e585 <Vm::faultHandler(regs*)+0x79e>
c001e554:	56                   	push   esi
c001e555:	56                   	push   esi
c001e556:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e559:	68 41 ad 02 c0       	push   0xc002ad41
c001e55e:	e8 ca 42 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e563:	83 c4 10             	add    esp,0x10
c001e566:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e569:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e56e:	74 03                	je     c001e573 <Vm::faultHandler(regs*)+0x78c>
c001e570:	ed                   	in     eax,dx
c001e571:	eb 0d                	jmp    c001e580 <Vm::faultHandler(regs*)+0x799>
c001e573:	66 ed                	in     ax,dx
c001e575:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e578:	0f b7 c0             	movzx  eax,ax
c001e57b:	66 31 d2             	xor    dx,dx
c001e57e:	09 d0                	or     eax,edx
c001e580:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e583:	eb 2e                	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e585:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	eb 29                	jmp    c001e5b6 <Vm::faultHandler(regs*)+0x7cf>
c001e58d:	50                   	push   eax
c001e58e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e591:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e594:	68 50 ad 02 c0       	push   0xc002ad50
c001e599:	e8 8f 42 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e59e:	83 c4 10             	add    esp,0x10
c001e5a1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e5a4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5a9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e5ac:	74 03                	je     c001e5b1 <Vm::faultHandler(regs*)+0x7ca>
c001e5ae:	ef                   	out    dx,eax
c001e5af:	eb 02                	jmp    c001e5b3 <Vm::faultHandler(regs*)+0x7cc>
c001e5b1:	66 ef                	out    dx,ax
c001e5b3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e5b6:	b0 01                	mov    al,0x1
c001e5b8:	eb 56                	jmp    c001e610 <Vm::faultHandler(regs*)+0x829>
c001e5ba:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e5be:	51                   	push   ecx
c001e5bf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e5c3:	51                   	push   ecx
c001e5c4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e5c8:	51                   	push   ecx
c001e5c9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e5cd:	51                   	push   ecx
c001e5ce:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e5d2:	52                   	push   edx
c001e5d3:	50                   	push   eax
c001e5d4:	50                   	push   eax
c001e5d5:	68 59 ad 02 c0       	push   0xc002ad59
c001e5da:	e8 4e 42 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001e5df:	83 c4 20             	add    esp,0x20
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	6a 60                	push   0x60
c001e5e7:	e8 06 f4 ff ff       	call   c001d9f2 <Vm::inbv(unsigned short)>
c001e5ec:	83 c4 10             	add    esp,0x10
c001e5ef:	3c 1c                	cmp    al,0x1c
c001e5f1:	74 04                	je     c001e5f7 <Vm::faultHandler(regs*)+0x810>
c001e5f3:	3c 5a                	cmp    al,0x5a
c001e5f5:	75 eb                	jne    c001e5e2 <Vm::faultHandler(regs*)+0x7fb>
c001e5f7:	3c 1c                	cmp    al,0x1c
c001e5f9:	74 04                	je     c001e5ff <Vm::faultHandler(regs*)+0x818>
c001e5fb:	3c 5a                	cmp    al,0x5a
c001e5fd:	75 0f                	jne    c001e60e <Vm::faultHandler(regs*)+0x827>
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	6a 60                	push   0x60
c001e604:	e8 e9 f3 ff ff       	call   c001d9f2 <Vm::inbv(unsigned short)>
c001e609:	83 c4 10             	add    esp,0x10
c001e60c:	eb e9                	jmp    c001e5f7 <Vm::faultHandler(regs*)+0x810>
c001e60e:	31 c0                	xor    eax,eax
c001e610:	83 c4 1c             	add    esp,0x1c
c001e613:	5b                   	pop    ebx
c001e614:	5e                   	pop    esi
c001e615:	5f                   	pop    edi
c001e616:	5d                   	pop    ebp
c001e617:	c3                   	ret    

c001e618 <Vm::fpuInternalTo32(unsigned long long)>:
c001e618:	57                   	push   edi
c001e619:	56                   	push   esi
c001e61a:	53                   	push   ebx
c001e61b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e623:	89 d6                	mov    esi,edx
c001e625:	89 d7                	mov    edi,edx
c001e627:	89 c1                	mov    ecx,eax
c001e629:	c1 ef 14             	shr    edi,0x14
c001e62c:	89 d3                	mov    ebx,edx
c001e62e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e634:	31 d2                	xor    edx,edx
c001e636:	89 f8                	mov    eax,edi
c001e638:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e63e:	bf ff 00 00 00       	mov    edi,0xff
c001e643:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e648:	83 d2 ff             	adc    edx,0xffffffff
c001e64b:	39 c7                	cmp    edi,eax
c001e64d:	bf 00 00 00 00       	mov    edi,0x0
c001e652:	19 d7                	sbb    edi,edx
c001e654:	72 15                	jb     c001e66b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e656:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e65a:	c1 e0 17             	shl    eax,0x17
c001e65d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e663:	09 f1                	or     ecx,esi
c001e665:	09 c1                	or     ecx,eax
c001e667:	89 cf                	mov    edi,ecx
c001e669:	eb 02                	jmp    c001e66d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e66b:	31 ff                	xor    edi,edi
c001e66d:	89 f8                	mov    eax,edi
c001e66f:	5b                   	pop    ebx
c001e670:	5e                   	pop    esi
c001e671:	5f                   	pop    edi
c001e672:	c3                   	ret    

c001e673 <Vm::fpuInternalTo64(unsigned long long)>:
c001e673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e67b:	c3                   	ret    

c001e67c <Vm::fpu32ToInternal(unsigned int)>:
c001e67c:	57                   	push   edi
c001e67d:	31 ff                	xor    edi,edi
c001e67f:	56                   	push   esi
c001e680:	53                   	push   ebx
c001e681:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e685:	89 cb                	mov    ebx,ecx
c001e687:	89 ce                	mov    esi,ecx
c001e689:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e68f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e695:	c1 e9 17             	shr    ecx,0x17
c001e698:	89 f0                	mov    eax,esi
c001e69a:	0f b6 d1             	movzx  edx,cl
c001e69d:	81 c2 80 03 00 00    	add    edx,0x380
c001e6a3:	89 d1                	mov    ecx,edx
c001e6a5:	89 fa                	mov    edx,edi
c001e6a7:	c1 e1 14             	shl    ecx,0x14
c001e6aa:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e6ae:	c1 e0 1d             	shl    eax,0x1d
c001e6b1:	89 d7                	mov    edi,edx
c001e6b3:	89 c6                	mov    esi,eax
c001e6b5:	89 ca                	mov    edx,ecx
c001e6b7:	89 f0                	mov    eax,esi
c001e6b9:	09 fa                	or     edx,edi
c001e6bb:	09 da                	or     edx,ebx
c001e6bd:	5b                   	pop    ebx
c001e6be:	5e                   	pop    esi
c001e6bf:	5f                   	pop    edi
c001e6c0:	c3                   	ret    

c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>:
c001e6c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e6c9:	c3                   	ret    

c001e6ca <Vm::fpuFloatToLong(unsigned long long)>:
c001e6ca:	57                   	push   edi
c001e6cb:	31 c0                	xor    eax,eax
c001e6cd:	56                   	push   esi
c001e6ce:	31 d2                	xor    edx,edx
c001e6d0:	53                   	push   ebx
c001e6d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6d9:	89 d9                	mov    ecx,ebx
c001e6db:	c1 e9 14             	shr    ecx,0x14
c001e6de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e6e4:	89 cf                	mov    edi,ecx
c001e6e6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e6ec:	78 33                	js     c001e721 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e6ee:	89 d9                	mov    ecx,ebx
c001e6f0:	89 f0                	mov    eax,esi
c001e6f2:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6f8:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e6fe:	89 ca                	mov    edx,ecx
c001e700:	b9 34 00 00 00       	mov    ecx,0x34
c001e705:	29 f9                	sub    ecx,edi
c001e707:	0f ad d0             	shrd   eax,edx,cl
c001e70a:	d3 fa                	sar    edx,cl
c001e70c:	f6 c1 20             	test   cl,0x20
c001e70f:	74 05                	je     c001e716 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e711:	89 d0                	mov    eax,edx
c001e713:	c1 fa 1f             	sar    edx,0x1f
c001e716:	85 db                	test   ebx,ebx
c001e718:	79 07                	jns    c001e721 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e71a:	f7 d8                	neg    eax
c001e71c:	83 d2 00             	adc    edx,0x0
c001e71f:	f7 da                	neg    edx
c001e721:	5b                   	pop    ebx
c001e722:	5e                   	pop    esi
c001e723:	5f                   	pop    edi
c001e724:	c3                   	ret    

c001e725 <Vm::fpuULongToFloat(unsigned long long)>:
c001e725:	57                   	push   edi
c001e726:	31 c9                	xor    ecx,ecx
c001e728:	56                   	push   esi
c001e729:	53                   	push   ebx
c001e72a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e72e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e732:	0f ba e7 14          	bt     edi,0x14
c001e736:	72 07                	jb     c001e73f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e738:	01 f6                	add    esi,esi
c001e73a:	11 ff                	adc    edi,edi
c001e73c:	41                   	inc    ecx
c001e73d:	eb f3                	jmp    c001e732 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e73f:	89 fa                	mov    edx,edi
c001e741:	89 f0                	mov    eax,esi
c001e743:	bb 33 04 00 00       	mov    ebx,0x433
c001e748:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e74e:	29 cb                	sub    ebx,ecx
c001e750:	89 d9                	mov    ecx,ebx
c001e752:	5b                   	pop    ebx
c001e753:	c1 e1 14             	shl    ecx,0x14
c001e756:	5e                   	pop    esi
c001e757:	09 ca                	or     edx,ecx
c001e759:	5f                   	pop    edi
c001e75a:	c3                   	ret    

c001e75b <Vm::fpuLongToFloat(long long)>:
c001e75b:	56                   	push   esi
c001e75c:	31 c0                	xor    eax,eax
c001e75e:	53                   	push   ebx
c001e75f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e767:	39 c8                	cmp    eax,ecx
c001e769:	19 d8                	sbb    eax,ebx
c001e76b:	7d 04                	jge    c001e771 <Vm::fpuLongToFloat(long long)+0x16>
c001e76d:	31 f6                	xor    esi,esi
c001e76f:	eb 0c                	jmp    c001e77d <Vm::fpuLongToFloat(long long)+0x22>
c001e771:	f7 d9                	neg    ecx
c001e773:	be 01 00 00 00       	mov    esi,0x1
c001e778:	83 d3 00             	adc    ebx,0x0
c001e77b:	f7 db                	neg    ebx
c001e77d:	31 c0                	xor    eax,eax
c001e77f:	0f ba e3 14          	bt     ebx,0x14
c001e783:	72 07                	jb     c001e78c <Vm::fpuLongToFloat(long long)+0x31>
c001e785:	01 c9                	add    ecx,ecx
c001e787:	11 db                	adc    ebx,ebx
c001e789:	40                   	inc    eax
c001e78a:	eb f3                	jmp    c001e77f <Vm::fpuLongToFloat(long long)+0x24>
c001e78c:	ba 33 04 00 00       	mov    edx,0x433
c001e791:	29 c2                	sub    edx,eax
c001e793:	89 c8                	mov    eax,ecx
c001e795:	c1 e2 14             	shl    edx,0x14
c001e798:	89 d9                	mov    ecx,ebx
c001e79a:	89 f3                	mov    ebx,esi
c001e79c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e7a2:	09 ca                	or     edx,ecx
c001e7a4:	84 db                	test   bl,bl
c001e7a6:	74 06                	je     c001e7ae <Vm::fpuLongToFloat(long long)+0x53>
c001e7a8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e7ae:	5b                   	pop    ebx
c001e7af:	5e                   	pop    esi
c001e7b0:	c3                   	ret    

c001e7b1 <Vm::fpuGet0()>:
c001e7b1:	31 c0                	xor    eax,eax
c001e7b3:	31 d2                	xor    edx,edx
c001e7b5:	c3                   	ret    

c001e7b6 <Vm::fpuGet1()>:
c001e7b6:	b8 01 00 00 00       	mov    eax,0x1
c001e7bb:	31 d2                	xor    edx,edx
c001e7bd:	c3                   	ret    

c001e7be <Vm::fpuGetPi()>:
c001e7be:	b8 03 00 00 00       	mov    eax,0x3
c001e7c3:	31 d2                	xor    edx,edx
c001e7c5:	c3                   	ret    

c001e7c6 <Vm::fpuGetLog2E()>:
c001e7c6:	83 ec 18             	sub    esp,0x18
c001e7c9:	68 b8 ad 02 c0       	push   0xc002adb8
c001e7ce:	e8 74 b1 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e7d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7d8:	31 d2                	xor    edx,edx
c001e7da:	83 c4 1c             	add    esp,0x1c
c001e7dd:	c3                   	ret    

c001e7de <Vm::fpuGetLogE2()>:
c001e7de:	83 ec 18             	sub    esp,0x18
c001e7e1:	68 c4 ad 02 c0       	push   0xc002adc4
c001e7e6:	e8 5c b1 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e7eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7f0:	31 d2                	xor    edx,edx
c001e7f2:	83 c4 1c             	add    esp,0x1c
c001e7f5:	c3                   	ret    

c001e7f6 <Vm::fpuGetLog210()>:
c001e7f6:	83 ec 18             	sub    esp,0x18
c001e7f9:	68 d0 ad 02 c0       	push   0xc002add0
c001e7fe:	e8 44 b1 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e803:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e808:	31 d2                	xor    edx,edx
c001e80a:	83 c4 1c             	add    esp,0x1c
c001e80d:	c3                   	ret    

c001e80e <Vm::fpuGetLog102()>:
c001e80e:	83 ec 18             	sub    esp,0x18
c001e811:	68 dd ad 02 c0       	push   0xc002addd
c001e816:	e8 2c b1 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e81b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e820:	31 d2                	xor    edx,edx
c001e822:	83 c4 1c             	add    esp,0x1c
c001e825:	c3                   	ret    

c001e826 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e82a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e82e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e832:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e836:	0f 92 c0             	setb   al
c001e839:	c3                   	ret    

c001e83a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e83a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e842:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e846:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e84a:	09 c2                	or     edx,eax
c001e84c:	0f 94 c0             	sete   al
c001e84f:	c3                   	ret    

c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e850:	57                   	push   edi
c001e851:	56                   	push   esi
c001e852:	53                   	push   ebx
c001e853:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e857:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e85b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e85f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e863:	57                   	push   edi
c001e864:	56                   	push   esi
c001e865:	53                   	push   ebx
c001e866:	51                   	push   ecx
c001e867:	e8 ce ff ff ff       	call   c001e83a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e86c:	83 c4 10             	add    esp,0x10
c001e86f:	88 c2                	mov    dl,al
c001e871:	31 c0                	xor    eax,eax
c001e873:	84 d2                	test   dl,dl
c001e875:	75 0c                	jne    c001e883 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e877:	57                   	push   edi
c001e878:	56                   	push   esi
c001e879:	53                   	push   ebx
c001e87a:	51                   	push   ecx
c001e87b:	e8 a6 ff ff ff       	call   c001e826 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e880:	83 c4 10             	add    esp,0x10
c001e883:	83 e0 01             	and    eax,0x1
c001e886:	5b                   	pop    ebx
c001e887:	88 c1                	mov    cl,al
c001e889:	83 e2 01             	and    edx,0x1
c001e88c:	a0 c1 df 02 c0       	mov    al,ds:0xc002dfc1
c001e891:	c1 e2 06             	shl    edx,0x6
c001e894:	83 e0 ba             	and    eax,0xffffffba
c001e897:	5e                   	pop    esi
c001e898:	09 c8                	or     eax,ecx
c001e89a:	5f                   	pop    edi
c001e89b:	09 d0                	or     eax,edx
c001e89d:	a2 c1 df 02 c0       	mov    ds:0xc002dfc1,al
c001e8a2:	c3                   	ret    

c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e8a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e8af:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e8b3:	c3                   	ret    

c001e8b4 <Vm::fpuAbs(unsigned long long)>:
c001e8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e8bc:	c3                   	ret    

c001e8bd <Vm::fpuChs(unsigned long long)>:
c001e8bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e8c5:	f7 d8                	neg    eax
c001e8c7:	83 d2 00             	adc    edx,0x0
c001e8ca:	f7 da                	neg    edx
c001e8cc:	c3                   	ret    

c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e8cd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e8d1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e8d6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e8da:	eb c7                	jmp    c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e8dc:	53                   	push   ebx
c001e8dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8ed:	0f af ca             	imul   ecx,edx
c001e8f0:	0f af d8             	imul   ebx,eax
c001e8f3:	f7 e2                	mul    edx
c001e8f5:	01 d9                	add    ecx,ebx
c001e8f7:	5b                   	pop    ebx
c001e8f8:	01 ca                	add    edx,ecx
c001e8fa:	c3                   	ret    

c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e90e:	e8 49 6b 00 00       	call   c002545c <__udivdi3>
c001e913:	83 c4 1c             	add    esp,0x1c
c001e916:	c3                   	ret    

c001e917 <Vm::fpuSquare(unsigned long long)>:
c001e917:	50                   	push   eax
c001e918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e91c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e920:	52                   	push   edx
c001e921:	50                   	push   eax
c001e922:	52                   	push   edx
c001e923:	50                   	push   eax
c001e924:	e8 b3 ff ff ff       	call   c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e929:	83 c4 14             	add    esp,0x14
c001e92c:	c3                   	ret    

c001e92d <Vm::fpuGetReg(int)>:
c001e92d:	83 ec 0c             	sub    esp,0xc
c001e930:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e935:	76 10                	jbe    c001e947 <Vm::fpuGetReg(int)+0x1a>
c001e937:	83 ec 0c             	sub    esp,0xc
c001e93a:	68 ea ad 02 c0       	push   0xc002adea
c001e93f:	e8 03 b0 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e944:	83 c4 10             	add    esp,0x10
c001e947:	a0 c1 df 02 c0       	mov    al,ds:0xc002dfc1
c001e94c:	b9 08 00 00 00       	mov    ecx,0x8
c001e951:	c0 e8 03             	shr    al,0x3
c001e954:	83 e0 07             	and    eax,0x7
c001e957:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e95b:	99                   	cdq    
c001e95c:	f7 f9                	idiv   ecx
c001e95e:	8b 04 d5 c4 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd203c]
c001e965:	8b 14 d5 c8 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2038]
c001e96c:	83 c4 0c             	add    esp,0xc
c001e96f:	c3                   	ret    

c001e970 <Vm::fpuSetReg(int, unsigned long long)>:
c001e970:	57                   	push   edi
c001e971:	56                   	push   esi
c001e972:	52                   	push   edx
c001e973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e977:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e97b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e980:	76 10                	jbe    c001e992 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	68 fd ad 02 c0       	push   0xc002adfd
c001e98a:	e8 b8 af ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	a0 c1 df 02 c0       	mov    al,ds:0xc002dfc1
c001e997:	b9 08 00 00 00       	mov    ecx,0x8
c001e99c:	c0 e8 03             	shr    al,0x3
c001e99f:	83 e0 07             	and    eax,0x7
c001e9a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e9a6:	99                   	cdq    
c001e9a7:	f7 f9                	idiv   ecx
c001e9a9:	89 34 d5 c4 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd203c],esi
c001e9b0:	89 3c d5 c8 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2038],edi
c001e9b7:	58                   	pop    eax
c001e9b8:	5e                   	pop    esi
c001e9b9:	5f                   	pop    edi
c001e9ba:	c3                   	ret    

c001e9bb <Vm::fpuPush(unsigned long long)>:
c001e9bb:	a0 c1 df 02 c0       	mov    al,ds:0xc002dfc1
c001e9c0:	c0 e8 03             	shr    al,0x3
c001e9c3:	83 e0 07             	and    eax,0x7
c001e9c6:	83 c0 07             	add    eax,0x7
c001e9c9:	88 c2                	mov    dl,al
c001e9cb:	83 e0 07             	and    eax,0x7
c001e9ce:	83 e2 07             	and    edx,0x7
c001e9d1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e9d8:	8a 15 c1 df 02 c0    	mov    dl,BYTE PTR ds:0xc002dfc1
c001e9de:	83 e2 c7             	and    edx,0xffffffc7
c001e9e1:	09 ca                	or     edx,ecx
c001e9e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e9e7:	88 15 c1 df 02 c0    	mov    BYTE PTR ds:0xc002dfc1,dl
c001e9ed:	89 0c c5 c8 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2038],ecx
c001e9f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9f8:	89 14 c5 c4 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd203c],edx
c001e9ff:	a1 04 e0 02 c0       	mov    eax,ds:0xc002e004
c001ea04:	83 f8 08             	cmp    eax,0x8
c001ea07:	75 08                	jne    c001ea11 <Vm::fpuPush(unsigned long long)+0x56>
c001ea09:	80 0d c0 df 02 c0 40 	or     BYTE PTR ds:0xc002dfc0,0x40
c001ea10:	c3                   	ret    
c001ea11:	40                   	inc    eax
c001ea12:	a3 04 e0 02 c0       	mov    ds:0xc002e004,eax
c001ea17:	c3                   	ret    

c001ea18 <Vm::fpuPop()>:
c001ea18:	8a 0d c1 df 02 c0    	mov    cl,BYTE PTR ds:0xc002dfc1
c001ea1e:	53                   	push   ebx
c001ea1f:	c0 e9 03             	shr    cl,0x3
c001ea22:	8a 1d c1 df 02 c0    	mov    bl,BYTE PTR ds:0xc002dfc1
c001ea28:	83 e1 07             	and    ecx,0x7
c001ea2b:	83 e3 c7             	and    ebx,0xffffffc7
c001ea2e:	8b 04 cd c4 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd203c]
c001ea35:	8b 14 cd c8 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2038]
c001ea3c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001ea43:	83 e1 38             	and    ecx,0x38
c001ea46:	09 d9                	or     ecx,ebx
c001ea48:	88 0d c1 df 02 c0    	mov    BYTE PTR ds:0xc002dfc1,cl
c001ea4e:	8b 0d 04 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e004
c001ea54:	85 c9                	test   ecx,ecx
c001ea56:	74 09                	je     c001ea61 <Vm::fpuPop()+0x49>
c001ea58:	49                   	dec    ecx
c001ea59:	89 0d 04 e0 02 c0    	mov    DWORD PTR ds:0xc002e004,ecx
c001ea5f:	eb 07                	jmp    c001ea68 <Vm::fpuPop()+0x50>
c001ea61:	80 0d c0 df 02 c0 40 	or     BYTE PTR ds:0xc002dfc0,0x40
c001ea68:	5b                   	pop    ebx
c001ea69:	c3                   	ret    

c001ea6a <Vm::x87Handler(regs*)>:
c001ea6a:	55                   	push   ebp
c001ea6b:	57                   	push   edi
c001ea6c:	56                   	push   esi
c001ea6d:	53                   	push   ebx
c001ea6e:	83 ec 1c             	sub    esp,0x1c
c001ea71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea75:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ea7a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ea7d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ea85:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ea89:	50                   	push   eax
c001ea8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ea8e:	50                   	push   eax
c001ea8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea93:	50                   	push   eax
c001ea94:	53                   	push   ebx
c001ea95:	e8 de a6 ff ff       	call   c0019178 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ea9a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ea9d:	83 c4 10             	add    esp,0x10
c001eaa0:	89 c6                	mov    esi,eax
c001eaa2:	80 fa d9             	cmp    dl,0xd9
c001eaa5:	0f 85 52 01 00 00    	jne    c001ebfd <Vm::x87Handler(regs*)+0x193>
c001eaab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eaaf:	8d 50 20             	lea    edx,[eax+0x20]
c001eab2:	80 fa 0e             	cmp    dl,0xe
c001eab5:	0f 87 86 00 00 00    	ja     c001eb41 <Vm::x87Handler(regs*)+0xd7>
c001eabb:	0f b6 d2             	movzx  edx,dl
c001eabe:	ff 24 95 10 ae 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd51f0]
c001eac5:	e8 e7 fc ff ff       	call   c001e7b1 <Vm::fpuGet0()>
c001eaca:	eb 05                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eacc:	e8 e5 fc ff ff       	call   c001e7b6 <Vm::fpuGet1()>
c001ead1:	57                   	push   edi
c001ead2:	57                   	push   edi
c001ead3:	52                   	push   edx
c001ead4:	50                   	push   eax
c001ead5:	e8 e1 fe ff ff       	call   c001e9bb <Vm::fpuPush(unsigned long long)>
c001eada:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eade:	83 c4 10             	add    esp,0x10
c001eae1:	b0 01                	mov    al,0x1
c001eae3:	e9 e3 09 00 00       	jmp    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	6a 00                	push   0x0
c001eaed:	e8 3b fe ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eaf2:	59                   	pop    ecx
c001eaf3:	5e                   	pop    esi
c001eaf4:	52                   	push   edx
c001eaf5:	50                   	push   eax
c001eaf6:	e8 c2 fd ff ff       	call   c001e8bd <Vm::fpuChs(unsigned long long)>
c001eafb:	eb 13                	jmp    c001eb10 <Vm::x87Handler(regs*)+0xa6>
c001eafd:	83 ec 0c             	sub    esp,0xc
c001eb00:	6a 00                	push   0x0
c001eb02:	e8 26 fe ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eb07:	5f                   	pop    edi
c001eb08:	5d                   	pop    ebp
c001eb09:	52                   	push   edx
c001eb0a:	50                   	push   eax
c001eb0b:	e8 a4 fd ff ff       	call   c001e8b4 <Vm::fpuAbs(unsigned long long)>
c001eb10:	83 c4 0c             	add    esp,0xc
c001eb13:	52                   	push   edx
c001eb14:	50                   	push   eax
c001eb15:	6a 00                	push   0x0
c001eb17:	e8 54 fe ff ff       	call   c001e970 <Vm::fpuSetReg(int, unsigned long long)>
c001eb1c:	eb bc                	jmp    c001eada <Vm::x87Handler(regs*)+0x70>
c001eb1e:	e8 d3 fc ff ff       	call   c001e7f6 <Vm::fpuGetLog210()>
c001eb23:	eb ac                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eb25:	e8 9c fc ff ff       	call   c001e7c6 <Vm::fpuGetLog2E()>
c001eb2a:	eb a5                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eb2c:	e8 8d fc ff ff       	call   c001e7be <Vm::fpuGetPi()>
c001eb31:	eb 9e                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eb33:	e8 d6 fc ff ff       	call   c001e80e <Vm::fpuGetLog102()>
c001eb38:	eb 97                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eb3a:	e8 9f fc ff ff       	call   c001e7de <Vm::fpuGetLogE2()>
c001eb3f:	eb 90                	jmp    c001ead1 <Vm::x87Handler(regs*)+0x67>
c001eb41:	8d 50 40             	lea    edx,[eax+0x40]
c001eb44:	80 fa 07             	cmp    dl,0x7
c001eb47:	77 15                	ja     c001eb5e <Vm::x87Handler(regs*)+0xf4>
c001eb49:	83 ec 0c             	sub    esp,0xc
c001eb4c:	2d c0 00 00 00       	sub    eax,0xc0
c001eb51:	50                   	push   eax
c001eb52:	e8 d6 fd ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eb57:	59                   	pop    ecx
c001eb58:	5e                   	pop    esi
c001eb59:	e9 75 ff ff ff       	jmp    c001ead3 <Vm::x87Handler(regs*)+0x69>
c001eb5e:	8d 50 38             	lea    edx,[eax+0x38]
c001eb61:	80 fa 07             	cmp    dl,0x7
c001eb64:	77 3c                	ja     c001eba2 <Vm::x87Handler(regs*)+0x138>
c001eb66:	83 ec 0c             	sub    esp,0xc
c001eb69:	2d c8 00 00 00       	sub    eax,0xc8
c001eb6e:	50                   	push   eax
c001eb6f:	e8 b9 fd ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eb74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb7b:	89 c6                	mov    esi,eax
c001eb7d:	89 d7                	mov    edi,edx
c001eb7f:	e8 a9 fd ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eb84:	83 c4 0c             	add    esp,0xc
c001eb87:	52                   	push   edx
c001eb88:	50                   	push   eax
c001eb89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb8d:	2d c8 00 00 00       	sub    eax,0xc8
c001eb92:	50                   	push   eax
c001eb93:	e8 d8 fd ff ff       	call   c001e970 <Vm::fpuSetReg(int, unsigned long long)>
c001eb98:	83 c4 0c             	add    esp,0xc
c001eb9b:	57                   	push   edi
c001eb9c:	56                   	push   esi
c001eb9d:	e9 73 ff ff ff       	jmp    c001eb15 <Vm::x87Handler(regs*)+0xab>
c001eba2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eba6:	84 d2                	test   dl,dl
c001eba8:	75 0f                	jne    c001ebb9 <Vm::x87Handler(regs*)+0x14f>
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	ff 36                	push   DWORD PTR [esi]
c001ebaf:	e8 c8 fa ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001ebb4:	e9 bf 00 00 00       	jmp    c001ec78 <Vm::x87Handler(regs*)+0x20e>
c001ebb9:	80 fa 03             	cmp    dl,0x3
c001ebbc:	75 13                	jne    c001ebd1 <Vm::x87Handler(regs*)+0x167>
c001ebbe:	e8 55 fe ff ff       	call   c001ea18 <Vm::fpuPop()>
c001ebc3:	55                   	push   ebp
c001ebc4:	55                   	push   ebp
c001ebc5:	52                   	push   edx
c001ebc6:	50                   	push   eax
c001ebc7:	e8 4c fa ff ff       	call   c001e618 <Vm::fpuInternalTo32(unsigned long long)>
c001ebcc:	e9 88 00 00 00       	jmp    c001ec59 <Vm::x87Handler(regs*)+0x1ef>
c001ebd1:	80 fa 05             	cmp    dl,0x5
c001ebd4:	75 0e                	jne    c001ebe4 <Vm::x87Handler(regs*)+0x17a>
c001ebd6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ebd9:	66 a3 c2 df 02 c0    	mov    ds:0xc002dfc2,ax
c001ebdf:	e9 df 00 00 00       	jmp    c001ecc3 <Vm::x87Handler(regs*)+0x259>
c001ebe4:	31 c0                	xor    eax,eax
c001ebe6:	80 fa 07             	cmp    dl,0x7
c001ebe9:	0f 85 dc 08 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001ebef:	66 a1 c2 df 02 c0    	mov    ax,ds:0xc002dfc2
c001ebf5:	66 89 06             	mov    WORD PTR [esi],ax
c001ebf8:	e9 c6 00 00 00       	jmp    c001ecc3 <Vm::x87Handler(regs*)+0x259>
c001ebfd:	80 fa d8             	cmp    dl,0xd8
c001ec00:	0f 84 c9 00 00 00    	je     c001eccf <Vm::x87Handler(regs*)+0x265>
c001ec06:	80 fa dc             	cmp    dl,0xdc
c001ec09:	0f 84 0d 02 00 00    	je     c001ee1c <Vm::x87Handler(regs*)+0x3b2>
c001ec0f:	80 fa de             	cmp    dl,0xde
c001ec12:	0f 84 cd 02 00 00    	je     c001eee5 <Vm::x87Handler(regs*)+0x47b>
c001ec18:	80 fa dd             	cmp    dl,0xdd
c001ec1b:	0f 84 5f 04 00 00    	je     c001f080 <Vm::x87Handler(regs*)+0x616>
c001ec21:	80 fa da             	cmp    dl,0xda
c001ec24:	0f 84 24 05 00 00    	je     c001f14e <Vm::x87Handler(regs*)+0x6e4>
c001ec2a:	80 fa df             	cmp    dl,0xdf
c001ec2d:	0f 84 68 05 00 00    	je     c001f19b <Vm::x87Handler(regs*)+0x731>
c001ec33:	31 c0                	xor    eax,eax
c001ec35:	80 fa db             	cmp    dl,0xdb
c001ec38:	0f 85 8d 08 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001ec3e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ec42:	80 fa 03             	cmp    dl,0x3
c001ec45:	0f 85 70 06 00 00    	jne    c001f2bb <Vm::x87Handler(regs*)+0x851>
c001ec4b:	e8 c8 fd ff ff       	call   c001ea18 <Vm::fpuPop()>
c001ec50:	55                   	push   ebp
c001ec51:	55                   	push   ebp
c001ec52:	52                   	push   edx
c001ec53:	50                   	push   eax
c001ec54:	e8 71 fa ff ff       	call   c001e6ca <Vm::fpuFloatToLong(unsigned long long)>
c001ec59:	83 c4 10             	add    esp,0x10
c001ec5c:	89 06                	mov    DWORD PTR [esi],eax
c001ec5e:	eb 63                	jmp    c001ecc3 <Vm::x87Handler(regs*)+0x259>
c001ec60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ec64:	84 d2                	test   dl,dl
c001ec66:	0f 85 e6 05 00 00    	jne    c001f252 <Vm::x87Handler(regs*)+0x7e8>
c001ec6c:	57                   	push   edi
c001ec6d:	57                   	push   edi
c001ec6e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec71:	ff 36                	push   DWORD PTR [esi]
c001ec73:	e8 49 fa ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001ec78:	5e                   	pop    esi
c001ec79:	5f                   	pop    edi
c001ec7a:	52                   	push   edx
c001ec7b:	50                   	push   eax
c001ec7c:	e8 3a fd ff ff       	call   c001e9bb <Vm::fpuPush(unsigned long long)>
c001ec81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec88:	e9 51 fe ff ff       	jmp    c001eade <Vm::x87Handler(regs*)+0x74>
c001ec8d:	80 fa 03             	cmp    dl,0x3
c001ec90:	0f 85 d7 06 00 00    	jne    c001f36d <Vm::x87Handler(regs*)+0x903>
c001ec96:	57                   	push   edi
c001ec97:	57                   	push   edi
c001ec98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec9b:	ff 36                	push   DWORD PTR [esi]
c001ec9d:	e8 1f fa ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001eca2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eca9:	89 c6                	mov    esi,eax
c001ecab:	89 d7                	mov    edi,edx
c001ecad:	e8 7b fc ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ecb2:	57                   	push   edi
c001ecb3:	56                   	push   esi
c001ecb4:	52                   	push   edx
c001ecb5:	50                   	push   eax
c001ecb6:	e8 95 fb ff ff       	call   c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ecbb:	83 c4 20             	add    esp,0x20
c001ecbe:	e8 55 fd ff ff       	call   c001ea18 <Vm::fpuPop()>
c001ecc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecc7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ecca:	e9 12 fe ff ff       	jmp    c001eae1 <Vm::x87Handler(regs*)+0x77>
c001eccf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecd3:	8d 50 40             	lea    edx,[eax+0x40]
c001ecd6:	80 fa 07             	cmp    dl,0x7
c001ecd9:	77 29                	ja     c001ed04 <Vm::x87Handler(regs*)+0x29a>
c001ecdb:	83 ec 0c             	sub    esp,0xc
c001ecde:	2d c0 00 00 00       	sub    eax,0xc0
c001ece3:	50                   	push   eax
c001ece4:	e8 44 fc ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ece9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecf0:	89 c6                	mov    esi,eax
c001ecf2:	89 d7                	mov    edi,edx
c001ecf4:	e8 34 fc ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ecf9:	57                   	push   edi
c001ecfa:	56                   	push   esi
c001ecfb:	52                   	push   edx
c001ecfc:	50                   	push   eax
c001ecfd:	e8 a1 fb ff ff       	call   c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ed02:	eb 2f                	jmp    c001ed33 <Vm::x87Handler(regs*)+0x2c9>
c001ed04:	8d 50 38             	lea    edx,[eax+0x38]
c001ed07:	80 fa 07             	cmp    dl,0x7
c001ed0a:	77 2f                	ja     c001ed3b <Vm::x87Handler(regs*)+0x2d1>
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	2d c8 00 00 00       	sub    eax,0xc8
c001ed14:	50                   	push   eax
c001ed15:	e8 13 fc ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ed1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed21:	89 c6                	mov    esi,eax
c001ed23:	89 d7                	mov    edi,edx
c001ed25:	e8 03 fc ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ed2a:	57                   	push   edi
c001ed2b:	56                   	push   esi
c001ed2c:	52                   	push   edx
c001ed2d:	50                   	push   eax
c001ed2e:	e8 a9 fb ff ff       	call   c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ed33:	83 c4 1c             	add    esp,0x1c
c001ed36:	e9 d8 fd ff ff       	jmp    c001eb13 <Vm::x87Handler(regs*)+0xa9>
c001ed3b:	8d 50 30             	lea    edx,[eax+0x30]
c001ed3e:	80 fa 07             	cmp    dl,0x7
c001ed41:	77 0d                	ja     c001ed50 <Vm::x87Handler(regs*)+0x2e6>
c001ed43:	83 ec 0c             	sub    esp,0xc
c001ed46:	2d d0 00 00 00       	sub    eax,0xd0
c001ed4b:	e9 99 03 00 00       	jmp    c001f0e9 <Vm::x87Handler(regs*)+0x67f>
c001ed50:	8d 50 28             	lea    edx,[eax+0x28]
c001ed53:	80 fa 07             	cmp    dl,0x7
c001ed56:	77 0d                	ja     c001ed65 <Vm::x87Handler(regs*)+0x2fb>
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	2d d8 00 00 00       	sub    eax,0xd8
c001ed60:	e9 c0 03 00 00       	jmp    c001f125 <Vm::x87Handler(regs*)+0x6bb>
c001ed65:	8d 50 20             	lea    edx,[eax+0x20]
c001ed68:	80 fa 07             	cmp    dl,0x7
c001ed6b:	77 1b                	ja     c001ed88 <Vm::x87Handler(regs*)+0x31e>
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	2d e0 00 00 00       	sub    eax,0xe0
c001ed75:	50                   	push   eax
c001ed76:	e8 b2 fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ed7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed82:	89 c6                	mov    esi,eax
c001ed84:	89 d7                	mov    edi,edx
c001ed86:	eb 22                	jmp    c001edaa <Vm::x87Handler(regs*)+0x340>
c001ed88:	8d 50 18             	lea    edx,[eax+0x18]
c001ed8b:	80 fa 07             	cmp    dl,0x7
c001ed8e:	77 2d                	ja     c001edbd <Vm::x87Handler(regs*)+0x353>
c001ed90:	83 ec 0c             	sub    esp,0xc
c001ed93:	6a 00                	push   0x0
c001ed95:	e8 93 fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ed9a:	89 c6                	mov    esi,eax
c001ed9c:	89 d7                	mov    edi,edx
c001ed9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eda2:	2d e8 00 00 00       	sub    eax,0xe8
c001eda7:	89 04 24             	mov    DWORD PTR [esp],eax
c001edaa:	e8 7e fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001edaf:	57                   	push   edi
c001edb0:	56                   	push   esi
c001edb1:	52                   	push   edx
c001edb2:	50                   	push   eax
c001edb3:	e8 15 fb ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edb8:	e9 76 ff ff ff       	jmp    c001ed33 <Vm::x87Handler(regs*)+0x2c9>
c001edbd:	8d 50 10             	lea    edx,[eax+0x10]
c001edc0:	80 fa 07             	cmp    dl,0x7
c001edc3:	77 1b                	ja     c001ede0 <Vm::x87Handler(regs*)+0x376>
c001edc5:	83 ec 0c             	sub    esp,0xc
c001edc8:	2d f0 00 00 00       	sub    eax,0xf0
c001edcd:	50                   	push   eax
c001edce:	e8 5a fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001edd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edda:	89 c6                	mov    esi,eax
c001eddc:	89 d7                	mov    edi,edx
c001edde:	eb 22                	jmp    c001ee02 <Vm::x87Handler(regs*)+0x398>
c001ede0:	3c f7                	cmp    al,0xf7
c001ede2:	0f 86 d1 03 00 00    	jbe    c001f1b9 <Vm::x87Handler(regs*)+0x74f>
c001ede8:	83 ec 0c             	sub    esp,0xc
c001edeb:	6a 00                	push   0x0
c001eded:	e8 3b fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001edf2:	89 c6                	mov    esi,eax
c001edf4:	89 d7                	mov    edi,edx
c001edf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edfa:	2d f8 00 00 00       	sub    eax,0xf8
c001edff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee02:	e8 26 fb ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ee07:	57                   	push   edi
c001ee08:	56                   	push   esi
c001ee09:	52                   	push   edx
c001ee0a:	50                   	push   eax
c001ee0b:	e8 eb fa ff ff       	call   c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ee10:	83 c4 1c             	add    esp,0x1c
c001ee13:	52                   	push   edx
c001ee14:	50                   	push   eax
c001ee15:	6a 00                	push   0x0
c001ee17:	e9 51 02 00 00       	jmp    c001f06d <Vm::x87Handler(regs*)+0x603>
c001ee1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee20:	8d 50 40             	lea    edx,[eax+0x40]
c001ee23:	80 fa 07             	cmp    dl,0x7
c001ee26:	77 37                	ja     c001ee5f <Vm::x87Handler(regs*)+0x3f5>
c001ee28:	83 ec 0c             	sub    esp,0xc
c001ee2b:	2d c0 00 00 00       	sub    eax,0xc0
c001ee30:	50                   	push   eax
c001ee31:	e8 f7 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ee36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee3d:	89 c6                	mov    esi,eax
c001ee3f:	89 d7                	mov    edi,edx
c001ee41:	e8 e7 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ee46:	57                   	push   edi
c001ee47:	56                   	push   esi
c001ee48:	52                   	push   edx
c001ee49:	50                   	push   eax
c001ee4a:	e8 54 fa ff ff       	call   c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee4f:	83 c4 1c             	add    esp,0x1c
c001ee52:	52                   	push   edx
c001ee53:	50                   	push   eax
c001ee54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee58:	2d c0 00 00 00       	sub    eax,0xc0
c001ee5d:	eb 3d                	jmp    c001ee9c <Vm::x87Handler(regs*)+0x432>
c001ee5f:	8d 50 38             	lea    edx,[eax+0x38]
c001ee62:	80 fa 07             	cmp    dl,0x7
c001ee65:	77 3b                	ja     c001eea2 <Vm::x87Handler(regs*)+0x438>
c001ee67:	83 ec 0c             	sub    esp,0xc
c001ee6a:	2d c8 00 00 00       	sub    eax,0xc8
c001ee6f:	50                   	push   eax
c001ee70:	e8 b8 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ee75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee7c:	89 c6                	mov    esi,eax
c001ee7e:	89 d7                	mov    edi,edx
c001ee80:	e8 a8 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ee85:	57                   	push   edi
c001ee86:	56                   	push   esi
c001ee87:	52                   	push   edx
c001ee88:	50                   	push   eax
c001ee89:	e8 4e fa ff ff       	call   c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee8e:	83 c4 1c             	add    esp,0x1c
c001ee91:	52                   	push   edx
c001ee92:	50                   	push   eax
c001ee93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee97:	2d c8 00 00 00       	sub    eax,0xc8
c001ee9c:	50                   	push   eax
c001ee9d:	e9 75 fc ff ff       	jmp    c001eb17 <Vm::x87Handler(regs*)+0xad>
c001eea2:	83 c0 18             	add    eax,0x18
c001eea5:	3c 07                	cmp    al,0x7
c001eea7:	0f 87 3b 04 00 00    	ja     c001f2e8 <Vm::x87Handler(regs*)+0x87e>
c001eead:	83 ec 0c             	sub    esp,0xc
c001eeb0:	6a 00                	push   0x0
c001eeb2:	e8 76 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eeb7:	89 c6                	mov    esi,eax
c001eeb9:	89 d7                	mov    edi,edx
c001eebb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eebf:	2d e8 00 00 00       	sub    eax,0xe8
c001eec4:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec7:	e8 61 fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eecc:	57                   	push   edi
c001eecd:	56                   	push   esi
c001eece:	52                   	push   edx
c001eecf:	50                   	push   eax
c001eed0:	e8 f8 f9 ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eed5:	83 c4 1c             	add    esp,0x1c
c001eed8:	52                   	push   edx
c001eed9:	50                   	push   eax
c001eeda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eede:	2d e8 00 00 00       	sub    eax,0xe8
c001eee3:	eb b7                	jmp    c001ee9c <Vm::x87Handler(regs*)+0x432>
c001eee5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee9:	8d 50 40             	lea    edx,[eax+0x40]
c001eeec:	80 fa 07             	cmp    dl,0x7
c001eeef:	77 3a                	ja     c001ef2b <Vm::x87Handler(regs*)+0x4c1>
c001eef1:	83 ec 0c             	sub    esp,0xc
c001eef4:	2d c0 00 00 00       	sub    eax,0xc0
c001eef9:	50                   	push   eax
c001eefa:	e8 2e fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001eeff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef06:	89 c6                	mov    esi,eax
c001ef08:	89 d7                	mov    edi,edx
c001ef0a:	e8 1e fa ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ef0f:	57                   	push   edi
c001ef10:	56                   	push   esi
c001ef11:	52                   	push   edx
c001ef12:	50                   	push   eax
c001ef13:	e8 8b f9 ff ff       	call   c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ef18:	83 c4 1c             	add    esp,0x1c
c001ef1b:	52                   	push   edx
c001ef1c:	50                   	push   eax
c001ef1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef21:	2d c0 00 00 00       	sub    eax,0xc0
c001ef26:	e9 9e 01 00 00       	jmp    c001f0c9 <Vm::x87Handler(regs*)+0x65f>
c001ef2b:	8d 50 20             	lea    edx,[eax+0x20]
c001ef2e:	80 fa 07             	cmp    dl,0x7
c001ef31:	77 3a                	ja     c001ef6d <Vm::x87Handler(regs*)+0x503>
c001ef33:	83 ec 0c             	sub    esp,0xc
c001ef36:	2d e0 00 00 00       	sub    eax,0xe0
c001ef3b:	50                   	push   eax
c001ef3c:	e8 ec f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ef41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef48:	89 c6                	mov    esi,eax
c001ef4a:	89 d7                	mov    edi,edx
c001ef4c:	e8 dc f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ef51:	57                   	push   edi
c001ef52:	56                   	push   esi
c001ef53:	52                   	push   edx
c001ef54:	50                   	push   eax
c001ef55:	e8 73 f9 ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef5a:	83 c4 1c             	add    esp,0x1c
c001ef5d:	52                   	push   edx
c001ef5e:	50                   	push   eax
c001ef5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef63:	2d e0 00 00 00       	sub    eax,0xe0
c001ef68:	e9 5c 01 00 00       	jmp    c001f0c9 <Vm::x87Handler(regs*)+0x65f>
c001ef6d:	8d 50 18             	lea    edx,[eax+0x18]
c001ef70:	80 fa 07             	cmp    dl,0x7
c001ef73:	77 3b                	ja     c001efb0 <Vm::x87Handler(regs*)+0x546>
c001ef75:	83 ec 0c             	sub    esp,0xc
c001ef78:	6a 00                	push   0x0
c001ef7a:	e8 ae f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ef7f:	89 c6                	mov    esi,eax
c001ef81:	89 d7                	mov    edi,edx
c001ef83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef87:	2d e8 00 00 00       	sub    eax,0xe8
c001ef8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef8f:	e8 99 f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001ef94:	57                   	push   edi
c001ef95:	56                   	push   esi
c001ef96:	52                   	push   edx
c001ef97:	50                   	push   eax
c001ef98:	e8 30 f9 ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef9d:	83 c4 1c             	add    esp,0x1c
c001efa0:	52                   	push   edx
c001efa1:	50                   	push   eax
c001efa2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efa6:	2d e8 00 00 00       	sub    eax,0xe8
c001efab:	e9 19 01 00 00       	jmp    c001f0c9 <Vm::x87Handler(regs*)+0x65f>
c001efb0:	8d 50 38             	lea    edx,[eax+0x38]
c001efb3:	80 fa 07             	cmp    dl,0x7
c001efb6:	77 37                	ja     c001efef <Vm::x87Handler(regs*)+0x585>
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	2d c8 00 00 00       	sub    eax,0xc8
c001efc0:	50                   	push   eax
c001efc1:	e8 67 f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001efc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efcd:	89 c6                	mov    esi,eax
c001efcf:	89 d7                	mov    edi,edx
c001efd1:	e8 57 f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001efd6:	57                   	push   edi
c001efd7:	56                   	push   esi
c001efd8:	52                   	push   edx
c001efd9:	50                   	push   eax
c001efda:	e8 fd f8 ff ff       	call   c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001efdf:	83 c4 1c             	add    esp,0x1c
c001efe2:	52                   	push   edx
c001efe3:	50                   	push   eax
c001efe4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe8:	2d c8 00 00 00       	sub    eax,0xc8
c001efed:	eb 7d                	jmp    c001f06c <Vm::x87Handler(regs*)+0x602>
c001efef:	3c f7                	cmp    al,0xf7
c001eff1:	76 38                	jbe    c001f02b <Vm::x87Handler(regs*)+0x5c1>
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	6a 00                	push   0x0
c001eff8:	e8 30 f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001effd:	89 c6                	mov    esi,eax
c001efff:	89 d7                	mov    edi,edx
c001f001:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f005:	2d f8 00 00 00       	sub    eax,0xf8
c001f00a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f00d:	e8 1b f9 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f012:	57                   	push   edi
c001f013:	56                   	push   esi
c001f014:	52                   	push   edx
c001f015:	50                   	push   eax
c001f016:	e8 e0 f8 ff ff       	call   c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f01b:	83 c4 1c             	add    esp,0x1c
c001f01e:	52                   	push   edx
c001f01f:	50                   	push   eax
c001f020:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f024:	2d f8 00 00 00       	sub    eax,0xf8
c001f029:	eb 41                	jmp    c001f06c <Vm::x87Handler(regs*)+0x602>
c001f02b:	8d 50 10             	lea    edx,[eax+0x10]
c001f02e:	80 fa 07             	cmp    dl,0x7
c001f031:	0f 87 5a 01 00 00    	ja     c001f191 <Vm::x87Handler(regs*)+0x727>
c001f037:	83 ec 0c             	sub    esp,0xc
c001f03a:	2d f0 00 00 00       	sub    eax,0xf0
c001f03f:	50                   	push   eax
c001f040:	e8 e8 f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f045:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f04c:	89 c6                	mov    esi,eax
c001f04e:	89 d7                	mov    edi,edx
c001f050:	e8 d8 f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f055:	57                   	push   edi
c001f056:	56                   	push   esi
c001f057:	52                   	push   edx
c001f058:	50                   	push   eax
c001f059:	e8 9d f8 ff ff       	call   c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f05e:	83 c4 1c             	add    esp,0x1c
c001f061:	52                   	push   edx
c001f062:	50                   	push   eax
c001f063:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f067:	2d f0 00 00 00       	sub    eax,0xf0
c001f06c:	50                   	push   eax
c001f06d:	e8 fe f8 ff ff       	call   c001e970 <Vm::fpuSetReg(int, unsigned long long)>
c001f072:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f076:	e8 9d f9 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f07b:	e9 5e fa ff ff       	jmp    c001eade <Vm::x87Handler(regs*)+0x74>
c001f080:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f084:	8d 50 30             	lea    edx,[eax+0x30]
c001f087:	80 fa 07             	cmp    dl,0x7
c001f08a:	77 1d                	ja     c001f0a9 <Vm::x87Handler(regs*)+0x63f>
c001f08c:	83 ec 0c             	sub    esp,0xc
c001f08f:	6a 00                	push   0x0
c001f091:	e8 97 f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f096:	83 c4 0c             	add    esp,0xc
c001f099:	52                   	push   edx
c001f09a:	50                   	push   eax
c001f09b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f09f:	2d d0 00 00 00       	sub    eax,0xd0
c001f0a4:	e9 f3 fd ff ff       	jmp    c001ee9c <Vm::x87Handler(regs*)+0x432>
c001f0a9:	8d 50 28             	lea    edx,[eax+0x28]
c001f0ac:	80 fa 07             	cmp    dl,0x7
c001f0af:	77 28                	ja     c001f0d9 <Vm::x87Handler(regs*)+0x66f>
c001f0b1:	83 ec 0c             	sub    esp,0xc
c001f0b4:	6a 00                	push   0x0
c001f0b6:	e8 72 f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f0bb:	83 c4 0c             	add    esp,0xc
c001f0be:	52                   	push   edx
c001f0bf:	50                   	push   eax
c001f0c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0c4:	2d d8 00 00 00       	sub    eax,0xd8
c001f0c9:	50                   	push   eax
c001f0ca:	e8 a1 f8 ff ff       	call   c001e970 <Vm::fpuSetReg(int, unsigned long long)>
c001f0cf:	e8 44 f9 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f0d4:	e9 01 fa ff ff       	jmp    c001eada <Vm::x87Handler(regs*)+0x70>
c001f0d9:	8d 50 20             	lea    edx,[eax+0x20]
c001f0dc:	80 fa 07             	cmp    dl,0x7
c001f0df:	77 30                	ja     c001f111 <Vm::x87Handler(regs*)+0x6a7>
c001f0e1:	83 ec 0c             	sub    esp,0xc
c001f0e4:	2d e0 00 00 00       	sub    eax,0xe0
c001f0e9:	50                   	push   eax
c001f0ea:	e8 3e f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f0ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0f6:	89 c6                	mov    esi,eax
c001f0f8:	89 d7                	mov    edi,edx
c001f0fa:	e8 2e f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f0ff:	57                   	push   edi
c001f100:	56                   	push   esi
c001f101:	52                   	push   edx
c001f102:	50                   	push   eax
c001f103:	e8 48 f7 ff ff       	call   c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f108:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f10c:	e9 54 02 00 00       	jmp    c001f365 <Vm::x87Handler(regs*)+0x8fb>
c001f111:	8d 50 18             	lea    edx,[eax+0x18]
c001f114:	80 fa 07             	cmp    dl,0x7
c001f117:	0f 87 43 fb ff ff    	ja     c001ec60 <Vm::x87Handler(regs*)+0x1f6>
c001f11d:	83 ec 0c             	sub    esp,0xc
c001f120:	2d e8 00 00 00       	sub    eax,0xe8
c001f125:	50                   	push   eax
c001f126:	e8 02 f8 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f12b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f132:	89 c6                	mov    esi,eax
c001f134:	89 d7                	mov    edi,edx
c001f136:	e8 f2 f7 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f13b:	57                   	push   edi
c001f13c:	56                   	push   esi
c001f13d:	52                   	push   edx
c001f13e:	50                   	push   eax
c001f13f:	e8 0c f7 ff ff       	call   c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f144:	83 c4 20             	add    esp,0x20
c001f147:	e8 cc f8 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f14c:	eb 62                	jmp    c001f1b0 <Vm::x87Handler(regs*)+0x746>
c001f14e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f152:	0f 85 0f 01 00 00    	jne    c001f267 <Vm::x87Handler(regs*)+0x7fd>
c001f158:	83 ec 0c             	sub    esp,0xc
c001f15b:	6a 01                	push   0x1
c001f15d:	e8 cb f7 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f162:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f169:	89 c6                	mov    esi,eax
c001f16b:	89 d7                	mov    edi,edx
c001f16d:	e8 bb f7 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f172:	57                   	push   edi
c001f173:	56                   	push   esi
c001f174:	52                   	push   edx
c001f175:	50                   	push   eax
c001f176:	e8 d5 f6 ff ff       	call   c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f17b:	83 c4 20             	add    esp,0x20
c001f17e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f182:	e8 91 f8 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f187:	e8 8c f8 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f18c:	e9 50 f9 ff ff       	jmp    c001eae1 <Vm::x87Handler(regs*)+0x77>
c001f191:	3c d9                	cmp    al,0xd9
c001f193:	0f 85 b5 02 00 00    	jne    c001f44e <Vm::x87Handler(regs*)+0x9e4>
c001f199:	eb bd                	jmp    c001f158 <Vm::x87Handler(regs*)+0x6ee>
c001f19b:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f19f:	0f 85 ea 02 00 00    	jne    c001f48f <Vm::x87Handler(regs*)+0xa25>
c001f1a5:	0f b7 05 c0 df 02 c0 	movzx  eax,WORD PTR ds:0xc002dfc0
c001f1ac:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f1b0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f1b4:	e9 28 f9 ff ff       	jmp    c001eae1 <Vm::x87Handler(regs*)+0x77>
c001f1b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1bd:	84 d2                	test   dl,dl
c001f1bf:	75 0f                	jne    c001f1d0 <Vm::x87Handler(regs*)+0x766>
c001f1c1:	83 ec 0c             	sub    esp,0xc
c001f1c4:	ff 36                	push   DWORD PTR [esi]
c001f1c6:	e8 b1 f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f1cb:	e9 2c 01 00 00       	jmp    c001f2fc <Vm::x87Handler(regs*)+0x892>
c001f1d0:	80 fa 01             	cmp    dl,0x1
c001f1d3:	75 0f                	jne    c001f1e4 <Vm::x87Handler(regs*)+0x77a>
c001f1d5:	83 ec 0c             	sub    esp,0xc
c001f1d8:	ff 36                	push   DWORD PTR [esi]
c001f1da:	e8 9d f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f1df:	e9 81 02 00 00       	jmp    c001f465 <Vm::x87Handler(regs*)+0x9fb>
c001f1e4:	80 fa 04             	cmp    dl,0x4
c001f1e7:	75 0f                	jne    c001f1f8 <Vm::x87Handler(regs*)+0x78e>
c001f1e9:	83 ec 0c             	sub    esp,0xc
c001f1ec:	ff 36                	push   DWORD PTR [esi]
c001f1ee:	e8 89 f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f1f3:	e9 86 01 00 00       	jmp    c001f37e <Vm::x87Handler(regs*)+0x914>
c001f1f8:	80 fa 05             	cmp    dl,0x5
c001f1fb:	75 1b                	jne    c001f218 <Vm::x87Handler(regs*)+0x7ae>
c001f1fd:	83 ec 0c             	sub    esp,0xc
c001f200:	6a 00                	push   0x0
c001f202:	e8 26 f7 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f207:	89 c7                	mov    edi,eax
c001f209:	89 d5                	mov    ebp,edx
c001f20b:	58                   	pop    eax
c001f20c:	ff 36                	push   DWORD PTR [esi]
c001f20e:	e8 69 f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f213:	e9 a3 01 00 00       	jmp    c001f3bb <Vm::x87Handler(regs*)+0x951>
c001f218:	80 fa 06             	cmp    dl,0x6
c001f21b:	75 0f                	jne    c001f22c <Vm::x87Handler(regs*)+0x7c2>
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	ff 36                	push   DWORD PTR [esi]
c001f222:	e8 55 f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f227:	e9 ae 01 00 00       	jmp    c001f3da <Vm::x87Handler(regs*)+0x970>
c001f22c:	31 c0                	xor    eax,eax
c001f22e:	80 fa 07             	cmp    dl,0x7
c001f231:	0f 85 94 02 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	6a 00                	push   0x0
c001f23c:	e8 ec f6 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f241:	89 c7                	mov    edi,eax
c001f243:	89 d5                	mov    ebp,edx
c001f245:	58                   	pop    eax
c001f246:	ff 36                	push   DWORD PTR [esi]
c001f248:	e8 2f f4 ff ff       	call   c001e67c <Vm::fpu32ToInternal(unsigned int)>
c001f24d:	e9 cb 01 00 00       	jmp    c001f41d <Vm::x87Handler(regs*)+0x9b3>
c001f252:	80 fa 03             	cmp    dl,0x3
c001f255:	0f 85 d3 01 00 00    	jne    c001f42e <Vm::x87Handler(regs*)+0x9c4>
c001f25b:	e8 b8 f7 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f260:	51                   	push   ecx
c001f261:	51                   	push   ecx
c001f262:	e9 de 01 00 00       	jmp    c001f445 <Vm::x87Handler(regs*)+0x9db>
c001f267:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f26b:	80 fa 01             	cmp    dl,0x1
c001f26e:	75 09                	jne    c001f279 <Vm::x87Handler(regs*)+0x80f>
c001f270:	57                   	push   edi
c001f271:	57                   	push   edi
c001f272:	8b 06                	mov    eax,DWORD PTR [esi]
c001f274:	e9 e3 01 00 00       	jmp    c001f45c <Vm::x87Handler(regs*)+0x9f2>
c001f279:	80 fa 04             	cmp    dl,0x4
c001f27c:	75 12                	jne    c001f290 <Vm::x87Handler(regs*)+0x826>
c001f27e:	31 d2                	xor    edx,edx
c001f280:	51                   	push   ecx
c001f281:	51                   	push   ecx
c001f282:	8b 06                	mov    eax,DWORD PTR [esi]
c001f284:	52                   	push   edx
c001f285:	50                   	push   eax
c001f286:	e8 d0 f4 ff ff       	call   c001e75b <Vm::fpuLongToFloat(long long)>
c001f28b:	e9 ee 00 00 00       	jmp    c001f37e <Vm::x87Handler(regs*)+0x914>
c001f290:	31 c0                	xor    eax,eax
c001f292:	80 fa 07             	cmp    dl,0x7
c001f295:	0f 85 30 02 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f29b:	83 ec 0c             	sub    esp,0xc
c001f29e:	6a 00                	push   0x0
c001f2a0:	e8 88 f6 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f2a5:	89 c7                	mov    edi,eax
c001f2a7:	89 d5                	mov    ebp,edx
c001f2a9:	58                   	pop    eax
c001f2aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001f2ac:	5a                   	pop    edx
c001f2ad:	31 d2                	xor    edx,edx
c001f2af:	52                   	push   edx
c001f2b0:	50                   	push   eax
c001f2b1:	e8 a5 f4 ff ff       	call   c001e75b <Vm::fpuLongToFloat(long long)>
c001f2b6:	e9 62 01 00 00       	jmp    c001f41d <Vm::x87Handler(regs*)+0x9b3>
c001f2bb:	84 d2                	test   dl,dl
c001f2bd:	75 0d                	jne    c001f2cc <Vm::x87Handler(regs*)+0x862>
c001f2bf:	31 d2                	xor    edx,edx
c001f2c1:	55                   	push   ebp
c001f2c2:	55                   	push   ebp
c001f2c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f2c5:	52                   	push   edx
c001f2c6:	50                   	push   eax
c001f2c7:	e9 d3 01 00 00       	jmp    c001f49f <Vm::x87Handler(regs*)+0xa35>
c001f2cc:	31 c0                	xor    eax,eax
c001f2ce:	80 fa 02             	cmp    dl,0x2
c001f2d1:	0f 85 f4 01 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f2d7:	83 ec 0c             	sub    esp,0xc
c001f2da:	6a 00                	push   0x0
c001f2dc:	e8 4c f6 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f2e1:	59                   	pop    ecx
c001f2e2:	5f                   	pop    edi
c001f2e3:	e9 6a f9 ff ff       	jmp    c001ec52 <Vm::x87Handler(regs*)+0x1e8>
c001f2e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2ec:	84 d2                	test   dl,dl
c001f2ee:	75 2a                	jne    c001f31a <Vm::x87Handler(regs*)+0x8b0>
c001f2f0:	50                   	push   eax
c001f2f1:	50                   	push   eax
c001f2f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2f5:	ff 36                	push   DWORD PTR [esi]
c001f2f7:	e8 c5 f3 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f2fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f303:	89 c6                	mov    esi,eax
c001f305:	89 d7                	mov    edi,edx
c001f307:	e8 21 f6 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f30c:	57                   	push   edi
c001f30d:	56                   	push   esi
c001f30e:	52                   	push   edx
c001f30f:	50                   	push   eax
c001f310:	e8 8e f5 ff ff       	call   c001e8a3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f315:	e9 64 01 00 00       	jmp    c001f47e <Vm::x87Handler(regs*)+0xa14>
c001f31a:	80 fa 01             	cmp    dl,0x1
c001f31d:	75 11                	jne    c001f330 <Vm::x87Handler(regs*)+0x8c6>
c001f31f:	50                   	push   eax
c001f320:	50                   	push   eax
c001f321:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f324:	ff 36                	push   DWORD PTR [esi]
c001f326:	e8 96 f3 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f32b:	e9 35 01 00 00       	jmp    c001f465 <Vm::x87Handler(regs*)+0x9fb>
c001f330:	80 fa 02             	cmp    dl,0x2
c001f333:	0f 85 54 f9 ff ff    	jne    c001ec8d <Vm::x87Handler(regs*)+0x223>
c001f339:	55                   	push   ebp
c001f33a:	55                   	push   ebp
c001f33b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f33e:	ff 36                	push   DWORD PTR [esi]
c001f340:	e8 7c f3 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f345:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f34c:	89 c6                	mov    esi,eax
c001f34e:	89 d7                	mov    edi,edx
c001f350:	e8 d8 f5 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f355:	57                   	push   edi
c001f356:	56                   	push   esi
c001f357:	52                   	push   edx
c001f358:	50                   	push   eax
c001f359:	e8 f2 f4 ff ff       	call   c001e850 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f362:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f365:	83 c4 20             	add    esp,0x20
c001f368:	e9 74 f7 ff ff       	jmp    c001eae1 <Vm::x87Handler(regs*)+0x77>
c001f36d:	80 fa 04             	cmp    dl,0x4
c001f370:	75 2a                	jne    c001f39c <Vm::x87Handler(regs*)+0x932>
c001f372:	51                   	push   ecx
c001f373:	51                   	push   ecx
c001f374:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f377:	ff 36                	push   DWORD PTR [esi]
c001f379:	e8 43 f3 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f37e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f385:	89 c6                	mov    esi,eax
c001f387:	89 d7                	mov    edi,edx
c001f389:	e8 9f f5 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f38e:	57                   	push   edi
c001f38f:	56                   	push   esi
c001f390:	52                   	push   edx
c001f391:	50                   	push   eax
c001f392:	e8 36 f5 ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f397:	e9 e2 00 00 00       	jmp    c001f47e <Vm::x87Handler(regs*)+0xa14>
c001f39c:	80 fa 05             	cmp    dl,0x5
c001f39f:	75 28                	jne    c001f3c9 <Vm::x87Handler(regs*)+0x95f>
c001f3a1:	83 ec 0c             	sub    esp,0xc
c001f3a4:	6a 00                	push   0x0
c001f3a6:	e8 82 f5 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f3ab:	89 c7                	mov    edi,eax
c001f3ad:	89 d5                	mov    ebp,edx
c001f3af:	58                   	pop    eax
c001f3b0:	5a                   	pop    edx
c001f3b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3b4:	ff 36                	push   DWORD PTR [esi]
c001f3b6:	e8 06 f3 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f3bb:	83 c4 10             	add    esp,0x10
c001f3be:	55                   	push   ebp
c001f3bf:	57                   	push   edi
c001f3c0:	52                   	push   edx
c001f3c1:	50                   	push   eax
c001f3c2:	e8 06 f5 ff ff       	call   c001e8cd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3c7:	eb 60                	jmp    c001f429 <Vm::x87Handler(regs*)+0x9bf>
c001f3c9:	80 fa 06             	cmp    dl,0x6
c001f3cc:	75 2a                	jne    c001f3f8 <Vm::x87Handler(regs*)+0x98e>
c001f3ce:	51                   	push   ecx
c001f3cf:	51                   	push   ecx
c001f3d0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3d3:	ff 36                	push   DWORD PTR [esi]
c001f3d5:	e8 e7 f2 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f3da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3e1:	89 c6                	mov    esi,eax
c001f3e3:	89 d7                	mov    edi,edx
c001f3e5:	e8 43 f5 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f3ea:	57                   	push   edi
c001f3eb:	56                   	push   esi
c001f3ec:	52                   	push   edx
c001f3ed:	50                   	push   eax
c001f3ee:	e8 08 f5 ff ff       	call   c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3f3:	e9 86 00 00 00       	jmp    c001f47e <Vm::x87Handler(regs*)+0xa14>
c001f3f8:	31 c0                	xor    eax,eax
c001f3fa:	80 fa 07             	cmp    dl,0x7
c001f3fd:	0f 85 c8 00 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	6a 00                	push   0x0
c001f408:	e8 20 f5 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f40d:	89 c7                	mov    edi,eax
c001f40f:	89 d5                	mov    ebp,edx
c001f411:	58                   	pop    eax
c001f412:	5a                   	pop    edx
c001f413:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f416:	ff 36                	push   DWORD PTR [esi]
c001f418:	e8 a4 f2 ff ff       	call   c001e6c1 <Vm::fpu64ToInternal(unsigned long long)>
c001f41d:	83 c4 10             	add    esp,0x10
c001f420:	55                   	push   ebp
c001f421:	57                   	push   edi
c001f422:	52                   	push   edx
c001f423:	50                   	push   eax
c001f424:	e8 d2 f4 ff ff       	call   c001e8fb <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f429:	83 c4 0c             	add    esp,0xc
c001f42c:	eb 53                	jmp    c001f481 <Vm::x87Handler(regs*)+0xa17>
c001f42e:	31 c0                	xor    eax,eax
c001f430:	80 fa 02             	cmp    dl,0x2
c001f433:	0f 85 92 00 00 00    	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f439:	83 ec 0c             	sub    esp,0xc
c001f43c:	6a 00                	push   0x0
c001f43e:	e8 ea f4 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f443:	59                   	pop    ecx
c001f444:	5f                   	pop    edi
c001f445:	52                   	push   edx
c001f446:	50                   	push   eax
c001f447:	e8 27 f2 ff ff       	call   c001e673 <Vm::fpuInternalTo64(unsigned long long)>
c001f44c:	eb 70                	jmp    c001f4be <Vm::x87Handler(regs*)+0xa54>
c001f44e:	31 c0                	xor    eax,eax
c001f450:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f455:	75 74                	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f457:	50                   	push   eax
c001f458:	50                   	push   eax
c001f459:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f45c:	31 d2                	xor    edx,edx
c001f45e:	52                   	push   edx
c001f45f:	50                   	push   eax
c001f460:	e8 f6 f2 ff ff       	call   c001e75b <Vm::fpuLongToFloat(long long)>
c001f465:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f46c:	89 c6                	mov    esi,eax
c001f46e:	89 d7                	mov    edi,edx
c001f470:	e8 b8 f4 ff ff       	call   c001e92d <Vm::fpuGetReg(int)>
c001f475:	57                   	push   edi
c001f476:	56                   	push   esi
c001f477:	52                   	push   edx
c001f478:	50                   	push   eax
c001f479:	e8 5e f4 ff ff       	call   c001e8dc <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f47e:	83 c4 1c             	add    esp,0x1c
c001f481:	52                   	push   edx
c001f482:	50                   	push   eax
c001f483:	6a 00                	push   0x0
c001f485:	e8 e6 f4 ff ff       	call   c001e970 <Vm::fpuSetReg(int, unsigned long long)>
c001f48a:	e9 f2 f7 ff ff       	jmp    c001ec81 <Vm::x87Handler(regs*)+0x217>
c001f48f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f493:	80 fa 05             	cmp    dl,0x5
c001f496:	75 11                	jne    c001f4a9 <Vm::x87Handler(regs*)+0xa3f>
c001f498:	55                   	push   ebp
c001f499:	55                   	push   ebp
c001f49a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f49d:	ff 36                	push   DWORD PTR [esi]
c001f49f:	e8 81 f2 ff ff       	call   c001e725 <Vm::fpuULongToFloat(unsigned long long)>
c001f4a4:	e9 cf f7 ff ff       	jmp    c001ec78 <Vm::x87Handler(regs*)+0x20e>
c001f4a9:	31 c0                	xor    eax,eax
c001f4ab:	80 fa 07             	cmp    dl,0x7
c001f4ae:	75 1b                	jne    c001f4cb <Vm::x87Handler(regs*)+0xa61>
c001f4b0:	e8 63 f5 ff ff       	call   c001ea18 <Vm::fpuPop()>
c001f4b5:	51                   	push   ecx
c001f4b6:	51                   	push   ecx
c001f4b7:	52                   	push   edx
c001f4b8:	50                   	push   eax
c001f4b9:	e8 0c f2 ff ff       	call   c001e6ca <Vm::fpuFloatToLong(unsigned long long)>
c001f4be:	83 c4 10             	add    esp,0x10
c001f4c1:	89 06                	mov    DWORD PTR [esi],eax
c001f4c3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f4c6:	e9 f8 f7 ff ff       	jmp    c001ecc3 <Vm::x87Handler(regs*)+0x259>
c001f4cb:	83 c4 1c             	add    esp,0x1c
c001f4ce:	5b                   	pop    ebx
c001f4cf:	5e                   	pop    esi
c001f4d0:	5f                   	pop    edi
c001f4d1:	5d                   	pop    ebp
c001f4d2:	c3                   	ret    

c001f4d3 <__static_initialization_and_destruction_0(int, int)>:
c001f4d3:	83 ec 0c             	sub    esp,0xc
c001f4d6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f4db:	75 1a                	jne    c001f4f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f4dd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f4e5:	75 10                	jne    c001f4f7 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f4e7:	83 ec 0c             	sub    esp,0xc
c001f4ea:	68 c0 df 02 c0       	push   0xc002dfc0
c001f4ef:	e8 bc 82 00 00       	call   c00277b0 <Vm::_FPUState::_FPUState()>
c001f4f4:	83 c4 10             	add    esp,0x10
c001f4f7:	90                   	nop
c001f4f8:	83 c4 0c             	add    esp,0xc
c001f4fb:	c3                   	ret    

c001f4fc <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f4fc:	83 ec 0c             	sub    esp,0xc
c001f4ff:	83 ec 08             	sub    esp,0x8
c001f502:	68 ff ff 00 00       	push   0xffff
c001f507:	6a 01                	push   0x1
c001f509:	e8 c5 ff ff ff       	call   c001f4d3 <__static_initialization_and_destruction_0(int, int)>
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	83 c4 0c             	add    esp,0xc
c001f514:	c3                   	ret    
c001f515:	90                   	nop

c001f516 <FAT::getName()>:
c001f516:	b8 4c ae 02 c0       	mov    eax,0xc002ae4c
c001f51b:	c3                   	ret    

c001f51c <FAT::tell(void*, unsigned long long*)>:
c001f51c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f521:	75 06                	jne    c001f529 <FAT::tell(void*, unsigned long long*)+0xd>
c001f523:	b8 04 00 00 00       	mov    eax,0x4
c001f528:	c3                   	ret    
c001f529:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f52e:	75 06                	jne    c001f536 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f530:	b8 04 00 00 00       	mov    eax,0x4
c001f535:	c3                   	ret    
c001f536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f53a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f53d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f540:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f544:	89 01                	mov    DWORD PTR [ecx],eax
c001f546:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f549:	b8 00 00 00 00       	mov    eax,0x0
c001f54e:	c3                   	ret    
c001f54f:	90                   	nop

c001f550 <FAT::stat(void*, unsigned long long*)>:
c001f550:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f555:	75 06                	jne    c001f55d <FAT::stat(void*, unsigned long long*)+0xd>
c001f557:	b8 04 00 00 00       	mov    eax,0x4
c001f55c:	c3                   	ret    
c001f55d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f562:	75 06                	jne    c001f56a <FAT::stat(void*, unsigned long long*)+0x1a>
c001f564:	b8 04 00 00 00       	mov    eax,0x4
c001f569:	c3                   	ret    
c001f56a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f56e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f571:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f578:	89 01                	mov    DWORD PTR [ecx],eax
c001f57a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f57d:	b8 00 00 00 00       	mov    eax,0x0
c001f582:	c3                   	ret    
c001f583:	90                   	nop

c001f584 <FAT::~FAT()>:
c001f584:	83 ec 0c             	sub    esp,0xc
c001f587:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c001f58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f590:	89 10                	mov    DWORD PTR [eax],edx
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	83 ec 0c             	sub    esp,0xc
c001f599:	50                   	push   eax
c001f59a:	e8 b7 35 ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c001f59f:	83 c4 10             	add    esp,0x10
c001f5a2:	90                   	nop
c001f5a3:	83 c4 0c             	add    esp,0xc
c001f5a6:	c3                   	ret    
c001f5a7:	90                   	nop

c001f5a8 <FAT::~FAT()>:
c001f5a8:	83 ec 0c             	sub    esp,0xc
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b2:	e8 cd ff ff ff       	call   c001f584 <FAT::~FAT()>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	83 ec 08             	sub    esp,0x8
c001f5bd:	6a 08                	push   0x8
c001f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c3:	e8 85 31 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	83 c4 0c             	add    esp,0xc
c001f5ce:	c3                   	ret    
c001f5cf:	90                   	nop

c001f5d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f5d0:	83 ec 1c             	sub    esp,0x1c
c001f5d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f5da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f5df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5e3:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f5ea:	83 f8 ff             	cmp    eax,0xffffffff
c001f5ed:	75 34                	jne    c001f623 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f5ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f5f3:	88 c2                	mov    dl,al
c001f5f5:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f5fa:	01 d0                	add    eax,edx
c001f5fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f600:	8b 15 20 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e020
c001f606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f60a:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f611:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f61a:	89 14 85 c0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f40],edx
c001f621:	eb 17                	jmp    c001f63a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f623:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f627:	88 c2                	mov    dl,al
c001f629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f62d:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f634:	01 d0                	add    eax,edx
c001f636:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f63a:	83 ec 04             	sub    esp,0x4
c001f63d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f641:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f645:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f649:	50                   	push   eax
c001f64a:	e8 99 74 fe ff       	call   c0006ae8 <f_getlabel>
c001f64f:	83 c4 10             	add    esp,0x10
c001f652:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f656:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f65b:	75 07                	jne    c001f664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f65d:	b8 00 00 00 00       	mov    eax,0x0
c001f662:	eb 05                	jmp    c001f669 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f664:	b8 01 00 00 00       	mov    eax,0x1
c001f669:	83 c4 1c             	add    esp,0x1c
c001f66c:	c3                   	ret    
c001f66d:	90                   	nop

c001f66e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f66e:	57                   	push   edi
c001f66f:	83 ec 58             	sub    esp,0x58
c001f672:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f67a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f67e:	b9 0f 00 00 00       	mov    ecx,0xf
c001f683:	b8 00 00 00 00       	mov    eax,0x0
c001f688:	fc                   	cld    
c001f689:	89 d7                	mov    edi,edx
c001f68b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f68d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f691:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f698:	83 f8 ff             	cmp    eax,0xffffffff
c001f69b:	75 34                	jne    c001f6d1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f69d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f6a1:	88 c2                	mov    dl,al
c001f6a3:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f6a8:	01 d0                	add    eax,edx
c001f6aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f6ae:	8b 15 20 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e020
c001f6b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6b8:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f6bf:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f6c4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f6c8:	89 14 85 c0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f40],edx
c001f6cf:	eb 17                	jmp    c001f6e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f6d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f6d5:	88 c2                	mov    dl,al
c001f6d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6db:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f6e2:	01 d0                	add    eax,edx
c001f6e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f6e8:	83 ec 08             	sub    esp,0x8
c001f6eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f6ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6f3:	50                   	push   eax
c001f6f4:	e8 e8 10 fe ff       	call   c00007e1 <strcat>
c001f6f9:	83 c4 10             	add    esp,0x10
c001f6fc:	83 ec 0c             	sub    esp,0xc
c001f6ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f703:	50                   	push   eax
c001f704:	e8 cd 75 fe ff       	call   c0006cd6 <f_setlabel>
c001f709:	83 c4 10             	add    esp,0x10
c001f70c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f710:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f715:	75 07                	jne    c001f71e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f717:	b8 00 00 00 00       	mov    eax,0x0
c001f71c:	eb 05                	jmp    c001f723 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f71e:	b8 01 00 00 00       	mov    eax,0x1
c001f723:	83 c4 58             	add    esp,0x58
c001f726:	5f                   	pop    edi
c001f727:	c3                   	ret    

c001f728 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f728:	83 ec 2c             	sub    esp,0x2c
c001f72b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f733:	83 ec 08             	sub    esp,0x8
c001f736:	68 70 ae 02 c0       	push   0xc002ae70
c001f73b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f73f:	e8 37 10 fe ff       	call   c000077b <strcmp>
c001f744:	83 c4 10             	add    esp,0x10
c001f747:	85 c0                	test   eax,eax
c001f749:	0f 94 c0             	sete   al
c001f74c:	84 c0                	test   al,al
c001f74e:	74 0d                	je     c001f75d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f750:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f758:	e9 a6 00 00 00       	jmp    c001f803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f75d:	83 ec 08             	sub    esp,0x8
c001f760:	68 62 ae 02 c0       	push   0xc002ae62
c001f765:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f769:	e8 0d 10 fe ff       	call   c000077b <strcmp>
c001f76e:	83 c4 10             	add    esp,0x10
c001f771:	85 c0                	test   eax,eax
c001f773:	0f 94 c0             	sete   al
c001f776:	84 c0                	test   al,al
c001f778:	74 0a                	je     c001f784 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f77a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f782:	eb 7f                	jmp    c001f803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f784:	83 ec 08             	sub    esp,0x8
c001f787:	68 68 ae 02 c0       	push   0xc002ae68
c001f78c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f790:	e8 e6 0f fe ff       	call   c000077b <strcmp>
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	85 c0                	test   eax,eax
c001f79a:	0f 94 c0             	sete   al
c001f79d:	84 c0                	test   al,al
c001f79f:	74 0a                	je     c001f7ab <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f7a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f7a9:	eb 58                	jmp    c001f803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f7ab:	83 ec 08             	sub    esp,0x8
c001f7ae:	68 cc 7e 02 c0       	push   0xc0027ecc
c001f7b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f7b7:	e8 bf 0f fe ff       	call   c000077b <strcmp>
c001f7bc:	83 c4 10             	add    esp,0x10
c001f7bf:	85 c0                	test   eax,eax
c001f7c1:	0f 94 c0             	sete   al
c001f7c4:	84 c0                	test   al,al
c001f7c6:	74 0a                	je     c001f7d2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f7c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f7d0:	eb 31                	jmp    c001f803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f7d2:	83 ec 08             	sub    esp,0x8
c001f7d5:	68 6e ae 02 c0       	push   0xc002ae6e
c001f7da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f7de:	e8 98 0f fe ff       	call   c000077b <strcmp>
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	85 c0                	test   eax,eax
c001f7e8:	0f 94 c0             	sete   al
c001f7eb:	84 c0                	test   al,al
c001f7ed:	74 0a                	je     c001f7f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f7ef:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f7f7:	eb 0a                	jmp    c001f803 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f7f9:	b8 08 00 00 00       	mov    eax,0x8
c001f7fe:	e9 04 01 00 00       	jmp    c001f907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f803:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f80a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f80f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f813:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f81a:	83 f8 ff             	cmp    eax,0xffffffff
c001f81d:	75 34                	jne    c001f853 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f81f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f823:	88 c2                	mov    dl,al
c001f825:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f82a:	01 d0                	add    eax,edx
c001f82c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f830:	8b 15 20 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e020
c001f836:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f83a:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f841:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f846:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f84a:	89 14 85 c0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f40],edx
c001f851:	eb 17                	jmp    c001f86a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f853:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f857:	88 c2                	mov    dl,al
c001f859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f85d:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f864:	01 d0                	add    eax,edx
c001f866:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f86a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f86e:	88 04 24             	mov    BYTE PTR [esp],al
c001f871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f881:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f886:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f88e:	83 ec 0c             	sub    esp,0xc
c001f891:	68 00 20 00 00       	push   0x2000
c001f896:	e8 39 fc fe ff       	call   c000f4d4 <malloc>
c001f89b:	83 c4 10             	add    esp,0x10
c001f89e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f8a2:	68 00 20 00 00       	push   0x2000
c001f8a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f8af:	50                   	push   eax
c001f8b0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f8b4:	50                   	push   eax
c001f8b5:	e8 67 78 fe ff       	call   c0007121 <f_mkfs>
c001f8ba:	83 c4 10             	add    esp,0x10
c001f8bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f8c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8c6:	75 07                	jne    c001f8cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f8c8:	b8 00 00 00 00       	mov    eax,0x0
c001f8cd:	eb 38                	jmp    c001f907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f8cf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f8d4:	75 17                	jne    c001f8ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	68 a0 ae 02 c0       	push   0xc002aea0
c001f8de:	e8 4a 2f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	b8 09 00 00 00       	mov    eax,0x9
c001f8eb:	eb 1a                	jmp    c001f907 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f8ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8f1:	83 ec 08             	sub    esp,0x8
c001f8f4:	50                   	push   eax
c001f8f5:	68 74 ae 02 c0       	push   0xc002ae74
c001f8fa:	e8 2e 2f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	b8 01 00 00 00       	mov    eax,0x1
c001f907:	83 c4 2c             	add    esp,0x2c
c001f90a:	c3                   	ret    
c001f90b:	90                   	nop

c001f90c <FAT::tryMount(LogicalDisk*, int)>:
c001f90c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f912:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f917:	83 f8 14             	cmp    eax,0x14
c001f91a:	75 17                	jne    c001f933 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f91c:	83 ec 0c             	sub    esp,0xc
c001f91f:	68 86 ae 02 c0       	push   0xc002ae86
c001f924:	e8 1e a0 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	b0 00                	mov    al,0x0
c001f92e:	e9 d7 01 00 00       	jmp    c001fb0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f933:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f93a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f940:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f946:	3d 00 02 00 00       	cmp    eax,0x200
c001f94b:	74 07                	je     c001f954 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f94d:	b0 00                	mov    al,0x0
c001f94f:	e9 b6 01 00 00       	jmp    c001fb0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f954:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f95c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f963:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001f96a:	83 f8 ff             	cmp    eax,0xffffffff
c001f96d:	74 07                	je     c001f976 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f96f:	b0 01                	mov    al,0x1
c001f971:	e9 94 01 00 00       	jmp    c001fb0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f976:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f980:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f988:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f98f:	88 c2                	mov    dl,al
c001f991:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f996:	01 d0                	add    eax,edx
c001f998:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f99f:	8b 15 20 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e020
c001f9a5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f9ac:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f9b3:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001f9b8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f9bf:	89 14 85 c0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f40],edx
c001f9c6:	83 ec 0c             	sub    esp,0xc
c001f9c9:	68 54 02 00 00       	push   0x254
c001f9ce:	e8 01 fb fe ff       	call   c000f4d4 <malloc>
c001f9d3:	83 c4 10             	add    esp,0x10
c001f9d6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f9dd:	83 ec 04             	sub    esp,0x4
c001f9e0:	6a 00                	push   0x0
c001f9e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f9e9:	50                   	push   eax
c001f9ea:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f9f1:	e8 e9 52 fe ff       	call   c0004cdf <f_mount>
c001f9f6:	83 c4 10             	add    esp,0x10
c001f9f9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fa00:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fa08:	74 19                	je     c001fa23 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa14:	e8 db fa fe ff       	call   c000f4f4 <rfree>
c001fa19:	83 c4 10             	add    esp,0x10
c001fa1c:	b0 00                	mov    al,0x0
c001fa1e:	e9 e7 00 00 00       	jmp    c001fb0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa23:	83 ec 04             	sub    esp,0x4
c001fa26:	68 00 01 00 00       	push   0x100
c001fa2b:	6a 00                	push   0x0
c001fa2d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa34:	50                   	push   eax
c001fa35:	e8 51 0c fe ff       	call   c000068b <memset>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	83 ec 08             	sub    esp,0x8
c001fa40:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa47:	50                   	push   eax
c001fa48:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa4f:	50                   	push   eax
c001fa50:	e8 8c 0d fe ff       	call   c00007e1 <strcat>
c001fa55:	83 c4 10             	add    esp,0x10
c001fa58:	83 ec 08             	sub    esp,0x8
c001fa5b:	68 94 ae 02 c0       	push   0xc002ae94
c001fa60:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa67:	50                   	push   eax
c001fa68:	e8 74 0d fe ff       	call   c00007e1 <strcat>
c001fa6d:	83 c4 10             	add    esp,0x10
c001fa70:	83 ec 04             	sub    esp,0x4
c001fa73:	6a 01                	push   0x1
c001fa75:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fa7c:	50                   	push   eax
c001fa7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa81:	50                   	push   eax
c001fa82:	e8 ba 52 fe ff       	call   c0004d41 <f_open>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fa91:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fa98:	85 c0                	test   eax,eax
c001fa9a:	74 0a                	je     c001faa6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fa9c:	78 2d                	js     c001facb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa9e:	83 e8 04             	sub    eax,0x4
c001faa1:	83 f8 01             	cmp    eax,0x1
c001faa4:	77 25                	ja     c001facb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001faa6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001faae:	83 ec 0c             	sub    esp,0xc
c001fab1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fab5:	50                   	push   eax
c001fab6:	e8 d8 5d fe ff       	call   c0005893 <f_close>
c001fabb:	83 c4 10             	add    esp,0x10
c001fabe:	90                   	nop
c001fabf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fac7:	74 3a                	je     c001fb03 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fac9:	eb 2d                	jmp    c001faf8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fad5:	e8 1a fa fe ff       	call   c000f4f4 <rfree>
c001fada:	83 c4 10             	add    esp,0x10
c001fadd:	83 ec 04             	sub    esp,0x4
c001fae0:	6a 00                	push   0x0
c001fae2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fae9:	50                   	push   eax
c001faea:	6a 00                	push   0x0
c001faec:	e8 ee 51 fe ff       	call   c0004cdf <f_mount>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	b0 00                	mov    al,0x0
c001faf6:	eb 12                	jmp    c001fb0a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001faf8:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001fafd:	40                   	inc    eax
c001fafe:	a3 20 e0 02 c0       	mov    ds:0xc002e020,eax
c001fb03:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fb0a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fb10:	c3                   	ret    
c001fb11:	90                   	nop

c001fb12 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fb12:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fb18:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fb20:	74 0a                	je     c001fb2c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fb22:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fb2a:	75 0a                	jne    c001fb36 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fb2c:	b8 04 00 00 00       	mov    eax,0x4
c001fb31:	e9 db 00 00 00       	jmp    c001fc11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb36:	83 ec 08             	sub    esp,0x8
c001fb39:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb40:	50                   	push   eax
c001fb41:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fb48:	e8 50 63 fe ff       	call   c0005e9d <f_readdir>
c001fb4d:	83 c4 10             	add    esp,0x10
c001fb50:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fb57:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fb5d:	83 ec 0c             	sub    esp,0xc
c001fb60:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fb67:	83 c0 1a             	add    eax,0x1a
c001fb6a:	50                   	push   eax
c001fb6b:	e8 38 0b fe ff       	call   c00006a8 <strlen>
c001fb70:	83 c4 10             	add    esp,0x10
c001fb73:	ba 00 00 00 00       	mov    edx,0x0
c001fb78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fb7c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb80:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fb87:	0f b6 c0             	movzx  eax,al
c001fb8a:	83 e0 10             	and    eax,0x10
c001fb8d:	74 07                	je     c001fb96 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fb8f:	b8 02 00 00 00       	mov    eax,0x2
c001fb94:	eb 05                	jmp    c001fb9b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fb96:	b8 01 00 00 00       	mov    eax,0x1
c001fb9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb9f:	83 ec 08             	sub    esp,0x8
c001fba2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fba9:	83 c0 1a             	add    eax,0x1a
c001fbac:	50                   	push   eax
c001fbad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fbb1:	83 c0 10             	add    eax,0x10
c001fbb4:	50                   	push   eax
c001fbb5:	e8 70 0b fe ff       	call   c000072a <strcpy>
c001fbba:	83 c4 10             	add    esp,0x10
c001fbbd:	83 ec 04             	sub    esp,0x4
c001fbc0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fbc7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbcb:	50                   	push   eax
c001fbcc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fbd3:	e8 7d 0a fe ff       	call   c0000655 <memcpy>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fbe2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fbe8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fbef:	84 c0                	test   al,al
c001fbf1:	75 07                	jne    c001fbfa <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fbf3:	b8 07 00 00 00       	mov    eax,0x7
c001fbf8:	eb 17                	jmp    c001fc11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fbfa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fc01:	85 c0                	test   eax,eax
c001fc03:	75 07                	jne    c001fc0c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fc05:	b8 00 00 00 00       	mov    eax,0x0
c001fc0a:	eb 05                	jmp    c001fc11 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fc0c:	b8 01 00 00 00       	mov    eax,0x1
c001fc11:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fc17:	c3                   	ret    

c001fc18 <FAT::read(void*, unsigned long, void*, int*)>:
c001fc18:	83 ec 1c             	sub    esp,0x1c
c001fc1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc20:	74 07                	je     c001fc29 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fc22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fc27:	75 07                	jne    c001fc30 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fc29:	b8 04 00 00 00       	mov    eax,0x4
c001fc2e:	eb 3d                	jmp    c001fc6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fc30:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc34:	50                   	push   eax
c001fc35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fc3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc41:	e8 37 55 fe ff       	call   c000517d <f_read>
c001fc46:	83 c4 10             	add    esp,0x10
c001fc49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc51:	89 c2                	mov    edx,eax
c001fc53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc57:	89 10                	mov    DWORD PTR [eax],edx
c001fc59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	75 07                	jne    c001fc68 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fc61:	b8 00 00 00 00       	mov    eax,0x0
c001fc66:	eb 05                	jmp    c001fc6d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fc68:	b8 01 00 00 00       	mov    eax,0x1
c001fc6d:	83 c4 1c             	add    esp,0x1c
c001fc70:	c3                   	ret    
c001fc71:	90                   	nop

c001fc72 <FAT::write(void*, unsigned long, void*, int*)>:
c001fc72:	83 ec 1c             	sub    esp,0x1c
c001fc75:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc7a:	74 07                	je     c001fc83 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fc7c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fc81:	75 07                	jne    c001fc8a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fc83:	b8 04 00 00 00       	mov    eax,0x4
c001fc88:	eb 3d                	jmp    c001fcc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc8e:	50                   	push   eax
c001fc8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fc97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc9b:	e8 5d 57 fe ff       	call   c00053fd <f_write>
c001fca0:	83 c4 10             	add    esp,0x10
c001fca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcab:	89 c2                	mov    edx,eax
c001fcad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fcb1:	89 10                	mov    DWORD PTR [eax],edx
c001fcb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcb7:	85 c0                	test   eax,eax
c001fcb9:	75 07                	jne    c001fcc2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fcbb:	b8 00 00 00 00       	mov    eax,0x0
c001fcc0:	eb 05                	jmp    c001fcc7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fcc2:	b8 01 00 00 00       	mov    eax,0x1
c001fcc7:	83 c4 1c             	add    esp,0x1c
c001fcca:	c3                   	ret    
c001fccb:	90                   	nop

c001fccc <FAT::close(void*)>:
c001fccc:	83 ec 1c             	sub    esp,0x1c
c001fccf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fcd4:	75 07                	jne    c001fcdd <FAT::close(void*)+0x11>
c001fcd6:	b8 04 00 00 00       	mov    eax,0x4
c001fcdb:	eb 36                	jmp    c001fd13 <FAT::close(void*)+0x47>
c001fcdd:	83 ec 0c             	sub    esp,0xc
c001fce0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fce4:	e8 aa 5b fe ff       	call   c0005893 <f_close>
c001fce9:	83 c4 10             	add    esp,0x10
c001fcec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcf0:	83 ec 0c             	sub    esp,0xc
c001fcf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcf7:	e8 e8 f7 fe ff       	call   c000f4e4 <free>
c001fcfc:	83 c4 10             	add    esp,0x10
c001fcff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd03:	85 c0                	test   eax,eax
c001fd05:	75 07                	jne    c001fd0e <FAT::close(void*)+0x42>
c001fd07:	b8 00 00 00 00       	mov    eax,0x0
c001fd0c:	eb 05                	jmp    c001fd13 <FAT::close(void*)+0x47>
c001fd0e:	b8 01 00 00 00       	mov    eax,0x1
c001fd13:	83 c4 1c             	add    esp,0x1c
c001fd16:	c3                   	ret    
c001fd17:	90                   	nop

c001fd18 <FAT::closeDir(void*)>:
c001fd18:	83 ec 1c             	sub    esp,0x1c
c001fd1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fd20:	75 07                	jne    c001fd29 <FAT::closeDir(void*)+0x11>
c001fd22:	b8 04 00 00 00       	mov    eax,0x4
c001fd27:	eb 36                	jmp    c001fd5f <FAT::closeDir(void*)+0x47>
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd30:	e8 46 61 fe ff       	call   c0005e7b <f_closedir>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd3c:	83 ec 0c             	sub    esp,0xc
c001fd3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd43:	e8 9c f7 fe ff       	call   c000f4e4 <free>
c001fd48:	83 c4 10             	add    esp,0x10
c001fd4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd4f:	85 c0                	test   eax,eax
c001fd51:	75 07                	jne    c001fd5a <FAT::closeDir(void*)+0x42>
c001fd53:	b8 00 00 00 00       	mov    eax,0x0
c001fd58:	eb 05                	jmp    c001fd5f <FAT::closeDir(void*)+0x47>
c001fd5a:	b8 01 00 00 00       	mov    eax,0x1
c001fd5f:	83 c4 1c             	add    esp,0x1c
c001fd62:	c3                   	ret    
c001fd63:	90                   	nop

c001fd64 <FAT::seek(void*, unsigned long long)>:
c001fd64:	83 ec 2c             	sub    esp,0x2c
c001fd67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fd73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fd7c:	75 07                	jne    c001fd85 <FAT::seek(void*, unsigned long long)+0x21>
c001fd7e:	b8 04 00 00 00       	mov    eax,0x4
c001fd83:	eb 2f                	jmp    c001fdb4 <FAT::seek(void*, unsigned long long)+0x50>
c001fd85:	83 ec 04             	sub    esp,0x4
c001fd88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd90:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fd94:	e8 29 5b fe ff       	call   c00058c2 <f_lseek>
c001fd99:	83 c4 10             	add    esp,0x10
c001fd9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fda0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fda4:	85 c0                	test   eax,eax
c001fda6:	75 07                	jne    c001fdaf <FAT::seek(void*, unsigned long long)+0x4b>
c001fda8:	b8 00 00 00 00       	mov    eax,0x0
c001fdad:	eb 05                	jmp    c001fdb4 <FAT::seek(void*, unsigned long long)+0x50>
c001fdaf:	b8 01 00 00 00       	mov    eax,0x1
c001fdb4:	83 c4 2c             	add    esp,0x2c
c001fdb7:	c3                   	ret    

c001fdb8 <fatWrapperReadDisk>:
c001fdb8:	83 ec 1c             	sub    esp,0x1c
c001fdbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdc7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fdce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fdd2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdd7:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c001fdde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fde2:	83 ec 0c             	sub    esp,0xc
c001fde5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fde9:	52                   	push   edx
c001fdea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdf2:	50                   	push   eax
c001fdf3:	e8 c2 60 ff ff       	call   c0015eba <LogicalDisk::read(unsigned long long, int, void*)>
c001fdf8:	83 c4 20             	add    esp,0x20
c001fdfb:	83 c4 1c             	add    esp,0x1c
c001fdfe:	c3                   	ret    

c001fdff <fatWrapperWriteDisk>:
c001fdff:	83 ec 1c             	sub    esp,0x1c
c001fe02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe06:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fe15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe1e:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c001fe25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fe29:	83 ec 0c             	sub    esp,0xc
c001fe2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe30:	52                   	push   edx
c001fe31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe39:	50                   	push   eax
c001fe3a:	e8 e7 60 ff ff       	call   c0015f26 <LogicalDisk::write(unsigned long long, int, void*)>
c001fe3f:	83 c4 20             	add    esp,0x20
c001fe42:	83 c4 1c             	add    esp,0x1c
c001fe45:	c3                   	ret    

c001fe46 <fatWrapperIoctl>:
c001fe46:	53                   	push   ebx
c001fe47:	83 ec 28             	sub    esp,0x28
c001fe4a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fe4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fe52:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fe56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fe5a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fe5f:	75 31                	jne    c001fe92 <fatWrapperIoctl+0x4c>
c001fe61:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe6e:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c001fe75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fe81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe85:	66 89 02             	mov    WORD PTR [edx],ax
c001fe88:	b8 00 00 00 00       	mov    eax,0x0
c001fe8d:	e9 b2 00 00 00       	jmp    c001ff44 <fatWrapperIoctl+0xfe>
c001fe92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fe97:	75 6a                	jne    c001ff03 <fatWrapperIoctl+0xbd>
c001fe99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fea1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fea6:	8b 04 85 20 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fe0]
c001fead:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001feb3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001feb9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001febf:	89 c8                	mov    eax,ecx
c001fec1:	89 da                	mov    edx,ebx
c001fec3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fec7:	c1 e0 0a             	shl    eax,0xa
c001feca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fecf:	8b 0c 8d 20 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2fe0]
c001fed6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fedc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fee2:	89 cb                	mov    ebx,ecx
c001fee4:	c1 fb 1f             	sar    ebx,0x1f
c001fee7:	53                   	push   ebx
c001fee8:	51                   	push   ecx
c001fee9:	52                   	push   edx
c001feea:	50                   	push   eax
c001feeb:	e8 6c 55 00 00       	call   c002545c <__udivdi3>
c001fef0:	83 c4 10             	add    esp,0x10
c001fef3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fef7:	89 01                	mov    DWORD PTR [ecx],eax
c001fef9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fefc:	b8 00 00 00 00       	mov    eax,0x0
c001ff01:	eb 41                	jmp    c001ff44 <fatWrapperIoctl+0xfe>
c001ff03:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ff08:	75 07                	jne    c001ff11 <fatWrapperIoctl+0xcb>
c001ff0a:	b8 00 00 00 00       	mov    eax,0x0
c001ff0f:	eb 33                	jmp    c001ff44 <fatWrapperIoctl+0xfe>
c001ff11:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ff16:	75 19                	jne    c001ff31 <fatWrapperIoctl+0xeb>
c001ff18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ff20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff24:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ff2a:	b8 00 00 00 00       	mov    eax,0x0
c001ff2f:	eb 13                	jmp    c001ff44 <fatWrapperIoctl+0xfe>
c001ff31:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ff36:	75 07                	jne    c001ff3f <fatWrapperIoctl+0xf9>
c001ff38:	b8 00 00 00 00       	mov    eax,0x0
c001ff3d:	eb 05                	jmp    c001ff44 <fatWrapperIoctl+0xfe>
c001ff3f:	b8 04 00 00 00       	mov    eax,0x4
c001ff44:	83 c4 28             	add    esp,0x28
c001ff47:	5b                   	pop    ebx
c001ff48:	c3                   	ret    
c001ff49:	90                   	nop

c001ff4a <FAT::FAT()>:
c001ff4a:	83 ec 1c             	sub    esp,0x1c
c001ff4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff51:	83 ec 0c             	sub    esp,0xc
c001ff54:	50                   	push   eax
c001ff55:	e8 d8 2b ff ff       	call   c0012b32 <Filesystem::Filesystem()>
c001ff5a:	83 c4 10             	add    esp,0x10
c001ff5d:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c001ff62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff66:	89 10                	mov    DWORD PTR [eax],edx
c001ff68:	c7 05 20 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e020,0x0
c001ff72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ff7a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ff7f:	7f 15                	jg     c001ff96 <FAT::FAT()+0x4c>
c001ff81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff85:	c7 04 85 40 e0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1fc0],0xffffffff
c001ff90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ff94:	eb e4                	jmp    c001ff7a <FAT::FAT()+0x30>
c001ff96:	90                   	nop
c001ff97:	83 c4 1c             	add    esp,0x1c
c001ff9a:	c3                   	ret    
c001ff9b:	90                   	nop

c001ff9c <FAT::fixFilepath(char*)>:
c001ff9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffa0:	8a 00                	mov    al,BYTE PTR [eax]
c001ffa2:	3c 40                	cmp    al,0x40
c001ffa4:	7e 2c                	jle    c001ffd2 <FAT::fixFilepath(char*)+0x36>
c001ffa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffaa:	8a 00                	mov    al,BYTE PTR [eax]
c001ffac:	83 e8 41             	sub    eax,0x41
c001ffaf:	88 c2                	mov    dl,al
c001ffb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffb5:	88 10                	mov    BYTE PTR [eax],dl
c001ffb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffbb:	8a 00                	mov    al,BYTE PTR [eax]
c001ffbd:	0f be c0             	movsx  eax,al
c001ffc0:	8b 04 85 40 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fc0]
c001ffc7:	83 c0 30             	add    eax,0x30
c001ffca:	88 c2                	mov    dl,al
c001ffcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffd0:	88 10                	mov    BYTE PTR [eax],dl
c001ffd2:	90                   	nop
c001ffd3:	c3                   	ret    

c001ffd4 <FAT::open(char const*, void**, FileOpenMode)>:
c001ffd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ffda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ffe2:	74 0a                	je     c001ffee <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ffe4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ffec:	75 0a                	jne    c001fff8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ffee:	b8 04 00 00 00       	mov    eax,0x4
c001fff3:	e9 fd 00 00 00       	jmp    c00200f5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001fff8:	83 ec 08             	sub    esp,0x8
c001fffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020002:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020006:	50                   	push   eax
c0020007:	e8 1e 07 fe ff       	call   c000072a <strcpy>
c002000c:	83 c4 10             	add    esp,0x10
c002000f:	83 ec 08             	sub    esp,0x8
c0020012:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020016:	50                   	push   eax
c0020017:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002001e:	e8 79 ff ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c0020023:	83 c4 10             	add    esp,0x10
c0020026:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002002e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020035:	83 e0 01             	and    eax,0x1
c0020038:	74 08                	je     c0020042 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002003a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020042:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020049:	83 e0 04             	and    eax,0x4
c002004c:	74 10                	je     c002005e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002004e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020056:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002005e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020065:	83 e0 02             	and    eax,0x2
c0020068:	74 08                	je     c0020072 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002006a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020072:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020079:	83 e0 08             	and    eax,0x8
c002007c:	74 08                	je     c0020086 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002007e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020086:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002008d:	83 e0 10             	and    eax,0x10
c0020090:	74 08                	je     c002009a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020092:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002009a:	83 ec 0c             	sub    esp,0xc
c002009d:	68 50 02 00 00       	push   0x250
c00200a2:	e8 2d f4 fe ff       	call   c000f4d4 <malloc>
c00200a7:	83 c4 10             	add    esp,0x10
c00200aa:	89 c2                	mov    edx,eax
c00200ac:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200b3:	89 10                	mov    DWORD PTR [eax],edx
c00200b5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00200bd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c6:	83 ec 04             	sub    esp,0x4
c00200c9:	52                   	push   edx
c00200ca:	8d 54 24 10          	lea    edx,[esp+0x10]
c00200ce:	52                   	push   edx
c00200cf:	50                   	push   eax
c00200d0:	e8 6c 4c fe ff       	call   c0004d41 <f_open>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00200df:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00200e7:	74 07                	je     c00200f0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00200e9:	b8 01 00 00 00       	mov    eax,0x1
c00200ee:	eb 05                	jmp    c00200f5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00200f0:	b8 00 00 00 00       	mov    eax,0x0
c00200f5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200fb:	c3                   	ret    

c00200fc <FAT::openDir(char const*, void**)>:
c00200fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020102:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002010a:	74 0a                	je     c0020116 <FAT::openDir(char const*, void**)+0x1a>
c002010c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020114:	75 07                	jne    c002011d <FAT::openDir(char const*, void**)+0x21>
c0020116:	b8 04 00 00 00       	mov    eax,0x4
c002011b:	eb 7d                	jmp    c002019a <FAT::openDir(char const*, void**)+0x9e>
c002011d:	83 ec 08             	sub    esp,0x8
c0020120:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020127:	8d 44 24 18          	lea    eax,[esp+0x18]
c002012b:	50                   	push   eax
c002012c:	e8 f9 05 fe ff       	call   c000072a <strcpy>
c0020131:	83 c4 10             	add    esp,0x10
c0020134:	83 ec 08             	sub    esp,0x8
c0020137:	8d 44 24 14          	lea    eax,[esp+0x14]
c002013b:	50                   	push   eax
c002013c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020143:	e8 54 fe ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c0020148:	83 c4 10             	add    esp,0x10
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	6a 4c                	push   0x4c
c0020150:	e8 7f f3 fe ff       	call   c000f4d4 <malloc>
c0020155:	83 c4 10             	add    esp,0x10
c0020158:	89 c2                	mov    edx,eax
c002015a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020161:	89 10                	mov    DWORD PTR [eax],edx
c0020163:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002016a:	8b 00                	mov    eax,DWORD PTR [eax]
c002016c:	83 ec 08             	sub    esp,0x8
c002016f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020173:	52                   	push   edx
c0020174:	50                   	push   eax
c0020175:	e8 ff 5b fe ff       	call   c0005d79 <f_opendir>
c002017a:	83 c4 10             	add    esp,0x10
c002017d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020184:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002018c:	74 07                	je     c0020195 <FAT::openDir(char const*, void**)+0x99>
c002018e:	b8 01 00 00 00       	mov    eax,0x1
c0020193:	eb 05                	jmp    c002019a <FAT::openDir(char const*, void**)+0x9e>
c0020195:	b8 00 00 00 00       	mov    eax,0x0
c002019a:	81 c4 1c 01 00 00    	add    esp,0x11c
c00201a0:	c3                   	ret    
c00201a1:	90                   	nop

c00201a2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00201a2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00201a8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00201b0:	75 0a                	jne    c00201bc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00201b2:	b8 04 00 00 00       	mov    eax,0x4
c00201b7:	e9 c9 00 00 00       	jmp    c0020285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201bc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00201c4:	75 0a                	jne    c00201d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00201c6:	b8 04 00 00 00       	mov    eax,0x4
c00201cb:	e9 b5 00 00 00       	jmp    c0020285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201d0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00201d8:	75 0a                	jne    c00201e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00201da:	b8 04 00 00 00       	mov    eax,0x4
c00201df:	e9 a1 00 00 00       	jmp    c0020285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201e4:	83 ec 08             	sub    esp,0x8
c00201e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00201ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00201f5:	50                   	push   eax
c00201f6:	e8 2f 05 fe ff       	call   c000072a <strcpy>
c00201fb:	83 c4 10             	add    esp,0x10
c00201fe:	83 ec 08             	sub    esp,0x8
c0020201:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020208:	50                   	push   eax
c0020209:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020210:	e8 87 fd ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c0020215:	83 c4 10             	add    esp,0x10
c0020218:	83 ec 08             	sub    esp,0x8
c002021b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002021f:	50                   	push   eax
c0020220:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020227:	50                   	push   eax
c0020228:	e8 0b 5d fe ff       	call   c0005f38 <f_stat>
c002022d:	83 c4 10             	add    esp,0x10
c0020230:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020237:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002023e:	85 c0                	test   eax,eax
c0020240:	74 07                	je     c0020249 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020242:	83 f8 04             	cmp    eax,0x4
c0020245:	74 32                	je     c0020279 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020247:	eb 37                	jmp    c0020280 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020249:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002024d:	0f b6 c0             	movzx  eax,al
c0020250:	83 e0 10             	and    eax,0x10
c0020253:	0f 95 c2             	setne  dl
c0020256:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002025d:	88 10                	mov    BYTE PTR [eax],dl
c002025f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020262:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020266:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002026d:	89 01                	mov    DWORD PTR [ecx],eax
c002026f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020272:	b8 00 00 00 00       	mov    eax,0x0
c0020277:	eb 0c                	jmp    c0020285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020279:	b8 02 00 00 00       	mov    eax,0x2
c002027e:	eb 05                	jmp    c0020285 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020280:	b8 01 00 00 00       	mov    eax,0x1
c0020285:	81 c4 2c 02 00 00    	add    esp,0x22c
c002028b:	c3                   	ret    

c002028c <FAT::unlink(char const*)>:
c002028c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020292:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002029a:	75 07                	jne    c00202a3 <FAT::unlink(char const*)+0x17>
c002029c:	b8 04 00 00 00       	mov    eax,0x4
c00202a1:	eb 5c                	jmp    c00202ff <FAT::unlink(char const*)+0x73>
c00202a3:	83 ec 08             	sub    esp,0x8
c00202a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00202b1:	50                   	push   eax
c00202b2:	e8 73 04 fe ff       	call   c000072a <strcpy>
c00202b7:	83 c4 10             	add    esp,0x10
c00202ba:	83 ec 08             	sub    esp,0x8
c00202bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202c1:	50                   	push   eax
c00202c2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202c9:	e8 ce fc ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c00202ce:	83 c4 10             	add    esp,0x10
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00202d8:	50                   	push   eax
c00202d9:	e8 ac 5f fe ff       	call   c000628a <f_unlink>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00202e8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00202ef:	85 c0                	test   eax,eax
c00202f1:	75 07                	jne    c00202fa <FAT::unlink(char const*)+0x6e>
c00202f3:	b8 00 00 00 00       	mov    eax,0x0
c00202f8:	eb 05                	jmp    c00202ff <FAT::unlink(char const*)+0x73>
c00202fa:	b8 01 00 00 00       	mov    eax,0x1
c00202ff:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020305:	c3                   	ret    

c0020306 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020306:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002030c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020313:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002031a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002031e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020322:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002032a:	75 0a                	jne    c0020336 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002032c:	b8 04 00 00 00       	mov    eax,0x4
c0020331:	e9 1c 01 00 00       	jmp    c0020452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020336:	83 ec 08             	sub    esp,0x8
c0020339:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020340:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020344:	50                   	push   eax
c0020345:	e8 e0 03 fe ff       	call   c000072a <strcpy>
c002034a:	83 c4 10             	add    esp,0x10
c002034d:	83 ec 08             	sub    esp,0x8
c0020350:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020354:	50                   	push   eax
c0020355:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002035c:	e8 3b fc ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002036c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020374:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020379:	83 e0 01             	and    eax,0x1
c002037c:	74 08                	je     c0020386 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002037e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020386:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002038b:	83 e0 02             	and    eax,0x2
c002038e:	74 08                	je     c0020398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020390:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002039d:	83 e0 04             	and    eax,0x4
c00203a0:	74 08                	je     c00203aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00203a2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00203aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00203af:	83 e0 08             	and    eax,0x8
c00203b2:	74 08                	je     c00203bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00203b4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00203bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203c1:	83 e0 01             	and    eax,0x1
c00203c4:	74 08                	je     c00203ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00203c6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00203ce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203d3:	83 e0 02             	and    eax,0x2
c00203d6:	74 08                	je     c00203e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00203d8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00203e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203e5:	83 e0 04             	and    eax,0x4
c00203e8:	74 08                	je     c00203f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00203ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00203f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203f7:	83 e0 08             	and    eax,0x8
c00203fa:	74 08                	je     c0020404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00203fc:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020404:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002040b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020412:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002041a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020422:	83 ec 04             	sub    esp,0x4
c0020425:	52                   	push   edx
c0020426:	50                   	push   eax
c0020427:	8d 44 24 24          	lea    eax,[esp+0x24]
c002042b:	50                   	push   eax
c002042c:	e8 fb 64 fe ff       	call   c000692c <f_chmod>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002043b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020442:	85 c0                	test   eax,eax
c0020444:	75 07                	jne    c002044d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020446:	b8 00 00 00 00       	mov    eax,0x0
c002044b:	eb 05                	jmp    c0020452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002044d:	b8 01 00 00 00       	mov    eax,0x1
c0020452:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020458:	c3                   	ret    
c0020459:	90                   	nop

c002045a <FAT::rename(char const*, char const*)>:
c002045a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020460:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020468:	74 0a                	je     c0020474 <FAT::rename(char const*, char const*)+0x1a>
c002046a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020472:	75 0a                	jne    c002047e <FAT::rename(char const*, char const*)+0x24>
c0020474:	b8 04 00 00 00       	mov    eax,0x4
c0020479:	e9 98 00 00 00       	jmp    c0020516 <FAT::rename(char const*, char const*)+0xbc>
c002047e:	83 ec 08             	sub    esp,0x8
c0020481:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020488:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002048f:	50                   	push   eax
c0020490:	e8 95 02 fe ff       	call   c000072a <strcpy>
c0020495:	83 c4 10             	add    esp,0x10
c0020498:	83 ec 08             	sub    esp,0x8
c002049b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00204a2:	50                   	push   eax
c00204a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00204aa:	e8 ed fa ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	83 ec 08             	sub    esp,0x8
c00204b5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00204bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204c0:	50                   	push   eax
c00204c1:	e8 64 02 fe ff       	call   c000072a <strcpy>
c00204c6:	83 c4 10             	add    esp,0x10
c00204c9:	83 ec 08             	sub    esp,0x8
c00204cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204d0:	50                   	push   eax
c00204d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00204d8:	e8 bf fa ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	83 ec 08             	sub    esp,0x8
c00204e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204e7:	50                   	push   eax
c00204e8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00204ef:	50                   	push   eax
c00204f0:	e8 44 61 fe ff       	call   c0006639 <f_rename>
c00204f5:	83 c4 10             	add    esp,0x10
c00204f8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00204ff:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020506:	85 c0                	test   eax,eax
c0020508:	75 07                	jne    c0020511 <FAT::rename(char const*, char const*)+0xb7>
c002050a:	b8 00 00 00 00       	mov    eax,0x0
c002050f:	eb 05                	jmp    c0020516 <FAT::rename(char const*, char const*)+0xbc>
c0020511:	b8 01 00 00 00       	mov    eax,0x1
c0020516:	81 c4 1c 02 00 00    	add    esp,0x21c
c002051c:	c3                   	ret    
c002051d:	90                   	nop

c002051e <FAT::mkdir(char const*)>:
c002051e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020524:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002052c:	75 07                	jne    c0020535 <FAT::mkdir(char const*)+0x17>
c002052e:	b8 04 00 00 00       	mov    eax,0x4
c0020533:	eb 5c                	jmp    c0020591 <FAT::mkdir(char const*)+0x73>
c0020535:	83 ec 08             	sub    esp,0x8
c0020538:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002053f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020543:	50                   	push   eax
c0020544:	e8 e1 01 fe ff       	call   c000072a <strcpy>
c0020549:	83 c4 10             	add    esp,0x10
c002054c:	83 ec 08             	sub    esp,0x8
c002054f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020553:	50                   	push   eax
c0020554:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002055b:	e8 3c fa ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c0020560:	83 c4 10             	add    esp,0x10
c0020563:	83 ec 0c             	sub    esp,0xc
c0020566:	8d 44 24 18          	lea    eax,[esp+0x18]
c002056a:	50                   	push   eax
c002056b:	e8 9d 5e fe ff       	call   c000640d <f_mkdir>
c0020570:	83 c4 10             	add    esp,0x10
c0020573:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002057a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020581:	85 c0                	test   eax,eax
c0020583:	75 07                	jne    c002058c <FAT::mkdir(char const*)+0x6e>
c0020585:	b8 00 00 00 00       	mov    eax,0x0
c002058a:	eb 05                	jmp    c0020591 <FAT::mkdir(char const*)+0x73>
c002058c:	b8 01 00 00 00       	mov    eax,0x1
c0020591:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020597:	c3                   	ret    

c0020598 <FAT::exists(char const*)>:
c0020598:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002059e:	83 ec 08             	sub    esp,0x8
c00205a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00205a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00205ac:	50                   	push   eax
c00205ad:	e8 78 01 fe ff       	call   c000072a <strcpy>
c00205b2:	83 c4 10             	add    esp,0x10
c00205b5:	83 ec 08             	sub    esp,0x8
c00205b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205bc:	50                   	push   eax
c00205bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00205c4:	e8 d3 f9 ff ff       	call   c001ff9c <FAT::fixFilepath(char*)>
c00205c9:	83 c4 10             	add    esp,0x10
c00205cc:	83 ec 08             	sub    esp,0x8
c00205cf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00205d6:	50                   	push   eax
c00205d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00205db:	50                   	push   eax
c00205dc:	e8 57 59 fe ff       	call   c0005f38 <f_stat>
c00205e1:	83 c4 10             	add    esp,0x10
c00205e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00205eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00205f2:	85 c0                	test   eax,eax
c00205f4:	75 04                	jne    c00205fa <FAT::exists(char const*)+0x62>
c00205f6:	b0 01                	mov    al,0x1
c00205f8:	eb 02                	jmp    c00205fc <FAT::exists(char const*)+0x64>
c00205fa:	b0 00                	mov    al,0x0
c00205fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020602:	c3                   	ret    
c0020603:	90                   	nop

c0020604 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020604:	b8 08 00 00 00       	mov    eax,0x8
c0020609:	c3                   	ret    

c002060a <ISO9660::seek(void*, unsigned long long)>:
c002060a:	53                   	push   ebx
c002060b:	b8 04 00 00 00       	mov    eax,0x4
c0020610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020618:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002061c:	85 d2                	test   edx,edx
c002061e:	74 17                	je     c0020637 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020620:	89 c8                	mov    eax,ecx
c0020622:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020625:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020628:	b8 01 00 00 00       	mov    eax,0x1
c002062d:	73 08                	jae    c0020637 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002062f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020632:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020635:	31 c0                	xor    eax,eax
c0020637:	5b                   	pop    ebx
c0020638:	c3                   	ret    
c0020639:	90                   	nop

c002063a <ISO9660::tell(void*, unsigned long long*)>:
c002063a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002063e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020642:	85 d2                	test   edx,edx
c0020644:	74 12                	je     c0020658 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020646:	85 c0                	test   eax,eax
c0020648:	74 0e                	je     c0020658 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002064a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002064d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020650:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020653:	89 10                	mov    DWORD PTR [eax],edx
c0020655:	31 c0                	xor    eax,eax
c0020657:	c3                   	ret    
c0020658:	b8 04 00 00 00       	mov    eax,0x4
c002065d:	c3                   	ret    

c002065e <ISO9660::getName()>:
c002065e:	b8 2c af 02 c0       	mov    eax,0xc002af2c
c0020663:	c3                   	ret    

c0020664 <ISO9660::stat(void*, unsigned long long*)>:
c0020664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002066c:	85 d2                	test   edx,edx
c002066e:	74 12                	je     c0020682 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020670:	85 c0                	test   eax,eax
c0020672:	74 0e                	je     c0020682 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020674:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020677:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002067a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002067d:	89 10                	mov    DWORD PTR [eax],edx
c002067f:	31 c0                	xor    eax,eax
c0020681:	c3                   	ret    
c0020682:	b8 04 00 00 00       	mov    eax,0x4
c0020687:	c3                   	ret    

c0020688 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020688:	b8 01 00 00 00       	mov    eax,0x1
c002068d:	c3                   	ret    

c002068e <ISO9660::unlink(char const*)>:
c002068e:	b8 01 00 00 00       	mov    eax,0x1
c0020693:	c3                   	ret    

c0020694 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020694:	b8 01 00 00 00       	mov    eax,0x1
c0020699:	c3                   	ret    

c002069a <ISO9660::rename(char const*, char const*)>:
c002069a:	b8 01 00 00 00       	mov    eax,0x1
c002069f:	c3                   	ret    

c00206a0 <ISO9660::mkdir(char const*)>:
c00206a0:	b8 01 00 00 00       	mov    eax,0x1
c00206a5:	c3                   	ret    

c00206a6 <ISO9660::close(void*)>:
c00206a6:	83 ec 0c             	sub    esp,0xc
c00206a9:	b8 04 00 00 00       	mov    eax,0x4
c00206ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206b2:	85 d2                	test   edx,edx
c00206b4:	74 0e                	je     c00206c4 <ISO9660::close(void*)+0x1e>
c00206b6:	83 ec 0c             	sub    esp,0xc
c00206b9:	52                   	push   edx
c00206ba:	e8 25 ee fe ff       	call   c000f4e4 <free>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	31 c0                	xor    eax,eax
c00206c4:	83 c4 0c             	add    esp,0xc
c00206c7:	c3                   	ret    

c00206c8 <ISO9660::closeDir(void*)>:
c00206c8:	83 ec 0c             	sub    esp,0xc
c00206cb:	b8 04 00 00 00       	mov    eax,0x4
c00206d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206d4:	85 d2                	test   edx,edx
c00206d6:	74 0e                	je     c00206e6 <ISO9660::closeDir(void*)+0x1e>
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	52                   	push   edx
c00206dc:	e8 03 ee fe ff       	call   c000f4e4 <free>
c00206e1:	83 c4 10             	add    esp,0x10
c00206e4:	31 c0                	xor    eax,eax
c00206e6:	83 c4 0c             	add    esp,0xc
c00206e9:	c3                   	ret    

c00206ea <ISO9660::~ISO9660()>:
c00206ea:	83 ec 0c             	sub    esp,0xc
c00206ed:	ba 80 af 02 c0       	mov    edx,0xc002af80
c00206f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f6:	89 10                	mov    DWORD PTR [eax],edx
c00206f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	50                   	push   eax
c0020700:	e8 51 24 ff ff       	call   c0012b56 <Filesystem::~Filesystem()>
c0020705:	83 c4 10             	add    esp,0x10
c0020708:	90                   	nop
c0020709:	83 c4 0c             	add    esp,0xc
c002070c:	c3                   	ret    
c002070d:	90                   	nop

c002070e <ISO9660::~ISO9660()>:
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	83 ec 0c             	sub    esp,0xc
c0020714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020718:	e8 cd ff ff ff       	call   c00206ea <ISO9660::~ISO9660()>
c002071d:	83 c4 10             	add    esp,0x10
c0020720:	83 ec 08             	sub    esp,0x8
c0020723:	6a 08                	push   0x8
c0020725:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020729:	e8 1f 20 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c002072e:	83 c4 10             	add    esp,0x10
c0020731:	83 c4 0c             	add    esp,0xc
c0020734:	c3                   	ret    

c0020735 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020735:	55                   	push   ebp
c0020736:	31 c9                	xor    ecx,ecx
c0020738:	57                   	push   edi
c0020739:	56                   	push   esi
c002073a:	53                   	push   ebx
c002073b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002073f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020743:	89 eb                	mov    ebx,ebp
c0020745:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020749:	39 ce                	cmp    esi,ecx
c002074b:	7e 17                	jle    c0020764 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002074d:	31 d2                	xor    edx,edx
c002074f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020753:	7d 13                	jge    c0020768 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020755:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020759:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002075c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002075f:	75 0d                	jne    c002076e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020761:	42                   	inc    edx
c0020762:	eb eb                	jmp    c002074f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020764:	31 c0                	xor    eax,eax
c0020766:	eb 0a                	jmp    c0020772 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002076c:	eb 04                	jmp    c0020772 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002076e:	41                   	inc    ecx
c002076f:	43                   	inc    ebx
c0020770:	eb d7                	jmp    c0020749 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020772:	5b                   	pop    ebx
c0020773:	5e                   	pop    esi
c0020774:	5f                   	pop    edi
c0020775:	5d                   	pop    ebp
c0020776:	c3                   	ret    

c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020777:	56                   	push   esi
c0020778:	53                   	push   ebx
c0020779:	52                   	push   edx
c002077a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002077e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020786:	39 0d 20 e1 02 c0    	cmp    DWORD PTR ds:0xc002e120,ecx
c002078c:	75 08                	jne    c0020796 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002078e:	38 05 94 bf 02 c0    	cmp    BYTE PTR ds:0xc002bf94,al
c0020794:	74 2b                	je     c00207c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020796:	83 ec 0c             	sub    esp,0xc
c0020799:	a2 94 bf 02 c0       	mov    ds:0xc002bf94,al
c002079e:	68 40 e1 02 c0       	push   0xc002e140
c00207a3:	0f be c0             	movsx  eax,al
c00207a6:	6a 01                	push   0x1
c00207a8:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c00207ae:	31 db                	xor    ebx,ebx
c00207b0:	53                   	push   ebx
c00207b1:	51                   	push   ecx
c00207b2:	ff 34 85 1c cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd30e4]
c00207b9:	e8 fc 56 ff ff       	call   c0015eba <LogicalDisk::read(unsigned long long, int, void*)>
c00207be:	83 c4 20             	add    esp,0x20
c00207c1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00207c9:	c7 44 24 14 40 e1 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e140
c00207d1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00207d5:	58                   	pop    eax
c00207d6:	5b                   	pop    ebx
c00207d7:	5e                   	pop    esi
c00207d8:	e9 78 fe fd ff       	jmp    c0000655 <memcpy>
c00207dd:	90                   	nop

c00207de <ISO9660::tryMount(LogicalDisk*, int)>:
c00207de:	81 ec 10 08 00 00    	sub    esp,0x810
c00207e4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00207eb:	83 c0 41             	add    eax,0x41
c00207ee:	0f be c0             	movsx  eax,al
c00207f1:	50                   	push   eax
c00207f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207f6:	50                   	push   eax
c00207f7:	6a 10                	push   0x10
c00207f9:	e8 79 ff ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00207fe:	83 c4 10             	add    esp,0x10
c0020801:	31 c0                	xor    eax,eax
c0020803:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020808:	75 1d                	jne    c0020827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002080a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002080f:	75 16                	jne    c0020827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020811:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020816:	75 0f                	jne    c0020827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020818:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002081d:	75 08                	jne    c0020827 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002081f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020824:	0f 94 c0             	sete   al
c0020827:	81 c4 0c 08 00 00    	add    esp,0x80c
c002082d:	c3                   	ret    

c002082e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002082e:	55                   	push   ebp
c002082f:	57                   	push   edi
c0020830:	56                   	push   esi
c0020831:	53                   	push   ebx
c0020832:	81 ec 34 08 00 00    	sub    esp,0x834
c0020838:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c002083f:	55                   	push   ebp
c0020840:	68 47 af 02 c0       	push   0xc002af47
c0020845:	e8 e3 1f ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c002084a:	83 c4 10             	add    esp,0x10
c002084d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0020855:	0f 84 06 02 00 00    	je     c0020a61 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002085b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020863:	0f 84 f8 01 00 00    	je     c0020a61 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0020869:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020870:	b8 01 00 00 00       	mov    eax,0x1
c0020875:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0020879:	0f 85 e7 01 00 00    	jne    c0020a66 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c002087f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0020882:	31 d2                	xor    edx,edx
c0020884:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0020887:	89 e9                	mov    ecx,ebp
c0020889:	89 d3                	mov    ebx,edx
c002088b:	01 f1                	add    ecx,esi
c002088d:	11 fb                	adc    ebx,edi
c002088f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020893:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020897:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c002089e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00208a1:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00208a4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00208a8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00208ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00208b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00208b4:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c00208b8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00208bc:	72 19                	jb     c00208d7 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c00208be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00208c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00208cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00208d5:	eb 13                	jmp    c00208ea <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c00208d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00208df:	29 f0                	sub    eax,esi
c00208e1:	19 fa                	sbb    edx,edi
c00208e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00208e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00208ea:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c00208f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00208f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208f6:	53                   	push   ebx
c00208f7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00208fb:	c1 e0 0b             	shl    eax,0xb
c00208fe:	01 c6                	add    esi,eax
c0020900:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020907:	11 d7                	adc    edi,edx
c0020909:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002090d:	89 fa                	mov    edx,edi
c002090f:	50                   	push   eax
c0020910:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020914:	50                   	push   eax
c0020915:	89 f0                	mov    eax,esi
c0020917:	0f ac d0 0b          	shrd   eax,edx,0xb
c002091b:	50                   	push   eax
c002091c:	e8 56 fe ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020921:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020928:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002092c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002092f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020933:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020939:	83 c4 10             	add    esp,0x10
c002093c:	b8 00 08 00 00       	mov    eax,0x800
c0020941:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0020945:	29 d0                	sub    eax,edx
c0020947:	39 c1                	cmp    ecx,eax
c0020949:	83 db 00             	sbb    ebx,0x0
c002094c:	7d 19                	jge    c0020967 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c002094e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020953:	75 16                	jne    c002096b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0020955:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002095c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020962:	e9 f6 00 00 00       	jmp    c0020a5d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c0020967:	89 c5                	mov    ebp,eax
c0020969:	eb 03                	jmp    c002096e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c002096b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c002096e:	51                   	push   ecx
c002096f:	55                   	push   ebp
c0020970:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0020974:	50                   	push   eax
c0020975:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c002097c:	e8 d4 fc fd ff       	call   c0000655 <memcpy>
c0020981:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020985:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020989:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0020990:	01 e8                	add    eax,ebp
c0020992:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020996:	89 e8                	mov    eax,ebp
c0020998:	99                   	cdq    
c0020999:	01 ee                	add    esi,ebp
c002099b:	11 d7                	adc    edi,edx
c002099d:	29 e9                	sub    ecx,ebp
c002099f:	19 d3                	sbb    ebx,edx
c00209a1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00209a5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00209a9:	83 c4 10             	add    esp,0x10
c00209ac:	b8 ff 07 00 00       	mov    eax,0x7ff
c00209b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00209b4:	b8 00 00 00 00       	mov    eax,0x0
c00209b9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00209bd:	7d 3f                	jge    c00209fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00209bf:	52                   	push   edx
c00209c0:	89 fa                	mov    edx,edi
c00209c2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00209c9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00209cd:	50                   	push   eax
c00209ce:	89 f0                	mov    eax,esi
c00209d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209d4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00209d8:	50                   	push   eax
c00209d9:	e8 99 fd ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209de:	81 c6 00 08 00 00    	add    esi,0x800
c00209e4:	83 d7 00             	adc    edi,0x0
c00209e7:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00209ef:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00209f7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00209fc:	eb ab                	jmp    c00209a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c00209fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a02:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020a05:	74 34                	je     c0020a3b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0020a07:	89 fa                	mov    edx,edi
c0020a09:	50                   	push   eax
c0020a0a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020a11:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020a15:	50                   	push   eax
c0020a16:	89 f0                	mov    eax,esi
c0020a18:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020a1c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020a20:	55                   	push   ebp
c0020a21:	50                   	push   eax
c0020a22:	e8 50 fd ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a27:	83 c4 0c             	add    esp,0xc
c0020a2a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020a2e:	55                   	push   ebp
c0020a2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a33:	e8 1d fc fd ff       	call   c0000655 <memcpy>
c0020a38:	83 c4 10             	add    esp,0x10
c0020a3b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020a42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020a46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020a4a:	89 38                	mov    DWORD PTR [eax],edi
c0020a4c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020a53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a57:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0020a5a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0020a5d:	31 c0                	xor    eax,eax
c0020a5f:	eb 05                	jmp    c0020a66 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020a61:	b8 04 00 00 00       	mov    eax,0x4
c0020a66:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020a6c:	5b                   	pop    ebx
c0020a6d:	5e                   	pop    esi
c0020a6e:	5f                   	pop    edi
c0020a6f:	5d                   	pop    ebp
c0020a70:	c3                   	ret    
c0020a71:	90                   	nop

c0020a72 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020a72:	55                   	push   ebp
c0020a73:	57                   	push   edi
c0020a74:	56                   	push   esi
c0020a75:	53                   	push   ebx
c0020a76:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020a7c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020a83:	85 f6                	test   esi,esi
c0020a85:	0f 84 64 02 00 00    	je     c0020cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a8b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020a93:	0f 84 56 02 00 00    	je     c0020cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020a9c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020a9f:	75 0a                	jne    c0020aab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020aa1:	b8 07 00 00 00       	mov    eax,0x7
c0020aa6:	e9 49 02 00 00       	jmp    c0020cf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020aab:	50                   	push   eax
c0020aac:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020ab0:	50                   	push   eax
c0020ab1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ab8:	53                   	push   ebx
c0020ab9:	8b 06                	mov    eax,DWORD PTR [esi]
c0020abb:	c1 e0 0b             	shl    eax,0xb
c0020abe:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020ac1:	c1 e8 0b             	shr    eax,0xb
c0020ac4:	50                   	push   eax
c0020ac5:	e8 ad fc ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020aca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020acd:	83 c4 10             	add    esp,0x10
c0020ad0:	89 c1                	mov    ecx,eax
c0020ad2:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020ad5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020adb:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020ade:	84 db                	test   bl,bl
c0020ae0:	0f 85 90 00 00 00    	jne    c0020b76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020ae6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020aec:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020af2:	29 c7                	sub    edi,eax
c0020af4:	89 fb                	mov    ebx,edi
c0020af6:	c1 fb 1f             	sar    ebx,0x1f
c0020af9:	01 f8                	add    eax,edi
c0020afb:	11 da                	adc    edx,ebx
c0020afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b05:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020b08:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020b0b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020b0e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020b11:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020b18:	89 d8                	mov    eax,ebx
c0020b1a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020b1d:	ba 00 00 00 00       	mov    edx,0x0
c0020b22:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020b26:	b8 00 00 00 00       	mov    eax,0x0
c0020b2b:	73 0b                	jae    c0020b38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020b2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b34:	29 f8                	sub    eax,edi
c0020b36:	19 da                	sbb    edx,ebx
c0020b38:	89 d3                	mov    ebx,edx
c0020b3a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020b3d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020b40:	09 c3                	or     ebx,eax
c0020b42:	0f 84 59 ff ff ff    	je     c0020aa1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020b48:	55                   	push   ebp
c0020b49:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020b4d:	50                   	push   eax
c0020b4e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020b55:	53                   	push   ebx
c0020b56:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b58:	c1 e0 0b             	shl    eax,0xb
c0020b5b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020b5f:	c1 e8 0b             	shr    eax,0xb
c0020b62:	50                   	push   eax
c0020b63:	e8 0f fc ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b68:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b6b:	83 c4 10             	add    esp,0x10
c0020b6e:	25 ff 07 00 00       	and    eax,0x7ff
c0020b73:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020b76:	57                   	push   edi
c0020b77:	6a 28                	push   0x28
c0020b79:	6a 00                	push   0x0
c0020b7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b7f:	50                   	push   eax
c0020b80:	e8 06 fb fd ff       	call   c000068b <memset>
c0020b85:	31 d2                	xor    edx,edx
c0020b87:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020b8a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020b90:	89 f8                	mov    eax,edi
c0020b92:	83 c0 21             	add    eax,0x21
c0020b95:	83 d2 00             	adc    edx,0x0
c0020b98:	89 c7                	mov    edi,eax
c0020b9a:	89 d5                	mov    ebp,edx
c0020b9c:	83 c4 10             	add    esp,0x10
c0020b9f:	31 c9                	xor    ecx,ecx
c0020ba1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020ba8:	83 f9 28             	cmp    ecx,0x28
c0020bab:	88 04 24             	mov    BYTE PTR [esp],al
c0020bae:	0f 94 c2             	sete   dl
c0020bb1:	88 d0                	mov    al,dl
c0020bb3:	ba ff 07 00 00       	mov    edx,0x7ff
c0020bb8:	39 fa                	cmp    edx,edi
c0020bba:	ba 00 00 00 00       	mov    edx,0x0
c0020bbf:	19 ea                	sbb    edx,ebp
c0020bc1:	0f 92 c2             	setb   dl
c0020bc4:	09 c2                	or     edx,eax
c0020bc6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020bca:	0f 94 c0             	sete   al
c0020bcd:	08 d0                	or     al,dl
c0020bcf:	75 16                	jne    c0020be7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020bd1:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020bd5:	74 10                	je     c0020be7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020bd7:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020bda:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020bde:	41                   	inc    ecx
c0020bdf:	83 c7 01             	add    edi,0x1
c0020be2:	83 d5 00             	adc    ebp,0x0
c0020be5:	eb ba                	jmp    c0020ba1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020be7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020bf5:	57                   	push   edi
c0020bf6:	e8 ad fa fd ff       	call   c00006a8 <strlen>
c0020bfb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020c03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020c07:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020c0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020c11:	5a                   	pop    edx
c0020c12:	25 ff 07 00 00       	and    eax,0x7ff
c0020c17:	01 c8                	add    eax,ecx
c0020c19:	59                   	pop    ecx
c0020c1a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020c20:	83 e0 02             	and    eax,0x2
c0020c23:	3c 01                	cmp    al,0x1
c0020c25:	19 c0                	sbb    eax,eax
c0020c27:	83 c0 02             	add    eax,0x2
c0020c2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020c2e:	57                   	push   edi
c0020c2f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020c33:	50                   	push   eax
c0020c34:	e8 f1 fa fd ff       	call   c000072a <strcpy>
c0020c39:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020c3d:	83 c4 10             	add    esp,0x10
c0020c40:	84 c0                	test   al,al
c0020c42:	75 21                	jne    c0020c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020c44:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020c4c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020c54:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020c5c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020c63:	eb 28                	jmp    c0020c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020c65:	fe c8                	dec    al
c0020c67:	75 24                	jne    c0020c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020c69:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020c71:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020c79:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020c81:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020c88:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020c8d:	0f b6 fb             	movzx  edi,bl
c0020c90:	31 db                	xor    ebx,ebx
c0020c92:	50                   	push   eax
c0020c93:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020c9a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020c9e:	50                   	push   eax
c0020c9f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020ca6:	e8 aa f9 fd ff       	call   c0000655 <memcpy>
c0020cab:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020cb2:	89 f9                	mov    ecx,edi
c0020cb4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020cba:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020cbd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020cc0:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020cc3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020cc6:	83 c4 10             	add    esp,0x10
c0020cc9:	39 c7                	cmp    edi,eax
c0020ccb:	89 df                	mov    edi,ebx
c0020ccd:	19 d7                	sbb    edi,edx
c0020ccf:	72 10                	jb     c0020ce1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020cd1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020cd8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020cdf:	eb 0a                	jmp    c0020ceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020ce1:	29 c8                	sub    eax,ecx
c0020ce3:	19 da                	sbb    edx,ebx
c0020ce5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020ce8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020ceb:	31 c0                	xor    eax,eax
c0020ced:	eb 05                	jmp    c0020cf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020cef:	b8 04 00 00 00       	mov    eax,0x4
c0020cf4:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020cfa:	5b                   	pop    ebx
c0020cfb:	5e                   	pop    esi
c0020cfc:	5f                   	pop    edi
c0020cfd:	5d                   	pop    ebp
c0020cfe:	c3                   	ret    

c0020cff <readRoot(unsigned int*, unsigned int*, char)>:
c0020cff:	81 ec 40 08 00 00    	sub    esp,0x840
c0020d05:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020d0d:	50                   	push   eax
c0020d0e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020d12:	50                   	push   eax
c0020d13:	6a 10                	push   0x10
c0020d15:	e8 5d fa ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d1a:	83 c4 0c             	add    esp,0xc
c0020d1d:	6a 22                	push   0x22
c0020d1f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020d26:	50                   	push   eax
c0020d27:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020d2b:	50                   	push   eax
c0020d2c:	e8 24 f9 fd ff       	call   c0000655 <memcpy>
c0020d31:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020d38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020d3c:	89 10                	mov    DWORD PTR [eax],edx
c0020d3e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020d45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020d49:	89 10                	mov    DWORD PTR [eax],edx
c0020d4b:	b0 01                	mov    al,0x1
c0020d4d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020d53:	c3                   	ret    

c0020d54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020d54:	55                   	push   ebp
c0020d55:	57                   	push   edi
c0020d56:	56                   	push   esi
c0020d57:	53                   	push   ebx
c0020d58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d5e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020d65:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020d6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d70:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020d74:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020d78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d7c:	75 03                	jne    c0020d81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d7e:	83 c3 02             	add    ebx,0x2
c0020d81:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020d84:	75 03                	jne    c0020d89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020d86:	43                   	inc    ebx
c0020d87:	eb f8                	jmp    c0020d81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d89:	51                   	push   ecx
c0020d8a:	68 00 01 00 00       	push   0x100
c0020d8f:	6a 00                	push   0x0
c0020d91:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020d95:	50                   	push   eax
c0020d96:	e8 f0 f8 fd ff       	call   c000068b <memset>
c0020d9b:	83 c4 10             	add    esp,0x10
c0020d9e:	31 d2                	xor    edx,edx
c0020da0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020da3:	84 c0                	test   al,al
c0020da5:	74 21                	je     c0020dc8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020da7:	3c 2f                	cmp    al,0x2f
c0020da9:	75 0b                	jne    c0020db6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020dab:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020daf:	bd 01 00 00 00       	mov    ebp,0x1
c0020db4:	eb 14                	jmp    c0020dca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020db6:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020db9:	80 f9 19             	cmp    cl,0x19
c0020dbc:	77 03                	ja     c0020dc1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020dbe:	83 e8 20             	sub    eax,0x20
c0020dc1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020dc5:	42                   	inc    edx
c0020dc6:	eb d8                	jmp    c0020da0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020dc8:	31 ed                	xor    ebp,ebp
c0020dca:	83 ec 0c             	sub    esp,0xc
c0020dcd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020dd4:	e8 fb e6 fe ff       	call   c000f4d4 <malloc>
c0020dd9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020de0:	89 c6                	mov    esi,eax
c0020de2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020de8:	c1 ef 0b             	shr    edi,0xb
c0020deb:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020df2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020df6:	83 c4 10             	add    esp,0x10
c0020df9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020dfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020e02:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020e09:	74 28                	je     c0020e33 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020e0b:	52                   	push   edx
c0020e0c:	57                   	push   edi
c0020e0d:	50                   	push   eax
c0020e0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e12:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020e19:	e8 59 f9 ff ff       	call   c0020777 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e22:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020e29:	05 00 08 00 00       	add    eax,0x800
c0020e2e:	83 c4 10             	add    esp,0x10
c0020e31:	eb cb                	jmp    c0020dfe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020e33:	83 ec 0c             	sub    esp,0xc
c0020e36:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020e3a:	57                   	push   edi
c0020e3b:	e8 68 f8 fd ff       	call   c00006a8 <strlen>
c0020e40:	50                   	push   eax
c0020e41:	57                   	push   edi
c0020e42:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020e49:	56                   	push   esi
c0020e4a:	e8 e6 f8 ff ff       	call   c0020735 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020e4f:	83 c4 20             	add    esp,0x20
c0020e52:	85 c0                	test   eax,eax
c0020e54:	75 13                	jne    c0020e69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020e56:	83 ec 0c             	sub    esp,0xc
c0020e59:	56                   	push   esi
c0020e5a:	e8 85 e6 fe ff       	call   c000f4e4 <free>
c0020e5f:	83 c4 10             	add    esp,0x10
c0020e62:	31 c0                	xor    eax,eax
c0020e64:	e9 b3 00 00 00       	jmp    c0020f1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e69:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020e6d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020e71:	c1 e7 08             	shl    edi,0x8
c0020e74:	c1 e2 10             	shl    edx,0x10
c0020e77:	09 d7                	or     edi,edx
c0020e79:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020e7d:	09 d7                	or     edi,edx
c0020e7f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020e83:	c1 e2 18             	shl    edx,0x18
c0020e86:	09 d7                	or     edi,edx
c0020e88:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020e8c:	89 d1                	mov    ecx,edx
c0020e8e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020e92:	c1 e1 08             	shl    ecx,0x8
c0020e95:	c1 e2 10             	shl    edx,0x10
c0020e98:	09 ca                	or     edx,ecx
c0020e9a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020e9e:	09 ca                	or     edx,ecx
c0020ea0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020ea4:	c1 e1 18             	shl    ecx,0x18
c0020ea7:	09 ca                	or     edx,ecx
c0020ea9:	89 e9                	mov    ecx,ebp
c0020eab:	84 c9                	test   cl,cl
c0020ead:	74 3c                	je     c0020eeb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020eaf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020eb3:	83 ec 0c             	sub    esp,0xc
c0020eb6:	56                   	push   esi
c0020eb7:	e8 28 e6 fe ff       	call   c000f4e4 <free>
c0020ebc:	83 c4 0c             	add    esp,0xc
c0020ebf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020ec6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020ecb:	50                   	push   eax
c0020ecc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020ed3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020eda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ede:	52                   	push   edx
c0020edf:	57                   	push   edi
c0020ee0:	53                   	push   ebx
c0020ee1:	e8 6e fe ff ff       	call   c0020d54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020ee6:	83 c4 20             	add    esp,0x20
c0020ee9:	eb 31                	jmp    c0020f1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020eeb:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020eee:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020ef5:	d0 e8                	shr    al,1
c0020ef7:	89 3b                	mov    DWORD PTR [ebx],edi
c0020ef9:	83 e0 01             	and    eax,0x1
c0020efc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020f03:	83 ec 0c             	sub    esp,0xc
c0020f06:	89 13                	mov    DWORD PTR [ebx],edx
c0020f08:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020f0f:	89 03                	mov    DWORD PTR [ebx],eax
c0020f11:	56                   	push   esi
c0020f12:	e8 cd e5 fe ff       	call   c000f4e4 <free>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	b0 01                	mov    al,0x1
c0020f1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f22:	5b                   	pop    ebx
c0020f23:	5e                   	pop    esi
c0020f24:	5f                   	pop    edi
c0020f25:	5d                   	pop    ebp
c0020f26:	c3                   	ret    

c0020f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020f27:	55                   	push   ebp
c0020f28:	57                   	push   edi
c0020f29:	56                   	push   esi
c0020f2a:	53                   	push   ebx
c0020f2b:	83 ec 20             	sub    esp,0x20
c0020f2e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020f32:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020f36:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020f3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f42:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020f4a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020f4f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020f55:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020f5b:	57                   	push   edi
c0020f5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f60:	50                   	push   eax
c0020f61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f65:	50                   	push   eax
c0020f66:	e8 94 fd ff ff       	call   c0020cff <readRoot(unsigned int*, unsigned int*, char)>
c0020f6b:	5a                   	pop    edx
c0020f6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f70:	e8 33 f7 fd ff       	call   c00006a8 <strlen>
c0020f75:	83 c4 10             	add    esp,0x10
c0020f78:	83 f8 03             	cmp    eax,0x3
c0020f7b:	77 17                	ja     c0020f94 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f81:	89 03                	mov    DWORD PTR [ebx],eax
c0020f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f87:	89 06                	mov    DWORD PTR [esi],eax
c0020f89:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020f90:	b0 01                	mov    al,0x1
c0020f92:	eb 19                	jmp    c0020fad <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020f94:	50                   	push   eax
c0020f95:	55                   	push   ebp
c0020f96:	57                   	push   edi
c0020f97:	56                   	push   esi
c0020f98:	53                   	push   ebx
c0020f99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020fa1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020fa5:	e8 aa fd ff ff       	call   c0020d54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020faa:	83 c4 20             	add    esp,0x20
c0020fad:	83 c4 1c             	add    esp,0x1c
c0020fb0:	5b                   	pop    ebx
c0020fb1:	5e                   	pop    esi
c0020fb2:	5f                   	pop    edi
c0020fb3:	5d                   	pop    ebp
c0020fb4:	c3                   	ret    
c0020fb5:	90                   	nop

c0020fb6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020fb6:	57                   	push   edi
c0020fb7:	56                   	push   esi
c0020fb8:	53                   	push   ebx
c0020fb9:	83 ec 10             	sub    esp,0x10
c0020fbc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020fc0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020fc4:	85 ff                	test   edi,edi
c0020fc6:	74 7b                	je     c0021043 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020fc8:	85 f6                	test   esi,esi
c0020fca:	74 77                	je     c0021043 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	6a 1c                	push   0x1c
c0020fd1:	e8 fe e4 fe ff       	call   c000f4d4 <malloc>
c0020fd6:	89 07                	mov    DWORD PTR [edi],eax
c0020fd8:	89 c3                	mov    ebx,eax
c0020fda:	58                   	pop    eax
c0020fdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fdf:	50                   	push   eax
c0020fe0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020fe3:	50                   	push   eax
c0020fe4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fe8:	50                   	push   eax
c0020fe9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fed:	50                   	push   eax
c0020fee:	56                   	push   esi
c0020fef:	e8 33 ff ff ff       	call   c0020f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020ff4:	83 c4 20             	add    esp,0x20
c0020ff7:	84 c0                	test   al,al
c0020ff9:	74 07                	je     c0021002 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020ffb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021000:	74 0b                	je     c002100d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0021002:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021006:	b8 01 00 00 00       	mov    eax,0x1
c002100b:	eb 3b                	jmp    c0021048 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c002100d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021011:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021015:	89 03                	mov    DWORD PTR [ebx],eax
c0021017:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021022:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021029:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021030:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021033:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002103a:	8a 06                	mov    al,BYTE PTR [esi]
c002103c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002103f:	31 c0                	xor    eax,eax
c0021041:	eb 05                	jmp    c0021048 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0021043:	b8 04 00 00 00       	mov    eax,0x4
c0021048:	83 c4 10             	add    esp,0x10
c002104b:	5b                   	pop    ebx
c002104c:	5e                   	pop    esi
c002104d:	5f                   	pop    edi
c002104e:	c3                   	ret    
c002104f:	90                   	nop

c0021050 <ISO9660::exists(char const*)>:
c0021050:	83 ec 28             	sub    esp,0x28
c0021053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021057:	8d 54 24 18          	lea    edx,[esp+0x18]
c002105b:	52                   	push   edx
c002105c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002105f:	52                   	push   edx
c0021060:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021064:	52                   	push   edx
c0021065:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021069:	52                   	push   edx
c002106a:	50                   	push   eax
c002106b:	e8 b7 fe ff ff       	call   c0020f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021070:	83 c4 3c             	add    esp,0x3c
c0021073:	c3                   	ret    

c0021074 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021074:	56                   	push   esi
c0021075:	53                   	push   ebx
c0021076:	83 ec 14             	sub    esp,0x14
c0021079:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002107d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021081:	85 db                	test   ebx,ebx
c0021083:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021087:	0f 94 c2             	sete   dl
c002108a:	85 f6                	test   esi,esi
c002108c:	0f 94 c0             	sete   al
c002108f:	08 c2                	or     dl,al
c0021091:	75 68                	jne    c00210fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021093:	85 c9                	test   ecx,ecx
c0021095:	74 64                	je     c00210fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021097:	83 ec 0c             	sub    esp,0xc
c002109a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002109d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00210a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210ae:	50                   	push   eax
c00210af:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00210b2:	50                   	push   eax
c00210b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210b7:	50                   	push   eax
c00210b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210bc:	50                   	push   eax
c00210bd:	51                   	push   ecx
c00210be:	e8 64 fe ff ff       	call   c0020f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210c3:	83 c4 20             	add    esp,0x20
c00210c6:	ba 01 00 00 00       	mov    edx,0x1
c00210cb:	84 c0                	test   al,al
c00210cd:	74 31                	je     c0021100 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00210cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210da:	89 03                	mov    DWORD PTR [ebx],eax
c00210dc:	ba 00 00 00 00       	mov    edx,0x0
c00210e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210e5:	85 c0                	test   eax,eax
c00210e7:	0f 95 06             	setne  BYTE PTR [esi]
c00210ea:	74 14                	je     c0021100 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00210ec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00210f2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210f9:	eb 05                	jmp    c0021100 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00210fb:	ba 04 00 00 00       	mov    edx,0x4
c0021100:	83 c4 14             	add    esp,0x14
c0021103:	89 d0                	mov    eax,edx
c0021105:	5b                   	pop    ebx
c0021106:	5e                   	pop    esi
c0021107:	c3                   	ret    

c0021108 <ISO9660::openDir(char const*, void**)>:
c0021108:	57                   	push   edi
c0021109:	56                   	push   esi
c002110a:	53                   	push   ebx
c002110b:	83 ec 10             	sub    esp,0x10
c002110e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021112:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021116:	85 ff                	test   edi,edi
c0021118:	0f 84 95 00 00 00    	je     c00211b3 <ISO9660::openDir(char const*, void**)+0xab>
c002111e:	85 f6                	test   esi,esi
c0021120:	0f 84 8d 00 00 00    	je     c00211b3 <ISO9660::openDir(char const*, void**)+0xab>
c0021126:	83 ec 0c             	sub    esp,0xc
c0021129:	6a 1c                	push   0x1c
c002112b:	e8 a4 e3 fe ff       	call   c000f4d4 <malloc>
c0021130:	89 07                	mov    DWORD PTR [edi],eax
c0021132:	89 c3                	mov    ebx,eax
c0021134:	59                   	pop    ecx
c0021135:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021139:	50                   	push   eax
c002113a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002113d:	50                   	push   eax
c002113e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021142:	50                   	push   eax
c0021143:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021147:	50                   	push   eax
c0021148:	56                   	push   esi
c0021149:	e8 d9 fd ff ff       	call   c0020f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002114e:	83 c4 20             	add    esp,0x20
c0021151:	84 c0                	test   al,al
c0021153:	74 07                	je     c002115c <ISO9660::openDir(char const*, void**)+0x54>
c0021155:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002115a:	75 21                	jne    c002117d <ISO9660::openDir(char const*, void**)+0x75>
c002115c:	0f b6 c0             	movzx  eax,al
c002115f:	52                   	push   edx
c0021160:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021164:	50                   	push   eax
c0021165:	68 5a af 02 c0       	push   0xc002af5a
c002116a:	e8 be 16 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c002116f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	b8 01 00 00 00       	mov    eax,0x1
c002117b:	eb 3b                	jmp    c00211b8 <ISO9660::openDir(char const*, void**)+0xb0>
c002117d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021181:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021185:	89 03                	mov    DWORD PTR [ebx],eax
c0021187:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002118e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021192:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021199:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00211a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00211aa:	8a 06                	mov    al,BYTE PTR [esi]
c00211ac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00211af:	31 c0                	xor    eax,eax
c00211b1:	eb 05                	jmp    c00211b8 <ISO9660::openDir(char const*, void**)+0xb0>
c00211b3:	b8 04 00 00 00       	mov    eax,0x4
c00211b8:	83 c4 10             	add    esp,0x10
c00211bb:	5b                   	pop    ebx
c00211bc:	5e                   	pop    esi
c00211bd:	5f                   	pop    edi
c00211be:	c3                   	ret    
c00211bf:	90                   	nop

c00211c0 <ISO9660::ISO9660()>:
c00211c0:	83 ec 0c             	sub    esp,0xc
c00211c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211c7:	83 ec 0c             	sub    esp,0xc
c00211ca:	50                   	push   eax
c00211cb:	e8 62 19 ff ff       	call   c0012b32 <Filesystem::Filesystem()>
c00211d0:	83 c4 10             	add    esp,0x10
c00211d3:	ba 80 af 02 c0       	mov    edx,0xc002af80
c00211d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211dc:	89 10                	mov    DWORD PTR [eax],edx
c00211de:	90                   	nop
c00211df:	83 c4 0c             	add    esp,0xc
c00211e2:	c3                   	ret    
c00211e3:	90                   	nop

c00211e4 <SoundChannel::~SoundChannel()>:
c00211e4:	83 ec 0c             	sub    esp,0xc
c00211e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00211ee:	83 ec 0c             	sub    esp,0xc
c00211f1:	50                   	push   eax
c00211f2:	e8 ed e2 fe ff       	call   c000f4e4 <free>
c00211f7:	83 c4 10             	add    esp,0x10
c00211fa:	90                   	nop
c00211fb:	83 c4 0c             	add    esp,0xc
c00211fe:	c3                   	ret    
c00211ff:	90                   	nop

c0021200 <SoundChannel::setSpeed(float)>:
c0021200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021208:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002120b:	c3                   	ret    

c002120c <SoundChannel::getSpeed()>:
c002120c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021210:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021213:	c3                   	ret    

c0021214 <SoundChannel::setVolume(int)>:
c0021214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021218:	83 f8 64             	cmp    eax,0x64
c002121b:	7e 05                	jle    c0021222 <SoundChannel::setVolume(int)+0xe>
c002121d:	b8 64 00 00 00       	mov    eax,0x64
c0021222:	85 c0                	test   eax,eax
c0021224:	79 02                	jns    c0021228 <SoundChannel::setVolume(int)+0x14>
c0021226:	31 c0                	xor    eax,eax
c0021228:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002122c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002122f:	c3                   	ret    

c0021230 <SoundChannel::getVolume()>:
c0021230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021234:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021237:	c3                   	ret    

c0021238 <SoundChannel::pause()>:
c0021238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002123c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021240:	c3                   	ret    
c0021241:	90                   	nop

c0021242 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021242:	83 ec 1c             	sub    esp,0x1c
c0021245:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021249:	e8 ea ff ff ff       	call   c0021238 <SoundChannel::pause()>
c002124e:	83 c4 04             	add    esp,0x4
c0021251:	6a 50                	push   0x50
c0021253:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021257:	e8 b8 ff ff ff       	call   c0021214 <SoundChannel::setVolume(int)>
c002125c:	83 c4 08             	add    esp,0x8
c002125f:	a1 f8 af 02 c0       	mov    eax,ds:0xc002aff8
c0021264:	50                   	push   eax
c0021265:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021269:	e8 92 ff ff ff       	call   c0021200 <SoundChannel::setSpeed(float)>
c002126e:	83 c4 08             	add    esp,0x8
c0021271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021275:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021279:	89 10                	mov    DWORD PTR [eax],edx
c002127b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002127f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021283:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002128a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002128e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021291:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021296:	75 23                	jne    c00212bb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002129c:	8b 10                	mov    edx,DWORD PTR [eax]
c002129e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a5:	0f af c2             	imul   eax,edx
c00212a8:	85 c0                	test   eax,eax
c00212aa:	79 03                	jns    c00212af <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00212ac:	83 c0 03             	add    eax,0x3
c00212af:	c1 f8 02             	sar    eax,0x2
c00212b2:	05 a0 0f 00 00       	add    eax,0xfa0
c00212b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00212bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00212c3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00212c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212ca:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00212d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212d5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00212dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00212e3:	c1 e0 02             	shl    eax,0x2
c00212e6:	83 ec 0c             	sub    esp,0xc
c00212e9:	50                   	push   eax
c00212ea:	e8 e5 e1 fe ff       	call   c000f4d4 <malloc>
c00212ef:	83 c4 10             	add    esp,0x10
c00212f2:	89 c2                	mov    edx,eax
c00212f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00212fb:	83 ec 04             	sub    esp,0x4
c00212fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021302:	50                   	push   eax
c0021303:	6a 01                	push   0x1
c0021305:	6a 04                	push   0x4
c0021307:	e8 43 76 fe ff       	call   c000894f <src_new>
c002130c:	83 c4 10             	add    esp,0x10
c002130f:	89 c2                	mov    edx,eax
c0021311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021315:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131c:	85 c0                	test   eax,eax
c002131e:	74 10                	je     c0021330 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021320:	83 ec 0c             	sub    esp,0xc
c0021323:	68 dc af 02 c0       	push   0xc002afdc
c0021328:	e8 1a 86 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002132d:	83 c4 10             	add    esp,0x10
c0021330:	a0 40 ed 02 c0       	mov    al,ds:0xc002ed40
c0021335:	83 f0 01             	xor    eax,0x1
c0021338:	84 c0                	test   al,al
c002133a:	74 57                	je     c0021393 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002133c:	a1 fc af 02 c0       	mov    eax,ds:0xc002affc
c0021341:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021345:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002134d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021355:	7f 35                	jg     c002138c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021357:	83 ec 0c             	sub    esp,0xc
c002135a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002135e:	e8 24 4a 00 00       	call   c0025d87 <__floatsisf>
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	8b 15 fc af 02 c0    	mov    edx,DWORD PTR ds:0xc002affc
c002136c:	83 ec 08             	sub    esp,0x8
c002136f:	52                   	push   edx
c0021370:	50                   	push   eax
c0021371:	e8 23 46 00 00       	call   c0025999 <__mulsf3>
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	89 c2                	mov    edx,eax
c002137b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002137f:	89 14 85 40 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd16c0],edx
c0021386:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002138a:	eb c1                	jmp    c002134d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002138c:	c6 05 40 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed40,0x1
c0021393:	90                   	nop
c0021394:	83 c4 1c             	add    esp,0x1c
c0021397:	c3                   	ret    

c0021398 <SoundChannel::play()>:
c0021398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002139c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00213a0:	c3                   	ret    
c00213a1:	90                   	nop

c00213a2 <SoundChannel::paused()>:
c00213a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00213a9:	c3                   	ret    

c00213aa <SoundChannel::getSampleRate()>:
c00213aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00213b0:	c3                   	ret    
c00213b1:	90                   	nop

c00213b2 <SoundChannel::getBits()>:
c00213b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213b9:	c3                   	ret    

c00213ba <SoundChannel::getBufferUsed()>:
c00213ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213be:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00213c1:	c3                   	ret    

c00213c2 <SoundChannel::getBufferSize()>:
c00213c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00213c9:	c3                   	ret    

c00213ca <SoundChannel::unbuffer(float*, int, int)>:
c00213ca:	56                   	push   esi
c00213cb:	53                   	push   ebx
c00213cc:	83 ec 40             	sub    esp,0x40
c00213cf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00213d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00213d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00213da:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00213dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00213e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00213e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00213e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00213ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00213f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00213f5:	e8 8d 49 00 00       	call   c0025d87 <__floatsisf>
c00213fa:	5a                   	pop    edx
c00213fb:	89 c6                	mov    esi,eax
c00213fd:	ff 33                	push   DWORD PTR [ebx]
c00213ff:	e8 83 49 00 00       	call   c0025d87 <__floatsisf>
c0021404:	59                   	pop    ecx
c0021405:	5a                   	pop    edx
c0021406:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021409:	50                   	push   eax
c002140a:	e8 8a 45 00 00       	call   c0025999 <__mulsf3>
c002140f:	59                   	pop    ecx
c0021410:	5a                   	pop    edx
c0021411:	50                   	push   eax
c0021412:	56                   	push   esi
c0021413:	e8 44 47 00 00       	call   c0025b5c <__divsf3>
c0021418:	89 04 24             	mov    DWORD PTR [esp],eax
c002141b:	e8 37 5c 00 00       	call   c0027057 <__extendsfdf2>
c0021420:	59                   	pop    ecx
c0021421:	5e                   	pop    esi
c0021422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021426:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002142a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021432:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021436:	50                   	push   eax
c0021437:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002143a:	e8 05 71 fe ff       	call   c0008544 <src_process>
c002143f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021443:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021446:	83 c4 0c             	add    esp,0xc
c0021449:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002144c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002144f:	29 d0                	sub    eax,edx
c0021451:	c1 e0 02             	shl    eax,0x2
c0021454:	50                   	push   eax
c0021455:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021458:	50                   	push   eax
c0021459:	51                   	push   ecx
c002145a:	e8 be f1 fd ff       	call   c000061d <memmove>
c002145f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021463:	83 c4 44             	add    esp,0x44
c0021466:	5b                   	pop    ebx
c0021467:	5e                   	pop    esi
c0021468:	c3                   	ret    
c0021469:	90                   	nop

c002146a <SoundChannel::buffer8(unsigned char*, int)>:
c002146a:	55                   	push   ebp
c002146b:	57                   	push   edi
c002146c:	56                   	push   esi
c002146d:	53                   	push   ebx
c002146e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021472:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021476:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021479:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002147d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021480:	74 7a                	je     c00214fc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021482:	85 ff                	test   edi,edi
c0021484:	7e 76                	jle    c00214fc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021486:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002148a:	8d 70 01             	lea    esi,[eax+0x1]
c002148d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021490:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021493:	8b 1c 9d 40 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16c0]
c002149a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002149d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00214a0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00214a3:	74 5e                	je     c0021503 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00214a5:	83 ff 01             	cmp    edi,0x1
c00214a8:	74 4b                	je     c00214f5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00214aa:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00214ae:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00214b1:	8d 70 01             	lea    esi,[eax+0x1]
c00214b4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00214b7:	8b 1c 9d 40 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16c0]
c00214be:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00214c1:	b8 02 00 00 00       	mov    eax,0x2
c00214c6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00214c9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00214cc:	75 23                	jne    c00214f1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00214ce:	eb 27                	jmp    c00214f7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00214d0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00214d5:	8d 71 01             	lea    esi,[ecx+0x1]
c00214d8:	40                   	inc    eax
c00214d9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00214dc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00214df:	8b 1c 9d 40 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16c0]
c00214e6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00214e9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00214ec:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00214ef:	74 06                	je     c00214f7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00214f1:	39 c7                	cmp    edi,eax
c00214f3:	75 db                	jne    c00214d0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00214f5:	89 f8                	mov    eax,edi
c00214f7:	5b                   	pop    ebx
c00214f8:	5e                   	pop    esi
c00214f9:	5f                   	pop    edi
c00214fa:	5d                   	pop    ebp
c00214fb:	c3                   	ret    
c00214fc:	5b                   	pop    ebx
c00214fd:	31 c0                	xor    eax,eax
c00214ff:	5e                   	pop    esi
c0021500:	5f                   	pop    edi
c0021501:	5d                   	pop    ebp
c0021502:	c3                   	ret    
c0021503:	b8 01 00 00 00       	mov    eax,0x1
c0021508:	eb ed                	jmp    c00214f7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002150a <SoundDevice::SoundDevice(char const*)>:
c002150a:	83 ec 1c             	sub    esp,0x1c
c002150d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021511:	83 ec 08             	sub    esp,0x8
c0021514:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021518:	50                   	push   eax
c0021519:	e8 ee 28 ff ff       	call   c0013e0c <Device::Device(char const*)>
c002151e:	83 c4 10             	add    esp,0x10
c0021521:	ba 08 b0 02 c0       	mov    edx,0xc002b008
c0021526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002152a:	89 10                	mov    DWORD PTR [eax],edx
c002152c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021530:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002153a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002153e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021548:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021550:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021555:	7f 19                	jg     c0021570 <SoundDevice::SoundDevice(char const*)+0x66>
c0021557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002155b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002155f:	83 c2 54             	add    edx,0x54
c0021562:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002156a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002156e:	eb e0                	jmp    c0021550 <SoundDevice::SoundDevice(char const*)+0x46>
c0021570:	90                   	nop
c0021571:	83 c4 1c             	add    esp,0x1c
c0021574:	c3                   	ret    
c0021575:	90                   	nop

c0021576 <SoundDevice::~SoundDevice()>:
c0021576:	53                   	push   ebx
c0021577:	83 ec 18             	sub    esp,0x18
c002157a:	ba 08 b0 02 c0       	mov    edx,0xc002b008
c002157f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021583:	89 10                	mov    DWORD PTR [eax],edx
c0021585:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002158d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021592:	7f 46                	jg     c00215da <SoundDevice::~SoundDevice()+0x64>
c0021594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021598:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002159c:	83 c2 54             	add    edx,0x54
c002159f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00215a3:	85 c0                	test   eax,eax
c00215a5:	74 2d                	je     c00215d4 <SoundDevice::~SoundDevice()+0x5e>
c00215a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215af:	83 c2 54             	add    edx,0x54
c00215b2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00215b6:	85 db                	test   ebx,ebx
c00215b8:	74 1a                	je     c00215d4 <SoundDevice::~SoundDevice()+0x5e>
c00215ba:	83 ec 0c             	sub    esp,0xc
c00215bd:	53                   	push   ebx
c00215be:	e8 21 fc ff ff       	call   c00211e4 <SoundChannel::~SoundChannel()>
c00215c3:	83 c4 10             	add    esp,0x10
c00215c6:	83 ec 08             	sub    esp,0x8
c00215c9:	6a 2c                	push   0x2c
c00215cb:	53                   	push   ebx
c00215cc:	e8 7c 11 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c00215d1:	83 c4 10             	add    esp,0x10
c00215d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00215d8:	eb b3                	jmp    c002158d <SoundDevice::~SoundDevice()+0x17>
c00215da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215de:	83 ec 0c             	sub    esp,0xc
c00215e1:	50                   	push   eax
c00215e2:	e8 07 25 ff ff       	call   c0013aee <Device::~Device()>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	90                   	nop
c00215eb:	83 c4 18             	add    esp,0x18
c00215ee:	5b                   	pop    ebx
c00215ef:	c3                   	ret    

c00215f0 <SoundDevice::~SoundDevice()>:
c00215f0:	83 ec 0c             	sub    esp,0xc
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215fa:	e8 77 ff ff ff       	call   c0021576 <SoundDevice::~SoundDevice()>
c00215ff:	83 c4 10             	add    esp,0x10
c0021602:	83 ec 08             	sub    esp,0x8
c0021605:	68 e4 01 00 00       	push   0x1e4
c002160a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002160e:	e8 3a 11 ff ff       	call   c001274d <operator delete(void*, unsigned long)>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	83 c4 0c             	add    esp,0xc
c0021619:	c3                   	ret    

c002161a <SoundDevice::getFreeChannelNum()>:
c002161a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002161e:	31 c0                	xor    eax,eax
c0021620:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021628:	74 09                	je     c0021633 <SoundDevice::getFreeChannelNum()+0x19>
c002162a:	40                   	inc    eax
c002162b:	83 f8 20             	cmp    eax,0x20
c002162e:	75 f0                	jne    c0021620 <SoundDevice::getFreeChannelNum()+0x6>
c0021630:	83 c8 ff             	or     eax,0xffffffff
c0021633:	c3                   	ret    

c0021634 <SoundDevice::addChannel(SoundChannel*)>:
c0021634:	56                   	push   esi
c0021635:	53                   	push   ebx
c0021636:	51                   	push   ecx
c0021637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002163b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002163f:	53                   	push   ebx
c0021640:	e8 d5 ff ff ff       	call   c002161a <SoundDevice::getFreeChannelNum()>
c0021645:	5a                   	pop    edx
c0021646:	83 f8 ff             	cmp    eax,0xffffffff
c0021649:	74 51                	je     c002169c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002164b:	85 f6                	test   esi,esi
c002164d:	74 4d                	je     c002169c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002164f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021656:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002165d:	75 30                	jne    c002168f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002165f:	83 ec 0c             	sub    esp,0xc
c0021662:	56                   	push   esi
c0021663:	e8 42 fd ff ff       	call   c00213aa <SoundChannel::getSampleRate()>
c0021668:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002166e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021671:	e8 3c fd ff ff       	call   c00213b2 <SoundChannel::getBits()>
c0021676:	83 c4 0c             	add    esp,0xc
c0021679:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002167f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021681:	50                   	push   eax
c0021682:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021688:	53                   	push   ebx
c0021689:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021695:	b8 01 00 00 00       	mov    eax,0x1
c002169a:	eb 03                	jmp    c002169f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002169c:	83 c8 ff             	or     eax,0xffffffff
c002169f:	5a                   	pop    edx
c00216a0:	5b                   	pop    ebx
c00216a1:	5e                   	pop    esi
c00216a2:	c3                   	ret    
c00216a3:	90                   	nop

c00216a4 <SoundDevice::removeChannel(int)>:
c00216a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216ac:	83 fa 1f             	cmp    edx,0x1f
c00216af:	77 23                	ja     c00216d4 <SoundDevice::removeChannel(int)+0x30>
c00216b1:	8d 14 90             	lea    edx,[eax+edx*4]
c00216b4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00216bb:	74 17                	je     c00216d4 <SoundDevice::removeChannel(int)+0x30>
c00216bd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00216c7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00216cd:	75 05                	jne    c00216d4 <SoundDevice::removeChannel(int)+0x30>
c00216cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00216d1:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00216d4:	c3                   	ret    
c00216d5:	90                   	nop

c00216d6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00216d6:	57                   	push   edi
c00216d7:	56                   	push   esi
c00216d8:	53                   	push   ebx
c00216d9:	31 db                	xor    ebx,ebx
c00216db:	83 ec 10             	sub    esp,0x10
c00216de:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00216e2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00216e6:	0f 8d cb 00 00 00    	jge    c00217b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216f3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00216f6:	e8 5c 59 00 00       	call   c0027057 <__extendsfdf2>
c00216fb:	83 c4 10             	add    esp,0x10
c00216fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021702:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021706:	68 00 00 f0 3f       	push   0x3ff00000
c002170b:	6a 00                	push   0x0
c002170d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021715:	e8 c9 48 00 00       	call   c0025fe3 <__adddf3>
c002171a:	83 c4 10             	add    esp,0x10
c002171d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021721:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021725:	68 00 00 e0 3f       	push   0x3fe00000
c002172a:	6a 00                	push   0x0
c002172c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021734:	e8 27 4f 00 00       	call   c0026660 <__muldf3>
c0021739:	83 c4 10             	add    esp,0x10
c002173c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021740:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021744:	68 00 00 60 40       	push   0x40600000
c0021749:	6a 00                	push   0x0
c002174b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002174f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021753:	e8 08 4f 00 00       	call   c0026660 <__muldf3>
c0021758:	59                   	pop    ecx
c0021759:	5f                   	pop    edi
c002175a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002175e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021762:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002176a:	e8 c4 57 00 00       	call   c0026f33 <__truncdfsf2>
c002176f:	5a                   	pop    edx
c0021770:	89 c7                	mov    edi,eax
c0021772:	59                   	pop    ecx
c0021773:	68 00 00 fe 42       	push   0x42fe0000
c0021778:	50                   	push   eax
c0021779:	e8 5f 48 00 00       	call   c0025fdd <__gesf2>
c002177e:	83 c4 10             	add    esp,0x10
c0021781:	85 c0                	test   eax,eax
c0021783:	78 06                	js     c002178b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021785:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021789:	eb 26                	jmp    c00217b1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002178b:	50                   	push   eax
c002178c:	50                   	push   eax
c002178d:	6a 00                	push   0x0
c002178f:	57                   	push   edi
c0021790:	e8 4c 48 00 00       	call   c0025fe1 <__lesf2>
c0021795:	83 c4 10             	add    esp,0x10
c0021798:	85 c0                	test   eax,eax
c002179a:	7f 06                	jg     c00217a2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002179c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00217a0:	eb 0f                	jmp    c00217b1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00217a2:	83 ec 0c             	sub    esp,0xc
c00217a5:	57                   	push   edi
c00217a6:	e8 41 59 00 00       	call   c00270ec <lrintf>
c00217ab:	83 c4 10             	add    esp,0x10
c00217ae:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00217b1:	43                   	inc    ebx
c00217b2:	e9 2b ff ff ff       	jmp    c00216e2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00217b7:	83 c4 10             	add    esp,0x10
c00217ba:	5b                   	pop    ebx
c00217bb:	5e                   	pop    esi
c00217bc:	5f                   	pop    edi
c00217bd:	c3                   	ret    

c00217be <SoundDevice::getAudio(int, float*, float*)>:
c00217be:	55                   	push   ebp
c00217bf:	57                   	push   edi
c00217c0:	56                   	push   esi
c00217c1:	53                   	push   ebx
c00217c2:	31 db                	xor    ebx,ebx
c00217c4:	83 ec 20             	sub    esp,0x20
c00217c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00217cf:	c1 e0 02             	shl    eax,0x2
c00217d2:	50                   	push   eax
c00217d3:	6a 00                	push   0x0
c00217d5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00217d9:	e8 ad ee fd ff       	call   c000068b <memset>
c00217de:	83 c4 10             	add    esp,0x10
c00217e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00217e5:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00217ec:	85 c0                	test   eax,eax
c00217ee:	0f 84 d7 00 00 00    	je     c00218cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217f4:	83 ec 0c             	sub    esp,0xc
c00217f7:	50                   	push   eax
c00217f8:	e8 a5 fb ff ff       	call   c00213a2 <SoundChannel::paused()>
c00217fd:	83 c4 10             	add    esp,0x10
c0021800:	84 c0                	test   al,al
c0021802:	0f 85 c3 00 00 00    	jne    c00218cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021808:	83 ec 0c             	sub    esp,0xc
c002180b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021812:	e8 19 fa ff ff       	call   c0021230 <SoundChannel::getVolume()>
c0021817:	83 c4 10             	add    esp,0x10
c002181a:	85 c0                	test   eax,eax
c002181c:	0f 84 a9 00 00 00    	je     c00218cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021822:	83 ec 0c             	sub    esp,0xc
c0021825:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002182c:	e8 ff f9 ff ff       	call   c0021230 <SoundChannel::getVolume()>
c0021831:	83 ec 0c             	sub    esp,0xc
c0021834:	50                   	push   eax
c0021835:	e8 4d 45 00 00       	call   c0025d87 <__floatsisf>
c002183a:	59                   	pop    ecx
c002183b:	5d                   	pop    ebp
c002183c:	31 ed                	xor    ebp,ebp
c002183e:	68 00 00 c8 42       	push   0x42c80000
c0021843:	50                   	push   eax
c0021844:	e8 13 43 00 00       	call   c0025b5c <__divsf3>
c0021849:	83 c4 10             	add    esp,0x10
c002184c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021850:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021854:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002185a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002185e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021865:	e8 60 fb ff ff       	call   c00213ca <SoundChannel::unbuffer(float*, int, int)>
c002186a:	83 c4 20             	add    esp,0x20
c002186d:	89 c1                	mov    ecx,eax
c002186f:	39 cd                	cmp    ebp,ecx
c0021871:	7d 52                	jge    c00218c5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021873:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021877:	50                   	push   eax
c0021878:	50                   	push   eax
c0021879:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002187d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021884:	e8 10 41 00 00       	call   c0025999 <__mulsf3>
c0021889:	5a                   	pop    edx
c002188a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002188e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021894:	e8 ee 44 00 00       	call   c0025d87 <__floatsisf>
c0021899:	59                   	pop    ecx
c002189a:	5a                   	pop    edx
c002189b:	50                   	push   eax
c002189c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218a0:	e8 b7 42 00 00       	call   c0025b5c <__divsf3>
c00218a5:	59                   	pop    ecx
c00218a6:	5a                   	pop    edx
c00218a7:	50                   	push   eax
c00218a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00218ac:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00218af:	e8 c2 3d 00 00       	call   c0025676 <__addsf3>
c00218b4:	83 c4 10             	add    esp,0x10
c00218b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00218bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218bf:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00218c2:	45                   	inc    ebp
c00218c3:	eb aa                	jmp    c002186f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00218c5:	39 cf                	cmp    edi,ecx
c00218c7:	7e 02                	jle    c00218cb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00218c9:	89 cf                	mov    edi,ecx
c00218cb:	43                   	inc    ebx
c00218cc:	83 fb 20             	cmp    ebx,0x20
c00218cf:	0f 85 10 ff ff ff    	jne    c00217e5 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00218d5:	83 c4 1c             	add    esp,0x1c
c00218d8:	89 f8                	mov    eax,edi
c00218da:	5b                   	pop    ebx
c00218db:	5e                   	pop    esi
c00218dc:	5f                   	pop    edi
c00218dd:	5d                   	pop    ebp
c00218de:	c3                   	ret    
c00218df:	90                   	nop

c00218e0 <PCI::open(int, int, void*)>:
c00218e0:	83 ec 18             	sub    esp,0x18
c00218e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00218e9:	50                   	push   eax
c00218ea:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00218ed:	31 c0                	xor    eax,eax
c00218ef:	83 c4 1c             	add    esp,0x1c
c00218f2:	c3                   	ret    
c00218f3:	90                   	nop

c00218f4 <PCI::close(int, int, void*)>:
c00218f4:	31 c0                	xor    eax,eax
c00218f6:	c3                   	ret    
c00218f7:	90                   	nop

c00218f8 <PCI::PCI()>:
c00218f8:	83 ec 0c             	sub    esp,0xc
c00218fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ff:	83 ec 08             	sub    esp,0x8
c0021902:	68 38 b0 02 c0       	push   0xc002b038
c0021907:	50                   	push   eax
c0021908:	e8 bb 1b ff ff       	call   c00134c8 <Bus::Bus(char const*)>
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c0021915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021919:	89 10                	mov    DWORD PTR [eax],edx
c002191b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021925:	0f b6 d0             	movzx  edx,al
c0021928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021937:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002193d:	0f b6 d0             	movzx  edx,al
c0021940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021944:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021953:	8d 50 01             	lea    edx,[eax+0x1]
c0021956:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002195a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021960:	0f b6 d0             	movzx  edx,al
c0021963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021967:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002196b:	83 c9 c0             	or     ecx,0xffffffc0
c002196e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021972:	90                   	nop
c0021973:	83 c4 0c             	add    esp,0xc
c0021976:	c3                   	ret    
c0021977:	90                   	nop

c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021978:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002197c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021981:	89 ca                	mov    edx,ecx
c0021983:	c1 e0 10             	shl    eax,0x10
c0021986:	81 e2 fc 00 00 00    	and    edx,0xfc
c002198c:	09 d0                	or     eax,edx
c002198e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021993:	c1 e2 08             	shl    edx,0x8
c0021996:	09 d0                	or     eax,edx
c0021998:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002199d:	c1 e2 0b             	shl    edx,0xb
c00219a0:	09 d0                	or     eax,edx
c00219a2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00219a7:	0d 00 00 00 80       	or     eax,0x80000000
c00219ac:	ef                   	out    dx,eax
c00219ad:	ba fc 0c 00 00       	mov    edx,0xcfc
c00219b2:	ed                   	in     eax,dx
c00219b3:	83 e1 02             	and    ecx,0x2
c00219b6:	0f b6 c9             	movzx  ecx,cl
c00219b9:	c1 e1 03             	shl    ecx,0x3
c00219bc:	d3 e8                	shr    eax,cl
c00219be:	c3                   	ret    
c00219bf:	90                   	nop

c00219c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00219c0:	6a 00                	push   0x0
c00219c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c7:	50                   	push   eax
c00219c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219cd:	50                   	push   eax
c00219ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219d3:	50                   	push   eax
c00219d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219d8:	e8 9b ff ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219dd:	83 c4 14             	add    esp,0x14
c00219e0:	c3                   	ret    
c00219e1:	90                   	nop

c00219e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00219e2:	6a 0e                	push   0xe
c00219e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e9:	50                   	push   eax
c00219ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ef:	50                   	push   eax
c00219f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f5:	50                   	push   eax
c00219f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219fa:	e8 79 ff ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219ff:	83 c4 14             	add    esp,0x14
c0021a02:	0f b6 c0             	movzx  eax,al
c0021a05:	c3                   	ret    

c0021a06 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021a06:	55                   	push   ebp
c0021a07:	57                   	push   edi
c0021a08:	56                   	push   esi
c0021a09:	53                   	push   ebx
c0021a0a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021a0f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021a14:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021a19:	6a 0a                	push   0xa
c0021a1b:	56                   	push   esi
c0021a1c:	55                   	push   ebp
c0021a1d:	57                   	push   edi
c0021a1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021a22:	e8 51 ff ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a27:	6a 0a                	push   0xa
c0021a29:	89 c3                	mov    ebx,eax
c0021a2b:	56                   	push   esi
c0021a2c:	0f b6 db             	movzx  ebx,bl
c0021a2f:	55                   	push   ebp
c0021a30:	57                   	push   edi
c0021a31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021a35:	e8 3e ff ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a3a:	83 c4 28             	add    esp,0x28
c0021a3d:	25 00 ff 00 00       	and    eax,0xff00
c0021a42:	09 d8                	or     eax,ebx
c0021a44:	5b                   	pop    ebx
c0021a45:	5e                   	pop    esi
c0021a46:	5f                   	pop    edi
c0021a47:	5d                   	pop    ebp
c0021a48:	c3                   	ret    
c0021a49:	90                   	nop

c0021a4a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021a4a:	6a 08                	push   0x8
c0021a4c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a51:	50                   	push   eax
c0021a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a57:	50                   	push   eax
c0021a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a5d:	50                   	push   eax
c0021a5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a62:	e8 11 ff ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a67:	83 c4 14             	add    esp,0x14
c0021a6a:	0f b6 c4             	movzx  eax,ah
c0021a6d:	c3                   	ret    

c0021a6e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021a6e:	6a 08                	push   0x8
c0021a70:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a75:	50                   	push   eax
c0021a76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a7b:	50                   	push   eax
c0021a7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a81:	50                   	push   eax
c0021a82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a86:	e8 ed fe ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a8b:	83 c4 14             	add    esp,0x14
c0021a8e:	c3                   	ret    
c0021a8f:	90                   	nop

c0021a90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021a90:	6a 3c                	push   0x3c
c0021a92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a97:	50                   	push   eax
c0021a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a9d:	50                   	push   eax
c0021a9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021aa3:	50                   	push   eax
c0021aa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aa8:	e8 cb fe ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021aad:	83 c4 14             	add    esp,0x14
c0021ab0:	c3                   	ret    
c0021ab1:	90                   	nop

c0021ab2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021ab2:	6a 18                	push   0x18
c0021ab4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ab9:	50                   	push   eax
c0021aba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021abf:	50                   	push   eax
c0021ac0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ac5:	50                   	push   eax
c0021ac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aca:	e8 a9 fe ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021acf:	83 c4 14             	add    esp,0x14
c0021ad2:	0f b6 c4             	movzx  eax,ah
c0021ad5:	c3                   	ret    

c0021ad6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021ad6:	55                   	push   ebp
c0021ad7:	57                   	push   edi
c0021ad8:	56                   	push   esi
c0021ad9:	53                   	push   ebx
c0021ada:	50                   	push   eax
c0021adb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021adf:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021ae4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021ae9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021aee:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021af5:	8d 43 12             	lea    eax,[ebx+0x12]
c0021af8:	83 c3 10             	add    ebx,0x10
c0021afb:	0f b6 c0             	movzx  eax,al
c0021afe:	0f b6 db             	movzx  ebx,bl
c0021b01:	50                   	push   eax
c0021b02:	51                   	push   ecx
c0021b03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021b07:	57                   	push   edi
c0021b08:	55                   	push   ebp
c0021b09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021b0d:	e8 66 fe ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b12:	53                   	push   ebx
c0021b13:	89 c6                	mov    esi,eax
c0021b15:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b19:	c1 e6 10             	shl    esi,0x10
c0021b1c:	51                   	push   ecx
c0021b1d:	57                   	push   edi
c0021b1e:	55                   	push   ebp
c0021b1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021b23:	e8 50 fe ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b28:	83 c4 2c             	add    esp,0x2c
c0021b2b:	0f b7 c0             	movzx  eax,ax
c0021b2e:	5b                   	pop    ebx
c0021b2f:	09 f0                	or     eax,esi
c0021b31:	5e                   	pop    esi
c0021b32:	5f                   	pop    edi
c0021b33:	5d                   	pop    ebp
c0021b34:	c3                   	ret    
c0021b35:	90                   	nop

c0021b36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021b36:	53                   	push   ebx
c0021b37:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b3c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021b41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b45:	c1 e1 10             	shl    ecx,0x10
c0021b48:	25 fc 00 00 00       	and    eax,0xfc
c0021b4d:	09 c1                	or     ecx,eax
c0021b4f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b54:	c1 e0 08             	shl    eax,0x8
c0021b57:	09 c1                	or     ecx,eax
c0021b59:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021b5e:	c1 e0 0b             	shl    eax,0xb
c0021b61:	09 c1                	or     ecx,eax
c0021b63:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021b69:	89 c8                	mov    eax,ecx
c0021b6b:	ef                   	out    dx,eax
c0021b6c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b71:	ed                   	in     eax,dx
c0021b72:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021b77:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021b7c:	74 0a                	je     c0021b88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021b7e:	0f b7 d8             	movzx  ebx,ax
c0021b81:	89 d0                	mov    eax,edx
c0021b83:	c1 e0 10             	shl    eax,0x10
c0021b86:	eb 05                	jmp    c0021b8d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021b88:	66 31 c0             	xor    ax,ax
c0021b8b:	89 d3                	mov    ebx,edx
c0021b8d:	09 c3                	or     ebx,eax
c0021b8f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b94:	89 c8                	mov    eax,ecx
c0021b96:	ef                   	out    dx,eax
c0021b97:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b9c:	89 d8                	mov    eax,ebx
c0021b9e:	ef                   	out    dx,eax
c0021b9f:	5b                   	pop    ebx
c0021ba0:	c3                   	ret    
c0021ba1:	90                   	nop

c0021ba2 <PCI::checkBus(unsigned char)>:
c0021ba2:	56                   	push   esi
c0021ba3:	53                   	push   ebx
c0021ba4:	31 db                	xor    ebx,ebx
c0021ba6:	51                   	push   ecx
c0021ba7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021bac:	52                   	push   edx
c0021bad:	53                   	push   ebx
c0021bae:	43                   	inc    ebx
c0021baf:	56                   	push   esi
c0021bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bb4:	e8 2b 03 00 00       	call   c0021ee4 <PCI::checkDevice(unsigned char, unsigned char)>
c0021bb9:	83 c4 10             	add    esp,0x10
c0021bbc:	83 fb 20             	cmp    ebx,0x20
c0021bbf:	75 eb                	jne    c0021bac <PCI::checkBus(unsigned char)+0xa>
c0021bc1:	58                   	pop    eax
c0021bc2:	5b                   	pop    ebx
c0021bc3:	5e                   	pop    esi
c0021bc4:	c3                   	ret    
c0021bc5:	90                   	nop

c0021bc6 <PCI::foundDevice(PCIDeviceInfo)>:
c0021bc6:	55                   	push   ebp
c0021bc7:	57                   	push   edi
c0021bc8:	56                   	push   esi
c0021bc9:	53                   	push   ebx
c0021bca:	83 ec 1c             	sub    esp,0x1c
c0021bcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021bd1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021bd7:	0f 84 52 01 00 00    	je     c0021d2f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021bdd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021be1:	66 81 f9 06 04       	cmp    cx,0x406
c0021be6:	75 2c                	jne    c0021c14 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021be8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021bed:	50                   	push   eax
c0021bee:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021bf3:	50                   	push   eax
c0021bf4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021bf9:	50                   	push   eax
c0021bfa:	56                   	push   esi
c0021bfb:	e8 b2 fe ff ff       	call   c0021ab2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021c00:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021c04:	0f b6 c0             	movzx  eax,al
c0021c07:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021c0b:	83 c4 2c             	add    esp,0x2c
c0021c0e:	5b                   	pop    ebx
c0021c0f:	5e                   	pop    esi
c0021c10:	5f                   	pop    edi
c0021c11:	5d                   	pop    ebp
c0021c12:	eb 8e                	jmp    c0021ba2 <PCI::checkBus(unsigned char)>
c0021c14:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c18:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c22:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021c26:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021c2a:	88 d3                	mov    bl,dl
c0021c2c:	85 c0                	test   eax,eax
c0021c2e:	74 33                	je     c0021c63 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021c30:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021c33:	85 d2                	test   edx,edx
c0021c35:	74 28                	je     c0021c5f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021c37:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021c3d:	31 ef                	xor    edi,ebp
c0021c3f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021c45:	75 18                	jne    c0021c5f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021c47:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c4b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021c51:	75 0c                	jne    c0021c5f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021c53:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021c59:	0f 84 d0 00 00 00    	je     c0021d2f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c61:	eb c9                	jmp    c0021c2c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021c63:	66 81 f9 01 06       	cmp    cx,0x601
c0021c68:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021c6c:	75 19                	jne    c0021c87 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021c6e:	83 ec 0c             	sub    esp,0xc
c0021c71:	68 64 01 00 00       	push   0x164
c0021c76:	e8 59 d8 fe ff       	call   c000f4d4 <malloc>
c0021c7b:	89 c5                	mov    ebp,eax
c0021c7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c80:	e8 95 0f 00 00       	call   c0022c1a <SATABus::SATABus()>
c0021c85:	eb 1e                	jmp    c0021ca5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021c87:	66 81 f9 01 01       	cmp    cx,0x101
c0021c8c:	75 60                	jne    c0021cee <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021c8e:	83 ec 0c             	sub    esp,0xc
c0021c91:	68 70 02 00 00       	push   0x270
c0021c96:	e8 39 d8 fe ff       	call   c000f4d4 <malloc>
c0021c9b:	89 c5                	mov    ebp,eax
c0021c9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ca0:	e8 03 03 00 00       	call   c0021fa8 <IDE::IDE()>
c0021ca5:	58                   	pop    eax
c0021ca6:	5a                   	pop    edx
c0021ca7:	55                   	push   ebp
c0021ca8:	56                   	push   esi
c0021ca9:	e8 6e 1f ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0021cae:	83 ec 1c             	sub    esp,0x1c
c0021cb1:	b9 09 00 00 00       	mov    ecx,0x9
c0021cb6:	fc                   	cld    
c0021cb7:	89 e7                	mov    edi,esp
c0021cb9:	89 de                	mov    esi,ebx
c0021cbb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021cbd:	55                   	push   ebp
c0021cbe:	e8 63 1e ff ff       	call   c0013b26 <Device::preOpenPCI(PCIDeviceInfo)>
c0021cc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021cc6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021cca:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021cd2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021cda:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021ce2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ce5:	83 c4 4c             	add    esp,0x4c
c0021ce8:	5b                   	pop    ebx
c0021ce9:	5e                   	pop    esi
c0021cea:	5f                   	pop    edi
c0021ceb:	5d                   	pop    ebp
c0021cec:	ff e0                	jmp    eax
c0021cee:	83 ec 0c             	sub    esp,0xc
c0021cf1:	68 58 01 00 00       	push   0x158
c0021cf6:	e8 d9 d7 fe ff       	call   c000f4d4 <malloc>
c0021cfb:	89 c5                	mov    ebp,eax
c0021cfd:	58                   	pop    eax
c0021cfe:	5a                   	pop    edx
c0021cff:	68 40 b0 02 c0       	push   0xc002b040
c0021d04:	55                   	push   ebp
c0021d05:	e8 08 22 ff ff       	call   c0013f12 <DriverlessDevice::DriverlessDevice(char const*)>
c0021d0a:	59                   	pop    ecx
c0021d0b:	5f                   	pop    edi
c0021d0c:	55                   	push   ebp
c0021d0d:	56                   	push   esi
c0021d0e:	e8 09 1f ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0021d13:	b9 09 00 00 00       	mov    ecx,0x9
c0021d18:	fc                   	cld    
c0021d19:	89 df                	mov    edi,ebx
c0021d1b:	89 de                	mov    esi,ebx
c0021d1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021d1f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021d23:	83 c4 2c             	add    esp,0x2c
c0021d26:	5b                   	pop    ebx
c0021d27:	5e                   	pop    esi
c0021d28:	5f                   	pop    edi
c0021d29:	5d                   	pop    ebp
c0021d2a:	e9 f7 1d ff ff       	jmp    c0013b26 <Device::preOpenPCI(PCIDeviceInfo)>
c0021d2f:	83 c4 1c             	add    esp,0x1c
c0021d32:	5b                   	pop    ebx
c0021d33:	5e                   	pop    esi
c0021d34:	5f                   	pop    edi
c0021d35:	5d                   	pop    ebp
c0021d36:	c3                   	ret    
c0021d37:	90                   	nop

c0021d38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021d38:	55                   	push   ebp
c0021d39:	57                   	push   edi
c0021d3a:	56                   	push   esi
c0021d3b:	53                   	push   ebx
c0021d3c:	83 ec 5c             	sub    esp,0x5c
c0021d3f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021d43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021d47:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021d4b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021d50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021d54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021d58:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021d5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d61:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021d66:	6a 0c                	push   0xc
c0021d68:	55                   	push   ebp
c0021d69:	53                   	push   ebx
c0021d6a:	57                   	push   edi
c0021d6b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021d72:	e8 01 fc ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d77:	55                   	push   ebp
c0021d78:	53                   	push   ebx
c0021d79:	57                   	push   edi
c0021d7a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d81:	e8 80 fc ff ff       	call   c0021a06 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021d86:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021d8b:	83 c4 24             	add    esp,0x24
c0021d8e:	55                   	push   ebp
c0021d8f:	53                   	push   ebx
c0021d90:	57                   	push   edi
c0021d91:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021d95:	e8 f6 fc ff ff       	call   c0021a90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021d9a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021d9e:	6a 3c                	push   0x3c
c0021da0:	55                   	push   ebp
c0021da1:	53                   	push   ebx
c0021da2:	57                   	push   edi
c0021da3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021daa:	e8 c9 fb ff ff       	call   c0021978 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021daf:	0f b6 c4             	movzx  eax,ah
c0021db2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021db6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021dba:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021dbe:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0021dc3:	83 c4 24             	add    esp,0x24
c0021dc6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021dcc:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021dd3:	74 6c                	je     c0021e41 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021dd5:	31 f6                	xor    esi,esi
c0021dd7:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c0021ddd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021de3:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021de9:	7e 56                	jle    c0021e41 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021deb:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021dee:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021df5:	39 cb                	cmp    ebx,ecx
c0021df7:	75 45                	jne    c0021e3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021df9:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021e00:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021e04:	75 38                	jne    c0021e3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021e06:	83 ec 0c             	sub    esp,0xc
c0021e09:	68 5a b0 02 c0       	push   0xc002b05a
c0021e0e:	e8 1a 0a ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0021e13:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c0021e19:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021e1f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021e27:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021e2b:	52                   	push   edx
c0021e2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e30:	53                   	push   ebx
c0021e31:	68 7f b0 02 c0       	push   0xc002b07f
c0021e36:	e8 f2 09 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0021e3b:	83 c4 20             	add    esp,0x20
c0021e3e:	46                   	inc    esi
c0021e3f:	eb 96                	jmp    c0021dd7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021e41:	31 d2                	xor    edx,edx
c0021e43:	83 ec 0c             	sub    esp,0xc
c0021e46:	55                   	push   ebp
c0021e47:	53                   	push   ebx
c0021e48:	57                   	push   edi
c0021e49:	52                   	push   edx
c0021e4a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021e4e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e55:	e8 7c fc ff ff       	call   c0021ad6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e5a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021e5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e62:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021e66:	42                   	inc    edx
c0021e67:	83 c4 20             	add    esp,0x20
c0021e6a:	83 fa 06             	cmp    edx,0x6
c0021e6d:	75 d4                	jne    c0021e43 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021e6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e73:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021e77:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021e7b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021e7f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021e83:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021e87:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021e8c:	86 e0                	xchg   al,ah
c0021e8e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021e93:	55                   	push   ebp
c0021e94:	53                   	push   ebx
c0021e95:	57                   	push   edi
c0021e96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021e9a:	e8 ab fb ff ff       	call   c0021a4a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021e9f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021ea3:	55                   	push   ebp
c0021ea4:	53                   	push   ebx
c0021ea5:	57                   	push   edi
c0021ea6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021ead:	e8 0e fb ff ff       	call   c00219c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021eb2:	83 ec 0c             	sub    esp,0xc
c0021eb5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021eba:	b9 09 00 00 00       	mov    ecx,0x9
c0021ebf:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021ec3:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021ec7:	fc                   	cld    
c0021ec8:	89 e7                	mov    edi,esp
c0021eca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021ecc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021ed3:	e8 ee fc ff ff       	call   c0021bc6 <PCI::foundDevice(PCIDeviceInfo)>
c0021ed8:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021ede:	5b                   	pop    ebx
c0021edf:	5e                   	pop    esi
c0021ee0:	5f                   	pop    edi
c0021ee1:	5d                   	pop    ebp
c0021ee2:	c3                   	ret    
c0021ee3:	90                   	nop

c0021ee4 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021ee4:	55                   	push   ebp
c0021ee5:	57                   	push   edi
c0021ee6:	56                   	push   esi
c0021ee7:	53                   	push   ebx
c0021ee8:	83 ec 0c             	sub    esp,0xc
c0021eeb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021eef:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021ef4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021ef9:	6a 00                	push   0x0
c0021efb:	56                   	push   esi
c0021efc:	57                   	push   edi
c0021efd:	55                   	push   ebp
c0021efe:	e8 bd fa ff ff       	call   c00219c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f03:	6a 00                	push   0x0
c0021f05:	56                   	push   esi
c0021f06:	57                   	push   edi
c0021f07:	55                   	push   ebp
c0021f08:	e8 2b fe ff ff       	call   c0021d38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021f0d:	83 c4 20             	add    esp,0x20
c0021f10:	6a 00                	push   0x0
c0021f12:	56                   	push   esi
c0021f13:	57                   	push   edi
c0021f14:	55                   	push   ebp
c0021f15:	e8 c8 fa ff ff       	call   c00219e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021f1a:	83 c4 10             	add    esp,0x10
c0021f1d:	84 c0                	test   al,al
c0021f1f:	79 27                	jns    c0021f48 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021f21:	bb 01 00 00 00       	mov    ebx,0x1
c0021f26:	53                   	push   ebx
c0021f27:	56                   	push   esi
c0021f28:	57                   	push   edi
c0021f29:	55                   	push   ebp
c0021f2a:	e8 91 fa ff ff       	call   c00219c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f2f:	83 c4 10             	add    esp,0x10
c0021f32:	66 40                	inc    ax
c0021f34:	74 0c                	je     c0021f42 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021f36:	53                   	push   ebx
c0021f37:	56                   	push   esi
c0021f38:	57                   	push   edi
c0021f39:	55                   	push   ebp
c0021f3a:	e8 f9 fd ff ff       	call   c0021d38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021f3f:	83 c4 10             	add    esp,0x10
c0021f42:	43                   	inc    ebx
c0021f43:	83 fb 08             	cmp    ebx,0x8
c0021f46:	75 de                	jne    c0021f26 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021f48:	83 c4 0c             	add    esp,0xc
c0021f4b:	5b                   	pop    ebx
c0021f4c:	5e                   	pop    esi
c0021f4d:	5f                   	pop    edi
c0021f4e:	5d                   	pop    ebp
c0021f4f:	c3                   	ret    

c0021f50 <PCI::detect()>:
c0021f50:	56                   	push   esi
c0021f51:	53                   	push   ebx
c0021f52:	53                   	push   ebx
c0021f53:	31 db                	xor    ebx,ebx
c0021f55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021f59:	6a 00                	push   0x0
c0021f5b:	6a 00                	push   0x0
c0021f5d:	6a 00                	push   0x0
c0021f5f:	56                   	push   esi
c0021f60:	e8 7d fa ff ff       	call   c00219e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021f65:	83 c4 10             	add    esp,0x10
c0021f68:	a8 80                	test   al,0x80
c0021f6a:	75 21                	jne    c0021f8d <PCI::detect()+0x3d>
c0021f6c:	51                   	push   ecx
c0021f6d:	51                   	push   ecx
c0021f6e:	6a 00                	push   0x0
c0021f70:	56                   	push   esi
c0021f71:	e8 2c fc ff ff       	call   c0021ba2 <PCI::checkBus(unsigned char)>
c0021f76:	83 c4 10             	add    esp,0x10
c0021f79:	eb 24                	jmp    c0021f9f <PCI::detect()+0x4f>
c0021f7b:	52                   	push   edx
c0021f7c:	52                   	push   edx
c0021f7d:	53                   	push   ebx
c0021f7e:	43                   	inc    ebx
c0021f7f:	56                   	push   esi
c0021f80:	e8 1d fc ff ff       	call   c0021ba2 <PCI::checkBus(unsigned char)>
c0021f85:	83 c4 10             	add    esp,0x10
c0021f88:	83 fb 08             	cmp    ebx,0x8
c0021f8b:	74 12                	je     c0021f9f <PCI::detect()+0x4f>
c0021f8d:	53                   	push   ebx
c0021f8e:	6a 00                	push   0x0
c0021f90:	6a 00                	push   0x0
c0021f92:	56                   	push   esi
c0021f93:	e8 28 fa ff ff       	call   c00219c0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f98:	83 c4 10             	add    esp,0x10
c0021f9b:	66 40                	inc    ax
c0021f9d:	74 dc                	je     c0021f7b <PCI::detect()+0x2b>
c0021f9f:	58                   	pop    eax
c0021fa0:	5b                   	pop    ebx
c0021fa1:	5e                   	pop    esi
c0021fa2:	c3                   	ret    
c0021fa3:	90                   	nop

c0021fa4 <IDE::close(int, int, void*)>:
c0021fa4:	83 c8 ff             	or     eax,0xffffffff
c0021fa7:	c3                   	ret    

c0021fa8 <IDE::IDE()>:
c0021fa8:	83 ec 0c             	sub    esp,0xc
c0021fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021faf:	83 ec 08             	sub    esp,0x8
c0021fb2:	68 c8 b0 02 c0       	push   0xc002b0c8
c0021fb7:	50                   	push   eax
c0021fb8:	e8 eb 1f ff ff       	call   c0013fa8 <HardDiskController::HardDiskController(char const*)>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0021fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc9:	89 10                	mov    DWORD PTR [eax],edx
c0021fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fcf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021fd6:	90                   	nop
c0021fd7:	83 c4 0c             	add    esp,0xc
c0021fda:	c3                   	ret    
c0021fdb:	90                   	nop

c0021fdc <IDE::prepareInterrupt(unsigned char)>:
c0021fdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021fe1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fe5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021fed:	c3                   	ret    

c0021fee <selectDrive(unsigned char, unsigned char)>:
c0021fee:	c3                   	ret    
c0021fef:	90                   	nop

c0021ff0 <IDE::getBase(unsigned char)>:
c0021ff0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022001:	c3                   	ret    

c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022002:	55                   	push   ebp
c0022003:	57                   	push   edi
c0022004:	56                   	push   esi
c0022005:	53                   	push   ebx
c0022006:	83 ec 1c             	sub    esp,0x1c
c0022009:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002200d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022011:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022014:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022018:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002201c:	80 f9 03             	cmp    cl,0x3
c002201f:	77 51                	ja     c0022072 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022021:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022025:	0f b6 f2             	movzx  esi,dl
c0022028:	0f b6 db             	movzx  ebx,bl
c002202b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002202e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022032:	83 ca 80             	or     edx,0xffffff80
c0022035:	0f b6 d2             	movzx  edx,dl
c0022038:	52                   	push   edx
c0022039:	6a 0c                	push   0xc
c002203b:	56                   	push   esi
c002203c:	57                   	push   edi
c002203d:	e8 c0 ff ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022042:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022047:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002204b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002204f:	ee                   	out    dx,al
c0022050:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022055:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022059:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002205d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022061:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022069:	83 c4 2c             	add    esp,0x2c
c002206c:	5b                   	pop    ebx
c002206d:	5e                   	pop    esi
c002206e:	5f                   	pop    edi
c002206f:	5d                   	pop    ebp
c0022070:	eb 90                	jmp    c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022072:	80 fb 07             	cmp    bl,0x7
c0022075:	77 12                	ja     c0022089 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022077:	0f b6 d2             	movzx  edx,dl
c002207a:	0f b6 db             	movzx  ebx,bl
c002207d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022085:	89 da                	mov    edx,ebx
c0022087:	eb 2f                	jmp    c00220b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022089:	80 fb 0d             	cmp    bl,0xd
c002208c:	77 13                	ja     c00220a1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002208e:	0f b6 d2             	movzx  edx,dl
c0022091:	0f b6 db             	movzx  ebx,bl
c0022094:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002209b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002209f:	eb 17                	jmp    c00220b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00220a1:	80 fb 15             	cmp    bl,0x15
c00220a4:	77 13                	ja     c00220b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00220a6:	0f b6 d2             	movzx  edx,dl
c00220a9:	0f b6 db             	movzx  ebx,bl
c00220ac:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00220b4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00220b8:	ee                   	out    dx,al
c00220b9:	83 c4 1c             	add    esp,0x1c
c00220bc:	5b                   	pop    ebx
c00220bd:	5e                   	pop    esi
c00220be:	5f                   	pop    edi
c00220bf:	5d                   	pop    ebp
c00220c0:	c3                   	ret    
c00220c1:	90                   	nop

c00220c2 <IDE::read(unsigned char, unsigned char)>:
c00220c2:	55                   	push   ebp
c00220c3:	57                   	push   edi
c00220c4:	56                   	push   esi
c00220c5:	53                   	push   ebx
c00220c6:	83 ec 1c             	sub    esp,0x1c
c00220c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00220d1:	8d 43 f8             	lea    eax,[ebx-0x8]
c00220d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00220d8:	3c 03                	cmp    al,0x3
c00220da:	77 43                	ja     c002211f <IDE::read(unsigned char, unsigned char)+0x5d>
c00220dc:	0f b6 f2             	movzx  esi,dl
c00220df:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00220e2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00220e6:	83 c8 80             	or     eax,0xffffff80
c00220e9:	0f b6 c0             	movzx  eax,al
c00220ec:	50                   	push   eax
c00220ed:	6a 0c                	push   0xc
c00220ef:	56                   	push   esi
c00220f0:	57                   	push   edi
c00220f1:	e8 0c ff ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220f6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00220fb:	0f b6 c3             	movzx  eax,bl
c00220fe:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022102:	ec                   	in     al,dx
c0022103:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022107:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002210c:	52                   	push   edx
c002210d:	6a 0c                	push   0xc
c002210f:	56                   	push   esi
c0022110:	57                   	push   edi
c0022111:	e8 ec fe ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022116:	83 c4 20             	add    esp,0x20
c0022119:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002211d:	eb 49                	jmp    c0022168 <IDE::read(unsigned char, unsigned char)+0xa6>
c002211f:	80 fb 07             	cmp    bl,0x7
c0022122:	77 12                	ja     c0022136 <IDE::read(unsigned char, unsigned char)+0x74>
c0022124:	0f b6 d2             	movzx  edx,dl
c0022127:	0f b6 c3             	movzx  eax,bl
c002212a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022132:	89 c2                	mov    edx,eax
c0022134:	eb 31                	jmp    c0022167 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022136:	80 fb 0d             	cmp    bl,0xd
c0022139:	77 13                	ja     c002214e <IDE::read(unsigned char, unsigned char)+0x8c>
c002213b:	0f b6 d2             	movzx  edx,dl
c002213e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022145:	0f b6 d3             	movzx  edx,bl
c0022148:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002214c:	eb 19                	jmp    c0022167 <IDE::read(unsigned char, unsigned char)+0xa5>
c002214e:	31 c0                	xor    eax,eax
c0022150:	80 fb 15             	cmp    bl,0x15
c0022153:	77 13                	ja     c0022168 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022155:	0f b6 d2             	movzx  edx,dl
c0022158:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022160:	0f b6 d3             	movzx  edx,bl
c0022163:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022167:	ec                   	in     al,dx
c0022168:	83 c4 1c             	add    esp,0x1c
c002216b:	5b                   	pop    ebx
c002216c:	5e                   	pop    esi
c002216d:	5f                   	pop    edi
c002216e:	5d                   	pop    ebp
c002216f:	c3                   	ret    

c0022170 <IDE::waitInterrupt(unsigned char)>:
c0022170:	55                   	push   ebp
c0022171:	57                   	push   edi
c0022172:	56                   	push   esi
c0022173:	53                   	push   ebx
c0022174:	31 db                	xor    ebx,ebx
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002217d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022182:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002218a:	89 e8                	mov    eax,ebp
c002218c:	84 c0                	test   al,al
c002218e:	75 34                	jne    c00221c4 <IDE::waitInterrupt(unsigned char)+0x54>
c0022190:	52                   	push   edx
c0022191:	6a 0c                	push   0xc
c0022193:	56                   	push   esi
c0022194:	57                   	push   edi
c0022195:	e8 28 ff ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002219a:	83 c4 10             	add    esp,0x10
c002219d:	a8 01                	test   al,0x1
c002219f:	75 2b                	jne    c00221cc <IDE::waitInterrupt(unsigned char)+0x5c>
c00221a1:	f6 c3 04             	test   bl,0x4
c00221a4:	75 16                	jne    c00221bc <IDE::waitInterrupt(unsigned char)+0x4c>
c00221a6:	83 fb 32             	cmp    ebx,0x32
c00221a9:	7e 11                	jle    c00221bc <IDE::waitInterrupt(unsigned char)+0x4c>
c00221ab:	50                   	push   eax
c00221ac:	50                   	push   eax
c00221ad:	6a 00                	push   0x0
c00221af:	68 80 96 98 00       	push   0x989680
c00221b4:	e8 6d b1 ff ff       	call   c001d326 <nanoSleep(unsigned long long)>
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	83 fb 3c             	cmp    ebx,0x3c
c00221bf:	74 0b                	je     c00221cc <IDE::waitInterrupt(unsigned char)+0x5c>
c00221c1:	43                   	inc    ebx
c00221c2:	eb be                	jmp    c0022182 <IDE::waitInterrupt(unsigned char)+0x12>
c00221c4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00221cc:	83 c4 0c             	add    esp,0xc
c00221cf:	89 e8                	mov    eax,ebp
c00221d1:	5b                   	pop    ebx
c00221d2:	5e                   	pop    esi
c00221d3:	5f                   	pop    edi
c00221d4:	5d                   	pop    ebp
c00221d5:	c3                   	ret    

c00221d6 <ideChannel0IRQHandler(regs*, void*)>:
c00221d6:	83 ec 10             	sub    esp,0x10
c00221d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221dd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00221e4:	6a 07                	push   0x7
c00221e6:	6a 00                	push   0x0
c00221e8:	50                   	push   eax
c00221e9:	e8 d4 fe ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00221ee:	83 c4 1c             	add    esp,0x1c
c00221f1:	c3                   	ret    

c00221f2 <ideChannel1IRQHandler(regs*, void*)>:
c00221f2:	83 ec 10             	sub    esp,0x10
c00221f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221f9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022200:	6a 07                	push   0x7
c0022202:	6a 01                	push   0x1
c0022204:	50                   	push   eax
c0022205:	e8 b8 fe ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002220a:	83 c4 1c             	add    esp,0x1c
c002220d:	c3                   	ret    

c002220e <IDE::enableIRQs(unsigned char, bool)>:
c002220e:	57                   	push   edi
c002220f:	56                   	push   esi
c0022210:	be 04 00 00 00       	mov    esi,0x4
c0022215:	53                   	push   ebx
c0022216:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002221b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002221f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022224:	0f 94 c0             	sete   al
c0022227:	d1 e0                	shl    eax,1
c0022229:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022230:	0f b6 c0             	movzx  eax,al
c0022233:	50                   	push   eax
c0022234:	6a 0c                	push   0xc
c0022236:	57                   	push   edi
c0022237:	53                   	push   ebx
c0022238:	e8 c5 fd ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002223d:	83 c4 10             	add    esp,0x10
c0022240:	50                   	push   eax
c0022241:	6a 0c                	push   0xc
c0022243:	57                   	push   edi
c0022244:	53                   	push   ebx
c0022245:	e8 78 fe ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002224a:	83 c4 10             	add    esp,0x10
c002224d:	4e                   	dec    esi
c002224e:	75 f0                	jne    c0022240 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022250:	5b                   	pop    ebx
c0022251:	5e                   	pop    esi
c0022252:	5f                   	pop    edi
c0022253:	c3                   	ret    

c0022254 <IDE::open(int, int, void*)>:
c0022254:	55                   	push   ebp
c0022255:	57                   	push   edi
c0022256:	56                   	push   esi
c0022257:	53                   	push   ebx
c0022258:	83 ec 1c             	sub    esp,0x1c
c002225b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002225f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022268:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022271:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022278:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002227f:	0f 85 b0 02 00 00    	jne    c0022535 <IDE::open(int, int, void*)+0x2e1>
c0022285:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002228b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002228f:	83 e0 7f             	and    eax,0x7f
c0022292:	3c 05                	cmp    al,0x5
c0022294:	74 04                	je     c002229a <IDE::open(int, int, void*)+0x46>
c0022296:	3c 0f                	cmp    al,0xf
c0022298:	75 32                	jne    c00222cc <IDE::open(int, int, void*)+0x78>
c002229a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00222a0:	83 e0 fc             	and    eax,0xfffffffc
c00222a3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00222aa:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00222b0:	83 e0 fc             	and    eax,0xfffffffc
c00222b3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00222ba:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00222c0:	83 e0 fc             	and    eax,0xfffffffc
c00222c3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00222ca:	eb 14                	jmp    c00222e0 <IDE::open(int, int, void*)+0x8c>
c00222cc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00222d6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00222e0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00222e7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00222ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00222f2:	89 c6                	mov    esi,eax
c00222f4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00222f9:	c1 e6 10             	shl    esi,0x10
c00222fc:	89 e8                	mov    eax,ebp
c00222fe:	89 fa                	mov    edx,edi
c0022300:	c1 e0 0b             	shl    eax,0xb
c0022303:	09 f0                	or     eax,esi
c0022305:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002230c:	c1 e6 08             	shl    esi,0x8
c002230f:	09 c6                	or     esi,eax
c0022311:	89 f0                	mov    eax,esi
c0022313:	0d 08 00 00 80       	or     eax,0x80000008
c0022318:	ef                   	out    dx,eax
c0022319:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002231e:	89 ca                	mov    edx,ecx
c0022320:	ed                   	in     eax,dx
c0022321:	c1 e8 10             	shr    eax,0x10
c0022324:	3d ff ff 00 00       	cmp    eax,0xffff
c0022329:	0f 84 f5 00 00 00    	je     c0022424 <IDE::open(int, int, void*)+0x1d0>
c002232f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022335:	89 fa                	mov    edx,edi
c0022337:	89 f0                	mov    eax,esi
c0022339:	ef                   	out    dx,eax
c002233a:	b0 fe                	mov    al,0xfe
c002233c:	89 ca                	mov    edx,ecx
c002233e:	ee                   	out    dx,al
c002233f:	89 f0                	mov    eax,esi
c0022341:	89 fa                	mov    edx,edi
c0022343:	ef                   	out    dx,eax
c0022344:	89 ca                	mov    edx,ecx
c0022346:	ed                   	in     eax,dx
c0022347:	3c fe                	cmp    al,0xfe
c0022349:	0f 85 a9 00 00 00    	jne    c00223f8 <IDE::open(int, int, void*)+0x1a4>
c002234f:	8b 15 08 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca08
c0022355:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002235c:	74 33                	je     c0022391 <IDE::open(int, int, void*)+0x13d>
c002235e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022364:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022368:	40                   	inc    eax
c0022369:	83 ec 0c             	sub    esp,0xc
c002236c:	0f b6 c0             	movzx  eax,al
c002236f:	50                   	push   eax
c0022370:	55                   	push   ebp
c0022371:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022375:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002237b:	51                   	push   ecx
c002237c:	e8 bb 54 ff ff       	call   c001783c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022381:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022386:	83 c4 1c             	add    esp,0x1c
c0022389:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002238f:	eb 0a                	jmp    c002239b <IDE::open(int, int, void*)+0x147>
c0022391:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002239b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00223a2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00223a9:	c1 e1 10             	shl    ecx,0x10
c00223ac:	c1 e0 08             	shl    eax,0x8
c00223af:	bf f8 0c 00 00       	mov    edi,0xcf8
c00223b4:	09 c1                	or     ecx,eax
c00223b6:	89 fa                	mov    edx,edi
c00223b8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00223bf:	c1 e0 0b             	shl    eax,0xb
c00223c2:	09 c1                	or     ecx,eax
c00223c4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00223ca:	89 c8                	mov    eax,ecx
c00223cc:	ef                   	out    dx,eax
c00223cd:	be fc 0c 00 00       	mov    esi,0xcfc
c00223d2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00223d8:	89 f2                	mov    edx,esi
c00223da:	ee                   	out    dx,al
c00223db:	89 c8                	mov    eax,ecx
c00223dd:	89 fa                	mov    edx,edi
c00223df:	ef                   	out    dx,eax
c00223e0:	89 f2                	mov    edx,esi
c00223e2:	ed                   	in     eax,dx
c00223e3:	0f b6 c0             	movzx  eax,al
c00223e6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00223ec:	74 46                	je     c0022434 <IDE::open(int, int, void*)+0x1e0>
c00223ee:	83 ec 0c             	sub    esp,0xc
c00223f1:	68 e0 b0 02 c0       	push   0xc002b0e0
c00223f6:	eb 34                	jmp    c002242c <IDE::open(int, int, void*)+0x1d8>
c00223f8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022401:	75 17                	jne    c002241a <IDE::open(int, int, void*)+0x1c6>
c0022403:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022408:	74 07                	je     c0022411 <IDE::open(int, int, void*)+0x1bd>
c002240a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002240f:	75 09                	jne    c002241a <IDE::open(int, int, void*)+0x1c6>
c0022411:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022418:	eb 1a                	jmp    c0022434 <IDE::open(int, int, void*)+0x1e0>
c002241a:	83 ec 0c             	sub    esp,0xc
c002241d:	68 e8 b0 02 c0       	push   0xc002b0e8
c0022422:	eb 08                	jmp    c002242c <IDE::open(int, int, void*)+0x1d8>
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	68 19 b1 02 c0       	push   0xc002b119
c002242c:	e8 16 75 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0022431:	83 c4 10             	add    esp,0x10
c0022434:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002243b:	79 1a                	jns    c0022457 <IDE::open(int, int, void*)+0x203>
c002243d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022443:	83 e0 fc             	and    eax,0xfffffffc
c0022446:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002244d:	83 c0 08             	add    eax,0x8
c0022450:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022457:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002245d:	89 c2                	mov    edx,eax
c002245f:	83 e2 0f             	and    edx,0xf
c0022462:	66 83 fa 08          	cmp    dx,0x8
c0022466:	75 0a                	jne    c0022472 <IDE::open(int, int, void*)+0x21e>
c0022468:	83 e8 02             	sub    eax,0x2
c002246b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022472:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022478:	89 c2                	mov    edx,eax
c002247a:	83 e2 0f             	and    edx,0xf
c002247d:	66 83 fa 08          	cmp    dx,0x8
c0022481:	75 0a                	jne    c002248d <IDE::open(int, int, void*)+0x239>
c0022483:	83 e8 02             	sub    eax,0x2
c0022486:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002248d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022494:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002249b:	89 d0                	mov    eax,edx
c002249d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00224a0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00224a4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00224a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00224ab:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00224b0:	0f b6 c9             	movzx  ecx,cl
c00224b3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00224ba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00224bd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00224c1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00224c5:	8d 50 02             	lea    edx,[eax+0x2]
c00224c8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00224cd:	0f b6 d2             	movzx  edx,dl
c00224d0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00224d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00224d9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00224dd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00224e1:	8d 48 03             	lea    ecx,[eax+0x3]
c00224e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00224e9:	0f b6 c9             	movzx  ecx,cl
c00224ec:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00224f2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00224f5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00224f9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00224fd:	8d 50 04             	lea    edx,[eax+0x4]
c0022500:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022506:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002250b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022512:	66 85 f6             	test   si,si
c0022515:	74 3e                	je     c0022555 <IDE::open(int, int, void*)+0x301>
c0022517:	0f b6 d2             	movzx  edx,dl
c002251a:	83 c0 05             	add    eax,0x5
c002251d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022520:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022524:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022528:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002252e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022533:	eb 20                	jmp    c0022555 <IDE::open(int, int, void*)+0x301>
c0022535:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002253f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022549:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022550:	e9 02 ff ff ff       	jmp    c0022457 <IDE::open(int, int, void*)+0x203>
c0022555:	52                   	push   edx
c0022556:	52                   	push   edx
c0022557:	6a 00                	push   0x0
c0022559:	53                   	push   ebx
c002255a:	e8 7d fa ff ff       	call   c0021fdc <IDE::prepareInterrupt(unsigned char)>
c002255f:	59                   	pop    ecx
c0022560:	5e                   	pop    esi
c0022561:	6a 01                	push   0x1
c0022563:	53                   	push   ebx
c0022564:	e8 73 fa ff ff       	call   c0021fdc <IDE::prepareInterrupt(unsigned char)>
c0022569:	83 c4 0c             	add    esp,0xc
c002256c:	6a 00                	push   0x0
c002256e:	6a 00                	push   0x0
c0022570:	53                   	push   ebx
c0022571:	e8 98 fc ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c0022576:	83 c4 0c             	add    esp,0xc
c0022579:	6a 00                	push   0x0
c002257b:	6a 01                	push   0x1
c002257d:	53                   	push   ebx
c002257e:	e8 8b fc ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c0022583:	83 c4 10             	add    esp,0x10
c0022586:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002258d:	74 40                	je     c00225cf <IDE::open(int, int, void*)+0x37b>
c002258f:	83 ec 0c             	sub    esp,0xc
c0022592:	68 43 b1 02 c0       	push   0xc002b143
c0022597:	e8 91 02 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c002259c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002259f:	6a 01                	push   0x1
c00225a1:	68 d6 21 02 c0       	push   0xc00221d6
c00225a6:	6a 0e                	push   0xe
c00225a8:	53                   	push   ebx
c00225a9:	e8 f2 15 ff ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00225ae:	83 c4 14             	add    esp,0x14
c00225b1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00225b7:	53                   	push   ebx
c00225b8:	6a 01                	push   0x1
c00225ba:	68 f2 21 02 c0       	push   0xc00221f2
c00225bf:	6a 0f                	push   0xf
c00225c1:	53                   	push   ebx
c00225c2:	e8 d9 15 ff ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00225c7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00225cd:	eb 4a                	jmp    c0022619 <IDE::open(int, int, void*)+0x3c5>
c00225cf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00225d9:	50                   	push   eax
c00225da:	6a 0f                	push   0xf
c00225dc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00225e2:	68 5f b1 02 c0       	push   0xc002b15f
c00225e7:	e8 41 02 ff ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00225ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00225ef:	6a 00                	push   0x0
c00225f1:	68 d6 21 02 c0       	push   0xc00221d6
c00225f6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00225fc:	53                   	push   ebx
c00225fd:	e8 9e 15 ff ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022602:	83 c4 14             	add    esp,0x14
c0022605:	53                   	push   ebx
c0022606:	6a 00                	push   0x0
c0022608:	68 f2 21 02 c0       	push   0xc00221f2
c002260d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022613:	53                   	push   ebx
c0022614:	e8 87 15 ff ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022619:	8b 03                	mov    eax,DWORD PTR [ebx]
c002261b:	83 c4 20             	add    esp,0x20
c002261e:	83 ec 0c             	sub    esp,0xc
c0022621:	53                   	push   ebx
c0022622:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022625:	83 c4 0c             	add    esp,0xc
c0022628:	6a 07                	push   0x7
c002262a:	6a 00                	push   0x0
c002262c:	53                   	push   ebx
c002262d:	e8 90 fa ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022632:	83 c4 0c             	add    esp,0xc
c0022635:	6a 07                	push   0x7
c0022637:	6a 01                	push   0x1
c0022639:	53                   	push   ebx
c002263a:	e8 83 fa ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002263f:	83 c4 0c             	add    esp,0xc
c0022642:	6a 01                	push   0x1
c0022644:	6a 00                	push   0x0
c0022646:	53                   	push   ebx
c0022647:	e8 c2 fb ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c002264c:	83 c4 0c             	add    esp,0xc
c002264f:	6a 01                	push   0x1
c0022651:	6a 01                	push   0x1
c0022653:	53                   	push   ebx
c0022654:	e8 b5 fb ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c0022659:	83 c4 2c             	add    esp,0x2c
c002265c:	31 c0                	xor    eax,eax
c002265e:	5b                   	pop    ebx
c002265f:	5e                   	pop    esi
c0022660:	5f                   	pop    edi
c0022661:	5d                   	pop    ebp
c0022662:	c3                   	ret    
c0022663:	90                   	nop

c0022664 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022664:	55                   	push   ebp
c0022665:	57                   	push   edi
c0022666:	56                   	push   esi
c0022667:	53                   	push   ebx
c0022668:	83 ec 1c             	sub    esp,0x1c
c002266b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002266f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022673:	8d 50 f8             	lea    edx,[eax-0x8]
c0022676:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002267a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002267e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022682:	80 fa 03             	cmp    dl,0x3
c0022685:	77 5d                	ja     c00226e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022687:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002268b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002268f:	0f b6 db             	movzx  ebx,bl
c0022692:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022695:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022699:	83 ca 80             	or     edx,0xffffff80
c002269c:	0f b6 d2             	movzx  edx,dl
c002269f:	52                   	push   edx
c00226a0:	6a 0c                	push   0xc
c00226a2:	53                   	push   ebx
c00226a3:	56                   	push   esi
c00226a4:	e8 59 f9 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226a9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00226ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00226b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00226b6:	0f b6 c0             	movzx  eax,al
c00226b9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00226bd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00226bf:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00226c4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00226c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00226cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00226d0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00226d8:	83 c4 2c             	add    esp,0x2c
c00226db:	5b                   	pop    ebx
c00226dc:	5e                   	pop    esi
c00226dd:	5f                   	pop    edi
c00226de:	5d                   	pop    ebp
c00226df:	e9 1e f9 ff ff       	jmp    c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226e4:	3c 07                	cmp    al,0x7
c00226e6:	77 10                	ja     c00226f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00226e8:	0f b6 db             	movzx  ebx,bl
c00226eb:	0f b6 d0             	movzx  edx,al
c00226ee:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00226f6:	eb 2d                	jmp    c0022725 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00226f8:	3c 0d                	cmp    al,0xd
c00226fa:	77 13                	ja     c002270f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00226fc:	0f b6 db             	movzx  ebx,bl
c00226ff:	0f b6 c0             	movzx  eax,al
c0022702:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022709:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002270d:	eb 16                	jmp    c0022725 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002270f:	3c 15                	cmp    al,0x15
c0022711:	77 14                	ja     c0022727 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022713:	0f b6 db             	movzx  ebx,bl
c0022716:	0f b6 c0             	movzx  eax,al
c0022719:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022721:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022725:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022727:	83 c4 1c             	add    esp,0x1c
c002272a:	5b                   	pop    ebx
c002272b:	5e                   	pop    esi
c002272c:	5f                   	pop    edi
c002272d:	5d                   	pop    ebp
c002272e:	c3                   	ret    
c002272f:	90                   	nop

c0022730 <IDE::detect()>:
c0022730:	55                   	push   ebp
c0022731:	57                   	push   edi
c0022732:	56                   	push   esi
c0022733:	53                   	push   ebx
c0022734:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002273a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022741:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022748:	0f 85 be 02 00 00    	jne    c0022a0c <IDE::detect()+0x2dc>
c002274e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022755:	31 f6                	xor    esi,esi
c0022757:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002275f:	31 ed                	xor    ebp,ebp
c0022761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022765:	c1 e0 06             	shl    eax,0x6
c0022768:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022770:	89 e8                	mov    eax,ebp
c0022772:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022776:	c1 e0 04             	shl    eax,0x4
c0022779:	83 c8 a0             	or     eax,0xffffffa0
c002277c:	0f b6 c0             	movzx  eax,al
c002277f:	50                   	push   eax
c0022780:	6a 06                	push   0x6
c0022782:	56                   	push   esi
c0022783:	53                   	push   ebx
c0022784:	e8 79 f8 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022789:	83 c4 0c             	add    esp,0xc
c002278c:	6a 0c                	push   0xc
c002278e:	56                   	push   esi
c002278f:	53                   	push   ebx
c0022790:	e8 2d f9 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022795:	83 c4 0c             	add    esp,0xc
c0022798:	6a 0c                	push   0xc
c002279a:	56                   	push   esi
c002279b:	53                   	push   ebx
c002279c:	e8 21 f9 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227a1:	83 c4 0c             	add    esp,0xc
c00227a4:	6a 0c                	push   0xc
c00227a6:	56                   	push   esi
c00227a7:	53                   	push   ebx
c00227a8:	e8 15 f9 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227ad:	83 c4 0c             	add    esp,0xc
c00227b0:	6a 0c                	push   0xc
c00227b2:	56                   	push   esi
c00227b3:	53                   	push   ebx
c00227b4:	e8 09 f9 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227b9:	68 ec 00 00 00       	push   0xec
c00227be:	6a 07                	push   0x7
c00227c0:	56                   	push   esi
c00227c1:	53                   	push   ebx
c00227c2:	e8 3b f8 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227c7:	83 c4 1c             	add    esp,0x1c
c00227ca:	6a 0c                	push   0xc
c00227cc:	56                   	push   esi
c00227cd:	53                   	push   ebx
c00227ce:	e8 ef f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227d3:	83 c4 0c             	add    esp,0xc
c00227d6:	6a 0c                	push   0xc
c00227d8:	56                   	push   esi
c00227d9:	53                   	push   ebx
c00227da:	e8 e3 f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227df:	83 c4 0c             	add    esp,0xc
c00227e2:	6a 0c                	push   0xc
c00227e4:	56                   	push   esi
c00227e5:	53                   	push   ebx
c00227e6:	e8 d7 f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227eb:	83 c4 0c             	add    esp,0xc
c00227ee:	6a 0c                	push   0xc
c00227f0:	56                   	push   esi
c00227f1:	53                   	push   ebx
c00227f2:	e8 cb f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00227f7:	83 c4 0c             	add    esp,0xc
c00227fa:	6a 0c                	push   0xc
c00227fc:	56                   	push   esi
c00227fd:	53                   	push   ebx
c00227fe:	e8 bf f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022803:	83 c4 10             	add    esp,0x10
c0022806:	84 c0                	test   al,al
c0022808:	0f 84 8b 01 00 00    	je     c0022999 <IDE::detect()+0x269>
c002280e:	31 ff                	xor    edi,edi
c0022810:	50                   	push   eax
c0022811:	6a 0c                	push   0xc
c0022813:	56                   	push   esi
c0022814:	53                   	push   ebx
c0022815:	e8 a8 f8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002281a:	83 c4 10             	add    esp,0x10
c002281d:	a8 01                	test   al,0x1
c002281f:	0f 85 8e 01 00 00    	jne    c00229b3 <IDE::detect()+0x283>
c0022825:	84 c0                	test   al,al
c0022827:	78 04                	js     c002282d <IDE::detect()+0xfd>
c0022829:	a8 08                	test   al,0x8
c002282b:	75 27                	jne    c0022854 <IDE::detect()+0x124>
c002282d:	47                   	inc    edi
c002282e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022834:	7e da                	jle    c0022810 <IDE::detect()+0xe0>
c0022836:	50                   	push   eax
c0022837:	50                   	push   eax
c0022838:	6a 00                	push   0x0
c002283a:	68 40 4b 4c 00       	push   0x4c4b40
c002283f:	e8 e2 aa ff ff       	call   c001d326 <nanoSleep(unsigned long long)>
c0022844:	83 c4 10             	add    esp,0x10
c0022847:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002284d:	75 c1                	jne    c0022810 <IDE::detect()+0xe0>
c002284f:	e9 5f 01 00 00       	jmp    c00229b3 <IDE::detect()+0x283>
c0022854:	31 c9                	xor    ecx,ecx
c0022856:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002285a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002285e:	83 ec 0c             	sub    esp,0xc
c0022861:	68 80 00 00 00       	push   0x80
c0022866:	57                   	push   edi
c0022867:	6a 00                	push   0x0
c0022869:	56                   	push   esi
c002286a:	53                   	push   ebx
c002286b:	e8 f4 fd ff ff       	call   c0022664 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022870:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022875:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022879:	89 d1                	mov    ecx,edx
c002287b:	c1 e0 06             	shl    eax,0x6
c002287e:	01 d8                	add    eax,ebx
c0022880:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022887:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002288e:	89 f2                	mov    edx,esi
c0022890:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022896:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002289a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00228a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00228a4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00228ab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00228b3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00228ba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00228c2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00228c8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00228cf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00228d5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00228d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00228dd:	83 c4 20             	add    esp,0x20
c00228e0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00228e3:	83 c0 02             	add    eax,0x2
c00228e6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00228ec:	83 c7 02             	add    edi,0x2
c00228ef:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00228f2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00228f8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00228fc:	75 e2                	jne    c00228e0 <IDE::detect()+0x1b0>
c00228fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022902:	c1 e0 06             	shl    eax,0x6
c0022905:	01 d8                	add    eax,ebx
c0022907:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002290d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022914:	66 c1 ea 09          	shr    dx,0x9
c0022918:	83 e2 01             	and    edx,0x1
c002291b:	84 c9                	test   cl,cl
c002291d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022923:	75 2f                	jne    c0022954 <IDE::detect()+0x224>
c0022925:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002292b:	85 c0                	test   eax,eax
c002292d:	74 66                	je     c0022995 <IDE::detect()+0x265>
c002292f:	50                   	push   eax
c0022930:	55                   	push   ebp
c0022931:	56                   	push   esi
c0022932:	68 7b b1 02 c0       	push   0xc002b17b
c0022937:	e8 f1 fe fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c002293c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022943:	e8 8c cb fe ff       	call   c000f4d4 <malloc>
c0022948:	89 c7                	mov    edi,eax
c002294a:	89 04 24             	mov    DWORD PTR [esp],eax
c002294d:	e8 62 06 00 00       	call   c0022fb4 <ATA::ATA()>
c0022952:	eb 28                	jmp    c002297c <IDE::detect()+0x24c>
c0022954:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002295a:	55                   	push   ebp
c002295b:	56                   	push   esi
c002295c:	68 aa b1 02 c0       	push   0xc002b1aa
c0022961:	e8 c7 fe fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022966:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002296d:	e8 62 cb fe ff       	call   c000f4d4 <malloc>
c0022972:	89 c7                	mov    edi,eax
c0022974:	89 04 24             	mov    DWORD PTR [esp],eax
c0022977:	e8 68 0c 00 00       	call   c00235e4 <ATAPI::ATAPI()>
c002297c:	5a                   	pop    edx
c002297d:	59                   	pop    ecx
c002297e:	57                   	push   edi
c002297f:	53                   	push   ebx
c0022980:	e8 97 12 ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0022985:	8b 07                	mov    eax,DWORD PTR [edi]
c0022987:	53                   	push   ebx
c0022988:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002298c:	6a 00                	push   0x0
c002298e:	57                   	push   edi
c002298f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022992:	83 c4 20             	add    esp,0x20
c0022995:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022999:	4d                   	dec    ebp
c002299a:	74 0a                	je     c00229a6 <IDE::detect()+0x276>
c002299c:	bd 01 00 00 00       	mov    ebp,0x1
c00229a1:	e9 bb fd ff ff       	jmp    c0022761 <IDE::detect()+0x31>
c00229a6:	4e                   	dec    esi
c00229a7:	74 63                	je     c0022a0c <IDE::detect()+0x2dc>
c00229a9:	be 01 00 00 00       	mov    esi,0x1
c00229ae:	e9 ac fd ff ff       	jmp    c002275f <IDE::detect()+0x2f>
c00229b3:	50                   	push   eax
c00229b4:	6a 04                	push   0x4
c00229b6:	56                   	push   esi
c00229b7:	53                   	push   ebx
c00229b8:	e8 05 f7 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00229bd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00229c1:	83 c4 0c             	add    esp,0xc
c00229c4:	6a 05                	push   0x5
c00229c6:	56                   	push   esi
c00229c7:	53                   	push   ebx
c00229c8:	e8 f5 f6 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c00229cd:	83 c4 10             	add    esp,0x10
c00229d0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00229d4:	80 fa 14             	cmp    dl,0x14
c00229d7:	75 04                	jne    c00229dd <IDE::detect()+0x2ad>
c00229d9:	3c eb                	cmp    al,0xeb
c00229db:	eb 07                	jmp    c00229e4 <IDE::detect()+0x2b4>
c00229dd:	3c 96                	cmp    al,0x96
c00229df:	75 b8                	jne    c0022999 <IDE::detect()+0x269>
c00229e1:	80 fa 69             	cmp    dl,0x69
c00229e4:	75 b3                	jne    c0022999 <IDE::detect()+0x269>
c00229e6:	68 a1 00 00 00       	push   0xa1
c00229eb:	6a 07                	push   0x7
c00229ed:	56                   	push   esi
c00229ee:	53                   	push   ebx
c00229ef:	e8 0e f6 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229f4:	5f                   	pop    edi
c00229f5:	58                   	pop    eax
c00229f6:	6a 00                	push   0x0
c00229f8:	68 40 42 0f 00       	push   0xf4240
c00229fd:	e8 24 a9 ff ff       	call   c001d326 <nanoSleep(unsigned long long)>
c0022a02:	83 c4 10             	add    esp,0x10
c0022a05:	b1 01                	mov    cl,0x1
c0022a07:	e9 4a fe ff ff       	jmp    c0022856 <IDE::detect()+0x126>
c0022a0c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022a12:	5b                   	pop    ebx
c0022a13:	5e                   	pop    esi
c0022a14:	5f                   	pop    edi
c0022a15:	5d                   	pop    ebp
c0022a16:	c3                   	ret    
c0022a17:	90                   	nop

c0022a18 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022a18:	55                   	push   ebp
c0022a19:	57                   	push   edi
c0022a1a:	56                   	push   esi
c0022a1b:	53                   	push   ebx
c0022a1c:	83 ec 1c             	sub    esp,0x1c
c0022a1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022a23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022a27:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022a2b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022a2f:	88 c3                	mov    bl,al
c0022a31:	84 c0                	test   al,al
c0022a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a37:	0f 84 67 01 00 00    	je     c0022ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022a3d:	83 ec 0c             	sub    esp,0xc
c0022a40:	68 db b1 02 c0       	push   0xc002b1db
c0022a45:	e8 e3 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a51:	3c 01                	cmp    al,0x1
c0022a53:	75 17                	jne    c0022a6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022a55:	83 ec 0c             	sub    esp,0xc
c0022a58:	b3 13                	mov    bl,0x13
c0022a5a:	68 e7 b1 02 c0       	push   0xc002b1e7
c0022a5f:	e8 c9 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022a64:	83 c4 10             	add    esp,0x10
c0022a67:	e9 25 01 00 00       	jmp    c0022b91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a6c:	3c 02                	cmp    al,0x2
c0022a6e:	0f 85 ef 00 00 00    	jne    c0022b63 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022a74:	d1 e6                	shl    esi,1
c0022a76:	09 ee                	or     esi,ebp
c0022a78:	52                   	push   edx
c0022a79:	89 f0                	mov    eax,esi
c0022a7b:	6a 01                	push   0x1
c0022a7d:	0f b6 f0             	movzx  esi,al
c0022a80:	c1 e6 06             	shl    esi,0x6
c0022a83:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022a8b:	50                   	push   eax
c0022a8c:	57                   	push   edi
c0022a8d:	e8 30 f6 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022a92:	83 c4 10             	add    esp,0x10
c0022a95:	89 c6                	mov    esi,eax
c0022a97:	a8 01                	test   al,0x1
c0022a99:	74 12                	je     c0022aad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022a9b:	83 ec 0c             	sub    esp,0xc
c0022a9e:	b3 07                	mov    bl,0x7
c0022aa0:	68 fc b1 02 c0       	push   0xc002b1fc
c0022aa5:	e8 83 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022aaa:	83 c4 10             	add    esp,0x10
c0022aad:	f7 c6 02 00 00 00    	test   esi,0x2
c0022ab3:	74 12                	je     c0022ac7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022ab5:	83 ec 0c             	sub    esp,0xc
c0022ab8:	b3 03                	mov    bl,0x3
c0022aba:	68 1a b2 02 c0       	push   0xc002b21a
c0022abf:	e8 69 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022ac4:	83 c4 10             	add    esp,0x10
c0022ac7:	f7 c6 04 00 00 00    	test   esi,0x4
c0022acd:	74 12                	je     c0022ae1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022acf:	83 ec 0c             	sub    esp,0xc
c0022ad2:	b3 14                	mov    bl,0x14
c0022ad4:	68 3a b2 02 c0       	push   0xc002b23a
c0022ad9:	e8 4f fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022ade:	83 c4 10             	add    esp,0x10
c0022ae1:	f7 c6 08 00 00 00    	test   esi,0x8
c0022ae7:	74 12                	je     c0022afb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022ae9:	83 ec 0c             	sub    esp,0xc
c0022aec:	b3 03                	mov    bl,0x3
c0022aee:	68 1a b2 02 c0       	push   0xc002b21a
c0022af3:	e8 35 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022af8:	83 c4 10             	add    esp,0x10
c0022afb:	f7 c6 10 00 00 00    	test   esi,0x10
c0022b01:	74 12                	je     c0022b15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022b03:	83 ec 0c             	sub    esp,0xc
c0022b06:	b3 15                	mov    bl,0x15
c0022b08:	68 52 b2 02 c0       	push   0xc002b252
c0022b0d:	e8 1b fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b12:	83 c4 10             	add    esp,0x10
c0022b15:	f7 c6 20 00 00 00    	test   esi,0x20
c0022b1b:	74 12                	je     c0022b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022b1d:	83 ec 0c             	sub    esp,0xc
c0022b20:	b3 03                	mov    bl,0x3
c0022b22:	68 1a b2 02 c0       	push   0xc002b21a
c0022b27:	e8 01 fd fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b2c:	83 c4 10             	add    esp,0x10
c0022b2f:	f7 c6 40 00 00 00    	test   esi,0x40
c0022b35:	74 12                	je     c0022b49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022b37:	83 ec 0c             	sub    esp,0xc
c0022b3a:	b3 16                	mov    bl,0x16
c0022b3c:	68 6c b2 02 c0       	push   0xc002b26c
c0022b41:	e8 e7 fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b46:	83 c4 10             	add    esp,0x10
c0022b49:	89 f0                	mov    eax,esi
c0022b4b:	84 c0                	test   al,al
c0022b4d:	79 42                	jns    c0022b91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b4f:	83 ec 0c             	sub    esp,0xc
c0022b52:	b3 0d                	mov    bl,0xd
c0022b54:	68 8d b2 02 c0       	push   0xc002b28d
c0022b59:	e8 cf fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b5e:	83 c4 10             	add    esp,0x10
c0022b61:	eb 2e                	jmp    c0022b91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b63:	3c 03                	cmp    al,0x3
c0022b65:	75 14                	jne    c0022b7b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022b67:	83 ec 0c             	sub    esp,0xc
c0022b6a:	b3 17                	mov    bl,0x17
c0022b6c:	68 a1 b2 02 c0       	push   0xc002b2a1
c0022b71:	e8 b7 fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b76:	83 c4 10             	add    esp,0x10
c0022b79:	eb 16                	jmp    c0022b91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b7b:	3c 04                	cmp    al,0x4
c0022b7d:	75 12                	jne    c0022b91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b7f:	83 ec 0c             	sub    esp,0xc
c0022b82:	b3 08                	mov    bl,0x8
c0022b84:	68 b7 b2 02 c0       	push   0xc002b2b7
c0022b89:	e8 9f fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022b8e:	83 c4 10             	add    esp,0x10
c0022b91:	50                   	push   eax
c0022b92:	50                   	push   eax
c0022b93:	0f b6 c3             	movzx  eax,bl
c0022b96:	50                   	push   eax
c0022b97:	68 cf b2 02 c0       	push   0xc002b2cf
c0022b9c:	e8 8c fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022ba1:	83 c4 10             	add    esp,0x10
c0022ba4:	83 c4 1c             	add    esp,0x1c
c0022ba7:	88 d8                	mov    al,bl
c0022ba9:	5b                   	pop    ebx
c0022baa:	5e                   	pop    esi
c0022bab:	5f                   	pop    edi
c0022bac:	5d                   	pop    ebp
c0022bad:	c3                   	ret    

c0022bae <IDE::polling(unsigned char, unsigned int)>:
c0022bae:	57                   	push   edi
c0022baf:	56                   	push   esi
c0022bb0:	53                   	push   ebx
c0022bb1:	bb 04 00 00 00       	mov    ebx,0x4
c0022bb6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022bba:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bbf:	52                   	push   edx
c0022bc0:	6a 0c                	push   0xc
c0022bc2:	56                   	push   esi
c0022bc3:	57                   	push   edi
c0022bc4:	e8 f9 f4 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022bc9:	83 c4 10             	add    esp,0x10
c0022bcc:	4b                   	dec    ebx
c0022bcd:	75 f0                	jne    c0022bbf <IDE::polling(unsigned char, unsigned int)+0x11>
c0022bcf:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022bd4:	50                   	push   eax
c0022bd5:	6a 0c                	push   0xc
c0022bd7:	56                   	push   esi
c0022bd8:	57                   	push   edi
c0022bd9:	e8 e4 f4 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0022bde:	83 c4 10             	add    esp,0x10
c0022be1:	a8 01                	test   al,0x1
c0022be3:	74 12                	je     c0022bf7 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022be5:	83 ec 0c             	sub    esp,0xc
c0022be8:	68 e9 b2 02 c0       	push   0xc002b2e9
c0022bed:	e8 3b fc fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022bf2:	83 c4 10             	add    esp,0x10
c0022bf5:	eb 17                	jmp    c0022c0e <IDE::polling(unsigned char, unsigned int)+0x60>
c0022bf7:	a8 20                	test   al,0x20
c0022bf9:	75 0f                	jne    c0022c0a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022bfb:	4b                   	dec    ebx
c0022bfc:	74 10                	je     c0022c0e <IDE::polling(unsigned char, unsigned int)+0x60>
c0022bfe:	84 c0                	test   al,al
c0022c00:	78 d2                	js     c0022bd4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022c02:	a8 08                	test   al,0x8
c0022c04:	74 ce                	je     c0022bd4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022c06:	31 c0                	xor    eax,eax
c0022c08:	eb 06                	jmp    c0022c10 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022c0a:	b0 01                	mov    al,0x1
c0022c0c:	eb 02                	jmp    c0022c10 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022c0e:	b0 02                	mov    al,0x2
c0022c10:	5b                   	pop    ebx
c0022c11:	5e                   	pop    esi
c0022c12:	5f                   	pop    edi
c0022c13:	c3                   	ret    

c0022c14 <SATABus::close(int, int, void*)>:
c0022c14:	31 c0                	xor    eax,eax
c0022c16:	c3                   	ret    
c0022c17:	90                   	nop

c0022c18 <SATABus::detect()>:
c0022c18:	c3                   	ret    
c0022c19:	90                   	nop

c0022c1a <SATABus::SATABus()>:
c0022c1a:	83 ec 0c             	sub    esp,0xc
c0022c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c21:	83 ec 08             	sub    esp,0x8
c0022c24:	68 2c b3 02 c0       	push   0xc002b32c
c0022c29:	50                   	push   eax
c0022c2a:	e8 79 13 ff ff       	call   c0013fa8 <HardDiskController::HardDiskController(char const*)>
c0022c2f:	83 c4 10             	add    esp,0x10
c0022c32:	ba e8 b3 02 c0       	mov    edx,0xc002b3e8
c0022c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3b:	89 10                	mov    DWORD PTR [eax],edx
c0022c3d:	83 ec 0c             	sub    esp,0xc
c0022c40:	6a 50                	push   0x50
c0022c42:	e8 d4 cf fe ff       	call   c000fc1b <Phys::allocateContiguousPages(int)>
c0022c47:	83 c4 10             	add    esp,0x10
c0022c4a:	89 c2                	mov    edx,eax
c0022c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c50:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022c56:	83 ec 0c             	sub    esp,0xc
c0022c59:	6a 50                	push   0x50
c0022c5b:	e8 dd eb fe ff       	call   c001183d <Virt::allocateKernelVirtualPages(int)>
c0022c60:	83 c4 10             	add    esp,0x10
c0022c63:	89 c2                	mov    edx,eax
c0022c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c69:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c6f:	e8 59 ed fe ff       	call   c00119cd <Virt::getAKernelVAS()>
c0022c74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c78:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022c7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c82:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022c88:	83 ec 0c             	sub    esp,0xc
c0022c8b:	6a 03                	push   0x3
c0022c8d:	6a 50                	push   0x50
c0022c8f:	51                   	push   ecx
c0022c90:	52                   	push   edx
c0022c91:	50                   	push   eax
c0022c92:	e8 65 f5 fe ff       	call   c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022c97:	83 c4 20             	add    esp,0x20
c0022c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022cae:	83 ec 04             	sub    esp,0x4
c0022cb1:	52                   	push   edx
c0022cb2:	50                   	push   eax
c0022cb3:	68 50 b3 02 c0       	push   0xc002b350
c0022cb8:	e8 70 fb fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022cbd:	83 c4 10             	add    esp,0x10
c0022cc0:	90                   	nop
c0022cc1:	83 c4 0c             	add    esp,0xc
c0022cc4:	c3                   	ret    
c0022cc5:	90                   	nop

c0022cc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022cc6:	83 ec 0c             	sub    esp,0xc
c0022cc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ccd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022cd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022cd3:	09 c2                	or     edx,eax
c0022cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022cdf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022ce1:	31 c0                	xor    eax,eax
c0022ce3:	c1 e9 08             	shr    ecx,0x8
c0022ce6:	83 e1 0f             	and    ecx,0xf
c0022ce9:	39 c8                	cmp    eax,ecx
c0022ceb:	74 0a                	je     c0022cf7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022ced:	f6 c2 01             	test   dl,0x1
c0022cf0:	74 18                	je     c0022d0a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022cf2:	d1 ea                	shr    edx,1
c0022cf4:	40                   	inc    eax
c0022cf5:	eb f2                	jmp    c0022ce9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022cf7:	83 ec 0c             	sub    esp,0xc
c0022cfa:	68 74 b3 02 c0       	push   0xc002b374
c0022cff:	e8 43 6c ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0022d04:	83 c4 10             	add    esp,0x10
c0022d07:	83 c8 ff             	or     eax,0xffffffff
c0022d0a:	83 c4 0c             	add    esp,0xc
c0022d0d:	c3                   	ret    

c0022d0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022d0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d12:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022d15:	89 c2                	mov    edx,eax
c0022d17:	c1 ea 08             	shr    edx,0x8
c0022d1a:	83 e2 0f             	and    edx,0xf
c0022d1d:	fe ca                	dec    dl
c0022d1f:	75 31                	jne    c0022d52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022d21:	83 e0 0f             	and    eax,0xf
c0022d24:	3c 03                	cmp    al,0x3
c0022d26:	75 2a                	jne    c0022d52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022d28:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022d2b:	b8 02 00 00 00       	mov    eax,0x2
c0022d30:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022d36:	74 1c                	je     c0022d54 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022d38:	b8 04 00 00 00       	mov    eax,0x4
c0022d3d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022d43:	74 0f                	je     c0022d54 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022d45:	31 c0                	xor    eax,eax
c0022d47:	83 fa 03             	cmp    edx,0x3
c0022d4a:	0f 94 c0             	sete   al
c0022d4d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022d51:	c3                   	ret    
c0022d52:	31 c0                	xor    eax,eax
c0022d54:	c3                   	ret    
c0022d55:	90                   	nop

c0022d56 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022d56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d5d:	0f ba e2 0f          	bt     edx,0xf
c0022d61:	72 f7                	jb     c0022d5a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022d63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d66:	83 ca 10             	or     edx,0x10
c0022d69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d6f:	83 ca 01             	or     edx,0x1
c0022d72:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d75:	c3                   	ret    

c0022d76 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022d76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d7a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d7d:	83 e2 fe             	and    edx,0xfffffffe
c0022d80:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d83:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d86:	83 e2 ef             	and    edx,0xffffffef
c0022d89:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d8f:	0f ba e2 0e          	bt     edx,0xe
c0022d93:	72 f7                	jb     c0022d8c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d98:	0f ba e2 0f          	bt     edx,0xf
c0022d9c:	72 ee                	jb     c0022d8c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d9e:	c3                   	ret    
c0022d9f:	90                   	nop

c0022da0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022da0:	55                   	push   ebp
c0022da1:	57                   	push   edi
c0022da2:	56                   	push   esi
c0022da3:	53                   	push   ebx
c0022da4:	83 ec 1c             	sub    esp,0x1c
c0022da7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022dab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022daf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022db3:	53                   	push   ebx
c0022db4:	89 fd                	mov    ebp,edi
c0022db6:	56                   	push   esi
c0022db7:	c1 e5 0a             	shl    ebp,0xa
c0022dba:	e8 b7 ff ff ff       	call   c0022d76 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022dbf:	83 ec 0c             	sub    esp,0xc
c0022dc2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022dc8:	01 e8                	add    eax,ebp
c0022dca:	89 03                	mov    DWORD PTR [ebx],eax
c0022dcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022dce:	68 00 04 00 00       	push   0x400
c0022dd3:	6a 00                	push   0x0
c0022dd5:	50                   	push   eax
c0022dd6:	e8 b0 d8 fd ff       	call   c000068b <memset>
c0022ddb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022de1:	89 fa                	mov    edx,edi
c0022de3:	01 e8                	add    eax,ebp
c0022de5:	c1 e7 0d             	shl    edi,0xd
c0022de8:	89 03                	mov    DWORD PTR [ebx],eax
c0022dea:	c1 e2 08             	shl    edx,0x8
c0022ded:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022df4:	81 c2 00 80 00 00    	add    edx,0x8000
c0022dfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022dfe:	89 d0                	mov    eax,edx
c0022e00:	83 c4 1c             	add    esp,0x1c
c0022e03:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022e09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022e0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022e0f:	68 00 01 00 00       	push   0x100
c0022e14:	6a 00                	push   0x0
c0022e16:	50                   	push   eax
c0022e17:	e8 6f d8 fd ff       	call   c000068b <memset>
c0022e1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022e20:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022e26:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022e2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022e30:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022e33:	83 c4 10             	add    esp,0x10
c0022e36:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022e3d:	31 ff                	xor    edi,edi
c0022e3f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022e45:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022e4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e4f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022e55:	83 c5 20             	add    ebp,0x20
c0022e58:	01 f8                	add    eax,edi
c0022e5a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022e5d:	52                   	push   edx
c0022e5e:	68 00 01 00 00       	push   0x100
c0022e63:	6a 00                	push   0x0
c0022e65:	50                   	push   eax
c0022e66:	e8 20 d8 fd ff       	call   c000068b <memset>
c0022e6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e6f:	83 c4 10             	add    esp,0x10
c0022e72:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022e78:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022e7f:	01 f8                	add    eax,edi
c0022e81:	81 c7 00 01 00 00    	add    edi,0x100
c0022e87:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022e8a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022e90:	75 b3                	jne    c0022e45 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022e92:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022e96:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022e9a:	83 c4 1c             	add    esp,0x1c
c0022e9d:	5b                   	pop    ebx
c0022e9e:	5e                   	pop    esi
c0022e9f:	5f                   	pop    edi
c0022ea0:	5d                   	pop    ebp
c0022ea1:	e9 b0 fe ff ff       	jmp    c0022d56 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022ea6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022ea6:	55                   	push   ebp
c0022ea7:	57                   	push   edi
c0022ea8:	56                   	push   esi
c0022ea9:	53                   	push   ebx
c0022eaa:	31 db                	xor    ebx,ebx
c0022eac:	83 ec 0c             	sub    esp,0xc
c0022eaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022eb3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022eb7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022eba:	f7 c7 01 00 00 00    	test   edi,0x1
c0022ec0:	0f 84 94 00 00 00    	je     c0022f5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022ec6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022eca:	89 d8                	mov    eax,ebx
c0022ecc:	c1 e0 07             	shl    eax,0x7
c0022ecf:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022ed6:	55                   	push   ebp
c0022ed7:	56                   	push   esi
c0022ed8:	e8 31 fe ff ff       	call   c0022d0e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022edd:	59                   	pop    ecx
c0022ede:	83 f8 01             	cmp    eax,0x1
c0022ee1:	5a                   	pop    edx
c0022ee2:	75 47                	jne    c0022f2b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022ee4:	51                   	push   ecx
c0022ee5:	51                   	push   ecx
c0022ee6:	53                   	push   ebx
c0022ee7:	68 99 b3 02 c0       	push   0xc002b399
c0022eec:	e8 3c f9 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022ef1:	83 c4 0c             	add    esp,0xc
c0022ef4:	53                   	push   ebx
c0022ef5:	55                   	push   ebp
c0022ef6:	56                   	push   esi
c0022ef7:	e8 a4 fe ff ff       	call   c0022da0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022efc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022f03:	e8 cc c5 fe ff       	call   c000f4d4 <malloc>
c0022f08:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f0b:	89 c5                	mov    ebp,eax
c0022f0d:	e8 de 0c 00 00       	call   c0023bf0 <SATA::SATA()>
c0022f12:	58                   	pop    eax
c0022f13:	5a                   	pop    edx
c0022f14:	55                   	push   ebp
c0022f15:	56                   	push   esi
c0022f16:	e8 01 0d ff ff       	call   c0013c1c <Device::addChild(Device*)>
c0022f1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022f1e:	56                   	push   esi
c0022f1f:	6a 00                	push   0x0
c0022f21:	53                   	push   ebx
c0022f22:	55                   	push   ebp
c0022f23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022f26:	83 c4 20             	add    esp,0x20
c0022f29:	eb 2f                	jmp    c0022f5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022f2b:	83 f8 04             	cmp    eax,0x4
c0022f2e:	75 1a                	jne    c0022f4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022f30:	52                   	push   edx
c0022f31:	52                   	push   edx
c0022f32:	53                   	push   ebx
c0022f33:	68 b0 b3 02 c0       	push   0xc002b3b0
c0022f38:	e8 f0 f8 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022f3d:	83 c4 0c             	add    esp,0xc
c0022f40:	53                   	push   ebx
c0022f41:	55                   	push   ebp
c0022f42:	56                   	push   esi
c0022f43:	e8 58 fe ff ff       	call   c0022da0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022f48:	eb 0d                	jmp    c0022f57 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022f4a:	50                   	push   eax
c0022f4b:	50                   	push   eax
c0022f4c:	53                   	push   ebx
c0022f4d:	68 c9 b3 02 c0       	push   0xc002b3c9
c0022f52:	e8 d6 f8 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0022f57:	83 c4 10             	add    esp,0x10
c0022f5a:	d1 ef                	shr    edi,1
c0022f5c:	43                   	inc    ebx
c0022f5d:	83 fb 20             	cmp    ebx,0x20
c0022f60:	0f 85 54 ff ff ff    	jne    c0022eba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022f66:	83 c4 0c             	add    esp,0xc
c0022f69:	5b                   	pop    ebx
c0022f6a:	5e                   	pop    esi
c0022f6b:	5f                   	pop    edi
c0022f6c:	5d                   	pop    ebp
c0022f6d:	c3                   	ret    

c0022f6e <SATABus::open(int, int, void*)>:
c0022f6e:	83 ec 14             	sub    esp,0x14
c0022f71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f75:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022f7b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022f81:	52                   	push   edx
c0022f82:	50                   	push   eax
c0022f83:	e8 1e ff ff ff       	call   c0022ea6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022f88:	31 c0                	xor    eax,eax
c0022f8a:	83 c4 1c             	add    esp,0x1c
c0022f8d:	c3                   	ret    

c0022f8e <ATA::close(int, int, void*)>:
c0022f8e:	83 ec 0c             	sub    esp,0xc
c0022f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f9b:	85 c0                	test   eax,eax
c0022f9d:	74 0c                	je     c0022fab <ATA::close(int, int, void*)+0x1d>
c0022f9f:	83 ec 0c             	sub    esp,0xc
c0022fa2:	8b 10                	mov    edx,DWORD PTR [eax]
c0022fa4:	50                   	push   eax
c0022fa5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022fa8:	83 c4 10             	add    esp,0x10
c0022fab:	31 c0                	xor    eax,eax
c0022fad:	83 c4 0c             	add    esp,0xc
c0022fb0:	c3                   	ret    
c0022fb1:	90                   	nop

c0022fb2 <ATA::powerSaving(PowerSavingLevel)>:
c0022fb2:	c3                   	ret    
c0022fb3:	90                   	nop

c0022fb4 <ATA::ATA()>:
c0022fb4:	83 ec 0c             	sub    esp,0xc
c0022fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbb:	83 ec 04             	sub    esp,0x4
c0022fbe:	68 00 02 00 00       	push   0x200
c0022fc3:	68 dc b4 02 c0       	push   0xc002b4dc
c0022fc8:	50                   	push   eax
c0022fc9:	e8 5e 10 ff ff       	call   c001402c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022fce:	83 c4 10             	add    esp,0x10
c0022fd1:	ba 28 b4 02 c0       	mov    edx,0xc002b428
c0022fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fda:	89 10                	mov    DWORD PTR [eax],edx
c0022fdc:	90                   	nop
c0022fdd:	83 c4 0c             	add    esp,0xc
c0022fe0:	c3                   	ret    
c0022fe1:	90                   	nop

c0022fe2 <ATA::flush(bool)>:
c0022fe2:	53                   	push   ebx
c0022fe3:	83 ec 08             	sub    esp,0x8
c0022fe6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022feb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fef:	19 c0                	sbb    eax,eax
c0022ff1:	83 e0 fd             	and    eax,0xfffffffd
c0022ff4:	05 ea 00 00 00       	add    eax,0xea
c0022ff9:	50                   	push   eax
c0022ffa:	6a 07                	push   0x7
c0022ffc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023003:	50                   	push   eax
c0023004:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002300a:	e8 f3 ef ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002300f:	83 c4 0c             	add    esp,0xc
c0023012:	6a 00                	push   0x0
c0023014:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002301b:	50                   	push   eax
c002301c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023022:	e8 87 fb ff ff       	call   c0022bae <IDE::polling(unsigned char, unsigned int)>
c0023027:	83 c4 18             	add    esp,0x18
c002302a:	5b                   	pop    ebx
c002302b:	c3                   	ret    

c002302c <ATA::readyForCommand()>:
c002302c:	56                   	push   esi
c002302d:	53                   	push   ebx
c002302e:	31 db                	xor    ebx,ebx
c0023030:	50                   	push   eax
c0023031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023035:	50                   	push   eax
c0023036:	6a 0c                	push   0xc
c0023038:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002303f:	50                   	push   eax
c0023040:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023046:	e8 77 f0 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002304b:	83 c4 10             	add    esp,0x10
c002304e:	a8 88                	test   al,0x88
c0023050:	74 23                	je     c0023075 <ATA::readyForCommand()+0x49>
c0023052:	43                   	inc    ebx
c0023053:	83 fb 63             	cmp    ebx,0x63
c0023056:	7e dd                	jle    c0023035 <ATA::readyForCommand()+0x9>
c0023058:	51                   	push   ecx
c0023059:	51                   	push   ecx
c002305a:	6a 00                	push   0x0
c002305c:	68 40 42 0f 00       	push   0xf4240
c0023061:	e8 c0 a2 ff ff       	call   c001d326 <nanoSleep(unsigned long long)>
c0023066:	83 c4 10             	add    esp,0x10
c0023069:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002306f:	75 c4                	jne    c0023035 <ATA::readyForCommand()+0x9>
c0023071:	31 c0                	xor    eax,eax
c0023073:	eb 02                	jmp    c0023077 <ATA::readyForCommand()+0x4b>
c0023075:	b0 01                	mov    al,0x1
c0023077:	5a                   	pop    edx
c0023078:	5b                   	pop    ebx
c0023079:	5e                   	pop    esi
c002307a:	c3                   	ret    
c002307b:	90                   	nop

c002307c <ATA::access(unsigned long long, int, void*, bool)>:
c002307c:	55                   	push   ebp
c002307d:	57                   	push   edi
c002307e:	56                   	push   esi
c002307f:	53                   	push   ebx
c0023080:	83 ec 2c             	sub    esp,0x2c
c0023083:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023087:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002308b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002308f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023093:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023097:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002309b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002309f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00230a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230a9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00230af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230b3:	c1 e0 06             	shl    eax,0x6
c00230b6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00230be:	74 5d                	je     c002311d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00230c0:	89 fa                	mov    edx,edi
c00230c2:	89 f0                	mov    eax,esi
c00230c4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00230c8:	c1 ea 1c             	shr    edx,0x1c
c00230cb:	89 d1                	mov    ecx,edx
c00230cd:	09 c1                	or     ecx,eax
c00230cf:	74 25                	je     c00230f6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00230d1:	31 ed                	xor    ebp,ebp
c00230d3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00230da:	89 fa                	mov    edx,edi
c00230dc:	89 f0                	mov    eax,esi
c00230de:	0f ad d0             	shrd   eax,edx,cl
c00230e1:	d3 ea                	shr    edx,cl
c00230e3:	f6 c1 20             	test   cl,0x20
c00230e6:	74 02                	je     c00230ea <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00230e8:	89 d0                	mov    eax,edx
c00230ea:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00230ee:	45                   	inc    ebp
c00230ef:	83 fd 06             	cmp    ebp,0x6
c00230f2:	75 df                	jne    c00230d3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00230f4:	eb 76                	jmp    c002316c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00230f6:	89 f0                	mov    eax,esi
c00230f8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00230fd:	89 fa                	mov    edx,edi
c00230ff:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023106:	0f ac d0 10          	shrd   eax,edx,0x10
c002310a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002310f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023113:	c1 ee 18             	shr    esi,0x18
c0023116:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002311b:	eb 56                	jmp    c0023173 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002311d:	6a 00                	push   0x0
c002311f:	6a 3f                	push   0x3f
c0023121:	57                   	push   edi
c0023122:	56                   	push   esi
c0023123:	e8 34 24 00 00       	call   c002555c <__umoddi3>
c0023128:	83 c4 10             	add    esp,0x10
c002312b:	40                   	inc    eax
c002312c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023130:	6a 00                	push   0x0
c0023132:	68 f0 03 00 00       	push   0x3f0
c0023137:	57                   	push   edi
c0023138:	56                   	push   esi
c0023139:	e8 1e 23 00 00       	call   c002545c <__udivdi3>
c002313e:	83 c4 10             	add    esp,0x10
c0023141:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023146:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002314d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023152:	6a 00                	push   0x0
c0023154:	6a 3f                	push   0x3f
c0023156:	57                   	push   edi
c0023157:	56                   	push   esi
c0023158:	e8 ff 22 00 00       	call   c002545c <__udivdi3>
c002315d:	83 c4 10             	add    esp,0x10
c0023160:	89 c6                	mov    esi,eax
c0023162:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023167:	83 e6 0f             	and    esi,0xf
c002316a:	eb 07                	jmp    c0023173 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002316c:	31 f6                	xor    esi,esi
c002316e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023173:	bf 01 00 00 00       	mov    edi,0x1
c0023178:	50                   	push   eax
c0023179:	6a 00                	push   0x0
c002317b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023182:	50                   	push   eax
c0023183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023187:	e8 82 f0 ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c002318c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002318f:	e8 98 fe ff ff       	call   c002302c <ATA::readyForCommand()>
c0023194:	83 c4 10             	add    esp,0x10
c0023197:	84 c0                	test   al,al
c0023199:	0f 84 50 02 00 00    	je     c00233ef <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002319f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00231a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00231ab:	c1 e0 04             	shl    eax,0x4
c00231ae:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00231b5:	09 c6                	or     esi,eax
c00231b7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00231bc:	75 05                	jne    c00231c3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00231be:	83 ce a0             	or     esi,0xffffffa0
c00231c1:	eb 03                	jmp    c00231c6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00231c3:	83 ce e0             	or     esi,0xffffffe0
c00231c6:	89 f0                	mov    eax,esi
c00231c8:	0f b6 f0             	movzx  esi,al
c00231cb:	56                   	push   esi
c00231cc:	6a 06                	push   0x6
c00231ce:	51                   	push   ecx
c00231cf:	52                   	push   edx
c00231d0:	e8 2d ee ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	6a 00                	push   0x0
c00231da:	6a 01                	push   0x1
c00231dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231e3:	50                   	push   eax
c00231e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231ea:	e8 13 ee ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ef:	83 c4 10             	add    esp,0x10
c00231f2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00231f7:	75 6e                	jne    c0023267 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00231f9:	6a 00                	push   0x0
c00231fb:	6a 08                	push   0x8
c00231fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023204:	50                   	push   eax
c0023205:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002320b:	e8 f2 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023210:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023215:	50                   	push   eax
c0023216:	6a 09                	push   0x9
c0023218:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002321f:	50                   	push   eax
c0023220:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023226:	e8 d7 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002322b:	83 c4 20             	add    esp,0x20
c002322e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023233:	50                   	push   eax
c0023234:	6a 0a                	push   0xa
c0023236:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002323d:	50                   	push   eax
c002323e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023244:	e8 b9 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023249:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002324e:	50                   	push   eax
c002324f:	6a 0b                	push   0xb
c0023251:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023258:	50                   	push   eax
c0023259:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002325f:	e8 9e ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023264:	83 c4 20             	add    esp,0x20
c0023267:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002326c:	50                   	push   eax
c002326d:	6a 02                	push   0x2
c002326f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023276:	50                   	push   eax
c0023277:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002327d:	e8 80 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023282:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023287:	50                   	push   eax
c0023288:	6a 03                	push   0x3
c002328a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023291:	50                   	push   eax
c0023292:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023298:	e8 65 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002329d:	83 c4 20             	add    esp,0x20
c00232a0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00232a5:	50                   	push   eax
c00232a6:	6a 04                	push   0x4
c00232a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232af:	50                   	push   eax
c00232b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232b6:	e8 47 ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00232c0:	50                   	push   eax
c00232c1:	6a 05                	push   0x5
c00232c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232ca:	50                   	push   eax
c00232cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232d1:	e8 2c ed ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232d6:	83 c4 20             	add    esp,0x20
c00232d9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00232de:	0f 94 c0             	sete   al
c00232e1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00232e6:	74 09                	je     c00232f1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00232e8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00232ef:	eb 07                	jmp    c00232f8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00232f1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00232f8:	0f b6 c0             	movzx  eax,al
c00232fb:	50                   	push   eax
c00232fc:	6a 07                	push   0x7
c00232fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023305:	50                   	push   eax
c0023306:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002330c:	e8 f1 ec ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023311:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023315:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023319:	83 c4 10             	add    esp,0x10
c002331c:	85 f6                	test   esi,esi
c002331e:	0f 84 ac 00 00 00    	je     c00233d0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023324:	50                   	push   eax
c0023325:	6a 01                	push   0x1
c0023327:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002332e:	50                   	push   eax
c002332f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023335:	e8 74 f8 ff ff       	call   c0022bae <IDE::polling(unsigned char, unsigned int)>
c002333a:	83 c4 10             	add    esp,0x10
c002333d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023343:	84 c0                	test   al,al
c0023345:	74 20                	je     c0023367 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0023347:	0f b6 f8             	movzx  edi,al
c002334a:	0f b6 d2             	movzx  edx,dl
c002334d:	57                   	push   edi
c002334e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023355:	50                   	push   eax
c0023356:	52                   	push   edx
c0023357:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002335d:	e8 b6 f6 ff ff       	call   c0022a18 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023362:	e9 85 00 00 00       	jmp    c00233ec <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0023367:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002336c:	74 41                	je     c00233af <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002336e:	31 c9                	xor    ecx,ecx
c0023370:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023374:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023378:	50                   	push   eax
c0023379:	50                   	push   eax
c002337a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023381:	50                   	push   eax
c0023382:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023388:	e8 63 ec ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c002338d:	89 c2                	mov    edx,eax
c002338f:	89 e8                	mov    eax,ebp
c0023391:	66 ef                	out    dx,ax
c0023393:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023397:	83 c4 10             	add    esp,0x10
c002339a:	41                   	inc    ecx
c002339b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00233a1:	75 cd                	jne    c0023370 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00233a3:	4e                   	dec    esi
c00233a4:	81 c7 00 02 00 00    	add    edi,0x200
c00233aa:	e9 6d ff ff ff       	jmp    c002331c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00233af:	0f b6 d2             	movzx  edx,dl
c00233b2:	51                   	push   ecx
c00233b3:	51                   	push   ecx
c00233b4:	52                   	push   edx
c00233b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233bb:	e8 30 ec ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c00233c0:	b9 00 01 00 00       	mov    ecx,0x100
c00233c5:	89 c2                	mov    edx,eax
c00233c7:	fc                   	cld    
c00233c8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00233cb:	83 c4 10             	add    esp,0x10
c00233ce:	eb d3                	jmp    c00233a3 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00233d0:	31 ff                	xor    edi,edi
c00233d2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00233d7:	74 16                	je     c00233ef <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00233d9:	50                   	push   eax
c00233da:	50                   	push   eax
c00233db:	31 c0                	xor    eax,eax
c00233dd:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00233e2:	0f 94 c0             	sete   al
c00233e5:	50                   	push   eax
c00233e6:	53                   	push   ebx
c00233e7:	e8 f6 fb ff ff       	call   c0022fe2 <ATA::flush(bool)>
c00233ec:	83 c4 10             	add    esp,0x10
c00233ef:	83 c4 2c             	add    esp,0x2c
c00233f2:	89 f8                	mov    eax,edi
c00233f4:	5b                   	pop    ebx
c00233f5:	5e                   	pop    esi
c00233f6:	5f                   	pop    edi
c00233f7:	5d                   	pop    ebp
c00233f8:	c3                   	ret    
c00233f9:	90                   	nop

c00233fa <ATA::read(unsigned long long, int, void*)>:
c00233fa:	57                   	push   edi
c00233fb:	b8 04 00 00 00       	mov    eax,0x4
c0023400:	56                   	push   esi
c0023401:	53                   	push   ebx
c0023402:	83 ec 10             	sub    esp,0x10
c0023405:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023409:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002340d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023410:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023414:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023418:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002341e:	77 3b                	ja     c002345b <ATA::read(unsigned long long, int, void*)+0x61>
c0023420:	b8 06 00 00 00       	mov    eax,0x6
c0023425:	85 d2                	test   edx,edx
c0023427:	74 32                	je     c002345b <ATA::read(unsigned long long, int, void*)+0x61>
c0023429:	50                   	push   eax
c002342a:	50                   	push   eax
c002342b:	6a 00                	push   0x0
c002342d:	52                   	push   edx
c002342e:	53                   	push   ebx
c002342f:	57                   	push   edi
c0023430:	56                   	push   esi
c0023431:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023435:	e8 42 fc ff ff       	call   c002307c <ATA::access(unsigned long long, int, void*, bool)>
c002343a:	83 c4 20             	add    esp,0x20
c002343d:	85 c0                	test   eax,eax
c002343f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023443:	75 11                	jne    c0023456 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023445:	01 1d 48 ed 02 c0    	add    DWORD PTR ds:0xc002ed48,ebx
c002344b:	e8 ca d1 fe ff       	call   c001061a <VgaText::updateDiskUsage()>
c0023450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023454:	eb 05                	jmp    c002345b <ATA::read(unsigned long long, int, void*)+0x61>
c0023456:	b8 01 00 00 00       	mov    eax,0x1
c002345b:	83 c4 10             	add    esp,0x10
c002345e:	5b                   	pop    ebx
c002345f:	5e                   	pop    esi
c0023460:	5f                   	pop    edi
c0023461:	c3                   	ret    

c0023462 <ATA::write(unsigned long long, int, void*)>:
c0023462:	57                   	push   edi
c0023463:	b8 04 00 00 00       	mov    eax,0x4
c0023468:	56                   	push   esi
c0023469:	53                   	push   ebx
c002346a:	83 ec 10             	sub    esp,0x10
c002346d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023471:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023475:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023478:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002347c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023480:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023486:	77 3b                	ja     c00234c3 <ATA::write(unsigned long long, int, void*)+0x61>
c0023488:	b8 06 00 00 00       	mov    eax,0x6
c002348d:	85 d2                	test   edx,edx
c002348f:	74 32                	je     c00234c3 <ATA::write(unsigned long long, int, void*)+0x61>
c0023491:	50                   	push   eax
c0023492:	50                   	push   eax
c0023493:	6a 01                	push   0x1
c0023495:	52                   	push   edx
c0023496:	53                   	push   ebx
c0023497:	57                   	push   edi
c0023498:	56                   	push   esi
c0023499:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002349d:	e8 da fb ff ff       	call   c002307c <ATA::access(unsigned long long, int, void*, bool)>
c00234a2:	83 c4 20             	add    esp,0x20
c00234a5:	85 c0                	test   eax,eax
c00234a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00234ab:	75 11                	jne    c00234be <ATA::write(unsigned long long, int, void*)+0x5c>
c00234ad:	01 1d 44 ed 02 c0    	add    DWORD PTR ds:0xc002ed44,ebx
c00234b3:	e8 62 d1 fe ff       	call   c001061a <VgaText::updateDiskUsage()>
c00234b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00234bc:	eb 05                	jmp    c00234c3 <ATA::write(unsigned long long, int, void*)+0x61>
c00234be:	b8 01 00 00 00       	mov    eax,0x1
c00234c3:	83 c4 10             	add    esp,0x10
c00234c6:	5b                   	pop    ebx
c00234c7:	5e                   	pop    esi
c00234c8:	5f                   	pop    edi
c00234c9:	c3                   	ret    

c00234ca <ATA::detectCHS()>:
c00234ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00234ce:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00234d4:	c1 e0 06             	shl    eax,0x6
c00234d7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00234dd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00234e7:	c7 44 24 04 0c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b40c
c00234ef:	e9 53 64 ff ff       	jmp    c0019947 <Krnl::panic(char const*)>

c00234f4 <ATA::open(int, int, void*)>:
c00234f4:	53                   	push   ebx
c00234f5:	83 ec 08             	sub    esp,0x8
c00234f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00234fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023500:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023504:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002350a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023510:	c1 e0 06             	shl    eax,0x6
c0023513:	01 d0                	add    eax,edx
c0023515:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002351c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023522:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023529:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023533:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023539:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023540:	75 0c                	jne    c002354e <ATA::open(int, int, void*)+0x5a>
c0023542:	83 ec 0c             	sub    esp,0xc
c0023545:	53                   	push   ebx
c0023546:	e8 7f ff ff ff       	call   c00234ca <ATA::detectCHS()>
c002354b:	83 c4 10             	add    esp,0x10
c002354e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023554:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002355a:	c1 e0 06             	shl    eax,0x6
c002355d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023564:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002356e:	d1 e8                	shr    eax,1
c0023570:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023576:	6a 04                	push   0x4
c0023578:	6a 0c                	push   0xc
c002357a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023581:	50                   	push   eax
c0023582:	52                   	push   edx
c0023583:	e8 7a ea ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023588:	90                   	nop
c0023589:	90                   	nop
c002358a:	6a 00                	push   0x0
c002358c:	6a 0c                	push   0xc
c002358e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023595:	50                   	push   eax
c0023596:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002359c:	e8 61 ea ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a1:	83 c4 14             	add    esp,0x14
c00235a4:	53                   	push   ebx
c00235a5:	e8 ea 0a ff ff       	call   c0014094 <PhysicalDisk::startCache()>
c00235aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235ad:	e8 0c 2b ff ff       	call   c00160be <createPartitionsForDisk(PhysicalDisk*)>
c00235b2:	31 c0                	xor    eax,eax
c00235b4:	83 c4 18             	add    esp,0x18
c00235b7:	5b                   	pop    ebx
c00235b8:	c3                   	ret    
c00235b9:	90                   	nop

c00235ba <ATAPI::write(unsigned long long, int, void*)>:
c00235ba:	b8 03 00 00 00       	mov    eax,0x3
c00235bf:	c3                   	ret    

c00235c0 <ATAPI::close(int, int, void*)>:
c00235c0:	83 ec 0c             	sub    esp,0xc
c00235c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00235cd:	85 c0                	test   eax,eax
c00235cf:	74 0c                	je     c00235dd <ATAPI::close(int, int, void*)+0x1d>
c00235d1:	83 ec 0c             	sub    esp,0xc
c00235d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00235d6:	50                   	push   eax
c00235d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00235da:	83 c4 10             	add    esp,0x10
c00235dd:	31 c0                	xor    eax,eax
c00235df:	83 c4 0c             	add    esp,0xc
c00235e2:	c3                   	ret    
c00235e3:	90                   	nop

c00235e4 <ATAPI::ATAPI()>:
c00235e4:	83 ec 0c             	sub    esp,0xc
c00235e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235eb:	83 ec 04             	sub    esp,0x4
c00235ee:	68 00 08 00 00       	push   0x800
c00235f3:	68 54 b4 02 c0       	push   0xc002b454
c00235f8:	50                   	push   eax
c00235f9:	e8 2e 0a ff ff       	call   c001402c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00235fe:	83 c4 10             	add    esp,0x10
c0023601:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c0023606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002360a:	89 10                	mov    DWORD PTR [eax],edx
c002360c:	90                   	nop
c002360d:	83 c4 0c             	add    esp,0xc
c0023610:	c3                   	ret    
c0023611:	90                   	nop

c0023612 <ATAPI::readyForCommand()>:
c0023612:	56                   	push   esi
c0023613:	53                   	push   ebx
c0023614:	31 db                	xor    ebx,ebx
c0023616:	50                   	push   eax
c0023617:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002361b:	50                   	push   eax
c002361c:	6a 0c                	push   0xc
c002361e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023625:	50                   	push   eax
c0023626:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002362c:	e8 91 ea ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0023631:	83 c4 10             	add    esp,0x10
c0023634:	a8 88                	test   al,0x88
c0023636:	74 23                	je     c002365b <ATAPI::readyForCommand()+0x49>
c0023638:	43                   	inc    ebx
c0023639:	83 fb 63             	cmp    ebx,0x63
c002363c:	7e dd                	jle    c002361b <ATAPI::readyForCommand()+0x9>
c002363e:	51                   	push   ecx
c002363f:	51                   	push   ecx
c0023640:	6a 00                	push   0x0
c0023642:	68 40 42 0f 00       	push   0xf4240
c0023647:	e8 da 9c ff ff       	call   c001d326 <nanoSleep(unsigned long long)>
c002364c:	83 c4 10             	add    esp,0x10
c002364f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023655:	75 c4                	jne    c002361b <ATAPI::readyForCommand()+0x9>
c0023657:	31 c0                	xor    eax,eax
c0023659:	eb 02                	jmp    c002365d <ATAPI::readyForCommand()+0x4b>
c002365b:	b0 01                	mov    al,0x1
c002365d:	5a                   	pop    edx
c002365e:	5b                   	pop    ebx
c002365f:	5e                   	pop    esi
c0023660:	c3                   	ret    
c0023661:	90                   	nop

c0023662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023662:	55                   	push   ebp
c0023663:	57                   	push   edi
c0023664:	56                   	push   esi
c0023665:	53                   	push   ebx
c0023666:	83 ec 20             	sub    esp,0x20
c0023669:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002366d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023671:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023675:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023679:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002367d:	6a 01                	push   0x1
c002367f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023686:	50                   	push   eax
c0023687:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002368d:	e8 7c eb ff ff       	call   c002220e <IDE::enableIRQs(unsigned char, bool)>
c0023692:	5e                   	pop    esi
c0023693:	58                   	pop    eax
c0023694:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002369b:	50                   	push   eax
c002369c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236a2:	e8 35 e9 ff ff       	call   c0021fdc <IDE::prepareInterrupt(unsigned char)>
c00236a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00236aa:	e8 63 ff ff ff       	call   c0023612 <ATAPI::readyForCommand()>
c00236af:	83 c4 10             	add    esp,0x10
c00236b2:	84 c0                	test   al,al
c00236b4:	75 0a                	jne    c00236c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00236b6:	bb 01 00 00 00       	mov    ebx,0x1
c00236bb:	e9 57 02 00 00       	jmp    c0023917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236c0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00236c6:	c1 e0 04             	shl    eax,0x4
c00236c9:	0f b6 c0             	movzx  eax,al
c00236cc:	50                   	push   eax
c00236cd:	6a 06                	push   0x6
c00236cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236d6:	50                   	push   eax
c00236d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236dd:	e8 20 e9 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236e2:	6a 00                	push   0x0
c00236e4:	6a 01                	push   0x1
c00236e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236ed:	50                   	push   eax
c00236ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236f4:	e8 09 e9 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f9:	83 c4 20             	add    esp,0x20
c00236fc:	0f b6 c3             	movzx  eax,bl
c00236ff:	0f b6 df             	movzx  ebx,bh
c0023702:	50                   	push   eax
c0023703:	6a 04                	push   0x4
c0023705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002370c:	50                   	push   eax
c002370d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023713:	e8 ea e8 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023718:	53                   	push   ebx
c0023719:	6a 05                	push   0x5
c002371b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023722:	50                   	push   eax
c0023723:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023729:	e8 d4 e8 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372e:	83 c4 20             	add    esp,0x20
c0023731:	68 a0 00 00 00       	push   0xa0
c0023736:	6a 07                	push   0x7
c0023738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002373f:	50                   	push   eax
c0023740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023746:	e8 b7 e8 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374b:	83 c4 0c             	add    esp,0xc
c002374e:	6a 01                	push   0x1
c0023750:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023757:	50                   	push   eax
c0023758:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002375e:	e8 4b f4 ff ff       	call   c0022bae <IDE::polling(unsigned char, unsigned int)>
c0023763:	83 c4 10             	add    esp,0x10
c0023766:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002376c:	84 c0                	test   al,al
c002376e:	74 23                	je     c0023793 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023770:	0f b6 d8             	movzx  ebx,al
c0023773:	0f b6 d2             	movzx  edx,dl
c0023776:	53                   	push   ebx
c0023777:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002377e:	50                   	push   eax
c002377f:	52                   	push   edx
c0023780:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023786:	e8 8d f2 ff ff       	call   c0022a18 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002378b:	83 c4 10             	add    esp,0x10
c002378e:	e9 84 01 00 00       	jmp    c0023917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023793:	0f b6 d2             	movzx  edx,dl
c0023796:	53                   	push   ebx
c0023797:	53                   	push   ebx
c0023798:	52                   	push   edx
c0023799:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002379f:	e8 4c e8 ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c00237a4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00237a8:	b9 06 00 00 00       	mov    ecx,0x6
c00237ad:	89 c2                	mov    edx,eax
c00237af:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00237b2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00237b6:	83 c4 10             	add    esp,0x10
c00237b9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237bf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237c6:	85 db                	test   ebx,ebx
c00237c8:	0f 84 ec 00 00 00    	je     c00238ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00237ce:	51                   	push   ecx
c00237cf:	51                   	push   ecx
c00237d0:	52                   	push   edx
c00237d1:	50                   	push   eax
c00237d2:	e8 99 e9 ff ff       	call   c0022170 <IDE::waitInterrupt(unsigned char)>
c00237d7:	83 c4 10             	add    esp,0x10
c00237da:	84 c0                	test   al,al
c00237dc:	0f 84 d4 fe ff ff    	je     c00236b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00237e2:	56                   	push   esi
c00237e3:	56                   	push   esi
c00237e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237eb:	50                   	push   eax
c00237ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237f2:	e8 e5 e7 ff ff       	call   c0021fdc <IDE::prepareInterrupt(unsigned char)>
c00237f7:	83 c4 0c             	add    esp,0xc
c00237fa:	6a 04                	push   0x4
c00237fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023803:	50                   	push   eax
c0023804:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002380a:	e8 b3 e8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c002380f:	83 c4 0c             	add    esp,0xc
c0023812:	89 c6                	mov    esi,eax
c0023814:	6a 05                	push   0x5
c0023816:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002381d:	50                   	push   eax
c002381e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023824:	e8 99 e8 ff ff       	call   c00220c2 <IDE::read(unsigned char, unsigned char)>
c0023829:	89 f1                	mov    ecx,esi
c002382b:	0f b6 c0             	movzx  eax,al
c002382e:	0f b6 f1             	movzx  esi,cl
c0023831:	c1 e0 08             	shl    eax,0x8
c0023834:	09 c6                	or     esi,eax
c0023836:	d1 fe                	sar    esi,1
c0023838:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002383c:	83 c4 10             	add    esp,0x10
c002383f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023844:	74 41                	je     c0023887 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023846:	31 c9                	xor    ecx,ecx
c0023848:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002384e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023855:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023859:	75 0a                	jne    c0023865 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002385b:	01 c9                	add    ecx,ecx
c002385d:	01 cd                	add    ebp,ecx
c002385f:	4b                   	dec    ebx
c0023860:	e9 54 ff ff ff       	jmp    c00237b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023865:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002386a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002386e:	51                   	push   ecx
c002386f:	51                   	push   ecx
c0023870:	52                   	push   edx
c0023871:	50                   	push   eax
c0023872:	e8 79 e7 ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c0023877:	89 c2                	mov    edx,eax
c0023879:	89 f0                	mov    eax,esi
c002387b:	66 ef                	out    dx,ax
c002387d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023881:	83 c4 10             	add    esp,0x10
c0023884:	41                   	inc    ecx
c0023885:	eb c1                	jmp    c0023848 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023887:	31 f6                	xor    esi,esi
c0023889:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002388f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023896:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002389a:	75 06                	jne    c00238a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002389c:	01 f6                	add    esi,esi
c002389e:	01 f5                	add    ebp,esi
c00238a0:	eb bd                	jmp    c002385f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00238a2:	51                   	push   ecx
c00238a3:	51                   	push   ecx
c00238a4:	52                   	push   edx
c00238a5:	50                   	push   eax
c00238a6:	e8 45 e7 ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c00238ab:	89 c2                	mov    edx,eax
c00238ad:	66 ed                	in     ax,dx
c00238af:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00238b4:	83 c4 10             	add    esp,0x10
c00238b7:	46                   	inc    esi
c00238b8:	eb cf                	jmp    c0023889 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00238ba:	51                   	push   ecx
c00238bb:	51                   	push   ecx
c00238bc:	52                   	push   edx
c00238bd:	50                   	push   eax
c00238be:	e8 ad e8 ff ff       	call   c0022170 <IDE::waitInterrupt(unsigned char)>
c00238c3:	83 c4 10             	add    esp,0x10
c00238c6:	84 c0                	test   al,al
c00238c8:	0f 84 e8 fd ff ff    	je     c00236b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00238ce:	bb a0 86 01 00       	mov    ebx,0x186a0
c00238d3:	52                   	push   edx
c00238d4:	52                   	push   edx
c00238d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238dc:	50                   	push   eax
c00238dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238e3:	e8 f4 e6 ff ff       	call   c0021fdc <IDE::prepareInterrupt(unsigned char)>
c00238e8:	83 c4 10             	add    esp,0x10
c00238eb:	50                   	push   eax
c00238ec:	50                   	push   eax
c00238ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238f4:	50                   	push   eax
c00238f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238fb:	e8 f0 e6 ff ff       	call   c0021ff0 <IDE::getBase(unsigned char)>
c0023900:	8d 50 07             	lea    edx,[eax+0x7]
c0023903:	ec                   	in     al,dx
c0023904:	83 c4 10             	add    esp,0x10
c0023907:	a8 88                	test   al,0x88
c0023909:	74 0a                	je     c0023915 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002390b:	4b                   	dec    ebx
c002390c:	75 dd                	jne    c00238eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002390e:	bb 02 00 00 00       	mov    ebx,0x2
c0023913:	eb 02                	jmp    c0023917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023915:	31 db                	xor    ebx,ebx
c0023917:	83 c4 1c             	add    esp,0x1c
c002391a:	89 d8                	mov    eax,ebx
c002391c:	5b                   	pop    ebx
c002391d:	5e                   	pop    esi
c002391e:	5f                   	pop    edi
c002391f:	5d                   	pop    ebp
c0023920:	c3                   	ret    
c0023921:	90                   	nop

c0023922 <ATAPI::diskRemoved()>:
c0023922:	83 ec 18             	sub    esp,0x18
c0023925:	68 5f b4 02 c0       	push   0xc002b45f
c002392a:	e8 fe ee fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c002392f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023933:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002393a:	83 c4 1c             	add    esp,0x1c
c002393d:	c3                   	ret    

c002393e <ATAPI::eject()>:
c002393e:	57                   	push   edi
c002393f:	b9 03 00 00 00       	mov    ecx,0x3
c0023944:	53                   	push   ebx
c0023945:	83 ec 14             	sub    esp,0x14
c0023948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002394c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023950:	fc                   	cld    
c0023951:	31 c0                	xor    eax,eax
c0023953:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023955:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002395a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002395f:	50                   	push   eax
c0023960:	50                   	push   eax
c0023961:	6a 00                	push   0x0
c0023963:	6a 00                	push   0x0
c0023965:	6a 00                	push   0x0
c0023967:	6a 02                	push   0x2
c0023969:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002396d:	50                   	push   eax
c002396e:	53                   	push   ebx
c002396f:	e8 ee fc ff ff       	call   c0023662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023974:	83 c4 14             	add    esp,0x14
c0023977:	53                   	push   ebx
c0023978:	e8 a5 ff ff ff       	call   c0023922 <ATAPI::diskRemoved()>
c002397d:	83 c4 24             	add    esp,0x24
c0023980:	5b                   	pop    ebx
c0023981:	5f                   	pop    edi
c0023982:	c3                   	ret    
c0023983:	90                   	nop

c0023984 <ATAPI::diskInserted()>:
c0023984:	53                   	push   ebx
c0023985:	83 ec 14             	sub    esp,0x14
c0023988:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002398c:	68 75 b4 02 c0       	push   0xc002b475
c0023991:	e8 97 ee fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0023996:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002399d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239a0:	e8 ef 06 ff ff       	call   c0014094 <PhysicalDisk::startCache()>
c00239a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00239a9:	83 c4 18             	add    esp,0x18
c00239ac:	5b                   	pop    ebx
c00239ad:	e9 0c 27 ff ff       	jmp    c00160be <createPartitionsForDisk(PhysicalDisk*)>

c00239b2 <ATAPI::detectMedia()>:
c00239b2:	56                   	push   esi
c00239b3:	53                   	push   ebx
c00239b4:	83 ec 28             	sub    esp,0x28
c00239b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239bb:	6a 0c                	push   0xc
c00239bd:	6a 00                	push   0x0
c00239bf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00239c3:	56                   	push   esi
c00239c4:	e8 c2 cc fd ff       	call   c000068b <memset>
c00239c9:	58                   	pop    eax
c00239ca:	5a                   	pop    edx
c00239cb:	6a 00                	push   0x0
c00239cd:	6a 00                	push   0x0
c00239cf:	6a 00                	push   0x0
c00239d1:	6a 00                	push   0x0
c00239d3:	56                   	push   esi
c00239d4:	53                   	push   ebx
c00239d5:	e8 88 fc ff ff       	call   c0023662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00239da:	83 c4 1c             	add    esp,0x1c
c00239dd:	6a 0c                	push   0xc
c00239df:	6a 00                	push   0x0
c00239e1:	56                   	push   esi
c00239e2:	e8 a4 cc fd ff       	call   c000068b <memset>
c00239e7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00239ec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00239f1:	59                   	pop    ecx
c00239f2:	58                   	pop    eax
c00239f3:	6a 01                	push   0x1
c00239f5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00239f9:	50                   	push   eax
c00239fa:	6a 00                	push   0x0
c00239fc:	6a 12                	push   0x12
c00239fe:	56                   	push   esi
c00239ff:	53                   	push   ebx
c0023a00:	e8 5d fc ff ff       	call   c0023662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023a05:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023a09:	83 c4 20             	add    esp,0x20
c0023a0c:	83 e0 7f             	and    eax,0x7f
c0023a0f:	3c 70                	cmp    al,0x70
c0023a11:	74 15                	je     c0023a28 <ATAPI::detectMedia()+0x76>
c0023a13:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023a1a:	75 0c                	jne    c0023a28 <ATAPI::detectMedia()+0x76>
c0023a1c:	83 ec 0c             	sub    esp,0xc
c0023a1f:	53                   	push   ebx
c0023a20:	e8 5f ff ff ff       	call   c0023984 <ATAPI::diskInserted()>
c0023a25:	83 c4 10             	add    esp,0x10
c0023a28:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023a2c:	83 e0 0f             	and    eax,0xf
c0023a2f:	3c 02                	cmp    al,0x2
c0023a31:	75 1b                	jne    c0023a4e <ATAPI::detectMedia()+0x9c>
c0023a33:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023a38:	75 2d                	jne    c0023a67 <ATAPI::detectMedia()+0xb5>
c0023a3a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023a41:	74 24                	je     c0023a67 <ATAPI::detectMedia()+0xb5>
c0023a43:	83 ec 0c             	sub    esp,0xc
c0023a46:	53                   	push   ebx
c0023a47:	e8 d6 fe ff ff       	call   c0023922 <ATAPI::diskRemoved()>
c0023a4c:	eb 16                	jmp    c0023a64 <ATAPI::detectMedia()+0xb2>
c0023a4e:	84 c0                	test   al,al
c0023a50:	75 15                	jne    c0023a67 <ATAPI::detectMedia()+0xb5>
c0023a52:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023a59:	75 0c                	jne    c0023a67 <ATAPI::detectMedia()+0xb5>
c0023a5b:	83 ec 0c             	sub    esp,0xc
c0023a5e:	53                   	push   ebx
c0023a5f:	e8 20 ff ff ff       	call   c0023984 <ATAPI::diskInserted()>
c0023a64:	83 c4 10             	add    esp,0x10
c0023a67:	83 c4 24             	add    esp,0x24
c0023a6a:	5b                   	pop    ebx
c0023a6b:	5e                   	pop    esi
c0023a6c:	c3                   	ret    
c0023a6d:	90                   	nop

c0023a6e <ATAPI::open(int, int, void*)>:
c0023a6e:	53                   	push   ebx
c0023a6f:	83 ec 08             	sub    esp,0x8
c0023a72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a7e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023a84:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023a8a:	c1 e0 06             	shl    eax,0x6
c0023a8d:	01 d0                	add    eax,edx
c0023a8f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023a96:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023a9c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023aa3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023aad:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023ab3:	6a 04                	push   0x4
c0023ab5:	6a 0c                	push   0xc
c0023ab7:	51                   	push   ecx
c0023ab8:	52                   	push   edx
c0023ab9:	e8 44 e5 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023abe:	90                   	nop
c0023abf:	90                   	nop
c0023ac0:	6a 00                	push   0x0
c0023ac2:	6a 0c                	push   0xc
c0023ac4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023acb:	50                   	push   eax
c0023acc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ad2:	e8 2b e5 ff ff       	call   c0022002 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ad7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023ade:	83 c4 14             	add    esp,0x14
c0023ae1:	53                   	push   ebx
c0023ae2:	e8 cb fe ff ff       	call   c00239b2 <ATAPI::detectMedia()>
c0023ae7:	31 c0                	xor    eax,eax
c0023ae9:	83 c4 18             	add    esp,0x18
c0023aec:	5b                   	pop    ebx
c0023aed:	c3                   	ret    

c0023aee <ATAPI::read(unsigned long long, int, void*)>:
c0023aee:	55                   	push   ebp
c0023aef:	57                   	push   edi
c0023af0:	56                   	push   esi
c0023af1:	53                   	push   ebx
c0023af2:	83 ec 1c             	sub    esp,0x1c
c0023af5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023af9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023afd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023b01:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023b08:	74 41                	je     c0023b4b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023b0a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023b0e:	b9 03 00 00 00       	mov    ecx,0x3
c0023b13:	fc                   	cld    
c0023b14:	31 c0                	xor    eax,eax
c0023b16:	86 fb                	xchg   bl,bh
c0023b18:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023b1a:	c1 c3 10             	rol    ebx,0x10
c0023b1d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023b22:	89 e8                	mov    eax,ebp
c0023b24:	86 fb                	xchg   bl,bh
c0023b26:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023b2a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023b2e:	50                   	push   eax
c0023b2f:	50                   	push   eax
c0023b30:	55                   	push   ebp
c0023b31:	c1 e5 0b             	shl    ebp,0xb
c0023b34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023b38:	6a 00                	push   0x0
c0023b3a:	55                   	push   ebp
c0023b3b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023b3f:	50                   	push   eax
c0023b40:	56                   	push   esi
c0023b41:	e8 1c fb ff ff       	call   c0023662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023b46:	83 c4 20             	add    esp,0x20
c0023b49:	eb 1a                	jmp    c0023b65 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023b4b:	83 ec 0c             	sub    esp,0xc
c0023b4e:	56                   	push   esi
c0023b4f:	e8 5e fe ff ff       	call   c00239b2 <ATAPI::detectMedia()>
c0023b54:	83 c4 10             	add    esp,0x10
c0023b57:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023b5e:	75 aa                	jne    c0023b0a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023b60:	b8 02 00 00 00       	mov    eax,0x2
c0023b65:	83 c4 1c             	add    esp,0x1c
c0023b68:	5b                   	pop    ebx
c0023b69:	5e                   	pop    esi
c0023b6a:	5f                   	pop    edi
c0023b6b:	5d                   	pop    ebp
c0023b6c:	c3                   	ret    
c0023b6d:	90                   	nop

c0023b6e <SATA::close(int, int, void*)>:
c0023b6e:	83 ec 0c             	sub    esp,0xc
c0023b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b75:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b7b:	85 c0                	test   eax,eax
c0023b7d:	74 0c                	je     c0023b8b <SATA::close(int, int, void*)+0x1d>
c0023b7f:	83 ec 0c             	sub    esp,0xc
c0023b82:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b84:	50                   	push   eax
c0023b85:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b88:	83 c4 10             	add    esp,0x10
c0023b8b:	31 c0                	xor    eax,eax
c0023b8d:	83 c4 0c             	add    esp,0xc
c0023b90:	c3                   	ret    
c0023b91:	90                   	nop

c0023b92 <SATA::powerSaving(PowerSavingLevel)>:
c0023b92:	c3                   	ret    
c0023b93:	90                   	nop

c0023b94 <SATA::open(int, int, void*)>:
c0023b94:	53                   	push   ebx
c0023b95:	83 ec 14             	sub    esp,0x14
c0023b98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023b9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ba0:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023baa:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023bb0:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023bbe:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023bc8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023bce:	68 c0 b4 02 c0       	push   0xc002b4c0
c0023bd3:	e8 55 ec fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0023bd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023bdb:	e8 b4 04 ff ff       	call   c0014094 <PhysicalDisk::startCache()>
c0023be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023be3:	e8 d6 24 ff ff       	call   c00160be <createPartitionsForDisk(PhysicalDisk*)>
c0023be8:	31 c0                	xor    eax,eax
c0023bea:	83 c4 18             	add    esp,0x18
c0023bed:	5b                   	pop    ebx
c0023bee:	c3                   	ret    
c0023bef:	90                   	nop

c0023bf0 <SATA::SATA()>:
c0023bf0:	83 ec 0c             	sub    esp,0xc
c0023bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf7:	83 ec 04             	sub    esp,0x4
c0023bfa:	68 00 02 00 00       	push   0x200
c0023bff:	68 db b4 02 c0       	push   0xc002b4db
c0023c04:	50                   	push   eax
c0023c05:	e8 22 04 ff ff       	call   c001402c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c0a:	83 c4 10             	add    esp,0x10
c0023c0d:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c0023c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c16:	89 10                	mov    DWORD PTR [eax],edx
c0023c18:	90                   	nop
c0023c19:	83 c4 0c             	add    esp,0xc
c0023c1c:	c3                   	ret    
c0023c1d:	90                   	nop

c0023c1e <SATA::access(unsigned long long, int, void*, bool)>:
c0023c1e:	55                   	push   ebp
c0023c1f:	57                   	push   edi
c0023c20:	56                   	push   esi
c0023c21:	53                   	push   ebx
c0023c22:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023c28:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023c2f:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023c36:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023c3d:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023c44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c48:	83 ff 08             	cmp    edi,0x8
c0023c4b:	7e 10                	jle    c0023c5d <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023c4d:	83 ec 0c             	sub    esp,0xc
c0023c50:	68 eb b4 02 c0       	push   0xc002b4eb
c0023c55:	e8 ed 5c ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0023c5a:	83 c4 10             	add    esp,0x10
c0023c5d:	51                   	push   ecx
c0023c5e:	68 00 02 00 00       	push   0x200
c0023c63:	68 ee 00 00 00       	push   0xee
c0023c68:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023c6c:	55                   	push   ebp
c0023c6d:	e8 19 ca fd ff       	call   c000068b <memset>
c0023c72:	83 c4 0c             	add    esp,0xc
c0023c75:	68 00 02 00 00       	push   0x200
c0023c7a:	68 ee 00 00 00       	push   0xee
c0023c7f:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023c86:	50                   	push   eax
c0023c87:	e8 ff c9 fd ff       	call   c000068b <memset>
c0023c8c:	55                   	push   ebp
c0023c8d:	57                   	push   edi
c0023c8e:	56                   	push   esi
c0023c8f:	68 1d b5 02 c0       	push   0xc002b51d
c0023c94:	e8 94 eb fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0023c99:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ca5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023ca9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023caf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023cb3:	c1 e0 07             	shl    eax,0x7
c0023cb6:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023cba:	83 c4 18             	add    esp,0x18
c0023cbd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0023cce:	c1 e2 07             	shl    edx,0x7
c0023cd1:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023cd5:	52                   	push   edx
c0023cd6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023cda:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023ce0:	e8 e1 ef ff ff       	call   c0022cc6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023ce5:	89 c1                	mov    ecx,eax
c0023ce7:	58                   	pop    eax
c0023ce8:	5a                   	pop    edx
c0023ce9:	51                   	push   ecx
c0023cea:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023cee:	68 52 b5 02 c0       	push   0xc002b552
c0023cf3:	e8 35 eb fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0023cf8:	83 c4 10             	add    esp,0x10
c0023cfb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023cff:	83 f9 ff             	cmp    ecx,0xffffffff
c0023d02:	0f 84 9a 01 00 00    	je     c0023ea2 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023d08:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023d0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d12:	8b 12                	mov    edx,DWORD PTR [edx]
c0023d14:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023d1a:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023d20:	89 c8                	mov    eax,ecx
c0023d22:	c1 e0 05             	shl    eax,0x5
c0023d25:	01 c2                	add    edx,eax
c0023d27:	8a 02                	mov    al,BYTE PTR [edx]
c0023d29:	83 e0 a0             	and    eax,0xffffffa0
c0023d2c:	83 c8 05             	or     eax,0x5
c0023d2f:	88 02                	mov    BYTE PTR [edx],al
c0023d31:	8d 47 ff             	lea    eax,[edi-0x1]
c0023d34:	c1 f8 04             	sar    eax,0x4
c0023d37:	40                   	inc    eax
c0023d38:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023d3c:	0f b7 c0             	movzx  eax,ax
c0023d3f:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023d45:	83 c0 08             	add    eax,0x8
c0023d48:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023d4e:	c1 e0 04             	shl    eax,0x4
c0023d51:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023d57:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023d5a:	01 cb                	add    ebx,ecx
c0023d5c:	52                   	push   edx
c0023d5d:	50                   	push   eax
c0023d5e:	6a 00                	push   0x0
c0023d60:	53                   	push   ebx
c0023d61:	e8 25 c9 fd ff       	call   c000068b <memset>
c0023d66:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023d6c:	83 c4 10             	add    esp,0x10
c0023d6f:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023d75:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023d7a:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023d81:	0d ff 01 00 80       	or     eax,0x800001ff
c0023d86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023d8a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023d90:	b8 01 00 00 00       	mov    eax,0x1
c0023d95:	89 c2                	mov    edx,eax
c0023d97:	c1 e2 04             	shl    edx,0x4
c0023d9a:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023da1:	8d 50 08             	lea    edx,[eax+0x8]
c0023da4:	40                   	inc    eax
c0023da5:	c1 e2 04             	shl    edx,0x4
c0023da8:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023db0:	83 f8 10             	cmp    eax,0x10
c0023db3:	75 e0                	jne    c0023d95 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023db5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023db8:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023dbc:	66 25 00 7f          	and    ax,0x7f00
c0023dc0:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023dc4:	66 0d 27 80          	or     ax,0x8027
c0023dc8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023dcc:	66 89 03             	mov    WORD PTR [ebx],ax
c0023dcf:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023dd3:	89 f0                	mov    eax,esi
c0023dd5:	31 d2                	xor    edx,edx
c0023dd7:	c1 e8 10             	shr    eax,0x10
c0023dda:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023ddd:	89 f0                	mov    eax,esi
c0023ddf:	c1 e8 18             	shr    eax,0x18
c0023de2:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023de5:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023de9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023dec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023df0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023df7:	c1 e0 07             	shl    eax,0x7
c0023dfa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023dfe:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023e04:	80 e3 88             	and    bl,0x88
c0023e07:	74 0b                	je     c0023e14 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023e09:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023e0f:	74 0b                	je     c0023e1c <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023e11:	42                   	inc    edx
c0023e12:	eb ea                	jmp    c0023dfe <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023e14:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023e1a:	75 0a                	jne    c0023e26 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023e1c:	83 ec 0c             	sub    esp,0xc
c0023e1f:	68 5b b5 02 c0       	push   0xc002b55b
c0023e24:	eb 60                	jmp    c0023e86 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023e26:	be 01 00 00 00       	mov    esi,0x1
c0023e2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e2f:	d3 e6                	shl    esi,cl
c0023e31:	c1 e3 07             	shl    ebx,0x7
c0023e34:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023e3a:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023e3e:	83 ec 0c             	sub    esp,0xc
c0023e41:	68 69 b5 02 c0       	push   0xc002b569
c0023e46:	e8 e2 e9 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0023e4b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023e51:	83 c4 10             	add    esp,0x10
c0023e54:	85 c6                	test   esi,eax
c0023e56:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023e5c:	74 1a                	je     c0023e78 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023e5e:	0f ba e0 1e          	bt     eax,0x1e
c0023e62:	73 da                	jae    c0023e3e <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023e64:	83 ec 0c             	sub    esp,0xc
c0023e67:	68 76 b5 02 c0       	push   0xc002b576
c0023e6c:	e8 d6 5a ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0023e71:	83 c4 10             	add    esp,0x10
c0023e74:	31 c0                	xor    eax,eax
c0023e76:	eb 2f                	jmp    c0023ea7 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023e78:	0f ba e0 1e          	bt     eax,0x1e
c0023e7c:	73 12                	jae    c0023e90 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023e7e:	83 ec 0c             	sub    esp,0xc
c0023e81:	68 76 b5 02 c0       	push   0xc002b576
c0023e86:	e8 bc 5a ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0023e8b:	83 c4 10             	add    esp,0x10
c0023e8e:	eb 12                	jmp    c0023ea2 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023e90:	83 ec 0c             	sub    esp,0xc
c0023e93:	68 87 b5 02 c0       	push   0xc002b587
c0023e98:	e8 aa 5a ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0023e9d:	83 c4 10             	add    esp,0x10
c0023ea0:	eb fe                	jmp    c0023ea0 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023ea2:	b8 01 00 00 00       	mov    eax,0x1
c0023ea7:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023ead:	5b                   	pop    ebx
c0023eae:	5e                   	pop    esi
c0023eaf:	5f                   	pop    edi
c0023eb0:	5d                   	pop    ebp
c0023eb1:	c3                   	ret    

c0023eb2 <SATA::read(unsigned long long, int, void*)>:
c0023eb2:	57                   	push   edi
c0023eb3:	b8 04 00 00 00       	mov    eax,0x4
c0023eb8:	56                   	push   esi
c0023eb9:	53                   	push   ebx
c0023eba:	83 ec 10             	sub    esp,0x10
c0023ebd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023ec1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023ec5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023ec8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023ecc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ed0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023ed6:	77 3b                	ja     c0023f13 <SATA::read(unsigned long long, int, void*)+0x61>
c0023ed8:	b8 06 00 00 00       	mov    eax,0x6
c0023edd:	85 d2                	test   edx,edx
c0023edf:	74 32                	je     c0023f13 <SATA::read(unsigned long long, int, void*)+0x61>
c0023ee1:	50                   	push   eax
c0023ee2:	50                   	push   eax
c0023ee3:	6a 00                	push   0x0
c0023ee5:	52                   	push   edx
c0023ee6:	53                   	push   ebx
c0023ee7:	57                   	push   edi
c0023ee8:	56                   	push   esi
c0023ee9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023eed:	e8 2c fd ff ff       	call   c0023c1e <SATA::access(unsigned long long, int, void*, bool)>
c0023ef2:	83 c4 20             	add    esp,0x20
c0023ef5:	85 c0                	test   eax,eax
c0023ef7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023efb:	75 11                	jne    c0023f0e <SATA::read(unsigned long long, int, void*)+0x5c>
c0023efd:	01 1d 48 ed 02 c0    	add    DWORD PTR ds:0xc002ed48,ebx
c0023f03:	e8 12 c7 fe ff       	call   c001061a <VgaText::updateDiskUsage()>
c0023f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f0c:	eb 05                	jmp    c0023f13 <SATA::read(unsigned long long, int, void*)+0x61>
c0023f0e:	b8 01 00 00 00       	mov    eax,0x1
c0023f13:	83 c4 10             	add    esp,0x10
c0023f16:	5b                   	pop    ebx
c0023f17:	5e                   	pop    esi
c0023f18:	5f                   	pop    edi
c0023f19:	c3                   	ret    

c0023f1a <SATA::write(unsigned long long, int, void*)>:
c0023f1a:	57                   	push   edi
c0023f1b:	b8 04 00 00 00       	mov    eax,0x4
c0023f20:	56                   	push   esi
c0023f21:	53                   	push   ebx
c0023f22:	83 ec 10             	sub    esp,0x10
c0023f25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023f29:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023f2d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023f30:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023f34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023f38:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023f3e:	77 3b                	ja     c0023f7b <SATA::write(unsigned long long, int, void*)+0x61>
c0023f40:	b8 06 00 00 00       	mov    eax,0x6
c0023f45:	85 d2                	test   edx,edx
c0023f47:	74 32                	je     c0023f7b <SATA::write(unsigned long long, int, void*)+0x61>
c0023f49:	50                   	push   eax
c0023f4a:	50                   	push   eax
c0023f4b:	6a 01                	push   0x1
c0023f4d:	52                   	push   edx
c0023f4e:	53                   	push   ebx
c0023f4f:	57                   	push   edi
c0023f50:	56                   	push   esi
c0023f51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023f55:	e8 c4 fc ff ff       	call   c0023c1e <SATA::access(unsigned long long, int, void*, bool)>
c0023f5a:	83 c4 20             	add    esp,0x20
c0023f5d:	85 c0                	test   eax,eax
c0023f5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f63:	75 11                	jne    c0023f76 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023f65:	01 1d 44 ed 02 c0    	add    DWORD PTR ds:0xc002ed44,ebx
c0023f6b:	e8 aa c6 fe ff       	call   c001061a <VgaText::updateDiskUsage()>
c0023f70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f74:	eb 05                	jmp    c0023f7b <SATA::write(unsigned long long, int, void*)+0x61>
c0023f76:	b8 01 00 00 00       	mov    eax,0x1
c0023f7b:	83 c4 10             	add    esp,0x10
c0023f7e:	5b                   	pop    ebx
c0023f7f:	5e                   	pop    esi
c0023f80:	5f                   	pop    edi
c0023f81:	c3                   	ret    

c0023f82 <AVX::open(int, int, void*)>:
c0023f82:	83 ec 0c             	sub    esp,0xc
c0023f85:	e8 3e 11 00 00       	call   c00250c8 <avxInit>
c0023f8a:	b8 00 00 00 00       	mov    eax,0x0
c0023f8f:	83 c4 0c             	add    esp,0xc
c0023f92:	c3                   	ret    
c0023f93:	90                   	nop

c0023f94 <AVX::close(int, int, void*)>:
c0023f94:	83 ec 0c             	sub    esp,0xc
c0023f97:	e8 2d 11 00 00       	call   c00250c9 <avxClose>
c0023f9c:	b8 00 00 00 00       	mov    eax,0x0
c0023fa1:	83 c4 0c             	add    esp,0xc
c0023fa4:	c3                   	ret    
c0023fa5:	90                   	nop

c0023fa6 <AVX::available()>:
c0023fa6:	83 ec 0c             	sub    esp,0xc
c0023fa9:	e8 12 11 00 00       	call   c00250c0 <avxDetect>
c0023fae:	85 c0                	test   eax,eax
c0023fb0:	0f 95 c0             	setne  al
c0023fb3:	83 c4 0c             	add    esp,0xc
c0023fb6:	c3                   	ret    
c0023fb7:	90                   	nop

c0023fb8 <AVX::save(void*)>:
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fbf:	83 ec 0c             	sub    esp,0xc
c0023fc2:	50                   	push   eax
c0023fc3:	e8 fe 10 00 00       	call   c00250c6 <avxSave>
c0023fc8:	83 c4 10             	add    esp,0x10
c0023fcb:	90                   	nop
c0023fcc:	83 c4 0c             	add    esp,0xc
c0023fcf:	c3                   	ret    

c0023fd0 <AVX::load(void*)>:
c0023fd0:	83 ec 0c             	sub    esp,0xc
c0023fd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fd7:	83 ec 0c             	sub    esp,0xc
c0023fda:	50                   	push   eax
c0023fdb:	e8 e7 10 00 00       	call   c00250c7 <avxLoad>
c0023fe0:	83 c4 10             	add    esp,0x10
c0023fe3:	90                   	nop
c0023fe4:	83 c4 0c             	add    esp,0xc
c0023fe7:	c3                   	ret    

c0023fe8 <AVX::AVX()>:
c0023fe8:	83 ec 0c             	sub    esp,0xc
c0023feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fef:	83 ec 08             	sub    esp,0x8
c0023ff2:	68 e4 b5 02 c0       	push   0xc002b5e4
c0023ff7:	50                   	push   eax
c0023ff8:	e8 0d 01 ff ff       	call   c001410a <FPU::FPU(char const*)>
c0023ffd:	83 c4 10             	add    esp,0x10
c0024000:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c0024005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024009:	89 10                	mov    DWORD PTR [eax],edx
c002400b:	90                   	nop
c002400c:	83 c4 0c             	add    esp,0xc
c002400f:	c3                   	ret    

c0024010 <MMX::available()>:
c0024010:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0024015:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002401b:	83 e0 20             	and    eax,0x20
c002401e:	84 c0                	test   al,al
c0024020:	0f 95 c0             	setne  al
c0024023:	c3                   	ret    

c0024024 <MMX::open(int, int, void*)>:
c0024024:	83 ec 0c             	sub    esp,0xc
c0024027:	e8 20 11 00 00       	call   c002514c <x87Init>
c002402c:	b8 00 00 00 00       	mov    eax,0x0
c0024031:	83 c4 0c             	add    esp,0xc
c0024034:	c3                   	ret    
c0024035:	90                   	nop

c0024036 <MMX::close(int, int, void*)>:
c0024036:	83 ec 0c             	sub    esp,0xc
c0024039:	e8 28 11 00 00       	call   c0025166 <x87Close>
c002403e:	b8 00 00 00 00       	mov    eax,0x0
c0024043:	83 c4 0c             	add    esp,0xc
c0024046:	c3                   	ret    
c0024047:	90                   	nop

c0024048 <MMX::save(void*)>:
c0024048:	83 ec 0c             	sub    esp,0xc
c002404b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002404f:	83 ec 0c             	sub    esp,0xc
c0024052:	50                   	push   eax
c0024053:	e8 e9 10 00 00       	call   c0025141 <x87Save>
c0024058:	83 c4 10             	add    esp,0x10
c002405b:	90                   	nop
c002405c:	83 c4 0c             	add    esp,0xc
c002405f:	c3                   	ret    

c0024060 <MMX::load(void*)>:
c0024060:	83 ec 0c             	sub    esp,0xc
c0024063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024067:	83 ec 0c             	sub    esp,0xc
c002406a:	50                   	push   eax
c002406b:	e8 d7 10 00 00       	call   c0025147 <x87Load>
c0024070:	83 c4 10             	add    esp,0x10
c0024073:	90                   	nop
c0024074:	83 c4 0c             	add    esp,0xc
c0024077:	c3                   	ret    

c0024078 <MMX::MMX()>:
c0024078:	83 ec 0c             	sub    esp,0xc
c002407b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002407f:	83 ec 08             	sub    esp,0x8
c0024082:	68 24 b6 02 c0       	push   0xc002b624
c0024087:	50                   	push   eax
c0024088:	e8 7d 00 ff ff       	call   c001410a <FPU::FPU(char const*)>
c002408d:	83 c4 10             	add    esp,0x10
c0024090:	ba 34 b6 02 c0       	mov    edx,0xc002b634
c0024095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024099:	89 10                	mov    DWORD PTR [eax],edx
c002409b:	90                   	nop
c002409c:	83 c4 0c             	add    esp,0xc
c002409f:	c3                   	ret    

c00240a0 <SSE::open(int, int, void*)>:
c00240a0:	83 ec 0c             	sub    esp,0xc
c00240a3:	e8 5c 10 00 00       	call   c0025104 <sseInit>
c00240a8:	b8 00 00 00 00       	mov    eax,0x0
c00240ad:	83 c4 0c             	add    esp,0xc
c00240b0:	c3                   	ret    
c00240b1:	90                   	nop

c00240b2 <SSE::close(int, int, void*)>:
c00240b2:	83 ec 0c             	sub    esp,0xc
c00240b5:	e8 5a 10 00 00       	call   c0025114 <sseClose>
c00240ba:	b8 00 00 00 00       	mov    eax,0x0
c00240bf:	83 c4 0c             	add    esp,0xc
c00240c2:	c3                   	ret    
c00240c3:	90                   	nop

c00240c4 <SSE::available()>:
c00240c4:	83 ec 1c             	sub    esp,0x1c
c00240c7:	e8 14 10 00 00       	call   c00250e0 <absolutelyNoChanceInHell>
c00240cc:	85 c0                	test   eax,eax
c00240ce:	0f 95 c0             	setne  al
c00240d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00240d9:	83 c4 1c             	add    esp,0x1c
c00240dc:	c3                   	ret    
c00240dd:	90                   	nop

c00240de <SSE::save(void*)>:
c00240de:	83 ec 0c             	sub    esp,0xc
c00240e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240e5:	83 ec 0c             	sub    esp,0xc
c00240e8:	50                   	push   eax
c00240e9:	e8 0a 10 00 00       	call   c00250f8 <sseSave>
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	90                   	nop
c00240f2:	83 c4 0c             	add    esp,0xc
c00240f5:	c3                   	ret    

c00240f6 <SSE::load(void*)>:
c00240f6:	83 ec 0c             	sub    esp,0xc
c00240f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240fd:	83 ec 0c             	sub    esp,0xc
c0024100:	50                   	push   eax
c0024101:	e8 f8 0f 00 00       	call   c00250fe <sseLoad>
c0024106:	83 c4 10             	add    esp,0x10
c0024109:	90                   	nop
c002410a:	83 c4 0c             	add    esp,0xc
c002410d:	c3                   	ret    

c002410e <SSE::SSE()>:
c002410e:	83 ec 0c             	sub    esp,0xc
c0024111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024115:	83 ec 08             	sub    esp,0x8
c0024118:	68 64 b6 02 c0       	push   0xc002b664
c002411d:	50                   	push   eax
c002411e:	e8 e7 ff fe ff       	call   c001410a <FPU::FPU(char const*)>
c0024123:	83 c4 10             	add    esp,0x10
c0024126:	ba 74 b6 02 c0       	mov    edx,0xc002b674
c002412b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002412f:	89 10                	mov    DWORD PTR [eax],edx
c0024131:	90                   	nop
c0024132:	83 c4 0c             	add    esp,0xc
c0024135:	c3                   	ret    

c0024136 <x87::open(int, int, void*)>:
c0024136:	83 ec 0c             	sub    esp,0xc
c0024139:	e8 0e 10 00 00       	call   c002514c <x87Init>
c002413e:	b8 00 00 00 00       	mov    eax,0x0
c0024143:	83 c4 0c             	add    esp,0xc
c0024146:	c3                   	ret    
c0024147:	90                   	nop

c0024148 <x87::close(int, int, void*)>:
c0024148:	83 ec 0c             	sub    esp,0xc
c002414b:	e8 16 10 00 00       	call   c0025166 <x87Close>
c0024150:	b8 00 00 00 00       	mov    eax,0x0
c0024155:	83 c4 0c             	add    esp,0xc
c0024158:	c3                   	ret    
c0024159:	90                   	nop

c002415a <x87::available()>:
c002415a:	83 ec 0c             	sub    esp,0xc
c002415d:	e8 c4 0f 00 00       	call   c0025126 <x87Detect>
c0024162:	85 c0                	test   eax,eax
c0024164:	0f 95 c0             	setne  al
c0024167:	83 c4 0c             	add    esp,0xc
c002416a:	c3                   	ret    
c002416b:	90                   	nop

c002416c <x87::save(void*)>:
c002416c:	83 ec 0c             	sub    esp,0xc
c002416f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024173:	83 ec 0c             	sub    esp,0xc
c0024176:	50                   	push   eax
c0024177:	e8 c5 0f 00 00       	call   c0025141 <x87Save>
c002417c:	83 c4 10             	add    esp,0x10
c002417f:	90                   	nop
c0024180:	83 c4 0c             	add    esp,0xc
c0024183:	c3                   	ret    

c0024184 <x87::load(void*)>:
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002418b:	83 ec 0c             	sub    esp,0xc
c002418e:	50                   	push   eax
c002418f:	e8 b3 0f 00 00       	call   c0025147 <x87Load>
c0024194:	83 c4 10             	add    esp,0x10
c0024197:	90                   	nop
c0024198:	83 c4 0c             	add    esp,0xc
c002419b:	c3                   	ret    

c002419c <x87::x87()>:
c002419c:	83 ec 0c             	sub    esp,0xc
c002419f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241a3:	83 ec 08             	sub    esp,0x8
c00241a6:	68 a4 b6 02 c0       	push   0xc002b6a4
c00241ab:	50                   	push   eax
c00241ac:	e8 59 ff fe ff       	call   c001410a <FPU::FPU(char const*)>
c00241b1:	83 c4 10             	add    esp,0x10
c00241b4:	ba b4 b6 02 c0       	mov    edx,0xc002b6b4
c00241b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241bd:	89 10                	mov    DWORD PTR [eax],edx
c00241bf:	90                   	nop
c00241c0:	83 c4 0c             	add    esp,0xc
c00241c3:	c3                   	ret    

c00241c4 <APIC::disable()>:
c00241c4:	90                   	nop
c00241c5:	c3                   	ret    

c00241c6 <APIC::close(int, int, void*)>:
c00241c6:	55                   	push   ebp
c00241c7:	89 e5                	mov    ebp,esp
c00241c9:	83 ec 08             	sub    esp,0x8
c00241cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00241d1:	83 c0 3c             	add    eax,0x3c
c00241d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00241d6:	83 ec 0c             	sub    esp,0xc
c00241d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241dc:	ff d0                	call   eax
c00241de:	83 c4 10             	add    esp,0x10
c00241e1:	b8 00 00 00 00       	mov    eax,0x0
c00241e6:	c9                   	leave  
c00241e7:	c3                   	ret    

c00241e8 <IOAPIC::close(int, int, void*)>:
c00241e8:	b8 00 00 00 00       	mov    eax,0x0
c00241ed:	c3                   	ret    

c00241ee <APIC::io_wait()>:
c00241ee:	eb 00                	jmp    c00241f0 <APIC::io_wait()+0x2>
c00241f0:	eb 00                	jmp    c00241f2 <APIC::io_wait()+0x4>
c00241f2:	90                   	nop
c00241f3:	c3                   	ret    

c00241f4 <APIC::getBase()>:
c00241f4:	55                   	push   ebp
c00241f5:	89 e5                	mov    ebp,esp
c00241f7:	83 ec 18             	sub    esp,0x18
c00241fa:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c00241ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024205:	83 e0 08             	and    eax,0x8
c0024208:	84 c0                	test   al,al
c002420a:	75 07                	jne    c0024213 <APIC::getBase()+0x1f>
c002420c:	b8 00 00 00 00       	mov    eax,0x0
c0024211:	eb 21                	jmp    c0024234 <APIC::getBase()+0x40>
c0024213:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0024218:	83 ec 08             	sub    esp,0x8
c002421b:	6a 1b                	push   0x1b
c002421d:	50                   	push   eax
c002421e:	e8 59 a8 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0024223:	83 c4 10             	add    esp,0x10
c0024226:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024229:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002422c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002422f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024234:	c9                   	leave  
c0024235:	c3                   	ret    

c0024236 <APIC::eoi(unsigned char)>:
c0024236:	55                   	push   ebp
c0024237:	89 e5                	mov    ebp,esp
c0024239:	83 ec 28             	sub    esp,0x28
c002423c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002423f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024242:	83 ec 0c             	sub    esp,0xc
c0024245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024248:	e8 a7 ff ff ff       	call   c00241f4 <APIC::getBase()>
c002424d:	83 c4 10             	add    esp,0x10
c0024250:	05 b0 00 00 00       	add    eax,0xb0
c0024255:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002425b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024261:	90                   	nop
c0024262:	c9                   	leave  
c0024263:	c3                   	ret    

c0024264 <APIC::open(int, int, void*)>:
c0024264:	55                   	push   ebp
c0024265:	89 e5                	mov    ebp,esp
c0024267:	57                   	push   edi
c0024268:	56                   	push   esi
c0024269:	53                   	push   ebx
c002426a:	83 ec 2c             	sub    esp,0x2c
c002426d:	83 ec 0c             	sub    esp,0xc
c0024270:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024273:	e8 7c ff ff ff       	call   c00241f4 <APIC::getBase()>
c0024278:	83 c4 10             	add    esp,0x10
c002427b:	89 c2                	mov    edx,eax
c002427d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024280:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024286:	0f b6 f8             	movzx  edi,al
c0024289:	89 d0                	mov    eax,edx
c002428b:	ba 00 00 00 00       	mov    edx,0x0
c0024290:	89 c1                	mov    ecx,eax
c0024292:	80 e5 ff             	and    ch,0xff
c0024295:	89 cb                	mov    ebx,ecx
c0024297:	0f b6 f2             	movzx  esi,dl
c002429a:	89 d8                	mov    eax,ebx
c002429c:	89 f2                	mov    edx,esi
c002429e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00242a1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00242a4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00242a8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00242ac:	83 e0 00             	and    eax,0x0
c00242af:	09 d0                	or     eax,edx
c00242b1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00242b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00242b8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00242be:	8d 50 01             	lea    edx,[eax+0x1]
c00242c1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00242c4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00242ca:	0f b6 d0             	movzx  edx,al
c00242cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00242d0:	83 c2 08             	add    edx,0x8
c00242d3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00242d7:	0f b6 c9             	movzx  ecx,cl
c00242da:	81 c9 00 00 01 00    	or     ecx,0x10000
c00242e0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00242e4:	83 ec 0c             	sub    esp,0xc
c00242e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242ea:	e8 05 ff ff ff       	call   c00241f4 <APIC::getBase()>
c00242ef:	83 c4 10             	add    esp,0x10
c00242f2:	05 f0 00 00 00       	add    eax,0xf0
c00242f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00242fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00242fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00242ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024302:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024309:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024310:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024313:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024316:	89 10                	mov    DWORD PTR [eax],edx
c0024318:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002431f:	a1 d0 d2 02 c0       	mov    eax,ds:0xc002d2d0
c0024324:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024327:	7d 7c                	jge    c00243a5 <APIC::open(int, int, void*)+0x141>
c0024329:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002432c:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0024333:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024336:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024339:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0024340:	c1 e8 08             	shr    eax,0x8
c0024343:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024347:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002434a:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0024351:	c1 e8 18             	shr    eax,0x18
c0024354:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024357:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002435b:	75 40                	jne    c002439d <APIC::open(int, int, void*)+0x139>
c002435d:	83 ec 0c             	sub    esp,0xc
c0024360:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024363:	e8 8c fe ff ff       	call   c00241f4 <APIC::getBase()>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002436f:	75 07                	jne    c0024378 <APIC::open(int, int, void*)+0x114>
c0024371:	ba 60 03 00 00       	mov    edx,0x360
c0024376:	eb 05                	jmp    c002437d <APIC::open(int, int, void*)+0x119>
c0024378:	ba 50 03 00 00       	mov    edx,0x350
c002437d:	01 d0                	add    eax,edx
c002437f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024382:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024385:	8b 00                	mov    eax,DWORD PTR [eax]
c0024387:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002438a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024391:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024395:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024398:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002439b:	89 10                	mov    DWORD PTR [eax],edx
c002439d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00243a0:	e9 7a ff ff ff       	jmp    c002431f <APIC::open(int, int, void*)+0xbb>
c00243a5:	b8 00 00 00 00       	mov    eax,0x0
c00243aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00243ad:	5b                   	pop    ebx
c00243ae:	5e                   	pop    esi
c00243af:	5f                   	pop    edi
c00243b0:	5d                   	pop    ebp
c00243b1:	c3                   	ret    

c00243b2 <IOAPIC::IOAPIC()>:
c00243b2:	83 ec 0c             	sub    esp,0xc
c00243b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243b9:	83 ec 08             	sub    esp,0x8
c00243bc:	68 e4 b6 02 c0       	push   0xc002b6e4
c00243c1:	50                   	push   eax
c00243c2:	e8 45 fa fe ff       	call   c0013e0c <Device::Device(char const*)>
c00243c7:	83 c4 10             	add    esp,0x10
c00243ca:	ba 0c b8 02 c0       	mov    edx,0xc002b80c
c00243cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243d3:	89 10                	mov    DWORD PTR [eax],edx
c00243d5:	90                   	nop
c00243d6:	83 c4 0c             	add    esp,0xc
c00243d9:	c3                   	ret    

c00243da <APIC::APIC()>:
c00243da:	53                   	push   ebx
c00243db:	83 ec 18             	sub    esp,0x18
c00243de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243e2:	83 ec 08             	sub    esp,0x8
c00243e5:	68 ec b6 02 c0       	push   0xc002b6ec
c00243ea:	50                   	push   eax
c00243eb:	e8 74 01 ff ff       	call   c0014564 <InterruptController::InterruptController(char const*)>
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	ba c4 b7 02 c0       	mov    edx,0xc002b7c4
c00243f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243fc:	89 10                	mov    DWORD PTR [eax],edx
c00243fe:	a0 a0 ed 02 c0       	mov    al,ds:0xc002eda0
c0024403:	83 f0 01             	xor    eax,0x1
c0024406:	84 c0                	test   al,al
c0024408:	0f 84 a1 00 00 00    	je     c00244af <APIC::APIC()+0xd5>
c002440e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024413:	a0 80 d3 02 c0       	mov    al,ds:0xc002d380
c0024418:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002441c:	0f 83 86 00 00 00    	jae    c00244a8 <APIC::APIC()+0xce>
c0024422:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002442a:	83 ec 0c             	sub    esp,0xc
c002442d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024431:	e8 9e b0 fe ff       	call   c000f4d4 <malloc>
c0024436:	83 c4 10             	add    esp,0x10
c0024439:	89 c3                	mov    ebx,eax
c002443b:	83 ec 0c             	sub    esp,0xc
c002443e:	53                   	push   ebx
c002443f:	e8 6e ff ff ff       	call   c00243b2 <IOAPIC::IOAPIC()>
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002444b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024454:	89 14 85 80 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1280],edx
c002445b:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c0024460:	40                   	inc    eax
c0024461:	a3 60 ed 02 c0       	mov    ds:0xc002ed60,eax
c0024466:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c002446b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024471:	83 ec 08             	sub    esp,0x8
c0024474:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024478:	50                   	push   eax
c0024479:	e8 9e f7 fe ff       	call   c0013c1c <Device::addChild(Device*)>
c002447e:	83 c4 10             	add    esp,0x10
c0024481:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024485:	8b 00                	mov    eax,DWORD PTR [eax]
c0024487:	83 c0 08             	add    eax,0x8
c002448a:	8b 00                	mov    eax,DWORD PTR [eax]
c002448c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024491:	6a 00                	push   0x0
c0024493:	6a 00                	push   0x0
c0024495:	52                   	push   edx
c0024496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002449a:	ff d0                	call   eax
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00244a3:	e9 6b ff ff ff       	jmp    c0024413 <APIC::APIC()+0x39>
c00244a8:	c6 05 a0 ed 02 c0 01 	mov    BYTE PTR ds:0xc002eda0,0x1
c00244af:	90                   	nop
c00244b0:	83 c4 18             	add    esp,0x18
c00244b3:	5b                   	pop    ebx
c00244b4:	c3                   	ret    
c00244b5:	90                   	nop

c00244b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00244b6:	55                   	push   ebp
c00244b7:	89 e5                	mov    ebp,esp
c00244b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244c2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00244c5:	72 1d                	jb     c00244e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00244c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244ca:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00244d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244d3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00244d9:	01 d0                	add    eax,edx
c00244db:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00244de:	73 04                	jae    c00244e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00244e0:	b0 01                	mov    al,0x1
c00244e2:	eb 02                	jmp    c00244e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00244e4:	b0 00                	mov    al,0x0
c00244e6:	5d                   	pop    ebp
c00244e7:	c3                   	ret    

c00244e8 <IOAPIC::read(int)>:
c00244e8:	55                   	push   ebp
c00244e9:	89 e5                	mov    ebp,esp
c00244eb:	83 ec 10             	sub    esp,0x10
c00244ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00244fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244fd:	0f b6 d0             	movzx  edx,al
c0024500:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024503:	89 10                	mov    DWORD PTR [eax],edx
c0024505:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024508:	83 c0 10             	add    eax,0x10
c002450b:	8b 00                	mov    eax,DWORD PTR [eax]
c002450d:	c9                   	leave  
c002450e:	c3                   	ret    
c002450f:	90                   	nop

c0024510 <IOAPIC::open(int, int, void*)>:
c0024510:	55                   	push   ebp
c0024511:	89 e5                	mov    ebp,esp
c0024513:	57                   	push   edi
c0024514:	56                   	push   esi
c0024515:	53                   	push   ebx
c0024516:	83 ec 0c             	sub    esp,0xc
c0024519:	83 ec 0c             	sub    esp,0xc
c002451c:	68 17 b7 02 c0       	push   0xc002b717
c0024521:	e8 07 e3 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c0024526:	83 c4 10             	add    esp,0x10
c0024529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002452c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002452f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024538:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002453e:	8b 14 85 c0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c40]
c0024545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024548:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002454e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024551:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024557:	8b 14 85 40 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2bc0]
c002455e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024561:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002456a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024573:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024579:	0f b6 f8             	movzx  edi,al
c002457c:	89 d0                	mov    eax,edx
c002457e:	ba 00 00 00 00       	mov    edx,0x0
c0024583:	89 c1                	mov    ecx,eax
c0024585:	80 e5 ff             	and    ch,0xff
c0024588:	89 cb                	mov    ebx,ecx
c002458a:	0f b6 f2             	movzx  esi,dl
c002458d:	89 d8                	mov    eax,ebx
c002458f:	89 f2                	mov    edx,esi
c0024591:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024594:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024597:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002459b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002459f:	83 e0 00             	and    eax,0x0
c00245a2:	09 d0                	or     eax,edx
c00245a4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00245a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00245b1:	8d 50 01             	lea    edx,[eax+0x1]
c00245b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00245b7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00245bd:	0f b6 d0             	movzx  edx,al
c00245c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245c3:	83 c2 08             	add    edx,0x8
c00245c6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00245ca:	0f b6 c9             	movzx  ecx,cl
c00245cd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00245d3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00245d7:	83 ec 08             	sub    esp,0x8
c00245da:	6a 01                	push   0x1
c00245dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245df:	e8 04 ff ff ff       	call   c00244e8 <IOAPIC::read(int)>
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	c1 f8 10             	sar    eax,0x10
c00245ea:	0f b6 c0             	movzx  eax,al
c00245ed:	8d 50 01             	lea    edx,[eax+0x1]
c00245f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245f3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00245f9:	b8 00 00 00 00       	mov    eax,0x0
c00245fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024601:	5b                   	pop    ebx
c0024602:	5e                   	pop    esi
c0024603:	5f                   	pop    edi
c0024604:	5d                   	pop    ebp
c0024605:	c3                   	ret    

c0024606 <IOAPIC::write(int, int)>:
c0024606:	55                   	push   ebp
c0024607:	89 e5                	mov    ebp,esp
c0024609:	83 ec 10             	sub    esp,0x10
c002460c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002460f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024615:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024618:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002461b:	0f b6 d0             	movzx  edx,al
c002461e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024621:	89 10                	mov    DWORD PTR [eax],edx
c0024623:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024626:	8d 50 10             	lea    edx,[eax+0x10]
c0024629:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002462c:	89 02                	mov    DWORD PTR [edx],eax
c002462e:	90                   	nop
c002462f:	c9                   	leave  
c0024630:	c3                   	ret    
c0024631:	90                   	nop

c0024632 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024632:	55                   	push   ebp
c0024633:	89 e5                	mov    ebp,esp
c0024635:	53                   	push   ebx
c0024636:	83 ec 2c             	sub    esp,0x2c
c0024639:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002463c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002463f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024642:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024645:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024648:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002464b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002464e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024651:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024654:	88 d8                	mov    al,bl
c0024656:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0024659:	88 c8                	mov    al,cl
c002465b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002465e:	88 d0                	mov    al,dl
c0024660:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024663:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024667:	83 c0 08             	add    eax,0x8
c002466a:	01 c0                	add    eax,eax
c002466c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002466f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024673:	83 c0 08             	add    eax,0x8
c0024676:	01 c0                	add    eax,eax
c0024678:	40                   	inc    eax
c0024679:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002467c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002467f:	50                   	push   eax
c0024680:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024683:	e8 60 fe ff ff       	call   c00244e8 <IOAPIC::read(int)>
c0024688:	83 c4 08             	add    esp,0x8
c002468b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002468e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024695:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024698:	c1 e0 18             	shl    eax,0x18
c002469b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002469e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00246a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00246a4:	52                   	push   edx
c00246a5:	50                   	push   eax
c00246a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246a9:	e8 58 ff ff ff       	call   c0024606 <IOAPIC::write(int, int)>
c00246ae:	83 c4 0c             	add    esp,0xc
c00246b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00246b4:	50                   	push   eax
c00246b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246b8:	e8 2b fe ff ff       	call   c00244e8 <IOAPIC::read(int)>
c00246bd:	83 c4 08             	add    esp,0x8
c00246c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00246c3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00246ca:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00246d1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00246d8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00246dc:	74 09                	je     c00246e7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00246de:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00246e5:	eb 07                	jmp    c00246ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00246e7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00246ee:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00246f2:	74 09                	je     c00246fd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00246f4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00246fb:	eb 07                	jmp    c0024704 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00246fd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024704:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002470b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002470f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024712:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024715:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024718:	52                   	push   edx
c0024719:	50                   	push   eax
c002471a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002471d:	e8 e4 fe ff ff       	call   c0024606 <IOAPIC::write(int, int)>
c0024722:	83 c4 0c             	add    esp,0xc
c0024725:	90                   	nop
c0024726:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024729:	c9                   	leave  
c002472a:	c3                   	ret    
c002472b:	90                   	nop

c002472c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002472c:	55                   	push   ebp
c002472d:	89 e5                	mov    ebp,esp
c002472f:	57                   	push   edi
c0024730:	56                   	push   esi
c0024731:	53                   	push   ebx
c0024732:	83 ec 2c             	sub    esp,0x2c
c0024735:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024738:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002473b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002473f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024743:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024747:	74 5a                	je     c00247a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024749:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002474d:	7f 44                	jg     c0024793 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002474f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024752:	05 60 bc 02 c0       	add    eax,0xc002bc60
c0024757:	8a 00                	mov    al,BYTE PTR [eax]
c0024759:	0f b6 c0             	movzx  eax,al
c002475c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002475f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024762:	66 8b 84 00 60 d3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2ca0]
c002476a:	0f b7 c0             	movzx  eax,ax
c002476d:	83 e0 02             	and    eax,0x2
c0024770:	85 c0                	test   eax,eax
c0024772:	74 04                	je     c0024778 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024774:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0024778:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002477b:	66 8b 84 00 60 d3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2ca0]
c0024783:	0f b7 c0             	movzx  eax,ax
c0024786:	83 e0 08             	and    eax,0x8
c0024789:	85 c0                	test   eax,eax
c002478b:	74 16                	je     c00247a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002478d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024791:	eb 10                	jmp    c00247a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024793:	83 ec 0c             	sub    esp,0xc
c0024796:	68 28 b7 02 c0       	push   0xc002b728
c002479b:	e8 a7 51 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00247a0:	83 c4 10             	add    esp,0x10
c00247a3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00247a7:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c00247ac:	83 ec 08             	sub    esp,0x8
c00247af:	50                   	push   eax
c00247b0:	68 60 b7 02 c0       	push   0xc002b760
c00247b5:	e8 73 e0 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00247ba:	83 c4 10             	add    esp,0x10
c00247bd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00247c4:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c00247c9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00247cc:	7d 67                	jge    c0024835 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00247ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00247d1:	8b 04 85 80 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1280]
c00247d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247db:	83 ec 08             	sub    esp,0x8
c00247de:	52                   	push   edx
c00247df:	50                   	push   eax
c00247e0:	e8 d1 fc ff ff       	call   c00244b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00247e5:	83 c4 10             	add    esp,0x10
c00247e8:	84 c0                	test   al,al
c00247ea:	74 44                	je     c0024830 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00247ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00247ef:	8b 1c 85 80 ed 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1280]
c00247f6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00247fa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00247fd:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024804:	83 c0 20             	add    eax,0x20
c0024807:	0f b6 f0             	movzx  esi,al
c002480a:	b8 00 00 00 00       	mov    eax,0x0
c002480f:	99                   	cdq    
c0024810:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024813:	0f b6 c9             	movzx  ecx,cl
c0024816:	83 ec 04             	sub    esp,0x4
c0024819:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002481c:	57                   	push   edi
c002481d:	56                   	push   esi
c002481e:	52                   	push   edx
c002481f:	50                   	push   eax
c0024820:	51                   	push   ecx
c0024821:	53                   	push   ebx
c0024822:	e8 0b fe ff ff       	call   c0024632 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024827:	83 c4 20             	add    esp,0x20
c002482a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002482e:	eb 05                	jmp    c0024835 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024830:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024833:	eb 8f                	jmp    c00247c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024835:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024838:	83 f0 01             	xor    eax,0x1
c002483b:	84 c0                	test   al,al
c002483d:	74 10                	je     c002484f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002483f:	83 ec 0c             	sub    esp,0xc
c0024842:	68 77 b7 02 c0       	push   0xc002b777
c0024847:	e8 fb 50 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002484c:	83 c4 10             	add    esp,0x10
c002484f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024853:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002485a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002485e:	7f 65                	jg     c00248c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024863:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024866:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002486d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024870:	01 ca                	add    edx,ecx
c0024872:	83 c2 54             	add    edx,0x54
c0024875:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024879:	85 c0                	test   eax,eax
c002487b:	75 43                	jne    c00248c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002487d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024880:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024883:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002488a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002488d:	01 ca                	add    edx,ecx
c002488f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024892:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024895:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002489c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002489f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00248a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00248a9:	01 ca                	add    edx,ecx
c00248ab:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00248b1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00248b4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00248b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248bb:	83 e8 20             	sub    eax,0x20
c00248be:	eb 1a                	jmp    c00248da <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00248c0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00248c3:	eb 95                	jmp    c002485a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00248c5:	83 ec 0c             	sub    esp,0xc
c00248c8:	68 84 b7 02 c0       	push   0xc002b784
c00248cd:	e8 75 50 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00248d2:	83 c4 10             	add    esp,0x10
c00248d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00248da:	8d 65 f4             	lea    esp,[ebp-0xc]
c00248dd:	5b                   	pop    ebx
c00248de:	5e                   	pop    esi
c00248df:	5f                   	pop    edi
c00248e0:	5d                   	pop    ebp
c00248e1:	c3                   	ret    

c00248e2 <PIC::disable()>:
c00248e2:	55                   	push   ebp
c00248e3:	89 e5                	mov    ebp,esp
c00248e5:	83 ec 10             	sub    esp,0x10
c00248e8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00248ee:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00248f2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00248f5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00248f9:	ee                   	out    dx,al
c00248fa:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024900:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024904:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024907:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002490b:	ee                   	out    dx,al
c002490c:	90                   	nop
c002490d:	c9                   	leave  
c002490e:	c3                   	ret    
c002490f:	90                   	nop

c0024910 <PIC::close(int, int, void*)>:
c0024910:	55                   	push   ebp
c0024911:	89 e5                	mov    ebp,esp
c0024913:	83 ec 08             	sub    esp,0x8
c0024916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024919:	8b 00                	mov    eax,DWORD PTR [eax]
c002491b:	83 c0 3c             	add    eax,0x3c
c002491e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024920:	83 ec 0c             	sub    esp,0xc
c0024923:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024926:	ff d0                	call   eax
c0024928:	83 c4 10             	add    esp,0x10
c002492b:	b8 00 00 00 00       	mov    eax,0x0
c0024930:	c9                   	leave  
c0024931:	c3                   	ret    

c0024932 <PIC::PIC()>:
c0024932:	83 ec 0c             	sub    esp,0xc
c0024935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024939:	83 ec 08             	sub    esp,0x8
c002493c:	68 30 b8 02 c0       	push   0xc002b830
c0024941:	50                   	push   eax
c0024942:	e8 1d fc fe ff       	call   c0014564 <InterruptController::InterruptController(char const*)>
c0024947:	83 c4 10             	add    esp,0x10
c002494a:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c002494f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024953:	89 10                	mov    DWORD PTR [eax],edx
c0024955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024959:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002495f:	0f b6 d0             	movzx  edx,al
c0024962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024966:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002496d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024971:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024977:	0f b6 d0             	movzx  edx,al
c002497a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002497e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024987:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002498d:	8d 50 01             	lea    edx,[eax+0x1]
c0024990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024994:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002499a:	0f b6 d0             	movzx  edx,al
c002499d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00249a5:	83 e1 3f             	and    ecx,0x3f
c00249a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00249ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00249b6:	0f b6 d0             	movzx  edx,al
c00249b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249bd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00249c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00249ce:	0f b6 d0             	movzx  edx,al
c00249d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249d5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00249da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00249e4:	8d 50 01             	lea    edx,[eax+0x1]
c00249e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00249eb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00249f1:	0f b6 d0             	movzx  edx,al
c00249f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249f8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00249fc:	83 e1 3f             	and    ecx,0x3f
c00249ff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024a03:	90                   	nop
c0024a04:	83 c4 0c             	add    esp,0xc
c0024a07:	c3                   	ret    

c0024a08 <PIC::ioWait()>:
c0024a08:	eb 00                	jmp    c0024a0a <PIC::ioWait()+0x2>
c0024a0a:	eb 00                	jmp    c0024a0c <PIC::ioWait()+0x4>
c0024a0c:	90                   	nop
c0024a0d:	c3                   	ret    

c0024a0e <PIC::getIRQReg(int)>:
c0024a0e:	55                   	push   ebp
c0024a0f:	89 e5                	mov    ebp,esp
c0024a11:	83 ec 10             	sub    esp,0x10
c0024a14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a17:	0f b6 c0             	movzx  eax,al
c0024a1a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a20:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024a23:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a26:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a2a:	ee                   	out    dx,al
c0024a2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a2e:	0f b6 c0             	movzx  eax,al
c0024a31:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a37:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024a3a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a3d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a41:	ee                   	out    dx,al
c0024a42:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024a48:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024a4c:	89 c2                	mov    edx,eax
c0024a4e:	ec                   	in     al,dx
c0024a4f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024a52:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a55:	0f b6 c0             	movzx  eax,al
c0024a58:	c1 e0 08             	shl    eax,0x8
c0024a5b:	89 c1                	mov    ecx,eax
c0024a5d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024a63:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024a67:	89 c2                	mov    edx,eax
c0024a69:	ec                   	in     al,dx
c0024a6a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024a6d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024a70:	0f b6 c0             	movzx  eax,al
c0024a73:	09 c8                	or     eax,ecx
c0024a75:	c9                   	leave  
c0024a76:	c3                   	ret    
c0024a77:	90                   	nop

c0024a78 <PIC::eoi(unsigned char)>:
c0024a78:	55                   	push   ebp
c0024a79:	89 e5                	mov    ebp,esp
c0024a7b:	83 ec 14             	sub    esp,0x14
c0024a7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a81:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024a84:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a88:	75 1e                	jne    c0024aa8 <PIC::eoi(unsigned char)+0x30>
c0024a8a:	6a 0b                	push   0xb
c0024a8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a8f:	e8 7a ff ff ff       	call   c0024a0e <PIC::getIRQReg(int)>
c0024a94:	83 c4 08             	add    esp,0x8
c0024a97:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024a9b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024a9f:	25 80 00 00 00       	and    eax,0x80
c0024aa4:	85 c0                	test   eax,eax
c0024aa6:	74 5f                	je     c0024b07 <PIC::eoi(unsigned char)+0x8f>
c0024aa8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024aac:	75 2d                	jne    c0024adb <PIC::eoi(unsigned char)+0x63>
c0024aae:	6a 0b                	push   0xb
c0024ab0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ab3:	e8 56 ff ff ff       	call   c0024a0e <PIC::getIRQReg(int)>
c0024ab8:	83 c4 08             	add    esp,0x8
c0024abb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024abf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024ac2:	66 85 c0             	test   ax,ax
c0024ac5:	78 14                	js     c0024adb <PIC::eoi(unsigned char)+0x63>
c0024ac7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024acd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024ad1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024ad4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024ad8:	ee                   	out    dx,al
c0024ad9:	eb 2d                	jmp    c0024b08 <PIC::eoi(unsigned char)+0x90>
c0024adb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024adf:	76 12                	jbe    c0024af3 <PIC::eoi(unsigned char)+0x7b>
c0024ae1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024ae7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024aeb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024aee:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024af2:	ee                   	out    dx,al
c0024af3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024af9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024afd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024b00:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024b04:	ee                   	out    dx,al
c0024b05:	eb 01                	jmp    c0024b08 <PIC::eoi(unsigned char)+0x90>
c0024b07:	90                   	nop
c0024b08:	c9                   	leave  
c0024b09:	c3                   	ret    

c0024b0a <PIC::remap()>:
c0024b0a:	55                   	push   ebp
c0024b0b:	89 e5                	mov    ebp,esp
c0024b0d:	83 ec 48             	sub    esp,0x48
c0024b10:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024b17:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024b1e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024b24:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024b27:	89 c2                	mov    edx,eax
c0024b29:	ec                   	in     al,dx
c0024b2a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024b2d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024b30:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024b33:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024b39:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024b3c:	89 c2                	mov    edx,eax
c0024b3e:	ec                   	in     al,dx
c0024b3f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024b42:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024b45:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024b48:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024b4e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024b52:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024b55:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024b58:	ee                   	out    dx,al
c0024b59:	83 ec 0c             	sub    esp,0xc
c0024b5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b5f:	e8 a4 fe ff ff       	call   c0024a08 <PIC::ioWait()>
c0024b64:	83 c4 10             	add    esp,0x10
c0024b67:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024b6d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024b71:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024b74:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024b77:	ee                   	out    dx,al
c0024b78:	83 ec 0c             	sub    esp,0xc
c0024b7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b7e:	e8 85 fe ff ff       	call   c0024a08 <PIC::ioWait()>
c0024b83:	83 c4 10             	add    esp,0x10
c0024b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024b89:	0f b6 c0             	movzx  eax,al
c0024b8c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024b92:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024b95:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024b98:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024b9b:	ee                   	out    dx,al
c0024b9c:	83 ec 0c             	sub    esp,0xc
c0024b9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ba2:	e8 61 fe ff ff       	call   c0024a08 <PIC::ioWait()>
c0024ba7:	83 c4 10             	add    esp,0x10
c0024baa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024bad:	0f b6 c0             	movzx  eax,al
c0024bb0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024bb6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024bb9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024bbc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024bbf:	ee                   	out    dx,al
c0024bc0:	83 ec 0c             	sub    esp,0xc
c0024bc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bc6:	e8 3d fe ff ff       	call   c0024a08 <PIC::ioWait()>
c0024bcb:	83 c4 10             	add    esp,0x10
c0024bce:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024bd4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024bd8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024bdb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024bde:	ee                   	out    dx,al
c0024bdf:	83 ec 0c             	sub    esp,0xc
c0024be2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024be5:	e8 1e fe ff ff       	call   c0024a08 <PIC::ioWait()>
c0024bea:	83 c4 10             	add    esp,0x10
c0024bed:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024bf3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024bf7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024bfa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024bfd:	ee                   	out    dx,al
c0024bfe:	83 ec 0c             	sub    esp,0xc
c0024c01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c04:	e8 ff fd ff ff       	call   c0024a08 <PIC::ioWait()>
c0024c09:	83 c4 10             	add    esp,0x10
c0024c0c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024c12:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024c16:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024c19:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024c1c:	ee                   	out    dx,al
c0024c1d:	83 ec 0c             	sub    esp,0xc
c0024c20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c23:	e8 e0 fd ff ff       	call   c0024a08 <PIC::ioWait()>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024c31:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024c35:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024c38:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024c3b:	ee                   	out    dx,al
c0024c3c:	83 ec 0c             	sub    esp,0xc
c0024c3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c42:	e8 c1 fd ff ff       	call   c0024a08 <PIC::ioWait()>
c0024c47:	83 c4 10             	add    esp,0x10
c0024c4a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024c4e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024c54:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024c57:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024c5a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024c5d:	ee                   	out    dx,al
c0024c5e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024c62:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024c68:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024c6b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024c6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024c71:	ee                   	out    dx,al
c0024c72:	90                   	nop
c0024c73:	c9                   	leave  
c0024c74:	c3                   	ret    
c0024c75:	90                   	nop

c0024c76 <PIC::open(int, int, void*)>:
c0024c76:	55                   	push   ebp
c0024c77:	89 e5                	mov    ebp,esp
c0024c79:	83 ec 18             	sub    esp,0x18
c0024c7c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024c82:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024c86:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024c89:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024c8d:	ee                   	out    dx,al
c0024c8e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024c94:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024c98:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024c9b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024c9f:	ee                   	out    dx,al
c0024ca0:	83 ec 0c             	sub    esp,0xc
c0024ca3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ca6:	e8 5f fe ff ff       	call   c0024b0a <PIC::remap()>
c0024cab:	83 c4 10             	add    esp,0x10
c0024cae:	b8 00 00 00 00       	mov    eax,0x0
c0024cb3:	c9                   	leave  
c0024cb4:	c3                   	ret    
c0024cb5:	90                   	nop

c0024cb6 <APICTimer::close(int, int, void*)>:
c0024cb6:	b8 00 00 00 00       	mov    eax,0x0
c0024cbb:	c3                   	ret    

c0024cbc <apicTimerHandler(regs*, void*)>:
c0024cbc:	83 ec 0c             	sub    esp,0xc
c0024cbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cc5:	99                   	cdq    
c0024cc6:	52                   	push   edx
c0024cc7:	50                   	push   eax
c0024cc8:	6a 00                	push   0x0
c0024cca:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024ccf:	e8 88 07 00 00       	call   c002545c <__udivdi3>
c0024cd4:	83 c4 10             	add    esp,0x10
c0024cd7:	83 ec 08             	sub    esp,0x8
c0024cda:	52                   	push   edx
c0024cdb:	50                   	push   eax
c0024cdc:	e8 82 17 ff ff       	call   c0016463 <timerHandler(unsigned long long)>
c0024ce1:	83 c4 10             	add    esp,0x10
c0024ce4:	90                   	nop
c0024ce5:	83 c4 0c             	add    esp,0xc
c0024ce8:	c3                   	ret    
c0024ce9:	90                   	nop

c0024cea <APICTimer::write(int)>:
c0024cea:	53                   	push   ebx
c0024ceb:	83 ec 28             	sub    esp,0x28
c0024cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024cf2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024cf6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024cfc:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0024d01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d07:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d0d:	83 ec 0c             	sub    esp,0xc
c0024d10:	50                   	push   eax
c0024d11:	e8 de f4 ff ff       	call   c00241f4 <APIC::getBase()>
c0024d16:	83 c4 10             	add    esp,0x10
c0024d19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d1d:	a1 90 d0 02 c0       	mov    eax,ds:0xc002d090
c0024d22:	8b 15 94 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d094
c0024d28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d34:	05 e0 03 00 00       	add    eax,0x3e0
c0024d39:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d43:	05 80 03 00 00       	add    eax,0x380
c0024d48:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024d4e:	fb                   	sti    
c0024d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024d57:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024d5c:	83 d2 00             	adc    edx,0x0
c0024d5f:	89 c1                	mov    ecx,eax
c0024d61:	89 d3                	mov    ebx,edx
c0024d63:	a1 90 d0 02 c0       	mov    eax,ds:0xc002d090
c0024d68:	8b 15 94 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d094
c0024d6e:	39 c8                	cmp    eax,ecx
c0024d70:	89 d0                	mov    eax,edx
c0024d72:	19 d8                	sbb    eax,ebx
c0024d74:	73 02                	jae    c0024d78 <APICTimer::write(int)+0x8e>
c0024d76:	eb d7                	jmp    c0024d4f <APICTimer::write(int)+0x65>
c0024d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d7c:	05 20 03 00 00       	add    eax,0x320
c0024d81:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024d87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d8b:	05 90 03 00 00       	add    eax,0x390
c0024d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d92:	f7 d0                	not    eax
c0024d94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d98:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024da0:	ba 00 00 00 00       	mov    edx,0x0
c0024da5:	f7 f3                	div    ebx
c0024da7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024daf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024db5:	0d 00 00 02 00       	or     eax,0x20000
c0024dba:	89 c2                	mov    edx,eax
c0024dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dc0:	05 20 03 00 00       	add    eax,0x320
c0024dc5:	89 10                	mov    DWORD PTR [eax],edx
c0024dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dcb:	05 e0 03 00 00       	add    eax,0x3e0
c0024dd0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dda:	05 80 03 00 00       	add    eax,0x380
c0024ddf:	89 c2                	mov    edx,eax
c0024de1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024de5:	89 02                	mov    DWORD PTR [edx],eax
c0024de7:	90                   	nop
c0024de8:	83 c4 28             	add    esp,0x28
c0024deb:	5b                   	pop    ebx
c0024dec:	c3                   	ret    
c0024ded:	90                   	nop

c0024dee <APICTimer::open(int, int, void*)>:
c0024dee:	57                   	push   edi
c0024def:	56                   	push   esi
c0024df0:	53                   	push   ebx
c0024df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024df7:	83 c0 24             	add    eax,0x24
c0024dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dfc:	83 ec 08             	sub    esp,0x8
c0024dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e07:	ff d0                	call   eax
c0024e09:	83 c4 10             	add    esp,0x10
c0024e0c:	a1 08 ca 02 c0       	mov    eax,ds:0xc002ca08
c0024e11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e17:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024e1d:	83 ec 0c             	sub    esp,0xc
c0024e20:	50                   	push   eax
c0024e21:	e8 ce f3 ff ff       	call   c00241f4 <APIC::getBase()>
c0024e26:	83 c4 10             	add    esp,0x10
c0024e29:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024e39:	0f b6 f8             	movzx  edi,al
c0024e3c:	89 d0                	mov    eax,edx
c0024e3e:	ba 00 00 00 00       	mov    edx,0x0
c0024e43:	89 c1                	mov    ecx,eax
c0024e45:	80 e5 ff             	and    ch,0xff
c0024e48:	89 cb                	mov    ebx,ecx
c0024e4a:	0f b6 f2             	movzx  esi,dl
c0024e4d:	89 d8                	mov    eax,ebx
c0024e4f:	89 f2                	mov    edx,esi
c0024e51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e55:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024e58:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024e5c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024e60:	83 e0 00             	and    eax,0x0
c0024e63:	09 d0                	or     eax,edx
c0024e65:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e6d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024e73:	8d 50 01             	lea    edx,[eax+0x1]
c0024e76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e7a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024e80:	0f b6 d0             	movzx  edx,al
c0024e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e87:	83 c2 08             	add    edx,0x8
c0024e8a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024e8e:	0f b6 c9             	movzx  ecx,cl
c0024e91:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024e97:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024ea3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024eb1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024eb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024ebb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024ec1:	83 ec 0c             	sub    esp,0xc
c0024ec4:	51                   	push   ecx
c0024ec5:	6a 01                	push   0x1
c0024ec7:	68 bc 4c 02 c0       	push   0xc0024cbc
c0024ecc:	52                   	push   edx
c0024ecd:	50                   	push   eax
c0024ece:	e8 cd ec fe ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024ed3:	83 c4 20             	add    esp,0x20
c0024ed6:	89 c2                	mov    edx,eax
c0024ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024edc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024ee2:	b8 00 00 00 00       	mov    eax,0x0
c0024ee7:	5b                   	pop    ebx
c0024ee8:	5e                   	pop    esi
c0024ee9:	5f                   	pop    edi
c0024eea:	c3                   	ret    
c0024eeb:	90                   	nop

c0024eec <APICTimer::APICTimer()>:
c0024eec:	83 ec 0c             	sub    esp,0xc
c0024eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ef3:	83 ec 08             	sub    esp,0x8
c0024ef6:	68 9c b8 02 c0       	push   0xc002b89c
c0024efb:	50                   	push   eax
c0024efc:	e8 d3 14 ff ff       	call   c00163d4 <Timer::Timer(char const*)>
c0024f01:	83 c4 10             	add    esp,0x10
c0024f04:	ba b0 b8 02 c0       	mov    edx,0xc002b8b0
c0024f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f0d:	89 10                	mov    DWORD PTR [eax],edx
c0024f0f:	90                   	nop
c0024f10:	83 c4 0c             	add    esp,0xc
c0024f13:	c3                   	ret    

c0024f14 <PIT::write(int)>:
c0024f14:	83 ec 10             	sub    esp,0x10
c0024f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024f1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024f25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f29:	a3 a4 ed 02 c0       	mov    ds:0xc002eda4,eax
c0024f2e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024f33:	99                   	cdq    
c0024f34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024f38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024f43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024f48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024f4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024f51:	ee                   	out    dx,al
c0024f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f56:	0f b6 c0             	movzx  eax,al
c0024f59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024f60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024f64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024f68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024f6d:	ee                   	out    dx,al
c0024f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f72:	c1 f8 08             	sar    eax,0x8
c0024f75:	0f b6 c0             	movzx  eax,al
c0024f78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024f7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024f83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024f87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024f8c:	ee                   	out    dx,al
c0024f8d:	90                   	nop
c0024f8e:	83 c4 10             	add    esp,0x10
c0024f91:	c3                   	ret    

c0024f92 <pitHandler(regs*, void*)>:
c0024f92:	83 ec 0c             	sub    esp,0xc
c0024f95:	a1 a4 ed 02 c0       	mov    eax,ds:0xc002eda4
c0024f9a:	99                   	cdq    
c0024f9b:	52                   	push   edx
c0024f9c:	50                   	push   eax
c0024f9d:	6a 00                	push   0x0
c0024f9f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024fa4:	e8 b3 04 00 00       	call   c002545c <__udivdi3>
c0024fa9:	83 c4 10             	add    esp,0x10
c0024fac:	83 ec 08             	sub    esp,0x8
c0024faf:	52                   	push   edx
c0024fb0:	50                   	push   eax
c0024fb1:	e8 ad 14 ff ff       	call   c0016463 <timerHandler(unsigned long long)>
c0024fb6:	83 c4 10             	add    esp,0x10
c0024fb9:	90                   	nop
c0024fba:	83 c4 0c             	add    esp,0xc
c0024fbd:	c3                   	ret    

c0024fbe <PIT::open(int, int, void*)>:
c0024fbe:	83 ec 0c             	sub    esp,0xc
c0024fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fc7:	83 c0 24             	add    eax,0x24
c0024fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fcc:	83 ec 08             	sub    esp,0x8
c0024fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fd7:	ff d0                	call   eax
c0024fd9:	83 c4 10             	add    esp,0x10
c0024fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe0:	83 ec 0c             	sub    esp,0xc
c0024fe3:	6a 00                	push   0x0
c0024fe5:	6a 01                	push   0x1
c0024fe7:	68 92 4f 02 c0       	push   0xc0024f92
c0024fec:	6a 00                	push   0x0
c0024fee:	50                   	push   eax
c0024fef:	e8 ac eb fe ff       	call   c0013ba0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024ff4:	83 c4 20             	add    esp,0x20
c0024ff7:	89 c2                	mov    edx,eax
c0024ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ffd:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025003:	b8 00 00 00 00       	mov    eax,0x0
c0025008:	83 c4 0c             	add    esp,0xc
c002500b:	c3                   	ret    

c002500c <PIT::close(int, int, void*)>:
c002500c:	83 ec 0c             	sub    esp,0xc
c002500f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025013:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002501d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025021:	6a 01                	push   0x1
c0025023:	68 92 4f 02 c0       	push   0xc0024f92
c0025028:	6a 00                	push   0x0
c002502a:	50                   	push   eax
c002502b:	e8 ae eb fe ff       	call   c0013bde <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025030:	83 c4 10             	add    esp,0x10
c0025033:	b8 00 00 00 00       	mov    eax,0x0
c0025038:	83 c4 0c             	add    esp,0xc
c002503b:	c3                   	ret    

c002503c <PIT::PIT()>:
c002503c:	83 ec 0c             	sub    esp,0xc
c002503f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025043:	83 ec 08             	sub    esp,0x8
c0025046:	68 d8 b8 02 c0       	push   0xc002b8d8
c002504b:	50                   	push   eax
c002504c:	e8 83 13 ff ff       	call   c00163d4 <Timer::Timer(char const*)>
c0025051:	83 c4 10             	add    esp,0x10
c0025054:	ba 00 b9 02 c0       	mov    edx,0xc002b900
c0025059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002505d:	89 10                	mov    DWORD PTR [eax],edx
c002505f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025063:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025069:	0f b6 d0             	movzx  edx,al
c002506c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025070:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002507b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025081:	0f b6 d0             	movzx  edx,al
c0025084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025088:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002508d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025091:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025097:	8d 50 01             	lea    edx,[eax+0x1]
c002509a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002509e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00250a4:	0f b6 d0             	movzx  edx,al
c00250a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00250af:	83 e1 3f             	and    ecx,0x3f
c00250b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00250b6:	90                   	nop
c00250b7:	83 c4 0c             	add    esp,0xc
c00250ba:	c3                   	ret    
c00250bb:	66 90                	xchg   ax,ax
c00250bd:	66 90                	xchg   ax,ax
c00250bf:	90                   	nop

c00250c0 <avxDetect>:
c00250c0:	b8 00 00 00 00       	mov    eax,0x0
c00250c5:	c3                   	ret    

c00250c6 <avxSave>:
c00250c6:	c3                   	ret    

c00250c7 <avxLoad>:
c00250c7:	c3                   	ret    

c00250c8 <avxInit>:
c00250c8:	c3                   	ret    

c00250c9 <avxClose>:
c00250c9:	c3                   	ret    

c00250ca <wouldSheSayYes>:
c00250ca:	c3                   	ret    
c00250cb:	49                   	dec    ecx
c00250cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00250d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00250d4:	75 20                	jne    c00250f6 <sseDetect.noSSE+0x1>
c00250d6:	4e                   	dec    esi
c00250d7:	79 61                	jns    c002513a <x87Detect+0x14>
c00250d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00250de:	66 90                	xchg   ax,ax

c00250e0 <absolutelyNoChanceInHell>:
c00250e0:	b8 01 00 00 00       	mov    eax,0x1
c00250e5:	0f a2                	cpuid  
c00250e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00250ed:	74 06                	je     c00250f5 <sseDetect.noSSE>
c00250ef:	b8 01 00 00 00       	mov    eax,0x1
c00250f4:	c3                   	ret    

c00250f5 <sseDetect.noSSE>:
c00250f5:	31 c0                	xor    eax,eax
c00250f7:	c3                   	ret    

c00250f8 <sseSave>:
c00250f8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00250fd:	c3                   	ret    

c00250fe <sseLoad>:
c00250fe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025103:	c3                   	ret    

c0025104 <sseInit>:
c0025104:	e8 43 00 00 00       	call   c002514c <x87Init>
c0025109:	0f 20 e0             	mov    eax,cr4
c002510c:	66 0d 00 06          	or     ax,0x600
c0025110:	0f 22 e0             	mov    cr4,eax
c0025113:	c3                   	ret    

c0025114 <sseClose>:
c0025114:	c3                   	ret    
c0025115:	66 90                	xchg   ax,ax
c0025117:	66 90                	xchg   ax,ax
c0025119:	66 90                	xchg   ax,ax
c002511b:	66 90                	xchg   ax,ax
c002511d:	66 90                	xchg   ax,ax
c002511f:	90                   	nop

c0025120 <value_37F>:
c0025120:	7f 03                	jg     c0025125 <value_37A+0x1>

c0025122 <value_37E>:
c0025122:	7e 03                	jle    c0025127 <x87Detect+0x1>

c0025124 <value_37A>:
c0025124:	7a 03                	jp     c0025129 <x87Detect+0x3>

c0025126 <x87Detect>:
c0025126:	b8 01 00 00 00       	mov    eax,0x1
c002512b:	0f a2                	cpuid  
c002512d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025133:	74 06                	je     c002513b <x87Detect.nox87>
c0025135:	b8 01 00 00 00       	mov    eax,0x1
c002513a:	c3                   	ret    

c002513b <x87Detect.nox87>:
c002513b:	b8 00 00 00 00       	mov    eax,0x0
c0025140:	c3                   	ret    

c0025141 <x87Save>:
c0025141:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025146:	c3                   	ret    

c0025147 <x87Load>:
c0025147:	dd 64 24 08          	frstor [esp+0x8]
c002514b:	c3                   	ret    

c002514c <x87Init>:
c002514c:	9b db e3             	finit  
c002514f:	0f 20 c0             	mov    eax,cr0
c0025152:	66 25 fb ff          	and    ax,0xfffb
c0025156:	66 0d 22 00          	or     ax,0x22
c002515a:	0f 22 c0             	mov    cr0,eax
c002515d:	0f 06                	clts   
c002515f:	d9 2d 24 51 02 c0    	fldcw  WORD PTR ds:0xc0025124
c0025165:	c3                   	ret    

c0025166 <x87Close>:
c0025166:	c3                   	ret    
c0025167:	90                   	nop

c0025168 <__do_global_ctors_aux>:
c0025168:	a1 5c 7c 02 c0       	mov    eax,ds:0xc0027c5c
c002516d:	83 f8 ff             	cmp    eax,0xffffffff
c0025170:	74 1a                	je     c002518c <__do_global_ctors_aux+0x24>
c0025172:	55                   	push   ebp
c0025173:	89 e5                	mov    ebp,esp
c0025175:	53                   	push   ebx
c0025176:	52                   	push   edx
c0025177:	bb 5c 7c 02 c0       	mov    ebx,0xc0027c5c
c002517c:	ff d0                	call   eax
c002517e:	83 eb 04             	sub    ebx,0x4
c0025181:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025183:	83 f8 ff             	cmp    eax,0xffffffff
c0025186:	75 f4                	jne    c002517c <__do_global_ctors_aux+0x14>
c0025188:	58                   	pop    eax
c0025189:	5b                   	pop    ebx
c002518a:	5d                   	pop    ebp
c002518b:	c3                   	ret    
c002518c:	c3                   	ret    
c002518d:	66 90                	xchg   ax,ax
c002518f:	90                   	nop

c0025190 <__divdi3>:
c0025190:	55                   	push   ebp
c0025191:	57                   	push   edi
c0025192:	56                   	push   esi
c0025193:	53                   	push   ebx
c0025194:	83 ec 1c             	sub    esp,0x1c
c0025197:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002519b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002519f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00251a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00251a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00251aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00251ae:	85 db                	test   ebx,ebx
c00251b0:	0f 88 8e 00 00 00    	js     c0025244 <__divdi3+0xb4>
c00251b6:	89 dd                	mov    ebp,ebx
c00251b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00251c0:	89 d3                	mov    ebx,edx
c00251c2:	85 d2                	test   edx,edx
c00251c4:	79 0d                	jns    c00251d3 <__divdi3+0x43>
c00251c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00251ca:	f7 d8                	neg    eax
c00251cc:	83 d2 00             	adc    edx,0x0
c00251cf:	f7 da                	neg    edx
c00251d1:	89 d3                	mov    ebx,edx
c00251d3:	89 c7                	mov    edi,eax
c00251d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00251d8:	85 db                	test   ebx,ebx
c00251da:	75 48                	jne    c0025224 <__divdi3+0x94>
c00251dc:	39 ef                	cmp    edi,ebp
c00251de:	76 24                	jbe    c0025204 <__divdi3+0x74>
c00251e0:	89 ea                	mov    edx,ebp
c00251e2:	f7 f7                	div    edi
c00251e4:	89 c1                	mov    ecx,eax
c00251e6:	31 f6                	xor    esi,esi
c00251e8:	89 c8                	mov    eax,ecx
c00251ea:	89 f2                	mov    edx,esi
c00251ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00251f0:	85 c9                	test   ecx,ecx
c00251f2:	74 07                	je     c00251fb <__divdi3+0x6b>
c00251f4:	f7 d8                	neg    eax
c00251f6:	83 d2 00             	adc    edx,0x0
c00251f9:	f7 da                	neg    edx
c00251fb:	83 c4 1c             	add    esp,0x1c
c00251fe:	5b                   	pop    ebx
c00251ff:	5e                   	pop    esi
c0025200:	5f                   	pop    edi
c0025201:	5d                   	pop    ebp
c0025202:	c3                   	ret    
c0025203:	90                   	nop
c0025204:	85 ff                	test   edi,edi
c0025206:	75 0b                	jne    c0025213 <__divdi3+0x83>
c0025208:	b8 01 00 00 00       	mov    eax,0x1
c002520d:	31 d2                	xor    edx,edx
c002520f:	f7 f3                	div    ebx
c0025211:	89 c7                	mov    edi,eax
c0025213:	31 d2                	xor    edx,edx
c0025215:	89 e8                	mov    eax,ebp
c0025217:	f7 f7                	div    edi
c0025219:	89 c6                	mov    esi,eax
c002521b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002521e:	f7 f7                	div    edi
c0025220:	89 c1                	mov    ecx,eax
c0025222:	eb c4                	jmp    c00251e8 <__divdi3+0x58>
c0025224:	39 eb                	cmp    ebx,ebp
c0025226:	77 3c                	ja     c0025264 <__divdi3+0xd4>
c0025228:	0f bd f3             	bsr    esi,ebx
c002522b:	83 f6 1f             	xor    esi,0x1f
c002522e:	75 40                	jne    c0025270 <__divdi3+0xe0>
c0025230:	39 eb                	cmp    ebx,ebp
c0025232:	72 09                	jb     c002523d <__divdi3+0xad>
c0025234:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025237:	0f 87 97 00 00 00    	ja     c00252d4 <__divdi3+0x144>
c002523d:	b9 01 00 00 00       	mov    ecx,0x1
c0025242:	eb a4                	jmp    c00251e8 <__divdi3+0x58>
c0025244:	f7 d9                	neg    ecx
c0025246:	83 d3 00             	adc    ebx,0x0
c0025249:	f7 db                	neg    ebx
c002524b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002524e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025252:	89 dd                	mov    ebp,ebx
c0025254:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002525c:	e9 5f ff ff ff       	jmp    c00251c0 <__divdi3+0x30>
c0025261:	8d 76 00             	lea    esi,[esi+0x0]
c0025264:	31 f6                	xor    esi,esi
c0025266:	31 c9                	xor    ecx,ecx
c0025268:	e9 7b ff ff ff       	jmp    c00251e8 <__divdi3+0x58>
c002526d:	8d 76 00             	lea    esi,[esi+0x0]
c0025270:	b8 20 00 00 00       	mov    eax,0x20
c0025275:	29 f0                	sub    eax,esi
c0025277:	89 f1                	mov    ecx,esi
c0025279:	d3 e3                	shl    ebx,cl
c002527b:	89 fa                	mov    edx,edi
c002527d:	88 c1                	mov    cl,al
c002527f:	d3 ea                	shr    edx,cl
c0025281:	09 da                	or     edx,ebx
c0025283:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025287:	89 f1                	mov    ecx,esi
c0025289:	d3 e7                	shl    edi,cl
c002528b:	89 eb                	mov    ebx,ebp
c002528d:	88 c1                	mov    cl,al
c002528f:	d3 eb                	shr    ebx,cl
c0025291:	89 f1                	mov    ecx,esi
c0025293:	d3 e5                	shl    ebp,cl
c0025295:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025298:	88 c1                	mov    cl,al
c002529a:	d3 ea                	shr    edx,cl
c002529c:	09 d5                	or     ebp,edx
c002529e:	89 e8                	mov    eax,ebp
c00252a0:	89 da                	mov    edx,ebx
c00252a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00252a6:	89 d3                	mov    ebx,edx
c00252a8:	89 c5                	mov    ebp,eax
c00252aa:	f7 e7                	mul    edi
c00252ac:	39 d3                	cmp    ebx,edx
c00252ae:	72 18                	jb     c00252c8 <__divdi3+0x138>
c00252b0:	74 0a                	je     c00252bc <__divdi3+0x12c>
c00252b2:	89 e9                	mov    ecx,ebp
c00252b4:	31 f6                	xor    esi,esi
c00252b6:	e9 2d ff ff ff       	jmp    c00251e8 <__divdi3+0x58>
c00252bb:	90                   	nop
c00252bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00252bf:	89 f1                	mov    ecx,esi
c00252c1:	d3 e7                	shl    edi,cl
c00252c3:	39 c7                	cmp    edi,eax
c00252c5:	73 eb                	jae    c00252b2 <__divdi3+0x122>
c00252c7:	90                   	nop
c00252c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00252cb:	31 f6                	xor    esi,esi
c00252cd:	e9 16 ff ff ff       	jmp    c00251e8 <__divdi3+0x58>
c00252d2:	66 90                	xchg   ax,ax
c00252d4:	31 c9                	xor    ecx,ecx
c00252d6:	e9 0d ff ff ff       	jmp    c00251e8 <__divdi3+0x58>
c00252db:	90                   	nop

c00252dc <__moddi3>:
c00252dc:	55                   	push   ebp
c00252dd:	57                   	push   edi
c00252de:	56                   	push   esi
c00252df:	53                   	push   ebx
c00252e0:	83 ec 2c             	sub    esp,0x2c
c00252e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00252e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00252eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00252ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00252f3:	85 db                	test   ebx,ebx
c00252f5:	0f 88 85 00 00 00    	js     c0025380 <__moddi3+0xa4>
c00252fb:	89 de                	mov    esi,ebx
c00252fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025305:	89 d7                	mov    edi,edx
c0025307:	85 d2                	test   edx,edx
c0025309:	79 09                	jns    c0025314 <__moddi3+0x38>
c002530b:	f7 d8                	neg    eax
c002530d:	83 d2 00             	adc    edx,0x0
c0025310:	f7 da                	neg    edx
c0025312:	89 d7                	mov    edi,edx
c0025314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025318:	89 cd                	mov    ebp,ecx
c002531a:	85 ff                	test   edi,edi
c002531c:	75 52                	jne    c0025370 <__moddi3+0x94>
c002531e:	89 c3                	mov    ebx,eax
c0025320:	39 f0                	cmp    eax,esi
c0025322:	76 24                	jbe    c0025348 <__moddi3+0x6c>
c0025324:	89 c8                	mov    eax,ecx
c0025326:	89 f2                	mov    edx,esi
c0025328:	f7 f3                	div    ebx
c002532a:	89 d6                	mov    esi,edx
c002532c:	89 f0                	mov    eax,esi
c002532e:	31 d2                	xor    edx,edx
c0025330:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025334:	85 c9                	test   ecx,ecx
c0025336:	74 07                	je     c002533f <__moddi3+0x63>
c0025338:	f7 d8                	neg    eax
c002533a:	83 d2 00             	adc    edx,0x0
c002533d:	f7 da                	neg    edx
c002533f:	83 c4 2c             	add    esp,0x2c
c0025342:	5b                   	pop    ebx
c0025343:	5e                   	pop    esi
c0025344:	5f                   	pop    edi
c0025345:	5d                   	pop    ebp
c0025346:	c3                   	ret    
c0025347:	90                   	nop
c0025348:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002534c:	85 db                	test   ebx,ebx
c002534e:	75 0d                	jne    c002535d <__moddi3+0x81>
c0025350:	b8 01 00 00 00       	mov    eax,0x1
c0025355:	31 d2                	xor    edx,edx
c0025357:	f7 f7                	div    edi
c0025359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002535d:	89 f0                	mov    eax,esi
c002535f:	31 d2                	xor    edx,edx
c0025361:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025365:	f7 f7                	div    edi
c0025367:	89 e8                	mov    eax,ebp
c0025369:	f7 f7                	div    edi
c002536b:	89 d6                	mov    esi,edx
c002536d:	eb bd                	jmp    c002532c <__moddi3+0x50>
c002536f:	90                   	nop
c0025370:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025374:	39 f7                	cmp    edi,esi
c0025376:	76 20                	jbe    c0025398 <__moddi3+0xbc>
c0025378:	89 c8                	mov    eax,ecx
c002537a:	89 f2                	mov    edx,esi
c002537c:	eb b2                	jmp    c0025330 <__moddi3+0x54>
c002537e:	66 90                	xchg   ax,ax
c0025380:	f7 d9                	neg    ecx
c0025382:	83 d3 00             	adc    ebx,0x0
c0025385:	f7 db                	neg    ebx
c0025387:	89 de                	mov    esi,ebx
c0025389:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025391:	e9 6f ff ff ff       	jmp    c0025305 <__moddi3+0x29>
c0025396:	66 90                	xchg   ax,ax
c0025398:	0f bd c7             	bsr    eax,edi
c002539b:	83 f0 1f             	xor    eax,0x1f
c002539e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00253a2:	75 24                	jne    c00253c8 <__moddi3+0xec>
c00253a4:	39 f7                	cmp    edi,esi
c00253a6:	72 06                	jb     c00253ae <__moddi3+0xd2>
c00253a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00253ac:	77 0c                	ja     c00253ba <__moddi3+0xde>
c00253ae:	89 e9                	mov    ecx,ebp
c00253b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00253b4:	19 fe                	sbb    esi,edi
c00253b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00253ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253be:	89 f2                	mov    edx,esi
c00253c0:	e9 6b ff ff ff       	jmp    c0025330 <__moddi3+0x54>
c00253c5:	8d 76 00             	lea    esi,[esi+0x0]
c00253c8:	b8 20 00 00 00       	mov    eax,0x20
c00253cd:	89 c2                	mov    edx,eax
c00253cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00253d3:	29 da                	sub    edx,ebx
c00253d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00253d9:	88 d9                	mov    cl,bl
c00253db:	d3 e7                	shl    edi,cl
c00253dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253e1:	88 d1                	mov    cl,dl
c00253e3:	d3 e8                	shr    eax,cl
c00253e5:	09 c7                	or     edi,eax
c00253e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00253eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00253ef:	89 d8                	mov    eax,ebx
c00253f1:	88 d9                	mov    cl,bl
c00253f3:	d3 e7                	shl    edi,cl
c00253f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00253f9:	89 f3                	mov    ebx,esi
c00253fb:	88 d1                	mov    cl,dl
c00253fd:	d3 eb                	shr    ebx,cl
c00253ff:	89 c7                	mov    edi,eax
c0025401:	88 c1                	mov    cl,al
c0025403:	d3 e6                	shl    esi,cl
c0025405:	89 e8                	mov    eax,ebp
c0025407:	88 d1                	mov    cl,dl
c0025409:	d3 e8                	shr    eax,cl
c002540b:	09 f0                	or     eax,esi
c002540d:	89 f9                	mov    ecx,edi
c002540f:	d3 e5                	shl    ebp,cl
c0025411:	89 da                	mov    edx,ebx
c0025413:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025417:	89 d3                	mov    ebx,edx
c0025419:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002541d:	89 c6                	mov    esi,eax
c002541f:	89 d1                	mov    ecx,edx
c0025421:	39 d3                	cmp    ebx,edx
c0025423:	72 27                	jb     c002544c <__moddi3+0x170>
c0025425:	74 21                	je     c0025448 <__moddi3+0x16c>
c0025427:	29 f5                	sub    ebp,esi
c0025429:	19 cb                	sbb    ebx,ecx
c002542b:	89 de                	mov    esi,ebx
c002542d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025431:	d3 e6                	shl    esi,cl
c0025433:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025437:	89 f9                	mov    ecx,edi
c0025439:	d3 ed                	shr    ebp,cl
c002543b:	09 ee                	or     esi,ebp
c002543d:	89 f0                	mov    eax,esi
c002543f:	d3 eb                	shr    ebx,cl
c0025441:	89 da                	mov    edx,ebx
c0025443:	e9 e8 fe ff ff       	jmp    c0025330 <__moddi3+0x54>
c0025448:	39 c5                	cmp    ebp,eax
c002544a:	73 db                	jae    c0025427 <__moddi3+0x14b>
c002544c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025450:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025454:	89 d1                	mov    ecx,edx
c0025456:	89 c6                	mov    esi,eax
c0025458:	eb cd                	jmp    c0025427 <__moddi3+0x14b>
c002545a:	66 90                	xchg   ax,ax

c002545c <__udivdi3>:
c002545c:	55                   	push   ebp
c002545d:	57                   	push   edi
c002545e:	56                   	push   esi
c002545f:	53                   	push   ebx
c0025460:	83 ec 1c             	sub    esp,0x1c
c0025463:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025467:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002546b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002546f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025473:	85 d2                	test   edx,edx
c0025475:	75 41                	jne    c00254b8 <__udivdi3+0x5c>
c0025477:	39 f7                	cmp    edi,esi
c0025479:	76 15                	jbe    c0025490 <__udivdi3+0x34>
c002547b:	89 e8                	mov    eax,ebp
c002547d:	89 f2                	mov    edx,esi
c002547f:	f7 f7                	div    edi
c0025481:	31 db                	xor    ebx,ebx
c0025483:	89 da                	mov    edx,ebx
c0025485:	83 c4 1c             	add    esp,0x1c
c0025488:	5b                   	pop    ebx
c0025489:	5e                   	pop    esi
c002548a:	5f                   	pop    edi
c002548b:	5d                   	pop    ebp
c002548c:	c3                   	ret    
c002548d:	8d 76 00             	lea    esi,[esi+0x0]
c0025490:	89 f9                	mov    ecx,edi
c0025492:	85 ff                	test   edi,edi
c0025494:	75 0b                	jne    c00254a1 <__udivdi3+0x45>
c0025496:	b8 01 00 00 00       	mov    eax,0x1
c002549b:	31 d2                	xor    edx,edx
c002549d:	f7 f7                	div    edi
c002549f:	89 c1                	mov    ecx,eax
c00254a1:	31 d2                	xor    edx,edx
c00254a3:	89 f0                	mov    eax,esi
c00254a5:	f7 f1                	div    ecx
c00254a7:	89 c3                	mov    ebx,eax
c00254a9:	89 e8                	mov    eax,ebp
c00254ab:	f7 f1                	div    ecx
c00254ad:	89 da                	mov    edx,ebx
c00254af:	83 c4 1c             	add    esp,0x1c
c00254b2:	5b                   	pop    ebx
c00254b3:	5e                   	pop    esi
c00254b4:	5f                   	pop    edi
c00254b5:	5d                   	pop    ebp
c00254b6:	c3                   	ret    
c00254b7:	90                   	nop
c00254b8:	39 f2                	cmp    edx,esi
c00254ba:	77 1c                	ja     c00254d8 <__udivdi3+0x7c>
c00254bc:	0f bd da             	bsr    ebx,edx
c00254bf:	83 f3 1f             	xor    ebx,0x1f
c00254c2:	75 24                	jne    c00254e8 <__udivdi3+0x8c>
c00254c4:	39 f2                	cmp    edx,esi
c00254c6:	72 08                	jb     c00254d0 <__udivdi3+0x74>
c00254c8:	39 ef                	cmp    edi,ebp
c00254ca:	0f 87 84 00 00 00    	ja     c0025554 <__udivdi3+0xf8>
c00254d0:	b8 01 00 00 00       	mov    eax,0x1
c00254d5:	eb ac                	jmp    c0025483 <__udivdi3+0x27>
c00254d7:	90                   	nop
c00254d8:	31 db                	xor    ebx,ebx
c00254da:	31 c0                	xor    eax,eax
c00254dc:	89 da                	mov    edx,ebx
c00254de:	83 c4 1c             	add    esp,0x1c
c00254e1:	5b                   	pop    ebx
c00254e2:	5e                   	pop    esi
c00254e3:	5f                   	pop    edi
c00254e4:	5d                   	pop    ebp
c00254e5:	c3                   	ret    
c00254e6:	66 90                	xchg   ax,ax
c00254e8:	b8 20 00 00 00       	mov    eax,0x20
c00254ed:	29 d8                	sub    eax,ebx
c00254ef:	88 d9                	mov    cl,bl
c00254f1:	d3 e2                	shl    edx,cl
c00254f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00254f7:	89 fa                	mov    edx,edi
c00254f9:	88 c1                	mov    cl,al
c00254fb:	d3 ea                	shr    edx,cl
c00254fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025501:	09 d1                	or     ecx,edx
c0025503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025507:	88 d9                	mov    cl,bl
c0025509:	d3 e7                	shl    edi,cl
c002550b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002550f:	89 f7                	mov    edi,esi
c0025511:	88 c1                	mov    cl,al
c0025513:	d3 ef                	shr    edi,cl
c0025515:	88 d9                	mov    cl,bl
c0025517:	d3 e6                	shl    esi,cl
c0025519:	89 ea                	mov    edx,ebp
c002551b:	88 c1                	mov    cl,al
c002551d:	d3 ea                	shr    edx,cl
c002551f:	09 d6                	or     esi,edx
c0025521:	89 f0                	mov    eax,esi
c0025523:	89 fa                	mov    edx,edi
c0025525:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025529:	89 d7                	mov    edi,edx
c002552b:	89 c6                	mov    esi,eax
c002552d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025531:	39 d7                	cmp    edi,edx
c0025533:	72 13                	jb     c0025548 <__udivdi3+0xec>
c0025535:	74 09                	je     c0025540 <__udivdi3+0xe4>
c0025537:	89 f0                	mov    eax,esi
c0025539:	31 db                	xor    ebx,ebx
c002553b:	e9 43 ff ff ff       	jmp    c0025483 <__udivdi3+0x27>
c0025540:	88 d9                	mov    cl,bl
c0025542:	d3 e5                	shl    ebp,cl
c0025544:	39 c5                	cmp    ebp,eax
c0025546:	73 ef                	jae    c0025537 <__udivdi3+0xdb>
c0025548:	8d 46 ff             	lea    eax,[esi-0x1]
c002554b:	31 db                	xor    ebx,ebx
c002554d:	e9 31 ff ff ff       	jmp    c0025483 <__udivdi3+0x27>
c0025552:	66 90                	xchg   ax,ax
c0025554:	31 c0                	xor    eax,eax
c0025556:	e9 28 ff ff ff       	jmp    c0025483 <__udivdi3+0x27>
c002555b:	90                   	nop

c002555c <__umoddi3>:
c002555c:	55                   	push   ebp
c002555d:	57                   	push   edi
c002555e:	56                   	push   esi
c002555f:	53                   	push   ebx
c0025560:	83 ec 1c             	sub    esp,0x1c
c0025563:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025567:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002556b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002556f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025573:	89 da                	mov    edx,ebx
c0025575:	85 c0                	test   eax,eax
c0025577:	75 37                	jne    c00255b0 <__umoddi3+0x54>
c0025579:	39 df                	cmp    edi,ebx
c002557b:	76 13                	jbe    c0025590 <__umoddi3+0x34>
c002557d:	89 f0                	mov    eax,esi
c002557f:	f7 f7                	div    edi
c0025581:	89 d0                	mov    eax,edx
c0025583:	31 d2                	xor    edx,edx
c0025585:	83 c4 1c             	add    esp,0x1c
c0025588:	5b                   	pop    ebx
c0025589:	5e                   	pop    esi
c002558a:	5f                   	pop    edi
c002558b:	5d                   	pop    ebp
c002558c:	c3                   	ret    
c002558d:	8d 76 00             	lea    esi,[esi+0x0]
c0025590:	89 fd                	mov    ebp,edi
c0025592:	85 ff                	test   edi,edi
c0025594:	75 0b                	jne    c00255a1 <__umoddi3+0x45>
c0025596:	b8 01 00 00 00       	mov    eax,0x1
c002559b:	31 d2                	xor    edx,edx
c002559d:	f7 f7                	div    edi
c002559f:	89 c5                	mov    ebp,eax
c00255a1:	89 d8                	mov    eax,ebx
c00255a3:	31 d2                	xor    edx,edx
c00255a5:	f7 f5                	div    ebp
c00255a7:	89 f0                	mov    eax,esi
c00255a9:	f7 f5                	div    ebp
c00255ab:	89 d0                	mov    eax,edx
c00255ad:	eb d4                	jmp    c0025583 <__umoddi3+0x27>
c00255af:	90                   	nop
c00255b0:	89 f1                	mov    ecx,esi
c00255b2:	39 d8                	cmp    eax,ebx
c00255b4:	76 0a                	jbe    c00255c0 <__umoddi3+0x64>
c00255b6:	89 f0                	mov    eax,esi
c00255b8:	83 c4 1c             	add    esp,0x1c
c00255bb:	5b                   	pop    ebx
c00255bc:	5e                   	pop    esi
c00255bd:	5f                   	pop    edi
c00255be:	5d                   	pop    ebp
c00255bf:	c3                   	ret    
c00255c0:	0f bd e8             	bsr    ebp,eax
c00255c3:	83 f5 1f             	xor    ebp,0x1f
c00255c6:	75 1c                	jne    c00255e4 <__umoddi3+0x88>
c00255c8:	39 d8                	cmp    eax,ebx
c00255ca:	72 04                	jb     c00255d0 <__umoddi3+0x74>
c00255cc:	39 f7                	cmp    edi,esi
c00255ce:	77 08                	ja     c00255d8 <__umoddi3+0x7c>
c00255d0:	89 da                	mov    edx,ebx
c00255d2:	29 fe                	sub    esi,edi
c00255d4:	19 c2                	sbb    edx,eax
c00255d6:	89 f1                	mov    ecx,esi
c00255d8:	89 c8                	mov    eax,ecx
c00255da:	83 c4 1c             	add    esp,0x1c
c00255dd:	5b                   	pop    ebx
c00255de:	5e                   	pop    esi
c00255df:	5f                   	pop    edi
c00255e0:	5d                   	pop    ebp
c00255e1:	c3                   	ret    
c00255e2:	66 90                	xchg   ax,ax
c00255e4:	ba 20 00 00 00       	mov    edx,0x20
c00255e9:	29 ea                	sub    edx,ebp
c00255eb:	89 e9                	mov    ecx,ebp
c00255ed:	d3 e0                	shl    eax,cl
c00255ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00255f3:	89 f8                	mov    eax,edi
c00255f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00255f9:	88 d1                	mov    cl,dl
c00255fb:	d3 e8                	shr    eax,cl
c00255fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025601:	09 c1                	or     ecx,eax
c0025603:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025607:	89 e9                	mov    ecx,ebp
c0025609:	d3 e7                	shl    edi,cl
c002560b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002560f:	89 d8                	mov    eax,ebx
c0025611:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025615:	88 d1                	mov    cl,dl
c0025617:	d3 e8                	shr    eax,cl
c0025619:	89 c7                	mov    edi,eax
c002561b:	89 e9                	mov    ecx,ebp
c002561d:	d3 e3                	shl    ebx,cl
c002561f:	89 f0                	mov    eax,esi
c0025621:	88 d1                	mov    cl,dl
c0025623:	d3 e8                	shr    eax,cl
c0025625:	09 d8                	or     eax,ebx
c0025627:	89 e9                	mov    ecx,ebp
c0025629:	d3 e6                	shl    esi,cl
c002562b:	89 f3                	mov    ebx,esi
c002562d:	89 fa                	mov    edx,edi
c002562f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025633:	89 d1                	mov    ecx,edx
c0025635:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025639:	89 c6                	mov    esi,eax
c002563b:	89 d7                	mov    edi,edx
c002563d:	39 d1                	cmp    ecx,edx
c002563f:	72 27                	jb     c0025668 <__umoddi3+0x10c>
c0025641:	74 21                	je     c0025664 <__umoddi3+0x108>
c0025643:	89 ca                	mov    edx,ecx
c0025645:	29 f3                	sub    ebx,esi
c0025647:	19 fa                	sbb    edx,edi
c0025649:	89 d0                	mov    eax,edx
c002564b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002564f:	d3 e0                	shl    eax,cl
c0025651:	89 e9                	mov    ecx,ebp
c0025653:	d3 eb                	shr    ebx,cl
c0025655:	09 d8                	or     eax,ebx
c0025657:	d3 ea                	shr    edx,cl
c0025659:	83 c4 1c             	add    esp,0x1c
c002565c:	5b                   	pop    ebx
c002565d:	5e                   	pop    esi
c002565e:	5f                   	pop    edi
c002565f:	5d                   	pop    ebp
c0025660:	c3                   	ret    
c0025661:	8d 76 00             	lea    esi,[esi+0x0]
c0025664:	39 c3                	cmp    ebx,eax
c0025666:	73 db                	jae    c0025643 <__umoddi3+0xe7>
c0025668:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002566c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025670:	89 d7                	mov    edi,edx
c0025672:	89 c6                	mov    esi,eax
c0025674:	eb cd                	jmp    c0025643 <__umoddi3+0xe7>

c0025676 <__addsf3>:
c0025676:	55                   	push   ebp
c0025677:	89 e5                	mov    ebp,esp
c0025679:	57                   	push   edi
c002567a:	56                   	push   esi
c002567b:	53                   	push   ebx
c002567c:	83 ec 08             	sub    esp,0x8
c002567f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025682:	89 fa                	mov    edx,edi
c0025684:	89 f8                	mov    eax,edi
c0025686:	c1 f8 17             	sar    eax,0x17
c0025689:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002568c:	c1 e2 08             	shl    edx,0x8
c002568f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025695:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025698:	89 de                	mov    esi,ebx
c002569a:	c1 fe 17             	sar    esi,0x17
c002569d:	c1 e3 08             	shl    ebx,0x8
c00256a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00256a6:	31 f0                	xor    eax,esi
c00256a8:	0f 88 3b 01 00 00    	js     c00257e9 <__addsf3+0x173>
c00256ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00256b1:	29 f1                	sub    ecx,esi
c00256b3:	85 c9                	test   ecx,ecx
c00256b5:	7e 54                	jle    c002570b <__addsf3+0x95>
c00256b7:	89 f0                	mov    eax,esi
c00256b9:	84 c0                	test   al,al
c00256bb:	75 10                	jne    c00256cd <__addsf3+0x57>
c00256bd:	85 db                	test   ebx,ebx
c00256bf:	0f 84 aa 02 00 00    	je     c002596f <__addsf3+0x2f9>
c00256c5:	49                   	dec    ecx
c00256c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00256c9:	74 38                	je     c0025703 <__addsf3+0x8d>
c00256cb:	eb 13                	jmp    c00256e0 <__addsf3+0x6a>
c00256cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256d0:	f7 d0                	not    eax
c00256d2:	84 c0                	test   al,al
c00256d4:	0f 84 95 02 00 00    	je     c002596f <__addsf3+0x2f9>
c00256da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00256e0:	83 f9 1f             	cmp    ecx,0x1f
c00256e3:	0f 8f 86 02 00 00    	jg     c002596f <__addsf3+0x2f9>
c00256e9:	89 de                	mov    esi,ebx
c00256eb:	d3 ee                	shr    esi,cl
c00256ed:	b8 20 00 00 00       	mov    eax,0x20
c00256f2:	29 c8                	sub    eax,ecx
c00256f4:	89 c1                	mov    ecx,eax
c00256f6:	d3 e3                	shl    ebx,cl
c00256f8:	31 c0                	xor    eax,eax
c00256fa:	85 db                	test   ebx,ebx
c00256fc:	0f 95 c0             	setne  al
c00256ff:	09 f0                	or     eax,esi
c0025701:	01 d0                	add    eax,edx
c0025703:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025706:	e9 b6 00 00 00       	jmp    c00257c1 <__addsf3+0x14b>
c002570b:	74 5c                	je     c0025769 <__addsf3+0xf3>
c002570d:	89 f1                	mov    ecx,esi
c002570f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025712:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025715:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025719:	75 14                	jne    c002572f <__addsf3+0xb9>
c002571b:	85 d2                	test   edx,edx
c002571d:	0f 84 4c 02 00 00    	je     c002596f <__addsf3+0x2f9>
c0025723:	49                   	dec    ecx
c0025724:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025727:	0f 84 94 00 00 00    	je     c00257c1 <__addsf3+0x14b>
c002572d:	eb 12                	jmp    c0025741 <__addsf3+0xcb>
c002572f:	89 f0                	mov    eax,esi
c0025731:	f7 d0                	not    eax
c0025733:	84 c0                	test   al,al
c0025735:	0f 84 34 02 00 00    	je     c002596f <__addsf3+0x2f9>
c002573b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025741:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025744:	83 f9 1f             	cmp    ecx,0x1f
c0025747:	0f 8f 22 02 00 00    	jg     c002596f <__addsf3+0x2f9>
c002574d:	89 d7                	mov    edi,edx
c002574f:	d3 ef                	shr    edi,cl
c0025751:	b8 20 00 00 00       	mov    eax,0x20
c0025756:	29 c8                	sub    eax,ecx
c0025758:	89 c1                	mov    ecx,eax
c002575a:	d3 e2                	shl    edx,cl
c002575c:	31 c0                	xor    eax,eax
c002575e:	85 d2                	test   edx,edx
c0025760:	0f 95 c0             	setne  al
c0025763:	09 f8                	or     eax,edi
c0025765:	01 d8                	add    eax,ebx
c0025767:	eb 58                	jmp    c00257c1 <__addsf3+0x14b>
c0025769:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002576c:	8d 70 01             	lea    esi,[eax+0x1]
c002576f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025775:	75 32                	jne    c00257a9 <__addsf3+0x133>
c0025777:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002577b:	75 1f                	jne    c002579c <__addsf3+0x126>
c002577d:	85 d2                	test   edx,edx
c002577f:	0f 84 e0 01 00 00    	je     c0025965 <__addsf3+0x2ef>
c0025785:	85 db                	test   ebx,ebx
c0025787:	0f 84 e2 01 00 00    	je     c002596f <__addsf3+0x2f9>
c002578d:	89 d0                	mov    eax,edx
c002578f:	01 d8                	add    eax,ebx
c0025791:	0f 89 a9 01 00 00    	jns    c0025940 <__addsf3+0x2ca>
c0025797:	e9 9d 01 00 00       	jmp    c0025939 <__addsf3+0x2c3>
c002579c:	85 d2                	test   edx,edx
c002579e:	0f 85 cb 01 00 00    	jne    c002596f <__addsf3+0x2f9>
c00257a4:	e9 bc 01 00 00       	jmp    c0025965 <__addsf3+0x2ef>
c00257a9:	31 c0                	xor    eax,eax
c00257ab:	89 f1                	mov    ecx,esi
c00257ad:	f7 d1                	not    ecx
c00257af:	84 c9                	test   cl,cl
c00257b1:	0f 84 90 01 00 00    	je     c0025947 <__addsf3+0x2d1>
c00257b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00257ba:	d1 e8                	shr    eax,1
c00257bc:	e9 86 01 00 00       	jmp    c0025947 <__addsf3+0x2d1>
c00257c1:	85 c0                	test   eax,eax
c00257c3:	0f 89 7e 01 00 00    	jns    c0025947 <__addsf3+0x2d1>
c00257c9:	46                   	inc    esi
c00257ca:	89 f2                	mov    edx,esi
c00257cc:	f7 d2                	not    edx
c00257ce:	84 d2                	test   dl,dl
c00257d0:	0f 84 6f 01 00 00    	je     c0025945 <__addsf3+0x2cf>
c00257d6:	89 c2                	mov    edx,eax
c00257d8:	83 e2 01             	and    edx,0x1
c00257db:	d1 e8                	shr    eax,1
c00257dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00257e2:	09 d0                	or     eax,edx
c00257e4:	e9 5e 01 00 00       	jmp    c0025947 <__addsf3+0x2d1>
c00257e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00257ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00257f0:	89 f0                	mov    eax,esi
c00257f2:	0f b6 c0             	movzx  eax,al
c00257f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00257f8:	29 c1                	sub    ecx,eax
c00257fa:	85 c9                	test   ecx,ecx
c00257fc:	7e 55                	jle    c0025853 <__addsf3+0x1dd>
c00257fe:	85 c0                	test   eax,eax
c0025800:	75 11                	jne    c0025813 <__addsf3+0x19d>
c0025802:	85 db                	test   ebx,ebx
c0025804:	0f 84 65 01 00 00    	je     c002596f <__addsf3+0x2f9>
c002580a:	49                   	dec    ecx
c002580b:	75 19                	jne    c0025826 <__addsf3+0x1b0>
c002580d:	89 d0                	mov    eax,edx
c002580f:	29 d8                	sub    eax,ebx
c0025811:	eb 38                	jmp    c002584b <__addsf3+0x1d5>
c0025813:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025816:	f7 d0                	not    eax
c0025818:	84 c0                	test   al,al
c002581a:	0f 84 4f 01 00 00    	je     c002596f <__addsf3+0x2f9>
c0025820:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025826:	83 f9 1f             	cmp    ecx,0x1f
c0025829:	0f 8f 40 01 00 00    	jg     c002596f <__addsf3+0x2f9>
c002582f:	89 de                	mov    esi,ebx
c0025831:	d3 ee                	shr    esi,cl
c0025833:	b8 20 00 00 00       	mov    eax,0x20
c0025838:	29 c8                	sub    eax,ecx
c002583a:	89 c1                	mov    ecx,eax
c002583c:	d3 e3                	shl    ebx,cl
c002583e:	31 c0                	xor    eax,eax
c0025840:	85 db                	test   ebx,ebx
c0025842:	0f 95 c0             	setne  al
c0025845:	09 f0                	or     eax,esi
c0025847:	29 c2                	sub    edx,eax
c0025849:	89 d0                	mov    eax,edx
c002584b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002584e:	e9 af 00 00 00       	jmp    c0025902 <__addsf3+0x28c>
c0025853:	74 5c                	je     c00258b1 <__addsf3+0x23b>
c0025855:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025858:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002585b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002585f:	75 14                	jne    c0025875 <__addsf3+0x1ff>
c0025861:	85 d2                	test   edx,edx
c0025863:	0f 84 06 01 00 00    	je     c002596f <__addsf3+0x2f9>
c0025869:	48                   	dec    eax
c002586a:	75 1b                	jne    c0025887 <__addsf3+0x211>
c002586c:	89 d8                	mov    eax,ebx
c002586e:	29 d0                	sub    eax,edx
c0025870:	e9 8d 00 00 00       	jmp    c0025902 <__addsf3+0x28c>
c0025875:	89 f1                	mov    ecx,esi
c0025877:	f7 d1                	not    ecx
c0025879:	84 c9                	test   cl,cl
c002587b:	0f 84 ee 00 00 00    	je     c002596f <__addsf3+0x2f9>
c0025881:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025887:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002588a:	83 f8 1f             	cmp    eax,0x1f
c002588d:	0f 8f dc 00 00 00    	jg     c002596f <__addsf3+0x2f9>
c0025893:	89 d7                	mov    edi,edx
c0025895:	88 c1                	mov    cl,al
c0025897:	d3 ef                	shr    edi,cl
c0025899:	b9 20 00 00 00       	mov    ecx,0x20
c002589e:	29 c1                	sub    ecx,eax
c00258a0:	d3 e2                	shl    edx,cl
c00258a2:	31 c0                	xor    eax,eax
c00258a4:	85 d2                	test   edx,edx
c00258a6:	0f 95 c0             	setne  al
c00258a9:	09 f8                	or     eax,edi
c00258ab:	29 c3                	sub    ebx,eax
c00258ad:	89 d8                	mov    eax,ebx
c00258af:	eb 51                	jmp    c0025902 <__addsf3+0x28c>
c00258b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258b4:	40                   	inc    eax
c00258b5:	a8 fe                	test   al,0xfe
c00258b7:	75 3d                	jne    c00258f6 <__addsf3+0x280>
c00258b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00258bd:	0f 85 a7 00 00 00    	jne    c002596a <__addsf3+0x2f4>
c00258c3:	85 d2                	test   edx,edx
c00258c5:	75 12                	jne    c00258d9 <__addsf3+0x263>
c00258c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258ca:	85 db                	test   ebx,ebx
c00258cc:	0f 85 9d 00 00 00    	jne    c002596f <__addsf3+0x2f9>
c00258d2:	31 ff                	xor    edi,edi
c00258d4:	e9 96 00 00 00       	jmp    c002596f <__addsf3+0x2f9>
c00258d9:	85 db                	test   ebx,ebx
c00258db:	0f 84 8e 00 00 00    	je     c002596f <__addsf3+0x2f9>
c00258e1:	89 d0                	mov    eax,edx
c00258e3:	29 d8                	sub    eax,ebx
c00258e5:	79 06                	jns    c00258ed <__addsf3+0x277>
c00258e7:	89 d8                	mov    eax,ebx
c00258e9:	29 d0                	sub    eax,edx
c00258eb:	eb 5a                	jmp    c0025947 <__addsf3+0x2d1>
c00258ed:	bf 00 00 00 00       	mov    edi,0x0
c00258f2:	74 7b                	je     c002596f <__addsf3+0x2f9>
c00258f4:	eb 4a                	jmp    c0025940 <__addsf3+0x2ca>
c00258f6:	89 d0                	mov    eax,edx
c00258f8:	29 d8                	sub    eax,ebx
c00258fa:	79 12                	jns    c002590e <__addsf3+0x298>
c00258fc:	89 d8                	mov    eax,ebx
c00258fe:	29 d0                	sub    eax,edx
c0025900:	eb 09                	jmp    c002590b <__addsf3+0x295>
c0025902:	85 c0                	test   eax,eax
c0025904:	79 41                	jns    c0025947 <__addsf3+0x2d1>
c0025906:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002590b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002590e:	31 f6                	xor    esi,esi
c0025910:	85 c0                	test   eax,eax
c0025912:	74 33                	je     c0025947 <__addsf3+0x2d1>
c0025914:	0f bd c8             	bsr    ecx,eax
c0025917:	83 f1 1f             	xor    ecx,0x1f
c002591a:	d3 e0                	shl    eax,cl
c002591c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025920:	39 ca                	cmp    edx,ecx
c0025922:	7f 10                	jg     c0025934 <__addsf3+0x2be>
c0025924:	29 d1                	sub    ecx,edx
c0025926:	41                   	inc    ecx
c0025927:	d3 e8                	shr    eax,cl
c0025929:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002592c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025932:	eb 13                	jmp    c0025947 <__addsf3+0x2d1>
c0025934:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025937:	29 ce                	sub    esi,ecx
c0025939:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002593e:	eb 07                	jmp    c0025947 <__addsf3+0x2d1>
c0025940:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025943:	eb 02                	jmp    c0025947 <__addsf3+0x2d1>
c0025945:	31 c0                	xor    eax,eax
c0025947:	89 c2                	mov    edx,eax
c0025949:	c1 ea 08             	shr    edx,0x8
c002594c:	a8 7f                	test   al,0x7f
c002594e:	0f 95 c1             	setne  cl
c0025951:	09 d1                	or     ecx,edx
c0025953:	83 e1 01             	and    ecx,0x1
c0025956:	c1 e8 07             	shr    eax,0x7
c0025959:	21 c8                	and    eax,ecx
c002595b:	c1 e6 17             	shl    esi,0x17
c002595e:	09 d6                	or     esi,edx
c0025960:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025963:	eb 0a                	jmp    c002596f <__addsf3+0x2f9>
c0025965:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025968:	eb 05                	jmp    c002596f <__addsf3+0x2f9>
c002596a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002596f:	89 f8                	mov    eax,edi
c0025971:	5a                   	pop    edx
c0025972:	59                   	pop    ecx
c0025973:	5b                   	pop    ebx
c0025974:	5e                   	pop    esi
c0025975:	5f                   	pop    edi
c0025976:	5d                   	pop    ebp
c0025977:	c3                   	ret    

c0025978 <__subsf3>:
c0025978:	55                   	push   ebp
c0025979:	89 e5                	mov    ebp,esp
c002597b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002597e:	05 00 00 00 80       	add    eax,0x80000000
c0025983:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025986:	5d                   	pop    ebp
c0025987:	e9 ea fc ff ff       	jmp    c0025676 <__addsf3>

c002598c <__negsf2>:
c002598c:	55                   	push   ebp
c002598d:	89 e5                	mov    ebp,esp
c002598f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025992:	05 00 00 00 80       	add    eax,0x80000000
c0025997:	5d                   	pop    ebp
c0025998:	c3                   	ret    

c0025999 <__mulsf3>:
c0025999:	55                   	push   ebp
c002599a:	89 e5                	mov    ebp,esp
c002599c:	57                   	push   edi
c002599d:	56                   	push   esi
c002599e:	53                   	push   ebx
c002599f:	83 ec 1c             	sub    esp,0x1c
c00259a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00259a5:	89 f0                	mov    eax,esi
c00259a7:	89 f1                	mov    ecx,esi
c00259a9:	c1 f9 17             	sar    ecx,0x17
c00259ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00259af:	c1 e0 08             	shl    eax,0x8
c00259b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00259b7:	89 c1                	mov    ecx,eax
c00259b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259bf:	89 c7                	mov    edi,eax
c00259c1:	c1 ff 17             	sar    edi,0x17
c00259c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00259cb:	89 f8                	mov    eax,edi
c00259cd:	0f b6 c0             	movzx  eax,al
c00259d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00259d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00259d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00259da:	42                   	inc    edx
c00259db:	80 e2 fe             	and    dl,0xfe
c00259de:	75 7b                	jne    c0025a5b <__mulsf3+0xc2>
c00259e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00259e4:	74 54                	je     c0025a3a <__mulsf3+0xa1>
c00259e6:	85 c9                	test   ecx,ecx
c00259e8:	0f 85 64 01 00 00    	jne    c0025b52 <__mulsf3+0x1b9>
c00259ee:	8d 57 01             	lea    edx,[edi+0x1]
c00259f1:	80 e2 fe             	and    dl,0xfe
c00259f4:	75 1f                	jne    c0025a15 <__mulsf3+0x7c>
c00259f6:	85 c0                	test   eax,eax
c00259f8:	b8 00 00 00 00       	mov    eax,0x0
c00259fd:	74 29                	je     c0025a28 <__mulsf3+0x8f>
c00259ff:	53                   	push   ebx
c0025a00:	53                   	push   ebx
c0025a01:	50                   	push   eax
c0025a02:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a05:	e8 96 05 00 00       	call   c0025fa0 <__nesf2>
c0025a0a:	83 c4 10             	add    esp,0x10
c0025a0d:	85 c0                	test   eax,eax
c0025a0f:	0f 85 3a 01 00 00    	jne    c0025b4f <__mulsf3+0x1b6>
c0025a15:	85 ff                	test   edi,edi
c0025a17:	0f 89 35 01 00 00    	jns    c0025b52 <__mulsf3+0x1b9>
c0025a1d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025a23:	e9 2a 01 00 00       	jmp    c0025b52 <__mulsf3+0x1b9>
c0025a28:	51                   	push   ecx
c0025a29:	51                   	push   ecx
c0025a2a:	50                   	push   eax
c0025a2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a2e:	e8 6d 05 00 00       	call   c0025fa0 <__nesf2>
c0025a33:	83 c4 10             	add    esp,0x10
c0025a36:	85 c0                	test   eax,eax
c0025a38:	eb 15                	jmp    c0025a4f <__mulsf3+0xb6>
c0025a3a:	85 c9                	test   ecx,ecx
c0025a3c:	74 0b                	je     c0025a49 <__mulsf3+0xb0>
c0025a3e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025a41:	01 c9                	add    ecx,ecx
c0025a43:	78 16                	js     c0025a5b <__mulsf3+0xc2>
c0025a45:	89 d3                	mov    ebx,edx
c0025a47:	eb f5                	jmp    c0025a3e <__mulsf3+0xa5>
c0025a49:	89 f8                	mov    eax,edi
c0025a4b:	f7 d0                	not    eax
c0025a4d:	84 c0                	test   al,al
c0025a4f:	75 c4                	jne    c0025a15 <__mulsf3+0x7c>
c0025a51:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025a56:	e9 f7 00 00 00       	jmp    c0025b52 <__mulsf3+0x1b9>
c0025a5b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025a5e:	c1 e6 08             	shl    esi,0x8
c0025a61:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025a67:	8d 57 01             	lea    edx,[edi+0x1]
c0025a6a:	80 e2 fe             	and    dl,0xfe
c0025a6d:	75 63                	jne    c0025ad2 <__mulsf3+0x139>
c0025a6f:	85 c0                	test   eax,eax
c0025a71:	74 2f                	je     c0025aa2 <__mulsf3+0x109>
c0025a73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a77:	0f 89 d2 00 00 00    	jns    c0025b4f <__mulsf3+0x1b6>
c0025a7d:	52                   	push   edx
c0025a7e:	52                   	push   edx
c0025a7f:	6a 00                	push   0x0
c0025a81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a84:	e8 dc 04 00 00       	call   c0025f65 <__eqsf2>
c0025a89:	83 c4 10             	add    esp,0x10
c0025a8c:	85 c0                	test   eax,eax
c0025a8e:	0f 85 bb 00 00 00    	jne    c0025b4f <__mulsf3+0x1b6>
c0025a94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a97:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025a9d:	e9 b0 00 00 00       	jmp    c0025b52 <__mulsf3+0x1b9>
c0025aa2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025aa5:	50                   	push   eax
c0025aa6:	50                   	push   eax
c0025aa7:	6a 00                	push   0x0
c0025aa9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025aac:	e8 b4 04 00 00       	call   c0025f65 <__eqsf2>
c0025ab1:	83 c4 10             	add    esp,0x10
c0025ab4:	85 c0                	test   eax,eax
c0025ab6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025ab9:	75 0c                	jne    c0025ac7 <__mulsf3+0x12e>
c0025abb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025abf:	0f 89 8a 00 00 00    	jns    c0025b4f <__mulsf3+0x1b6>
c0025ac5:	eb cd                	jmp    c0025a94 <__mulsf3+0xfb>
c0025ac7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025aca:	01 f6                	add    esi,esi
c0025acc:	78 04                	js     c0025ad2 <__mulsf3+0x139>
c0025ace:	89 c3                	mov    ebx,eax
c0025ad0:	eb f5                	jmp    c0025ac7 <__mulsf3+0x12e>
c0025ad2:	89 c8                	mov    eax,ecx
c0025ad4:	0d 00 00 00 80       	or     eax,0x80000000
c0025ad9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025adf:	f7 e6                	mul    esi
c0025ae1:	85 c0                	test   eax,eax
c0025ae3:	0f 95 c0             	setne  al
c0025ae6:	0f b6 c0             	movzx  eax,al
c0025ae9:	09 c2                	or     edx,eax
c0025aeb:	78 03                	js     c0025af0 <__mulsf3+0x157>
c0025aed:	01 d2                	add    edx,edx
c0025aef:	4b                   	dec    ebx
c0025af0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025af6:	7f 22                	jg     c0025b1a <__mulsf3+0x181>
c0025af8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025afe:	85 db                	test   ebx,ebx
c0025b00:	7f 23                	jg     c0025b25 <__mulsf3+0x18c>
c0025b02:	83 fb e9             	cmp    ebx,0xffffffe9
c0025b05:	7c 1a                	jl     c0025b21 <__mulsf3+0x188>
c0025b07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025b0d:	b9 01 00 00 00       	mov    ecx,0x1
c0025b12:	29 d9                	sub    ecx,ebx
c0025b14:	d3 ea                	shr    edx,cl
c0025b16:	31 db                	xor    ebx,ebx
c0025b18:	eb 0b                	jmp    c0025b25 <__mulsf3+0x18c>
c0025b1a:	bb ff 00 00 00       	mov    ebx,0xff
c0025b1f:	eb 02                	jmp    c0025b23 <__mulsf3+0x18a>
c0025b21:	31 db                	xor    ebx,ebx
c0025b23:	31 d2                	xor    edx,edx
c0025b25:	89 d0                	mov    eax,edx
c0025b27:	c1 e8 08             	shr    eax,0x8
c0025b2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025b2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025b33:	09 fb                	or     ebx,edi
c0025b35:	c1 e3 17             	shl    ebx,0x17
c0025b38:	09 c3                	or     ebx,eax
c0025b3a:	f6 c2 7f             	test   dl,0x7f
c0025b3d:	0f 95 c1             	setne  cl
c0025b40:	09 c8                	or     eax,ecx
c0025b42:	83 e0 01             	and    eax,0x1
c0025b45:	c1 ea 07             	shr    edx,0x7
c0025b48:	21 c2                	and    edx,eax
c0025b4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025b4d:	eb 03                	jmp    c0025b52 <__mulsf3+0x1b9>
c0025b4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025b52:	89 f0                	mov    eax,esi
c0025b54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b57:	5b                   	pop    ebx
c0025b58:	5e                   	pop    esi
c0025b59:	5f                   	pop    edi
c0025b5a:	5d                   	pop    ebp
c0025b5b:	c3                   	ret    

c0025b5c <__divsf3>:
c0025b5c:	55                   	push   ebp
c0025b5d:	89 e5                	mov    ebp,esp
c0025b5f:	57                   	push   edi
c0025b60:	56                   	push   esi
c0025b61:	53                   	push   ebx
c0025b62:	83 ec 1c             	sub    esp,0x1c
c0025b65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025b68:	89 d8                	mov    eax,ebx
c0025b6a:	89 d9                	mov    ecx,ebx
c0025b6c:	c1 f9 17             	sar    ecx,0x17
c0025b6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025b72:	c1 e0 08             	shl    eax,0x8
c0025b75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025b7a:	89 c1                	mov    ecx,eax
c0025b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b82:	89 c7                	mov    edi,eax
c0025b84:	c1 ff 17             	sar    edi,0x17
c0025b87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025b8e:	89 f8                	mov    eax,edi
c0025b90:	0f b6 c0             	movzx  eax,al
c0025b93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025b96:	29 c6                	sub    esi,eax
c0025b98:	83 c6 7f             	add    esi,0x7f
c0025b9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025b9e:	42                   	inc    edx
c0025b9f:	80 e2 fe             	and    dl,0xfe
c0025ba2:	0f 85 9c 00 00 00    	jne    c0025c44 <__divsf3+0xe8>
c0025ba8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025bac:	74 33                	je     c0025be1 <__divsf3+0x85>
c0025bae:	85 c9                	test   ecx,ecx
c0025bb0:	0f 85 c7 01 00 00    	jne    c0025d7d <__divsf3+0x221>
c0025bb6:	8d 57 01             	lea    edx,[edi+0x1]
c0025bb9:	80 e2 fe             	and    dl,0xfe
c0025bbc:	75 2f                	jne    c0025bed <__divsf3+0x91>
c0025bbe:	85 c0                	test   eax,eax
c0025bc0:	74 2b                	je     c0025bed <__divsf3+0x91>
c0025bc2:	51                   	push   ecx
c0025bc3:	51                   	push   ecx
c0025bc4:	6a 00                	push   0x0
c0025bc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bc9:	e8 d2 03 00 00       	call   c0025fa0 <__nesf2>
c0025bce:	83 c4 10             	add    esp,0x10
c0025bd1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025bd4:	85 c0                	test   eax,eax
c0025bd6:	0f 85 a1 01 00 00    	jne    c0025d7d <__divsf3+0x221>
c0025bdc:	e9 92 01 00 00       	jmp    c0025d73 <__divsf3+0x217>
c0025be1:	85 c9                	test   ecx,ecx
c0025be3:	75 1b                	jne    c0025c00 <__divsf3+0xa4>
c0025be5:	8d 57 01             	lea    edx,[edi+0x1]
c0025be8:	80 e2 fe             	and    dl,0xfe
c0025beb:	74 1e                	je     c0025c0b <__divsf3+0xaf>
c0025bed:	85 ff                	test   edi,edi
c0025bef:	0f 89 88 01 00 00    	jns    c0025d7d <__divsf3+0x221>
c0025bf5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025bfb:	e9 7d 01 00 00       	jmp    c0025d7d <__divsf3+0x221>
c0025c00:	8d 56 ff             	lea    edx,[esi-0x1]
c0025c03:	01 c9                	add    ecx,ecx
c0025c05:	78 3d                	js     c0025c44 <__divsf3+0xe8>
c0025c07:	89 d6                	mov    esi,edx
c0025c09:	eb f5                	jmp    c0025c00 <__divsf3+0xa4>
c0025c0b:	85 c0                	test   eax,eax
c0025c0d:	b8 00 00 00 00       	mov    eax,0x0
c0025c12:	74 18                	je     c0025c2c <__divsf3+0xd0>
c0025c14:	52                   	push   edx
c0025c15:	52                   	push   edx
c0025c16:	50                   	push   eax
c0025c17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c1a:	e8 81 03 00 00       	call   c0025fa0 <__nesf2>
c0025c1f:	83 c4 10             	add    esp,0x10
c0025c22:	85 c0                	test   eax,eax
c0025c24:	0f 85 50 01 00 00    	jne    c0025d7a <__divsf3+0x21e>
c0025c2a:	eb c1                	jmp    c0025bed <__divsf3+0x91>
c0025c2c:	56                   	push   esi
c0025c2d:	56                   	push   esi
c0025c2e:	50                   	push   eax
c0025c2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c32:	e8 69 03 00 00       	call   c0025fa0 <__nesf2>
c0025c37:	83 c4 10             	add    esp,0x10
c0025c3a:	85 c0                	test   eax,eax
c0025c3c:	0f 84 31 01 00 00    	je     c0025d73 <__divsf3+0x217>
c0025c42:	eb a9                	jmp    c0025bed <__divsf3+0x91>
c0025c44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025c47:	c1 e3 08             	shl    ebx,0x8
c0025c4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025c50:	8d 57 01             	lea    edx,[edi+0x1]
c0025c53:	80 e2 fe             	and    dl,0xfe
c0025c56:	75 71                	jne    c0025cc9 <__divsf3+0x16d>
c0025c58:	85 c0                	test   eax,eax
c0025c5a:	ba 00 00 00 00       	mov    edx,0x0
c0025c5f:	74 2f                	je     c0025c90 <__divsf3+0x134>
c0025c61:	51                   	push   ecx
c0025c62:	51                   	push   ecx
c0025c63:	52                   	push   edx
c0025c64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c67:	e8 f9 02 00 00       	call   c0025f65 <__eqsf2>
c0025c6c:	83 c4 10             	add    esp,0x10
c0025c6f:	85 c0                	test   eax,eax
c0025c71:	0f 85 03 01 00 00    	jne    c0025d7a <__divsf3+0x21e>
c0025c77:	31 d2                	xor    edx,edx
c0025c79:	89 d3                	mov    ebx,edx
c0025c7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c7e:	31 f8                	xor    eax,edi
c0025c80:	0f 89 f7 00 00 00    	jns    c0025d7d <__divsf3+0x221>
c0025c86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025c8b:	e9 ed 00 00 00       	jmp    c0025d7d <__divsf3+0x221>
c0025c90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025c93:	50                   	push   eax
c0025c94:	50                   	push   eax
c0025c95:	52                   	push   edx
c0025c96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c99:	e8 c7 02 00 00       	call   c0025f65 <__eqsf2>
c0025c9e:	83 c4 10             	add    esp,0x10
c0025ca1:	85 c0                	test   eax,eax
c0025ca3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025ca6:	75 16                	jne    c0025cbe <__divsf3+0x162>
c0025ca8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025cab:	31 fb                	xor    ebx,edi
c0025cad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025cb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025cb9:	e9 bf 00 00 00       	jmp    c0025d7d <__divsf3+0x221>
c0025cbe:	8d 46 01             	lea    eax,[esi+0x1]
c0025cc1:	01 db                	add    ebx,ebx
c0025cc3:	78 04                	js     c0025cc9 <__divsf3+0x16d>
c0025cc5:	89 c6                	mov    esi,eax
c0025cc7:	eb f5                	jmp    c0025cbe <__divsf3+0x162>
c0025cc9:	89 c8                	mov    eax,ecx
c0025ccb:	0d 00 00 00 80       	or     eax,0x80000000
c0025cd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025cd6:	31 d2                	xor    edx,edx
c0025cd8:	39 d8                	cmp    eax,ebx
c0025cda:	72 07                	jb     c0025ce3 <__divsf3+0x187>
c0025cdc:	29 d8                	sub    eax,ebx
c0025cde:	ba 01 00 00 00       	mov    edx,0x1
c0025ce3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025cea:	01 d2                	add    edx,edx
c0025cec:	89 c1                	mov    ecx,eax
c0025cee:	01 c0                	add    eax,eax
c0025cf0:	85 c9                	test   ecx,ecx
c0025cf2:	78 04                	js     c0025cf8 <__divsf3+0x19c>
c0025cf4:	39 c3                	cmp    ebx,eax
c0025cf6:	77 05                	ja     c0025cfd <__divsf3+0x1a1>
c0025cf8:	29 d8                	sub    eax,ebx
c0025cfa:	83 ca 01             	or     edx,0x1
c0025cfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025d00:	75 e8                	jne    c0025cea <__divsf3+0x18e>
c0025d02:	85 c0                	test   eax,eax
c0025d04:	0f 95 c0             	setne  al
c0025d07:	0f b6 c0             	movzx  eax,al
c0025d0a:	c1 e2 06             	shl    edx,0x6
c0025d0d:	09 c2                	or     edx,eax
c0025d0f:	78 03                	js     c0025d14 <__divsf3+0x1b8>
c0025d11:	01 d2                	add    edx,edx
c0025d13:	4e                   	dec    esi
c0025d14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025d1a:	7f 22                	jg     c0025d3e <__divsf3+0x1e2>
c0025d1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025d22:	85 f6                	test   esi,esi
c0025d24:	7f 23                	jg     c0025d49 <__divsf3+0x1ed>
c0025d26:	83 fe e9             	cmp    esi,0xffffffe9
c0025d29:	7c 1a                	jl     c0025d45 <__divsf3+0x1e9>
c0025d2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025d31:	b9 01 00 00 00       	mov    ecx,0x1
c0025d36:	29 f1                	sub    ecx,esi
c0025d38:	d3 ea                	shr    edx,cl
c0025d3a:	31 f6                	xor    esi,esi
c0025d3c:	eb 0b                	jmp    c0025d49 <__divsf3+0x1ed>
c0025d3e:	be ff 00 00 00       	mov    esi,0xff
c0025d43:	eb 02                	jmp    c0025d47 <__divsf3+0x1eb>
c0025d45:	31 f6                	xor    esi,esi
c0025d47:	31 d2                	xor    edx,edx
c0025d49:	89 d0                	mov    eax,edx
c0025d4b:	c1 e8 08             	shr    eax,0x8
c0025d4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025d51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025d57:	09 fe                	or     esi,edi
c0025d59:	c1 e6 17             	shl    esi,0x17
c0025d5c:	09 c6                	or     esi,eax
c0025d5e:	f6 c2 7f             	test   dl,0x7f
c0025d61:	0f 95 c1             	setne  cl
c0025d64:	09 c8                	or     eax,ecx
c0025d66:	83 e0 01             	and    eax,0x1
c0025d69:	c1 ea 07             	shr    edx,0x7
c0025d6c:	21 c2                	and    edx,eax
c0025d6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025d71:	eb 0a                	jmp    c0025d7d <__divsf3+0x221>
c0025d73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025d78:	eb 03                	jmp    c0025d7d <__divsf3+0x221>
c0025d7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025d7d:	89 d8                	mov    eax,ebx
c0025d7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d82:	5b                   	pop    ebx
c0025d83:	5e                   	pop    esi
c0025d84:	5f                   	pop    edi
c0025d85:	5d                   	pop    ebp
c0025d86:	c3                   	ret    

c0025d87 <__floatsisf>:
c0025d87:	55                   	push   ebp
c0025d88:	89 e5                	mov    ebp,esp
c0025d8a:	53                   	push   ebx
c0025d8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d8e:	85 d2                	test   edx,edx
c0025d90:	7e 2b                	jle    c0025dbd <__floatsisf+0x36>
c0025d92:	0f bd ca             	bsr    ecx,edx
c0025d95:	83 f1 1f             	xor    ecx,0x1f
c0025d98:	d3 e2                	shl    edx,cl
c0025d9a:	89 d0                	mov    eax,edx
c0025d9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025da1:	89 c3                	mov    ebx,eax
c0025da3:	c1 eb 08             	shr    ebx,0x8
c0025da6:	80 e2 7f             	and    dl,0x7f
c0025da9:	0f 95 c2             	setne  dl
c0025dac:	09 da                	or     edx,ebx
c0025dae:	83 e2 01             	and    edx,0x1
c0025db1:	c1 e8 07             	shr    eax,0x7
c0025db4:	21 c2                	and    edx,eax
c0025db6:	b8 9e 00 00 00       	mov    eax,0x9e
c0025dbb:	eb 32                	jmp    c0025def <__floatsisf+0x68>
c0025dbd:	b8 00 00 00 00       	mov    eax,0x0
c0025dc2:	74 34                	je     c0025df8 <__floatsisf+0x71>
c0025dc4:	f7 da                	neg    edx
c0025dc6:	0f bd ca             	bsr    ecx,edx
c0025dc9:	83 f1 1f             	xor    ecx,0x1f
c0025dcc:	d3 e2                	shl    edx,cl
c0025dce:	89 d0                	mov    eax,edx
c0025dd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025dd5:	89 c3                	mov    ebx,eax
c0025dd7:	c1 eb 08             	shr    ebx,0x8
c0025dda:	80 e2 7f             	and    dl,0x7f
c0025ddd:	0f 95 c2             	setne  dl
c0025de0:	09 da                	or     edx,ebx
c0025de2:	83 e2 01             	and    edx,0x1
c0025de5:	c1 e8 07             	shr    eax,0x7
c0025de8:	21 c2                	and    edx,eax
c0025dea:	b8 9e 01 00 00       	mov    eax,0x19e
c0025def:	29 c8                	sub    eax,ecx
c0025df1:	c1 e0 17             	shl    eax,0x17
c0025df4:	09 d8                	or     eax,ebx
c0025df6:	01 d0                	add    eax,edx
c0025df8:	5b                   	pop    ebx
c0025df9:	5d                   	pop    ebp
c0025dfa:	c3                   	ret    

c0025dfb <__floatunsisf>:
c0025dfb:	55                   	push   ebp
c0025dfc:	89 e5                	mov    ebp,esp
c0025dfe:	53                   	push   ebx
c0025dff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e02:	31 c0                	xor    eax,eax
c0025e04:	85 d2                	test   edx,edx
c0025e06:	74 32                	je     c0025e3a <__floatunsisf+0x3f>
c0025e08:	0f bd ca             	bsr    ecx,edx
c0025e0b:	83 f1 1f             	xor    ecx,0x1f
c0025e0e:	d3 e2                	shl    edx,cl
c0025e10:	89 d0                	mov    eax,edx
c0025e12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025e17:	89 c3                	mov    ebx,eax
c0025e19:	c1 eb 08             	shr    ebx,0x8
c0025e1c:	80 e2 7f             	and    dl,0x7f
c0025e1f:	0f 95 c2             	setne  dl
c0025e22:	09 da                	or     edx,ebx
c0025e24:	83 e2 01             	and    edx,0x1
c0025e27:	c1 e8 07             	shr    eax,0x7
c0025e2a:	21 c2                	and    edx,eax
c0025e2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025e31:	29 c8                	sub    eax,ecx
c0025e33:	c1 e0 17             	shl    eax,0x17
c0025e36:	09 d8                	or     eax,ebx
c0025e38:	01 d0                	add    eax,edx
c0025e3a:	5b                   	pop    ebx
c0025e3b:	5d                   	pop    ebp
c0025e3c:	c3                   	ret    

c0025e3d <__fixsfsi>:
c0025e3d:	55                   	push   ebp
c0025e3e:	89 e5                	mov    ebp,esp
c0025e40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e43:	89 d1                	mov    ecx,edx
c0025e45:	c1 e1 08             	shl    ecx,0x8
c0025e48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025e4e:	c1 fa 17             	sar    edx,0x17
c0025e51:	78 1c                	js     c0025e6f <__fixsfsi+0x32>
c0025e53:	83 ea 7f             	sub    edx,0x7f
c0025e56:	31 c0                	xor    eax,eax
c0025e58:	83 fa 1e             	cmp    edx,0x1e
c0025e5b:	77 40                	ja     c0025e9d <__fixsfsi+0x60>
c0025e5d:	89 c8                	mov    eax,ecx
c0025e5f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e69:	29 d1                	sub    ecx,edx
c0025e6b:	d3 e8                	shr    eax,cl
c0025e6d:	eb 2e                	jmp    c0025e9d <__fixsfsi+0x60>
c0025e6f:	31 c0                	xor    eax,eax
c0025e71:	81 c2 81 00 00 00    	add    edx,0x81
c0025e77:	78 24                	js     c0025e9d <__fixsfsi+0x60>
c0025e79:	83 fa 1e             	cmp    edx,0x1e
c0025e7c:	7e 09                	jle    c0025e87 <__fixsfsi+0x4a>
c0025e7e:	83 fa 1f             	cmp    edx,0x1f
c0025e81:	75 18                	jne    c0025e9b <__fixsfsi+0x5e>
c0025e83:	85 c9                	test   ecx,ecx
c0025e85:	75 14                	jne    c0025e9b <__fixsfsi+0x5e>
c0025e87:	89 c8                	mov    eax,ecx
c0025e89:	0d 00 00 00 80       	or     eax,0x80000000
c0025e8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e93:	29 d1                	sub    ecx,edx
c0025e95:	d3 e8                	shr    eax,cl
c0025e97:	f7 d8                	neg    eax
c0025e99:	eb 02                	jmp    c0025e9d <__fixsfsi+0x60>
c0025e9b:	31 c0                	xor    eax,eax
c0025e9d:	5d                   	pop    ebp
c0025e9e:	c3                   	ret    

c0025e9f <__fixunssfsi>:
c0025e9f:	55                   	push   ebp
c0025ea0:	89 e5                	mov    ebp,esp
c0025ea2:	53                   	push   ebx
c0025ea3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ea6:	89 d3                	mov    ebx,edx
c0025ea8:	c1 fb 17             	sar    ebx,0x17
c0025eab:	83 eb 7f             	sub    ebx,0x7f
c0025eae:	31 c0                	xor    eax,eax
c0025eb0:	83 fb 1f             	cmp    ebx,0x1f
c0025eb3:	77 18                	ja     c0025ecd <__fixunssfsi+0x2e>
c0025eb5:	89 d0                	mov    eax,edx
c0025eb7:	c1 e0 08             	shl    eax,0x8
c0025eba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025ebf:	0d 00 00 00 80       	or     eax,0x80000000
c0025ec4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025ec9:	29 d9                	sub    ecx,ebx
c0025ecb:	d3 e8                	shr    eax,cl
c0025ecd:	5b                   	pop    ebx
c0025ece:	5d                   	pop    ebp
c0025ecf:	c3                   	ret    

c0025ed0 <__cmpsf2>:
c0025ed0:	55                   	push   ebp
c0025ed1:	89 e5                	mov    ebp,esp
c0025ed3:	57                   	push   edi
c0025ed4:	56                   	push   esi
c0025ed5:	53                   	push   ebx
c0025ed6:	83 ec 24             	sub    esp,0x24
c0025ed9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025edc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025edf:	e8 4f 10 00 00       	call   c0026f33 <__truncdfsf2>
c0025ee4:	5a                   	pop    edx
c0025ee5:	59                   	pop    ecx
c0025ee6:	89 c3                	mov    ebx,eax
c0025ee8:	c1 e8 17             	shr    eax,0x17
c0025eeb:	0f b6 f0             	movzx  esi,al
c0025eee:	89 d8                	mov    eax,ebx
c0025ef0:	c1 e8 1f             	shr    eax,0x1f
c0025ef3:	31 c6                	xor    esi,eax
c0025ef5:	c1 e3 08             	shl    ebx,0x8
c0025ef8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025efb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025efe:	e8 30 10 00 00       	call   c0026f33 <__truncdfsf2>
c0025f03:	83 c4 10             	add    esp,0x10
c0025f06:	89 c1                	mov    ecx,eax
c0025f08:	c1 e9 17             	shr    ecx,0x17
c0025f0b:	0f b6 c9             	movzx  ecx,cl
c0025f0e:	89 c7                	mov    edi,eax
c0025f10:	c1 ef 1f             	shr    edi,0x1f
c0025f13:	89 ca                	mov    edx,ecx
c0025f15:	31 fa                	xor    edx,edi
c0025f17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025f1a:	c1 e0 08             	shl    eax,0x8
c0025f1d:	89 c2                	mov    edx,eax
c0025f1f:	89 d8                	mov    eax,ebx
c0025f21:	09 d0                	or     eax,edx
c0025f23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025f28:	09 f0                	or     eax,esi
c0025f2a:	75 08                	jne    c0025f34 <__cmpsf2+0x64>
c0025f2c:	31 c0                	xor    eax,eax
c0025f2e:	39 f9                	cmp    ecx,edi
c0025f30:	75 0c                	jne    c0025f3e <__cmpsf2+0x6e>
c0025f32:	eb 29                	jmp    c0025f5d <__cmpsf2+0x8d>
c0025f34:	b8 01 00 00 00       	mov    eax,0x1
c0025f39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025f3c:	7f 1f                	jg     c0025f5d <__cmpsf2+0x8d>
c0025f3e:	83 c8 ff             	or     eax,0xffffffff
c0025f41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025f44:	7c 17                	jl     c0025f5d <__cmpsf2+0x8d>
c0025f46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025f4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025f52:	b8 01 00 00 00       	mov    eax,0x1
c0025f57:	39 d3                	cmp    ebx,edx
c0025f59:	77 02                	ja     c0025f5d <__cmpsf2+0x8d>
c0025f5b:	19 c0                	sbb    eax,eax
c0025f5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f60:	5b                   	pop    ebx
c0025f61:	5e                   	pop    esi
c0025f62:	5f                   	pop    edi
c0025f63:	5d                   	pop    ebp
c0025f64:	c3                   	ret    

c0025f65 <__eqsf2>:
c0025f65:	55                   	push   ebp
c0025f66:	89 e5                	mov    ebp,esp
c0025f68:	83 ec 24             	sub    esp,0x24
c0025f6b:	6a 01                	push   0x1
c0025f6d:	83 ec 0c             	sub    esp,0xc
c0025f70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f73:	e8 df 10 00 00       	call   c0027057 <__extendsfdf2>
c0025f78:	83 c4 10             	add    esp,0x10
c0025f7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f81:	52                   	push   edx
c0025f82:	50                   	push   eax
c0025f83:	50                   	push   eax
c0025f84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f87:	e8 cb 10 00 00       	call   c0027057 <__extendsfdf2>
c0025f8c:	59                   	pop    ecx
c0025f8d:	59                   	pop    ecx
c0025f8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f94:	52                   	push   edx
c0025f95:	50                   	push   eax
c0025f96:	e8 35 ff ff ff       	call   c0025ed0 <__cmpsf2>
c0025f9b:	83 c4 20             	add    esp,0x20
c0025f9e:	c9                   	leave  
c0025f9f:	c3                   	ret    

c0025fa0 <__nesf2>:
c0025fa0:	eb c3                	jmp    c0025f65 <__eqsf2>

c0025fa2 <__gtsf2>:
c0025fa2:	55                   	push   ebp
c0025fa3:	89 e5                	mov    ebp,esp
c0025fa5:	83 ec 24             	sub    esp,0x24
c0025fa8:	6a ff                	push   0xffffffff
c0025faa:	83 ec 0c             	sub    esp,0xc
c0025fad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fb0:	e8 a2 10 00 00       	call   c0027057 <__extendsfdf2>
c0025fb5:	83 c4 10             	add    esp,0x10
c0025fb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fbb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fbe:	52                   	push   edx
c0025fbf:	50                   	push   eax
c0025fc0:	50                   	push   eax
c0025fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc4:	e8 8e 10 00 00       	call   c0027057 <__extendsfdf2>
c0025fc9:	59                   	pop    ecx
c0025fca:	59                   	pop    ecx
c0025fcb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fd1:	52                   	push   edx
c0025fd2:	50                   	push   eax
c0025fd3:	e8 f8 fe ff ff       	call   c0025ed0 <__cmpsf2>
c0025fd8:	83 c4 20             	add    esp,0x20
c0025fdb:	c9                   	leave  
c0025fdc:	c3                   	ret    

c0025fdd <__gesf2>:
c0025fdd:	eb c3                	jmp    c0025fa2 <__gtsf2>

c0025fdf <__ltsf2>:
c0025fdf:	eb 84                	jmp    c0025f65 <__eqsf2>

c0025fe1 <__lesf2>:
c0025fe1:	eb 82                	jmp    c0025f65 <__eqsf2>

c0025fe3 <__adddf3>:
c0025fe3:	55                   	push   ebp
c0025fe4:	89 e5                	mov    ebp,esp
c0025fe6:	57                   	push   edi
c0025fe7:	56                   	push   esi
c0025fe8:	53                   	push   ebx
c0025fe9:	83 ec 24             	sub    esp,0x24
c0025fec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025fef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ff2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ff5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ff8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ffb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ffe:	89 c8                	mov    eax,ecx
c0026000:	89 ce                	mov    esi,ecx
c0026002:	c1 fe 14             	sar    esi,0x14
c0026005:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026008:	89 fb                	mov    ebx,edi
c002600a:	89 fa                	mov    edx,edi
c002600c:	c1 e2 0b             	shl    edx,0xb
c002600f:	c1 e0 0b             	shl    eax,0xb
c0026012:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026017:	c1 eb 15             	shr    ebx,0x15
c002601a:	09 d8                	or     eax,ebx
c002601c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002601f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026022:	c1 fe 14             	sar    esi,0x14
c0026025:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026028:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002602b:	89 f3                	mov    ebx,esi
c002602d:	c1 e3 0b             	shl    ebx,0xb
c0026030:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026033:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026036:	c1 e3 0b             	shl    ebx,0xb
c0026039:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002603f:	c1 ee 15             	shr    esi,0x15
c0026042:	09 f3                	or     ebx,esi
c0026044:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026047:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002604a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002604d:	0f 88 5f 02 00 00    	js     c00262b2 <__adddf3+0x2cf>
c0026053:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026056:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026059:	85 db                	test   ebx,ebx
c002605b:	0f 8e c7 00 00 00    	jle    c0026128 <__adddf3+0x145>
c0026061:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026068:	75 1a                	jne    c0026084 <__adddf3+0xa1>
c002606a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002606d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026070:	0f 84 b2 05 00 00    	je     c0026628 <__adddf3+0x645>
c0026076:	4b                   	dec    ebx
c0026077:	75 23                	jne    c002609c <__adddf3+0xb9>
c0026079:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002607c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002607f:	e9 99 00 00 00       	jmp    c002611d <__adddf3+0x13a>
c0026084:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026087:	f7 d6                	not    esi
c0026089:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002608f:	0f 84 93 05 00 00    	je     c0026628 <__adddf3+0x645>
c0026095:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002609c:	83 fb 1f             	cmp    ebx,0x1f
c002609f:	7e 42                	jle    c00260e3 <__adddf3+0x100>
c00260a1:	83 fb 3f             	cmp    ebx,0x3f
c00260a4:	0f 8f 7e 05 00 00    	jg     c0026628 <__adddf3+0x645>
c00260aa:	83 e3 1f             	and    ebx,0x1f
c00260ad:	89 d9                	mov    ecx,ebx
c00260af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00260b2:	d3 ef                	shr    edi,cl
c00260b4:	31 db                	xor    ebx,ebx
c00260b6:	85 c9                	test   ecx,ecx
c00260b8:	74 15                	je     c00260cf <__adddf3+0xec>
c00260ba:	be 20 00 00 00       	mov    esi,0x20
c00260bf:	29 ce                	sub    esi,ecx
c00260c1:	89 f1                	mov    ecx,esi
c00260c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260c6:	d3 e6                	shl    esi,cl
c00260c8:	31 db                	xor    ebx,ebx
c00260ca:	85 f6                	test   esi,esi
c00260cc:	0f 95 c3             	setne  bl
c00260cf:	31 c9                	xor    ecx,ecx
c00260d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00260d5:	0f 95 c1             	setne  cl
c00260d8:	09 cf                	or     edi,ecx
c00260da:	09 fb                	or     ebx,edi
c00260dc:	01 da                	add    edx,ebx
c00260de:	83 d0 00             	adc    eax,0x0
c00260e1:	eb 3a                	jmp    c002611d <__adddf3+0x13a>
c00260e3:	bf 20 00 00 00       	mov    edi,0x20
c00260e8:	29 df                	sub    edi,ebx
c00260ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00260ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00260f3:	d3 e6                	shl    esi,cl
c00260f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00260f8:	88 d9                	mov    cl,bl
c00260fa:	d3 ef                	shr    edi,cl
c00260fc:	09 fe                	or     esi,edi
c00260fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026101:	88 d9                	mov    cl,bl
c0026103:	d3 ef                	shr    edi,cl
c0026105:	89 fb                	mov    ebx,edi
c0026107:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002610a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002610d:	d3 e7                	shl    edi,cl
c002610f:	85 ff                	test   edi,edi
c0026111:	0f 95 c1             	setne  cl
c0026114:	0f b6 c9             	movzx  ecx,cl
c0026117:	09 ce                	or     esi,ecx
c0026119:	01 f2                	add    edx,esi
c002611b:	11 d8                	adc    eax,ebx
c002611d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026120:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026123:	e9 52 01 00 00       	jmp    c002627a <__adddf3+0x297>
c0026128:	0f 84 d5 00 00 00    	je     c0026203 <__adddf3+0x220>
c002612e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026131:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026134:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026137:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002613a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026141:	75 20                	jne    c0026163 <__adddf3+0x180>
c0026143:	89 d6                	mov    esi,edx
c0026145:	09 c6                	or     esi,eax
c0026147:	0f 84 db 04 00 00    	je     c0026628 <__adddf3+0x645>
c002614d:	4b                   	dec    ebx
c002614e:	75 29                	jne    c0026179 <__adddf3+0x196>
c0026150:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026153:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026156:	01 d1                	add    ecx,edx
c0026158:	11 c6                	adc    esi,eax
c002615a:	89 f0                	mov    eax,esi
c002615c:	89 ca                	mov    edx,ecx
c002615e:	e9 17 01 00 00       	jmp    c002627a <__adddf3+0x297>
c0026163:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026166:	f7 d6                	not    esi
c0026168:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002616e:	0f 84 b4 04 00 00    	je     c0026628 <__adddf3+0x645>
c0026174:	0d 00 00 00 80       	or     eax,0x80000000
c0026179:	83 fb 1f             	cmp    ebx,0x1f
c002617c:	7e 48                	jle    c00261c6 <__adddf3+0x1e3>
c002617e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026181:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026184:	83 fb 3f             	cmp    ebx,0x3f
c0026187:	0f 8f 9b 04 00 00    	jg     c0026628 <__adddf3+0x645>
c002618d:	83 e3 1f             	and    ebx,0x1f
c0026190:	89 d9                	mov    ecx,ebx
c0026192:	89 c7                	mov    edi,eax
c0026194:	d3 ef                	shr    edi,cl
c0026196:	31 db                	xor    ebx,ebx
c0026198:	85 c9                	test   ecx,ecx
c002619a:	74 12                	je     c00261ae <__adddf3+0x1cb>
c002619c:	be 20 00 00 00       	mov    esi,0x20
c00261a1:	29 ce                	sub    esi,ecx
c00261a3:	89 f1                	mov    ecx,esi
c00261a5:	d3 e0                	shl    eax,cl
c00261a7:	31 db                	xor    ebx,ebx
c00261a9:	85 c0                	test   eax,eax
c00261ab:	0f 95 c3             	setne  bl
c00261ae:	31 c0                	xor    eax,eax
c00261b0:	85 d2                	test   edx,edx
c00261b2:	0f 95 c0             	setne  al
c00261b5:	09 c7                	or     edi,eax
c00261b7:	09 fb                	or     ebx,edi
c00261b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261bf:	01 da                	add    edx,ebx
c00261c1:	83 d6 00             	adc    esi,0x0
c00261c4:	eb 39                	jmp    c00261ff <__adddf3+0x21c>
c00261c6:	be 20 00 00 00       	mov    esi,0x20
c00261cb:	29 de                	sub    esi,ebx
c00261cd:	89 c7                	mov    edi,eax
c00261cf:	89 f1                	mov    ecx,esi
c00261d1:	d3 e7                	shl    edi,cl
c00261d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00261d6:	89 d7                	mov    edi,edx
c00261d8:	88 d9                	mov    cl,bl
c00261da:	d3 ef                	shr    edi,cl
c00261dc:	89 f9                	mov    ecx,edi
c00261de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00261e1:	09 cf                	or     edi,ecx
c00261e3:	88 d9                	mov    cl,bl
c00261e5:	d3 e8                	shr    eax,cl
c00261e7:	89 f1                	mov    ecx,esi
c00261e9:	d3 e2                	shl    edx,cl
c00261eb:	85 d2                	test   edx,edx
c00261ed:	0f 95 c2             	setne  dl
c00261f0:	0f b6 d2             	movzx  edx,dl
c00261f3:	09 d7                	or     edi,edx
c00261f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261fb:	01 fa                	add    edx,edi
c00261fd:	11 c6                	adc    esi,eax
c00261ff:	89 f0                	mov    eax,esi
c0026201:	eb 77                	jmp    c002627a <__adddf3+0x297>
c0026203:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026206:	46                   	inc    esi
c0026207:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002620a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026210:	75 41                	jne    c0026253 <__adddf3+0x270>
c0026212:	89 d3                	mov    ebx,edx
c0026214:	09 c3                	or     ebx,eax
c0026216:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002621d:	75 27                	jne    c0026246 <__adddf3+0x263>
c002621f:	85 db                	test   ebx,ebx
c0026221:	0f 84 fb 03 00 00    	je     c0026622 <__adddf3+0x63f>
c0026227:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002622a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002622d:	0f 84 f5 03 00 00    	je     c0026628 <__adddf3+0x645>
c0026233:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026236:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026239:	85 c0                	test   eax,eax
c002623b:	0f 89 91 03 00 00    	jns    c00265d2 <__adddf3+0x5ef>
c0026241:	e9 85 03 00 00       	jmp    c00265cb <__adddf3+0x5e8>
c0026246:	85 db                	test   ebx,ebx
c0026248:	0f 85 da 03 00 00    	jne    c0026628 <__adddf3+0x645>
c002624e:	e9 cf 03 00 00       	jmp    c0026622 <__adddf3+0x63f>
c0026253:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026256:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026259:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002625c:	f7 d1                	not    ecx
c002625e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026264:	0f 84 70 03 00 00    	je     c00265da <__adddf3+0x5f7>
c002626a:	d1 ea                	shr    edx,1
c002626c:	89 c1                	mov    ecx,eax
c002626e:	c1 e1 1f             	shl    ecx,0x1f
c0026271:	09 ca                	or     edx,ecx
c0026273:	d1 e8                	shr    eax,1
c0026275:	e9 6f 03 00 00       	jmp    c00265e9 <__adddf3+0x606>
c002627a:	85 c0                	test   eax,eax
c002627c:	0f 89 67 03 00 00    	jns    c00265e9 <__adddf3+0x606>
c0026282:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026285:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026288:	f7 d1                	not    ecx
c002628a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026290:	0f 84 44 03 00 00    	je     c00265da <__adddf3+0x5f7>
c0026296:	89 d1                	mov    ecx,edx
c0026298:	d1 e9                	shr    ecx,1
c002629a:	83 e2 01             	and    edx,0x1
c002629d:	09 ca                	or     edx,ecx
c002629f:	89 c1                	mov    ecx,eax
c00262a1:	c1 e1 1f             	shl    ecx,0x1f
c00262a4:	09 ca                	or     edx,ecx
c00262a6:	d1 e8                	shr    eax,1
c00262a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00262ad:	e9 37 03 00 00       	jmp    c00265e9 <__adddf3+0x606>
c00262b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00262b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00262bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00262be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00262c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00262c7:	29 de                	sub    esi,ebx
c00262c9:	85 f6                	test   esi,esi
c00262cb:	0f 8e bd 00 00 00    	jle    c002638e <__adddf3+0x3ab>
c00262d1:	85 db                	test   ebx,ebx
c00262d3:	75 17                	jne    c00262ec <__adddf3+0x309>
c00262d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00262d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00262db:	0f 84 47 03 00 00    	je     c0026628 <__adddf3+0x645>
c00262e1:	4e                   	dec    esi
c00262e2:	75 20                	jne    c0026304 <__adddf3+0x321>
c00262e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00262e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00262ea:	eb 5b                	jmp    c0026347 <__adddf3+0x364>
c00262ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00262ef:	f7 d3                	not    ebx
c00262f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00262f7:	0f 84 2b 03 00 00    	je     c0026628 <__adddf3+0x645>
c00262fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026304:	83 fe 1f             	cmp    esi,0x1f
c0026307:	7e 49                	jle    c0026352 <__adddf3+0x36f>
c0026309:	83 fe 3f             	cmp    esi,0x3f
c002630c:	0f 8f 16 03 00 00    	jg     c0026628 <__adddf3+0x645>
c0026312:	83 e6 1f             	and    esi,0x1f
c0026315:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026318:	89 f1                	mov    ecx,esi
c002631a:	d3 ef                	shr    edi,cl
c002631c:	31 db                	xor    ebx,ebx
c002631e:	85 f6                	test   esi,esi
c0026320:	74 13                	je     c0026335 <__adddf3+0x352>
c0026322:	b9 20 00 00 00       	mov    ecx,0x20
c0026327:	29 f1                	sub    ecx,esi
c0026329:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002632c:	d3 e6                	shl    esi,cl
c002632e:	31 db                	xor    ebx,ebx
c0026330:	85 f6                	test   esi,esi
c0026332:	0f 95 c3             	setne  bl
c0026335:	31 c9                	xor    ecx,ecx
c0026337:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002633b:	0f 95 c1             	setne  cl
c002633e:	09 cf                	or     edi,ecx
c0026340:	09 fb                	or     ebx,edi
c0026342:	29 da                	sub    edx,ebx
c0026344:	83 d8 00             	sbb    eax,0x0
c0026347:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002634a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002634d:	e9 aa 01 00 00       	jmp    c00264fc <__adddf3+0x519>
c0026352:	bf 20 00 00 00       	mov    edi,0x20
c0026357:	29 f7                	sub    edi,esi
c0026359:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002635c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002635f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026362:	d3 e3                	shl    ebx,cl
c0026364:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026367:	89 f1                	mov    ecx,esi
c0026369:	d3 ef                	shr    edi,cl
c002636b:	09 fb                	or     ebx,edi
c002636d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026370:	89 f1                	mov    ecx,esi
c0026372:	d3 ef                	shr    edi,cl
c0026374:	89 fe                	mov    esi,edi
c0026376:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026379:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002637c:	d3 e7                	shl    edi,cl
c002637e:	85 ff                	test   edi,edi
c0026380:	0f 95 c1             	setne  cl
c0026383:	0f b6 c9             	movzx  ecx,cl
c0026386:	09 cb                	or     ebx,ecx
c0026388:	29 da                	sub    edx,ebx
c002638a:	19 f0                	sbb    eax,esi
c002638c:	eb b9                	jmp    c0026347 <__adddf3+0x364>
c002638e:	0f 84 cd 00 00 00    	je     c0026461 <__adddf3+0x47e>
c0026394:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026397:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002639a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002639d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00263a1:	75 1b                	jne    c00263be <__adddf3+0x3db>
c00263a3:	89 d6                	mov    esi,edx
c00263a5:	09 c6                	or     esi,eax
c00263a7:	0f 84 7b 02 00 00    	je     c0026628 <__adddf3+0x645>
c00263ad:	4b                   	dec    ebx
c00263ae:	75 24                	jne    c00263d4 <__adddf3+0x3f1>
c00263b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00263b6:	29 d1                	sub    ecx,edx
c00263b8:	19 c6                	sbb    esi,eax
c00263ba:	89 ca                	mov    edx,ecx
c00263bc:	eb 61                	jmp    c002641f <__adddf3+0x43c>
c00263be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00263c1:	f7 d6                	not    esi
c00263c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00263c9:	0f 84 59 02 00 00    	je     c0026628 <__adddf3+0x645>
c00263cf:	0d 00 00 00 80       	or     eax,0x80000000
c00263d4:	83 fb 1f             	cmp    ebx,0x1f
c00263d7:	7e 4d                	jle    c0026426 <__adddf3+0x443>
c00263d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263df:	83 fb 3f             	cmp    ebx,0x3f
c00263e2:	0f 8f 40 02 00 00    	jg     c0026628 <__adddf3+0x645>
c00263e8:	83 e3 1f             	and    ebx,0x1f
c00263eb:	89 d9                	mov    ecx,ebx
c00263ed:	89 c7                	mov    edi,eax
c00263ef:	d3 ef                	shr    edi,cl
c00263f1:	31 db                	xor    ebx,ebx
c00263f3:	85 c9                	test   ecx,ecx
c00263f5:	74 12                	je     c0026409 <__adddf3+0x426>
c00263f7:	be 20 00 00 00       	mov    esi,0x20
c00263fc:	29 ce                	sub    esi,ecx
c00263fe:	89 f1                	mov    ecx,esi
c0026400:	d3 e0                	shl    eax,cl
c0026402:	31 db                	xor    ebx,ebx
c0026404:	85 c0                	test   eax,eax
c0026406:	0f 95 c3             	setne  bl
c0026409:	31 c0                	xor    eax,eax
c002640b:	85 d2                	test   edx,edx
c002640d:	0f 95 c0             	setne  al
c0026410:	09 c7                	or     edi,eax
c0026412:	09 fb                	or     ebx,edi
c0026414:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026417:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002641a:	29 da                	sub    edx,ebx
c002641c:	83 de 00             	sbb    esi,0x0
c002641f:	89 f0                	mov    eax,esi
c0026421:	e9 d6 00 00 00       	jmp    c00264fc <__adddf3+0x519>
c0026426:	be 20 00 00 00       	mov    esi,0x20
c002642b:	29 de                	sub    esi,ebx
c002642d:	89 c7                	mov    edi,eax
c002642f:	89 f1                	mov    ecx,esi
c0026431:	d3 e7                	shl    edi,cl
c0026433:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026436:	89 d7                	mov    edi,edx
c0026438:	88 d9                	mov    cl,bl
c002643a:	d3 ef                	shr    edi,cl
c002643c:	89 f9                	mov    ecx,edi
c002643e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026441:	09 cf                	or     edi,ecx
c0026443:	88 d9                	mov    cl,bl
c0026445:	d3 e8                	shr    eax,cl
c0026447:	89 f1                	mov    ecx,esi
c0026449:	d3 e2                	shl    edx,cl
c002644b:	85 d2                	test   edx,edx
c002644d:	0f 95 c2             	setne  dl
c0026450:	0f b6 d2             	movzx  edx,dl
c0026453:	09 d7                	or     edi,edx
c0026455:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026458:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002645b:	29 fa                	sub    edx,edi
c002645d:	19 c6                	sbb    esi,eax
c002645f:	eb be                	jmp    c002641f <__adddf3+0x43c>
c0026461:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026464:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026467:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002646d:	75 6a                	jne    c00264d9 <__adddf3+0x4f6>
c002646f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026473:	75 58                	jne    c00264cd <__adddf3+0x4ea>
c0026475:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026478:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002647b:	89 d6                	mov    esi,edx
c002647d:	09 c6                	or     esi,eax
c002647f:	75 17                	jne    c0026498 <__adddf3+0x4b5>
c0026481:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026484:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026487:	85 db                	test   ebx,ebx
c0026489:	0f 85 99 01 00 00    	jne    c0026628 <__adddf3+0x645>
c002648f:	31 ff                	xor    edi,edi
c0026491:	31 c9                	xor    ecx,ecx
c0026493:	e9 90 01 00 00       	jmp    c0026628 <__adddf3+0x645>
c0026498:	85 db                	test   ebx,ebx
c002649a:	0f 84 88 01 00 00    	je     c0026628 <__adddf3+0x645>
c00264a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00264a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00264a6:	85 c0                	test   eax,eax
c00264a8:	79 10                	jns    c00264ba <__adddf3+0x4d7>
c00264aa:	31 c9                	xor    ecx,ecx
c00264ac:	f7 da                	neg    edx
c00264ae:	0f 95 c1             	setne  cl
c00264b1:	01 c8                	add    eax,ecx
c00264b3:	f7 d8                	neg    eax
c00264b5:	e9 2f 01 00 00       	jmp    c00265e9 <__adddf3+0x606>
c00264ba:	31 ff                	xor    edi,edi
c00264bc:	31 c9                	xor    ecx,ecx
c00264be:	89 c3                	mov    ebx,eax
c00264c0:	09 d3                	or     ebx,edx
c00264c2:	0f 84 60 01 00 00    	je     c0026628 <__adddf3+0x645>
c00264c8:	e9 05 01 00 00       	jmp    c00265d2 <__adddf3+0x5ef>
c00264cd:	31 ff                	xor    edi,edi
c00264cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00264d4:	e9 4f 01 00 00       	jmp    c0026628 <__adddf3+0x645>
c00264d9:	89 c1                	mov    ecx,eax
c00264db:	89 d0                	mov    eax,edx
c00264dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00264e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00264e3:	89 ca                	mov    edx,ecx
c00264e5:	85 c9                	test   ecx,ecx
c00264e7:	79 2c                	jns    c0026515 <__adddf3+0x532>
c00264e9:	31 c9                	xor    ecx,ecx
c00264eb:	f7 d8                	neg    eax
c00264ed:	0f 95 c1             	setne  cl
c00264f0:	01 ca                	add    edx,ecx
c00264f2:	f7 da                	neg    edx
c00264f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00264f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00264fa:	eb 19                	jmp    c0026515 <__adddf3+0x532>
c00264fc:	85 c0                	test   eax,eax
c00264fe:	0f 89 e5 00 00 00    	jns    c00265e9 <__adddf3+0x606>
c0026504:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026509:	89 c1                	mov    ecx,eax
c002650b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002650e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026511:	89 d0                	mov    eax,edx
c0026513:	89 ca                	mov    edx,ecx
c0026515:	85 d2                	test   edx,edx
c0026517:	74 59                	je     c0026572 <__adddf3+0x58f>
c0026519:	0f bd da             	bsr    ebx,edx
c002651c:	83 f3 1f             	xor    ebx,0x1f
c002651f:	88 d9                	mov    cl,bl
c0026521:	d3 e2                	shl    edx,cl
c0026523:	bf 20 00 00 00       	mov    edi,0x20
c0026528:	89 f9                	mov    ecx,edi
c002652a:	29 d9                	sub    ecx,ebx
c002652c:	89 c6                	mov    esi,eax
c002652e:	d3 ee                	shr    esi,cl
c0026530:	09 d6                	or     esi,edx
c0026532:	88 d9                	mov    cl,bl
c0026534:	d3 e0                	shl    eax,cl
c0026536:	89 c2                	mov    edx,eax
c0026538:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002653b:	25 ff 07 00 00       	and    eax,0x7ff
c0026540:	39 d8                	cmp    eax,ebx
c0026542:	7f 22                	jg     c0026566 <__adddf3+0x583>
c0026544:	29 c3                	sub    ebx,eax
c0026546:	43                   	inc    ebx
c0026547:	88 d9                	mov    cl,bl
c0026549:	d3 ea                	shr    edx,cl
c002654b:	29 df                	sub    edi,ebx
c002654d:	89 f9                	mov    ecx,edi
c002654f:	89 f0                	mov    eax,esi
c0026551:	d3 e0                	shl    eax,cl
c0026553:	09 c2                	or     edx,eax
c0026555:	89 f0                	mov    eax,esi
c0026557:	88 d9                	mov    cl,bl
c0026559:	d3 e8                	shr    eax,cl
c002655b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002655e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026564:	eb 6f                	jmp    c00265d5 <__adddf3+0x5f2>
c0026566:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026569:	29 d8                	sub    eax,ebx
c002656b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002656e:	89 f0                	mov    eax,esi
c0026570:	eb 59                	jmp    c00265cb <__adddf3+0x5e8>
c0026572:	85 c0                	test   eax,eax
c0026574:	74 6a                	je     c00265e0 <__adddf3+0x5fd>
c0026576:	0f bd c8             	bsr    ecx,eax
c0026579:	83 f1 1f             	xor    ecx,0x1f
c002657c:	d3 e0                	shl    eax,cl
c002657e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026581:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026587:	83 c1 20             	add    ecx,0x20
c002658a:	39 cb                	cmp    ebx,ecx
c002658c:	7f 35                	jg     c00265c3 <__adddf3+0x5e0>
c002658e:	29 d9                	sub    ecx,ebx
c0026590:	8d 71 01             	lea    esi,[ecx+0x1]
c0026593:	83 fe 1f             	cmp    esi,0x1f
c0026596:	7e 09                	jle    c00265a1 <__adddf3+0x5be>
c0026598:	83 e9 1f             	sub    ecx,0x1f
c002659b:	d3 e8                	shr    eax,cl
c002659d:	89 c3                	mov    ebx,eax
c002659f:	eb 11                	jmp    c00265b2 <__adddf3+0x5cf>
c00265a1:	b9 20 00 00 00       	mov    ecx,0x20
c00265a6:	29 f1                	sub    ecx,esi
c00265a8:	89 c3                	mov    ebx,eax
c00265aa:	d3 e3                	shl    ebx,cl
c00265ac:	89 f1                	mov    ecx,esi
c00265ae:	d3 e8                	shr    eax,cl
c00265b0:	89 c2                	mov    edx,eax
c00265b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00265b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00265ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265bd:	89 d0                	mov    eax,edx
c00265bf:	89 da                	mov    edx,ebx
c00265c1:	eb 26                	jmp    c00265e9 <__adddf3+0x606>
c00265c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265c6:	29 cf                	sub    edi,ecx
c00265c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00265cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265d0:	eb 17                	jmp    c00265e9 <__adddf3+0x606>
c00265d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00265d8:	eb 0f                	jmp    c00265e9 <__adddf3+0x606>
c00265da:	31 d2                	xor    edx,edx
c00265dc:	31 c0                	xor    eax,eax
c00265de:	eb 09                	jmp    c00265e9 <__adddf3+0x606>
c00265e0:	89 c2                	mov    edx,eax
c00265e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00265e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265ec:	c1 e1 14             	shl    ecx,0x14
c00265ef:	89 c3                	mov    ebx,eax
c00265f1:	c1 eb 0b             	shr    ebx,0xb
c00265f4:	09 d9                	or     ecx,ebx
c00265f6:	89 d3                	mov    ebx,edx
c00265f8:	c1 eb 0b             	shr    ebx,0xb
c00265fb:	c1 e0 15             	shl    eax,0x15
c00265fe:	09 d8                	or     eax,ebx
c0026600:	89 c7                	mov    edi,eax
c0026602:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026608:	0f 95 c0             	setne  al
c002660b:	89 c6                	mov    esi,eax
c002660d:	09 f3                	or     ebx,esi
c002660f:	83 e3 01             	and    ebx,0x1
c0026612:	c1 ea 0a             	shr    edx,0xa
c0026615:	21 da                	and    edx,ebx
c0026617:	89 f8                	mov    eax,edi
c0026619:	01 d0                	add    eax,edx
c002661b:	83 d1 00             	adc    ecx,0x0
c002661e:	89 c7                	mov    edi,eax
c0026620:	eb 06                	jmp    c0026628 <__adddf3+0x645>
c0026622:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026625:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026628:	89 f8                	mov    eax,edi
c002662a:	89 ca                	mov    edx,ecx
c002662c:	83 c4 24             	add    esp,0x24
c002662f:	5b                   	pop    ebx
c0026630:	5e                   	pop    esi
c0026631:	5f                   	pop    edi
c0026632:	5d                   	pop    ebp
c0026633:	c3                   	ret    

c0026634 <__subdf3>:
c0026634:	55                   	push   ebp
c0026635:	89 e5                	mov    ebp,esp
c0026637:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002663a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002663d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026643:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026646:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026649:	5d                   	pop    ebp
c002664a:	e9 94 f9 ff ff       	jmp    c0025fe3 <__adddf3>

c002664f <__negdf2>:
c002664f:	55                   	push   ebp
c0026650:	89 e5                	mov    ebp,esp
c0026652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026655:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026658:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002665e:	5d                   	pop    ebp
c002665f:	c3                   	ret    

c0026660 <__muldf3>:
c0026660:	55                   	push   ebp
c0026661:	89 e5                	mov    ebp,esp
c0026663:	57                   	push   edi
c0026664:	56                   	push   esi
c0026665:	53                   	push   ebx
c0026666:	83 ec 24             	sub    esp,0x24
c0026669:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002666c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026672:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026675:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026678:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002667b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002667e:	89 c8                	mov    eax,ecx
c0026680:	c1 f8 14             	sar    eax,0x14
c0026683:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026686:	89 f8                	mov    eax,edi
c0026688:	89 fb                	mov    ebx,edi
c002668a:	c1 e3 0b             	shl    ebx,0xb
c002668d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026690:	c1 e1 0b             	shl    ecx,0xb
c0026693:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026699:	c1 e8 15             	shr    eax,0x15
c002669c:	09 c1                	or     ecx,eax
c002669e:	89 d6                	mov    esi,edx
c00266a0:	89 d0                	mov    eax,edx
c00266a2:	c1 f8 14             	sar    eax,0x14
c00266a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00266a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00266ab:	89 c3                	mov    ebx,eax
c00266ad:	c1 e3 0b             	shl    ebx,0xb
c00266b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00266b3:	c1 e6 0b             	shl    esi,0xb
c00266b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00266bc:	c1 e8 15             	shr    eax,0x15
c00266bf:	09 c6                	or     esi,eax
c00266c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00266c4:	25 ff 07 00 00       	and    eax,0x7ff
c00266c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00266cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266cf:	25 ff 07 00 00       	and    eax,0x7ff
c00266d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00266d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00266da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00266dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00266e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00266e7:	40                   	inc    eax
c00266e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00266ed:	0f 85 8d 00 00 00    	jne    c0026780 <__muldf3+0x120>
c00266f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00266f6:	09 c8                	or     eax,ecx
c00266f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00266fc:	74 44                	je     c0026742 <__muldf3+0xe2>
c00266fe:	85 c0                	test   eax,eax
c0026700:	0f 85 31 02 00 00    	jne    c0026937 <__muldf3+0x2d7>
c0026706:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026709:	40                   	inc    eax
c002670a:	a9 fe 07 00 00       	test   eax,0x7fe
c002670f:	75 13                	jne    c0026724 <__muldf3+0xc4>
c0026711:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026714:	09 f1                	or     ecx,esi
c0026716:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002671a:	74 22                	je     c002673e <__muldf3+0xde>
c002671c:	85 c9                	test   ecx,ecx
c002671e:	0f 85 0d 02 00 00    	jne    c0026931 <__muldf3+0x2d1>
c0026724:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026728:	0f 89 09 02 00 00    	jns    c0026937 <__muldf3+0x2d7>
c002672e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026731:	05 00 00 00 80       	add    eax,0x80000000
c0026736:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026739:	e9 f9 01 00 00       	jmp    c0026937 <__muldf3+0x2d7>
c002673e:	85 c9                	test   ecx,ecx
c0026740:	eb 2e                	jmp    c0026770 <__muldf3+0x110>
c0026742:	85 c0                	test   eax,eax
c0026744:	74 20                	je     c0026766 <__muldf3+0x106>
c0026746:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026749:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002674c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002674f:	c1 ef 1f             	shr    edi,0x1f
c0026752:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026755:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026758:	8d 43 ff             	lea    eax,[ebx-0x1]
c002675b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002675e:	09 f9                	or     ecx,edi
c0026760:	78 1e                	js     c0026780 <__muldf3+0x120>
c0026762:	89 c3                	mov    ebx,eax
c0026764:	eb e0                	jmp    c0026746 <__muldf3+0xe6>
c0026766:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026769:	f7 d0                	not    eax
c002676b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026770:	75 b2                	jne    c0026724 <__muldf3+0xc4>
c0026772:	31 ff                	xor    edi,edi
c0026774:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002677b:	e9 b7 01 00 00       	jmp    c0026937 <__muldf3+0x2d7>
c0026780:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026783:	40                   	inc    eax
c0026784:	a9 fe 07 00 00       	test   eax,0x7fe
c0026789:	75 57                	jne    c00267e2 <__muldf3+0x182>
c002678b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002678e:	09 f0                	or     eax,esi
c0026790:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026794:	74 23                	je     c00267b9 <__muldf3+0x159>
c0026796:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002679a:	0f 89 91 01 00 00    	jns    c0026931 <__muldf3+0x2d1>
c00267a0:	85 c0                	test   eax,eax
c00267a2:	0f 85 89 01 00 00    	jne    c0026931 <__muldf3+0x2d1>
c00267a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00267ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00267b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00267b4:	e9 7e 01 00 00       	jmp    c0026937 <__muldf3+0x2d7>
c00267b9:	85 c0                	test   eax,eax
c00267bb:	75 0c                	jne    c00267c9 <__muldf3+0x169>
c00267bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00267c1:	0f 89 6a 01 00 00    	jns    c0026931 <__muldf3+0x2d1>
c00267c7:	eb df                	jmp    c00267a8 <__muldf3+0x148>
c00267c9:	01 f6                	add    esi,esi
c00267cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00267ce:	c1 ea 1f             	shr    edx,0x1f
c00267d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00267d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00267d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00267da:	09 d6                	or     esi,edx
c00267dc:	78 04                	js     c00267e2 <__muldf3+0x182>
c00267de:	89 c3                	mov    ebx,eax
c00267e0:	eb e7                	jmp    c00267c9 <__muldf3+0x169>
c00267e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00267e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267ee:	89 c8                	mov    eax,ecx
c00267f0:	f7 e6                	mul    esi
c00267f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00267f5:	89 c7                	mov    edi,eax
c00267f7:	89 c8                	mov    eax,ecx
c00267f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00267fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00267ff:	89 c1                	mov    ecx,eax
c0026801:	89 f0                	mov    eax,esi
c0026803:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026806:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026809:	89 c6                	mov    esi,eax
c002680b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002680e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026811:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026814:	31 c0                	xor    eax,eax
c0026816:	01 f1                	add    ecx,esi
c0026818:	0f 92 c0             	setb   al
c002681b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002681e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026821:	83 d6 00             	adc    esi,0x0
c0026824:	01 c7                	add    edi,eax
c0026826:	83 d6 00             	adc    esi,0x0
c0026829:	01 ca                	add    edx,ecx
c002682b:	0f 92 c1             	setb   cl
c002682e:	0f b6 c9             	movzx  ecx,cl
c0026831:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026834:	83 d6 00             	adc    esi,0x0
c0026837:	01 cf                	add    edi,ecx
c0026839:	83 d6 00             	adc    esi,0x0
c002683c:	31 c9                	xor    ecx,ecx
c002683e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026841:	0f 95 c1             	setne  cl
c0026844:	09 cf                	or     edi,ecx
c0026846:	85 f6                	test   esi,esi
c0026848:	78 0c                	js     c0026856 <__muldf3+0x1f6>
c002684a:	01 f6                	add    esi,esi
c002684c:	89 f8                	mov    eax,edi
c002684e:	c1 e8 1f             	shr    eax,0x1f
c0026851:	09 c6                	or     esi,eax
c0026853:	01 ff                	add    edi,edi
c0026855:	4b                   	dec    ebx
c0026856:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002685c:	0f 8f 85 00 00 00    	jg     c00268e7 <__muldf3+0x287>
c0026862:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026868:	85 db                	test   ebx,ebx
c002686a:	0f 8f 84 00 00 00    	jg     c00268f4 <__muldf3+0x294>
c0026870:	83 fb cc             	cmp    ebx,0xffffffcc
c0026873:	7c 79                	jl     c00268ee <__muldf3+0x28e>
c0026875:	ba 01 00 00 00       	mov    edx,0x1
c002687a:	29 da                	sub    edx,ebx
c002687c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026882:	83 fa 1f             	cmp    edx,0x1f
c0026885:	7e 30                	jle    c00268b7 <__muldf3+0x257>
c0026887:	83 fa 20             	cmp    edx,0x20
c002688a:	75 0b                	jne    c0026897 <__muldf3+0x237>
c002688c:	31 c0                	xor    eax,eax
c002688e:	85 ff                	test   edi,edi
c0026890:	0f 95 c0             	setne  al
c0026893:	89 c7                	mov    edi,eax
c0026895:	eb 1a                	jmp    c00268b1 <__muldf3+0x251>
c0026897:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002689a:	89 f0                	mov    eax,esi
c002689c:	d3 e0                	shl    eax,cl
c002689e:	09 f8                	or     eax,edi
c00268a0:	0f 95 c0             	setne  al
c00268a3:	0f b6 c0             	movzx  eax,al
c00268a6:	89 c7                	mov    edi,eax
c00268a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00268ad:	29 d9                	sub    ecx,ebx
c00268af:	d3 ee                	shr    esi,cl
c00268b1:	09 f7                	or     edi,esi
c00268b3:	31 db                	xor    ebx,ebx
c00268b5:	eb 3b                	jmp    c00268f2 <__muldf3+0x292>
c00268b7:	83 c3 1f             	add    ebx,0x1f
c00268ba:	89 f0                	mov    eax,esi
c00268bc:	88 d9                	mov    cl,bl
c00268be:	d3 e0                	shl    eax,cl
c00268c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268c3:	89 f8                	mov    eax,edi
c00268c5:	88 d1                	mov    cl,dl
c00268c7:	d3 e8                	shr    eax,cl
c00268c9:	89 c1                	mov    ecx,eax
c00268cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00268ce:	09 c8                	or     eax,ecx
c00268d0:	88 d9                	mov    cl,bl
c00268d2:	d3 e7                	shl    edi,cl
c00268d4:	31 db                	xor    ebx,ebx
c00268d6:	85 ff                	test   edi,edi
c00268d8:	0f 95 c3             	setne  bl
c00268db:	89 df                	mov    edi,ebx
c00268dd:	09 c7                	or     edi,eax
c00268df:	88 d1                	mov    cl,dl
c00268e1:	d3 ee                	shr    esi,cl
c00268e3:	31 db                	xor    ebx,ebx
c00268e5:	eb 0d                	jmp    c00268f4 <__muldf3+0x294>
c00268e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00268ec:	eb 02                	jmp    c00268f0 <__muldf3+0x290>
c00268ee:	31 db                	xor    ebx,ebx
c00268f0:	31 ff                	xor    edi,edi
c00268f2:	31 f6                	xor    esi,esi
c00268f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00268f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00268fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00268ff:	09 c3                	or     ebx,eax
c0026901:	c1 e3 14             	shl    ebx,0x14
c0026904:	89 f0                	mov    eax,esi
c0026906:	c1 e8 0b             	shr    eax,0xb
c0026909:	09 c3                	or     ebx,eax
c002690b:	89 f8                	mov    eax,edi
c002690d:	c1 e8 0b             	shr    eax,0xb
c0026910:	c1 e6 15             	shl    esi,0x15
c0026913:	09 c6                	or     esi,eax
c0026915:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002691b:	0f 95 c1             	setne  cl
c002691e:	09 c8                	or     eax,ecx
c0026920:	83 e0 01             	and    eax,0x1
c0026923:	c1 ef 0a             	shr    edi,0xa
c0026926:	21 c7                	and    edi,eax
c0026928:	01 f7                	add    edi,esi
c002692a:	83 d3 00             	adc    ebx,0x0
c002692d:	89 da                	mov    edx,ebx
c002692f:	eb 03                	jmp    c0026934 <__muldf3+0x2d4>
c0026931:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026934:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026937:	89 f8                	mov    eax,edi
c0026939:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002693c:	83 c4 24             	add    esp,0x24
c002693f:	5b                   	pop    ebx
c0026940:	5e                   	pop    esi
c0026941:	5f                   	pop    edi
c0026942:	5d                   	pop    ebp
c0026943:	c3                   	ret    

c0026944 <__divdf3>:
c0026944:	55                   	push   ebp
c0026945:	89 e5                	mov    ebp,esp
c0026947:	57                   	push   edi
c0026948:	56                   	push   esi
c0026949:	53                   	push   ebx
c002694a:	83 ec 2c             	sub    esp,0x2c
c002694d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026950:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026953:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026956:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026959:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002695c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002695f:	89 ce                	mov    esi,ecx
c0026961:	89 c8                	mov    eax,ecx
c0026963:	c1 f8 14             	sar    eax,0x14
c0026966:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026969:	89 f8                	mov    eax,edi
c002696b:	89 fb                	mov    ebx,edi
c002696d:	c1 e3 0b             	shl    ebx,0xb
c0026970:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026973:	c1 e6 0b             	shl    esi,0xb
c0026976:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002697c:	c1 e8 15             	shr    eax,0x15
c002697f:	09 c6                	or     esi,eax
c0026981:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026984:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026987:	89 c2                	mov    edx,eax
c0026989:	c1 fa 14             	sar    edx,0x14
c002698c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002698f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026992:	89 de                	mov    esi,ebx
c0026994:	c1 e6 0b             	shl    esi,0xb
c0026997:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002699a:	c1 e0 0b             	shl    eax,0xb
c002699d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00269a2:	c1 eb 15             	shr    ebx,0x15
c00269a5:	09 d8                	or     eax,ebx
c00269a7:	89 c2                	mov    edx,eax
c00269a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269ac:	25 ff 07 00 00       	and    eax,0x7ff
c00269b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00269b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00269b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00269bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00269c0:	29 d8                	sub    eax,ebx
c00269c2:	05 ff 03 00 00       	add    eax,0x3ff
c00269c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00269ca:	46                   	inc    esi
c00269cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00269d1:	0f 85 a5 00 00 00    	jne    c0026a7c <__divdf3+0x138>
c00269d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00269da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00269dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00269e1:	74 2a                	je     c0026a0d <__divdf3+0xc9>
c00269e3:	85 f6                	test   esi,esi
c00269e5:	0f 85 cc 02 00 00    	jne    c0026cb7 <__divdf3+0x373>
c00269eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269ee:	40                   	inc    eax
c00269ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00269f4:	75 26                	jne    c0026a1c <__divdf3+0xd8>
c00269f6:	85 db                	test   ebx,ebx
c00269f8:	74 22                	je     c0026a1c <__divdf3+0xd8>
c00269fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a03:	09 d0                	or     eax,edx
c0026a05:	0f 85 ac 02 00 00    	jne    c0026cb7 <__divdf3+0x373>
c0026a0b:	eb 63                	jmp    c0026a70 <__divdf3+0x12c>
c0026a0d:	85 f6                	test   esi,esi
c0026a0f:	75 22                	jne    c0026a33 <__divdf3+0xef>
c0026a11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026a14:	40                   	inc    eax
c0026a15:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a1a:	74 36                	je     c0026a52 <__divdf3+0x10e>
c0026a1c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026a20:	0f 89 91 02 00 00    	jns    c0026cb7 <__divdf3+0x373>
c0026a26:	89 f8                	mov    eax,edi
c0026a28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026a2e:	e9 80 02 00 00       	jmp    c0026cb3 <__divdf3+0x36f>
c0026a33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a36:	01 f6                	add    esi,esi
c0026a38:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026a3b:	c1 ef 1f             	shr    edi,0x1f
c0026a3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026a41:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026a44:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026a47:	09 f7                	or     edi,esi
c0026a49:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026a4c:	78 2e                	js     c0026a7c <__divdf3+0x138>
c0026a4e:	89 c8                	mov    eax,ecx
c0026a50:	eb e1                	jmp    c0026a33 <__divdf3+0xef>
c0026a52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a55:	09 d0                	or     eax,edx
c0026a57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a5b:	74 0f                	je     c0026a6c <__divdf3+0x128>
c0026a5d:	85 c0                	test   eax,eax
c0026a5f:	74 bb                	je     c0026a1c <__divdf3+0xd8>
c0026a61:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a64:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a67:	e9 4b 02 00 00       	jmp    c0026cb7 <__divdf3+0x373>
c0026a6c:	85 c0                	test   eax,eax
c0026a6e:	75 ac                	jne    c0026a1c <__divdf3+0xd8>
c0026a70:	31 ff                	xor    edi,edi
c0026a72:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026a77:	e9 3b 02 00 00       	jmp    c0026cb7 <__divdf3+0x373>
c0026a7c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026a7f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026a82:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026a88:	75 6b                	jne    c0026af5 <__divdf3+0x1b1>
c0026a8a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a8d:	09 d6                	or     esi,edx
c0026a8f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a93:	74 28                	je     c0026abd <__divdf3+0x179>
c0026a95:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a9b:	85 f6                	test   esi,esi
c0026a9d:	0f 85 14 02 00 00    	jne    c0026cb7 <__divdf3+0x373>
c0026aa3:	31 ff                	xor    edi,edi
c0026aa5:	31 c9                	xor    ecx,ecx
c0026aa7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026aaa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026aad:	0f 89 04 02 00 00    	jns    c0026cb7 <__divdf3+0x373>
c0026ab3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026ab8:	e9 fa 01 00 00       	jmp    c0026cb7 <__divdf3+0x373>
c0026abd:	85 f6                	test   esi,esi
c0026abf:	75 1b                	jne    c0026adc <__divdf3+0x198>
c0026ac1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026ac4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026ac7:	25 00 00 00 80       	and    eax,0x80000000
c0026acc:	31 c9                	xor    ecx,ecx
c0026ace:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026ad3:	89 cf                	mov    edi,ecx
c0026ad5:	89 c1                	mov    ecx,eax
c0026ad7:	e9 db 01 00 00       	jmp    c0026cb7 <__divdf3+0x373>
c0026adc:	01 d2                	add    edx,edx
c0026ade:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026ae1:	c1 eb 1f             	shr    ebx,0x1f
c0026ae4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ae7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026aea:	8d 48 01             	lea    ecx,[eax+0x1]
c0026aed:	09 da                	or     edx,ebx
c0026aef:	78 04                	js     c0026af5 <__divdf3+0x1b1>
c0026af1:	89 c8                	mov    eax,ecx
c0026af3:	eb e7                	jmp    c0026adc <__divdf3+0x198>
c0026af5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026af8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026afe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026b07:	39 d6                	cmp    esi,edx
c0026b09:	77 0d                	ja     c0026b18 <__divdf3+0x1d4>
c0026b0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026b0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026b11:	72 1b                	jb     c0026b2e <__divdf3+0x1ea>
c0026b13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026b16:	75 16                	jne    c0026b2e <__divdf3+0x1ea>
c0026b18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026b1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026b21:	83 de 00             	sbb    esi,0x0
c0026b24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026b27:	ba 01 00 00 00       	mov    edx,0x1
c0026b2c:	eb 02                	jmp    c0026b30 <__divdf3+0x1ec>
c0026b2e:	31 d2                	xor    edx,edx
c0026b30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026b37:	31 ff                	xor    edi,edi
c0026b39:	01 ff                	add    edi,edi
c0026b3b:	89 d1                	mov    ecx,edx
c0026b3d:	c1 e9 1f             	shr    ecx,0x1f
c0026b40:	09 cf                	or     edi,ecx
c0026b42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026b45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026b48:	89 da                	mov    edx,ebx
c0026b4a:	89 f3                	mov    ebx,esi
c0026b4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026b4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b52:	c1 e9 1f             	shr    ecx,0x1f
c0026b55:	09 ce                	or     esi,ecx
c0026b57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b5a:	01 c9                	add    ecx,ecx
c0026b5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026b5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026b62:	85 db                	test   ebx,ebx
c0026b64:	78 29                	js     c0026b8f <__divdf3+0x24b>
c0026b66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026b69:	72 07                	jb     c0026b72 <__divdf3+0x22e>
c0026b6b:	75 3c                	jne    c0026ba9 <__divdf3+0x265>
c0026b6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b70:	77 37                	ja     c0026ba9 <__divdf3+0x265>
c0026b72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026b78:	31 d2                	xor    edx,edx
c0026b7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026b7d:	0f 97 c2             	seta   dl
c0026b80:	29 d6                	sub    esi,edx
c0026b82:	89 d9                	mov    ecx,ebx
c0026b84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026b87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026b8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026b8d:	eb 17                	jmp    c0026ba6 <__divdf3+0x262>
c0026b8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b98:	0f 97 c1             	seta   cl
c0026b9b:	0f b6 c9             	movzx  ecx,cl
c0026b9e:	29 ce                	sub    esi,ecx
c0026ba0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026ba3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026ba6:	83 ca 01             	or     edx,0x1
c0026ba9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026bac:	75 8b                	jne    c0026b39 <__divdf3+0x1f5>
c0026bae:	c1 e7 09             	shl    edi,0x9
c0026bb1:	89 d1                	mov    ecx,edx
c0026bb3:	c1 e9 17             	shr    ecx,0x17
c0026bb6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026bb9:	09 f3                	or     ebx,esi
c0026bbb:	0f 95 c3             	setne  bl
c0026bbe:	0f b6 db             	movzx  ebx,bl
c0026bc1:	c1 e2 09             	shl    edx,0x9
c0026bc4:	09 d3                	or     ebx,edx
c0026bc6:	89 ca                	mov    edx,ecx
c0026bc8:	09 fa                	or     edx,edi
c0026bca:	78 0c                	js     c0026bd8 <__divdf3+0x294>
c0026bcc:	01 d2                	add    edx,edx
c0026bce:	89 d9                	mov    ecx,ebx
c0026bd0:	c1 e9 1f             	shr    ecx,0x1f
c0026bd3:	09 ca                	or     edx,ecx
c0026bd5:	01 db                	add    ebx,ebx
c0026bd7:	48                   	dec    eax
c0026bd8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026bdd:	0f 8f 83 00 00 00    	jg     c0026c66 <__divdf3+0x322>
c0026be3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026be9:	85 c0                	test   eax,eax
c0026beb:	0f 8f 82 00 00 00    	jg     c0026c73 <__divdf3+0x32f>
c0026bf1:	83 f8 cc             	cmp    eax,0xffffffcc
c0026bf4:	7c 77                	jl     c0026c6d <__divdf3+0x329>
c0026bf6:	be 01 00 00 00       	mov    esi,0x1
c0026bfb:	29 c6                	sub    esi,eax
c0026bfd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c03:	83 fe 1f             	cmp    esi,0x1f
c0026c06:	7e 2f                	jle    c0026c37 <__divdf3+0x2f3>
c0026c08:	83 fe 20             	cmp    esi,0x20
c0026c0b:	75 0a                	jne    c0026c17 <__divdf3+0x2d3>
c0026c0d:	85 db                	test   ebx,ebx
c0026c0f:	0f 95 c3             	setne  bl
c0026c12:	0f b6 db             	movzx  ebx,bl
c0026c15:	eb 1a                	jmp    c0026c31 <__divdf3+0x2ed>
c0026c17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026c1a:	89 d7                	mov    edi,edx
c0026c1c:	d3 e7                	shl    edi,cl
c0026c1e:	89 f9                	mov    ecx,edi
c0026c20:	09 d9                	or     ecx,ebx
c0026c22:	0f 95 c3             	setne  bl
c0026c25:	0f b6 db             	movzx  ebx,bl
c0026c28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026c2d:	29 c1                	sub    ecx,eax
c0026c2f:	d3 ea                	shr    edx,cl
c0026c31:	09 d3                	or     ebx,edx
c0026c33:	31 c0                	xor    eax,eax
c0026c35:	eb 3a                	jmp    c0026c71 <__divdf3+0x32d>
c0026c37:	83 c0 1f             	add    eax,0x1f
c0026c3a:	89 d7                	mov    edi,edx
c0026c3c:	88 c1                	mov    cl,al
c0026c3e:	d3 e7                	shl    edi,cl
c0026c40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026c43:	89 df                	mov    edi,ebx
c0026c45:	89 f1                	mov    ecx,esi
c0026c47:	d3 ef                	shr    edi,cl
c0026c49:	89 f9                	mov    ecx,edi
c0026c4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026c4e:	09 cf                	or     edi,ecx
c0026c50:	88 c1                	mov    cl,al
c0026c52:	d3 e3                	shl    ebx,cl
c0026c54:	85 db                	test   ebx,ebx
c0026c56:	0f 95 c3             	setne  bl
c0026c59:	0f b6 db             	movzx  ebx,bl
c0026c5c:	09 fb                	or     ebx,edi
c0026c5e:	89 f1                	mov    ecx,esi
c0026c60:	d3 ea                	shr    edx,cl
c0026c62:	31 c0                	xor    eax,eax
c0026c64:	eb 0d                	jmp    c0026c73 <__divdf3+0x32f>
c0026c66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026c6b:	eb 02                	jmp    c0026c6f <__divdf3+0x32b>
c0026c6d:	31 c0                	xor    eax,eax
c0026c6f:	31 db                	xor    ebx,ebx
c0026c71:	31 d2                	xor    edx,edx
c0026c73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026c76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026c79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026c7f:	09 c8                	or     eax,ecx
c0026c81:	c1 e0 14             	shl    eax,0x14
c0026c84:	89 d1                	mov    ecx,edx
c0026c86:	c1 e9 0b             	shr    ecx,0xb
c0026c89:	09 c8                	or     eax,ecx
c0026c8b:	89 c6                	mov    esi,eax
c0026c8d:	89 d9                	mov    ecx,ebx
c0026c8f:	c1 e9 0b             	shr    ecx,0xb
c0026c92:	c1 e2 15             	shl    edx,0x15
c0026c95:	09 ca                	or     edx,ecx
c0026c97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026c9d:	0f 95 c0             	setne  al
c0026ca0:	09 c1                	or     ecx,eax
c0026ca2:	83 e1 01             	and    ecx,0x1
c0026ca5:	c1 eb 0a             	shr    ebx,0xa
c0026ca8:	21 cb                	and    ebx,ecx
c0026caa:	01 d3                	add    ebx,edx
c0026cac:	89 d8                	mov    eax,ebx
c0026cae:	83 d6 00             	adc    esi,0x0
c0026cb1:	89 f2                	mov    edx,esi
c0026cb3:	89 c7                	mov    edi,eax
c0026cb5:	89 d1                	mov    ecx,edx
c0026cb7:	89 f8                	mov    eax,edi
c0026cb9:	89 ca                	mov    edx,ecx
c0026cbb:	83 c4 2c             	add    esp,0x2c
c0026cbe:	5b                   	pop    ebx
c0026cbf:	5e                   	pop    esi
c0026cc0:	5f                   	pop    edi
c0026cc1:	5d                   	pop    ebp
c0026cc2:	c3                   	ret    

c0026cc3 <__floatsidf>:
c0026cc3:	55                   	push   ebp
c0026cc4:	89 e5                	mov    ebp,esp
c0026cc6:	56                   	push   esi
c0026cc7:	53                   	push   ebx
c0026cc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ccb:	85 db                	test   ebx,ebx
c0026ccd:	7e 15                	jle    c0026ce4 <__floatsidf+0x21>
c0026ccf:	0f bd cb             	bsr    ecx,ebx
c0026cd2:	83 f1 1f             	xor    ecx,0x1f
c0026cd5:	d3 e3                	shl    ebx,cl
c0026cd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026cdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0026ce2:	eb 21                	jmp    c0026d05 <__floatsidf+0x42>
c0026ce4:	b8 00 00 00 00       	mov    eax,0x0
c0026ce9:	ba 00 00 00 00       	mov    edx,0x0
c0026cee:	74 2a                	je     c0026d1a <__floatsidf+0x57>
c0026cf0:	f7 db                	neg    ebx
c0026cf2:	0f bd cb             	bsr    ecx,ebx
c0026cf5:	83 f1 1f             	xor    ecx,0x1f
c0026cf8:	d3 e3                	shl    ebx,cl
c0026cfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026d00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026d05:	29 c8                	sub    eax,ecx
c0026d07:	c1 e0 14             	shl    eax,0x14
c0026d0a:	89 c1                	mov    ecx,eax
c0026d0c:	89 de                	mov    esi,ebx
c0026d0e:	c1 ee 0b             	shr    esi,0xb
c0026d11:	09 f1                	or     ecx,esi
c0026d13:	89 ca                	mov    edx,ecx
c0026d15:	c1 e3 15             	shl    ebx,0x15
c0026d18:	89 d8                	mov    eax,ebx
c0026d1a:	5b                   	pop    ebx
c0026d1b:	5e                   	pop    esi
c0026d1c:	5d                   	pop    ebp
c0026d1d:	c3                   	ret    

c0026d1e <__floatunsidf>:
c0026d1e:	55                   	push   ebp
c0026d1f:	89 e5                	mov    ebp,esp
c0026d21:	56                   	push   esi
c0026d22:	53                   	push   ebx
c0026d23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d26:	85 db                	test   ebx,ebx
c0026d28:	74 2a                	je     c0026d54 <__floatunsidf+0x36>
c0026d2a:	0f bd cb             	bsr    ecx,ebx
c0026d2d:	83 f1 1f             	xor    ecx,0x1f
c0026d30:	d3 e3                	shl    ebx,cl
c0026d32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026d38:	b8 1e 04 00 00       	mov    eax,0x41e
c0026d3d:	29 c8                	sub    eax,ecx
c0026d3f:	c1 e0 14             	shl    eax,0x14
c0026d42:	89 c1                	mov    ecx,eax
c0026d44:	89 de                	mov    esi,ebx
c0026d46:	c1 ee 0b             	shr    esi,0xb
c0026d49:	09 f1                	or     ecx,esi
c0026d4b:	89 ca                	mov    edx,ecx
c0026d4d:	c1 e3 15             	shl    ebx,0x15
c0026d50:	89 d8                	mov    eax,ebx
c0026d52:	eb 04                	jmp    c0026d58 <__floatunsidf+0x3a>
c0026d54:	31 c0                	xor    eax,eax
c0026d56:	31 d2                	xor    edx,edx
c0026d58:	5b                   	pop    ebx
c0026d59:	5e                   	pop    esi
c0026d5a:	5d                   	pop    ebp
c0026d5b:	c3                   	ret    

c0026d5c <__fixdfsi>:
c0026d5c:	55                   	push   ebp
c0026d5d:	89 e5                	mov    ebp,esp
c0026d5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d62:	89 d1                	mov    ecx,edx
c0026d64:	c1 e1 0b             	shl    ecx,0xb
c0026d67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d70:	c1 e8 15             	shr    eax,0x15
c0026d73:	09 c1                	or     ecx,eax
c0026d75:	c1 fa 14             	sar    edx,0x14
c0026d78:	78 1f                	js     c0026d99 <__fixdfsi+0x3d>
c0026d7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026d80:	31 c0                	xor    eax,eax
c0026d82:	83 fa 1e             	cmp    edx,0x1e
c0026d85:	77 40                	ja     c0026dc7 <__fixdfsi+0x6b>
c0026d87:	89 c8                	mov    eax,ecx
c0026d89:	0d 00 00 00 80       	or     eax,0x80000000
c0026d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d93:	29 d1                	sub    ecx,edx
c0026d95:	d3 e8                	shr    eax,cl
c0026d97:	eb 2e                	jmp    c0026dc7 <__fixdfsi+0x6b>
c0026d99:	31 c0                	xor    eax,eax
c0026d9b:	81 c2 01 04 00 00    	add    edx,0x401
c0026da1:	78 24                	js     c0026dc7 <__fixdfsi+0x6b>
c0026da3:	83 fa 1e             	cmp    edx,0x1e
c0026da6:	7e 09                	jle    c0026db1 <__fixdfsi+0x55>
c0026da8:	83 fa 1f             	cmp    edx,0x1f
c0026dab:	75 18                	jne    c0026dc5 <__fixdfsi+0x69>
c0026dad:	85 c9                	test   ecx,ecx
c0026daf:	75 14                	jne    c0026dc5 <__fixdfsi+0x69>
c0026db1:	89 c8                	mov    eax,ecx
c0026db3:	0d 00 00 00 80       	or     eax,0x80000000
c0026db8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026dbd:	29 d1                	sub    ecx,edx
c0026dbf:	d3 e8                	shr    eax,cl
c0026dc1:	f7 d8                	neg    eax
c0026dc3:	eb 02                	jmp    c0026dc7 <__fixdfsi+0x6b>
c0026dc5:	31 c0                	xor    eax,eax
c0026dc7:	5d                   	pop    ebp
c0026dc8:	c3                   	ret    

c0026dc9 <__fixunsdfsi>:
c0026dc9:	55                   	push   ebp
c0026dca:	89 e5                	mov    ebp,esp
c0026dcc:	53                   	push   ebx
c0026dcd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026dd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026dd3:	89 d3                	mov    ebx,edx
c0026dd5:	c1 fb 14             	sar    ebx,0x14
c0026dd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026dde:	31 c0                	xor    eax,eax
c0026de0:	83 fb 1f             	cmp    ebx,0x1f
c0026de3:	77 1d                	ja     c0026e02 <__fixunsdfsi+0x39>
c0026de5:	89 d0                	mov    eax,edx
c0026de7:	c1 e0 0b             	shl    eax,0xb
c0026dea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026def:	c1 e9 15             	shr    ecx,0x15
c0026df2:	09 c8                	or     eax,ecx
c0026df4:	0d 00 00 00 80       	or     eax,0x80000000
c0026df9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026dfe:	29 d9                	sub    ecx,ebx
c0026e00:	d3 e8                	shr    eax,cl
c0026e02:	5b                   	pop    ebx
c0026e03:	5d                   	pop    ebp
c0026e04:	c3                   	ret    

c0026e05 <__cmpdf2>:
c0026e05:	55                   	push   ebp
c0026e06:	89 e5                	mov    ebp,esp
c0026e08:	57                   	push   edi
c0026e09:	56                   	push   esi
c0026e0a:	53                   	push   ebx
c0026e0b:	83 ec 0c             	sub    esp,0xc
c0026e0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026e11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026e14:	89 ca                	mov    edx,ecx
c0026e16:	c1 ea 14             	shr    edx,0x14
c0026e19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026e1f:	89 cb                	mov    ebx,ecx
c0026e21:	c1 fb 1f             	sar    ebx,0x1f
c0026e24:	31 da                	xor    edx,ebx
c0026e26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e29:	89 df                	mov    edi,ebx
c0026e2b:	c1 e7 0b             	shl    edi,0xb
c0026e2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e31:	c1 e1 0b             	shl    ecx,0xb
c0026e34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026e3a:	c1 eb 15             	shr    ebx,0x15
c0026e3d:	09 d9                	or     ecx,ebx
c0026e3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026e42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026e45:	89 ce                	mov    esi,ecx
c0026e47:	c1 ee 14             	shr    esi,0x14
c0026e4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e50:	89 cb                	mov    ebx,ecx
c0026e52:	c1 fb 1f             	sar    ebx,0x1f
c0026e55:	31 de                	xor    esi,ebx
c0026e57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026e5a:	89 df                	mov    edi,ebx
c0026e5c:	c1 e7 0b             	shl    edi,0xb
c0026e5f:	c1 e1 0b             	shl    ecx,0xb
c0026e62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026e68:	c1 eb 15             	shr    ebx,0x15
c0026e6b:	09 d9                	or     ecx,ebx
c0026e6d:	89 d3                	mov    ebx,edx
c0026e6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e75:	43                   	inc    ebx
c0026e76:	83 fb 01             	cmp    ebx,0x1
c0026e79:	77 08                	ja     c0026e83 <__cmpdf2+0x7e>
c0026e7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026e81:	75 68                	jne    c0026eeb <__cmpdf2+0xe6>
c0026e83:	89 f3                	mov    ebx,esi
c0026e85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e8b:	43                   	inc    ebx
c0026e8c:	83 fb 01             	cmp    ebx,0x1
c0026e8f:	77 06                	ja     c0026e97 <__cmpdf2+0x92>
c0026e91:	89 fb                	mov    ebx,edi
c0026e93:	09 cb                	or     ebx,ecx
c0026e95:	75 54                	jne    c0026eeb <__cmpdf2+0xe6>
c0026e97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026e9a:	09 f8                	or     eax,edi
c0026e9c:	09 c8                	or     eax,ecx
c0026e9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026ea1:	75 12                	jne    c0026eb5 <__cmpdf2+0xb0>
c0026ea3:	8d 42 01             	lea    eax,[edx+0x1]
c0026ea6:	83 f8 01             	cmp    eax,0x1
c0026ea9:	77 0a                	ja     c0026eb5 <__cmpdf2+0xb0>
c0026eab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026eae:	31 c0                	xor    eax,eax
c0026eb0:	83 fb 01             	cmp    ebx,0x1
c0026eb3:	76 36                	jbe    c0026eeb <__cmpdf2+0xe6>
c0026eb5:	b8 01 00 00 00       	mov    eax,0x1
c0026eba:	39 f2                	cmp    edx,esi
c0026ebc:	7f 2d                	jg     c0026eeb <__cmpdf2+0xe6>
c0026ebe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026ec3:	7c 26                	jl     c0026eeb <__cmpdf2+0xe6>
c0026ec5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ec8:	77 07                	ja     c0026ed1 <__cmpdf2+0xcc>
c0026eca:	72 16                	jb     c0026ee2 <__cmpdf2+0xdd>
c0026ecc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026ecf:	76 0a                	jbe    c0026edb <__cmpdf2+0xd6>
c0026ed1:	89 d0                	mov    eax,edx
c0026ed3:	c1 f8 1f             	sar    eax,0x1f
c0026ed6:	83 c8 01             	or     eax,0x1
c0026ed9:	eb 10                	jmp    c0026eeb <__cmpdf2+0xe6>
c0026edb:	b8 00 00 00 00       	mov    eax,0x0
c0026ee0:	73 09                	jae    c0026eeb <__cmpdf2+0xe6>
c0026ee2:	89 d0                	mov    eax,edx
c0026ee4:	c1 f8 1f             	sar    eax,0x1f
c0026ee7:	83 e0 02             	and    eax,0x2
c0026eea:	48                   	dec    eax
c0026eeb:	83 c4 0c             	add    esp,0xc
c0026eee:	5b                   	pop    ebx
c0026eef:	5e                   	pop    esi
c0026ef0:	5f                   	pop    edi
c0026ef1:	5d                   	pop    ebp
c0026ef2:	c3                   	ret    

c0026ef3 <__eqdf2>:
c0026ef3:	55                   	push   ebp
c0026ef4:	89 e5                	mov    ebp,esp
c0026ef6:	50                   	push   eax
c0026ef7:	6a 01                	push   0x1
c0026ef9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026efc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026eff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f05:	e8 fb fe ff ff       	call   c0026e05 <__cmpdf2>
c0026f0a:	83 c4 18             	add    esp,0x18
c0026f0d:	c9                   	leave  
c0026f0e:	c3                   	ret    

c0026f0f <__nedf2>:
c0026f0f:	eb e2                	jmp    c0026ef3 <__eqdf2>

c0026f11 <__gtdf2>:
c0026f11:	55                   	push   ebp
c0026f12:	89 e5                	mov    ebp,esp
c0026f14:	50                   	push   eax
c0026f15:	6a ff                	push   0xffffffff
c0026f17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026f1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026f1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f23:	e8 dd fe ff ff       	call   c0026e05 <__cmpdf2>
c0026f28:	83 c4 18             	add    esp,0x18
c0026f2b:	c9                   	leave  
c0026f2c:	c3                   	ret    

c0026f2d <__gedf2>:
c0026f2d:	eb e2                	jmp    c0026f11 <__gtdf2>

c0026f2f <__ltdf2>:
c0026f2f:	eb c2                	jmp    c0026ef3 <__eqdf2>

c0026f31 <__ledf2>:
c0026f31:	eb c0                	jmp    c0026ef3 <__eqdf2>

c0026f33 <__truncdfsf2>:
c0026f33:	55                   	push   ebp
c0026f34:	89 e5                	mov    ebp,esp
c0026f36:	57                   	push   edi
c0026f37:	56                   	push   esi
c0026f38:	53                   	push   ebx
c0026f39:	83 ec 0c             	sub    esp,0xc
c0026f3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026f3f:	89 d1                	mov    ecx,edx
c0026f41:	c1 f9 14             	sar    ecx,0x14
c0026f44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f47:	89 df                	mov    edi,ebx
c0026f49:	c1 e7 0b             	shl    edi,0xb
c0026f4c:	89 d0                	mov    eax,edx
c0026f4e:	c1 e0 0b             	shl    eax,0xb
c0026f51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026f56:	c1 eb 15             	shr    ebx,0x15
c0026f59:	09 d8                	or     eax,ebx
c0026f5b:	89 cb                	mov    ebx,ecx
c0026f5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026f63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026f69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026f6f:	0f 86 9e 00 00 00    	jbe    c0027013 <__truncdfsf2+0xe0>
c0026f75:	85 db                	test   ebx,ebx
c0026f77:	75 0a                	jne    c0026f83 <__truncdfsf2+0x50>
c0026f79:	c1 fa 17             	sar    edx,0x17
c0026f7c:	30 d2                	xor    dl,dl
c0026f7e:	e9 84 00 00 00       	jmp    c0027007 <__truncdfsf2+0xd4>
c0026f83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026f89:	83 fe 83             	cmp    esi,0xffffff83
c0026f8c:	7d 4b                	jge    c0026fd9 <__truncdfsf2+0xa6>
c0026f8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026f93:	29 f1                	sub    ecx,esi
c0026f95:	83 f9 1f             	cmp    ecx,0x1f
c0026f98:	7f 6b                	jg     c0027005 <__truncdfsf2+0xd2>
c0026f9a:	0d 00 00 00 80       	or     eax,0x80000000
c0026f9f:	89 c3                	mov    ebx,eax
c0026fa1:	d3 eb                	shr    ebx,cl
c0026fa3:	be 01 00 00 00       	mov    esi,0x1
c0026fa8:	d3 e6                	shl    esi,cl
c0026faa:	4e                   	dec    esi
c0026fab:	21 f0                	and    eax,esi
c0026fad:	09 f8                	or     eax,edi
c0026faf:	0f 95 c0             	setne  al
c0026fb2:	0f b6 c0             	movzx  eax,al
c0026fb5:	09 c3                	or     ebx,eax
c0026fb7:	89 d9                	mov    ecx,ebx
c0026fb9:	c1 e9 08             	shr    ecx,0x8
c0026fbc:	f6 c3 7f             	test   bl,0x7f
c0026fbf:	0f 95 c0             	setne  al
c0026fc2:	09 c8                	or     eax,ecx
c0026fc4:	83 e0 01             	and    eax,0x1
c0026fc7:	c1 eb 07             	shr    ebx,0x7
c0026fca:	21 c3                	and    ebx,eax
c0026fcc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026fd2:	09 d1                	or     ecx,edx
c0026fd4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026fd7:	eb 76                	jmp    c002704f <__truncdfsf2+0x11c>
c0026fd9:	83 c6 80             	add    esi,0xffffff80
c0026fdc:	7e 1d                	jle    c0026ffb <__truncdfsf2+0xc8>
c0026fde:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026fe4:	75 0b                	jne    c0026ff1 <__truncdfsf2+0xbe>
c0026fe6:	09 f8                	or     eax,edi
c0026fe8:	74 09                	je     c0026ff3 <__truncdfsf2+0xc0>
c0026fea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026fef:	eb 02                	jmp    c0026ff3 <__truncdfsf2+0xc0>
c0026ff1:	31 c0                	xor    eax,eax
c0026ff3:	c1 fa 17             	sar    edx,0x17
c0026ff6:	80 ca ff             	or     dl,0xff
c0026ff9:	eb 0e                	jmp    c0027009 <__truncdfsf2+0xd6>
c0026ffb:	c1 fa 1f             	sar    edx,0x1f
c0026ffe:	c1 e2 08             	shl    edx,0x8
c0027001:	09 ca                	or     edx,ecx
c0027003:	eb 04                	jmp    c0027009 <__truncdfsf2+0xd6>
c0027005:	31 d2                	xor    edx,edx
c0027007:	31 c0                	xor    eax,eax
c0027009:	c1 e2 17             	shl    edx,0x17
c002700c:	c1 e8 08             	shr    eax,0x8
c002700f:	09 d0                	or     eax,edx
c0027011:	eb 3c                	jmp    c002704f <__truncdfsf2+0x11c>
c0027013:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027019:	89 ca                	mov    edx,ecx
c002701b:	c1 fa 0b             	sar    edx,0xb
c002701e:	c1 e2 08             	shl    edx,0x8
c0027021:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027024:	31 db                	xor    ebx,ebx
c0027026:	85 ff                	test   edi,edi
c0027028:	0f 95 c3             	setne  bl
c002702b:	09 d8                	or     eax,ebx
c002702d:	89 c3                	mov    ebx,eax
c002702f:	c1 eb 08             	shr    ebx,0x8
c0027032:	a8 7f                	test   al,0x7f
c0027034:	0f 95 c2             	setne  dl
c0027037:	89 d6                	mov    esi,edx
c0027039:	09 de                	or     esi,ebx
c002703b:	83 e6 01             	and    esi,0x1
c002703e:	c1 e8 07             	shr    eax,0x7
c0027041:	21 f0                	and    eax,esi
c0027043:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027046:	09 ca                	or     edx,ecx
c0027048:	c1 e2 17             	shl    edx,0x17
c002704b:	09 da                	or     edx,ebx
c002704d:	01 d0                	add    eax,edx
c002704f:	83 c4 0c             	add    esp,0xc
c0027052:	5b                   	pop    ebx
c0027053:	5e                   	pop    esi
c0027054:	5f                   	pop    edi
c0027055:	5d                   	pop    ebp
c0027056:	c3                   	ret    

c0027057 <__extendsfdf2>:
c0027057:	55                   	push   ebp
c0027058:	89 e5                	mov    ebp,esp
c002705a:	57                   	push   edi
c002705b:	56                   	push   esi
c002705c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002705f:	89 d1                	mov    ecx,edx
c0027061:	c1 f9 17             	sar    ecx,0x17
c0027064:	c1 e2 08             	shl    edx,0x8
c0027067:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002706d:	89 c8                	mov    eax,ecx
c002706f:	80 e4 f8             	and    ah,0xf8
c0027072:	8d 71 01             	lea    esi,[ecx+0x1]
c0027075:	81 e6 fe 00 00 00    	and    esi,0xfe
c002707b:	75 27                	jne    c00270a4 <__extendsfdf2+0x4d>
c002707d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027083:	75 18                	jne    c002709d <__extendsfdf2+0x46>
c0027085:	85 d2                	test   edx,edx
c0027087:	74 20                	je     c00270a9 <__extendsfdf2+0x52>
c0027089:	41                   	inc    ecx
c002708a:	01 d2                	add    edx,edx
c002708c:	79 fb                	jns    c0027089 <__extendsfdf2+0x32>
c002708e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027094:	29 c8                	sub    eax,ecx
c0027096:	05 81 03 00 00       	add    eax,0x381
c002709b:	eb 0c                	jmp    c00270a9 <__extendsfdf2+0x52>
c002709d:	05 00 07 00 00       	add    eax,0x700
c00270a2:	eb 05                	jmp    c00270a9 <__extendsfdf2+0x52>
c00270a4:	05 80 03 00 00       	add    eax,0x380
c00270a9:	c1 e0 14             	shl    eax,0x14
c00270ac:	89 c1                	mov    ecx,eax
c00270ae:	89 d0                	mov    eax,edx
c00270b0:	c1 e8 0b             	shr    eax,0xb
c00270b3:	09 c1                	or     ecx,eax
c00270b5:	c1 e2 15             	shl    edx,0x15
c00270b8:	89 d0                	mov    eax,edx
c00270ba:	89 ca                	mov    edx,ecx
c00270bc:	5e                   	pop    esi
c00270bd:	5f                   	pop    edi
c00270be:	5d                   	pop    ebp
c00270bf:	c3                   	ret    

c00270c0 <fabs>:
c00270c0:	83 ec 0c             	sub    esp,0xc
c00270c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00270ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00270ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270d7:	dd 04 24             	fld    QWORD PTR [esp]
c00270da:	83 c4 0c             	add    esp,0xc
c00270dd:	c3                   	ret    
c00270de:	66 90                	xchg   ax,ax

c00270e0 <lrint>:
c00270e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00270e4:	83 ec 04             	sub    esp,0x4
c00270e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00270ea:	58                   	pop    eax
c00270eb:	c3                   	ret    

c00270ec <lrintf>:
c00270ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00270f0:	83 ec 04             	sub    esp,0x4
c00270f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00270f6:	58                   	pop    eax
c00270f7:	c3                   	ret    

Disassembly of section .init:

c00270f8 <_init>:
c00270f8:	55                   	push   ebp
c00270f9:	89 e5                	mov    ebp,esp
c00270fb:	e8 18 90 fd ff       	call   c0000118 <frame_dummy>
c0027100:	e8 63 e0 ff ff       	call   c0025168 <__do_global_ctors_aux>
c0027105:	5d                   	pop    ebp
c0027106:	c3                   	ret    

Disassembly of section .fini:

c0027107 <_fini>:
c0027107:	55                   	push   ebp
c0027108:	89 e5                	mov    ebp,esp
c002710a:	e8 99 8f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002710f:	5d                   	pop    ebp
c0027110:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027112 <Computer::~Computer()>:
c0027112:	83 ec 0c             	sub    esp,0xc
c0027115:	ba b0 8b 02 c0       	mov    edx,0xc0028bb0
c002711a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002711e:	89 10                	mov    DWORD PTR [eax],edx
c0027120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027124:	83 ec 0c             	sub    esp,0xc
c0027127:	50                   	push   eax
c0027128:	e8 c1 c9 fe ff       	call   c0013aee <Device::~Device()>
c002712d:	83 c4 10             	add    esp,0x10
c0027130:	90                   	nop
c0027131:	83 c4 0c             	add    esp,0xc
c0027134:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027136 <Computer::~Computer()>:
c0027136:	83 ec 0c             	sub    esp,0xc
c0027139:	83 ec 0c             	sub    esp,0xc
c002713c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027140:	e8 cd ff ff ff       	call   c0027112 <Computer::~Computer()>
c0027145:	83 c4 10             	add    esp,0x10
c0027148:	83 ec 08             	sub    esp,0x8
c002714b:	68 ec 01 00 00       	push   0x1ec
c0027150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027154:	e8 f4 b5 fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027159:	83 c4 10             	add    esp,0x10
c002715c:	83 c4 0c             	add    esp,0xc
c002715f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027160 <idleCommon()>:
c0027160:	83 ec 0c             	sub    esp,0xc
c0027163:	e8 6e 5c ff ff       	call   c001cdd6 <lockScheduler()>
c0027168:	e8 a5 5f ff ff       	call   c001d112 <schedule()>
c002716d:	83 c4 0c             	add    esp,0xc
c0027170:	e9 63 5c ff ff       	jmp    c001cdd8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027176 <LinkedList<UnixFile>::~LinkedList()>:
c0027176:	90                   	nop
c0027177:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027178 <LinkedList<UnixFile>::LinkedList()>:
c0027178:	83 ec 0c             	sub    esp,0xc
c002717b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027189:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027194:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00271a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00271b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271bb:	83 ec 0c             	sub    esp,0xc
c00271be:	68 26 8e 02 c0       	push   0xc0028e26
c00271c3:	e8 65 b6 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00271c8:	83 c4 10             	add    esp,0x10
c00271cb:	90                   	nop
c00271cc:	83 c4 0c             	add    esp,0xc
c00271cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00271d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00271d0:	83 ec 0c             	sub    esp,0xc
c00271d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00271d8:	75 10                	jne    c00271ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00271da:	83 ec 0c             	sub    esp,0xc
c00271dd:	68 40 8e 02 c0       	push   0xc0028e40
c00271e2:	e8 60 27 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00271e7:	83 c4 10             	add    esp,0x10
c00271ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00271f0:	85 c0                	test   eax,eax
c00271f2:	74 34                	je     c0027228 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00271f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271fb:	85 c0                	test   eax,eax
c00271fd:	74 29                	je     c0027228 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00271ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027203:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002720a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002720d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027211:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027215:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002721c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002721f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027226:	eb 65                	jmp    c002728d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722c:	8b 00                	mov    eax,DWORD PTR [eax]
c002722e:	85 c0                	test   eax,eax
c0027230:	75 4b                	jne    c002727d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027239:	85 c0                	test   eax,eax
c002723b:	75 40                	jne    c002727d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002723d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027241:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027245:	89 10                	mov    DWORD PTR [eax],edx
c0027247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002724f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027259:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027264:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027267:	85 c0                	test   eax,eax
c0027269:	74 22                	je     c002728d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002726b:	83 ec 0c             	sub    esp,0xc
c002726e:	68 62 8e 02 c0       	push   0xc0028e62
c0027273:	e8 cf 26 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0027278:	83 c4 10             	add    esp,0x10
c002727b:	eb 10                	jmp    c002728d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002727d:	83 ec 0c             	sub    esp,0xc
c0027280:	68 6c 8e 02 c0       	push   0xc0028e6c
c0027285:	e8 bd 26 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002728a:	83 c4 10             	add    esp,0x10
c002728d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027291:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027294:	8d 50 01             	lea    edx,[eax+0x1]
c0027297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002729e:	90                   	nop
c002729f:	83 c4 0c             	add    esp,0xc
c00272a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00272a4 <LinkedList<UnixFile>::getFirstElement()>:
c00272a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00272aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00272ac <LinkedList<UnixFile>::removeFirst()>:
c00272ac:	83 ec 0c             	sub    esp,0xc
c00272af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00272b5:	85 c0                	test   eax,eax
c00272b7:	75 12                	jne    c00272cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00272b9:	83 ec 0c             	sub    esp,0xc
c00272bc:	68 78 8e 02 c0       	push   0xc0028e78
c00272c1:	e8 81 26 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00272c6:	83 c4 10             	add    esp,0x10
c00272c9:	eb 7e                	jmp    c0027349 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00272cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272d5:	85 c0                	test   eax,eax
c00272d7:	74 10                	je     c00272e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00272d9:	83 ec 0c             	sub    esp,0xc
c00272dc:	68 c3 8e 02 c0       	push   0xc0028ec3
c00272e1:	e8 61 26 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00272e6:	83 c4 10             	add    esp,0x10
c00272e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00272ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272f2:	85 c0                	test   eax,eax
c00272f4:	75 33                	jne    c0027329 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00272f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027304:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002730b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027312:	83 f8 01             	cmp    eax,0x1
c0027315:	74 21                	je     c0027338 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027317:	83 ec 0c             	sub    esp,0xc
c002731a:	68 9c 8e 02 c0       	push   0xc0028e9c
c002731f:	e8 23 26 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0027324:	83 c4 10             	add    esp,0x10
c0027327:	eb 0f                	jmp    c0027338 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002732d:	8b 00                	mov    eax,DWORD PTR [eax]
c002732f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027336:	89 10                	mov    DWORD PTR [eax],edx
c0027338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002733f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027346:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027349:	83 c4 0c             	add    esp,0xc
c002734c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002734e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027352:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027355:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027356 <DriverlessDevice::~DriverlessDevice()>:
c0027356:	ba 84 95 02 c0       	mov    edx,0xc0029584
c002735b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002735f:	89 10                	mov    DWORD PTR [eax],edx
c0027361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027365:	50                   	push   eax
c0027366:	e8 83 c7 fe ff       	call   c0013aee <Device::~Device()>
c002736b:	83 c4 04             	add    esp,0x4
c002736e:	90                   	nop
c002736f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027370 <DriverlessDevice::~DriverlessDevice()>:
c0027370:	83 ec 0c             	sub    esp,0xc
c0027373:	83 ec 0c             	sub    esp,0xc
c0027376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002737a:	e8 d7 ff ff ff       	call   c0027356 <DriverlessDevice::~DriverlessDevice()>
c002737f:	83 c4 10             	add    esp,0x10
c0027382:	83 ec 08             	sub    esp,0x8
c0027385:	68 58 01 00 00       	push   0x158
c002738a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002738e:	e8 ba b3 fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027393:	83 c4 10             	add    esp,0x10
c0027396:	83 c4 0c             	add    esp,0xc
c0027399:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002739a <LinkedList<Device>::addElement(Device*)>:
c002739a:	83 ec 0c             	sub    esp,0xc
c002739d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00273a2:	75 10                	jne    c00273b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00273a4:	83 ec 0c             	sub    esp,0xc
c00273a7:	68 40 8e 02 c0       	push   0xc0028e40
c00273ac:	e8 96 25 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00273b1:	83 c4 10             	add    esp,0x10
c00273b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00273ba:	85 c0                	test   eax,eax
c00273bc:	74 3a                	je     c00273f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00273be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273c5:	85 c0                	test   eax,eax
c00273c7:	74 2f                	je     c00273f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00273c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00273da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00273f6:	eb 68                	jmp    c0027460 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00273fe:	85 c0                	test   eax,eax
c0027400:	75 4e                	jne    c0027450 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027409:	85 c0                	test   eax,eax
c002740b:	75 43                	jne    c0027450 <LinkedList<Device>::addElement(Device*)+0xb6>
c002740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027415:	89 10                	mov    DWORD PTR [eax],edx
c0027417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002741f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027429:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002743a:	85 c0                	test   eax,eax
c002743c:	74 22                	je     c0027460 <LinkedList<Device>::addElement(Device*)+0xc6>
c002743e:	83 ec 0c             	sub    esp,0xc
c0027441:	68 62 8e 02 c0       	push   0xc0028e62
c0027446:	e8 fc 24 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002744b:	83 c4 10             	add    esp,0x10
c002744e:	eb 10                	jmp    c0027460 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027450:	83 ec 0c             	sub    esp,0xc
c0027453:	68 6c 8e 02 c0       	push   0xc0028e6c
c0027458:	e8 ea 24 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002745d:	83 c4 10             	add    esp,0x10
c0027460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027464:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027467:	8d 50 01             	lea    edx,[eax+0x1]
c002746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027471:	90                   	nop
c0027472:	83 c4 0c             	add    esp,0xc
c0027475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027476 <LinkedList<Device>::LinkedList()>:
c0027476:	83 ec 0c             	sub    esp,0xc
c0027479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027487:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002748e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027492:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00274b9:	83 ec 0c             	sub    esp,0xc
c00274bc:	68 26 8e 02 c0       	push   0xc0028e26
c00274c1:	e8 67 b3 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00274c6:	83 c4 10             	add    esp,0x10
c00274c9:	90                   	nop
c00274ca:	83 c4 0c             	add    esp,0xc
c00274cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00274ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00274ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00274d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00274d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00274d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274da:	8b 00                	mov    eax,DWORD PTR [eax]
c00274dc:	85 c0                	test   eax,eax
c00274de:	75 0e                	jne    c00274ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00274e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274e7:	85 c0                	test   eax,eax
c00274e9:	75 03                	jne    c00274ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00274eb:	b0 01                	mov    al,0x1
c00274ed:	c3                   	ret    
c00274ee:	b0 00                	mov    al,0x0
c00274f0:	90                   	nop
c00274f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00274f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00274f2:	83 ec 0c             	sub    esp,0xc
c00274f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00274fb:	85 c0                	test   eax,eax
c00274fd:	75 15                	jne    c0027514 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00274ff:	83 ec 0c             	sub    esp,0xc
c0027502:	68 78 8e 02 c0       	push   0xc0028e78
c0027507:	e8 3b 24 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002750c:	83 c4 10             	add    esp,0x10
c002750f:	e9 88 00 00 00       	jmp    c002759c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002751b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002751e:	85 c0                	test   eax,eax
c0027520:	0f 95 c0             	setne  al
c0027523:	84 c0                	test   al,al
c0027525:	74 10                	je     c0027537 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027527:	83 ec 0c             	sub    esp,0xc
c002752a:	68 c3 8e 02 c0       	push   0xc0028ec3
c002752f:	e8 13 24 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0027534:	83 c4 10             	add    esp,0x10
c0027537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753b:	8b 00                	mov    eax,DWORD PTR [eax]
c002753d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027540:	85 c0                	test   eax,eax
c0027542:	0f 94 c0             	sete   al
c0027545:	84 c0                	test   al,al
c0027547:	74 33                	je     c002757c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027557:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027562:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027565:	83 f8 01             	cmp    eax,0x1
c0027568:	74 21                	je     c002758b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002756a:	83 ec 0c             	sub    esp,0xc
c002756d:	68 9c 8e 02 c0       	push   0xc0028e9c
c0027572:	e8 d0 23 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0027577:	83 c4 10             	add    esp,0x10
c002757a:	eb 0f                	jmp    c002758b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002757c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027580:	8b 00                	mov    eax,DWORD PTR [eax]
c0027582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027589:	89 10                	mov    DWORD PTR [eax],edx
c002758b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027592:	8d 50 ff             	lea    edx,[eax-0x1]
c0027595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027599:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002759c:	83 c4 0c             	add    esp,0xc
c002759f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00275a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00275a0:	83 ec 0c             	sub    esp,0xc
c00275a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00275a8:	75 10                	jne    c00275ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00275aa:	83 ec 0c             	sub    esp,0xc
c00275ad:	68 40 8e 02 c0       	push   0xc0028e40
c00275b2:	e8 90 23 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c00275b7:	83 c4 10             	add    esp,0x10
c00275ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275be:	8b 00                	mov    eax,DWORD PTR [eax]
c00275c0:	85 c0                	test   eax,eax
c00275c2:	74 34                	je     c00275f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00275c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275cb:	85 c0                	test   eax,eax
c00275cd:	74 29                	je     c00275f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00275cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00275dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275ef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00275f6:	eb 65                	jmp    c002765d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00275fe:	85 c0                	test   eax,eax
c0027600:	75 4b                	jne    c002764d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027609:	85 c0                	test   eax,eax
c002760b:	75 40                	jne    c002764d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002760d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027611:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027615:	89 10                	mov    DWORD PTR [eax],edx
c0027617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002761b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002761f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027629:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027634:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027637:	85 c0                	test   eax,eax
c0027639:	74 22                	je     c002765d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002763b:	83 ec 0c             	sub    esp,0xc
c002763e:	68 62 8e 02 c0       	push   0xc0028e62
c0027643:	e8 ff 22 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c0027648:	83 c4 10             	add    esp,0x10
c002764b:	eb 10                	jmp    c002765d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002764d:	83 ec 0c             	sub    esp,0xc
c0027650:	68 6c 8e 02 c0       	push   0xc0028e6c
c0027655:	e8 ed 22 ff ff       	call   c0019947 <Krnl::panic(char const*)>
c002765a:	83 c4 10             	add    esp,0x10
c002765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027661:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027664:	8d 50 01             	lea    edx,[eax+0x1]
c0027667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002766e:	90                   	nop
c002766f:	83 c4 0c             	add    esp,0xc
c0027672:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027674 <ACPI::~ACPI()>:
c0027674:	83 ec 0c             	sub    esp,0xc
c0027677:	ba 28 9e 02 c0       	mov    edx,0xc0029e28
c002767c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027680:	89 10                	mov    DWORD PTR [eax],edx
c0027682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027686:	83 ec 0c             	sub    esp,0xc
c0027689:	50                   	push   eax
c002768a:	e8 5f c4 fe ff       	call   c0013aee <Device::~Device()>
c002768f:	83 c4 10             	add    esp,0x10
c0027692:	90                   	nop
c0027693:	83 c4 0c             	add    esp,0xc
c0027696:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027698 <ACPI::~ACPI()>:
c0027698:	83 ec 0c             	sub    esp,0xc
c002769b:	83 ec 0c             	sub    esp,0xc
c002769e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276a2:	e8 cd ff ff ff       	call   c0027674 <ACPI::~ACPI()>
c00276a7:	83 c4 10             	add    esp,0x10
c00276aa:	83 ec 08             	sub    esp,0x8
c00276ad:	68 68 22 00 00       	push   0x2268
c00276b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276b6:	e8 92 b0 fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c00276bb:	83 c4 10             	add    esp,0x10
c00276be:	83 c4 0c             	add    esp,0xc
c00276c1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00276c2 <CPU::~CPU()>:
c00276c2:	83 ec 0c             	sub    esp,0xc
c00276c5:	ba 18 a2 02 c0       	mov    edx,0xc002a218
c00276ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ce:	89 10                	mov    DWORD PTR [eax],edx
c00276d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d4:	83 ec 0c             	sub    esp,0xc
c00276d7:	50                   	push   eax
c00276d8:	e8 11 c4 fe ff       	call   c0013aee <Device::~Device()>
c00276dd:	83 c4 10             	add    esp,0x10
c00276e0:	90                   	nop
c00276e1:	83 c4 0c             	add    esp,0xc
c00276e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00276e6 <CPU::~CPU()>:
c00276e6:	83 ec 0c             	sub    esp,0xc
c00276e9:	83 ec 0c             	sub    esp,0xc
c00276ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276f0:	e8 cd ff ff ff       	call   c00276c2 <CPU::~CPU()>
c00276f5:	83 c4 10             	add    esp,0x10
c00276f8:	83 ec 08             	sub    esp,0x8
c00276fb:	68 98 11 00 00       	push   0x1198
c0027700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027704:	e8 44 b0 fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027709:	83 c4 10             	add    esp,0x10
c002770c:	83 c4 0c             	add    esp,0xc
c002770f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027710 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027710:	90                   	nop
c0027711:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027712 <ThreadControlBlock::ThreadControlBlock()>:
c0027712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027716:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002771d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027721:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002772c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027737:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002773e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027742:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002774a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002774e:	90                   	nop
c002774f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027750 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027750:	83 ec 0c             	sub    esp,0xc
c0027753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027757:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002775d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027761:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002776c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027777:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002777d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027781:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027793:	83 ec 0c             	sub    esp,0xc
c0027796:	68 26 8e 02 c0       	push   0xc0028e26
c002779b:	e8 8d b0 fe ff       	call   c001282d <Dbg::kprintf(char const*, ...)>
c00277a0:	83 c4 10             	add    esp,0x10
c00277a3:	90                   	nop
c00277a4:	83 c4 0c             	add    esp,0xc
c00277a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00277a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00277a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00277ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00277af:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00277b0 <Vm::_FPUState::_FPUState()>:
c00277b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277b4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00277bb:	90                   	nop
c00277bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00277be <PCI::~PCI()>:
c00277be:	83 ec 0c             	sub    esp,0xc
c00277c1:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c00277c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ca:	89 10                	mov    DWORD PTR [eax],edx
c00277cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d0:	83 ec 0c             	sub    esp,0xc
c00277d3:	50                   	push   eax
c00277d4:	e8 25 bd fe ff       	call   c00134fe <Bus::~Bus()>
c00277d9:	83 c4 10             	add    esp,0x10
c00277dc:	90                   	nop
c00277dd:	83 c4 0c             	add    esp,0xc
c00277e0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00277e2 <PCI::~PCI()>:
c00277e2:	83 ec 0c             	sub    esp,0xc
c00277e5:	83 ec 0c             	sub    esp,0xc
c00277e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ec:	e8 cd ff ff ff       	call   c00277be <PCI::~PCI()>
c00277f1:	83 c4 10             	add    esp,0x10
c00277f4:	83 ec 08             	sub    esp,0x8
c00277f7:	68 58 01 00 00       	push   0x158
c00277fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027800:	e8 48 af fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027805:	83 c4 10             	add    esp,0x10
c0027808:	83 c4 0c             	add    esp,0xc
c002780b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002780c <IDE::~IDE()>:
c002780c:	83 ec 0c             	sub    esp,0xc
c002780f:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0027814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027818:	89 10                	mov    DWORD PTR [eax],edx
c002781a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002781e:	83 ec 0c             	sub    esp,0xc
c0027821:	50                   	push   eax
c0027822:	e8 b7 c7 fe ff       	call   c0013fde <HardDiskController::~HardDiskController()>
c0027827:	83 c4 10             	add    esp,0x10
c002782a:	90                   	nop
c002782b:	83 c4 0c             	add    esp,0xc
c002782e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027830 <IDE::~IDE()>:
c0027830:	83 ec 0c             	sub    esp,0xc
c0027833:	83 ec 0c             	sub    esp,0xc
c0027836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002783a:	e8 cd ff ff ff       	call   c002780c <IDE::~IDE()>
c002783f:	83 c4 10             	add    esp,0x10
c0027842:	83 ec 08             	sub    esp,0x8
c0027845:	68 70 02 00 00       	push   0x270
c002784a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002784e:	e8 fa ae fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027853:	83 c4 10             	add    esp,0x10
c0027856:	83 c4 0c             	add    esp,0xc
c0027859:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002785a <SATABus::~SATABus()>:
c002785a:	83 ec 0c             	sub    esp,0xc
c002785d:	ba e8 b3 02 c0       	mov    edx,0xc002b3e8
c0027862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027866:	89 10                	mov    DWORD PTR [eax],edx
c0027868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786c:	83 ec 0c             	sub    esp,0xc
c002786f:	50                   	push   eax
c0027870:	e8 69 c7 fe ff       	call   c0013fde <HardDiskController::~HardDiskController()>
c0027875:	83 c4 10             	add    esp,0x10
c0027878:	90                   	nop
c0027879:	83 c4 0c             	add    esp,0xc
c002787c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002787e <SATABus::~SATABus()>:
c002787e:	83 ec 0c             	sub    esp,0xc
c0027881:	83 ec 0c             	sub    esp,0xc
c0027884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027888:	e8 cd ff ff ff       	call   c002785a <SATABus::~SATABus()>
c002788d:	83 c4 10             	add    esp,0x10
c0027890:	83 ec 08             	sub    esp,0x8
c0027893:	68 64 01 00 00       	push   0x164
c0027898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002789c:	e8 ac ae fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c00278a1:	83 c4 10             	add    esp,0x10
c00278a4:	83 c4 0c             	add    esp,0xc
c00278a7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00278a8 <ATA::~ATA()>:
c00278a8:	83 ec 0c             	sub    esp,0xc
c00278ab:	ba 28 b4 02 c0       	mov    edx,0xc002b428
c00278b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278b4:	89 10                	mov    DWORD PTR [eax],edx
c00278b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ba:	83 ec 0c             	sub    esp,0xc
c00278bd:	50                   	push   eax
c00278be:	e8 f9 c7 fe ff       	call   c00140bc <PhysicalDisk::~PhysicalDisk()>
c00278c3:	83 c4 10             	add    esp,0x10
c00278c6:	90                   	nop
c00278c7:	83 c4 0c             	add    esp,0xc
c00278ca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00278cc <ATA::~ATA()>:
c00278cc:	83 ec 0c             	sub    esp,0xc
c00278cf:	83 ec 0c             	sub    esp,0xc
c00278d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d6:	e8 cd ff ff ff       	call   c00278a8 <ATA::~ATA()>
c00278db:	83 c4 10             	add    esp,0x10
c00278de:	83 ec 08             	sub    esp,0x8
c00278e1:	68 7c 01 00 00       	push   0x17c
c00278e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278ea:	e8 5e ae fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c00278ef:	83 c4 10             	add    esp,0x10
c00278f2:	83 c4 0c             	add    esp,0xc
c00278f5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00278f6 <ATAPI::~ATAPI()>:
c00278f6:	83 ec 0c             	sub    esp,0xc
c00278f9:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c00278fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027902:	89 10                	mov    DWORD PTR [eax],edx
c0027904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027908:	83 ec 0c             	sub    esp,0xc
c002790b:	50                   	push   eax
c002790c:	e8 ab c7 fe ff       	call   c00140bc <PhysicalDisk::~PhysicalDisk()>
c0027911:	83 c4 10             	add    esp,0x10
c0027914:	90                   	nop
c0027915:	83 c4 0c             	add    esp,0xc
c0027918:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002791a <ATAPI::~ATAPI()>:
c002791a:	83 ec 0c             	sub    esp,0xc
c002791d:	83 ec 0c             	sub    esp,0xc
c0027920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027924:	e8 cd ff ff ff       	call   c00278f6 <ATAPI::~ATAPI()>
c0027929:	83 c4 10             	add    esp,0x10
c002792c:	83 ec 08             	sub    esp,0x8
c002792f:	68 80 01 00 00       	push   0x180
c0027934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027938:	e8 10 ae fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c002793d:	83 c4 10             	add    esp,0x10
c0027940:	83 c4 0c             	add    esp,0xc
c0027943:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027944 <SATA::~SATA()>:
c0027944:	83 ec 0c             	sub    esp,0xc
c0027947:	ba b8 b5 02 c0       	mov    edx,0xc002b5b8
c002794c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027950:	89 10                	mov    DWORD PTR [eax],edx
c0027952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027956:	83 ec 0c             	sub    esp,0xc
c0027959:	50                   	push   eax
c002795a:	e8 5d c7 fe ff       	call   c00140bc <PhysicalDisk::~PhysicalDisk()>
c002795f:	83 c4 10             	add    esp,0x10
c0027962:	90                   	nop
c0027963:	83 c4 0c             	add    esp,0xc
c0027966:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027968 <SATA::~SATA()>:
c0027968:	83 ec 0c             	sub    esp,0xc
c002796b:	83 ec 0c             	sub    esp,0xc
c002796e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027972:	e8 cd ff ff ff       	call   c0027944 <SATA::~SATA()>
c0027977:	83 c4 10             	add    esp,0x10
c002797a:	83 ec 08             	sub    esp,0x8
c002797d:	68 74 01 00 00       	push   0x174
c0027982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027986:	e8 c2 ad fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c002798b:	83 c4 10             	add    esp,0x10
c002798e:	83 c4 0c             	add    esp,0xc
c0027991:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027992 <AVX::~AVX()>:
c0027992:	83 ec 0c             	sub    esp,0xc
c0027995:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c002799a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002799e:	89 10                	mov    DWORD PTR [eax],edx
c00279a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a4:	83 ec 0c             	sub    esp,0xc
c00279a7:	50                   	push   eax
c00279a8:	e8 93 c7 fe ff       	call   c0014140 <FPU::~FPU()>
c00279ad:	83 c4 10             	add    esp,0x10
c00279b0:	90                   	nop
c00279b1:	83 c4 0c             	add    esp,0xc
c00279b4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00279b6 <AVX::~AVX()>:
c00279b6:	83 ec 0c             	sub    esp,0xc
c00279b9:	83 ec 0c             	sub    esp,0xc
c00279bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279c0:	e8 cd ff ff ff       	call   c0027992 <AVX::~AVX()>
c00279c5:	83 c4 10             	add    esp,0x10
c00279c8:	83 ec 08             	sub    esp,0x8
c00279cb:	68 58 01 00 00       	push   0x158
c00279d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279d4:	e8 74 ad fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c00279d9:	83 c4 10             	add    esp,0x10
c00279dc:	83 c4 0c             	add    esp,0xc
c00279df:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00279e0 <MMX::~MMX()>:
c00279e0:	83 ec 0c             	sub    esp,0xc
c00279e3:	ba 34 b6 02 c0       	mov    edx,0xc002b634
c00279e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ec:	89 10                	mov    DWORD PTR [eax],edx
c00279ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f2:	83 ec 0c             	sub    esp,0xc
c00279f5:	50                   	push   eax
c00279f6:	e8 45 c7 fe ff       	call   c0014140 <FPU::~FPU()>
c00279fb:	83 c4 10             	add    esp,0x10
c00279fe:	90                   	nop
c00279ff:	83 c4 0c             	add    esp,0xc
c0027a02:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027a04 <MMX::~MMX()>:
c0027a04:	83 ec 0c             	sub    esp,0xc
c0027a07:	83 ec 0c             	sub    esp,0xc
c0027a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a0e:	e8 cd ff ff ff       	call   c00279e0 <MMX::~MMX()>
c0027a13:	83 c4 10             	add    esp,0x10
c0027a16:	83 ec 08             	sub    esp,0x8
c0027a19:	68 58 01 00 00       	push   0x158
c0027a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a22:	e8 26 ad fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027a27:	83 c4 10             	add    esp,0x10
c0027a2a:	83 c4 0c             	add    esp,0xc
c0027a2d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027a2e <SSE::~SSE()>:
c0027a2e:	83 ec 0c             	sub    esp,0xc
c0027a31:	ba 74 b6 02 c0       	mov    edx,0xc002b674
c0027a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3a:	89 10                	mov    DWORD PTR [eax],edx
c0027a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a40:	83 ec 0c             	sub    esp,0xc
c0027a43:	50                   	push   eax
c0027a44:	e8 f7 c6 fe ff       	call   c0014140 <FPU::~FPU()>
c0027a49:	83 c4 10             	add    esp,0x10
c0027a4c:	90                   	nop
c0027a4d:	83 c4 0c             	add    esp,0xc
c0027a50:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027a52 <SSE::~SSE()>:
c0027a52:	83 ec 0c             	sub    esp,0xc
c0027a55:	83 ec 0c             	sub    esp,0xc
c0027a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a5c:	e8 cd ff ff ff       	call   c0027a2e <SSE::~SSE()>
c0027a61:	83 c4 10             	add    esp,0x10
c0027a64:	83 ec 08             	sub    esp,0x8
c0027a67:	68 58 01 00 00       	push   0x158
c0027a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a70:	e8 d8 ac fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027a75:	83 c4 10             	add    esp,0x10
c0027a78:	83 c4 0c             	add    esp,0xc
c0027a7b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027a7c <x87::~x87()>:
c0027a7c:	83 ec 0c             	sub    esp,0xc
c0027a7f:	ba b4 b6 02 c0       	mov    edx,0xc002b6b4
c0027a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a88:	89 10                	mov    DWORD PTR [eax],edx
c0027a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a8e:	83 ec 0c             	sub    esp,0xc
c0027a91:	50                   	push   eax
c0027a92:	e8 a9 c6 fe ff       	call   c0014140 <FPU::~FPU()>
c0027a97:	83 c4 10             	add    esp,0x10
c0027a9a:	90                   	nop
c0027a9b:	83 c4 0c             	add    esp,0xc
c0027a9e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027aa0 <x87::~x87()>:
c0027aa0:	83 ec 0c             	sub    esp,0xc
c0027aa3:	83 ec 0c             	sub    esp,0xc
c0027aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aaa:	e8 cd ff ff ff       	call   c0027a7c <x87::~x87()>
c0027aaf:	83 c4 10             	add    esp,0x10
c0027ab2:	83 ec 08             	sub    esp,0x8
c0027ab5:	68 58 01 00 00       	push   0x158
c0027aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027abe:	e8 8a ac fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027ac3:	83 c4 10             	add    esp,0x10
c0027ac6:	83 c4 0c             	add    esp,0xc
c0027ac9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027aca <IOAPIC::~IOAPIC()>:
c0027aca:	83 ec 0c             	sub    esp,0xc
c0027acd:	ba 0c b8 02 c0       	mov    edx,0xc002b80c
c0027ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ad6:	89 10                	mov    DWORD PTR [eax],edx
c0027ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027adc:	83 ec 0c             	sub    esp,0xc
c0027adf:	50                   	push   eax
c0027ae0:	e8 09 c0 fe ff       	call   c0013aee <Device::~Device()>
c0027ae5:	83 c4 10             	add    esp,0x10
c0027ae8:	90                   	nop
c0027ae9:	83 c4 0c             	add    esp,0xc
c0027aec:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027aee <IOAPIC::~IOAPIC()>:
c0027aee:	83 ec 0c             	sub    esp,0xc
c0027af1:	83 ec 0c             	sub    esp,0xc
c0027af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027af8:	e8 cd ff ff ff       	call   c0027aca <IOAPIC::~IOAPIC()>
c0027afd:	83 c4 10             	add    esp,0x10
c0027b00:	83 ec 08             	sub    esp,0x8
c0027b03:	68 68 01 00 00       	push   0x168
c0027b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b0c:	e8 3c ac fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027b11:	83 c4 10             	add    esp,0x10
c0027b14:	83 c4 0c             	add    esp,0xc
c0027b17:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027b18 <APIC::~APIC()>:
c0027b18:	83 ec 0c             	sub    esp,0xc
c0027b1b:	ba c4 b7 02 c0       	mov    edx,0xc002b7c4
c0027b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b24:	89 10                	mov    DWORD PTR [eax],edx
c0027b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b2a:	83 ec 0c             	sub    esp,0xc
c0027b2d:	50                   	push   eax
c0027b2e:	e8 d7 ca fe ff       	call   c001460a <InterruptController::~InterruptController()>
c0027b33:	83 c4 10             	add    esp,0x10
c0027b36:	90                   	nop
c0027b37:	83 c4 0c             	add    esp,0xc
c0027b3a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027b3c <APIC::~APIC()>:
c0027b3c:	83 ec 0c             	sub    esp,0xc
c0027b3f:	83 ec 0c             	sub    esp,0xc
c0027b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b46:	e8 cd ff ff ff       	call   c0027b18 <APIC::~APIC()>
c0027b4b:	83 c4 10             	add    esp,0x10
c0027b4e:	83 ec 08             	sub    esp,0x8
c0027b51:	68 58 21 00 00       	push   0x2158
c0027b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b5a:	e8 ee ab fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027b5f:	83 c4 10             	add    esp,0x10
c0027b62:	83 c4 0c             	add    esp,0xc
c0027b65:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027b66 <PIC::~PIC()>:
c0027b66:	83 ec 0c             	sub    esp,0xc
c0027b69:	ba 5c b8 02 c0       	mov    edx,0xc002b85c
c0027b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b72:	89 10                	mov    DWORD PTR [eax],edx
c0027b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b78:	83 ec 0c             	sub    esp,0xc
c0027b7b:	50                   	push   eax
c0027b7c:	e8 89 ca fe ff       	call   c001460a <InterruptController::~InterruptController()>
c0027b81:	83 c4 10             	add    esp,0x10
c0027b84:	90                   	nop
c0027b85:	83 c4 0c             	add    esp,0xc
c0027b88:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027b8a <PIC::~PIC()>:
c0027b8a:	83 ec 0c             	sub    esp,0xc
c0027b8d:	83 ec 0c             	sub    esp,0xc
c0027b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b94:	e8 cd ff ff ff       	call   c0027b66 <PIC::~PIC()>
c0027b99:	83 c4 10             	add    esp,0x10
c0027b9c:	83 ec 08             	sub    esp,0x8
c0027b9f:	68 58 21 00 00       	push   0x2158
c0027ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ba8:	e8 a0 ab fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027bad:	83 c4 10             	add    esp,0x10
c0027bb0:	83 c4 0c             	add    esp,0xc
c0027bb3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027bb4 <APICTimer::~APICTimer()>:
c0027bb4:	83 ec 0c             	sub    esp,0xc
c0027bb7:	ba b0 b8 02 c0       	mov    edx,0xc002b8b0
c0027bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc0:	89 10                	mov    DWORD PTR [eax],edx
c0027bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc6:	83 ec 0c             	sub    esp,0xc
c0027bc9:	50                   	push   eax
c0027bca:	e8 3b e8 fe ff       	call   c001640a <Timer::~Timer()>
c0027bcf:	83 c4 10             	add    esp,0x10
c0027bd2:	90                   	nop
c0027bd3:	83 c4 0c             	add    esp,0xc
c0027bd6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027bd8 <APICTimer::~APICTimer()>:
c0027bd8:	83 ec 0c             	sub    esp,0xc
c0027bdb:	83 ec 0c             	sub    esp,0xc
c0027bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027be2:	e8 cd ff ff ff       	call   c0027bb4 <APICTimer::~APICTimer()>
c0027be7:	83 c4 10             	add    esp,0x10
c0027bea:	83 ec 08             	sub    esp,0x8
c0027bed:	68 60 01 00 00       	push   0x160
c0027bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bf6:	e8 52 ab fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027bfb:	83 c4 10             	add    esp,0x10
c0027bfe:	83 c4 0c             	add    esp,0xc
c0027c01:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027c02 <PIT::~PIT()>:
c0027c02:	83 ec 0c             	sub    esp,0xc
c0027c05:	ba 00 b9 02 c0       	mov    edx,0xc002b900
c0027c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c0e:	89 10                	mov    DWORD PTR [eax],edx
c0027c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c14:	83 ec 0c             	sub    esp,0xc
c0027c17:	50                   	push   eax
c0027c18:	e8 ed e7 fe ff       	call   c001640a <Timer::~Timer()>
c0027c1d:	83 c4 10             	add    esp,0x10
c0027c20:	90                   	nop
c0027c21:	83 c4 0c             	add    esp,0xc
c0027c24:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027c26 <PIT::~PIT()>:
c0027c26:	83 ec 0c             	sub    esp,0xc
c0027c29:	83 ec 0c             	sub    esp,0xc
c0027c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c30:	e8 cd ff ff ff       	call   c0027c02 <PIT::~PIT()>
c0027c35:	83 c4 10             	add    esp,0x10
c0027c38:	83 ec 08             	sub    esp,0x8
c0027c3b:	68 5c 01 00 00       	push   0x15c
c0027c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c44:	e8 04 ab fe ff       	call   c001274d <operator delete(void*, unsigned long)>
c0027c49:	83 c4 10             	add    esp,0x10
c0027c4c:	83 c4 0c             	add    esp,0xc
c0027c4f:	c3                   	ret    
