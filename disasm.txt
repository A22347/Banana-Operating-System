
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 85 02 00       	call   c0028618 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 91 02 c0       	mov    ebx,0xc00291c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 91 02 c0    	cmp    ebx,0xc00291d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 91 02 c0       	mov    ebx,0xc00291d8
c00000bb:	81 eb d4 91 02 c0    	sub    ebx,0xc00291d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 91 02 c0       	mov    esi,0xc00291d4
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 9d d5 01 00       	call   c001d938 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 03 29 01 00       	call   c0012cb6 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 7b d5 01 00       	call   c001d938 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 ce d9 01 00       	call   c001ddaa <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 7b df 01 00       	call   c001e360 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 e0 45 01 00       	call   c0014bb9 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e60:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011e2:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c000121e:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001223:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c0001282:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c000129d:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c0001357:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c000135d:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c0001364:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c000142a:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001430:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c0001437:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 df 02 c0       	mov    edx,0xc002df80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 5a f1 01 00       	jmp    c0020d86 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 8b f1 01 00       	jmp    c0020dcd <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 b3 f1 01 00       	jmp    c0020e14 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 4a 02 00       	call   c002697c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 88 c7 02 c0       	mov    edx,0xc002c788
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 94 02 c0       	mov    edx,0xc002942c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 38 02 00       	call   c002697c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 94 02 c0       	mov    eax,0xc0029432
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 94 02 c0       	mov    eax,0xc002943b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 22 02 00       	call   c002697c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 94 02 c0       	mov    edx,0xc0029410
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0b 02 00       	call   c002697c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0b 02 00       	call   c002697c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 93 02 c0       	mov    eax,0xc0029357
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 93 02 c0       	mov    eax,0xc0029350
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 93 02 c0       	mov    esi,0xc0029340
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f2 01 00       	call   c002697c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 94 02 c0       	mov    edx,0xc0029442
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 94 02 c0       	mov    edx,0xc002944e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 94 02 c0       	mov    edx,0xc0029462
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029780
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029780
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 94 02 c0       	mov    eax,0xc00294c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fc 01 00       	call   c002844f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fc 01 00       	call   c0028431 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fb 01 00       	call   c002844f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f2 01 00       	call   c0027b54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fd 01 00       	call   c00285e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fb 01 00       	call   c002844f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 fa 01 00       	call   c002844f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 fa 01 00       	call   c0028431 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 f9 01 00       	call   c002844f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 f9 01 00       	call   c0028431 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f7 01 00       	call   c002844f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f6 01 00       	call   c0028431 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6320]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f3 01 00       	call   c00281e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ed 01 00       	call   c0027b80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f6 01 00       	call   c0028453 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f7 01 00       	call   c0028577 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ed 01 00       	call   c0027b80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f5 01 00       	call   c002844d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f5 01 00       	call   c0028451 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f7 01 00       	call   c0028600 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f2 01 00       	call   c00281e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 ec 01 00       	call   c0027b80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f5 01 00       	call   c0028453 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f6 01 00       	call   c0028577 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea eb 01 00       	call   c0027b80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f4 01 00       	call   c002844d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f4 01 00       	call   c0028451 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f6 01 00       	call   c0028600 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f3 01 00       	call   c002844f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f3 01 00       	call   c0028431 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f3 01 00       	call   c002844f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 f0 01 00       	call   c00281e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e3 01 00       	call   c0027503 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d ea 01 00       	call   c0027b80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f f0 01 00       	call   c00281e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e3 01 00       	call   c0027503 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 f0 01 00       	call   c00281e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f2 01 00       	call   c002844d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 e9 01 00       	call   c0027b54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f3 01 00       	call   c00285e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f2 01 00       	call   c0028431 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 e9 01 00       	call   c0027b54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 ef 01 00       	call   c00281e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 e9 01 00       	call   c0027b80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 ef 01 00       	call   c00281e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df eb 01 00       	call   c0027e64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e2 01 00       	call   c0027503 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be db 01 00       	call   c0026e98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f2 01 00       	call   c0028577 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e8 01 00       	call   c0027b80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f2 01 00       	call   c0028577 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e1 01 00       	call   c0027503 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f1 01 00       	call   c0028453 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 ea 01 00       	call   c0027e64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e1 01 00       	call   c0027503 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f2 01 00       	call   c0028600 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ee 01 00       	call   c00281e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e7 01 00       	call   c0027b54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 f0 01 00       	call   c002844f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e1 01 00       	call   c0027503 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e7 01 00       	call   c0027b54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f1 01 00       	call   c0028600 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ed 01 00       	call   c00281e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e7 01 00       	call   c0027b80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ed 01 00       	call   c00281e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 e0 01 00       	call   c0027503 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ed 01 00       	call   c00281e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 ef 01 00       	call   c002844f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e6 01 00       	call   c0027b54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 f0 01 00       	call   c00285e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 ef 01 00       	call   c0028431 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e5 01 00       	call   c0027b54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c ec 01 00       	call   c00281e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e5 01 00       	call   c0027b80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 ec 01 00       	call   c00281e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e8 01 00       	call   c0027e64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 df 01 00       	call   c0027503 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d8 01 00       	call   c0026e98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e ef 01 00       	call   c0028577 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e5 01 00       	call   c0027b80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e ef 01 00       	call   c0028577 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 de 01 00       	call   c0027503 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ed 01 00       	call   c0028453 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e7 01 00       	call   c0027e64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f de 01 00       	call   c0027503 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 ef 01 00       	call   c0028600 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff ea 01 00       	call   c00281e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e4 01 00       	call   c0027b54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ed 01 00       	call   c002844f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce dd 01 00       	call   c0027503 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e3 01 00       	call   c0027b54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f ea 01 00       	call   c00281e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 dd 01 00       	call   c0027503 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9d 02 c0       	mov    eax,0xc0029d54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e8 01 00       	call   c00281e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e2 01 00       	call   c0027b80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d4 01 00       	call   c0026e98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 eb 01 00       	call   c0028577 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e1 01 00       	call   c0027b80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d eb 01 00       	call   c0028577 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f db 01 00       	call   c0027503 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f eb 01 00       	call   c0028577 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e1 01 00       	call   c0027b80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 da 01 00       	call   c0027503 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d3 01 00       	call   c0026e98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf ea 01 00       	call   c0028577 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 e0 01 00       	call   c0027b80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b ea 01 00       	call   c0028577 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd d9 01 00       	call   c0027503 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d ea 01 00       	call   c0028577 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c e0 01 00       	call   c0027b80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 d9 01 00       	call   c0027503 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 d9 01 00       	call   c0027503 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d2 01 00       	call   c0026e98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 e9 01 00       	call   c0028577 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f df 01 00       	call   c0027b80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 e9 01 00       	call   c0028577 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d8 01 00       	call   c0027503 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e8 01 00       	call   c0028577 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd de 01 00       	call   c0027b80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d8 01 00       	call   c0027503 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e8 01 00       	call   c0028577 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f de 01 00       	call   c0027b80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d7 01 00       	call   c0027503 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd d0 01 00       	call   c0026e98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd dd 01 00       	call   c0027b80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d7 01 00       	call   c0027503 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f dd 01 00       	call   c0027b80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d6 01 00       	call   c0027503 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e7 01 00       	call   c0028577 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 dd 01 00       	call   c0027b80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d6 01 00       	call   c0027503 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d6 01 00       	call   c0027503 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab dc 01 00       	call   c0027b80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e5 01 00       	call   c0028453 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d5 01 00       	call   c0027503 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 dc 01 00       	call   c0027b80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e5 01 00       	call   c0028453 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 ce 01 00       	call   c0026e98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e5 01 00       	call   c0028577 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 db 01 00       	call   c0027b80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e5 01 00       	call   c0028577 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d4 01 00       	call   c0027503 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e4 01 00       	call   c0028577 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 da 01 00       	call   c0027b80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d4 01 00       	call   c0027503 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 da 01 00       	call   c0027b80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d4 01 00       	call   c0027503 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b da 01 00       	call   c0027b80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d3 01 00       	call   c0027503 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e4 01 00       	call   c0028577 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd d9 01 00       	call   c0027b80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d3 01 00       	call   c0027503 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cc 01 00       	call   c0026e98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e3 01 00       	call   c0028577 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 d9 01 00       	call   c0027b80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e3 01 00       	call   c0028577 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d2 01 00       	call   c0027503 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d8 01 00       	call   c0027b80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d2 01 00       	call   c0027503 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d8 01 00       	call   c0027b80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d1 01 00       	call   c0027503 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e2 01 00       	call   c0028577 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d8 01 00       	call   c0027b80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d1 01 00       	call   c0027503 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e1 01 00       	call   c0028577 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d7 01 00       	call   c0027b80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d1 01 00       	call   c0027503 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d1 01 00       	call   c0027503 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d7 01 00       	call   c0027b80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 e0 01 00       	call   c0028453 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 d0 01 00       	call   c0027503 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d7 01 00       	call   c0027b80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de df 01 00       	call   c0028453 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c d0 01 00       	call   c0027503 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d6 01 00       	call   c0027b80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 df 01 00       	call   c0028453 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 d0 01 00       	call   c0027503 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d6 01 00       	call   c0027b80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c df 01 00       	call   c0028453 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c8 01 00       	call   c0026e98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 df 01 00       	call   c0028577 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d5 01 00       	call   c0027b80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d df 01 00       	call   c0028577 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f ce 01 00       	call   c0027503 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff de 01 00       	call   c0028577 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d4 01 00       	call   c0027b80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 ce 01 00       	call   c0027503 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 de 01 00       	call   c0028577 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d4 01 00       	call   c0027b80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 ce 01 00       	call   c0027503 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 de 01 00       	call   c0028577 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d4 01 00       	call   c0027b80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 cd 01 00       	call   c0027503 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 de 01 00       	call   c0028577 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d3 01 00       	call   c0027b80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 cd 01 00       	call   c0027503 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 dd 01 00       	call   c0028577 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d3 01 00       	call   c0027b80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 cd 01 00       	call   c0027503 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 dd 01 00       	call   c0028577 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d3 01 00       	call   c0027b80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cc 01 00       	call   c0027503 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c5 01 00       	call   c0026e98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d2 01 00       	call   c0027b80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 cb 01 00       	call   c0027503 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 dc 01 00       	call   c0028577 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d2 01 00       	call   c0027b80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 cb 01 00       	call   c0027503 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 db 01 00       	call   c0028577 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d1 01 00       	call   c0027b80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 cb 01 00       	call   c0027503 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 db 01 00       	call   c0028577 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d1 01 00       	call   c0027b80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea ca 01 00       	call   c0027503 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a db 01 00       	call   c0028577 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d1 01 00       	call   c0027b80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c ca 01 00       	call   c0027503 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc da 01 00       	call   c0028577 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 d0 01 00       	call   c0027b80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b ca 01 00       	call   c0027503 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab da 01 00       	call   c0028577 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 d0 01 00       	call   c0027b80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 ca 01 00       	call   c0027503 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc c9 01 00       	call   c0027503 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a d0 01 00       	call   c0027b80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d8 01 00       	call   c0028453 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 c9 01 00       	call   c0027503 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 cf 01 00       	call   c0027b80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d8 01 00       	call   c0028453 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d c9 01 00       	call   c0027503 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b cf 01 00       	call   c0027b80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d8 01 00       	call   c0028453 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c8 01 00       	call   c0027503 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 cf 01 00       	call   c0027b80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d7 01 00       	call   c0028453 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c8 01 00       	call   c0027503 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db ce 01 00       	call   c0027b80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d7 01 00       	call   c0028453 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c8 01 00       	call   c0027503 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 ce 01 00       	call   c0027b80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d7 01 00       	call   c0028453 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 c0 01 00       	call   c0026e98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d7 01 00       	call   c0028577 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 cd 01 00       	call   c0027b80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d7 01 00       	call   c0028577 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c6 01 00       	call   c0027503 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd627c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d6 01 00       	call   c0028577 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cc 01 00       	call   c0027b80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c5 01 00       	call   c0027503 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d6 01 00       	call   c0028577 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cc 01 00       	call   c0027b80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c5 01 00       	call   c0027503 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d5 01 00       	call   c0028577 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 cb 01 00       	call   c0027b80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c5 01 00       	call   c0027503 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d5 01 00       	call   c0028577 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 cb 01 00       	call   c0027b80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c4 01 00       	call   c0027503 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d5 01 00       	call   c0028577 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 cb 01 00       	call   c0027b80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c4 01 00       	call   c0027503 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d4 01 00       	call   c0028577 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 ca 01 00       	call   c0027b80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c4 01 00       	call   c0027503 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d4 01 00       	call   c0028577 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 ca 01 00       	call   c0027b80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c3 01 00       	call   c0027503 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d4 01 00       	call   c0028577 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 c9 01 00       	call   c0027b80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c3 01 00       	call   c0027503 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bc 01 00       	call   c0026e98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d3 01 00       	call   c0028577 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b c9 01 00       	call   c0027b80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d3 01 00       	call   c0028577 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c2 01 00       	call   c0027503 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6260]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d2 01 00       	call   c0028577 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c8 01 00       	call   c0027b80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c2 01 00       	call   c0027503 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d2 01 00       	call   c0028577 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c8 01 00       	call   c0027b80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c1 01 00       	call   c0027503 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c7 01 00       	call   c0027b80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c1 01 00       	call   c0027503 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c7 01 00       	call   c0027b80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb c0 01 00       	call   c0027503 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d1 01 00       	call   c0028577 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c7 01 00       	call   c0027b80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b c0 01 00       	call   c0027503 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c6 01 00       	call   c0027b80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b c0 01 00       	call   c0027503 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c6 01 00       	call   c0027b80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb bf 01 00       	call   c0027503 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 d0 01 00       	call   c0028577 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c6 01 00       	call   c0027b80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b bf 01 00       	call   c0027503 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6244]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 bf 01 00       	call   c0027503 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c5 01 00       	call   c0027b80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 ce 01 00       	call   c0028453 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 be 01 00       	call   c0027503 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c5 01 00       	call   c0027b80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc cd 01 00       	call   c0028453 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 be 01 00       	call   c0027503 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c4 01 00       	call   c0027b80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f cd 01 00       	call   c0028453 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 bd 01 00       	call   c0027503 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c4 01 00       	call   c0027b80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 cd 01 00       	call   c0028453 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c bd 01 00       	call   c0027503 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c3 01 00       	call   c0027b80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cc 01 00       	call   c0028453 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f bd 01 00       	call   c0027503 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c3 01 00       	call   c0027b80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cc 01 00       	call   c0028453 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bc 01 00       	call   c0027503 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c3 01 00       	call   c0027b80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb cb 01 00       	call   c0028453 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bc 01 00       	call   c0027503 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c2 01 00       	call   c0027b80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e cb 01 00       	call   c0028453 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c2 01 00       	call   c0027b80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a cd 01 00       	jmp    c0028600 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c c9 01 00       	call   c002844f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a c9 01 00       	call   c0028431 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c6 01 00       	call   c00281e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 b9 01 00       	call   c0027503 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c6 01 00       	call   c00281e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c3 01 00       	call   c0027e64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c8 01 00       	call   c0028431 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c8 01 00       	call   c002844f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c8 01 00       	call   c002844f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c2 01 00       	call   c0027e64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 c9 01 00       	call   c0028600 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 c9 01 00       	call   c0028600 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c5 01 00       	call   c00281e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 bf 01 00       	call   c0027b54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c7 01 00       	call   c002844f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b8 01 00       	call   c0027503 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 be 01 00       	call   c0027b54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a c9 01 00       	call   c0028600 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c1 01 00       	call   c0027e64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b7 01 00       	call   c0027503 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c4 01 00       	call   c00281e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b7 01 00       	call   c0027503 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b7 01 00       	call   c0027503 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c3 01 00       	call   c00281e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c6 01 00       	call   c002844d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 bd 01 00       	call   c0027b54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c7 01 00       	call   c00285e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c5 01 00       	call   c0028431 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bc 01 00       	call   c0027b54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c3 01 00       	call   c00281e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bc 01 00       	call   c0027b80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c2 01 00       	call   c00281e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 bf 01 00       	call   c0027e64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b5 01 00       	call   c0027503 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c2 01 00       	call   c00281e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c4 01 00       	call   c002844f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed bb 01 00       	call   c0027b80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf bb 01 00       	call   c0027b80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c1 01 00       	call   c00281e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c be 01 00       	call   c0027e64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 be 01 00       	call   c0027e64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b4 01 00       	call   c0027503 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c5 01 00       	call   c0028600 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c1 01 00       	call   c00281e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 ba 01 00       	call   c0027b54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c3 01 00       	call   c002844f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b4 01 00       	call   c0027503 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 ba 01 00       	call   c0027b54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c4 01 00       	call   c0028600 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c2 01 00       	call   c002844f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c2 01 00       	call   c0028431 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c c0 01 00       	call   c00281e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b3 01 00       	call   c0027503 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc bf 01 00       	call   c00281e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bc 01 00       	call   c0027e64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c1 01 00       	call   c0028431 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c1 01 00       	call   c002844f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c1 01 00       	call   c002844f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 bb 01 00       	call   c0027e64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c3 01 00       	call   c0028600 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c3 01 00       	call   c0028600 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 be 01 00       	call   c00281e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b8 01 00       	call   c0027b54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c1 01 00       	call   c002844f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b1 01 00       	call   c0027503 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b7 01 00       	call   c0027b54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c2 01 00       	call   c0028600 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 ba 01 00       	call   c0027e64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b1 01 00       	call   c0027503 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d bd 01 00       	call   c00281e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d b0 01 00       	call   c0027503 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d b0 01 00       	call   c0027503 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d bd 01 00       	call   c00281e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d bf 01 00       	call   c002844d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b6 01 00       	call   c0027b54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 c0 01 00       	call   c00285e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 be 01 00       	call   c0028431 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b5 01 00       	call   c0027b54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bc 01 00       	call   c00281e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b5 01 00       	call   c0027b80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bc 01 00       	call   c00281e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b8 01 00       	call   c0027e64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a af 01 00       	call   c0027503 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 bb 01 00       	call   c00281e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 be 01 00       	call   c002844f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b5 01 00       	call   c0027b80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b4 01 00       	call   c0027b80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e bb 01 00       	call   c00281e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b7 01 00       	call   c0027e64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b7 01 00       	call   c0027e64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ad 01 00       	call   c0027503 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 be 01 00       	call   c0028600 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d ba 01 00       	call   c00281e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b3 01 00       	call   c0027b54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bc 01 00       	call   c002844f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ad 01 00       	call   c0027503 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b3 01 00       	call   c0027b54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 be 01 00       	call   c0028600 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 bb 01 00       	call   c002844f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 bb 01 00       	call   c0028431 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 b9 01 00       	call   c00281e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ac 01 00       	call   c0027503 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 b9 01 00       	call   c00281e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b5 01 00       	call   c0027e64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d bb 01 00       	call   c0028431 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 bb 01 00       	call   c002844f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 ba 01 00       	call   c002844f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b4 01 00       	call   c0027e64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bc 01 00       	call   c0028600 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bc 01 00       	call   c0028600 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b8 01 00       	call   c00281e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b1 01 00       	call   c0027b54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 ba 01 00       	call   c002844f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 aa 01 00       	call   c0027503 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b1 01 00       	call   c0027b54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 bb 01 00       	call   c0028600 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b3 01 00       	call   c0027e64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d aa 01 00       	call   c0027503 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b6 01 00       	call   c00281e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 a9 01 00       	call   c0027503 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 a9 01 00       	call   c0027503 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b6 01 00       	call   c00281e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b8 01 00       	call   c002844d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 af 01 00       	call   c0027b54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 b9 01 00       	call   c00285e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b8 01 00       	call   c0028431 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c af 01 00       	call   c0027b54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b5 01 00       	call   c00281e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d af 01 00       	call   c0027b80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b5 01 00       	call   c00281e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b1 01 00       	call   c0027e64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a8 01 00       	call   c0027503 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b5 01 00       	call   c00281e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b7 01 00       	call   c002844f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 ae 01 00       	call   c0027b80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 ae 01 00       	call   c0027b80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b4 01 00       	call   c00281e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd b0 01 00       	call   c0027e64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a b0 01 00       	call   c0027e64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a7 01 00       	call   c0027503 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b7 01 00       	call   c0028600 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b3 01 00       	call   c00281e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ad 01 00       	call   c0027b54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b6 01 00       	call   c002844f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a6 01 00       	call   c0027503 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ac 01 00       	call   c0027b54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b7 01 00       	call   c0028600 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b5 01 00       	call   c002844f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b4 01 00       	call   c0028431 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b2 01 00       	call   c00281e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a5 01 00       	call   c0027503 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b2 01 00       	call   c00281e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 ae 01 00       	call   c0027e64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b4 01 00       	call   c0028431 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b4 01 00       	call   c002844f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b4 01 00       	call   c002844f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 ae 01 00       	call   c0027e64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b5 01 00       	call   c0028600 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b5 01 00       	call   c0028600 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b1 01 00       	call   c00281e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 aa 01 00       	call   c0027b54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b3 01 00       	call   c002844f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a4 01 00       	call   c0027503 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 aa 01 00       	call   c0027b54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b4 01 00       	call   c0028600 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ad 01 00       	call   c0027e64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a3 01 00       	call   c0027503 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 af 01 00       	call   c00281e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a2 01 00       	call   c0027503 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a2 01 00       	call   c0027503 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 af 01 00       	call   c00281e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b1 01 00       	call   c002844d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a8 01 00       	call   c0027b54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b3 01 00       	call   c00285e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b1 01 00       	call   c0028431 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a8 01 00       	call   c0027b54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 ae 01 00       	call   c00281e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a8 01 00       	call   c0027b80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa ae 01 00       	call   c00281e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 ab 01 00       	call   c0027e64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a1 01 00       	call   c0027503 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a ae 01 00       	call   c00281e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 b0 01 00       	call   c002844f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a7 01 00       	call   c0027b80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a7 01 00       	call   c0027b80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ad 01 00       	call   c00281e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 aa 01 00       	call   c0027e64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 a9 01 00       	call   c0027e64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 a0 01 00       	call   c0027503 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b1 01 00       	call   c0028600 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ad 01 00       	call   c00281e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a6 01 00       	call   c0027b54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 af 01 00       	call   c002844f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 9f 01 00       	call   c0027503 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a6 01 00       	call   c0027b54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f b0 01 00       	call   c0028600 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 ae 01 00       	call   c002844f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 ae 01 00       	call   c0028431 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba ab 01 00       	call   c00281e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9e 01 00       	call   c0027503 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a ab 01 00       	call   c00281e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a7 01 00       	call   c0027e64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ad 01 00       	call   c0028431 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ad 01 00       	call   c002844f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ad 01 00       	call   c002844f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a7 01 00       	call   c0027e64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 ae 01 00       	call   c0028600 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 ae 01 00       	call   c0028600 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 aa 01 00       	call   c00281e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a3 01 00       	call   c0027b54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ac 01 00       	call   c002844f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9d 01 00       	call   c0027503 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a3 01 00       	call   c0027b54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 ae 01 00       	call   c0028600 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a6 01 00       	call   c0027e64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9c 01 00       	call   c0027503 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d a9 01 00       	call   c00281e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9c 01 00       	call   c0027503 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9b 01 00       	call   c0027503 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a8 01 00       	call   c00281e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 aa 01 00       	call   c0028431 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a1 01 00       	call   c0027b54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ac 01 00       	call   c00285e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 aa 01 00       	call   c0028431 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a1 01 00       	call   c0027b54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a8 01 00       	call   c00281e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a1 01 00       	call   c0027b80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a7 01 00       	call   c00281e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a4 01 00       	call   c0027e64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 9a 01 00       	call   c0027503 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a7 01 00       	call   c00281e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da a9 01 00       	call   c002844f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf a0 01 00       	call   c0027b80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 a0 01 00       	call   c0027b80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a6 01 00       	call   c00281e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a3 01 00       	call   c0027e64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 a0 01 00       	call   c0027b80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a8 01 00       	call   c0028453 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a2 01 00       	call   c0027e64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 99 01 00       	call   c0027503 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 aa 01 00       	call   c0028600 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a6 01 00       	call   c00281e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 9f 01 00       	call   c0027b54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a8 01 00       	call   c002844f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 98 01 00       	call   c0027503 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 9f 01 00       	call   c0027b54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 a9 01 00       	call   c0028600 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd621c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6228]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a6 01 00       	call   c002844f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a6 01 00       	call   c0028431 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a6 01 00       	call   c002844f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a3 01 00       	call   c00281e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9d 01 00       	call   c0027b80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a3 01 00       	call   c00281e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 96 01 00       	call   c0027503 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a3 01 00       	call   c00281e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a5 01 00       	call   c002844d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9c 01 00       	call   c0027b54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a6 01 00       	call   c00285e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a5 01 00       	call   c0028431 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9c 01 00       	call   c0027b54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a2 01 00       	call   c00281e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9c 01 00       	call   c0027b80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a2 01 00       	call   c00281e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9e 01 00       	call   c0027e64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 95 01 00       	call   c0027503 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9e 01 00       	call   c0027e64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 94 01 00       	call   c0027503 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a5 01 00       	call   c0028600 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a1 01 00       	call   c00281e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9b 01 00       	call   c0027b54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a3 01 00       	call   c002844f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 94 01 00       	call   c0027503 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 9a 01 00       	call   c0027b54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a5 01 00       	call   c0028600 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 a0 01 00       	call   c00281e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 9a 01 00       	call   c0027b80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 a0 01 00       	call   c00281e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 93 01 00       	call   c0027503 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c a0 01 00       	call   c00281e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a2 01 00       	call   c0028451 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 99 01 00       	call   c0027b54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a4 01 00       	call   c00285e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a2 01 00       	call   c0028431 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 99 01 00       	call   c0027b54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee 9f 01 00       	call   c00281e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 99 01 00       	call   c0027b80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 9f 01 00       	call   c00281e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9c 01 00       	call   c0027e64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 92 01 00       	call   c0027503 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9b 01 00       	call   c0027e64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 92 01 00       	call   c0027503 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a3 01 00       	call   c0028600 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 9f 01 00       	call   c00281e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 98 01 00       	call   c0027b54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a1 01 00       	call   c002844f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 91 01 00       	call   c0027503 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 97 01 00       	call   c0027b54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9e 01 00       	call   c00281e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 91 01 00       	call   c0027503 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9e 02 c0       	mov    eax,0xc0029efe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9f 02 c0       	mov    eax,0xc0029f0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9f 02 c0       	push   0xc0029f46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9f 02 c0       	push   0xc0029f4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9f 02 c0       	push   0xc0029f59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 66 02 c0       	mov    eax,0xc00266b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9f 02 c0       	push   0xc0029f62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 6a 02 c0       	mov    eax,0xc0026a7c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 67 02 c0       	mov    eax,0xc00267fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9f 02 c0       	push   0xc0029f75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9f 02 c0       	push   0xc0029f82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 51 5e 00 00       	call   c0014474 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e668:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 33 f5 00 00       	call   c001dba8 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 1e f8 00 00       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 07 e7 01 c0       	push   0xc001e707
c000e693:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e699:	e8 0a f8 00 00       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 18 03 c0       	mov    ds:0xc00318a8,eax
c000e6a6:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e6ad:	e8 d5 03 01 00       	call   c001ea87 <Vm::initialise8086()>
c000e6b2:	e8 a5 4b 00 00       	call   c001325c <Fs::initVFS()>
c000e6b7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 49 de 00 00       	call   c001c51c <Sys::loadSyscalls()>
c000e6d3:	e8 6c bd 00 00       	call   c001a444 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9f 02 c0       	push   0xc0029f9c
c000e6e2:	68 a5 9f 02 c0       	push   0xc0029fa5
c000e6e7:	e8 7e ca 00 00       	call   c001b16a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 50 56 00 00       	call   c0013d44 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 43 5d 00 00       	call   c0014448 <Device::loadDriversForAll()>
c000e705:	e8 80 b8 00 00       	call   c0019f8a <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9f 02 c0       	push   0xc0029fad
c000e719:	e8 92 ef 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 d8 f1 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 d8 fa 00 00       	call   c001e20c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9f 02 c0       	push   0xc0029fc9
c000e749:	50                   	push   eax
c000e74a:	e8 9f 5d 00 00       	call   c00144ee <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 63 7d 01 00       	call   c0026646 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 7e a3 00 00       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 57 a3 00 00       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 35 a3 00 00       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 13 a3 00 00       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 21 a2 00 00       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 fc a1 00 00       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 cd 7b 01 00       	call   c0026600 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 8a 7b 01 00       	call   c00265e0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 18 a2 00 00       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9f 02 c0       	push   0xc0029fd9
c000eaaf:	e8 24 44 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9f 02 c0       	push   0xc0029fec
c000ead2:	e8 01 44 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9f 02 c0       	push   0xc0029ffd
c000eaf5:	e8 de 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a0 02 c0       	push   0xc002a00e
c000eb18:	e8 bb 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a0 02 c0       	push   0xc002a01f
c000eb3b:	e8 98 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a0 02 c0       	push   0xc002a030
c000eb5e:	e8 75 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a0 02 c0       	push   0xc002a041
c000eb81:	e8 52 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a0 02 c0       	push   0xc002a052
c000eba4:	e8 2f 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a0 02 c0       	push   0xc002a063
c000ebc7:	e8 0c 43 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a0 02 c0       	push   0xc002a074
c000ebea:	e8 e9 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a0 02 c0       	push   0xc002a085
c000ec0d:	e8 c6 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a0 02 c0       	push   0xc002a096
c000ec30:	e8 a3 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a0 02 c0       	push   0xc002a0a7
c000ec53:	e8 80 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a0 02 c0       	push   0xc002a0b8
c000ec76:	e8 5d 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a0 02 c0       	push   0xc002a0c9
c000ec99:	e8 3a 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a0 02 c0       	push   0xc002a0da
c000ecbc:	e8 17 42 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a0 02 c0       	push   0xc002a0eb
c000ecdf:	e8 f4 41 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a0 02 c0       	push   0xc002a0fc
c000ed02:	e8 d1 41 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a1 02 c0       	push   0xc002a10d
c000ed21:	e8 b2 41 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 54 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba54
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 a1 41 00 00       	jmp    c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a1 02 c0       	push   0xc002a11e
c000ee0a:	e8 6e b7 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a1 02 c0       	push   0xc002a124
c000ee42:	e8 36 b7 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 b3 92 00 00       	call   c0018168 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 3a 54 00 00       	call   c00142fe <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 60 9e 00 00       	call   c0018d54 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 fb 53 00 00       	call   c00142fe <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 65 59 00 00       	call   c0014884 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 cb 53 00 00       	call   c00142fe <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 53 f0 00 00       	call   c001dfa8 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a1 02 c0       	push   0xc002a12a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 35 3f 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a1 02 c0       	push   0xc002a13b
c000efc0:	e8 b8 b5 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a1 02 c0       	push   0xc002a148
c000efd5:	e8 a3 b5 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a152
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 8c b5 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a1 02 c0       	push   0xc002a18c
c000f086:	e8 4d 3e 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0c7:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 9b eb 00 00       	call   c001dd79 <unlockScheduler()>
c000f1de:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 54 94 01 00       	call   c0028680 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 4b 94 01 00       	call   c0028680 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f323:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f328:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 01 28 00 00       	call   c0011e16 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 48 2e 00 00       	call   c0012468 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 6e 1e 00 00       	call   c00114ac <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 9f 1e 00 00       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 9c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d29c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 9c d2 02 c0       	mov    eax,ds:0xc002d29c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a1 02 c0       	push   0xc002a1a8
c000f6f4:	e8 df 37 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 9c d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d29c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 f7 26 00 00       	call   c0011e16 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 9c d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d29c
c000f727:	e8 b4 07 00 00       	call   c000fee0 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 2f 2c 00 00       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 9c d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d29c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a1 02 c0       	push   0xc002a1d8
c000f7ad:	e8 cb ad 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a1 02 c0       	push   0xc002a1dd
c000f7c3:	e8 b5 ad 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 9e e5 00 00       	call   c001dd77 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 8f e5 00 00       	call   c001dd79 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 1b 26 00 00       	call   c0011e16 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 5b 2c 00 00       	call   c0012468 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 fd 25 00 00       	call   c0011e16 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 fe 28 00 00       	call   c0012124 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 c0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 8b 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 4d 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 e4 0c 00 00       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c000fb49:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d c0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2c0,0x8000
c000fba3:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c000fbaa:	c7 05 58 e4 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e458,0xc000fa16
c000fbb4:	c7 05 44 e4 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e444,0xc000f89d
c000fbbe:	c7 05 40 e4 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e440,0xc000f8e8
c000fbc8:	c7 05 4c e4 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e44c,0xc000fa5c
c000fbd2:	c7 05 54 e4 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e454,0xc000f966
c000fbdc:	c7 05 48 e4 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e448,0xc000f9c4
c000fbe6:	c7 05 50 e4 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e450,0xc000f9c5
c000fbf0:	c7 05 5c e4 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e45c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 cb 09 00 00       	call   c00105d8 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 e4 a1 02 c0       	push   0xc002a1e4
c000fc4d:	e8 86 32 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 2a 04 00 00       	call   c0010093 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 cc 20 00 00       	call   c0011d3a <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 55 ba 02 c0       	push   0xc002ba55
c000fc95:	e8 e3 a8 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 9c 22 00 00       	call   c0011f4c <VAS::VAS()>
c000fcb0:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 fb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1fb
c000fcc2:	e8 11 32 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000fcc7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcce:	e8 70 fb ff ff       	call   c000f843 <malloc>
c000fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd6:	89 c6                	mov    esi,eax
c000fcd8:	e8 5d ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdd:	58                   	pop    eax
c000fcde:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fce4:	5a                   	pop    edx
c000fce5:	56                   	push   esi
c000fce6:	68 18 a2 02 c0       	push   0xc002a218
c000fceb:	e8 e8 31 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000fcf0:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000fcf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	50                   	push   eax
c000fcfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd01:	83 c4 14             	add    esp,0x14
c000fd04:	53                   	push   ebx
c000fd05:	e8 f2 24 00 00       	call   c00121fc <VAS::~VAS()>
c000fd0a:	c7 04 24 2b a2 02 c0 	mov    DWORD PTR [esp],0xc002a22b
c000fd11:	e8 67 a8 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000fd16:	83 c4 30             	add    esp,0x30
c000fd19:	5b                   	pop    ebx
c000fd1a:	5e                   	pop    esi
c000fd1b:	5f                   	pop    edi
c000fd1c:	c3                   	ret    

c000fd1d <Phys::allocateDMA(unsigned long)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	31 d2                	xor    edx,edx
c000fd20:	57                   	push   edi
c000fd21:	31 ed                	xor    ebp,ebp
c000fd23:	56                   	push   esi
c000fd24:	31 c9                	xor    ecx,ecx
c000fd26:	53                   	push   ebx
c000fd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	c1 ee 0c             	shr    esi,0xc
c000fd36:	eb 17                	jmp    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd38:	85 c9                	test   ecx,ecx
c000fd3a:	75 04                	jne    c000fd40 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3c:	89 d5                	mov    ebp,edx
c000fd3e:	89 d0                	mov    eax,edx
c000fd40:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd43:	39 de                	cmp    esi,ebx
c000fd45:	74 20                	je     c000fd67 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd47:	42                   	inc    edx
c000fd48:	89 d9                	mov    ecx,ebx
c000fd4a:	83 fa 2f             	cmp    edx,0x2f
c000fd4d:	7f 11                	jg     c000fd60 <Phys::allocateDMA(unsigned long)+0x43>
c000fd4f:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fd56:	74 e0                	je     c000fd38 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	42                   	inc    edx
c000fd5b:	83 fa 2f             	cmp    edx,0x2f
c000fd5e:	7e ef                	jle    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd60:	5b                   	pop    ebx
c000fd61:	31 c0                	xor    eax,eax
c000fd63:	5e                   	pop    esi
c000fd64:	5f                   	pop    edi
c000fd65:	5d                   	pop    ebp
c000fd66:	c3                   	ret    
c000fd67:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6a:	89 d7                	mov    edi,edx
c000fd6c:	4f                   	dec    edi
c000fd6d:	79 03                	jns    c000fd72 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd72:	c1 ff 04             	sar    edi,0x4
c000fd75:	89 c2                	mov    edx,eax
c000fd77:	c1 fa 04             	sar    edx,0x4
c000fd7a:	39 fa                	cmp    edx,edi
c000fd7c:	75 2f                	jne    c000fdad <Phys::allocateDMA(unsigned long)+0x90>
c000fd7e:	85 db                	test   ebx,ebx
c000fd80:	74 1a                	je     c000fd9c <Phys::allocateDMA(unsigned long)+0x7f>
c000fd82:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fd87:	8d 90 e0 e3 02 c0    	lea    edx,[eax-0x3ffd1c20]
c000fd8d:	f7 d6                	not    esi
c000fd8f:	29 c6                	sub    esi,eax
c000fd91:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd94:	42                   	inc    edx
c000fd95:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd98:	39 d9                	cmp    ecx,ebx
c000fd9a:	7f f5                	jg     c000fd91 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9c:	85 ff                	test   edi,edi
c000fd9e:	74 13                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x96>
c000fda0:	5b                   	pop    ebx
c000fda1:	05 50 20 0c 00       	add    eax,0xc2050
c000fda6:	5e                   	pop    esi
c000fda7:	c1 e0 0c             	shl    eax,0xc
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	89 ea                	mov    edx,ebp
c000fdaf:	31 c9                	xor    ecx,ecx
c000fdb1:	eb a7                	jmp    c000fd5a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5e                   	pop    esi
c000fdb8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbd:	5f                   	pop    edi
c000fdbe:	5d                   	pop    ebp
c000fdbf:	c3                   	ret    

c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdce:	c1 e9 0c             	shr    ecx,0xc
c000fdd1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd6:	76 25                	jbe    c000fdfd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddd:	c1 e8 0c             	shr    eax,0xc
c000fde0:	8d 50 10             	lea    edx,[eax+0x10]
c000fde3:	85 c9                	test   ecx,ecx
c000fde5:	74 15                	je     c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde7:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fded:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fdf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf7:	40                   	inc    eax
c000fdf8:	39 d0                	cmp    eax,edx
c000fdfa:	75 f8                	jne    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfc:	c3                   	ret    
c000fdfd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe03:	c1 ea 0c             	shr    edx,0xc
c000fe06:	eb db                	jmp    c000fde3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe08 <Phys::setPageState(unsigned long, bool)>:
c000fe08:	56                   	push   esi
c000fe09:	ba 01 00 00 00       	mov    edx,0x1
c000fe0e:	53                   	push   ebx
c000fe0f:	8b 35 a0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a0
c000fe15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1d:	89 c8                	mov    eax,ecx
c000fe1f:	83 e1 07             	and    ecx,0x7
c000fe22:	c1 e8 03             	shr    eax,0x3
c000fe25:	d3 e3                	shl    ebx,cl
c000fe27:	01 c6                	add    esi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 16                	and    BYTE PTR [esi],dl
c000fe2f:	03 05 a0 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2a0
c000fe35:	08 18                	or     BYTE PTR [eax],bl
c000fe37:	5b                   	pop    ebx
c000fe38:	5e                   	pop    esi
c000fe39:	c3                   	ret    

c000fe3a <Phys::getPageState(unsigned long)>:
c000fe3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3e:	8b 15 a0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a0
c000fe44:	89 c8                	mov    eax,ecx
c000fe46:	83 e1 07             	and    ecx,0x7
c000fe49:	c1 e8 03             	shr    eax,0x3
c000fe4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe50:	d3 f8                	sar    eax,cl
c000fe52:	83 e0 01             	and    eax,0x1
c000fe55:	c3                   	ret    

c000fe56 <Phys::freePage(unsigned long)>:
c000fe56:	53                   	push   ebx
c000fe57:	83 ec 08             	sub    esp,0x8
c000fe5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe64:	76 57                	jbe    c000febd <Phys::freePage(unsigned long)+0x67>
c000fe66:	c1 eb 0c             	shr    ebx,0xc
c000fe69:	53                   	push   ebx
c000fe6a:	e8 cb ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fe6f:	5a                   	pop    edx
c000fe70:	84 c0                	test   al,al
c000fe72:	74 5b                	je     c000fecf <Phys::freePage(unsigned long)+0x79>
c000fe74:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fe79:	48                   	dec    eax
c000fe7a:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	c1 e0 02             	shl    eax,0x2
c000fe88:	99                   	cdq    
c000fe89:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000fe8f:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000fe95:	75 13                	jne    c000feaa <Phys::freePage(unsigned long)+0x54>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 66 ff ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	83 c4 08             	add    esp,0x8
c000fea8:	5b                   	pop    ebx
c000fea9:	c3                   	ret    
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000feb2:	50                   	push   eax
c000feb3:	e8 b4 0a 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	eb da                	jmp    c000fe97 <Phys::freePage(unsigned long)+0x41>
c000febd:	68 00 10 00 00       	push   0x1000
c000fec2:	53                   	push   ebx
c000fec3:	e8 f8 fe ff ff       	call   c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fec8:	59                   	pop    ecx
c000fec9:	5b                   	pop    ebx
c000feca:	83 c4 08             	add    esp,0x8
c000fecd:	5b                   	pop    ebx
c000fece:	c3                   	ret    
c000fecf:	c7 44 24 10 46 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a246
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	e9 9d a6 00 00       	jmp    c001a57d <Krnl::panic(char const*)>

c000fee0 <Phys::allocatePage()>:
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	83 ec 14             	sub    esp,0x14
c000fee5:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000feeb:	89 f3                	mov    ebx,esi
c000feed:	eb 0a                	jmp    c000fef9 <Phys::allocatePage()+0x19>
c000feef:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fef5:	39 de                	cmp    esi,ebx
c000fef7:	74 24                	je     c000ff1d <Phys::allocatePage()+0x3d>
c000fef9:	53                   	push   ebx
c000fefa:	e8 3b ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000feff:	5a                   	pop    edx
c000ff00:	84 c0                	test   al,al
c000ff02:	74 7b                	je     c000ff7f <Phys::allocatePage()+0x9f>
c000ff04:	43                   	inc    ebx
c000ff05:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0b:	75 e2                	jne    c000feef <Phys::allocatePage()+0xf>
c000ff0d:	31 db                	xor    ebx,ebx
c000ff0f:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000ff19:	39 de                	cmp    esi,ebx
c000ff1b:	75 dc                	jne    c000fef9 <Phys::allocatePage()+0x19>
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff28:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2e:	e8 a1 2c 00 00       	call   c0012bd4 <VAS::scanForEviction()>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	0f 85 a8 00 00 00    	jne    c000ffe6 <Phys::allocatePage()+0x106>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 6b a2 02 c0       	push   0xc002a26b
c000ff46:	e8 8d 2f 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ff4b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff52:	e8 c6 fd ff ff       	call   c000fd1d <Phys::allocateDMA(unsigned long)>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 6f                	jne    c000ffcd <Phys::allocatePage()+0xed>
c000ff5e:	83 ec 0c             	sub    esp,0xc
c000ff61:	68 7c a2 02 c0       	push   0xc002a27c
c000ff66:	e8 12 a6 00 00       	call   c001a57d <Krnl::panic(char const*)>
c000ff6b:	83 c4 10             	add    esp,0x10
c000ff6e:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000ff74:	53                   	push   ebx
c000ff75:	e8 c0 fe ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000ff7a:	5a                   	pop    edx
c000ff7b:	84 c0                	test   al,al
c000ff7d:	75 85                	jne    c000ff04 <Phys::allocatePage()+0x24>
c000ff7f:	6a 01                	push   0x1
c000ff81:	53                   	push   ebx
c000ff82:	e8 81 fe ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000ff87:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ff8c:	40                   	inc    eax
c000ff8d:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000ff92:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff95:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff98:	c1 e0 02             	shl    eax,0x2
c000ff9b:	99                   	cdq    
c000ff9c:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ffa2:	5a                   	pop    edx
c000ffa3:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ffa9:	59                   	pop    ecx
c000ffaa:	75 27                	jne    c000ffd3 <Phys::allocatePage()+0xf3>
c000ffac:	83 ec 08             	sub    esp,0x8
c000ffaf:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffb4:	c1 e0 0c             	shl    eax,0xc
c000ffb7:	50                   	push   eax
c000ffb8:	68 5c a2 02 c0       	push   0xc002a25c
c000ffbd:	e8 16 2f 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000ffc2:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	c1 e0 0c             	shl    eax,0xc
c000ffcd:	83 c4 14             	add    esp,0x14
c000ffd0:	5b                   	pop    ebx
c000ffd1:	5e                   	pop    esi
c000ffd2:	c3                   	ret    
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000ffdb:	50                   	push   eax
c000ffdc:	e8 8b 09 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	eb c6                	jmp    c000ffac <Phys::allocatePage()+0xcc>
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	50                   	push   eax
c000ffea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffee:	68 5c a2 02 c0       	push   0xc002a25c
c000fff3:	e8 e0 2e 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffff:	eb cc                	jmp    c000ffcd <Phys::allocatePage()+0xed>

c0010001 <Phys::allocateContiguousPages(int)>:
c0010001:	57                   	push   edi
c0010002:	56                   	push   esi
c0010003:	53                   	push   ebx
c0010004:	31 db                	xor    ebx,ebx
c0010006:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000a:	e8 68 dd 00 00       	call   c001dd77 <lockScheduler()>
c001000f:	85 db                	test   ebx,ebx
c0010011:	75 11                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010013:	e8 c8 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010018:	83 ff 01             	cmp    edi,0x1
c001001b:	89 c6                	mov    esi,eax
c001001d:	74 21                	je     c0010040 <Phys::allocateContiguousPages(int)+0x3f>
c001001f:	bb 01 00 00 00       	mov    ebx,0x1
c0010024:	e8 b7 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010029:	89 da                	mov    edx,ebx
c001002b:	c1 e2 0c             	shl    edx,0xc
c001002e:	01 f2                	add    edx,esi
c0010030:	39 c2                	cmp    edx,eax
c0010032:	74 17                	je     c001004b <Phys::allocateContiguousPages(int)+0x4a>
c0010034:	bb 01 00 00 00       	mov    ebx,0x1
c0010039:	89 c6                	mov    esi,eax
c001003b:	83 ff 01             	cmp    edi,0x1
c001003e:	75 e4                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010040:	e8 34 dd 00 00       	call   c001dd79 <unlockScheduler()>
c0010045:	89 f0                	mov    eax,esi
c0010047:	5b                   	pop    ebx
c0010048:	5e                   	pop    esi
c0010049:	5f                   	pop    edi
c001004a:	c3                   	ret    
c001004b:	43                   	inc    ebx
c001004c:	39 fb                	cmp    ebx,edi
c001004e:	75 bf                	jne    c001000f <Phys::allocateContiguousPages(int)+0xe>
c0010050:	e8 24 dd 00 00       	call   c001dd79 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    

c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001005b:	56                   	push   esi
c001005c:	53                   	push   ebx
c001005d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010061:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c0010067:	73 06                	jae    c001006f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010069:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c001006f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010073:	c1 eb 0c             	shr    ebx,0xc
c0010076:	c1 e8 0c             	shr    eax,0xc
c0010079:	39 d8                	cmp    eax,ebx
c001007b:	73 13                	jae    c0010090 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001007d:	6a 00                	push   0x0
c001007f:	8d 70 01             	lea    esi,[eax+0x1]
c0010082:	50                   	push   eax
c0010083:	e8 80 fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010088:	5a                   	pop    edx
c0010089:	89 f0                	mov    eax,esi
c001008b:	59                   	pop    ecx
c001008c:	39 f3                	cmp    ebx,esi
c001008e:	75 ed                	jne    c001007d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010090:	5b                   	pop    ebx
c0010091:	5e                   	pop    esi
c0010092:	c3                   	ret    

c0010093 <Phys::physicalMemorySetup(unsigned int)>:
c0010093:	55                   	push   ebp
c0010094:	57                   	push   edi
c0010095:	56                   	push   esi
c0010096:	53                   	push   ebx
c0010097:	31 db                	xor    ebx,ebx
c0010099:	83 ec 40             	sub    esp,0x40
c001009c:	6a 30                	push   0x30
c001009e:	6a 00                	push   0x0
c00100a0:	68 e0 e3 02 c0       	push   0xc002e3e0
c00100a5:	e8 ce 06 ff ff       	call   c0000778 <memset>
c00100aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b3:	05 00 10 00 00       	add    eax,0x1000
c00100b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	83 ec 08             	sub    esp,0x8
c00100c2:	6a 01                	push   0x1
c00100c4:	53                   	push   ebx
c00100c5:	43                   	inc    ebx
c00100c6:	e8 3d fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d4:	75 e9                	jne    c00100bf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100dd:	66 85 c0             	test   ax,ax
c00100e0:	0f 84 8e 01 00 00    	je     c0010274 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010107:	eb 15                	jmp    c001011e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010109:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001010d:	83 c3 18             	add    ebx,0x18
c0010110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010114:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010118:	0f 84 66 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010124:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001012b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001012f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010131:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010134:	01 f0                	add    eax,esi
c0010136:	55                   	push   ebp
c0010137:	11 fa                	adc    edx,edi
c0010139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001013d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010141:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010145:	56                   	push   esi
c0010146:	68 b4 a2 02 c0       	push   0xc002a2b4
c001014b:	e8 88 2d 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0010150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	09 f8                	or     eax,edi
c0010159:	0f 85 25 01 00 00    	jne    c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001015f:	4d                   	dec    ebp
c0010160:	75 a7                	jne    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010162:	ba 00 00 08 00       	mov    edx,0x80000
c0010167:	89 c1                	mov    ecx,eax
c0010169:	39 f2                	cmp    edx,esi
c001016b:	19 f9                	sbb    ecx,edi
c001016d:	0f 82 a7 00 00 00    	jb     c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010173:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010177:	89 c1                	mov    ecx,eax
c0010179:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001017d:	0f 83 97 00 00 00    	jae    c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010188:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001018c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010190:	39 fa                	cmp    edx,edi
c0010192:	19 e8                	sbb    eax,ebp
c0010194:	0f 82 14 01 00 00    	jb     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001019a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101ad:	83 d5 ff             	adc    ebp,0xffffffff
c00101b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b4:	31 c0                	xor    eax,eax
c00101b6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	89 c1                	mov    ecx,eax
c00101be:	19 e9                	sbb    ecx,ebp
c00101c0:	0f 83 43 ff ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c6:	be 00 00 08 00       	mov    esi,0x80000
c00101cb:	50                   	push   eax
c00101cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d0:	57                   	push   edi
c00101d1:	56                   	push   esi
c00101d2:	68 d8 a2 02 c0       	push   0xc002a2d8
c00101d7:	e8 fc 2c 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00101dc:	5a                   	pop    edx
c00101dd:	59                   	pop    ecx
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	e8 76 fe ff ff       	call   c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ed:	83 c4 0c             	add    esp,0xc
c00101f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f4:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c00101fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010201:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c0010206:	52                   	push   edx
c0010207:	50                   	push   eax
c0010208:	68 98 a2 02 c0       	push   0xc002a298
c001020d:	e8 c6 2c 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0010212:	83 c4 10             	add    esp,0x10
c0010215:	e9 ef fe ff ff       	jmp    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010226:	39 ea                	cmp    edx,ebp
c0010228:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001022c:	0f 82 d7 fe ff ff    	jb     c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010232:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010237:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001023b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023f:	0f 83 c4 fe ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010245:	39 ee                	cmp    esi,ebp
c0010247:	89 f8                	mov    eax,edi
c0010249:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024d:	0f 83 78 ff ff ff    	jae    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010253:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010257:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001025b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010263:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026f:	e9 57 ff ff ff       	jmp    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	68 8a a2 02 c0       	push   0xc002a28a
c001027c:	e8 fc a2 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	bb 40 01 00 00       	mov    ebx,0x140
c0010289:	83 ec 08             	sub    esp,0x8
c001028c:	6a 00                	push   0x0
c001028e:	53                   	push   ebx
c001028f:	43                   	inc    ebx
c0010290:	e8 73 fb ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010295:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a4:	75 e3                	jne    c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a6:	83 c4 3c             	add    esp,0x3c
c00102a9:	5b                   	pop    ebx
c00102aa:	5e                   	pop    esi
c00102ab:	5f                   	pop    edi
c00102ac:	5d                   	pop    ebp
c00102ad:	c3                   	ret    
c00102ae:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102be:	e9 d7 fe ff ff       	jmp    c001019a <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102c3:	90                   	nop

c00102c4 <Pipe::isAtty()>:
c00102c4:	31 c0                	xor    eax,eax
c00102c6:	c3                   	ret    
c00102c7:	90                   	nop

c00102c8 <Pipe::~Pipe()>:
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	89 10                	mov    DWORD PTR [eax],edx
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	50                   	push   eax
c00102de:	e8 37 16 00 00       	call   c001191a <UnixFile::~UnixFile()>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	90                   	nop
c00102e7:	83 c4 0c             	add    esp,0xc
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	83 ec 0c             	sub    esp,0xc
c00102f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f6:	e8 cd ff ff ff       	call   c00102c8 <Pipe::~Pipe()>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	83 ec 08             	sub    esp,0x8
c0010301:	6a 20                	push   0x20
c0010303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010307:	e8 ec 2a 00 00       	call   c0012df8 <operator delete(void*, unsigned long)>
c001030c:	83 c4 10             	add    esp,0x10
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <Pipe::read(unsigned long long, void*, int*)>:
c0010314:	55                   	push   ebp
c0010315:	57                   	push   edi
c0010316:	56                   	push   esi
c0010317:	53                   	push   ebx
c0010318:	83 ec 1c             	sub    esp,0x1c
c001031b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001031f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010323:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010327:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001032a:	89 c8                	mov    eax,ecx
c001032c:	99                   	cdq    
c001032d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010331:	74 19                	je     c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010333:	39 f9                	cmp    ecx,edi
c0010335:	89 d1                	mov    ecx,edx
c0010337:	19 f1                	sbb    ecx,esi
c0010339:	73 11                	jae    c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001033b:	e8 37 da 00 00       	call   c001dd77 <lockScheduler()>
c0010340:	e8 6d dd 00 00       	call   c001e0b2 <schedule()>
c0010345:	e8 2f da 00 00       	call   c001dd79 <unlockScheduler()>
c001034a:	eb db                	jmp    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001034c:	39 f8                	cmp    eax,edi
c001034e:	89 d1                	mov    ecx,edx
c0010350:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010358:	19 f1                	sbb    ecx,esi
c001035a:	73 08                	jae    c0010364 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001035c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010364:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010367:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036a:	29 c6                	sub    esi,eax
c001036c:	89 f1                	mov    ecx,esi
c001036e:	c1 f9 1f             	sar    ecx,0x1f
c0010371:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010375:	89 ca                	mov    edx,ecx
c0010377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037b:	19 d1                	sbb    ecx,edx
c001037d:	73 04                	jae    c0010383 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001037f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010383:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010387:	89 fd                	mov    ebp,edi
c0010389:	29 f5                	sub    ebp,esi
c001038b:	85 f6                	test   esi,esi
c001038d:	74 12                	je     c00103a1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001038f:	52                   	push   edx
c0010390:	56                   	push   esi
c0010391:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010394:	50                   	push   eax
c0010395:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010399:	e8 a6 03 ff ff       	call   c0000744 <memcpy>
c001039e:	83 c4 10             	add    esp,0x10
c00103a1:	85 ed                	test   ebp,ebp
c00103a3:	74 12                	je     c00103b7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a5:	50                   	push   eax
c00103a6:	55                   	push   ebp
c00103a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103aa:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103ae:	56                   	push   esi
c00103af:	e8 90 03 ff ff       	call   c0000744 <memcpy>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103bd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c0:	99                   	cdq    
c00103c1:	89 f7                	mov    edi,esi
c00103c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103cb:	c1 ff 1f             	sar    edi,0x1f
c00103ce:	57                   	push   edi
c00103cf:	56                   	push   esi
c00103d0:	52                   	push   edx
c00103d1:	50                   	push   eax
c00103d2:	e8 a5 66 01 00       	call   c0026a7c <__umoddi3>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103dd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e2:	75 10                	jne    c00103f4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	68 01 a3 02 c0       	push   0xc002a301
c00103ec:	e8 8c a1 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fc:	89 10                	mov    DWORD PTR [eax],edx
c00103fe:	83 c4 1c             	add    esp,0x1c
c0010401:	31 c0                	xor    eax,eax
c0010403:	5b                   	pop    ebx
c0010404:	5e                   	pop    esi
c0010405:	5f                   	pop    edi
c0010406:	5d                   	pop    ebp
c0010407:	c3                   	ret    

c0010408 <Pipe::write(unsigned long long, void*, int*)>:
c0010408:	55                   	push   ebp
c0010409:	57                   	push   edi
c001040a:	56                   	push   esi
c001040b:	53                   	push   ebx
c001040c:	83 ec 1c             	sub    esp,0x1c
c001040f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010413:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010417:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001041b:	89 04 24             	mov    DWORD PTR [esp],eax
c001041e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010421:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010424:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010428:	89 de                	mov    esi,ebx
c001042a:	89 df                	mov    edi,ebx
c001042c:	c1 ff 1f             	sar    edi,0x1f
c001042f:	01 c6                	add    esi,eax
c0010431:	89 c8                	mov    eax,ecx
c0010433:	11 d7                	adc    edi,edx
c0010435:	99                   	cdq    
c0010436:	39 f1                	cmp    ecx,esi
c0010438:	89 d0                	mov    eax,edx
c001043a:	19 f8                	sbb    eax,edi
c001043c:	b8 01 00 00 00       	mov    eax,0x1
c0010441:	0f 82 80 00 00 00    	jb     c00104c7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010447:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001044a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001044d:	01 d8                	add    eax,ebx
c001044f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010453:	99                   	cdq    
c0010454:	f7 f9                	idiv   ecx
c0010456:	29 d1                	sub    ecx,edx
c0010458:	89 d7                	mov    edi,edx
c001045a:	89 c8                	mov    eax,ecx
c001045c:	99                   	cdq    
c001045d:	39 ce                	cmp    esi,ecx
c001045f:	19 d3                	sbb    ebx,edx
c0010461:	bb 00 00 00 00       	mov    ebx,0x0
c0010466:	72 04                	jb     c001046c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010468:	89 f3                	mov    ebx,esi
c001046a:	29 cb                	sub    ebx,ecx
c001046c:	89 f1                	mov    ecx,esi
c001046e:	29 d9                	sub    ecx,ebx
c0010470:	74 1a                	je     c001048c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010472:	52                   	push   edx
c0010473:	51                   	push   ecx
c0010474:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010478:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001047c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001047f:	57                   	push   edi
c0010480:	e8 bf 02 ff ff       	call   c0000744 <memcpy>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001048c:	85 db                	test   ebx,ebx
c001048e:	74 12                	je     c00104a2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010490:	50                   	push   eax
c0010491:	53                   	push   ebx
c0010492:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010496:	51                   	push   ecx
c0010497:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001049a:	e8 a5 02 ff ff       	call   c0000744 <memcpy>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104aa:	75 10                	jne    c00104bc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	68 1d a3 02 c0       	push   0xc002a31d
c00104b4:	e8 c4 a0 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c3:	89 38                	mov    DWORD PTR [eax],edi
c00104c5:	31 c0                	xor    eax,eax
c00104c7:	83 c4 1c             	add    esp,0x1c
c00104ca:	5b                   	pop    ebx
c00104cb:	5e                   	pop    esi
c00104cc:	5f                   	pop    edi
c00104cd:	5d                   	pop    ebp
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <Pipe::Pipe(int)>:
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d7:	83 ec 08             	sub    esp,0x8
c00104da:	6a 00                	push   0x0
c00104dc:	50                   	push   eax
c00104dd:	e8 56 12 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ff:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	50                   	push   eax
c0010519:	e8 25 f3 ff ff       	call   c000f843 <malloc>
c001051e:	83 c4 10             	add    esp,0x10
c0010521:	89 c2                	mov    edx,eax
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010532:	90                   	nop
c0010533:	83 c4 0c             	add    esp,0xc
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <VgaText::isAtty()>:
c0010538:	b0 01                	mov    al,0x1
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::~VgaText()>:
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	ba 00 a4 02 c0       	mov    edx,0xc002a400
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	89 10                	mov    DWORD PTR [eax],edx
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	83 ec 0c             	sub    esp,0xc
c0010551:	50                   	push   eax
c0010552:	e8 c3 13 00 00       	call   c001191a <UnixFile::~UnixFile()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	90                   	nop
c001055b:	83 c4 0c             	add    esp,0xc
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056a:	e8 cd ff ff ff       	call   c001053c <VgaText::~VgaText()>
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	83 ec 08             	sub    esp,0x8
c0010575:	68 60 12 00 00       	push   0x1260
c001057a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057e:	e8 75 28 00 00       	call   c0012df8 <operator delete(void*, unsigned long)>
c0010583:	83 c4 10             	add    esp,0x10
c0010586:	83 c4 0c             	add    esp,0xc
c0010589:	c3                   	ret    

c001058a <VgaText::read(unsigned long long, void*, int*)>:
c001058a:	83 ec 10             	sub    esp,0x10
c001058d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010591:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010599:	e8 dc 5c 00 00       	call   c001627a <readKeyboard(VgaText*, char*, unsigned long)>
c001059e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a2:	89 02                	mov    DWORD PTR [edx],eax
c00105a4:	31 c0                	xor    eax,eax
c00105a6:	83 c4 1c             	add    esp,0x1c
c00105a9:	c3                   	ret    

c00105aa <setTerminalScrollLock(bool)>:
c00105aa:	c3                   	ret    

c00105ab <addToTerminalCycle(VgaText*)>:
c00105ab:	8b 15 60 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e460
c00105b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b5:	85 d2                	test   edx,edx
c00105b7:	75 0c                	jne    c00105c5 <addToTerminalCycle(VgaText*)+0x1a>
c00105b9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105bf:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c00105c4:	c3                   	ret    
c00105c5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105cb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105d7:	c3                   	ret    

c00105d8 <installVgaTextImplementation()>:
c00105d8:	83 ec 10             	sub    esp,0x10
c00105db:	6a 20                	push   0x20
c00105dd:	6a 00                	push   0x0
c00105df:	68 40 e4 02 c0       	push   0xc002e440
c00105e4:	e8 8f 01 ff ff       	call   c0000778 <memset>
c00105e9:	83 c4 1c             	add    esp,0x1c
c00105ec:	c3                   	ret    

c00105ed <scrollTerminalScrollLock(int)>:
c00105ed:	c3                   	ret    

c00105ee <VgaText::load()>:
c00105ee:	53                   	push   ebx
c00105ef:	31 c0                	xor    eax,eax
c00105f1:	83 ec 58             	sub    esp,0x58
c00105f4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f8:	89 e2                	mov    edx,esp
c00105fa:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105fe:	40                   	inc    eax
c00105ff:	83 f8 50             	cmp    eax,0x50
c0010602:	75 f6                	jne    c00105fa <VgaText::load()+0xc>
c0010604:	31 c0                	xor    eax,eax
c0010606:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001060d:	84 c9                	test   cl,cl
c001060f:	74 06                	je     c0010617 <VgaText::load()+0x29>
c0010611:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010614:	40                   	inc    eax
c0010615:	eb ef                	jmp    c0010606 <VgaText::load()+0x18>
c0010617:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 09                	je     c001062a <VgaText::load()+0x3c>
c0010621:	51                   	push   ecx
c0010622:	51                   	push   ecx
c0010623:	52                   	push   edx
c0010624:	53                   	push   ebx
c0010625:	ff d0                	call   eax
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010630:	85 c0                	test   eax,eax
c0010632:	74 09                	je     c001063d <VgaText::load()+0x4f>
c0010634:	83 ec 0c             	sub    esp,0xc
c0010637:	53                   	push   ebx
c0010638:	ff d0                	call   eax
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	83 c4 58             	add    esp,0x58
c0010640:	5b                   	pop    ebx
c0010641:	c3                   	ret    

c0010642 <VgaText::updateCursor()>:
c0010642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010646:	39 05 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,eax
c001064c:	75 0c                	jne    c001065a <VgaText::updateCursor()+0x18>
c001064e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 02                	je     c001065a <VgaText::updateCursor()+0x18>
c0010658:	ff e0                	jmp    eax
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::showCursor(bool)>:
c001065c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010664:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::disableBlink(bool)>:
c001066c:	56                   	push   esi
c001066d:	53                   	push   ebx
c001066e:	51                   	push   ecx
c001066f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010677:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c001067d:	75 18                	jne    c0010697 <VgaText::disableBlink(bool)+0x2b>
c001067f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 0e                	je     c0010697 <VgaText::disableBlink(bool)+0x2b>
c0010689:	89 f1                	mov    ecx,esi
c001068b:	52                   	push   edx
c001068c:	52                   	push   edx
c001068d:	0f b6 d1             	movzx  edx,cl
c0010690:	52                   	push   edx
c0010691:	53                   	push   ebx
c0010692:	ff d0                	call   eax
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	89 f0                	mov    eax,esi
c0010699:	83 f0 01             	xor    eax,0x1
c001069c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a2:	58                   	pop    eax
c00106a3:	5b                   	pop    ebx
c00106a4:	5e                   	pop    esi
c00106a5:	c3                   	ret    

c00106a6 <VgaText::doANSI_SGR(int)>:
c00106a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	85 d2                	test   edx,edx
c00106b0:	75 14                	jne    c00106c6 <VgaText::doANSI_SGR(int)+0x20>
c00106b2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106b8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106be:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c4:	eb 65                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	83 fa 07             	cmp    edx,0x7
c00106c9:	75 14                	jne    c00106df <VgaText::doANSI_SGR(int)+0x39>
c00106cb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106d7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106dd:	eb 4c                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106df:	83 fa 1b             	cmp    edx,0x1b
c00106e2:	74 ce                	je     c00106b2 <VgaText::doANSI_SGR(int)+0xc>
c00106e4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 09                	ja     c00106f5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ec:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00106f3:	eb 20                	jmp    c0010715 <VgaText::doANSI_SGR(int)+0x6f>
c00106f5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f8:	83 f9 07             	cmp    ecx,0x7
c00106fb:	77 09                	ja     c0010706 <VgaText::doANSI_SGR(int)+0x60>
c00106fd:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010704:	eb 25                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c0010706:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010709:	83 f9 07             	cmp    ecx,0x7
c001070c:	77 0e                	ja     c001071c <VgaText::doANSI_SGR(int)+0x76>
c001070e:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c0010715:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071b:	c3                   	ret    
c001071c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001071f:	83 f9 07             	cmp    ecx,0x7
c0010722:	77 0d                	ja     c0010731 <VgaText::doANSI_SGR(int)+0x8b>
c0010724:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c001072b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010731:	c3                   	ret    

c0010732 <VgaText::setDefaultBgColour(VgaColour)>:
c0010732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010740:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <VgaText::setDefaultFgColour(VgaColour)>:
c0010748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001074c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010750:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010756:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001075c:	c3                   	ret    
c001075d:	90                   	nop

c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001075e:	53                   	push   ebx
c001075f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010763:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010767:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076b:	51                   	push   ecx
c001076c:	e8 c1 ff ff ff       	call   c0010732 <VgaText::setDefaultBgColour(VgaColour)>
c0010771:	58                   	pop    eax
c0010772:	5a                   	pop    edx
c0010773:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077b:	5b                   	pop    ebx
c001077c:	eb ca                	jmp    c0010748 <VgaText::setDefaultFgColour(VgaColour)>

c001077e <VgaText::combineColours(unsigned char, unsigned char)>:
c001077e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010782:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010787:	83 e0 0f             	and    eax,0xf
c001078a:	c1 e2 04             	shl    edx,0x4
c001078d:	09 d0                	or     eax,edx
c001078f:	c3                   	ret    

c0010790 <VgaText::scrollScreen()>:
c0010790:	57                   	push   edi
c0010791:	56                   	push   esi
c0010792:	be 01 00 00 00       	mov    esi,0x1
c0010797:	53                   	push   ebx
c0010798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001079c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a2:	31 ff                	xor    edi,edi
c00107a4:	01 d9                	add    ecx,ebx
c00107a6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107a9:	83 fe 17             	cmp    esi,0x17
c00107ac:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b2:	75 28                	jne    c00107dc <VgaText::scrollScreen()+0x4c>
c00107b4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ba:	74 1c                	je     c00107d8 <VgaText::scrollScreen()+0x48>
c00107bc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c3:	50                   	push   eax
c00107c4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107cb:	50                   	push   eax
c00107cc:	e8 ad ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00107d1:	5a                   	pop    edx
c00107d2:	5a                   	pop    edx
c00107d3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107d6:	eb 04                	jmp    c00107dc <VgaText::scrollScreen()+0x4c>
c00107d8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107dc:	47                   	inc    edi
c00107dd:	41                   	inc    ecx
c00107de:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e4:	75 c0                	jne    c00107a6 <VgaText::scrollScreen()+0x16>
c00107e6:	46                   	inc    esi
c00107e7:	83 fe 18             	cmp    esi,0x18
c00107ea:	75 b0                	jne    c001079c <VgaText::scrollScreen()+0xc>
c00107ec:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c00107f2:	75 24                	jne    c0010818 <VgaText::scrollScreen()+0x88>
c00107f4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107fb:	74 08                	je     c0010805 <VgaText::scrollScreen()+0x75>
c00107fd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010803:	eb 13                	jmp    c0010818 <VgaText::scrollScreen()+0x88>
c0010805:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001080b:	85 c0                	test   eax,eax
c001080d:	74 09                	je     c0010818 <VgaText::scrollScreen()+0x88>
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	53                   	push   ebx
c0010813:	ff d0                	call   eax
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001081c:	5b                   	pop    ebx
c001081d:	5e                   	pop    esi
c001081e:	5f                   	pop    edi
c001081f:	e9 1e fe ff ff       	jmp    c0010642 <VgaText::updateCursor()>

c0010824 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010829:	c1 e0 08             	shl    eax,0x8
c001082c:	89 c2                	mov    edx,eax
c001082e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010833:	09 d0                	or     eax,edx
c0010835:	c3                   	ret    

c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010836:	53                   	push   ebx
c0010837:	83 ec 08             	sub    esp,0x8
c001083a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010843:	50                   	push   eax
c0010844:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010849:	50                   	push   eax
c001084a:	e8 2f ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c001084f:	5a                   	pop    edx
c0010850:	0f b6 c0             	movzx  eax,al
c0010853:	5b                   	pop    ebx
c0010854:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010859:	50                   	push   eax
c001085a:	53                   	push   ebx
c001085b:	e8 c4 ff ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010860:	5a                   	pop    edx
c0010861:	5a                   	pop    edx
c0010862:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010868:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001086c:	0f b7 d2             	movzx  edx,dx
c001086f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010874:	39 0d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ecx
c001087a:	75 14                	jne    c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001087c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010882:	85 c0                	test   eax,eax
c0010884:	74 0a                	je     c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010886:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088a:	83 c4 08             	add    esp,0x8
c001088d:	5b                   	pop    ebx
c001088e:	ff e0                	jmp    eax
c0010890:	83 c4 08             	add    esp,0x8
c0010893:	5b                   	pop    ebx
c0010894:	c3                   	ret    
c0010895:	90                   	nop

c0010896 <VgaText::getCursorX()>:
c0010896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a0:	c3                   	ret    
c00108a1:	90                   	nop

c00108a2 <VgaText::getCursorY()>:
c00108a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <VgaText::setCursor(int, int)>:
c00108ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108b6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108c6:	e9 77 fd ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c00108cb:	90                   	nop

c00108cc <VgaText::setCursorX(int)>:
c00108cc:	83 ec 10             	sub    esp,0x10
c00108cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108dd:	50                   	push   eax
c00108de:	e8 cb ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108e3:	83 c4 1c             	add    esp,0x1c
c00108e6:	c3                   	ret    
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorY(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108f9:	50                   	push   eax
c00108fa:	e8 af ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108ff:	83 c4 1c             	add    esp,0x1c
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::incrementCursor(bool)>:
c0010904:	56                   	push   esi
c0010905:	53                   	push   ebx
c0010906:	51                   	push   ecx
c0010907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001090f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010915:	40                   	inc    eax
c0010916:	83 f8 50             	cmp    eax,0x50
c0010919:	74 08                	je     c0010923 <VgaText::incrementCursor(bool)+0x1f>
c001091b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010921:	eb 33                	jmp    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010923:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010929:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010933:	8d 50 01             	lea    edx,[eax+0x1]
c0010936:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001093c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010942:	75 12                	jne    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001094d:	53                   	push   ebx
c001094e:	e8 3d fe ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	89 f0                	mov    eax,esi
c0010958:	84 c0                	test   al,al
c001095a:	74 0c                	je     c0010968 <VgaText::incrementCursor(bool)+0x64>
c001095c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010960:	5a                   	pop    edx
c0010961:	5b                   	pop    ebx
c0010962:	5e                   	pop    esi
c0010963:	e9 da fc ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010968:	58                   	pop    eax
c0010969:	5b                   	pop    ebx
c001096a:	5e                   	pop    esi
c001096b:	c3                   	ret    

c001096c <VgaText::updateRAMUsageDisplay(int)>:
c001096c:	56                   	push   esi
c001096d:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c0010973:	53                   	push   ebx
c0010974:	bb 0a 00 00 00       	mov    ebx,0xa
c0010979:	6a 0f                	push   0xf
c001097b:	6a 00                	push   0x0
c001097d:	e8 fc fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010982:	5a                   	pop    edx
c0010983:	59                   	pop    ecx
c0010984:	0f b6 c8             	movzx  ecx,al
c0010987:	51                   	push   ecx
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	99                   	cdq    
c001098d:	f7 fb                	idiv   ebx
c001098f:	89 d3                	mov    ebx,edx
c0010991:	83 c0 30             	add    eax,0x30
c0010994:	83 c3 30             	add    ebx,0x30
c0010997:	0f be c0             	movsx  eax,al
c001099a:	0f b6 db             	movzx  ebx,bl
c001099d:	50                   	push   eax
c001099e:	e8 81 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a3:	5a                   	pop    edx
c00109a4:	5a                   	pop    edx
c00109a5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ac:	51                   	push   ecx
c00109ad:	53                   	push   ebx
c00109ae:	e8 71 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5b                   	pop    ebx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109bc:	51                   	push   ecx
c00109bd:	6a 25                	push   0x25
c00109bf:	e8 60 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c4:	59                   	pop    ecx
c00109c5:	5b                   	pop    ebx
c00109c6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    

c00109d0 <VgaText::updateDiskUsage()>:
c00109d0:	55                   	push   ebp
c00109d1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d6:	57                   	push   edi
c00109d7:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c00109dd:	56                   	push   esi
c00109de:	53                   	push   ebx
c00109df:	6a 0f                	push   0xf
c00109e1:	6a 00                	push   0x0
c00109e3:	e8 96 fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00109e8:	5a                   	pop    edx
c00109e9:	0f b6 d8             	movzx  ebx,al
c00109ec:	59                   	pop    ecx
c00109ed:	8b 35 e8 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e8
c00109f3:	53                   	push   ebx
c00109f4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f9:	89 f0                	mov    eax,esi
c00109fb:	99                   	cdq    
c00109fc:	f7 fd                	idiv   ebp
c00109fe:	99                   	cdq    
c00109ff:	f7 f9                	idiv   ecx
c0010a01:	8d 42 30             	lea    eax,[edx+0x30]
c0010a04:	0f b6 c0             	movzx  eax,al
c0010a07:	50                   	push   eax
c0010a08:	e8 17 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	5d                   	pop    ebp
c0010a0e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a13:	5a                   	pop    edx
c0010a14:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a18:	53                   	push   ebx
c0010a19:	89 f0                	mov    eax,esi
c0010a1b:	99                   	cdq    
c0010a1c:	f7 fd                	idiv   ebp
c0010a1e:	99                   	cdq    
c0010a1f:	f7 f9                	idiv   ecx
c0010a21:	8d 42 30             	lea    eax,[edx+0x30]
c0010a24:	0f b6 c0             	movzx  eax,al
c0010a27:	50                   	push   eax
c0010a28:	e8 f7 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2d:	5d                   	pop    ebp
c0010a2e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a33:	5a                   	pop    edx
c0010a34:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3b:	53                   	push   ebx
c0010a3c:	89 f0                	mov    eax,esi
c0010a3e:	99                   	cdq    
c0010a3f:	f7 fd                	idiv   ebp
c0010a41:	99                   	cdq    
c0010a42:	f7 f9                	idiv   ecx
c0010a44:	8d 42 30             	lea    eax,[edx+0x30]
c0010a47:	0f b6 c0             	movzx  eax,al
c0010a4a:	50                   	push   eax
c0010a4b:	e8 d4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a50:	5d                   	pop    ebp
c0010a51:	5a                   	pop    edx
c0010a52:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a59:	53                   	push   ebx
c0010a5a:	89 f0                	mov    eax,esi
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	89 d6                	mov    esi,edx
c0010a61:	99                   	cdq    
c0010a62:	f7 f9                	idiv   ecx
c0010a64:	8d 42 30             	lea    eax,[edx+0x30]
c0010a67:	0f b6 c0             	movzx  eax,al
c0010a6a:	50                   	push   eax
c0010a6b:	e8 b4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a70:	5d                   	pop    ebp
c0010a71:	5a                   	pop    edx
c0010a72:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a79:	53                   	push   ebx
c0010a7a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a7d:	0f b6 f0             	movzx  esi,al
c0010a80:	56                   	push   esi
c0010a81:	e8 9e fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a86:	5e                   	pop    esi
c0010a87:	8b 35 e4 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e4
c0010a8d:	5d                   	pop    ebp
c0010a8e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a95:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9a:	53                   	push   ebx
c0010a9b:	89 f0                	mov    eax,esi
c0010a9d:	99                   	cdq    
c0010a9e:	f7 fd                	idiv   ebp
c0010aa0:	99                   	cdq    
c0010aa1:	f7 f9                	idiv   ecx
c0010aa3:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa6:	0f b6 c0             	movzx  eax,al
c0010aa9:	50                   	push   eax
c0010aaa:	e8 75 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaf:	5a                   	pop    edx
c0010ab0:	5d                   	pop    ebp
c0010ab1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abd:	53                   	push   ebx
c0010abe:	89 f0                	mov    eax,esi
c0010ac0:	99                   	cdq    
c0010ac1:	f7 fd                	idiv   ebp
c0010ac3:	99                   	cdq    
c0010ac4:	f7 f9                	idiv   ecx
c0010ac6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	50                   	push   eax
c0010acd:	e8 52 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad2:	5a                   	pop    edx
c0010ad3:	5d                   	pop    ebp
c0010ad4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adb:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae0:	53                   	push   ebx
c0010ae1:	89 f0                	mov    eax,esi
c0010ae3:	99                   	cdq    
c0010ae4:	f7 fd                	idiv   ebp
c0010ae6:	99                   	cdq    
c0010ae7:	f7 f9                	idiv   ecx
c0010ae9:	83 c2 30             	add    edx,0x30
c0010aec:	0f b6 d2             	movzx  edx,dl
c0010aef:	52                   	push   edx
c0010af0:	e8 2f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af5:	5a                   	pop    edx
c0010af6:	5d                   	pop    ebp
c0010af7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afe:	53                   	push   ebx
c0010aff:	89 f0                	mov    eax,esi
c0010b01:	99                   	cdq    
c0010b02:	f7 f9                	idiv   ecx
c0010b04:	89 d6                	mov    esi,edx
c0010b06:	99                   	cdq    
c0010b07:	f7 f9                	idiv   ecx
c0010b09:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0c:	0f b6 c0             	movzx  eax,al
c0010b0f:	50                   	push   eax
c0010b10:	e8 0f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b15:	5a                   	pop    edx
c0010b16:	59                   	pop    ecx
c0010b17:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1e:	53                   	push   ebx
c0010b1f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b22:	0f b6 f0             	movzx  esi,al
c0010b25:	56                   	push   esi
c0010b26:	e8 f9 fc ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2b:	5b                   	pop    ebx
c0010b2c:	5e                   	pop    esi
c0010b2d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b34:	5b                   	pop    ebx
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	5d                   	pop    ebp
c0010b38:	c3                   	ret    
c0010b39:	90                   	nop

c0010b3a <VgaText::updateTitle()>:
c0010b3a:	53                   	push   ebx
c0010b3b:	31 c0                	xor    eax,eax
c0010b3d:	83 ec 58             	sub    esp,0x58
c0010b40:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b44:	89 e1                	mov    ecx,esp
c0010b46:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4a:	40                   	inc    eax
c0010b4b:	83 f8 50             	cmp    eax,0x50
c0010b4e:	75 f6                	jne    c0010b46 <VgaText::updateTitle()+0xc>
c0010b50:	31 c0                	xor    eax,eax
c0010b52:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b59:	84 db                	test   bl,bl
c0010b5b:	74 06                	je     c0010b63 <VgaText::updateTitle()+0x29>
c0010b5d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b60:	40                   	inc    eax
c0010b61:	eb ef                	jmp    c0010b52 <VgaText::updateTitle()+0x18>
c0010b63:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b69:	85 c0                	test   eax,eax
c0010b6b:	74 09                	je     c0010b76 <VgaText::updateTitle()+0x3c>
c0010b6d:	53                   	push   ebx
c0010b6e:	53                   	push   ebx
c0010b6f:	51                   	push   ecx
c0010b70:	52                   	push   edx
c0010b71:	ff d0                	call   eax
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	e8 55 fe ff ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0010b7b:	83 c4 58             	add    esp,0x58
c0010b7e:	5b                   	pop    ebx
c0010b7f:	c3                   	ret    

c0010b80 <VgaText::setTitleTextColour(VgaColour)>:
c0010b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b88:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b8e:	eb aa                	jmp    c0010b3a <VgaText::updateTitle()>

c0010b90 <VgaText::setTitleColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b9e:	eb 9a                	jmp    c0010b3a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitle(char*)>:
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 10             	sub    esp,0x10
c0010ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bac:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb2:	50                   	push   eax
c0010bb3:	e8 7c fc fe ff       	call   c0000834 <strcpy>
c0010bb8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bbc:	83 c4 18             	add    esp,0x18
c0010bbf:	5b                   	pop    ebx
c0010bc0:	e9 75 ff ff ff       	jmp    c0010b3a <VgaText::updateTitle()>
c0010bc5:	90                   	nop

c0010bc6 <VgaText::decrementCursor(bool)>:
c0010bc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bce:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	74 07                	je     c0010bdf <VgaText::decrementCursor(bool)+0x19>
c0010bd8:	48                   	dec    eax
c0010bd9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bdf:	84 c9                	test   cl,cl
c0010be1:	74 09                	je     c0010bec <VgaText::decrementCursor(bool)+0x26>
c0010be3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be7:	e9 56 fa ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010bec:	c3                   	ret    
c0010bed:	90                   	nop

c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bee:	53                   	push   ebx
c0010bef:	83 ec 08             	sub    esp,0x8
c0010bf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c02:	3c 07                	cmp    al,0x7
c0010c04:	75 2a                	jne    c0010c30 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c06:	a1 14 e5 02 c0       	mov    eax,ds:0xc002e514
c0010c0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c13:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c1b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c27:	83 c4 08             	add    esp,0x8
c0010c2a:	5b                   	pop    ebx
c0010c2b:	e9 a6 30 00 00       	jmp    c0013cd6 <Buzzer::beep(int, int, bool)>
c0010c30:	3c 0d                	cmp    al,0xd
c0010c32:	75 0c                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c34:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c3e:	eb 3b                	jmp    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c40:	3c 0a                	cmp    al,0xa
c0010c42:	75 40                	jne    c0010c84 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c44:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c4a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c54:	8d 50 01             	lea    edx,[eax+0x1]
c0010c57:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c5d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c63:	75 12                	jne    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c65:	83 ec 0c             	sub    esp,0xc
c0010c68:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 1c fb ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7b:	83 c4 08             	add    esp,0x8
c0010c7e:	5b                   	pop    ebx
c0010c7f:	e9 be f9 ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010c84:	3c 08                	cmp    al,0x8
c0010c86:	75 31                	jne    c0010cb9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c88:	50                   	push   eax
c0010c89:	50                   	push   eax
c0010c8a:	6a 01                	push   0x1
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 34 ff ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010c92:	5a                   	pop    edx
c0010c93:	59                   	pop    ecx
c0010c94:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c9a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ca6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cac:	6a 20                	push   0x20
c0010cae:	53                   	push   ebx
c0010caf:	e8 82 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb4:	83 c4 28             	add    esp,0x28
c0010cb7:	5b                   	pop    ebx
c0010cb8:	c3                   	ret    
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	0f be c0             	movsx  eax,al
c0010cbf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ccb:	51                   	push   ecx
c0010ccc:	52                   	push   edx
c0010ccd:	50                   	push   eax
c0010cce:	53                   	push   ebx
c0010ccf:	e8 62 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cd8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce0:	83 c4 28             	add    esp,0x28
c0010ce3:	5b                   	pop    ebx
c0010ce4:	e9 1b fc ff ff       	jmp    c0010904 <VgaText::incrementCursor(bool)>
c0010ce9:	90                   	nop

c0010cea <VgaText::isShowingCursor()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf4:	c3                   	ret    
c0010cf5:	90                   	nop

c0010cf6 <VgaText::isBlinkDisabled()>:
c0010cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfa:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d00:	83 f0 01             	xor    eax,0x1
c0010d03:	c3                   	ret    

c0010d04 <VgaText::setCursorHeight(int)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d0c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d12:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d1d:	e9 3a f9 ff ff       	jmp    c001065c <VgaText::showCursor(bool)>

c0010d22 <VgaText::getCursorHeight()>:
c0010d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d26:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d2c:	c3                   	ret    

c0010d2d <setActiveTerminal(VgaText*)>:
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 08             	sub    esp,0x8
c0010d31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d35:	85 db                	test   ebx,ebx
c0010d37:	75 11                	jne    c0010d4a <setActiveTerminal(VgaText*)+0x1d>
c0010d39:	c7 44 24 10 58 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a358
c0010d41:	83 c4 08             	add    esp,0x8
c0010d44:	5b                   	pop    ebx
c0010d45:	e9 33 98 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c0010d4a:	50                   	push   eax
c0010d4b:	50                   	push   eax
c0010d4c:	53                   	push   ebx
c0010d4d:	68 66 a3 02 c0       	push   0xc002a366
c0010d52:	e8 81 21 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0010d57:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0010d5c:	83 c4 10             	add    esp,0x10
c0010d5f:	85 c0                	test   eax,eax
c0010d61:	74 0c                	je     c0010d6f <setActiveTerminal(VgaText*)+0x42>
c0010d63:	83 ec 0c             	sub    esp,0xc
c0010d66:	50                   	push   eax
c0010d67:	e8 d6 f8 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0010d75:	51                   	push   ecx
c0010d76:	51                   	push   ecx
c0010d77:	53                   	push   ebx
c0010d78:	68 7e a3 02 c0       	push   0xc002a37e
c0010d7d:	e8 56 21 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0010d82:	83 c4 0c             	add    esp,0xc
c0010d85:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d8b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d91:	53                   	push   ebx
c0010d92:	e8 17 fb ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010d97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d9a:	e8 57 ff ff ff       	call   c0010cf6 <VgaText::isBlinkDisabled()>
c0010d9f:	5a                   	pop    edx
c0010da0:	0f b6 c0             	movzx  eax,al
c0010da3:	59                   	pop    ecx
c0010da4:	50                   	push   eax
c0010da5:	53                   	push   ebx
c0010da6:	e8 c1 f8 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c0010dab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dae:	e8 6f ff ff ff       	call   c0010d22 <VgaText::getCursorHeight()>
c0010db3:	5a                   	pop    edx
c0010db4:	59                   	pop    ecx
c0010db5:	50                   	push   eax
c0010db6:	53                   	push   ebx
c0010db7:	e8 48 ff ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dc6:	75 0a                	jne    c0010dd2 <setActiveTerminal(VgaText*)+0xa5>
c0010dc8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dd6:	83 c4 08             	add    esp,0x8
c0010dd9:	5b                   	pop    ebx
c0010dda:	e9 0f f8 ff ff       	jmp    c00105ee <VgaText::load()>

c0010ddf <doTerminalCycle()>:
c0010ddf:	83 ec 18             	sub    esp,0x18
c0010de2:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0010de7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010ded:	50                   	push   eax
c0010dee:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010df3:	e8 35 ff ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0010df8:	83 c4 1c             	add    esp,0x1c
c0010dfb:	c3                   	ret    

c0010dfc <VgaText::doUpdate()>:
c0010dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e00:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e06:	85 c0                	test   eax,eax
c0010e08:	74 02                	je     c0010e0c <VgaText::doUpdate()+0x10>
c0010e0a:	ff e0                	jmp    eax
c0010e0c:	c3                   	ret    
c0010e0d:	90                   	nop

c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e0e:	55                   	push   ebp
c0010e0f:	57                   	push   edi
c0010e10:	56                   	push   esi
c0010e11:	53                   	push   ebx
c0010e12:	83 ec 1c             	sub    esp,0x1c
c0010e15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e19:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e1e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e25:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e28:	50                   	push   eax
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	50                   	push   eax
c0010e2f:	e8 4a f9 ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e34:	59                   	pop    ecx
c0010e35:	0f b6 c0             	movzx  eax,al
c0010e38:	5b                   	pop    ebx
c0010e39:	31 c9                	xor    ecx,ecx
c0010e3b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e43:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e51:	0f b7 db             	movzx  ebx,bx
c0010e54:	01 db                	add    ebx,ebx
c0010e56:	01 fb                	add    ebx,edi
c0010e58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e5b:	84 c0                	test   al,al
c0010e5d:	0f 84 38 01 00 00    	je     c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e63:	3c 0d                	cmp    al,0xd
c0010e65:	75 0f                	jne    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e67:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e71:	e9 1f 01 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e76:	3c 0a                	cmp    al,0xa
c0010e78:	75 5b                	jne    c0010ed5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e7a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e80:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e8d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e93:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e99:	75 12                	jne    c0010ead <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e9b:	83 ec 0c             	sub    esp,0xc
c0010e9e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea4:	55                   	push   ebp
c0010ea5:	e8 e6 f8 ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	83 ec 0c             	sub    esp,0xc
c0010eb0:	55                   	push   ebp
c0010eb1:	e8 8c f7 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010eb6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec7:	31 c9                	xor    ecx,ecx
c0010ec9:	0f b7 db             	movzx  ebx,bx
c0010ecc:	01 db                	add    ebx,ebx
c0010ece:	01 fb                	add    ebx,edi
c0010ed0:	e9 c0 00 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed5:	3c 08                	cmp    al,0x8
c0010ed7:	75 4e                	jne    c0010f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ed9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010edd:	53                   	push   ebx
c0010ede:	53                   	push   ebx
c0010edf:	6a 01                	push   0x1
c0010ee1:	55                   	push   ebp
c0010ee2:	e8 df fc ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010ee7:	58                   	pop    eax
c0010ee8:	5a                   	pop    edx
c0010ee9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eef:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010efb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f01:	6a 20                	push   0x20
c0010f03:	55                   	push   ebp
c0010f04:	e8 2d f9 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f09:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f11:	83 c4 20             	add    esp,0x20
c0010f14:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f1e:	0f b7 db             	movzx  ebx,bx
c0010f21:	01 db                	add    ebx,ebx
c0010f23:	01 fb                	add    ebx,edi
c0010f25:	eb 6e                	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f27:	51                   	push   ecx
c0010f28:	51                   	push   ecx
c0010f29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f2d:	50                   	push   eax
c0010f2e:	e8 f1 f8 ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f39:	39 2d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebp
c0010f3f:	75 2a                	jne    c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f41:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f47:	85 c0                	test   eax,eax
c0010f49:	74 20                	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f4b:	52                   	push   edx
c0010f4c:	52                   	push   edx
c0010f4d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f53:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f61:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f64:	51                   	push   ecx
c0010f65:	55                   	push   ebp
c0010f66:	ff d0                	call   eax
c0010f68:	83 c4 20             	add    esp,0x20
c0010f6b:	83 c3 02             	add    ebx,0x2
c0010f6e:	50                   	push   eax
c0010f6f:	50                   	push   eax
c0010f70:	6a 00                	push   0x0
c0010f72:	55                   	push   ebp
c0010f73:	e8 8c f9 ff ff       	call   c0010904 <VgaText::incrementCursor(bool)>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f82:	75 0f                	jne    c0010f93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f84:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f8c:	0f b7 db             	movzx  ebx,bx
c0010f8f:	01 db                	add    ebx,ebx
c0010f91:	01 fb                	add    ebx,edi
c0010f93:	b1 01                	mov    cl,0x1
c0010f95:	46                   	inc    esi
c0010f96:	e9 bd fe ff ff       	jmp    c0010e58 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f9b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f9f:	83 ec 0c             	sub    esp,0xc
c0010fa2:	55                   	push   ebp
c0010fa3:	e8 9a f6 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010fa8:	83 c4 10             	add    esp,0x10
c0010fab:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010faf:	84 c9                	test   cl,cl
c0010fb1:	74 0c                	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb3:	83 ec 0c             	sub    esp,0xc
c0010fb6:	55                   	push   ebp
c0010fb7:	e8 40 fe ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0010fbc:	83 c4 10             	add    esp,0x10
c0010fbf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fc6:	83 c4 1c             	add    esp,0x1c
c0010fc9:	5b                   	pop    ebx
c0010fca:	5e                   	pop    esi
c0010fcb:	5f                   	pop    edi
c0010fcc:	5d                   	pop    ebp
c0010fcd:	c3                   	ret    

c0010fce <VgaText::clearScreen()>:
c0010fce:	57                   	push   edi
c0010fcf:	56                   	push   esi
c0010fd0:	31 f6                	xor    esi,esi
c0010fd2:	53                   	push   ebx
c0010fd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd7:	52                   	push   edx
c0010fd8:	6a 00                	push   0x0
c0010fda:	6a 00                	push   0x0
c0010fdc:	53                   	push   ebx
c0010fdd:	e8 cc f8 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010fe2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff2:	7e 26                	jle    c001101a <VgaText::clearScreen()+0x4c>
c0010ff4:	31 ff                	xor    edi,edi
c0010ff6:	50                   	push   eax
c0010ff7:	50                   	push   eax
c0010ff8:	56                   	push   esi
c0010ff9:	57                   	push   edi
c0010ffa:	47                   	inc    edi
c0010ffb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011001:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011007:	6a 20                	push   0x20
c0011009:	53                   	push   ebx
c001100a:	e8 27 f8 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001100f:	83 c4 20             	add    esp,0x20
c0011012:	83 ff 50             	cmp    edi,0x50
c0011015:	75 df                	jne    c0010ff6 <VgaText::clearScreen()+0x28>
c0011017:	46                   	inc    esi
c0011018:	eb d2                	jmp    c0010fec <VgaText::clearScreen()+0x1e>
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	53                   	push   ebx
c001101e:	e8 d9 fd ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011023:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	5f                   	pop    edi
c0011030:	c3                   	ret    
c0011031:	90                   	nop

c0011032 <VgaText::putchar(char)>:
c0011032:	56                   	push   esi
c0011033:	53                   	push   ebx
c0011034:	83 ec 14             	sub    esp,0x14
c0011037:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001103b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001103f:	3c 5b                	cmp    al,0x5b
c0011041:	75 21                	jne    c0011064 <VgaText::putchar(char)+0x32>
c0011043:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001104a:	74 28                	je     c0011074 <VgaText::putchar(char)+0x42>
c001104c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011055:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001105f:	e9 e2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011064:	3c 1b                	cmp    al,0x1b
c0011066:	75 0c                	jne    c0011074 <VgaText::putchar(char)+0x42>
c0011068:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001106f:	e9 d2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011074:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001107a:	84 c9                	test   cl,cl
c001107c:	0f 84 ab 00 00 00    	je     c001112d <VgaText::putchar(char)+0xfb>
c0011082:	8d 50 c0             	lea    edx,[eax-0x40]
c0011085:	80 fa 3e             	cmp    dl,0x3e
c0011088:	0f 87 82 00 00 00    	ja     c0011110 <VgaText::putchar(char)+0xde>
c001108e:	3c 6d                	cmp    al,0x6d
c0011090:	75 4d                	jne    c00110df <VgaText::putchar(char)+0xad>
c0011092:	31 f6                	xor    esi,esi
c0011094:	31 d2                	xor    edx,edx
c0011096:	31 c0                	xor    eax,eax
c0011098:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001109e:	7e 30                	jle    c00110d0 <VgaText::putchar(char)+0x9e>
c00110a0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110a8:	80 fa 3b             	cmp    dl,0x3b
c00110ab:	75 17                	jne    c00110c4 <VgaText::putchar(char)+0x92>
c00110ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b1:	50                   	push   eax
c00110b2:	53                   	push   ebx
c00110b3:	e8 ee f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110b8:	59                   	pop    ecx
c00110b9:	31 d2                	xor    edx,edx
c00110bb:	58                   	pop    eax
c00110bc:	31 c0                	xor    eax,eax
c00110be:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c2:	eb 09                	jmp    c00110cd <VgaText::putchar(char)+0x9b>
c00110c4:	6b c0 0a             	imul   eax,eax,0xa
c00110c7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110cb:	88 ca                	mov    dl,cl
c00110cd:	46                   	inc    esi
c00110ce:	eb c8                	jmp    c0011098 <VgaText::putchar(char)+0x66>
c00110d0:	84 d2                	test   dl,dl
c00110d2:	74 31                	je     c0011105 <VgaText::putchar(char)+0xd3>
c00110d4:	50                   	push   eax
c00110d5:	53                   	push   ebx
c00110d6:	e8 cb f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110db:	58                   	pop    eax
c00110dc:	5a                   	pop    edx
c00110dd:	eb 26                	jmp    c0011105 <VgaText::putchar(char)+0xd3>
c00110df:	3c 4a                	cmp    al,0x4a
c00110e1:	75 22                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110e3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ea:	75 19                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	53                   	push   ebx
c00110f0:	e8 d9 fe ff ff       	call   c0010fce <VgaText::clearScreen()>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	6a 00                	push   0x0
c00110fa:	6a 00                	push   0x0
c00110fc:	53                   	push   ebx
c00110fd:	e8 ac f7 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001110e:	eb 36                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011110:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011116:	83 fa 0e             	cmp    edx,0xe
c0011119:	7f 2b                	jg     c0011146 <VgaText::putchar(char)+0x114>
c001111b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001111e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011124:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001112b:	eb 19                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c001112d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011133:	0f be c0             	movsx  eax,al
c0011136:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001113c:	50                   	push   eax
c001113d:	53                   	push   ebx
c001113e:	e8 ab fa ff ff       	call   c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	83 c4 14             	add    esp,0x14
c0011149:	5b                   	pop    ebx
c001114a:	5e                   	pop    esi
c001114b:	c3                   	ret    

c001114c <VgaText::puts(char const*)>:
c001114c:	53                   	push   ebx
c001114d:	83 ec 08             	sub    esp,0x8
c0011150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011154:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011157:	84 c0                	test   al,al
c0011159:	74 12                	je     c001116d <VgaText::puts(char const*)+0x21>
c001115b:	43                   	inc    ebx
c001115c:	51                   	push   ecx
c001115d:	51                   	push   ecx
c001115e:	50                   	push   eax
c001115f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011163:	e8 ca fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	eb e7                	jmp    c0011154 <VgaText::puts(char const*)+0x8>
c001116d:	83 c4 08             	add    esp,0x8
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    

c0011172 <VgaText::putx(unsigned int)>:
c0011172:	57                   	push   edi
c0011173:	b9 11 00 00 00       	mov    ecx,0x11
c0011178:	56                   	push   esi
c0011179:	be 9a a3 02 c0       	mov    esi,0xc002a39a
c001117e:	53                   	push   ebx
c001117f:	83 ec 20             	sub    esp,0x20
c0011182:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011186:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001118a:	fc                   	cld    
c001118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001118d:	be 08 00 00 00       	mov    esi,0x8
c0011192:	50                   	push   eax
c0011193:	50                   	push   eax
c0011194:	89 d8                	mov    eax,ebx
c0011196:	c1 e3 04             	shl    ebx,0x4
c0011199:	c1 e8 1c             	shr    eax,0x1c
c001119c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a1:	50                   	push   eax
c00111a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111a6:	e8 87 fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	4e                   	dec    esi
c00111af:	75 e1                	jne    c0011192 <VgaText::putx(unsigned int)+0x20>
c00111b1:	83 c4 20             	add    esp,0x20
c00111b4:	5b                   	pop    ebx
c00111b5:	5e                   	pop    esi
c00111b6:	5f                   	pop    edi
c00111b7:	c3                   	ret    

c00111b8 <VgaText::VgaText(char const*)>:
c00111b8:	57                   	push   edi
c00111b9:	56                   	push   esi
c00111ba:	53                   	push   ebx
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	83 ec 08             	sub    esp,0x8
c00111c2:	6a 00                	push   0x0
c00111c4:	50                   	push   eax
c00111c5:	e8 6e 05 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	ba 00 a4 02 c0       	mov    edx,0xc002a400
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	89 10                	mov    DWORD PTR [eax],edx
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011203:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011235:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011246:	bb 40 e4 02 c0       	mov    ebx,0xc002e440
c001124b:	b8 08 00 00 00       	mov    eax,0x8
c0011250:	fc                   	cld    
c0011251:	89 d7                	mov    edi,edx
c0011253:	89 de                	mov    esi,ebx
c0011255:	89 c1                	mov    ecx,eax
c0011257:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	05 1e 10 00 00       	add    eax,0x101e
c0011262:	83 ec 08             	sub    esp,0x8
c0011265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011269:	50                   	push   eax
c001126a:	e8 c5 f5 fe ff       	call   c0000834 <strcpy>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	83 c0 0c             	add    eax,0xc
c0011287:	83 ec 04             	sub    esp,0x4
c001128a:	68 00 0f 00 00       	push   0xf00
c001128f:	6a 00                	push   0x0
c0011291:	50                   	push   eax
c0011292:	e8 e1 f4 fe ff       	call   c0000778 <memset>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	83 ec 04             	sub    esp,0x4
c001129d:	6a 00                	push   0x0
c001129f:	6a 07                	push   0x7
c00112a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a5:	e8 b4 f4 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	83 ec 08             	sub    esp,0x8
c00112b0:	6a 02                	push   0x2
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 49 fa ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 00                	push   0x0
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 e0 f5 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 01                	push   0x1
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 7d f3 ff ff       	call   c001065c <VgaText::showCursor(bool)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	6a 01                	push   0x1
c00112e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112eb:	e8 7c f3 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fa:	e8 cf fc ff ff       	call   c0010fce <VgaText::clearScreen()>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011306:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001130d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011311:	05 9e 10 00 00       	add    eax,0x109e
c0011316:	83 ec 04             	sub    esp,0x4
c0011319:	68 96 00 00 00       	push   0x96
c001131e:	6a 00                	push   0x0
c0011320:	50                   	push   eax
c0011321:	e8 52 f4 fe ff       	call   c0000778 <memset>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132d:	05 34 11 00 00       	add    eax,0x1134
c0011332:	83 ec 04             	sub    esp,0x4
c0011335:	68 2c 01 00 00       	push   0x12c
c001133a:	6a 00                	push   0x0
c001133c:	50                   	push   eax
c001133d:	e8 36 f4 fe ff       	call   c0000778 <memset>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	90                   	nop
c0011346:	5b                   	pop    ebx
c0011347:	5e                   	pop    esi
c0011348:	5f                   	pop    edi
c0011349:	c3                   	ret    

c001134a <VgaText::receiveKey(unsigned char)>:
c001134a:	55                   	push   ebp
c001134b:	57                   	push   edi
c001134c:	56                   	push   esi
c001134d:	53                   	push   ebx
c001134e:	83 ec 1c             	sub    esp,0x1c
c0011351:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011355:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011359:	84 db                	test   bl,bl
c001135b:	0f 84 c9 00 00 00    	je     c001142a <VgaText::receiveKey(unsigned char)+0xe0>
c0011361:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011367:	80 fb 08             	cmp    bl,0x8
c001136a:	75 2c                	jne    c0011398 <VgaText::receiveKey(unsigned char)+0x4e>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	57                   	push   edi
c0011370:	e8 1f f4 fe ff       	call   c0000794 <strlen>
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	85 c0                	test   eax,eax
c001137a:	74 41                	je     c00113bd <VgaText::receiveKey(unsigned char)+0x73>
c001137c:	50                   	push   eax
c001137d:	50                   	push   eax
c001137e:	6a 08                	push   0x8
c0011380:	56                   	push   esi
c0011381:	e8 ac fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011386:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011389:	e8 06 f4 fe ff       	call   c0000794 <strlen>
c001138e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011396:	eb 22                	jmp    c00113ba <VgaText::receiveKey(unsigned char)+0x70>
c0011398:	0f be c3             	movsx  eax,bl
c001139b:	52                   	push   edx
c001139c:	52                   	push   edx
c001139d:	50                   	push   eax
c001139e:	56                   	push   esi
c001139f:	e8 8e fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c00113a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113ad:	59                   	pop    ecx
c00113ae:	5d                   	pop    ebp
c00113af:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b3:	50                   	push   eax
c00113b4:	57                   	push   edi
c00113b5:	e8 ba f5 fe ff       	call   c0000974 <strcat>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c4:	75 05                	jne    c00113cb <VgaText::receiveKey(unsigned char)+0x81>
c00113c6:	80 fb 0a             	cmp    bl,0xa
c00113c9:	75 53                	jne    c001141e <VgaText::receiveKey(unsigned char)+0xd4>
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d4:	53                   	push   ebx
c00113d5:	e8 ba f3 fe ff       	call   c0000794 <strlen>
c00113da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113dd:	89 c5                	mov    ebp,eax
c00113df:	e8 b0 f3 fe ff       	call   c0000794 <strlen>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113eb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f0:	76 10                	jbe    c0011402 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	68 ab a3 02 c0       	push   0xc002a3ab
c00113fa:	e8 7e 91 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	50                   	push   eax
c0011403:	50                   	push   eax
c0011404:	57                   	push   edi
c0011405:	53                   	push   ebx
c0011406:	e8 69 f5 fe ff       	call   c0000974 <strcat>
c001140b:	83 c4 0c             	add    esp,0xc
c001140e:	68 96 00 00 00       	push   0x96
c0011413:	6a 00                	push   0x0
c0011415:	57                   	push   edi
c0011416:	e8 5d f3 fe ff       	call   c0000778 <memset>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	83 ec 0c             	sub    esp,0xc
c0011421:	56                   	push   esi
c0011422:	e8 d5 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 c4 1c             	add    esp,0x1c
c001142d:	5b                   	pop    ebx
c001142e:	5e                   	pop    esi
c001142f:	5f                   	pop    edi
c0011430:	5d                   	pop    ebp
c0011431:	c3                   	ret    

c0011432 <VgaText::write(unsigned long long, void*, int*)>:
c0011432:	55                   	push   ebp
c0011433:	57                   	push   edi
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001143d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011445:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001144c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001144f:	39 eb                	cmp    ebx,ebp
c0011451:	74 13                	je     c0011466 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011453:	43                   	inc    ebx
c0011454:	50                   	push   eax
c0011455:	50                   	push   eax
c0011456:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001145a:	50                   	push   eax
c001145b:	56                   	push   esi
c001145c:	e8 d1 fb ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	eb e9                	jmp    c001144f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011470:	56                   	push   esi
c0011471:	e8 86 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011476:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001147a:	89 38                	mov    DWORD PTR [eax],edi
c001147c:	83 c4 1c             	add    esp,0x1c
c001147f:	31 c0                	xor    eax,eax
c0011481:	5b                   	pop    ebx
c0011482:	5e                   	pop    esi
c0011483:	5f                   	pop    edi
c0011484:	5d                   	pop    ebp
c0011485:	c3                   	ret    

c0011486 <newTerminal(char*)>:
c0011486:	83 ec 28             	sub    esp,0x28
c0011489:	68 60 12 00 00       	push   0x1260
c001148e:	e8 b0 e3 ff ff       	call   c000f843 <malloc>
c0011493:	5a                   	pop    edx
c0011494:	59                   	pop    ecx
c0011495:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011499:	50                   	push   eax
c001149a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149e:	e8 15 fd ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c00114a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a7:	83 c4 2c             	add    esp,0x2c
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::TSS()>:
c00114ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b7:	90                   	nop
c00114b8:	c3                   	ret    
c00114b9:	90                   	nop

c00114ba <TSS::setESP(unsigned long)>:
c00114ba:	55                   	push   ebp
c00114bb:	89 e5                	mov    ebp,esp
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c9:	90                   	nop
c00114ca:	5d                   	pop    ebp
c00114cb:	c3                   	ret    

c00114cc <TSS::flush()>:
c00114cc:	55                   	push   ebp
c00114cd:	89 e5                	mov    ebp,esp
c00114cf:	83 ec 10             	sub    esp,0x10
c00114d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d7:	83 c8 03             	or     eax,0x3
c00114da:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114de:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e2:	66 89 d0             	mov    ax,dx
c00114e5:	0f 00 d8             	ltr    ax
c00114e8:	90                   	nop
c00114e9:	c9                   	leave  
c00114ea:	c3                   	ret    
c00114eb:	90                   	nop

c00114ec <TSS::setup(unsigned long, unsigned long)>:
c00114ec:	55                   	push   ebp
c00114ed:	89 e5                	mov    ebp,esp
c00114ef:	83 ec 18             	sub    esp,0x18
c00114f2:	83 ec 0c             	sub    esp,0xc
c00114f5:	6a 68                	push   0x68
c00114f7:	e8 47 e3 ff ff       	call   c000f843 <malloc>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	89 c2                	mov    edx,eax
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150d:	83 ec 04             	sub    esp,0x4
c0011510:	6a 68                	push   0x68
c0011512:	6a 00                	push   0x0
c0011514:	50                   	push   eax
c0011515:	e8 5e f2 fe ff       	call   c0000778 <memset>
c001151a:	83 c4 10             	add    esp,0x10
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011592:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001159e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b4:	0f 20 da             	mov    edx,cr3
c00115b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115bd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	50                   	push   eax
c00115ca:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115cd:	50                   	push   eax
c00115ce:	e8 4b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	6a 68                	push   0x68
c00115db:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 56 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115eb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ee:	83 e0 0f             	and    eax,0xf
c00115f1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f7:	83 c8 40             	or     eax,0x40
c00115fa:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115fd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011602:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011608:	05 78 01 00 00       	add    eax,0x178
c001160d:	83 ec 04             	sub    esp,0x4
c0011610:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011613:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011616:	50                   	push   eax
c0011617:	e8 52 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	89 c2                	mov    edx,eax
c0011621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011624:	89 10                	mov    DWORD PTR [eax],edx
c0011626:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001162b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011631:	05 78 01 00 00       	add    eax,0x178
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	50                   	push   eax
c001163a:	e8 73 da ff ff       	call   c000f0b2 <GDT::flush()>
c001163f:	83 c4 10             	add    esp,0x10
c0011642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011645:	8b 00                	mov    eax,DWORD PTR [eax]
c0011647:	83 ec 08             	sub    esp,0x8
c001164a:	50                   	push   eax
c001164b:	68 14 a4 02 c0       	push   0xc002a414
c0011650:	e8 83 18 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165b:	8b 00                	mov    eax,DWORD PTR [eax]
c001165d:	c9                   	leave  
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011670:	75 08                	jne    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011672:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011678:	eb 38                	jmp    c00116b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001167a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001167f:	75 17                	jne    c0011698 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011689:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001168f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011695:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011698:	89 c1                	mov    ecx,eax
c001169a:	83 e1 fd             	and    ecx,0xfffffffd
c001169d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a3:	74 cd                	je     c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116aa:	83 e0 ef             	and    eax,0xffffffef
c00116ad:	83 f8 08             	cmp    eax,0x8
c00116b0:	76 c0                	jbe    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b2:	31 c0                	xor    eax,eax
c00116b4:	c3                   	ret    
c00116b5:	90                   	nop

c00116b6 <ReservedFilename::isAtty()>:
c00116b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116bd:	31 c0                	xor    eax,eax
c00116bf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c5:	74 09                	je     c00116d0 <ReservedFilename::isAtty()+0x1a>
c00116c7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116cd:	0f 94 c0             	sete   al
c00116d0:	c3                   	ret    
c00116d1:	90                   	nop

c00116d2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116e6:	75 08                	jne    c00116f0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ee:	eb 3d                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f5:	75 17                	jne    c001170e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ff:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011705:	8b 10                	mov    edx,DWORD PTR [eax]
c0011707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001170e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011713:	75 04                	jne    c0011719 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011715:	89 0a                	mov    DWORD PTR [edx],ecx
c0011717:	eb 14                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011719:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001171e:	74 c8                	je     c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011720:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011725:	83 e0 ef             	and    eax,0xffffffef
c0011728:	83 f8 08             	cmp    eax,0x8
c001172b:	76 bb                	jbe    c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001172d:	31 c0                	xor    eax,eax
c001172f:	c3                   	ret    

c0011730 <UnixFile::getFileDescriptor()>:
c0011730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011737:	c3                   	ret    

c0011738 <UnixFile::UnixFile(int)>:
c0011738:	53                   	push   ebx
c0011739:	83 ec 28             	sub    esp,0x28
c001173c:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c0011741:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011745:	89 10                	mov    DWORD PTR [eax],edx
c0011747:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001174f:	0f 8f 8c 01 00 00    	jg     c00118e1 <UnixFile::UnixFile(int)+0x1a9>
c0011755:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001175a:	8d 50 01             	lea    edx,[eax+0x1]
c001175d:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011763:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011767:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176a:	83 ec 08             	sub    esp,0x8
c001176d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011771:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011776:	e8 75 6f 01 00       	call   c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	a0 f4 e4 02 c0       	mov    al,ds:0xc002e4f4
c0011783:	83 f0 01             	xor    eax,0x1
c0011786:	84 c0                	test   al,al
c0011788:	0f 84 54 01 00 00    	je     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c001178e:	c6 05 f4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4f4,0x1
c0011795:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a4:	e8 9a e0 ff ff       	call   c000f843 <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 03 ff ff 0f       	push   0xfffff03
c00117b6:	53                   	push   ebx
c00117b7:	e8 2c 01 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c00117c5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d4:	e8 6a e0 ff ff       	call   c000f843 <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 01 ff ff 0f       	push   0xfffff01
c00117e6:	53                   	push   ebx
c00117e7:	e8 fc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c00117f5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011804:	e8 3a e0 ff ff       	call   c000f843 <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 00 ff ff 0f       	push   0xfffff00
c0011816:	53                   	push   ebx
c0011817:	e8 cc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0011825:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011834:	e8 0a e0 ff ff       	call   c000f843 <malloc>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	89 c3                	mov    ebx,eax
c001183e:	83 ec 08             	sub    esp,0x8
c0011841:	68 02 ff ff 0f       	push   0xfffff02
c0011846:	53                   	push   ebx
c0011847:	e8 9c 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0011855:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001185d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011862:	7f 7e                	jg     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c0011864:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001186c:	83 ec 0c             	sub    esp,0xc
c001186f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011873:	e8 cb df ff ff       	call   c000f843 <malloc>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	89 c3                	mov    ebx,eax
c001187d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011881:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	50                   	push   eax
c001188a:	53                   	push   ebx
c001188b:	e8 58 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011897:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c001189e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ad:	e8 91 df ff ff       	call   c000f843 <malloc>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	89 c3                	mov    ebx,eax
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	50                   	push   eax
c00118c4:	53                   	push   ebx
c00118c5:	e8 1e 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d1:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c00118d8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118dc:	e9 7c ff ff ff       	jmp    c001185d <UnixFile::UnixFile(int)+0x125>
c00118e1:	90                   	nop
c00118e2:	83 c4 28             	add    esp,0x28
c00118e5:	5b                   	pop    ebx
c00118e6:	c3                   	ret    
c00118e7:	90                   	nop

c00118e8 <ReservedFilename::ReservedFilename(int)>:
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ef:	83 ec 08             	sub    esp,0x8
c00118f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f6:	50                   	push   eax
c00118f7:	e8 3c fe ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c0011904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011908:	89 10                	mov    DWORD PTR [eax],edx
c001190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011912:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011915:	90                   	nop
c0011916:	83 c4 0c             	add    esp,0xc
c0011919:	c3                   	ret    

c001191a <UnixFile::~UnixFile()>:
c001191a:	83 ec 1c             	sub    esp,0x1c
c001191d:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c0011922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011926:	89 10                	mov    DWORD PTR [eax],edx
c0011928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011934:	7f 73                	jg     c00119a9 <UnixFile::~UnixFile()+0x8f>
c0011936:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011946:	e8 79 6e 01 00       	call   c00287c4 <LinkedList<UnixFile>::getFirstElement()>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011952:	83 ec 0c             	sub    esp,0xc
c0011955:	68 f8 e4 02 c0       	push   0xc002e4f8
c001195a:	e8 6d 6e 01 00       	call   c00287cc <LinkedList<UnixFile>::removeFirst()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011966:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001196a:	74 40                	je     c00119ac <UnixFile::~UnixFile()+0x92>
c001196c:	83 ec 08             	sub    esp,0x8
c001196f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011973:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011978:	e8 73 6d 01 00       	call   c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011984:	8d 50 01             	lea    edx,[eax+0x1]
c0011987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011990:	0f 94 c0             	sete   al
c0011993:	84 c0                	test   al,al
c0011995:	74 a7                	je     c001193e <UnixFile::~UnixFile()+0x24>
c0011997:	83 ec 0c             	sub    esp,0xc
c001199a:	68 d8 a4 02 c0       	push   0xc002a4d8
c001199f:	e8 d9 8b 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	eb 95                	jmp    c001193e <UnixFile::~UnixFile()+0x24>
c00119a9:	90                   	nop
c00119aa:	eb 01                	jmp    c00119ad <UnixFile::~UnixFile()+0x93>
c00119ac:	90                   	nop
c00119ad:	90                   	nop
c00119ae:	83 c4 1c             	add    esp,0x1c
c00119b1:	c3                   	ret    

c00119b2 <UnixFile::~UnixFile()>:
c00119b2:	83 ec 0c             	sub    esp,0xc
c00119b5:	83 ec 0c             	sub    esp,0xc
c00119b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bc:	e8 59 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	83 ec 08             	sub    esp,0x8
c00119c7:	6a 0c                	push   0xc
c00119c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cd:	e8 26 14 00 00       	call   c0012df8 <operator delete(void*, unsigned long)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	83 c4 0c             	add    esp,0xc
c00119d8:	c3                   	ret    
c00119d9:	90                   	nop

c00119da <ReservedFilename::~ReservedFilename()>:
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c00119e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e6:	89 10                	mov    DWORD PTR [eax],edx
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	83 ec 0c             	sub    esp,0xc
c00119ef:	50                   	push   eax
c00119f0:	e8 25 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	90                   	nop
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a08:	e8 cd ff ff ff       	call   c00119da <ReservedFilename::~ReservedFilename()>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	6a 0c                	push   0xc
c0011a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a19:	e8 da 13 00 00       	call   c0012df8 <operator delete(void*, unsigned long)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	83 c4 0c             	add    esp,0xc
c0011a24:	c3                   	ret    

c0011a25 <getFromFileDescriptor(int)>:
c0011a25:	53                   	push   ebx
c0011a26:	83 ec 08             	sub    esp,0x8
c0011a29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a2d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a33:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a39:	7f 2c                	jg     c0011a67 <getFromFileDescriptor(int)+0x42>
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a43:	e8 7c 6d 01 00       	call   c00287c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	85 c0                	test   eax,eax
c0011a4d:	75 04                	jne    c0011a53 <getFromFileDescriptor(int)+0x2e>
c0011a4f:	31 c0                	xor    eax,eax
c0011a51:	eb 6e                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a53:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a56:	74 69                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a58:	52                   	push   edx
c0011a59:	52                   	push   edx
c0011a5a:	50                   	push   eax
c0011a5b:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a60:	e8 09 6e 01 00       	call   c002886e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a65:	eb e1                	jmp    c0011a48 <getFromFileDescriptor(int)+0x23>
c0011a67:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011a6c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a72:	74 4d                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a74:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0011a79:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a7f:	74 40                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a81:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011a86:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a8c:	74 33                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a8e:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0011a93:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a99:	74 26                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a9b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa1:	83 f8 08             	cmp    eax,0x8
c0011aa4:	77 09                	ja     c0011aaf <getFromFileDescriptor(int)+0x8a>
c0011aa6:	8b 04 85 c0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b40]
c0011aad:	eb 12                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011aaf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab5:	83 fb 08             	cmp    ebx,0x8
c0011ab8:	77 95                	ja     c0011a4f <getFromFileDescriptor(int)+0x2a>
c0011aba:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0011ac1:	83 c4 08             	add    esp,0x8
c0011ac4:	5b                   	pop    ebx
c0011ac5:	c3                   	ret    

c0011ac6 <__static_initialization_and_destruction_0(int, int)>:
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ace:	75 34                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ad8:	75 2a                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ada:	83 ec 0c             	sub    esp,0xc
c0011add:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011ae2:	e8 b1 6b 01 00       	call   c0028698 <LinkedList<UnixFile>::LinkedList()>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	83 ec 04             	sub    esp,0x4
c0011aed:	68 98 d2 02 c0       	push   0xc002d298
c0011af2:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011af7:	68 96 86 02 c0       	push   0xc0028696
c0011afc:	e8 71 12 00 00       	call   c0012d72 <__cxa_atexit>
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	90                   	nop
c0011b05:	83 c4 0c             	add    esp,0xc
c0011b08:	c3                   	ret    

c0011b09 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	68 ff ff 00 00       	push   0xffff
c0011b14:	6a 01                	push   0x1
c0011b16:	e8 ab ff ff ff       	call   c0011ac6 <__static_initialization_and_destruction_0(int, int)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	c3                   	ret    

c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b22:	53                   	push   ebx
c0011b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b2b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b31:	89 c8                	mov    eax,ecx
c0011b33:	d1 e8                	shr    eax,1
c0011b35:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c0011b3b:	83 e1 01             	and    ecx,0x1
c0011b3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b40:	75 09                	jne    c0011b4b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b42:	83 e2 f0             	and    edx,0xfffffff0
c0011b45:	09 da                	or     edx,ebx
c0011b47:	88 10                	mov    BYTE PTR [eax],dl
c0011b49:	5b                   	pop    ebx
c0011b4a:	c3                   	ret    
c0011b4b:	c1 e3 04             	shl    ebx,0x4
c0011b4e:	83 e2 0f             	and    edx,0xf
c0011b51:	09 da                	or     edx,ebx
c0011b53:	88 10                	mov    BYTE PTR [eax],dl
c0011b55:	5b                   	pop    ebx
c0011b56:	c3                   	ret    

c0011b57 <Virt::getPageState(unsigned long)>:
c0011b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5b:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011b61:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b67:	89 d0                	mov    eax,edx
c0011b69:	d1 e8                	shr    eax,1
c0011b6b:	83 e2 01             	and    edx,0x1
c0011b6e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b71:	75 04                	jne    c0011b77 <Virt::getPageState(unsigned long)+0x20>
c0011b73:	83 e0 0f             	and    eax,0xf
c0011b76:	c3                   	ret    
c0011b77:	c0 e8 04             	shr    al,0x4
c0011b7a:	c3                   	ret    

c0011b7b <Virt::allocateKernelVirtualPages(int)>:
c0011b7b:	55                   	push   ebp
c0011b7c:	31 ed                	xor    ebp,ebp
c0011b7e:	57                   	push   edi
c0011b7f:	56                   	push   esi
c0011b80:	53                   	push   ebx
c0011b81:	31 db                	xor    ebx,ebx
c0011b83:	83 ec 1c             	sub    esp,0x1c
c0011b86:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b8a:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011b90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b95:	57                   	push   edi
c0011b96:	e8 bc ff ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c0011b9b:	5a                   	pop    edx
c0011b9c:	84 c0                	test   al,al
c0011b9e:	75 3a                	jne    c0011bda <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ba0:	85 db                	test   ebx,ebx
c0011ba2:	75 02                	jne    c0011ba6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba4:	89 fd                	mov    ebp,edi
c0011ba6:	43                   	inc    ebx
c0011ba7:	39 f3                	cmp    ebx,esi
c0011ba9:	74 5a                	je     c0011c05 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bab:	47                   	inc    edi
c0011bac:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb2:	76 31                	jbe    c0011be5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb4:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c0011bbe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bc3:	75 28                	jne    c0011bed <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bca:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bcf:	57                   	push   edi
c0011bd0:	e8 82 ff ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c0011bd5:	5a                   	pop    edx
c0011bd6:	84 c0                	test   al,al
c0011bd8:	74 c6                	je     c0011ba0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bda:	31 db                	xor    ebx,ebx
c0011bdc:	47                   	inc    edi
c0011bdd:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011be3:	77 cf                	ja     c0011bb4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be5:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c0011beb:	eb a8                	jmp    c0011b95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bed:	83 ec 0c             	sub    esp,0xc
c0011bf0:	68 30 a5 02 c0       	push   0xc002a530
c0011bf5:	e8 83 89 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0011bfa:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011c00:	83 c4 10             	add    esp,0x10
c0011c03:	eb 90                	jmp    c0011b95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c05:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c0011c0b:	4b                   	dec    ebx
c0011c0c:	74 5f                	je     c0011c6d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c0e:	85 f6                	test   esi,esi
c0011c10:	74 3d                	je     c0011c4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c12:	89 e8                	mov    eax,ebp
c0011c14:	31 db                	xor    ebx,ebx
c0011c16:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c19:	eb 14                	jmp    c0011c2f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c1b:	6a 01                	push   0x1
c0011c1d:	43                   	inc    ebx
c0011c1e:	50                   	push   eax
c0011c1f:	e8 fe fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c24:	58                   	pop    eax
c0011c25:	39 f3                	cmp    ebx,esi
c0011c27:	5a                   	pop    edx
c0011c28:	74 25                	je     c0011c4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2a:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c32:	85 db                	test   ebx,ebx
c0011c34:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c0011c3a:	74 20                	je     c0011c5c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c3c:	39 df                	cmp    edi,ebx
c0011c3e:	75 db                	jne    c0011c1b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c40:	6a 03                	push   0x3
c0011c42:	43                   	inc    ebx
c0011c43:	50                   	push   eax
c0011c44:	e8 d9 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c49:	59                   	pop    ecx
c0011c4a:	39 f3                	cmp    ebx,esi
c0011c4c:	58                   	pop    eax
c0011c4d:	75 db                	jne    c0011c2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	89 e8                	mov    eax,ebp
c0011c54:	5b                   	pop    ebx
c0011c55:	c1 e0 0c             	shl    eax,0xc
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    
c0011c5c:	6a 02                	push   0x2
c0011c5e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c63:	50                   	push   eax
c0011c64:	e8 b9 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c69:	58                   	pop    eax
c0011c6a:	5a                   	pop    edx
c0011c6b:	eb bd                	jmp    c0011c2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c6d:	6a 04                	push   0x4
c0011c6f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c72:	55                   	push   ebp
c0011c73:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c0011c78:	e8 a5 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c7d:	59                   	pop    ecx
c0011c7e:	89 e8                	mov    eax,ebp
c0011c80:	5b                   	pop    ebx
c0011c81:	c1 e0 0c             	shl    eax,0xc
c0011c84:	83 c4 1c             	add    esp,0x1c
c0011c87:	5b                   	pop    ebx
c0011c88:	5e                   	pop    esi
c0011c89:	5f                   	pop    edi
c0011c8a:	5d                   	pop    ebp
c0011c8b:	c3                   	ret    

c0011c8c <Virt::freeSwapfilePage(unsigned long)>:
c0011c8c:	53                   	push   ebx
c0011c8d:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0011c93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c97:	b8 01 00 00 00       	mov    eax,0x1
c0011c9c:	89 cb                	mov    ebx,ecx
c0011c9e:	d3 e0                	shl    eax,cl
c0011ca0:	c1 eb 05             	shr    ebx,0x5
c0011ca3:	f7 d0                	not    eax
c0011ca5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ca8:	5b                   	pop    ebx
c0011ca9:	c3                   	ret    

c0011caa <Virt::swapIDToSector(unsigned long)>:
c0011caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cae:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c0011cb5:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c0011cbb:	c3                   	ret    

c0011cbc <Virt::allocateSwapfilePage()>:
c0011cbc:	55                   	push   ebp
c0011cbd:	31 d2                	xor    edx,edx
c0011cbf:	57                   	push   edi
c0011cc0:	56                   	push   esi
c0011cc1:	53                   	push   ebx
c0011cc2:	83 ec 0c             	sub    esp,0xc
c0011cc5:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0011ccb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011cd0:	f7 f1                	div    ecx
c0011cd2:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c0011cd8:	72 2d                	jb     c0011d07 <Virt::allocateSwapfilePage()+0x4b>
c0011cda:	8b 35 08 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e508
c0011ce0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ce2:	f6 c2 01             	test   dl,0x1
c0011ce5:	74 3c                	je     c0011d23 <Virt::allocateSwapfilePage()+0x67>
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	bf 01 00 00 00       	mov    edi,0x1
c0011cee:	eb 12                	jmp    c0011d02 <Virt::allocateSwapfilePage()+0x46>
c0011cf0:	89 fd                	mov    ebp,edi
c0011cf2:	89 ca                	mov    edx,ecx
c0011cf4:	d3 e5                	shl    ebp,cl
c0011cf6:	c1 ea 05             	shr    edx,0x5
c0011cf9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfe:	85 ea                	test   edx,ebp
c0011d00:	74 2a                	je     c0011d2c <Virt::allocateSwapfilePage()+0x70>
c0011d02:	41                   	inc    ecx
c0011d03:	39 c8                	cmp    eax,ecx
c0011d05:	77 e9                	ja     c0011cf0 <Virt::allocateSwapfilePage()+0x34>
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	68 b7 a6 02 c0       	push   0xc002a6b7
c0011d0f:	e8 69 88 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	31 c9                	xor    ecx,ecx
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	89 c8                	mov    eax,ecx
c0011d1e:	5b                   	pop    ebx
c0011d1f:	5e                   	pop    esi
c0011d20:	5f                   	pop    edi
c0011d21:	5d                   	pop    ebp
c0011d22:	c3                   	ret    
c0011d23:	89 f3                	mov    ebx,esi
c0011d25:	bd 01 00 00 00       	mov    ebp,0x1
c0011d2a:	31 c9                	xor    ecx,ecx
c0011d2c:	09 ea                	or     edx,ebp
c0011d2e:	89 c8                	mov    eax,ecx
c0011d30:	89 13                	mov    DWORD PTR [ebx],edx
c0011d32:	83 c4 0c             	add    esp,0xc
c0011d35:	5b                   	pop    ebx
c0011d36:	5e                   	pop    esi
c0011d37:	5f                   	pop    edi
c0011d38:	5d                   	pop    ebp
c0011d39:	c3                   	ret    

c0011d3a <Virt::virtualMemorySetup()>:
c0011d3a:	53                   	push   ebx
c0011d3b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d40:	83 ec 08             	sub    esp,0x8
c0011d43:	6a 0f                	push   0xf
c0011d45:	53                   	push   ebx
c0011d46:	43                   	inc    ebx
c0011d47:	e8 d6 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4c:	59                   	pop    ecx
c0011d4d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d53:	58                   	pop    eax
c0011d54:	75 ed                	jne    c0011d43 <Virt::virtualMemorySetup()+0x9>
c0011d56:	83 ec 08             	sub    esp,0x8
c0011d59:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5e:	68 00 00 00 c8       	push   0xc8000000
c0011d63:	68 ce a6 02 c0       	push   0xc002a6ce
c0011d68:	e8 6b 11 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011d6d:	58                   	pop    eax
c0011d6e:	5a                   	pop    edx
c0011d6f:	68 00 f0 ff ef       	push   0xeffff000
c0011d74:	68 e2 a6 02 c0       	push   0xc002a6e2
c0011d79:	e8 5a 11 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	6a 00                	push   0x0
c0011d86:	53                   	push   ebx
c0011d87:	43                   	inc    ebx
c0011d88:	e8 95 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d8d:	83 c4 10             	add    esp,0x10
c0011d90:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d96:	75 e9                	jne    c0011d81 <Virt::virtualMemorySetup()+0x47>
c0011d98:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	6a 0f                	push   0xf
c0011da2:	53                   	push   ebx
c0011da3:	43                   	inc    ebx
c0011da4:	e8 79 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011db2:	75 e9                	jne    c0011d9d <Virt::virtualMemorySetup()+0x63>
c0011db4:	83 c4 08             	add    esp,0x8
c0011db7:	5b                   	pop    ebx
c0011db8:	c3                   	ret    

c0011db9 <Virt::swappingSetup()>:
c0011db9:	83 ec 14             	sub    esp,0x14
c0011dbc:	31 d2                	xor    edx,edx
c0011dbe:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011dc3:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011dc9:	c1 e8 05             	shr    eax,0x5
c0011dcc:	50                   	push   eax
c0011dcd:	68 f6 a6 02 c0       	push   0xc002a6f6
c0011dd2:	e8 01 11 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011dd7:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011ddc:	31 d2                	xor    edx,edx
c0011dde:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011de4:	c1 e8 05             	shr    eax,0x5
c0011de7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dea:	e8 54 da ff ff       	call   c000f843 <malloc>
c0011def:	83 c4 0c             	add    esp,0xc
c0011df2:	89 c1                	mov    ecx,eax
c0011df4:	a3 08 e5 02 c0       	mov    ds:0xc002e508,eax
c0011df9:	31 d2                	xor    edx,edx
c0011dfb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e00:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011e06:	c1 e8 05             	shr    eax,0x5
c0011e09:	50                   	push   eax
c0011e0a:	6a 00                	push   0x0
c0011e0c:	51                   	push   ecx
c0011e0d:	e8 66 e9 fe ff       	call   c0000778 <memset>
c0011e12:	83 c4 1c             	add    esp,0x1c
c0011e15:	c3                   	ret    

c0011e16 <Virt::getAKernelVAS()>:
c0011e16:	a1 0c e5 02 c0       	mov    eax,ds:0xc002e50c
c0011e1b:	c3                   	ret    

c0011e1c <Virt::setupPageSwapping(int)>:
c0011e1c:	57                   	push   edi
c0011e1d:	56                   	push   esi
c0011e1e:	53                   	push   ebx
c0011e1f:	83 ec 1c             	sub    esp,0x1c
c0011e22:	68 14 01 00 00       	push   0x114
c0011e27:	e8 17 da ff ff       	call   c000f843 <malloc>
c0011e2c:	83 c4 0c             	add    esp,0xc
c0011e2f:	89 c6                	mov    esi,eax
c0011e31:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0011e37:	68 11 a7 02 c0       	push   0xc002a711
c0011e3c:	50                   	push   eax
c0011e3d:	e8 ee 15 00 00       	call   c0013430 <File::File(char const*, Process*)>
c0011e42:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e45:	e8 c2 17 00 00       	call   c001360c <File::unlink()>
c0011e4a:	58                   	pop    eax
c0011e4b:	5a                   	pop    edx
c0011e4c:	6a 12                	push   0x12
c0011e4e:	56                   	push   esi
c0011e4f:	e8 40 16 00 00       	call   c0013494 <File::open(FileOpenMode)>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	85 c0                	test   eax,eax
c0011e59:	0f 85 ca 00 00 00    	jne    c0011f29 <Virt::setupPageSwapping(int)+0x10d>
c0011e5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e6b:	c1 e3 08             	shl    ebx,0x8
c0011e6e:	83 ec 0c             	sub    esp,0xc
c0011e71:	68 00 00 01 00       	push   0x10000
c0011e76:	e8 c8 d9 ff ff       	call   c000f843 <malloc>
c0011e7b:	83 c4 0c             	add    esp,0xc
c0011e7e:	89 c7                	mov    edi,eax
c0011e80:	68 00 00 01 00       	push   0x10000
c0011e85:	6a 00                	push   0x0
c0011e87:	50                   	push   eax
c0011e88:	e8 eb e8 fe ff       	call   c0000778 <memset>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	85 db                	test   ebx,ebx
c0011e92:	79 03                	jns    c0011e97 <Virt::setupPageSwapping(int)+0x7b>
c0011e94:	83 c3 0f             	add    ebx,0xf
c0011e97:	c1 fb 04             	sar    ebx,0x4
c0011e9a:	4b                   	dec    ebx
c0011e9b:	83 fb ff             	cmp    ebx,0xffffffff
c0011e9e:	74 4b                	je     c0011eeb <Virt::setupPageSwapping(int)+0xcf>
c0011ea0:	83 ec 0c             	sub    esp,0xc
c0011ea3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ea5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ea9:	52                   	push   edx
c0011eaa:	57                   	push   edi
c0011eab:	6a 00                	push   0x0
c0011ead:	68 00 00 01 00       	push   0x10000
c0011eb2:	56                   	push   esi
c0011eb3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eb6:	83 c4 20             	add    esp,0x20
c0011eb9:	85 c0                	test   eax,eax
c0011ebb:	75 59                	jne    c0011f16 <Virt::setupPageSwapping(int)+0xfa>
c0011ebd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ec6:	74 d2                	je     c0011e9a <Virt::setupPageSwapping(int)+0x7e>
c0011ec8:	83 ec 08             	sub    esp,0x8
c0011ecb:	4b                   	dec    ebx
c0011ecc:	50                   	push   eax
c0011ecd:	68 64 a7 02 c0       	push   0xc002a764
c0011ed2:	e8 01 10 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011ed7:	c7 04 24 6d a7 02 c0 	mov    DWORD PTR [esp],0xc002a76d
c0011ede:	e8 9a 86 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ee9:	75 b5                	jne    c0011ea0 <Virt::setupPageSwapping(int)+0x84>
c0011eeb:	83 ec 0c             	sub    esp,0xc
c0011eee:	56                   	push   esi
c0011eef:	e8 fe 15 00 00       	call   c00134f2 <File::close()>
c0011ef4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ef7:	e8 67 d9 ff ff       	call   c000f863 <rfree>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	85 f6                	test   esi,esi
c0011f01:	74 0c                	je     c0011f0f <Virt::setupPageSwapping(int)+0xf3>
c0011f03:	83 ec 0c             	sub    esp,0xc
c0011f06:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f08:	56                   	push   esi
c0011f09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	5b                   	pop    ebx
c0011f13:	5e                   	pop    esi
c0011f14:	5f                   	pop    edi
c0011f15:	c3                   	ret    
c0011f16:	83 ec 08             	sub    esp,0x8
c0011f19:	50                   	push   eax
c0011f1a:	68 4c a7 02 c0       	push   0xc002a74c
c0011f1f:	e8 b4 0f 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	eb 94                	jmp    c0011ebd <Virt::setupPageSwapping(int)+0xa1>
c0011f29:	83 ec 08             	sub    esp,0x8
c0011f2c:	50                   	push   eax
c0011f2d:	68 28 a7 02 c0       	push   0xc002a728
c0011f32:	e8 a1 0f 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0011f37:	c7 04 24 31 a7 02 c0 	mov    DWORD PTR [esp],0xc002a731
c0011f3e:	e8 3a 86 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	e9 14 ff ff ff       	jmp    c0011e5f <Virt::setupPageSwapping(int)+0x43>
c0011f4b:	90                   	nop

c0011f4c <VAS::VAS()>:
c0011f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f66:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c0011f6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f77:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7e:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f85:	90                   	nop
c0011f86:	c3                   	ret    
c0011f87:	90                   	nop

c0011f88 <VAS::VAS(VAS*)>:
c0011f88:	83 ec 0c             	sub    esp,0xc
c0011f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011fa1:	83 ec 0c             	sub    esp,0xc
c0011fa4:	68 50 a5 02 c0       	push   0xc002a550
c0011fa9:	e8 cf 85 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0011fae:	83 c4 10             	add    esp,0x10
c0011fb1:	90                   	nop
c0011fb2:	83 c4 0c             	add    esp,0xc
c0011fb5:	c3                   	ret    

c0011fb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fba:	89 c2                	mov    edx,eax
c0011fbc:	c1 e8 0a             	shr    eax,0xa
c0011fbf:	c1 ea 16             	shr    edx,0x16
c0011fc2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc7:	19 c9                	sbb    ecx,ecx
c0011fc9:	c1 e2 0c             	shl    edx,0xc
c0011fcc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fd2:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fde:	01 d0                	add    eax,edx
c0011fe0:	c3                   	ret    
c0011fe1:	90                   	nop

c0011fe2 <VAS::getPageTableEntry(unsigned long)>:
c0011fe2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe6:	89 ca                	mov    edx,ecx
c0011fe8:	c1 e9 0a             	shr    ecx,0xa
c0011feb:	c1 ea 16             	shr    edx,0x16
c0011fee:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ff4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ffa:	c1 e0 0c             	shl    eax,0xc
c0011ffd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012000:	c3                   	ret    

c0012001 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012001:	57                   	push   edi
c0012002:	56                   	push   esi
c0012003:	be 01 00 00 00       	mov    esi,0x1
c0012008:	53                   	push   ebx
c0012009:	83 ec 10             	sub    esp,0x10
c001200c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012010:	c1 eb 0c             	shr    ebx,0xc
c0012013:	eb 3f                	jmp    c0012054 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012015:	e8 fc fd ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c001201a:	83 ec 08             	sub    esp,0x8
c001201d:	57                   	push   edi
c001201e:	50                   	push   eax
c001201f:	e8 be ff ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012024:	83 c4 10             	add    esp,0x10
c0012027:	8b 00                	mov    eax,DWORD PTR [eax]
c0012029:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001202d:	f6 c4 04             	test   ah,0x4
c0012030:	75 5f                	jne    c0012091 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012032:	80 fa 04             	cmp    dl,0x4
c0012035:	74 78                	je     c00120af <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012037:	80 fa 02             	cmp    dl,0x2
c001203a:	0f 84 88 00 00 00    	je     c00120c8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012040:	80 fa 03             	cmp    dl,0x3
c0012043:	0f 84 ad 00 00 00    	je     c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012049:	fe ca                	dec    dl
c001204b:	0f 84 92 00 00 00    	je     c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012051:	43                   	inc    ebx
c0012052:	31 f6                	xor    esi,esi
c0012054:	53                   	push   ebx
c0012055:	e8 fd fa ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c001205a:	5f                   	pop    edi
c001205b:	89 df                	mov    edi,ebx
c001205d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012061:	c1 e7 0c             	shl    edi,0xc
c0012064:	84 c0                	test   al,al
c0012066:	75 ad                	jne    c0012015 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	68 73 a7 02 c0       	push   0xc002a773
c0012070:	e8 08 85 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0012075:	e8 9c fd ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c001207a:	5a                   	pop    edx
c001207b:	59                   	pop    ecx
c001207c:	57                   	push   edi
c001207d:	50                   	push   eax
c001207e:	e8 5f ff ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012083:	83 c4 10             	add    esp,0x10
c0012086:	8b 00                	mov    eax,DWORD PTR [eax]
c0012088:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001208c:	f6 c4 04             	test   ah,0x4
c001208f:	74 c0                	je     c0012051 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012091:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012095:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209a:	83 ec 0c             	sub    esp,0xc
c001209d:	50                   	push   eax
c001209e:	e8 b3 dd ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120aa:	80 fa 04             	cmp    dl,0x4
c00120ad:	75 88                	jne    c0012037 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120af:	89 f0                	mov    eax,esi
c00120b1:	84 c0                	test   al,al
c00120b3:	75 47                	jne    c00120fc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120b5:	c7 44 24 20 74 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a574
c00120bd:	83 c4 10             	add    esp,0x10
c00120c0:	5b                   	pop    ebx
c00120c1:	5e                   	pop    esi
c00120c2:	5f                   	pop    edi
c00120c3:	e9 b5 84 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c00120c8:	89 f0                	mov    eax,esi
c00120ca:	84 c0                	test   al,al
c00120cc:	75 15                	jne    c00120e3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120ce:	83 ec 0c             	sub    esp,0xc
c00120d1:	68 8f a7 02 c0       	push   0xc002a78f
c00120d6:	e8 a2 84 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00120db:	83 c4 10             	add    esp,0x10
c00120de:	e9 6e ff ff ff       	jmp    c0012051 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e3:	83 ec 08             	sub    esp,0x8
c00120e6:	6a 00                	push   0x0
c00120e8:	53                   	push   ebx
c00120e9:	e8 34 fa ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	e9 5b ff ff ff       	jmp    c0012051 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f6:	89 f0                	mov    eax,esi
c00120f8:	84 c0                	test   al,al
c00120fa:	75 15                	jne    c0012111 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120fc:	83 ec 08             	sub    esp,0x8
c00120ff:	6a 00                	push   0x0
c0012101:	53                   	push   ebx
c0012102:	e8 1b fa ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	83 c4 10             	add    esp,0x10
c001210d:	5b                   	pop    ebx
c001210e:	5e                   	pop    esi
c001210f:	5f                   	pop    edi
c0012110:	c3                   	ret    
c0012111:	c7 44 24 20 ab a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7ab
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	5b                   	pop    ebx
c001211d:	5e                   	pop    esi
c001211e:	5f                   	pop    edi
c001211f:	e9 59 84 00 00       	jmp    c001a57d <Krnl::panic(char const*)>

c0012124 <VAS::freeAllocatedPages(unsigned long)>:
c0012124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012128:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001212c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012130:	74 09                	je     c001213b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012132:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012136:	e9 c6 fe ff ff       	jmp    c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c001213b:	c7 44 24 04 98 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a598
c0012143:	e9 90 0d 00 00       	jmp    c0012ed8 <Dbg::kprintf(char const*, ...)>

c0012148 <VAS::virtualToPhysical(unsigned long)>:
c0012148:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012150:	e8 8d fe ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012155:	5a                   	pop    edx
c0012156:	8b 00                	mov    eax,DWORD PTR [eax]
c0012158:	59                   	pop    ecx
c0012159:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215e:	c3                   	ret    
c001215f:	90                   	nop

c0012160 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012160:	55                   	push   ebp
c0012161:	57                   	push   edi
c0012162:	56                   	push   esi
c0012163:	53                   	push   ebx
c0012164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012168:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001216c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012170:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012174:	85 db                	test   ebx,ebx
c0012176:	7e 22                	jle    c001219a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012178:	c1 e3 0c             	shl    ebx,0xc
c001217b:	01 f3                	add    ebx,esi
c001217d:	56                   	push   esi
c001217e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012184:	55                   	push   ebp
c0012185:	e8 58 fe ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c001218a:	5a                   	pop    edx
c001218b:	59                   	pop    ecx
c001218c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001218e:	21 f9                	and    ecx,edi
c0012190:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012194:	39 f3                	cmp    ebx,esi
c0012196:	89 08                	mov    DWORD PTR [eax],ecx
c0012198:	75 e3                	jne    c001217d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001219a:	5b                   	pop    ebx
c001219b:	5e                   	pop    esi
c001219c:	5f                   	pop    edi
c001219d:	5d                   	pop    ebp
c001219e:	c3                   	ret    
c001219f:	90                   	nop

c00121a0 <VAS::setToWriteCombining(unsigned long, int)>:
c00121a0:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00121a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121ab:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121b2:	75 01                	jne    c00121b5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121b4:	c3                   	ret    
c00121b5:	68 80 00 00 00       	push   0x80
c00121ba:	6a ff                	push   0xffffffff
c00121bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c8:	e8 93 ff ff ff       	call   c0012160 <VAS::reflagRange(unsigned long, int, int, int)>
c00121cd:	83 c4 14             	add    esp,0x14
c00121d0:	c3                   	ret    
c00121d1:	90                   	nop

c00121d2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121d2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121e5:	19 c0                	sbb    eax,eax
c00121e7:	83 ca 03             	or     edx,0x3
c00121ea:	83 e0 fc             	and    eax,0xfffffffc
c00121ed:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121f4:	0f 20 d8             	mov    eax,cr3
c00121f7:	0f 22 d8             	mov    cr3,eax
c00121fa:	c3                   	ret    
c00121fb:	90                   	nop

c00121fc <VAS::~VAS()>:
c00121fc:	83 ec 2c             	sub    esp,0x2c
c00121ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012207:	e8 6b bb 00 00       	call   c001dd77 <lockScheduler()>
c001220c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012211:	8b 00                	mov    eax,DWORD PTR [eax]
c0012213:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012216:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012223:	6a 01                	push   0x1
c0012225:	50                   	push   eax
c0012226:	e8 a7 ff ff ff       	call   c00121d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001222b:	83 c4 10             	add    esp,0x10
c001222e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012236:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001223e:	0f 8f d7 00 00 00    	jg     c001231b <VAS::~VAS()+0x11f>
c0012244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012248:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001224b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001224f:	c1 e2 02             	shl    edx,0x2
c0012252:	01 d0                	add    eax,edx
c0012254:	8b 00                	mov    eax,DWORD PTR [eax]
c0012256:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001225a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001225e:	83 e0 01             	and    eax,0x1
c0012261:	0f 84 ab 00 00 00    	je     c0012312 <VAS::~VAS()+0x116>
c0012267:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001226f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012277:	7f 75                	jg     c00122ee <VAS::~VAS()+0xf2>
c0012279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001227d:	c1 e0 0a             	shl    eax,0xa
c0012280:	89 c2                	mov    edx,eax
c0012282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012286:	01 d0                	add    eax,edx
c0012288:	c1 e0 0c             	shl    eax,0xc
c001228b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001228f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012294:	8b 00                	mov    eax,DWORD PTR [eax]
c0012296:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012299:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001229f:	83 ec 04             	sub    esp,0x4
c00122a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a6:	6a 01                	push   0x1
c00122a8:	50                   	push   eax
c00122a9:	e8 08 fd ff ff       	call   c0011fb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122ae:	83 c4 10             	add    esp,0x10
c00122b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00122bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c3:	25 01 04 00 00       	and    eax,0x401
c00122c8:	3d 01 04 00 00       	cmp    eax,0x401
c00122cd:	75 19                	jne    c00122e8 <VAS::~VAS()+0xec>
c00122cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	50                   	push   eax
c00122dc:	e8 75 db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122ec:	eb 81                	jmp    c001226f <VAS::~VAS()+0x73>
c00122ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f2:	25 00 04 00 00       	and    eax,0x400
c00122f7:	74 19                	je     c0012312 <VAS::~VAS()+0x116>
c00122f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012302:	83 ec 0c             	sub    esp,0xc
c0012305:	50                   	push   eax
c0012306:	e8 4b db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012312:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012316:	e9 1b ff ff ff       	jmp    c0012236 <VAS::~VAS()+0x3a>
c001231b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012322:	83 ec 0c             	sub    esp,0xc
c0012325:	50                   	push   eax
c0012326:	e8 d6 fc ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c001232b:	83 c4 10             	add    esp,0x10
c001232e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012332:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012335:	83 ec 0c             	sub    esp,0xc
c0012338:	50                   	push   eax
c0012339:	e8 18 db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001233e:	83 c4 10             	add    esp,0x10
c0012341:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012349:	c1 e0 02             	shl    eax,0x2
c001234c:	83 ec 08             	sub    esp,0x8
c001234f:	50                   	push   eax
c0012350:	68 bc a5 02 c0       	push   0xc002a5bc
c0012355:	e8 7e 0b 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	e8 17 ba 00 00       	call   c001dd79 <unlockScheduler()>
c0012362:	90                   	nop
c0012363:	83 c4 2c             	add    esp,0x2c
c0012366:	c3                   	ret    
c0012367:	90                   	nop

c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012368:	55                   	push   ebp
c0012369:	57                   	push   edi
c001236a:	56                   	push   esi
c001236b:	53                   	push   ebx
c001236c:	83 ec 1c             	sub    esp,0x1c
c001236f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012373:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012377:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001237d:	77 08                	ja     c0012387 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001237f:	0f 20 d8             	mov    eax,cr3
c0012382:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012385:	75 47                	jne    c00123ce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012387:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238b:	09 d8                	or     eax,ebx
c001238d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012392:	75 57                	jne    c00123eb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012394:	89 de                	mov    esi,ebx
c0012396:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012399:	c1 ee 16             	shr    esi,0x16
c001239c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123a3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a7:	74 54                	je     c00123fd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123ad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123b3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b7:	c1 e6 0c             	shl    esi,0xc
c00123ba:	c1 eb 0a             	shr    ebx,0xa
c00123bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123c3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c6:	83 c4 1c             	add    esp,0x1c
c00123c9:	5b                   	pop    ebx
c00123ca:	5e                   	pop    esi
c00123cb:	5f                   	pop    edi
c00123cc:	5d                   	pop    ebp
c00123cd:	c3                   	ret    
c00123ce:	83 ec 0c             	sub    esp,0xc
c00123d1:	68 dc a5 02 c0       	push   0xc002a5dc
c00123d6:	e8 fd 0a 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e2:	09 d8                	or     eax,ebx
c00123e4:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e9:	74 a9                	je     c0012394 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123eb:	83 ec 0c             	sub    esp,0xc
c00123ee:	68 44 a6 02 c0       	push   0xc002a644
c00123f3:	e8 85 81 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	eb 97                	jmp    c0012394 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012401:	e8 da da ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012406:	89 c5                	mov    ebp,eax
c0012408:	e8 09 fa ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012414:	6a 01                	push   0x1
c0012416:	e8 60 f7 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001241b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012422:	6a 01                	push   0x1
c0012424:	50                   	push   eax
c0012425:	55                   	push   ebp
c0012426:	81 cd 07 04 00 00    	or     ebp,0x407
c001242c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012430:	51                   	push   ecx
c0012431:	e8 26 02 00 00       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012436:	83 c4 1c             	add    esp,0x1c
c0012439:	68 00 10 00 00       	push   0x1000
c001243e:	6a 00                	push   0x0
c0012440:	50                   	push   eax
c0012441:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012445:	e8 2e e3 fe ff       	call   c0000778 <memset>
c001244a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001244e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012451:	e8 ab fb ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c0012456:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001245a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012463:	e9 41 ff ff ff       	jmp    c00123a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012468 <VAS::allocatePages(int, int)>:
c0012468:	55                   	push   ebp
c0012469:	57                   	push   edi
c001246a:	56                   	push   esi
c001246b:	53                   	push   ebx
c001246c:	83 ec 1c             	sub    esp,0x1c
c001246f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012473:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012478:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001247e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012484:	83 e0 01             	and    eax,0x1
c0012487:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001248b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001248f:	0f 85 cc 00 00 00    	jne    c0012561 <VAS::allocatePages(int, int)+0xf9>
c0012495:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012498:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001249c:	85 c0                	test   eax,eax
c001249e:	0f 84 a1 00 00 00    	je     c0012545 <VAS::allocatePages(int, int)+0xdd>
c00124a4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ac:	c1 e6 0c             	shl    esi,0xc
c00124af:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124b3:	85 c0                	test   eax,eax
c00124b5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b8:	7e 33                	jle    c00124ed <VAS::allocatePages(int, int)+0x85>
c00124ba:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124be:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c2:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c8:	e8 13 da ff ff       	call   c000fee0 <Phys::allocatePage()>
c00124cd:	55                   	push   ebp
c00124ce:	53                   	push   ebx
c00124cf:	50                   	push   eax
c00124d0:	57                   	push   edi
c00124d1:	e8 92 fe ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124de:	74 03                	je     c00124e3 <VAS::allocatePages(int, int)+0x7b>
c00124e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e9:	39 de                	cmp    esi,ebx
c00124eb:	75 db                	jne    c00124c8 <VAS::allocatePages(int, int)+0x60>
c00124ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f2:	75 12                	jne    c0012506 <VAS::allocatePages(int, int)+0x9e>
c00124f4:	0f 20 d8             	mov    eax,cr3
c00124f7:	0f 22 d8             	mov    cr3,eax
c00124fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124fe:	83 c4 1c             	add    esp,0x1c
c0012501:	5b                   	pop    ebx
c0012502:	5e                   	pop    esi
c0012503:	5f                   	pop    edi
c0012504:	5d                   	pop    ebp
c0012505:	c3                   	ret    
c0012506:	c1 ee 0a             	shr    esi,0xa
c0012509:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001250d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012513:	c1 eb 0a             	shr    ebx,0xa
c0012516:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001251c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012522:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012528:	39 c3                	cmp    ebx,eax
c001252a:	77 ce                	ja     c00124fa <VAS::allocatePages(int, int)+0x92>
c001252c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001252f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012535:	39 d8                	cmp    eax,ebx
c0012537:	73 f3                	jae    c001252c <VAS::allocatePages(int, int)+0xc4>
c0012539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001253d:	83 c4 1c             	add    esp,0x1c
c0012540:	5b                   	pop    ebx
c0012541:	5e                   	pop    esi
c0012542:	5f                   	pop    edi
c0012543:	5d                   	pop    ebp
c0012544:	c3                   	ret    
c0012545:	83 ec 0c             	sub    esp,0xc
c0012548:	68 68 a6 02 c0       	push   0xc002a668
c001254d:	e8 2b 80 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0012552:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012555:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012559:	83 c4 10             	add    esp,0x10
c001255c:	e9 43 ff ff ff       	jmp    c00124a4 <VAS::allocatePages(int, int)+0x3c>
c0012561:	83 ec 0c             	sub    esp,0xc
c0012564:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012568:	e8 0e f6 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001256d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012571:	83 c4 10             	add    esp,0x10
c0012574:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012579:	0f 87 9b 00 00 00    	ja     c001261a <VAS::allocatePages(int, int)+0x1b2>
c001257f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012583:	85 d2                	test   edx,edx
c0012585:	7e 3c                	jle    c00125c3 <VAS::allocatePages(int, int)+0x15b>
c0012587:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001258b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001258f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012593:	c1 e5 0c             	shl    ebp,0xc
c0012596:	81 ce 00 04 00 00    	or     esi,0x400
c001259c:	01 dd                	add    ebp,ebx
c001259e:	e8 3d d9 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00125a3:	56                   	push   esi
c00125a4:	53                   	push   ebx
c00125a5:	50                   	push   eax
c00125a6:	57                   	push   edi
c00125a7:	e8 bc fd ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b4:	74 03                	je     c00125b9 <VAS::allocatePages(int, int)+0x151>
c00125b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125bf:	39 dd                	cmp    ebp,ebx
c00125c1:	75 db                	jne    c001259e <VAS::allocatePages(int, int)+0x136>
c00125c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c8:	0f 84 26 ff ff ff    	je     c00124f4 <VAS::allocatePages(int, int)+0x8c>
c00125ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d6:	89 d3                	mov    ebx,edx
c00125d8:	c1 e0 0c             	shl    eax,0xc
c00125db:	c1 eb 0a             	shr    ebx,0xa
c00125de:	01 d0                	add    eax,edx
c00125e0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e6:	c1 e8 0a             	shr    eax,0xa
c00125e9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125f4:	2d 00 00 40 00       	sub    eax,0x400000
c00125f9:	39 c3                	cmp    ebx,eax
c00125fb:	0f 87 f9 fe ff ff    	ja     c00124fa <VAS::allocatePages(int, int)+0x92>
c0012601:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012604:	81 c3 00 10 00 00    	add    ebx,0x1000
c001260a:	39 d8                	cmp    eax,ebx
c001260c:	73 f3                	jae    c0012601 <VAS::allocatePages(int, int)+0x199>
c001260e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012612:	83 c4 1c             	add    esp,0x1c
c0012615:	5b                   	pop    ebx
c0012616:	5e                   	pop    esi
c0012617:	5f                   	pop    edi
c0012618:	5d                   	pop    ebp
c0012619:	c3                   	ret    
c001261a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001261f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012625:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001262c:	0f 84 4d ff ff ff    	je     c001257f <VAS::allocatePages(int, int)+0x117>
c0012632:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001263a:	e9 40 ff ff ff       	jmp    c001257f <VAS::allocatePages(int, int)+0x117>
c001263f:	90                   	nop

c0012640 <VAS::setCPUSpecific(unsigned long)>:
c0012640:	83 ec 0c             	sub    esp,0xc
c0012643:	6a 05                	push   0x5
c0012645:	68 00 00 40 c2       	push   0xc2400000
c001264a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012652:	e8 11 fd ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012657:	83 c4 1c             	add    esp,0x1c
c001265a:	c3                   	ret    
c001265b:	90                   	nop

c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001265c:	55                   	push   ebp
c001265d:	57                   	push   edi
c001265e:	56                   	push   esi
c001265f:	53                   	push   ebx
c0012660:	83 ec 1c             	sub    esp,0x1c
c0012663:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012668:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001266c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012672:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012676:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001267c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012680:	83 e0 01             	and    eax,0x1
c0012683:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012687:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268b:	85 c0                	test   eax,eax
c001268d:	7e 39                	jle    c00126c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001268f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012693:	89 f3                	mov    ebx,esi
c0012695:	c1 e0 0c             	shl    eax,0xc
c0012698:	01 f0                	add    eax,esi
c001269a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001269e:	55                   	push   ebp
c001269f:	53                   	push   ebx
c00126a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a4:	29 f0                	sub    eax,esi
c00126a6:	01 d8                	add    eax,ebx
c00126a8:	50                   	push   eax
c00126a9:	57                   	push   edi
c00126aa:	e8 b9 fc ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b7:	74 03                	je     c00126bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126bc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c6:	75 d6                	jne    c001269e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126cd:	75 10                	jne    c00126df <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126cf:	0f 20 d8             	mov    eax,cr3
c00126d2:	0f 22 d8             	mov    cr3,eax
c00126d5:	83 c4 1c             	add    esp,0x1c
c00126d8:	89 f0                	mov    eax,esi
c00126da:	5b                   	pop    ebx
c00126db:	5e                   	pop    esi
c00126dc:	5f                   	pop    edi
c00126dd:	5d                   	pop    ebp
c00126de:	c3                   	ret    
c00126df:	89 f3                	mov    ebx,esi
c00126e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e5:	c1 eb 0a             	shr    ebx,0xa
c00126e8:	c1 e0 0c             	shl    eax,0xc
c00126eb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f1:	01 f0                	add    eax,esi
c00126f3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f9:	c1 e8 0a             	shr    eax,0xa
c00126fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012701:	2d 00 00 40 00       	sub    eax,0x400000
c0012706:	39 c3                	cmp    ebx,eax
c0012708:	77 cb                	ja     c00126d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001270a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001270d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012713:	39 d8                	cmp    eax,ebx
c0012715:	73 f3                	jae    c001270a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012717:	83 c4 1c             	add    esp,0x1c
c001271a:	89 f0                	mov    eax,esi
c001271c:	5b                   	pop    ebx
c001271d:	5e                   	pop    esi
c001271e:	5f                   	pop    edi
c001271f:	5d                   	pop    ebp
c0012720:	c3                   	ret    
c0012721:	90                   	nop

c0012722 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012722:	55                   	push   ebp
c0012723:	57                   	push   edi
c0012724:	56                   	push   esi
c0012725:	53                   	push   ebx
c0012726:	83 ec 1c             	sub    esp,0x1c
c0012729:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001272d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012731:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012735:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012739:	a9 ff 0f 00 00       	test   eax,0xfff
c001273e:	75 4a                	jne    c001278a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012740:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012744:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012747:	c1 eb 16             	shr    ebx,0x16
c001274a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012751:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012755:	74 4d                	je     c00127a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012757:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001275b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001275f:	c1 e8 0a             	shr    eax,0xa
c0012762:	80 fa 01             	cmp    dl,0x1
c0012765:	19 d2                	sbb    edx,edx
c0012767:	c1 e3 0c             	shl    ebx,0xc
c001276a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001276e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012774:	25 fc 0f 00 00       	and    eax,0xffc
c0012779:	01 d8                	add    eax,ebx
c001277b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012782:	83 c4 1c             	add    esp,0x1c
c0012785:	5b                   	pop    ebx
c0012786:	5e                   	pop    esi
c0012787:	5f                   	pop    edi
c0012788:	5d                   	pop    ebp
c0012789:	c3                   	ret    
c001278a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001278e:	83 ec 0c             	sub    esp,0xc
c0012791:	68 94 a6 02 c0       	push   0xc002a694
c0012796:	e8 e2 7d 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001279b:	83 c4 10             	add    esp,0x10
c001279e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a2:	eb 9c                	jmp    c0012740 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a8:	e8 33 d7 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00127ad:	89 c5                	mov    ebp,eax
c00127af:	e8 62 f6 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c00127b4:	83 ec 0c             	sub    esp,0xc
c00127b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127bb:	6a 01                	push   0x1
c00127bd:	e8 b9 f3 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c00127c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c9:	6a 01                	push   0x1
c00127cb:	50                   	push   eax
c00127cc:	55                   	push   ebp
c00127cd:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d7:	51                   	push   ecx
c00127d8:	e8 7f fe ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127dd:	83 c4 1c             	add    esp,0x1c
c00127e0:	68 00 10 00 00       	push   0x1000
c00127e5:	6a 00                	push   0x0
c00127e7:	50                   	push   eax
c00127e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127ec:	e8 87 df fe ff       	call   c0000778 <memset>
c00127f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127f5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f8:	e8 04 f8 ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c00127fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012800:	83 c4 10             	add    esp,0x10
c0012803:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012806:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001280a:	e9 48 ff ff ff       	jmp    c0012757 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001280f:	90                   	nop

c0012810 <VAS::VAS(bool)>:
c0012810:	53                   	push   ebx
c0012811:	83 ec 28             	sub    esp,0x28
c0012814:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012818:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001281c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012820:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012836:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001283d:	e8 9e d6 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012842:	89 c2                	mov    edx,eax
c0012844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012848:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284b:	e8 c6 f5 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0012850:	89 c3                	mov    ebx,eax
c0012852:	83 ec 0c             	sub    esp,0xc
c0012855:	6a 01                	push   0x1
c0012857:	e8 1f f3 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001285c:	83 c4 10             	add    esp,0x10
c001285f:	89 c2                	mov    edx,eax
c0012861:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012865:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012868:	83 ec 0c             	sub    esp,0xc
c001286b:	6a 03                	push   0x3
c001286d:	6a 01                	push   0x1
c001286f:	52                   	push   edx
c0012870:	50                   	push   eax
c0012871:	53                   	push   ebx
c0012872:	e8 e5 fd ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012877:	83 c4 20             	add    esp,0x20
c001287a:	89 c2                	mov    edx,eax
c001287c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012880:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012883:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288b:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012893:	7f 1c                	jg     c00128b1 <VAS::VAS(bool)+0xa1>
c0012895:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012899:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a0:	c1 e2 02             	shl    edx,0x2
c00128a3:	01 d0                	add    eax,edx
c00128a5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ab:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128af:	eb da                	jmp    c001288b <VAS::VAS(bool)+0x7b>
c00128b1:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128b9:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c1:	7f 7a                	jg     c001293d <VAS::VAS(bool)+0x12d>
c00128c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c7:	2d 00 02 00 00       	sub    eax,0x200
c00128cc:	c1 e0 0c             	shl    eax,0xc
c00128cf:	83 c8 03             	or     eax,0x3
c00128d2:	89 c2                	mov    edx,eax
c00128d4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00128d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128df:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e5:	83 e0 10             	and    eax,0x10
c00128e8:	84 c0                	test   al,al
c00128ea:	74 07                	je     c00128f3 <VAS::VAS(bool)+0xe3>
c00128ec:	b8 00 01 00 00       	mov    eax,0x100
c00128f1:	eb 05                	jmp    c00128f8 <VAS::VAS(bool)+0xe8>
c00128f3:	b8 00 00 00 00       	mov    eax,0x0
c00128f8:	09 d0                	or     eax,edx
c00128fa:	89 c1                	mov    ecx,eax
c00128fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012900:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012907:	c1 e2 02             	shl    edx,0x2
c001290a:	01 d0                	add    eax,edx
c001290c:	89 ca                	mov    edx,ecx
c001290e:	89 10                	mov    DWORD PTR [eax],edx
c0012910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012914:	2d 40 03 00 00       	sub    eax,0x340
c0012919:	83 f8 7f             	cmp    eax,0x7f
c001291c:	77 16                	ja     c0012934 <VAS::VAS(bool)+0x124>
c001291e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012922:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012925:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012929:	c1 e2 02             	shl    edx,0x2
c001292c:	01 d0                	add    eax,edx
c001292e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012934:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012938:	e9 7c ff ff ff       	jmp    c00128b9 <VAS::VAS(bool)+0xa9>
c001293d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012942:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012948:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001294e:	83 e0 10             	and    eax,0x10
c0012951:	84 c0                	test   al,al
c0012953:	74 07                	je     c001295c <VAS::VAS(bool)+0x14c>
c0012955:	b8 03 41 00 00       	mov    eax,0x4103
c001295a:	eb 05                	jmp    c0012961 <VAS::VAS(bool)+0x151>
c001295c:	b8 03 40 00 00       	mov    eax,0x4003
c0012961:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012965:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012968:	81 c2 20 0c 00 00    	add    edx,0xc20
c001296e:	89 02                	mov    DWORD PTR [edx],eax
c0012970:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012975:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012981:	83 ec 08             	sub    esp,0x8
c0012984:	50                   	push   eax
c0012985:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012989:	e8 b2 fc ff ff       	call   c0012640 <VAS::setCPUSpecific(unsigned long)>
c001298e:	83 c4 10             	add    esp,0x10
c0012991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012995:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012998:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001299d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129a9:	83 e0 10             	and    eax,0x10
c00129ac:	84 c0                	test   al,al
c00129ae:	74 07                	je     c00129b7 <VAS::VAS(bool)+0x1a7>
c00129b0:	b8 00 01 00 00       	mov    eax,0x100
c00129b5:	eb 05                	jmp    c00129bc <VAS::VAS(bool)+0x1ac>
c00129b7:	b8 00 00 00 00       	mov    eax,0x0
c00129bc:	09 c2                	or     edx,eax
c00129be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c5:	05 fc 0f 00 00       	add    eax,0xffc
c00129ca:	83 ca 03             	or     edx,0x3
c00129cd:	89 10                	mov    DWORD PTR [eax],edx
c00129cf:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129da:	83 ec 0c             	sub    esp,0xc
c00129dd:	50                   	push   eax
c00129de:	e8 07 1c 00 00       	call   c00145ea <Device::getName()>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	83 ec 08             	sub    esp,0x8
c00129e9:	68 c5 a7 02 c0       	push   0xc002a7c5
c00129ee:	50                   	push   eax
c00129ef:	e8 cc de fe ff       	call   c00008c0 <strcmp>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	85 c0                	test   eax,eax
c00129f9:	0f 94 c0             	sete   al
c00129fc:	84 c0                	test   al,al
c00129fe:	74 70                	je     c0012a70 <VAS::VAS(bool)+0x260>
c0012a00:	e8 55 b3 00 00       	call   c001dd5a <disableIRQs()>
c0012a05:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a10:	05 7c 09 00 00       	add    eax,0x97c
c0012a15:	83 ec 0c             	sub    esp,0xc
c0012a18:	50                   	push   eax
c0012a19:	e8 9e c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a1e:	83 c4 10             	add    esp,0x10
c0012a21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a26:	89 c3                	mov    ebx,eax
c0012a28:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a33:	05 7c 09 00 00       	add    eax,0x97c
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	50                   	push   eax
c0012a3c:	e8 7b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	83 ec 08             	sub    esp,0x8
c0012a47:	50                   	push   eax
c0012a48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4c:	e8 91 f5 ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a56:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5b:	6a 11                	push   0x11
c0012a5d:	53                   	push   ebx
c0012a5e:	50                   	push   eax
c0012a5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a63:	e8 00 f9 ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a68:	83 c4 10             	add    esp,0x10
c0012a6b:	e8 f8 b2 00 00       	call   c001dd68 <enableIRQs()>
c0012a70:	90                   	nop
c0012a71:	83 c4 28             	add    esp,0x28
c0012a74:	5b                   	pop    ebx
c0012a75:	c3                   	ret    

c0012a76 <VAS::evict(unsigned long)>:
c0012a76:	55                   	push   ebp
c0012a77:	57                   	push   edi
c0012a78:	56                   	push   esi
c0012a79:	53                   	push   ebx
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a81:	e8 36 f2 ff ff       	call   c0011cbc <Virt::allocateSwapfilePage()>
c0012a86:	89 c7                	mov    edi,eax
c0012a88:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012a8d:	85 c0                	test   eax,eax
c0012a8f:	7e 3d                	jle    c0012ace <VAS::evict(unsigned long)+0x58>
c0012a91:	89 ee                	mov    esi,ebp
c0012a93:	31 db                	xor    ebx,ebx
c0012a95:	83 ec 0c             	sub    esp,0xc
c0012a98:	57                   	push   edi
c0012a99:	e8 0c f2 ff ff       	call   c0011caa <Virt::swapIDToSector(unsigned long)>
c0012a9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa1:	01 d8                	add    eax,ebx
c0012aa3:	6a 01                	push   0x1
c0012aa5:	31 d2                	xor    edx,edx
c0012aa7:	43                   	inc    ebx
c0012aa8:	52                   	push   edx
c0012aa9:	81 c6 00 02 00 00    	add    esi,0x200
c0012aaf:	50                   	push   eax
c0012ab0:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012ab7:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012abe:	e8 91 3c 00 00       	call   c0016754 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac3:	83 c4 20             	add    esp,0x20
c0012ac6:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012acc:	7f c7                	jg     c0012a95 <VAS::evict(unsigned long)+0x1f>
c0012ace:	83 ec 08             	sub    esp,0x8
c0012ad1:	c1 e7 0b             	shl    edi,0xb
c0012ad4:	55                   	push   ebp
c0012ad5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ad9:	e8 04 f5 ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012ade:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ae0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae6:	09 d7                	or     edi,edx
c0012ae8:	89 38                	mov    DWORD PTR [eax],edi
c0012aea:	ff 05 04 e5 02 c0    	inc    DWORD PTR ds:0xc002e504
c0012af0:	0f 20 d8             	mov    eax,cr3
c0012af3:	0f 22 d8             	mov    cr3,eax
c0012af6:	83 c4 1c             	add    esp,0x1c
c0012af9:	5b                   	pop    ebx
c0012afa:	5e                   	pop    esi
c0012afb:	5f                   	pop    edi
c0012afc:	5d                   	pop    ebp
c0012afd:	c3                   	ret    

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b05:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b0b:	74 1c                	je     c0012b29 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012b0d:	53                   	push   ebx
c0012b0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b12:	e8 cb f4 ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012b17:	5a                   	pop    edx
c0012b18:	89 c6                	mov    esi,eax
c0012b1a:	59                   	pop    ecx
c0012b1b:	85 c0                	test   eax,eax
c0012b1d:	74 0a                	je     c0012b29 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012b1f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b21:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b27:	74 06                	je     c0012b2f <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012b29:	31 c0                	xor    eax,eax
c0012b2b:	5b                   	pop    ebx
c0012b2c:	5e                   	pop    esi
c0012b2d:	5f                   	pop    edi
c0012b2e:	c3                   	ret    
c0012b2f:	e8 ac d3 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012b34:	c1 ef 0b             	shr    edi,0xb
c0012b37:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b39:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b3f:	09 c2                	or     edx,eax
c0012b41:	81 ca 01 08 00 00    	or     edx,0x801
c0012b47:	89 16                	mov    DWORD PTR [esi],edx
c0012b49:	0f 20 d8             	mov    eax,cr3
c0012b4c:	0f 22 d8             	mov    cr3,eax
c0012b4f:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012b54:	85 c0                	test   eax,eax
c0012b56:	7e 3b                	jle    c0012b93 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012b58:	31 f6                	xor    esi,esi
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	57                   	push   edi
c0012b5e:	e8 47 f1 ff ff       	call   c0011caa <Virt::swapIDToSector(unsigned long)>
c0012b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b66:	01 f0                	add    eax,esi
c0012b68:	6a 01                	push   0x1
c0012b6a:	31 d2                	xor    edx,edx
c0012b6c:	46                   	inc    esi
c0012b6d:	52                   	push   edx
c0012b6e:	81 c3 00 02 00 00    	add    ebx,0x200
c0012b74:	50                   	push   eax
c0012b75:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012b7c:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012b83:	e8 60 3b 00 00       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b88:	83 c4 20             	add    esp,0x20
c0012b8b:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0012b91:	7f c7                	jg     c0012b5a <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012b93:	83 ec 0c             	sub    esp,0xc
c0012b96:	ff 0d 04 e5 02 c0    	dec    DWORD PTR ds:0xc002e504
c0012b9c:	57                   	push   edi
c0012b9d:	e8 ea f0 ff ff       	call   c0011c8c <Virt::freeSwapfilePage(unsigned long)>
c0012ba2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	25 ff 0f 00 00       	and    eax,0xfff
c0012bae:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bb3:	77 07                	ja     c0012bbc <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012bb5:	b0 01                	mov    al,0x1
c0012bb7:	e9 6f ff ff ff       	jmp    c0012b2b <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	68 d3 a7 02 c0       	push   0xc002a7d3
c0012bc4:	e8 0f 03 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	b0 01                	mov    al,0x1
c0012bce:	e9 58 ff ff ff       	jmp    c0012b2b <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012bd3:	90                   	nop

c0012bd4 <VAS::scanForEviction()>:
c0012bd4:	55                   	push   ebp
c0012bd5:	57                   	push   edi
c0012bd6:	31 ff                	xor    edi,edi
c0012bd8:	56                   	push   esi
c0012bd9:	31 f6                	xor    esi,esi
c0012bdb:	53                   	push   ebx
c0012bdc:	83 ec 1c             	sub    esp,0x1c
c0012bdf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012be3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012be6:	89 d8                	mov    eax,ebx
c0012be8:	39 c3                	cmp    ebx,eax
c0012bea:	74 72                	je     c0012c5e <VAS::scanForEviction()+0x8a>
c0012bec:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012bf1:	75 0e                	jne    c0012c01 <VAS::scanForEviction()+0x2d>
c0012bf3:	89 c1                	mov    ecx,eax
c0012bf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012bf8:	c1 e9 16             	shr    ecx,0x16
c0012bfb:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012bff:	74 51                	je     c0012c52 <VAS::scanForEviction()+0x7e>
c0012c01:	50                   	push   eax
c0012c02:	55                   	push   ebp
c0012c03:	e8 da f3 ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c0012c08:	5a                   	pop    edx
c0012c09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c0b:	59                   	pop    ecx
c0012c0c:	89 d1                	mov    ecx,edx
c0012c0e:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012c14:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012c1a:	74 54                	je     c0012c70 <VAS::scanForEviction()+0x9c>
c0012c1c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012c1f:	05 00 10 00 00       	add    eax,0x1000
c0012c24:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012c29:	76 3d                	jbe    c0012c68 <VAS::scanForEviction()+0x94>
c0012c2b:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012c32:	85 db                	test   ebx,ebx
c0012c34:	74 79                	je     c0012caf <VAS::scanForEviction()+0xdb>
c0012c36:	31 c0                	xor    eax,eax
c0012c38:	be 01 00 00 00       	mov    esi,0x1
c0012c3d:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012c42:	75 bd                	jne    c0012c01 <VAS::scanForEviction()+0x2d>
c0012c44:	89 c1                	mov    ecx,eax
c0012c46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012c49:	c1 e9 16             	shr    ecx,0x16
c0012c4c:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012c50:	75 af                	jne    c0012c01 <VAS::scanForEviction()+0x2d>
c0012c52:	05 00 00 40 00       	add    eax,0x400000
c0012c57:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c5a:	39 c3                	cmp    ebx,eax
c0012c5c:	75 8e                	jne    c0012bec <VAS::scanForEviction()+0x18>
c0012c5e:	89 f1                	mov    ecx,esi
c0012c60:	84 c9                	test   cl,cl
c0012c62:	74 88                	je     c0012bec <VAS::scanForEviction()+0x18>
c0012c64:	89 f7                	mov    edi,esi
c0012c66:	eb 84                	jmp    c0012bec <VAS::scanForEviction()+0x18>
c0012c68:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c6b:	e9 78 ff ff ff       	jmp    c0012be8 <VAS::scanForEviction()+0x14>
c0012c70:	f6 c2 01             	test   dl,0x1
c0012c73:	74 a7                	je     c0012c1c <VAS::scanForEviction()+0x48>
c0012c75:	f6 c2 40             	test   dl,0x40
c0012c78:	74 0b                	je     c0012c85 <VAS::scanForEviction()+0xb1>
c0012c7a:	83 e2 bf             	and    edx,0xffffffbf
c0012c7d:	89 10                	mov    DWORD PTR [eax],edx
c0012c7f:	89 f8                	mov    eax,edi
c0012c81:	84 c0                	test   al,al
c0012c83:	74 97                	je     c0012c1c <VAS::scanForEviction()+0x48>
c0012c85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c89:	83 ec 08             	sub    esp,0x8
c0012c8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012c8f:	55                   	push   ebp
c0012c90:	e8 e1 fd ff ff       	call   c0012a76 <VAS::evict(unsigned long)>
c0012c95:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012c9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ca0:	83 c4 2c             	add    esp,0x2c
c0012ca3:	89 d0                	mov    eax,edx
c0012ca5:	5b                   	pop    ebx
c0012ca6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cab:	5e                   	pop    esi
c0012cac:	5f                   	pop    edi
c0012cad:	5d                   	pop    ebp
c0012cae:	c3                   	ret    
c0012caf:	bf 01 00 00 00       	mov    edi,0x1
c0012cb4:	eb 80                	jmp    c0012c36 <VAS::scanForEviction()+0x62>

c0012cb6 <mapVASFirstTime>:
c0012cb6:	55                   	push   ebp
c0012cb7:	57                   	push   edi
c0012cb8:	56                   	push   esi
c0012cb9:	53                   	push   ebx
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cc2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cc5:	4a                   	dec    edx
c0012cc6:	0f 84 8e 00 00 00    	je     c0012d5a <mapVASFirstTime+0xa4>
c0012ccc:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012ccf:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cd2:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cd7:	c1 e5 15             	shl    ebp,0x15
c0012cda:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012cdf:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012ce5:	29 eb                	sub    ebx,ebp
c0012ce7:	29 ee                	sub    esi,ebp
c0012ce9:	e8 f2 d1 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012cee:	83 ec 0c             	sub    esp,0xc
c0012cf1:	68 03 04 00 00       	push   0x403
c0012cf6:	6a 01                	push   0x1
c0012cf8:	53                   	push   ebx
c0012cf9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cff:	50                   	push   eax
c0012d00:	57                   	push   edi
c0012d01:	e8 56 f9 ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d06:	83 c4 20             	add    esp,0x20
c0012d09:	39 f3                	cmp    ebx,esi
c0012d0b:	75 dc                	jne    c0012ce9 <mapVASFirstTime+0x33>
c0012d0d:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d12:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d17:	29 ee                	sub    esi,ebp
c0012d19:	29 e8                	sub    eax,ebp
c0012d1b:	89 c5                	mov    ebp,eax
c0012d1d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d21:	19 db                	sbb    ebx,ebx
c0012d23:	e8 b8 d1 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012d28:	83 e3 04             	and    ebx,0x4
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d34:	53                   	push   ebx
c0012d35:	6a 01                	push   0x1
c0012d37:	56                   	push   esi
c0012d38:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d3e:	50                   	push   eax
c0012d3f:	57                   	push   edi
c0012d40:	e8 17 f9 ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d45:	83 c4 20             	add    esp,0x20
c0012d48:	39 f5                	cmp    ebp,esi
c0012d4a:	75 d1                	jne    c0012d1d <mapVASFirstTime+0x67>
c0012d4c:	0f 20 d8             	mov    eax,cr3
c0012d4f:	0f 22 d8             	mov    cr3,eax
c0012d52:	83 c4 0c             	add    esp,0xc
c0012d55:	5b                   	pop    ebx
c0012d56:	5e                   	pop    esi
c0012d57:	5f                   	pop    edi
c0012d58:	5d                   	pop    ebp
c0012d59:	c3                   	ret    
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	68 e7 a7 02 c0       	push   0xc002a7e7
c0012d62:	e8 71 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	83 c4 0c             	add    esp,0xc
c0012d6d:	5b                   	pop    ebx
c0012d6e:	5e                   	pop    esi
c0012d6f:	5f                   	pop    edi
c0012d70:	5d                   	pop    ebp
c0012d71:	c3                   	ret    

c0012d72 <__cxa_atexit>:
c0012d72:	31 c0                	xor    eax,eax
c0012d74:	c3                   	ret    

c0012d75 <__cxa_finalize>:
c0012d75:	c3                   	ret    

c0012d76 <__stack_chk_fail>:
c0012d76:	55                   	push   ebp
c0012d77:	89 e5                	mov    ebp,esp
c0012d79:	83 ec 14             	sub    esp,0x14
c0012d7c:	68 00 a8 02 c0       	push   0xc002a800
c0012d81:	e8 52 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012d86:	58                   	pop    eax
c0012d87:	5a                   	pop    edx
c0012d88:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d8b:	68 50 a8 02 c0       	push   0xc002a850
c0012d90:	e8 43 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012d95:	59                   	pop    ecx
c0012d96:	58                   	pop    eax
c0012d97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d9d:	68 50 a8 02 c0       	push   0xc002a850
c0012da2:	e8 31 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012da7:	5a                   	pop    edx
c0012da8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dab:	59                   	pop    ecx
c0012dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dae:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012db1:	68 50 a8 02 c0       	push   0xc002a850
c0012db6:	e8 1d 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012dbb:	5a                   	pop    edx
c0012dbc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dbf:	59                   	pop    ecx
c0012dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dc7:	68 50 a8 02 c0       	push   0xc002a850
c0012dcc:	e8 07 01 00 00       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0012dd1:	c7 04 24 58 a8 02 c0 	mov    DWORD PTR [esp],0xc002a858
c0012dd8:	e8 a0 77 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	c9                   	leave  
c0012de1:	c3                   	ret    

c0012de2 <__cxa_pure_virtual>:
c0012de2:	83 ec 18             	sub    esp,0x18
c0012de5:	68 70 a8 02 c0       	push   0xc002a870
c0012dea:	e8 8e 77 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0012def:	83 c4 1c             	add    esp,0x1c
c0012df2:	c3                   	ret    

c0012df3 <operator new[](unsigned long)>:
c0012df3:	e9 4b ca ff ff       	jmp    c000f843 <malloc>

c0012df8 <operator delete(void*, unsigned long)>:
c0012df8:	e9 66 ca ff ff       	jmp    c000f863 <rfree>

c0012dfd <operator delete[](void*)>:
c0012dfd:	e9 61 ca ff ff       	jmp    c000f863 <rfree>

c0012e02 <operator delete[](void*, unsigned long)>:
c0012e02:	e9 5c ca ff ff       	jmp    c000f863 <rfree>

c0012e07 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e07:	57                   	push   edi
c0012e08:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e0d:	56                   	push   esi
c0012e0e:	be 84 a8 02 c0       	mov    esi,0xc002a884
c0012e13:	53                   	push   ebx
c0012e14:	83 ec 40             	sub    esp,0x40
c0012e17:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e1b:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e1f:	fc                   	cld    
c0012e20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e22:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e26:	83 f9 3e             	cmp    ecx,0x3e
c0012e29:	7e 05                	jle    c0012e30 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e2b:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e30:	89 df                	mov    edi,ebx
c0012e32:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e36:	eb 02                	jmp    c0012e3a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e38:	89 c7                	mov    edi,eax
c0012e3a:	31 d2                	xor    edx,edx
c0012e3c:	46                   	inc    esi
c0012e3d:	89 f8                	mov    eax,edi
c0012e3f:	f7 f1                	div    ecx
c0012e41:	39 cf                	cmp    edi,ecx
c0012e43:	73 f3                	jae    c0012e38 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e48:	eb 02                	jmp    c0012e4c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e4a:	89 c3                	mov    ebx,eax
c0012e4c:	31 d2                	xor    edx,edx
c0012e4e:	4e                   	dec    esi
c0012e4f:	89 d8                	mov    eax,ebx
c0012e51:	f7 f1                	div    ecx
c0012e53:	39 cb                	cmp    ebx,ecx
c0012e55:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e59:	88 16                	mov    BYTE PTR [esi],dl
c0012e5b:	73 ed                	jae    c0012e4a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e61:	83 c4 40             	add    esp,0x40
c0012e64:	5b                   	pop    ebx
c0012e65:	5e                   	pop    esi
c0012e66:	5f                   	pop    edi
c0012e67:	c3                   	ret    

c0012e68 <Dbg::logc(char)>:
c0012e68:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e6c:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e71:	ec                   	in     al,dx
c0012e72:	a8 20                	test   al,0x20
c0012e74:	74 fb                	je     c0012e71 <Dbg::logc(char)+0x9>
c0012e76:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e7b:	88 c8                	mov    al,cl
c0012e7d:	ee                   	out    dx,al
c0012e7e:	c3                   	ret    

c0012e7f <Dbg::logs(char*)>:
c0012e7f:	53                   	push   ebx
c0012e80:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e84:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e87:	84 c0                	test   al,al
c0012e89:	74 0f                	je     c0012e9a <Dbg::logs(char*)+0x1b>
c0012e8b:	50                   	push   eax
c0012e8c:	43                   	inc    ebx
c0012e8d:	e8 d6 ff ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012e92:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e95:	5a                   	pop    edx
c0012e96:	84 c0                	test   al,al
c0012e98:	75 f1                	jne    c0012e8b <Dbg::logs(char*)+0xc>
c0012e9a:	5b                   	pop    ebx
c0012e9b:	c3                   	ret    

c0012e9c <Dbg::logWriteInt(unsigned int)>:
c0012e9c:	83 ec 10             	sub    esp,0x10
c0012e9f:	6a 0a                	push   0xa
c0012ea1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ea5:	50                   	push   eax
c0012ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eaa:	e8 58 ff ff ff       	call   c0012e07 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eaf:	50                   	push   eax
c0012eb0:	e8 ca ff ff ff       	call   c0012e7f <Dbg::logs(char*)>
c0012eb5:	83 c4 20             	add    esp,0x20
c0012eb8:	c3                   	ret    

c0012eb9 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eb9:	83 ec 10             	sub    esp,0x10
c0012ebc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ec0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ec4:	50                   	push   eax
c0012ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec9:	e8 39 ff ff ff       	call   c0012e07 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ece:	50                   	push   eax
c0012ecf:	e8 ab ff ff ff       	call   c0012e7f <Dbg::logs(char*)>
c0012ed4:	83 c4 20             	add    esp,0x20
c0012ed7:	c3                   	ret    

c0012ed8 <Dbg::kprintf(char const*, ...)>:
c0012ed8:	55                   	push   ebp
c0012ed9:	57                   	push   edi
c0012eda:	56                   	push   esi
c0012edb:	53                   	push   ebx
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ee3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ee7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eeb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012eee:	84 c0                	test   al,al
c0012ef0:	74 4a                	je     c0012f3c <Dbg::kprintf(char const*, ...)+0x64>
c0012ef2:	31 db                	xor    ebx,ebx
c0012ef4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ef7:	3c 25                	cmp    al,0x25
c0012ef9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012efc:	0f 85 e4 00 00 00    	jne    c0012fe6 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f02:	83 c3 02             	add    ebx,0x2
c0012f05:	8a 07                	mov    al,BYTE PTR [edi]
c0012f07:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f0a:	83 e8 25             	sub    eax,0x25
c0012f0d:	3c 53                	cmp    al,0x53
c0012f0f:	0f 87 ba 00 00 00    	ja     c0012fcf <Dbg::kprintf(char const*, ...)+0xf7>
c0012f15:	0f b6 c0             	movzx  eax,al
c0012f18:	ff 24 85 c4 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd573c]
c0012f1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f23:	89 c8                	mov    eax,ecx
c0012f25:	83 c1 04             	add    ecx,0x4
c0012f28:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f2c:	ff 30                	push   DWORD PTR [eax]
c0012f2e:	e8 4c ff ff ff       	call   c0012e7f <Dbg::logs(char*)>
c0012f33:	58                   	pop    eax
c0012f34:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f38:	84 c0                	test   al,al
c0012f3a:	75 b8                	jne    c0012ef4 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f3c:	83 c4 0c             	add    esp,0xc
c0012f3f:	5b                   	pop    ebx
c0012f40:	5e                   	pop    esi
c0012f41:	5f                   	pop    edi
c0012f42:	5d                   	pop    ebp
c0012f43:	c3                   	ret    
c0012f44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f48:	89 d0                	mov    eax,edx
c0012f4a:	83 c2 04             	add    edx,0x4
c0012f4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f51:	ff 30                	push   DWORD PTR [eax]
c0012f53:	e8 44 ff ff ff       	call   c0012e9c <Dbg::logWriteInt(unsigned int)>
c0012f58:	58                   	pop    eax
c0012f59:	eb d9                	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f5f:	89 d0                	mov    eax,edx
c0012f61:	83 c2 04             	add    edx,0x4
c0012f64:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f6b:	50                   	push   eax
c0012f6c:	e8 f7 fe ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012f71:	58                   	pop    eax
c0012f72:	eb c0                	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f78:	89 c8                	mov    eax,ecx
c0012f7a:	83 c1 04             	add    ecx,0x4
c0012f7d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f81:	ff 30                	push   DWORD PTR [eax]
c0012f83:	e8 14 ff ff ff       	call   c0012e9c <Dbg::logWriteInt(unsigned int)>
c0012f88:	5f                   	pop    edi
c0012f89:	eb a9                	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f8f:	89 c8                	mov    eax,ecx
c0012f91:	83 c1 04             	add    ecx,0x4
c0012f94:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f98:	6a 10                	push   0x10
c0012f9a:	ff 30                	push   DWORD PTR [eax]
c0012f9c:	e8 18 ff ff ff       	call   c0012eb9 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fa1:	59                   	pop    ecx
c0012fa2:	5f                   	pop    edi
c0012fa3:	eb 8f                	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa9:	89 d0                	mov    eax,edx
c0012fab:	83 c2 08             	add    edx,0x8
c0012fae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fb2:	6a 10                	push   0x10
c0012fb4:	ff 30                	push   DWORD PTR [eax]
c0012fb6:	e8 fe fe ff ff       	call   c0012eb9 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fbb:	58                   	pop    eax
c0012fbc:	5a                   	pop    edx
c0012fbd:	e9 72 ff ff ff       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc2:	6a 25                	push   0x25
c0012fc4:	e8 9f fe ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012fc9:	58                   	pop    eax
c0012fca:	e9 65 ff ff ff       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcf:	6a 25                	push   0x25
c0012fd1:	e8 92 fe ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012fd6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fd9:	50                   	push   eax
c0012fda:	e8 89 fe ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012fdf:	5a                   	pop    edx
c0012fe0:	59                   	pop    ecx
c0012fe1:	e9 4e ff ff ff       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe6:	50                   	push   eax
c0012fe7:	89 eb                	mov    ebx,ebp
c0012fe9:	e8 7a fe ff ff       	call   c0012e68 <Dbg::logc(char)>
c0012fee:	89 fd                	mov    ebp,edi
c0012ff0:	58                   	pop    eax
c0012ff1:	e9 3e ff ff ff       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)+0x5c>

c0012ff6 <File::read(unsigned long long, void*, int*)>:
c0012ff6:	53                   	push   ebx
c0012ff7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ffb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013006:	3c 19                	cmp    al,0x19
c0013008:	77 35                	ja     c001303f <File::read(unsigned long long, void*, int*)+0x49>
c001300a:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0013011:	85 c0                	test   eax,eax
c0013013:	74 2a                	je     c001303f <File::read(unsigned long long, void*, int*)+0x49>
c0013015:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001301b:	85 c0                	test   eax,eax
c001301d:	74 20                	je     c001303f <File::read(unsigned long long, void*, int*)+0x49>
c001301f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013023:	74 21                	je     c0013046 <File::read(unsigned long long, void*, int*)+0x50>
c0013025:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013027:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001302b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013035:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013039:	5b                   	pop    ebx
c001303a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001303d:	ff e0                	jmp    eax
c001303f:	b8 0b 00 00 00       	mov    eax,0xb
c0013044:	eb 05                	jmp    c001304b <File::read(unsigned long long, void*, int*)+0x55>
c0013046:	b8 05 00 00 00       	mov    eax,0x5
c001304b:	5b                   	pop    ebx
c001304c:	c3                   	ret    
c001304d:	90                   	nop

c001304e <File::write(unsigned long long, void*, int*)>:
c001304e:	53                   	push   ebx
c001304f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013053:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013057:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001305e:	3c 19                	cmp    al,0x19
c0013060:	77 35                	ja     c0013097 <File::write(unsigned long long, void*, int*)+0x49>
c0013062:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0013069:	85 c0                	test   eax,eax
c001306b:	74 2a                	je     c0013097 <File::write(unsigned long long, void*, int*)+0x49>
c001306d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013073:	85 c0                	test   eax,eax
c0013075:	74 20                	je     c0013097 <File::write(unsigned long long, void*, int*)+0x49>
c0013077:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001307b:	74 21                	je     c001309e <File::write(unsigned long long, void*, int*)+0x50>
c001307d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001307f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013083:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013089:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001308d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013091:	5b                   	pop    ebx
c0013092:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013095:	ff e0                	jmp    eax
c0013097:	b8 0b 00 00 00       	mov    eax,0xb
c001309c:	eb 05                	jmp    c00130a3 <File::write(unsigned long long, void*, int*)+0x55>
c001309e:	b8 05 00 00 00       	mov    eax,0x5
c00130a3:	5b                   	pop    ebx
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <Directory::read(unsigned long long, void*, int*)>:
c00130a6:	53                   	push   ebx
c00130a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130b6:	3c 19                	cmp    al,0x19
c00130b8:	77 35                	ja     c00130ef <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ba:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c00130c1:	85 c0                	test   eax,eax
c00130c3:	74 2a                	je     c00130ef <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130cb:	85 c0                	test   eax,eax
c00130cd:	74 20                	je     c00130ef <Directory::read(unsigned long long, void*, int*)+0x49>
c00130cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d3:	74 21                	je     c00130f6 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130db:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130e9:	5b                   	pop    ebx
c00130ea:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130ed:	ff e0                	jmp    eax
c00130ef:	b8 0b 00 00 00       	mov    eax,0xb
c00130f4:	eb 05                	jmp    c00130fb <Directory::read(unsigned long long, void*, int*)+0x55>
c00130f6:	b8 05 00 00 00       	mov    eax,0x5
c00130fb:	5b                   	pop    ebx
c00130fc:	c3                   	ret    
c00130fd:	90                   	nop

c00130fe <Directory::write(unsigned long long, void*, int*)>:
c00130fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013102:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013109:	b8 0b 00 00 00       	mov    eax,0xb
c001310e:	80 fa 19             	cmp    dl,0x19
c0013111:	77 18                	ja     c001312b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013113:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c001311a:	85 d2                	test   edx,edx
c001311c:	74 0d                	je     c001312b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001311e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013125:	19 c0                	sbb    eax,eax
c0013127:	83 e0 0a             	and    eax,0xa
c001312a:	40                   	inc    eax
c001312b:	c3                   	ret    

c001312c <File::isAtty()>:
c001312c:	31 c0                	xor    eax,eax
c001312e:	c3                   	ret    
c001312f:	90                   	nop

c0013130 <Directory::isAtty()>:
c0013130:	31 c0                	xor    eax,eax
c0013132:	c3                   	ret    
c0013133:	90                   	nop

c0013134 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013134:	b8 0a 00 00 00       	mov    eax,0xa
c0013139:	c3                   	ret    

c001313a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001313a:	b8 0a 00 00 00       	mov    eax,0xa
c001313f:	c3                   	ret    

c0013140 <File::~File()>:
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c0013148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314c:	89 10                	mov    DWORD PTR [eax],edx
c001314e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	50                   	push   eax
c0013156:	e8 bf e7 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	90                   	nop
c001315f:	83 c4 0c             	add    esp,0xc
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <File::~File()>:
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	83 ec 0c             	sub    esp,0xc
c001316a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316e:	e8 cd ff ff ff       	call   c0013140 <File::~File()>
c0013173:	83 c4 10             	add    esp,0x10
c0013176:	83 ec 08             	sub    esp,0x8
c0013179:	68 14 01 00 00       	push   0x114
c001317e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013182:	e8 71 fc ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	83 c4 0c             	add    esp,0xc
c001318d:	c3                   	ret    

c001318e <Directory::~Directory()>:
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c0013196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319a:	89 10                	mov    DWORD PTR [eax],edx
c001319c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	50                   	push   eax
c00131a4:	e8 71 e7 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	90                   	nop
c00131ad:	83 c4 0c             	add    esp,0xc
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::~Directory()>:
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bc:	e8 cd ff ff ff       	call   c001318e <Directory::~Directory()>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	83 ec 08             	sub    esp,0x8
c00131c7:	68 14 01 00 00       	push   0x114
c00131cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d0:	e8 23 fc ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00131d5:	83 c4 10             	add    esp,0x10
c00131d8:	83 c4 0c             	add    esp,0xc
c00131db:	c3                   	ret    

c00131dc <Filesystem::Filesystem()>:
c00131dc:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c00131e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e5:	89 10                	mov    DWORD PTR [eax],edx
c00131e7:	8b 15 10 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e510
c00131ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f8:	a3 10 e5 02 c0       	mov    ds:0xc002e510,eax
c00131fd:	90                   	nop
c00131fe:	c3                   	ret    
c00131ff:	90                   	nop

c0013200 <Filesystem::~Filesystem()>:
c0013200:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c0013205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013209:	89 10                	mov    DWORD PTR [eax],edx
c001320b:	90                   	nop
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <Filesystem::~Filesystem()>:
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013215:	e8 e6 ff ff ff       	call   c0013200 <Filesystem::~Filesystem()>
c001321a:	83 c4 04             	add    esp,0x4
c001321d:	83 ec 08             	sub    esp,0x8
c0013220:	6a 08                	push   0x8
c0013222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013226:	e8 cd fb ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	83 c4 0c             	add    esp,0xc
c0013231:	c3                   	ret    

c0013232 <Fs::getcwd(Process*, char*, int)>:
c0013232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013236:	31 c0                	xor    eax,eax
c0013238:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001323b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001323f:	7d 15                	jge    c0013256 <Fs::getcwd(Process*, char*, int)+0x24>
c0013241:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013245:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001324c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001324f:	84 c9                	test   cl,cl
c0013251:	74 06                	je     c0013259 <Fs::getcwd(Process*, char*, int)+0x27>
c0013253:	40                   	inc    eax
c0013254:	eb e2                	jmp    c0013238 <Fs::getcwd(Process*, char*, int)+0x6>
c0013256:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013259:	31 c0                	xor    eax,eax
c001325b:	c3                   	ret    

c001325c <Fs::initVFS()>:
c001325c:	83 ec 18             	sub    esp,0x18
c001325f:	6a 08                	push   0x8
c0013261:	e8 dd c5 ff ff       	call   c000f843 <malloc>
c0013266:	89 04 24             	mov    DWORD PTR [esp],eax
c0013269:	e8 aa dc 00 00       	call   c0020f18 <FAT::FAT()>
c001326e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013275:	e8 c9 c5 ff ff       	call   c000f843 <malloc>
c001327a:	89 04 24             	mov    DWORD PTR [esp],eax
c001327d:	e8 ee ee 00 00       	call   c0022170 <ISO9660::ISO9660()>
c0013282:	83 c4 1c             	add    esp,0x1c
c0013285:	c3                   	ret    

c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013286:	55                   	push   ebp
c0013287:	57                   	push   edi
c0013288:	56                   	push   esi
c0013289:	53                   	push   ebx
c001328a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013290:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013297:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001329e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132a5:	68 00 04 00 00       	push   0x400
c00132aa:	6a 00                	push   0x0
c00132ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132b0:	56                   	push   esi
c00132b1:	e8 c2 d4 fe ff       	call   c0000778 <memset>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132bd:	75 0b                	jne    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132bf:	50                   	push   eax
c00132c0:	50                   	push   eax
c00132c1:	57                   	push   edi
c00132c2:	56                   	push   esi
c00132c3:	e8 6c d5 fe ff       	call   c0000834 <strcpy>
c00132c8:	eb 41                	jmp    c001330b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132ca:	8a 07                	mov    al,BYTE PTR [edi]
c00132cc:	3c 5c                	cmp    al,0x5c
c00132ce:	74 04                	je     c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132d0:	3c 2f                	cmp    al,0x2f
c00132d2:	75 18                	jne    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132d7:	3c 60                	cmp    al,0x60
c00132d9:	7e 03                	jle    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132db:	83 e8 20             	sub    eax,0x20
c00132de:	88 04 24             	mov    BYTE PTR [esp],al
c00132e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132e8:	50                   	push   eax
c00132e9:	50                   	push   eax
c00132ea:	eb 18                	jmp    c0013304 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132ec:	50                   	push   eax
c00132ed:	50                   	push   eax
c00132ee:	55                   	push   ebp
c00132ef:	56                   	push   esi
c00132f0:	e8 3f d5 fe ff       	call   c0000834 <strcpy>
c00132f5:	5a                   	pop    edx
c00132f6:	59                   	pop    ecx
c00132f7:	68 5c c1 02 c0       	push   0xc002c15c
c00132fc:	56                   	push   esi
c00132fd:	e8 72 d6 fe ff       	call   c0000974 <strcat>
c0013302:	5d                   	pop    ebp
c0013303:	58                   	pop    eax
c0013304:	57                   	push   edi
c0013305:	56                   	push   esi
c0013306:	e8 69 d6 fe ff       	call   c0000974 <strcat>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013311:	3c 60                	cmp    al,0x60
c0013313:	7e 03                	jle    c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013315:	83 e8 20             	sub    eax,0x20
c0013318:	88 04 24             	mov    BYTE PTR [esp],al
c001331b:	88 03                	mov    BYTE PTR [ebx],al
c001331d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013324:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001332a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001332e:	bf 03 00 00 00       	mov    edi,0x3
c0013333:	b8 03 00 00 00       	mov    eax,0x3
c0013338:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001333b:	84 d2                	test   dl,dl
c001333d:	0f 84 91 00 00 00    	je     c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013343:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013346:	80 fa 5c             	cmp    dl,0x5c
c0013349:	74 05                	je     c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001334b:	80 fa 2f             	cmp    dl,0x2f
c001334e:	75 12                	jne    c0013362 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013350:	89 c5                	mov    ebp,eax
c0013352:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013357:	74 09                	je     c0013362 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013359:	40                   	inc    eax
c001335a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001335e:	89 cf                	mov    edi,ecx
c0013360:	eb d6                	jmp    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013362:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013367:	75 5b                	jne    c00133c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013369:	80 fa 2e             	cmp    dl,0x2e
c001336c:	75 56                	jne    c00133c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001336e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013372:	74 19                	je     c001338d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013374:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013379:	74 53                	je     c00133ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001337b:	89 f9                	mov    ecx,edi
c001337d:	41                   	inc    ecx
c001337e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013381:	80 fa 2f             	cmp    dl,0x2f
c0013384:	74 f7                	je     c001337d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013386:	80 fa 5c             	cmp    dl,0x5c
c0013389:	74 f2                	je     c001337d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001338b:	eb d1                	jmp    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013392:	74 3a                	je     c00133ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013394:	83 f8 03             	cmp    eax,0x3
c0013397:	74 c5                	je     c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013399:	41                   	inc    ecx
c001339a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001339d:	80 fa 2f             	cmp    dl,0x2f
c00133a0:	74 f7                	je     c0013399 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a2:	80 fa 5c             	cmp    dl,0x5c
c00133a5:	74 f2                	je     c0013399 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133a7:	48                   	dec    eax
c00133a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133ac:	75 06                	jne    c00133b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133b2:	eb f3                	jmp    c00133a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b8:	74 07                	je     c00133c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133be:	48                   	dec    eax
c00133bf:	eb f3                	jmp    c00133b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133c1:	40                   	inc    eax
c00133c2:	eb 9a                	jmp    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c4:	80 fa 2f             	cmp    dl,0x2f
c00133c7:	74 95                	je     c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c9:	80 fa 5c             	cmp    dl,0x5c
c00133cc:	74 90                	je     c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ce:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133d1:	40                   	inc    eax
c00133d2:	eb 8a                	jmp    c001335e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	53                   	push   ebx
c00133dc:	e8 b3 d3 fe ff       	call   c0000794 <strlen>
c00133e1:	83 c4 10             	add    esp,0x10
c00133e4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133e9:	75 26                	jne    c0013411 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133eb:	83 ec 0c             	sub    esp,0xc
c00133ee:	53                   	push   ebx
c00133ef:	e8 a0 d3 fe ff       	call   c0000794 <strlen>
c00133f4:	83 c4 10             	add    esp,0x10
c00133f7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133fc:	74 26                	je     c0013424 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	53                   	push   ebx
c0013402:	e8 8d d3 fe ff       	call   c0000794 <strlen>
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001340f:	eb c7                	jmp    c00133d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013411:	83 ec 0c             	sub    esp,0xc
c0013414:	53                   	push   ebx
c0013415:	e8 7a d3 fe ff       	call   c0000794 <strlen>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013422:	74 c7                	je     c00133eb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013424:	81 c4 0c 04 00 00    	add    esp,0x40c
c001342a:	5b                   	pop    ebx
c001342b:	5e                   	pop    esi
c001342c:	5f                   	pop    edi
c001342d:	5d                   	pop    ebp
c001342e:	c3                   	ret    
c001342f:	90                   	nop

c0013430 <File::File(char const*, Process*)>:
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013437:	83 ec 08             	sub    esp,0x8
c001343a:	6a 00                	push   0x0
c001343c:	50                   	push   eax
c001343d:	e8 f6 e2 ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c0013442:	83 c4 10             	add    esp,0x10
c0013445:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c001344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344e:	89 10                	mov    DWORD PTR [eax],edx
c0013450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013454:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	83 c0 0d             	add    eax,0xd
c0013461:	83 ec 04             	sub    esp,0x4
c0013464:	52                   	push   edx
c0013465:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013469:	50                   	push   eax
c001346a:	e8 17 fe ff ff       	call   c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013476:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013479:	8d 50 bf             	lea    edx,[eax-0x41]
c001347c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013480:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001348e:	90                   	nop
c001348f:	83 c4 0c             	add    esp,0xc
c0013492:	c3                   	ret    
c0013493:	90                   	nop

c0013494 <File::open(FileOpenMode)>:
c0013494:	53                   	push   ebx
c0013495:	b8 0b 00 00 00       	mov    eax,0xb
c001349a:	83 ec 08             	sub    esp,0x8
c001349d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134a8:	80 fa 19             	cmp    dl,0x19
c00134ab:	77 40                	ja     c00134ed <File::open(FileOpenMode)+0x59>
c00134ad:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c00134b4:	85 d2                	test   edx,edx
c00134b6:	74 35                	je     c00134ed <File::open(FileOpenMode)+0x59>
c00134b8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134be:	85 d2                	test   edx,edx
c00134c0:	74 2b                	je     c00134ed <File::open(FileOpenMode)+0x59>
c00134c2:	b8 06 00 00 00       	mov    eax,0x6
c00134c7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134cb:	75 20                	jne    c00134ed <File::open(FileOpenMode)+0x59>
c00134cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00134cf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134d9:	51                   	push   ecx
c00134da:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134dd:	51                   	push   ecx
c00134de:	52                   	push   edx
c00134df:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	85 c0                	test   eax,eax
c00134e7:	75 04                	jne    c00134ed <File::open(FileOpenMode)+0x59>
c00134e9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134ed:	83 c4 08             	add    esp,0x8
c00134f0:	5b                   	pop    ebx
c00134f1:	c3                   	ret    

c00134f2 <File::close()>:
c00134f2:	53                   	push   ebx
c00134f3:	b8 0b 00 00 00       	mov    eax,0xb
c00134f8:	83 ec 08             	sub    esp,0x8
c00134fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ff:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013506:	80 fa 19             	cmp    dl,0x19
c0013509:	77 41                	ja     c001354c <File::close()+0x5a>
c001350b:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c0013512:	85 db                	test   ebx,ebx
c0013514:	74 36                	je     c001354c <File::close()+0x5a>
c0013516:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001351d:	74 2d                	je     c001354c <File::close()+0x5a>
c001351f:	b8 05 00 00 00       	mov    eax,0x5
c0013524:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013528:	74 22                	je     c001354c <File::close()+0x5a>
c001352a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001352e:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c0013535:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001353b:	53                   	push   ebx
c001353c:	53                   	push   ebx
c001353d:	8b 10                	mov    edx,DWORD PTR [eax]
c001353f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013545:	50                   	push   eax
c0013546:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	83 c4 08             	add    esp,0x8
c001354f:	5b                   	pop    ebx
c0013550:	c3                   	ret    
c0013551:	90                   	nop

c0013552 <File::seek(unsigned long long)>:
c0013552:	56                   	push   esi
c0013553:	53                   	push   ebx
c0013554:	b8 0b 00 00 00       	mov    eax,0xb
c0013559:	51                   	push   ecx
c001355a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001355e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013562:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013569:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001356d:	80 fa 19             	cmp    dl,0x19
c0013570:	77 31                	ja     c00135a3 <File::seek(unsigned long long)+0x51>
c0013572:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013579:	85 d2                	test   edx,edx
c001357b:	74 26                	je     c00135a3 <File::seek(unsigned long long)+0x51>
c001357d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013583:	85 d2                	test   edx,edx
c0013585:	74 1c                	je     c00135a3 <File::seek(unsigned long long)+0x51>
c0013587:	b8 05 00 00 00       	mov    eax,0x5
c001358c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013590:	74 11                	je     c00135a3 <File::seek(unsigned long long)+0x51>
c0013592:	8b 02                	mov    eax,DWORD PTR [edx]
c0013594:	53                   	push   ebx
c0013595:	51                   	push   ecx
c0013596:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001359c:	52                   	push   edx
c001359d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	5a                   	pop    edx
c00135a4:	5b                   	pop    ebx
c00135a5:	5e                   	pop    esi
c00135a6:	c3                   	ret    
c00135a7:	90                   	nop

c00135a8 <File::tell(unsigned long long*)>:
c00135a8:	83 ec 0c             	sub    esp,0xc
c00135ab:	b8 0b 00 00 00       	mov    eax,0xb
c00135b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135b4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135bb:	80 fa 19             	cmp    dl,0x19
c00135be:	77 34                	ja     c00135f4 <File::tell(unsigned long long*)+0x4c>
c00135c0:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c00135c7:	85 d2                	test   edx,edx
c00135c9:	74 29                	je     c00135f4 <File::tell(unsigned long long*)+0x4c>
c00135cb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d1:	85 d2                	test   edx,edx
c00135d3:	74 1f                	je     c00135f4 <File::tell(unsigned long long*)+0x4c>
c00135d5:	b8 05 00 00 00       	mov    eax,0x5
c00135da:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135de:	74 14                	je     c00135f4 <File::tell(unsigned long long*)+0x4c>
c00135e0:	50                   	push   eax
c00135e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135ed:	52                   	push   edx
c00135ee:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135f1:	83 c4 10             	add    esp,0x10
c00135f4:	83 c4 0c             	add    esp,0xc
c00135f7:	c3                   	ret    

c00135f8 <File::rewind()>:
c00135f8:	83 ec 10             	sub    esp,0x10
c00135fb:	6a 00                	push   0x0
c00135fd:	6a 00                	push   0x0
c00135ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013603:	e8 4a ff ff ff       	call   c0013552 <File::seek(unsigned long long)>
c0013608:	83 c4 1c             	add    esp,0x1c
c001360b:	c3                   	ret    

c001360c <File::unlink()>:
c001360c:	83 ec 0c             	sub    esp,0xc
c001360f:	b8 0b 00 00 00       	mov    eax,0xb
c0013614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013618:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001361f:	80 f9 19             	cmp    cl,0x19
c0013622:	77 2f                	ja     c0013653 <File::unlink()+0x47>
c0013624:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001362b:	85 c9                	test   ecx,ecx
c001362d:	74 24                	je     c0013653 <File::unlink()+0x47>
c001362f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013635:	85 c9                	test   ecx,ecx
c0013637:	74 1a                	je     c0013653 <File::unlink()+0x47>
c0013639:	b8 06 00 00 00       	mov    eax,0x6
c001363e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013642:	75 0f                	jne    c0013653 <File::unlink()+0x47>
c0013644:	83 c2 0d             	add    edx,0xd
c0013647:	50                   	push   eax
c0013648:	50                   	push   eax
c0013649:	8b 01                	mov    eax,DWORD PTR [ecx]
c001364b:	52                   	push   edx
c001364c:	51                   	push   ecx
c001364d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	83 c4 0c             	add    esp,0xc
c0013656:	c3                   	ret    
c0013657:	90                   	nop

c0013658 <File::rename(char const*)>:
c0013658:	83 ec 0c             	sub    esp,0xc
c001365b:	b8 0b 00 00 00       	mov    eax,0xb
c0013660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013664:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366b:	80 f9 19             	cmp    cl,0x19
c001366e:	77 32                	ja     c00136a2 <File::rename(char const*)+0x4a>
c0013670:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013677:	85 c9                	test   ecx,ecx
c0013679:	74 27                	je     c00136a2 <File::rename(char const*)+0x4a>
c001367b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013681:	85 c9                	test   ecx,ecx
c0013683:	74 1d                	je     c00136a2 <File::rename(char const*)+0x4a>
c0013685:	b8 06 00 00 00       	mov    eax,0x6
c001368a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001368e:	75 12                	jne    c00136a2 <File::rename(char const*)+0x4a>
c0013690:	83 c2 0d             	add    edx,0xd
c0013693:	50                   	push   eax
c0013694:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013696:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001369a:	52                   	push   edx
c001369b:	51                   	push   ecx
c001369c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001369f:	83 c4 10             	add    esp,0x10
c00136a2:	83 c4 0c             	add    esp,0xc
c00136a5:	c3                   	ret    

c00136a6 <File::chfatattr(unsigned char, unsigned char)>:
c00136a6:	57                   	push   edi
c00136a7:	b8 0b 00 00 00       	mov    eax,0xb
c00136ac:	56                   	push   esi
c00136ad:	53                   	push   ebx
c00136ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136c1:	80 f9 19             	cmp    cl,0x19
c00136c4:	77 37                	ja     c00136fd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c6:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c00136cd:	85 c9                	test   ecx,ecx
c00136cf:	74 2c                	je     c00136fd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d7:	85 c9                	test   ecx,ecx
c00136d9:	74 22                	je     c00136fd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136db:	b8 06 00 00 00       	mov    eax,0x6
c00136e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e4:	75 17                	jne    c00136fd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136e8:	89 f0                	mov    eax,esi
c00136ea:	83 c2 0d             	add    edx,0xd
c00136ed:	0f b6 f0             	movzx  esi,al
c00136f0:	0f b6 db             	movzx  ebx,bl
c00136f3:	56                   	push   esi
c00136f4:	53                   	push   ebx
c00136f5:	52                   	push   edx
c00136f6:	51                   	push   ecx
c00136f7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	5b                   	pop    ebx
c00136fe:	5e                   	pop    esi
c00136ff:	5f                   	pop    edi
c0013700:	c3                   	ret    
c0013701:	90                   	nop

c0013702 <File::exists()>:
c0013702:	83 ec 0c             	sub    esp,0xc
c0013705:	31 c0                	xor    eax,eax
c0013707:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013712:	80 f9 19             	cmp    cl,0x19
c0013715:	77 24                	ja     c001373b <File::exists()+0x39>
c0013717:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001371e:	85 c9                	test   ecx,ecx
c0013720:	74 19                	je     c001373b <File::exists()+0x39>
c0013722:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013728:	85 c9                	test   ecx,ecx
c001372a:	74 0f                	je     c001373b <File::exists()+0x39>
c001372c:	83 c2 0d             	add    edx,0xd
c001372f:	50                   	push   eax
c0013730:	50                   	push   eax
c0013731:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013733:	52                   	push   edx
c0013734:	51                   	push   ecx
c0013735:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	83 c4 0c             	add    esp,0xc
c001373e:	c3                   	ret    
c001373f:	90                   	nop

c0013740 <File::stat(unsigned long long*, bool*)>:
c0013740:	56                   	push   esi
c0013741:	53                   	push   ebx
c0013742:	50                   	push   eax
c0013743:	b8 0b 00 00 00       	mov    eax,0xb
c0013748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013750:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001375b:	80 f9 19             	cmp    cl,0x19
c001375e:	77 3d                	ja     c001379d <File::stat(unsigned long long*, bool*)+0x5d>
c0013760:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013767:	85 c9                	test   ecx,ecx
c0013769:	74 32                	je     c001379d <File::stat(unsigned long long*, bool*)+0x5d>
c001376b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013771:	85 c9                	test   ecx,ecx
c0013773:	74 28                	je     c001379d <File::stat(unsigned long long*, bool*)+0x5d>
c0013775:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013777:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001377b:	74 13                	je     c0013790 <File::stat(unsigned long long*, bool*)+0x50>
c001377d:	83 ec 04             	sub    esp,0x4
c0013780:	56                   	push   esi
c0013781:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013787:	51                   	push   ecx
c0013788:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001378b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001378e:	eb 0a                	jmp    c001379a <File::stat(unsigned long long*, bool*)+0x5a>
c0013790:	53                   	push   ebx
c0013791:	83 c2 0d             	add    edx,0xd
c0013794:	56                   	push   esi
c0013795:	52                   	push   edx
c0013796:	51                   	push   ecx
c0013797:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001379a:	83 c4 10             	add    esp,0x10
c001379d:	5a                   	pop    edx
c001379e:	5b                   	pop    ebx
c001379f:	5e                   	pop    esi
c00137a0:	c3                   	ret    

c00137a1 <Fs::setcwd(Process*, char*)>:
c00137a1:	55                   	push   ebp
c00137a2:	57                   	push   edi
c00137a3:	56                   	push   esi
c00137a4:	53                   	push   ebx
c00137a5:	81 ec 20 02 00 00    	sub    esp,0x220
c00137ab:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137b2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137b8:	57                   	push   edi
c00137b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137c0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137c4:	56                   	push   esi
c00137c5:	e8 bc fa ff ff       	call   c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00137cd:	e8 c2 cf fe ff       	call   c0000794 <strlen>
c00137d2:	83 c4 10             	add    esp,0x10
c00137d5:	83 f8 02             	cmp    eax,0x2
c00137d8:	77 17                	ja     c00137f1 <Fs::setcwd(Process*, char*)+0x50>
c00137da:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137df:	83 e8 41             	sub    eax,0x41
c00137e2:	83 f8 19             	cmp    eax,0x19
c00137e5:	76 24                	jbe    c001380b <Fs::setcwd(Process*, char*)+0x6a>
c00137e7:	b8 03 00 00 00       	mov    eax,0x3
c00137ec:	e9 e0 00 00 00       	jmp    c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	56                   	push   esi
c00137f5:	e8 9a cf fe ff       	call   c0000794 <strlen>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	83 f8 03             	cmp    eax,0x3
c0013800:	75 34                	jne    c0013836 <Fs::setcwd(Process*, char*)+0x95>
c0013802:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013807:	75 2d                	jne    c0013836 <Fs::setcwd(Process*, char*)+0x95>
c0013809:	eb cf                	jmp    c00137da <Fs::setcwd(Process*, char*)+0x39>
c001380b:	8b 14 85 a0 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1660]
c0013812:	b8 05 00 00 00       	mov    eax,0x5
c0013817:	85 d2                	test   edx,edx
c0013819:	0f 84 b2 00 00 00    	je     c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c001381f:	b8 06 00 00 00       	mov    eax,0x6
c0013824:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001382b:	0f 85 92 00 00 00    	jne    c00138c3 <Fs::setcwd(Process*, char*)+0x122>
c0013831:	e9 9b 00 00 00       	jmp    c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c0013836:	83 ec 0c             	sub    esp,0xc
c0013839:	68 14 01 00 00       	push   0x114
c001383e:	e8 00 c0 ff ff       	call   c000f843 <malloc>
c0013843:	83 c4 0c             	add    esp,0xc
c0013846:	89 c3                	mov    ebx,eax
c0013848:	55                   	push   ebp
c0013849:	56                   	push   esi
c001384a:	50                   	push   eax
c001384b:	e8 e0 fb ff ff       	call   c0013430 <File::File(char const*, Process*)>
c0013850:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013855:	83 c4 0c             	add    esp,0xc
c0013858:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001385c:	50                   	push   eax
c001385d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013861:	50                   	push   eax
c0013862:	53                   	push   ebx
c0013863:	e8 d8 fe ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	83 f8 02             	cmp    eax,0x2
c001386e:	74 04                	je     c0013874 <Fs::setcwd(Process*, char*)+0xd3>
c0013870:	85 c0                	test   eax,eax
c0013872:	74 1c                	je     c0013890 <Fs::setcwd(Process*, char*)+0xef>
c0013874:	b8 01 00 00 00       	mov    eax,0x1
c0013879:	85 db                	test   ebx,ebx
c001387b:	74 54                	je     c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c001387d:	83 ec 0c             	sub    esp,0xc
c0013880:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013882:	53                   	push   ebx
c0013883:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	b8 01 00 00 00       	mov    eax,0x1
c001388e:	eb 41                	jmp    c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c0013890:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013895:	75 1c                	jne    c00138b3 <Fs::setcwd(Process*, char*)+0x112>
c0013897:	b8 02 00 00 00       	mov    eax,0x2
c001389c:	85 db                	test   ebx,ebx
c001389e:	74 31                	je     c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a5:	53                   	push   ebx
c00138a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	b8 02 00 00 00       	mov    eax,0x2
c00138b1:	eb 1e                	jmp    c00138d1 <Fs::setcwd(Process*, char*)+0x130>
c00138b3:	85 db                	test   ebx,ebx
c00138b5:	74 0c                	je     c00138c3 <Fs::setcwd(Process*, char*)+0x122>
c00138b7:	83 ec 0c             	sub    esp,0xc
c00138ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138bc:	53                   	push   ebx
c00138bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c0:	83 c4 10             	add    esp,0x10
c00138c3:	50                   	push   eax
c00138c4:	50                   	push   eax
c00138c5:	56                   	push   esi
c00138c6:	57                   	push   edi
c00138c7:	e8 68 cf fe ff       	call   c0000834 <strcpy>
c00138cc:	83 c4 10             	add    esp,0x10
c00138cf:	31 c0                	xor    eax,eax
c00138d1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138d7:	5b                   	pop    ebx
c00138d8:	5e                   	pop    esi
c00138d9:	5f                   	pop    edi
c00138da:	5d                   	pop    ebp
c00138db:	c3                   	ret    

c00138dc <Directory::Directory(char const*, Process*)>:
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e3:	83 ec 08             	sub    esp,0x8
c00138e6:	6a 00                	push   0x0
c00138e8:	50                   	push   eax
c00138e9:	e8 4a de ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	89 10                	mov    DWORD PTR [eax],edx
c00138fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013900:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	83 c0 0d             	add    eax,0xd
c001390d:	83 ec 04             	sub    esp,0x4
c0013910:	52                   	push   edx
c0013911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013915:	50                   	push   eax
c0013916:	e8 6b f9 ff ff       	call   c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013922:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013925:	8d 50 bf             	lea    edx,[eax-0x41]
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013936:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001393a:	90                   	nop
c001393b:	83 c4 0c             	add    esp,0xc
c001393e:	c3                   	ret    
c001393f:	90                   	nop

c0013940 <Directory::open()>:
c0013940:	53                   	push   ebx
c0013941:	b8 0b 00 00 00       	mov    eax,0xb
c0013946:	83 ec 08             	sub    esp,0x8
c0013949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001394d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013954:	80 fa 19             	cmp    dl,0x19
c0013957:	77 3d                	ja     c0013996 <Directory::open()+0x56>
c0013959:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013960:	85 d2                	test   edx,edx
c0013962:	74 32                	je     c0013996 <Directory::open()+0x56>
c0013964:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001396a:	85 d2                	test   edx,edx
c001396c:	74 28                	je     c0013996 <Directory::open()+0x56>
c001396e:	b8 06 00 00 00       	mov    eax,0x6
c0013973:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013977:	75 1d                	jne    c0013996 <Directory::open()+0x56>
c0013979:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001397f:	50                   	push   eax
c0013980:	8b 02                	mov    eax,DWORD PTR [edx]
c0013982:	51                   	push   ecx
c0013983:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013986:	51                   	push   ecx
c0013987:	52                   	push   edx
c0013988:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	85 c0                	test   eax,eax
c0013990:	75 04                	jne    c0013996 <Directory::open()+0x56>
c0013992:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013996:	83 c4 08             	add    esp,0x8
c0013999:	5b                   	pop    ebx
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <Directory::close()>:
c001399c:	53                   	push   ebx
c001399d:	b8 0b 00 00 00       	mov    eax,0xb
c00139a2:	83 ec 08             	sub    esp,0x8
c00139a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139a9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139b0:	80 fa 19             	cmp    dl,0x19
c00139b3:	77 41                	ja     c00139f6 <Directory::close()+0x5a>
c00139b5:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c00139bc:	85 db                	test   ebx,ebx
c00139be:	74 36                	je     c00139f6 <Directory::close()+0x5a>
c00139c0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139c7:	74 2d                	je     c00139f6 <Directory::close()+0x5a>
c00139c9:	b8 05 00 00 00       	mov    eax,0x5
c00139ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139d2:	74 22                	je     c00139f6 <Directory::close()+0x5a>
c00139d4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139d8:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c00139df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139e5:	53                   	push   ebx
c00139e6:	53                   	push   ebx
c00139e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00139e9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139ef:	50                   	push   eax
c00139f0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	83 c4 08             	add    esp,0x8
c00139f9:	5b                   	pop    ebx
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <Directory::unlink()>:
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013a04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a0f:	80 f9 19             	cmp    cl,0x19
c0013a12:	77 2f                	ja     c0013a43 <Directory::unlink()+0x47>
c0013a14:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a1b:	85 c9                	test   ecx,ecx
c0013a1d:	74 24                	je     c0013a43 <Directory::unlink()+0x47>
c0013a1f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a25:	85 c9                	test   ecx,ecx
c0013a27:	74 1a                	je     c0013a43 <Directory::unlink()+0x47>
c0013a29:	b8 06 00 00 00       	mov    eax,0x6
c0013a2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a32:	75 0f                	jne    c0013a43 <Directory::unlink()+0x47>
c0013a34:	83 c2 0d             	add    edx,0xd
c0013a37:	50                   	push   eax
c0013a38:	50                   	push   eax
c0013a39:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a3b:	52                   	push   edx
c0013a3c:	51                   	push   ecx
c0013a3d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a40:	83 c4 10             	add    esp,0x10
c0013a43:	83 c4 0c             	add    esp,0xc
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Directory::rename(char const*)>:
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a54:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a5b:	80 f9 19             	cmp    cl,0x19
c0013a5e:	77 32                	ja     c0013a92 <Directory::rename(char const*)+0x4a>
c0013a60:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a67:	85 c9                	test   ecx,ecx
c0013a69:	74 27                	je     c0013a92 <Directory::rename(char const*)+0x4a>
c0013a6b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a71:	85 c9                	test   ecx,ecx
c0013a73:	74 1d                	je     c0013a92 <Directory::rename(char const*)+0x4a>
c0013a75:	b8 06 00 00 00       	mov    eax,0x6
c0013a7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a7e:	75 12                	jne    c0013a92 <Directory::rename(char const*)+0x4a>
c0013a80:	83 c2 0d             	add    edx,0xd
c0013a83:	50                   	push   eax
c0013a84:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a8a:	52                   	push   edx
c0013a8b:	51                   	push   ecx
c0013a8c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	83 c4 0c             	add    esp,0xc
c0013a95:	c3                   	ret    

c0013a96 <Directory::exists()>:
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	31 c0                	xor    eax,eax
c0013a9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa6:	80 f9 19             	cmp    cl,0x19
c0013aa9:	77 24                	ja     c0013acf <Directory::exists()+0x39>
c0013aab:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013ab2:	85 c9                	test   ecx,ecx
c0013ab4:	74 19                	je     c0013acf <Directory::exists()+0x39>
c0013ab6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abc:	85 c9                	test   ecx,ecx
c0013abe:	74 0f                	je     c0013acf <Directory::exists()+0x39>
c0013ac0:	83 c2 0d             	add    edx,0xd
c0013ac3:	50                   	push   eax
c0013ac4:	50                   	push   eax
c0013ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ac7:	52                   	push   edx
c0013ac8:	51                   	push   ecx
c0013ac9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013acc:	83 c4 10             	add    esp,0x10
c0013acf:	83 c4 0c             	add    esp,0xc
c0013ad2:	c3                   	ret    
c0013ad3:	90                   	nop

c0013ad4 <Directory::read(dirent*)>:
c0013ad4:	83 ec 1c             	sub    esp,0x1c
c0013ad7:	b8 0b 00 00 00       	mov    eax,0xb
c0013adc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ae0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ae7:	80 fa 19             	cmp    dl,0x19
c0013aea:	77 30                	ja     c0013b1c <Directory::read(dirent*)+0x48>
c0013aec:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013af3:	85 d2                	test   edx,edx
c0013af5:	74 25                	je     c0013b1c <Directory::read(dirent*)+0x48>
c0013af7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013afe:	74 1c                	je     c0013b1c <Directory::read(dirent*)+0x48>
c0013b00:	83 ec 0c             	sub    esp,0xc
c0013b03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b05:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b09:	52                   	push   edx
c0013b0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b0e:	6a 00                	push   0x0
c0013b10:	68 10 01 00 00       	push   0x110
c0013b15:	51                   	push   ecx
c0013b16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b19:	83 c4 20             	add    esp,0x20
c0013b1c:	83 c4 1c             	add    esp,0x1c
c0013b1f:	c3                   	ret    

c0013b20 <Directory::create()>:
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	b8 0b 00 00 00       	mov    eax,0xb
c0013b28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b2c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b33:	80 f9 19             	cmp    cl,0x19
c0013b36:	77 2f                	ja     c0013b67 <Directory::create()+0x47>
c0013b38:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013b3f:	85 c9                	test   ecx,ecx
c0013b41:	74 24                	je     c0013b67 <Directory::create()+0x47>
c0013b43:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b49:	85 c9                	test   ecx,ecx
c0013b4b:	74 1a                	je     c0013b67 <Directory::create()+0x47>
c0013b4d:	b8 06 00 00 00       	mov    eax,0x6
c0013b52:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b56:	75 0f                	jne    c0013b67 <Directory::create()+0x47>
c0013b58:	83 c2 0d             	add    edx,0xd
c0013b5b:	50                   	push   eax
c0013b5c:	50                   	push   eax
c0013b5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b5f:	52                   	push   edx
c0013b60:	51                   	push   ecx
c0013b61:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b64:	83 c4 10             	add    esp,0x10
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b6c:	b8 0a 00 00 00       	mov    eax,0xa
c0013b71:	c3                   	ret    

c0013b72 <Bus::Bus(char const*)>:
c0013b72:	83 ec 0c             	sub    esp,0xc
c0013b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b79:	83 ec 08             	sub    esp,0x8
c0013b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b80:	50                   	push   eax
c0013b81:	e8 68 09 00 00       	call   c00144ee <Device::Device(char const*)>
c0013b86:	83 c4 10             	add    esp,0x10
c0013b89:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0013b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b92:	89 10                	mov    DWORD PTR [eax],edx
c0013b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b98:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013ba2:	90                   	nop
c0013ba3:	83 c4 0c             	add    esp,0xc
c0013ba6:	c3                   	ret    
c0013ba7:	90                   	nop

c0013ba8 <Bus::~Bus()>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0013bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb4:	89 10                	mov    DWORD PTR [eax],edx
c0013bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	50                   	push   eax
c0013bbe:	e8 0d 06 00 00       	call   c00141d0 <Device::~Device()>
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	90                   	nop
c0013bc7:	83 c4 0c             	add    esp,0xc
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <Bus::~Bus()>:
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	83 ec 0c             	sub    esp,0xc
c0013bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd6:	e8 cd ff ff ff       	call   c0013ba8 <Bus::~Bus()>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	83 ec 08             	sub    esp,0x8
c0013be1:	68 58 01 00 00       	push   0x158
c0013be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bea:	e8 09 f2 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0013bef:	83 c4 10             	add    esp,0x10
c0013bf2:	83 c4 0c             	add    esp,0xc
c0013bf5:	c3                   	ret    

c0013bf6 <Buzzer::Buzzer(char const*)>:
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfd:	83 ec 08             	sub    esp,0x8
c0013c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c04:	50                   	push   eax
c0013c05:	e8 e4 08 00 00       	call   c00144ee <Device::Device(char const*)>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c16:	89 10                	mov    DWORD PTR [eax],edx
c0013c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c34:	90                   	nop
c0013c35:	83 c4 0c             	add    esp,0xc
c0013c38:	c3                   	ret    
c0013c39:	90                   	nop

c0013c3a <Buzzer::~Buzzer()>:
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c46:	89 10                	mov    DWORD PTR [eax],edx
c0013c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	50                   	push   eax
c0013c50:	e8 7b 05 00 00       	call   c00141d0 <Device::~Device()>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	90                   	nop
c0013c59:	83 c4 0c             	add    esp,0xc
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <Buzzer::~Buzzer()>:
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	83 ec 0c             	sub    esp,0xc
c0013c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c68:	e8 cd ff ff ff       	call   c0013c3a <Buzzer::~Buzzer()>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	83 ec 08             	sub    esp,0x8
c0013c73:	68 5c 01 00 00       	push   0x15c
c0013c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c7c:	e8 77 f1 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	83 c4 0c             	add    esp,0xc
c0013c87:	c3                   	ret    

c0013c88 <Buzzer::stop()>:
c0013c88:	83 ec 14             	sub    esp,0x14
c0013c8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c91:	6a 00                	push   0x0
c0013c93:	50                   	push   eax
c0013c94:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c97:	83 c4 1c             	add    esp,0x1c
c0013c9a:	c3                   	ret    

c0013c9b <beepThread(void*)>:
c0013c9b:	53                   	push   ebx
c0013c9c:	83 ec 08             	sub    esp,0x8
c0013c9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ca3:	e8 d1 a0 00 00       	call   c001dd79 <unlockScheduler()>
c0013ca8:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cad:	52                   	push   edx
c0013cae:	52                   	push   edx
c0013caf:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cb5:	52                   	push   edx
c0013cb6:	50                   	push   eax
c0013cb7:	e8 0a a6 00 00       	call   c001e2c6 <nanoSleep(unsigned long long)>
c0013cbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cbf:	e8 c4 ff ff ff       	call   c0013c88 <Buzzer::stop()>
c0013cc4:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013ccc:	83 c4 18             	add    esp,0x18
c0013ccf:	5b                   	pop    ebx
c0013cd0:	e9 37 a5 00 00       	jmp    c001e20c <blockTask(TaskState)>
c0013cd5:	90                   	nop

c0013cd6 <Buzzer::beep(int, int, bool)>:
c0013cd6:	57                   	push   edi
c0013cd7:	56                   	push   esi
c0013cd8:	53                   	push   ebx
c0013cd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cdd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce5:	52                   	push   edx
c0013ce6:	52                   	push   edx
c0013ce7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ced:	56                   	push   esi
c0013cee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	89 f8                	mov    eax,edi
c0013cf6:	84 c0                	test   al,al
c0013cf8:	74 1f                	je     c0013d19 <Buzzer::beep(int, int, bool)+0x43>
c0013cfa:	50                   	push   eax
c0013cfb:	50                   	push   eax
c0013cfc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d02:	99                   	cdq    
c0013d03:	52                   	push   edx
c0013d04:	50                   	push   eax
c0013d05:	e8 bc a5 00 00       	call   c001e2c6 <nanoSleep(unsigned long long)>
c0013d0a:	83 c4 10             	add    esp,0x10
c0013d0d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d11:	5b                   	pop    ebx
c0013d12:	5e                   	pop    esi
c0013d13:	5f                   	pop    edi
c0013d14:	e9 6f ff ff ff       	jmp    c0013c88 <Buzzer::stop()>
c0013d19:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d1f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0013d24:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d2c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d30:	c7 44 24 14 9b 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c9b
c0013d38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d3c:	5b                   	pop    ebx
c0013d3d:	5e                   	pop    esi
c0013d3e:	5f                   	pop    edi
c0013d3f:	e9 64 a1 00 00       	jmp    c001dea8 <Process::createThread(void (*)(void*), void*, int)>

c0013d44 <User::loadClockSettings(int)>:
c0013d44:	53                   	push   ebx
c0013d45:	83 ec 14             	sub    esp,0x14
c0013d48:	68 14 01 00 00       	push   0x114
c0013d4d:	e8 f1 ba ff ff       	call   c000f843 <malloc>
c0013d52:	83 c4 0c             	add    esp,0xc
c0013d55:	89 c3                	mov    ebx,eax
c0013d57:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0013d5d:	68 0c ab 02 c0       	push   0xc002ab0c
c0013d62:	50                   	push   eax
c0013d63:	e8 c8 f6 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c0013d68:	58                   	pop    eax
c0013d69:	5a                   	pop    edx
c0013d6a:	6a 01                	push   0x1
c0013d6c:	53                   	push   ebx
c0013d6d:	e8 22 f7 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c0013d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d75:	e8 78 f7 ff ff       	call   c00134f2 <File::close()>
c0013d7a:	83 c4 10             	add    esp,0x10
c0013d7d:	85 db                	test   ebx,ebx
c0013d7f:	74 0f                	je     c0013d90 <User::loadClockSettings(int)+0x4c>
c0013d81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d8a:	83 c4 08             	add    esp,0x8
c0013d8d:	5b                   	pop    ebx
c0013d8e:	ff e0                	jmp    eax
c0013d90:	83 c4 08             	add    esp,0x8
c0013d93:	5b                   	pop    ebx
c0013d94:	c3                   	ret    
c0013d95:	90                   	nop

c0013d96 <Clock::Clock(char const*)>:
c0013d96:	83 ec 0c             	sub    esp,0xc
c0013d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9d:	83 ec 08             	sub    esp,0x8
c0013da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da4:	50                   	push   eax
c0013da5:	e8 44 07 00 00       	call   c00144ee <Device::Device(char const*)>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db6:	89 10                	mov    DWORD PTR [eax],edx
c0013db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dc6:	90                   	nop
c0013dc7:	83 c4 0c             	add    esp,0xc
c0013dca:	c3                   	ret    
c0013dcb:	90                   	nop

c0013dcc <Clock::~Clock()>:
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd8:	89 10                	mov    DWORD PTR [eax],edx
c0013dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dde:	83 ec 0c             	sub    esp,0xc
c0013de1:	50                   	push   eax
c0013de2:	e8 e9 03 00 00       	call   c00141d0 <Device::~Device()>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	90                   	nop
c0013deb:	83 c4 0c             	add    esp,0xc
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <Clock::~Clock()>:
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	83 ec 0c             	sub    esp,0xc
c0013df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfa:	e8 cd ff ff ff       	call   c0013dcc <Clock::~Clock()>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	83 ec 08             	sub    esp,0x8
c0013e05:	68 58 01 00 00       	push   0x158
c0013e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0e:	e8 e5 ef ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0013e13:	83 c4 10             	add    esp,0x10
c0013e16:	83 c4 0c             	add    esp,0xc
c0013e19:	c3                   	ret    

c0013e1a <Clock::timeInSecondsLocal()>:
c0013e1a:	53                   	push   ebx
c0013e1b:	83 ec 14             	sub    esp,0x14
c0013e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e24:	50                   	push   eax
c0013e25:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e28:	0f b6 0d 18 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e518
c0013e2f:	03 0d 1c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e51c
c0013e35:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e3b:	89 cb                	mov    ebx,ecx
c0013e3d:	c1 fb 1f             	sar    ebx,0x1f
c0013e40:	01 c8                	add    eax,ecx
c0013e42:	11 da                	adc    edx,ebx
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	31 c9                	xor    ecx,ecx
c0013e49:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0013e50:	74 05                	je     c0013e57 <Clock::timeInSecondsLocal()+0x3d>
c0013e52:	b9 08 07 00 00       	mov    ecx,0x708
c0013e57:	31 db                	xor    ebx,ebx
c0013e59:	01 c8                	add    eax,ecx
c0013e5b:	11 da                	adc    edx,ebx
c0013e5d:	83 c4 08             	add    esp,0x8
c0013e60:	5b                   	pop    ebx
c0013e61:	c3                   	ret    

c0013e62 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e62:	57                   	push   edi
c0013e63:	56                   	push   esi
c0013e64:	53                   	push   ebx
c0013e65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e73:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e76:	0f b6 05 18 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e518
c0013e7d:	03 05 1c e5 02 c0    	add    eax,DWORD PTR ds:0xc002e51c
c0013e83:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e89:	99                   	cdq    
c0013e8a:	29 c6                	sub    esi,eax
c0013e8c:	19 d7                	sbb    edi,edx
c0013e8e:	89 f0                	mov    eax,esi
c0013e90:	89 fa                	mov    edx,edi
c0013e92:	31 f6                	xor    esi,esi
c0013e94:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0013e9b:	74 05                	je     c0013ea2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e9d:	be 08 07 00 00       	mov    esi,0x708
c0013ea2:	31 ff                	xor    edi,edi
c0013ea4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ea8:	29 f0                	sub    eax,esi
c0013eaa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eae:	19 fa                	sbb    edx,edi
c0013eb0:	89 d8                	mov    eax,ebx
c0013eb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eb6:	5b                   	pop    ebx
c0013eb7:	5e                   	pop    esi
c0013eb8:	5f                   	pop    edi
c0013eb9:	ff e0                	jmp    eax

c0013ebb <datetimeToSeconds(datetime_t)>:
c0013ebb:	55                   	push   ebp
c0013ebc:	57                   	push   edi
c0013ebd:	56                   	push   esi
c0013ebe:	53                   	push   ebx
c0013ebf:	83 ec 14             	sub    esp,0x14
c0013ec2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ec6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013eca:	89 d3                	mov    ebx,edx
c0013ecc:	0f b6 c6             	movzx  eax,dh
c0013ecf:	c1 eb 10             	shr    ebx,0x10
c0013ed2:	48                   	dec    eax
c0013ed3:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ed8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013edc:	0f b6 f5             	movzx  esi,ch
c0013edf:	89 cf                	mov    edi,ecx
c0013ee1:	6b f6 3c             	imul   esi,esi,0x3c
c0013ee4:	c1 ef 10             	shr    edi,0x10
c0013ee7:	0f b6 c9             	movzx  ecx,cl
c0013eea:	89 f8                	mov    eax,edi
c0013eec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ef2:	0f b6 f8             	movzx  edi,al
c0013ef5:	0f b6 d2             	movzx  edx,dl
c0013ef8:	01 fe                	add    esi,edi
c0013efa:	01 f1                	add    ecx,esi
c0013efc:	0f b7 f3             	movzx  esi,bx
c0013eff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f03:	c1 f9 1f             	sar    ecx,0x1f
c0013f06:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f0f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f14:	8b 0c 8d 80 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5480]
c0013f1b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f1f:	76 29                	jbe    c0013f4a <datetimeToSeconds(datetime_t)+0x8f>
c0013f21:	f6 c3 03             	test   bl,0x3
c0013f24:	75 24                	jne    c0013f4a <datetimeToSeconds(datetime_t)+0x8f>
c0013f26:	31 d2                	xor    edx,edx
c0013f28:	bf 64 00 00 00       	mov    edi,0x64
c0013f2d:	89 d8                	mov    eax,ebx
c0013f2f:	66 f7 f7             	div    di
c0013f32:	66 85 d2             	test   dx,dx
c0013f35:	75 12                	jne    c0013f49 <datetimeToSeconds(datetime_t)+0x8e>
c0013f37:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f3d:	bf 90 01 00 00       	mov    edi,0x190
c0013f42:	99                   	cdq    
c0013f43:	f7 ff                	idiv   edi
c0013f45:	85 d2                	test   edx,edx
c0013f47:	75 01                	jne    c0013f4a <datetimeToSeconds(datetime_t)+0x8f>
c0013f49:	41                   	inc    ecx
c0013f4a:	66 83 fb 46          	cmp    bx,0x46
c0013f4e:	76 45                	jbe    c0013f95 <datetimeToSeconds(datetime_t)+0xda>
c0013f50:	bb 46 00 00 00       	mov    ebx,0x46
c0013f55:	bf 64 00 00 00       	mov    edi,0x64
c0013f5a:	bd 90 01 00 00       	mov    ebp,0x190
c0013f5f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f64:	f6 c3 03             	test   bl,0x3
c0013f67:	75 23                	jne    c0013f8c <datetimeToSeconds(datetime_t)+0xd1>
c0013f69:	89 d8                	mov    eax,ebx
c0013f6b:	99                   	cdq    
c0013f6c:	f7 ff                	idiv   edi
c0013f6e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f73:	85 d2                	test   edx,edx
c0013f75:	75 15                	jne    c0013f8c <datetimeToSeconds(datetime_t)+0xd1>
c0013f77:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f7d:	99                   	cdq    
c0013f7e:	f7 fd                	idiv   ebp
c0013f80:	83 fa 01             	cmp    edx,0x1
c0013f83:	19 c0                	sbb    eax,eax
c0013f85:	f7 d0                	not    eax
c0013f87:	05 6e 01 00 00       	add    eax,0x16e
c0013f8c:	01 c1                	add    ecx,eax
c0013f8e:	43                   	inc    ebx
c0013f8f:	39 f3                	cmp    ebx,esi
c0013f91:	7c cc                	jl     c0013f5f <datetimeToSeconds(datetime_t)+0xa4>
c0013f93:	eb 35                	jmp    c0013fca <datetimeToSeconds(datetime_t)+0x10f>
c0013f95:	74 33                	je     c0013fca <datetimeToSeconds(datetime_t)+0x10f>
c0013f97:	b8 45 00 00 00       	mov    eax,0x45
c0013f9c:	89 c2                	mov    edx,eax
c0013f9e:	83 e2 03             	and    edx,0x3
c0013fa1:	39 f0                	cmp    eax,esi
c0013fa3:	7e 0f                	jle    c0013fb4 <datetimeToSeconds(datetime_t)+0xf9>
c0013fa5:	83 fa 01             	cmp    edx,0x1
c0013fa8:	19 d2                	sbb    edx,edx
c0013faa:	48                   	dec    eax
c0013fab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fb2:	eb e8                	jmp    c0013f9c <datetimeToSeconds(datetime_t)+0xe1>
c0013fb4:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fb9:	85 d2                	test   edx,edx
c0013fbb:	75 0b                	jne    c0013fc8 <datetimeToSeconds(datetime_t)+0x10d>
c0013fbd:	66 83 fb 01          	cmp    bx,0x1
c0013fc1:	19 c0                	sbb    eax,eax
c0013fc3:	05 6e 01 00 00       	add    eax,0x16e
c0013fc8:	29 c1                	sub    ecx,eax
c0013fca:	b8 80 51 01 00       	mov    eax,0x15180
c0013fcf:	f7 e9                	imul   ecx
c0013fd1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fd5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fd9:	83 c4 14             	add    esp,0x14
c0013fdc:	5b                   	pop    ebx
c0013fdd:	5e                   	pop    esi
c0013fde:	5f                   	pop    edi
c0013fdf:	5d                   	pop    ebp
c0013fe0:	c3                   	ret    
c0013fe1:	90                   	nop

c0013fe2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fe2:	57                   	push   edi
c0013fe3:	56                   	push   esi
c0013fe4:	53                   	push   ebx
c0013fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fe9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013feb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff6:	e8 c0 fe ff ff       	call   c0013ebb <datetimeToSeconds(datetime_t)>
c0013ffb:	59                   	pop    ecx
c0013ffc:	0f b6 0d 18 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e518
c0014003:	5b                   	pop    ebx
c0014004:	03 0d 1c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e51c
c001400a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014010:	89 cb                	mov    ebx,ecx
c0014012:	c1 fb 1f             	sar    ebx,0x1f
c0014015:	29 c8                	sub    eax,ecx
c0014017:	19 da                	sbb    edx,ebx
c0014019:	31 c9                	xor    ecx,ecx
c001401b:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0014022:	74 05                	je     c0014029 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014024:	b9 08 07 00 00       	mov    ecx,0x708
c0014029:	31 db                	xor    ebx,ebx
c001402b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001402f:	29 c8                	sub    eax,ecx
c0014031:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014035:	19 da                	sbb    edx,ebx
c0014037:	89 f8                	mov    eax,edi
c0014039:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001403d:	5b                   	pop    ebx
c001403e:	5e                   	pop    esi
c001403f:	5f                   	pop    edi
c0014040:	ff e0                	jmp    eax

c0014042 <secondsToDatetime(unsigned long long)>:
c0014042:	55                   	push   ebp
c0014043:	57                   	push   edi
c0014044:	56                   	push   esi
c0014045:	53                   	push   ebx
c0014046:	83 ec 1c             	sub    esp,0x1c
c0014049:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001404d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014051:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014055:	6a 00                	push   0x0
c0014057:	68 80 51 01 00       	push   0x15180
c001405c:	55                   	push   ebp
c001405d:	57                   	push   edi
c001405e:	e8 19 29 01 00       	call   c002697c <__udivdi3>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014070:	6a 00                	push   0x0
c0014072:	68 80 51 01 00       	push   0x15180
c0014077:	55                   	push   ebp
c0014078:	57                   	push   edi
c0014079:	bf 10 0e 00 00       	mov    edi,0xe10
c001407e:	e8 f9 29 01 00       	call   c0026a7c <__umoddi3>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	99                   	cdq    
c0014087:	f7 ff                	idiv   edi
c0014089:	bf 3c 00 00 00       	mov    edi,0x3c
c001408e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014091:	89 d0                	mov    eax,edx
c0014093:	99                   	cdq    
c0014094:	f7 ff                	idiv   edi
c0014096:	85 db                	test   ebx,ebx
c0014098:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001409b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001409e:	79 11                	jns    c00140b1 <secondsToDatetime(unsigned long long)+0x6f>
c00140a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140af:	eb 07                	jmp    c00140b8 <secondsToDatetime(unsigned long long)+0x76>
c00140b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b6:	89 d8                	mov    eax,ebx
c00140b8:	bf b4 05 00 00       	mov    edi,0x5b4
c00140bd:	99                   	cdq    
c00140be:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140c3:	f7 f9                	idiv   ecx
c00140c5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140ce:	31 d2                	xor    edx,edx
c00140d0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140d8:	01 c3                	add    ebx,eax
c00140da:	89 d8                	mov    eax,ebx
c00140dc:	f7 f1                	div    ecx
c00140de:	31 d2                	xor    edx,edx
c00140e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140e3:	89 d8                	mov    eax,ebx
c00140e5:	f7 f7                	div    edi
c00140e7:	31 d2                	xor    edx,edx
c00140e9:	29 c1                	sub    ecx,eax
c00140eb:	89 d8                	mov    eax,ebx
c00140ed:	f7 f5                	div    ebp
c00140ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140f4:	29 c1                	sub    ecx,eax
c00140f6:	31 d2                	xor    edx,edx
c00140f8:	89 c8                	mov    eax,ecx
c00140fa:	f7 f5                	div    ebp
c00140fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014105:	31 d2                	xor    edx,edx
c0014107:	89 c8                	mov    eax,ecx
c0014109:	f7 f5                	div    ebp
c001410b:	31 d2                	xor    edx,edx
c001410d:	01 c3                	add    ebx,eax
c001410f:	89 c8                	mov    eax,ecx
c0014111:	f7 f7                	div    edi
c0014113:	bf 99 00 00 00       	mov    edi,0x99
c0014118:	29 c3                	sub    ebx,eax
c001411a:	31 d2                	xor    edx,edx
c001411c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014124:	29 c3                	sub    ebx,eax
c0014126:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014129:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001412c:	bb 05 00 00 00       	mov    ebx,0x5
c0014131:	83 c1 02             	add    ecx,0x2
c0014134:	89 c8                	mov    eax,ecx
c0014136:	f7 f7                	div    edi
c0014138:	31 d2                	xor    edx,edx
c001413a:	89 c7                	mov    edi,eax
c001413c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014142:	83 c0 02             	add    eax,0x2
c0014145:	f7 f3                	div    ebx
c0014147:	89 eb                	mov    ebx,ebp
c0014149:	29 c3                	sub    ebx,eax
c001414b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014151:	88 1e                	mov    BYTE PTR [esi],bl
c0014153:	19 c0                	sbb    eax,eax
c0014155:	31 d2                	xor    edx,edx
c0014157:	83 e0 0c             	and    eax,0xc
c001415a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001415e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014166:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001416a:	83 f9 01             	cmp    ecx,0x1
c001416d:	0f 96 c2             	setbe  dl
c0014170:	41                   	inc    ecx
c0014171:	01 d0                	add    eax,edx
c0014173:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014176:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001417a:	83 c4 1c             	add    esp,0x1c
c001417d:	89 f0                	mov    eax,esi
c001417f:	5b                   	pop    ebx
c0014180:	5e                   	pop    esi
c0014181:	5f                   	pop    edi
c0014182:	5d                   	pop    ebp
c0014183:	c2 04 00             	ret    0x4

c0014186 <Clock::timeInDatetimeLocal()>:
c0014186:	53                   	push   ebx
c0014187:	83 ec 14             	sub    esp,0x14
c001418a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001418e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014192:	e8 83 fc ff ff       	call   c0013e1a <Clock::timeInSecondsLocal()>
c0014197:	83 c4 0c             	add    esp,0xc
c001419a:	52                   	push   edx
c001419b:	50                   	push   eax
c001419c:	53                   	push   ebx
c001419d:	e8 a0 fe ff ff       	call   c0014042 <secondsToDatetime(unsigned long long)>
c00141a2:	89 d8                	mov    eax,ebx
c00141a4:	83 c4 14             	add    esp,0x14
c00141a7:	5b                   	pop    ebx
c00141a8:	c2 04 00             	ret    0x4
c00141ab:	90                   	nop

c00141ac <Device::hibernate()>:
c00141ac:	c3                   	ret    
c00141ad:	90                   	nop

c00141ae <Device::wake()>:
c00141ae:	c3                   	ret    
c00141af:	90                   	nop

c00141b0 <Device::detect()>:
c00141b0:	c3                   	ret    
c00141b1:	90                   	nop

c00141b2 <Device::disableLegacy()>:
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::powerSaving(PowerSavingLevel)>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <DriverlessDevice::close(int, int, void*)>:
c00141b6:	31 c0                	xor    eax,eax
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <DriverlessDevice::detect()>:
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <DriverlessDevice::open(int, int, void*)>:
c00141bc:	83 ec 18             	sub    esp,0x18
c00141bf:	68 b0 ab 02 c0       	push   0xc002abb0
c00141c4:	e8 b4 63 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00141c9:	83 c8 ff             	or     eax,0xffffffff
c00141cc:	83 c4 1c             	add    esp,0x1c
c00141cf:	c3                   	ret    

c00141d0 <Device::~Device()>:
c00141d0:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00141d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d9:	89 10                	mov    DWORD PTR [eax],edx
c00141db:	90                   	nop
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <Device::~Device()>:
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141e5:	e8 e6 ff ff ff       	call   c00141d0 <Device::~Device()>
c00141ea:	83 c4 04             	add    esp,0x4
c00141ed:	83 ec 08             	sub    esp,0x8
c00141f0:	68 58 01 00 00       	push   0x158
c00141f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f9:	e8 fa eb ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	83 c4 0c             	add    esp,0xc
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <Device::findAndLoadDriver()>:
c0014206:	c3                   	ret    
c0014207:	90                   	nop

c0014208 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014208:	57                   	push   edi
c0014209:	b9 09 00 00 00       	mov    ecx,0x9
c001420e:	56                   	push   esi
c001420f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014213:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014217:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014221:	81 c7 18 01 00 00    	add    edi,0x118
c0014227:	fc                   	cld    
c0014228:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001422a:	5e                   	pop    esi
c001422b:	5f                   	pop    edi
c001422c:	c3                   	ret    
c001422d:	90                   	nop

c001422e <Device::preOpenACPI(void*, char*, char*)>:
c001422e:	56                   	push   esi
c001422f:	53                   	push   ebx
c0014230:	83 ec 08             	sub    esp,0x8
c0014233:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014237:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001423b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014249:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001424f:	6a 1e                	push   0x1e
c0014251:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014257:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001425b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014261:	50                   	push   eax
c0014262:	e8 dd c4 fe ff       	call   c0000744 <memcpy>
c0014267:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001426b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001426f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014277:	83 c4 14             	add    esp,0x14
c001427a:	5b                   	pop    ebx
c001427b:	5e                   	pop    esi
c001427c:	e9 c3 c4 fe ff       	jmp    c0000744 <memcpy>
c0014281:	90                   	nop

c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014286:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001428b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014292:	75 0b                	jne    c001429f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014294:	8b 00                	mov    eax,DWORD PTR [eax]
c0014296:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001429d:	eb 1e                	jmp    c00142bd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001429f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00142a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142aa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142ba:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142bd:	ff e0                	jmp    eax
c00142bf:	90                   	nop

c00142c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142c4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142c9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142d0:	75 0b                	jne    c00142dd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00142d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142db:	eb 1e                	jmp    c00142fb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142dd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00142e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142e8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142fb:	ff e0                	jmp    eax
c00142fd:	90                   	nop

c00142fe <Device::addChild(Device*)>:
c00142fe:	53                   	push   ebx
c00142ff:	83 ec 08             	sub    esp,0x8
c0014302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014306:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001430a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014310:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014316:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014318:	85 d2                	test   edx,edx
c001431a:	74 04                	je     c0014320 <Device::addChild(Device*)+0x22>
c001431c:	89 d3                	mov    ebx,edx
c001431e:	eb f6                	jmp    c0014316 <Device::addChild(Device*)+0x18>
c0014320:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014323:	83 ec 0c             	sub    esp,0xc
c0014326:	6a 08                	push   0x8
c0014328:	e8 16 b5 ff ff       	call   c000f843 <malloc>
c001432d:	89 03                	mov    DWORD PTR [ebx],eax
c001432f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014335:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001433c:	83 c4 18             	add    esp,0x18
c001433f:	5b                   	pop    ebx
c0014340:	c3                   	ret    
c0014341:	90                   	nop

c0014342 <Device::removeAllChildren()>:
c0014342:	56                   	push   esi
c0014343:	53                   	push   ebx
c0014344:	52                   	push   edx
c0014345:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014349:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001434f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014352:	74 17                	je     c001436b <Device::removeAllChildren()+0x29>
c0014354:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014357:	85 c0                	test   eax,eax
c0014359:	74 0c                	je     c0014367 <Device::removeAllChildren()+0x25>
c001435b:	83 ec 0c             	sub    esp,0xc
c001435e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014360:	50                   	push   eax
c0014361:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014369:	eb e4                	jmp    c001434f <Device::removeAllChildren()+0xd>
c001436b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014371:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014377:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001437d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014384:	58                   	pop    eax
c0014385:	5b                   	pop    ebx
c0014386:	5e                   	pop    esi
c0014387:	c3                   	ret    

c0014388 <Device::hibernateAll()>:
c0014388:	53                   	push   ebx
c0014389:	83 ec 14             	sub    esp,0x14
c001438c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014390:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014392:	53                   	push   ebx
c0014393:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014396:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143a2:	74 0f                	je     c00143b3 <Device::hibernateAll()+0x2b>
c00143a4:	83 ec 0c             	sub    esp,0xc
c00143a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143aa:	e8 d9 ff ff ff       	call   c0014388 <Device::hibernateAll()>
c00143af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b1:	eb e9                	jmp    c001439c <Device::hibernateAll()+0x14>
c00143b3:	83 c4 08             	add    esp,0x8
c00143b6:	5b                   	pop    ebx
c00143b7:	c3                   	ret    

c00143b8 <Device::wakeAll()>:
c00143b8:	53                   	push   ebx
c00143b9:	83 ec 14             	sub    esp,0x14
c00143bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c2:	53                   	push   ebx
c00143c3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d2:	74 0f                	je     c00143e3 <Device::wakeAll()+0x2b>
c00143d4:	83 ec 0c             	sub    esp,0xc
c00143d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143da:	e8 d9 ff ff ff       	call   c00143b8 <Device::wakeAll()>
c00143df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e1:	eb e9                	jmp    c00143cc <Device::wakeAll()+0x14>
c00143e3:	83 c4 08             	add    esp,0x8
c00143e6:	5b                   	pop    ebx
c00143e7:	c3                   	ret    

c00143e8 <Device::detectAll()>:
c00143e8:	53                   	push   ebx
c00143e9:	83 ec 14             	sub    esp,0x14
c00143ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f2:	53                   	push   ebx
c00143f3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014402:	74 0f                	je     c0014413 <Device::detectAll()+0x2b>
c0014404:	83 ec 0c             	sub    esp,0xc
c0014407:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001440a:	e8 d9 ff ff ff       	call   c00143e8 <Device::detectAll()>
c001440f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014411:	eb e9                	jmp    c00143fc <Device::detectAll()+0x14>
c0014413:	83 c4 08             	add    esp,0x8
c0014416:	5b                   	pop    ebx
c0014417:	c3                   	ret    

c0014418 <Device::disableLegacyAll()>:
c0014418:	53                   	push   ebx
c0014419:	83 ec 14             	sub    esp,0x14
c001441c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014420:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014422:	53                   	push   ebx
c0014423:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014426:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014432:	74 0f                	je     c0014443 <Device::disableLegacyAll()+0x2b>
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001443a:	e8 d9 ff ff ff       	call   c0014418 <Device::disableLegacyAll()>
c001443f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014441:	eb e9                	jmp    c001442c <Device::disableLegacyAll()+0x14>
c0014443:	83 c4 08             	add    esp,0x8
c0014446:	5b                   	pop    ebx
c0014447:	c3                   	ret    

c0014448 <Device::loadDriversForAll()>:
c0014448:	53                   	push   ebx
c0014449:	83 ec 08             	sub    esp,0x8
c001444c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014450:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014456:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014458:	85 db                	test   ebx,ebx
c001445a:	74 12                	je     c001446e <Device::loadDriversForAll()+0x26>
c001445c:	83 ec 0c             	sub    esp,0xc
c001445f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014462:	e8 e1 ff ff ff       	call   c0014448 <Device::loadDriversForAll()>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	89 d8                	mov    eax,ebx
c001446c:	eb e8                	jmp    c0014456 <Device::loadDriversForAll()+0xe>
c001446e:	83 c4 08             	add    esp,0x8
c0014471:	5b                   	pop    ebx
c0014472:	c3                   	ret    
c0014473:	90                   	nop

c0014474 <Device::closeAll()>:
c0014474:	53                   	push   ebx
c0014475:	83 ec 08             	sub    esp,0x8
c0014478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001447c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447e:	6a 00                	push   0x0
c0014480:	6a 00                	push   0x0
c0014482:	6a 00                	push   0x0
c0014484:	53                   	push   ebx
c0014485:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014488:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001448e:	83 c4 10             	add    esp,0x10
c0014491:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014494:	74 0f                	je     c00144a5 <Device::closeAll()+0x31>
c0014496:	83 ec 0c             	sub    esp,0xc
c0014499:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001449c:	e8 d3 ff ff ff       	call   c0014474 <Device::closeAll()>
c00144a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a3:	eb e9                	jmp    c001448e <Device::closeAll()+0x1a>
c00144a5:	83 c4 08             	add    esp,0x8
c00144a8:	5b                   	pop    ebx
c00144a9:	c3                   	ret    

c00144aa <Device::powerSavingAll(PowerSavingLevel)>:
c00144aa:	56                   	push   esi
c00144ab:	53                   	push   ebx
c00144ac:	83 ec 0c             	sub    esp,0xc
c00144af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b9:	56                   	push   esi
c00144ba:	53                   	push   ebx
c00144bb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ca:	74 0f                	je     c00144db <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144cc:	52                   	push   edx
c00144cd:	52                   	push   edx
c00144ce:	56                   	push   esi
c00144cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d2:	e8 d3 ff ff ff       	call   c00144aa <Device::powerSavingAll(PowerSavingLevel)>
c00144d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d9:	eb e9                	jmp    c00144c4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144db:	58                   	pop    eax
c00144dc:	5b                   	pop    ebx
c00144dd:	5e                   	pop    esi
c00144de:	c3                   	ret    
c00144df:	90                   	nop

c00144e0 <Device::setName(char const*)>:
c00144e0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144e8:	e9 47 c3 fe ff       	jmp    c0000834 <strcpy>
c00144ed:	90                   	nop

c00144ee <Device::Device(char const*)>:
c00144ee:	83 ec 1c             	sub    esp,0x1c
c00144f1:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00144f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fa:	89 10                	mov    DWORD PTR [eax],edx
c00144fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014500:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001450a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014534:	83 ec 08             	sub    esp,0x8
c0014537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001453b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001453f:	e8 9c ff ff ff       	call   c00144e0 <Device::setName(char const*)>
c0014544:	83 c4 10             	add    esp,0x10
c0014547:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001454f:	83 ec 0c             	sub    esp,0xc
c0014552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014556:	e8 e8 b2 ff ff       	call   c000f843 <malloc>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014564:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001456b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001456f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014579:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001457f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014589:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001458f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145be:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145cc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145da:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145e4:	90                   	nop
c00145e5:	83 c4 1c             	add    esp,0x1c
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <Device::getName()>:
c00145ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145ee:	05 d0 00 00 00       	add    eax,0xd0
c00145f3:	c3                   	ret    

c00145f4 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fb:	83 ec 08             	sub    esp,0x8
c00145fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014602:	50                   	push   eax
c0014603:	e8 e6 fe ff ff       	call   c00144ee <Device::Device(char const*)>
c0014608:	83 c4 10             	add    esp,0x10
c001460b:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c0014610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014614:	89 10                	mov    DWORD PTR [eax],edx
c0014616:	90                   	nop
c0014617:	83 c4 0c             	add    esp,0xc
c001461a:	c3                   	ret    
c001461b:	90                   	nop

c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001461c:	57                   	push   edi
c001461d:	56                   	push   esi
c001461e:	53                   	push   ebx
c001461f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001462b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014631:	75 0c                	jne    c001463f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014633:	52                   	push   edx
c0014634:	52                   	push   edx
c0014635:	53                   	push   ebx
c0014636:	56                   	push   esi
c0014637:	e8 7e 42 01 00       	call   c00288ba <LinkedList<Device>::addElement(Device*)>
c001463c:	83 c4 10             	add    esp,0x10
c001463f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014645:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014648:	74 12                	je     c001465c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001464a:	50                   	push   eax
c001464b:	57                   	push   edi
c001464c:	56                   	push   esi
c001464d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014650:	e8 c7 ff ff ff       	call   c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014655:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014657:	83 c4 10             	add    esp,0x10
c001465a:	eb e9                	jmp    c0014645 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	c3                   	ret    

c0014660 <getDevicesOfType(DeviceType)>:
c0014660:	53                   	push   ebx
c0014661:	83 ec 14             	sub    esp,0x14
c0014664:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014668:	53                   	push   ebx
c0014669:	e8 28 43 01 00       	call   c0028996 <LinkedList<Device>::LinkedList()>
c001466e:	83 c4 0c             	add    esp,0xc
c0014671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014675:	53                   	push   ebx
c0014676:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001467c:	e8 9b ff ff ff       	call   c001461c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014681:	89 d8                	mov    eax,ebx
c0014683:	83 c4 18             	add    esp,0x18
c0014686:	5b                   	pop    ebx
c0014687:	c2 04 00             	ret    0x4

c001468a <HardDiskController::HardDiskController(char const*)>:
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014691:	83 ec 08             	sub    esp,0x8
c0014694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014698:	50                   	push   eax
c0014699:	e8 50 fe ff ff       	call   c00144ee <Device::Device(char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00146a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146aa:	89 10                	mov    DWORD PTR [eax],edx
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146ba:	90                   	nop
c00146bb:	83 c4 0c             	add    esp,0xc
c00146be:	c3                   	ret    
c00146bf:	90                   	nop

c00146c0 <HardDiskController::~HardDiskController()>:
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	89 10                	mov    DWORD PTR [eax],edx
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	50                   	push   eax
c00146d6:	e8 f5 fa ff ff       	call   c00141d0 <Device::~Device()>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	90                   	nop
c00146df:	83 c4 0c             	add    esp,0xc
c00146e2:	c3                   	ret    
c00146e3:	90                   	nop

c00146e4 <HardDiskController::~HardDiskController()>:
c00146e4:	83 ec 0c             	sub    esp,0xc
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ee:	e8 cd ff ff ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	83 ec 08             	sub    esp,0x8
c00146f9:	68 58 01 00 00       	push   0x158
c00146fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014702:	e8 f1 e6 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0014707:	83 c4 10             	add    esp,0x10
c001470a:	83 c4 0c             	add    esp,0xc
c001470d:	c3                   	ret    

c001470e <PhysicalDisk::eject()>:
c001470e:	83 ec 18             	sub    esp,0x18
c0014711:	68 54 ac 02 c0       	push   0xc002ac54
c0014716:	e8 bd e7 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001471b:	83 c8 ff             	or     eax,0xffffffff
c001471e:	83 c4 1c             	add    esp,0x1c
c0014721:	c3                   	ret    

c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014729:	83 ec 08             	sub    esp,0x8
c001472c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014730:	50                   	push   eax
c0014731:	e8 b8 fd ff ff       	call   c00144ee <Device::Device(char const*)>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014742:	89 10                	mov    DWORD PTR [eax],edx
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001474f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014753:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001475a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014770:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014784:	90                   	nop
c0014785:	83 c4 0c             	add    esp,0xc
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <PhysicalDisk::startCache()>:
c001478a:	56                   	push   esi
c001478b:	53                   	push   ebx
c001478c:	83 ec 10             	sub    esp,0x10
c001478f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014793:	6a 44                	push   0x44
c0014795:	e8 a9 b0 ff ff       	call   c000f843 <malloc>
c001479a:	89 c6                	mov    esi,eax
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	53                   	push   ebx
c001479f:	56                   	push   esi
c00147a0:	e8 29 27 00 00       	call   c0016ece <VCache::VCache(PhysicalDisk*)>
c00147a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147ab:	83 c4 14             	add    esp,0x14
c00147ae:	5b                   	pop    ebx
c00147af:	5e                   	pop    esi
c00147b0:	c3                   	ret    
c00147b1:	90                   	nop

c00147b2 <PhysicalDisk::~PhysicalDisk()>:
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00147ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147be:	89 10                	mov    DWORD PTR [eax],edx
c00147c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	50                   	push   eax
c00147c8:	e8 03 fa ff ff       	call   c00141d0 <Device::~Device()>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	90                   	nop
c00147d1:	83 c4 0c             	add    esp,0xc
c00147d4:	c3                   	ret    
c00147d5:	90                   	nop

c00147d6 <PhysicalDisk::~PhysicalDisk()>:
c00147d6:	83 ec 0c             	sub    esp,0xc
c00147d9:	83 ec 0c             	sub    esp,0xc
c00147dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e0:	e8 cd ff ff ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c00147e5:	83 c4 10             	add    esp,0x10
c00147e8:	83 ec 08             	sub    esp,0x8
c00147eb:	68 6c 01 00 00       	push   0x16c
c00147f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f4:	e8 ff e5 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	83 c4 0c             	add    esp,0xc
c00147ff:	c3                   	ret    

c0014800 <FPU::FPU(char const*)>:
c0014800:	83 ec 0c             	sub    esp,0xc
c0014803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014807:	83 ec 08             	sub    esp,0x8
c001480a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480e:	50                   	push   eax
c001480f:	e8 da fc ff ff       	call   c00144ee <Device::Device(char const*)>
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	89 10                	mov    DWORD PTR [eax],edx
c0014822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014826:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014830:	90                   	nop
c0014831:	83 c4 0c             	add    esp,0xc
c0014834:	c3                   	ret    
c0014835:	90                   	nop

c0014836 <FPU::~FPU()>:
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c001483e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014842:	89 10                	mov    DWORD PTR [eax],edx
c0014844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	50                   	push   eax
c001484c:	e8 7f f9 ff ff       	call   c00141d0 <Device::~Device()>
c0014851:	83 c4 10             	add    esp,0x10
c0014854:	90                   	nop
c0014855:	83 c4 0c             	add    esp,0xc
c0014858:	c3                   	ret    
c0014859:	90                   	nop

c001485a <FPU::~FPU()>:
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	83 ec 0c             	sub    esp,0xc
c0014860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014864:	e8 cd ff ff ff       	call   c0014836 <FPU::~FPU()>
c0014869:	83 c4 10             	add    esp,0x10
c001486c:	83 ec 08             	sub    esp,0x8
c001486f:	68 58 01 00 00       	push   0x158
c0014874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014878:	e8 7b e5 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	83 c4 0c             	add    esp,0xc
c0014883:	c3                   	ret    

c0014884 <setupFPU()>:
c0014884:	53                   	push   ebx
c0014885:	83 ec 08             	sub    esp,0x8
c0014888:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c001488e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014895:	74 19                	je     c00148b0 <setupFPU()+0x2c>
c0014897:	83 ec 0c             	sub    esp,0xc
c001489a:	68 58 01 00 00       	push   0x158
c001489f:	e8 9f af ff ff       	call   c000f843 <malloc>
c00148a4:	89 c3                	mov    ebx,eax
c00148a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a9:	e8 5c 0c 01 00       	call   c002550a <AVX::AVX()>
c00148ae:	eb 5b                	jmp    c001490b <setupFPU()+0x87>
c00148b0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148b6:	84 c0                	test   al,al
c00148b8:	79 19                	jns    c00148d3 <setupFPU()+0x4f>
c00148ba:	83 ec 0c             	sub    esp,0xc
c00148bd:	68 58 01 00 00       	push   0x158
c00148c2:	e8 7c af ff ff       	call   c000f843 <malloc>
c00148c7:	89 c3                	mov    ebx,eax
c00148c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00148cc:	e8 5f 0d 01 00       	call   c0025630 <SSE::SSE()>
c00148d1:	eb 38                	jmp    c001490b <setupFPU()+0x87>
c00148d3:	a8 20                	test   al,0x20
c00148d5:	74 19                	je     c00148f0 <setupFPU()+0x6c>
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 58 01 00 00       	push   0x158
c00148df:	e8 5f af ff ff       	call   c000f843 <malloc>
c00148e4:	89 c3                	mov    ebx,eax
c00148e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e9:	e8 ac 0c 01 00       	call   c002559a <MMX::MMX()>
c00148ee:	eb 1b                	jmp    c001490b <setupFPU()+0x87>
c00148f0:	a8 10                	test   al,0x10
c00148f2:	74 1c                	je     c0014910 <setupFPU()+0x8c>
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	68 58 01 00 00       	push   0x158
c00148fc:	e8 42 af ff ff       	call   c000f843 <malloc>
c0014901:	89 c3                	mov    ebx,eax
c0014903:	89 04 24             	mov    DWORD PTR [esp],eax
c0014906:	e8 b3 0d 01 00       	call   c00256be <x87::x87()>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	eb 24                	jmp    c0014934 <setupFPU()+0xb0>
c0014910:	83 e0 ef             	and    eax,0xffffffef
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001491c:	68 b4 ac 02 c0       	push   0xc002acb4
c0014921:	e8 b2 e5 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014926:	0f 20 c0             	mov    eax,cr0
c0014929:	83 c8 04             	or     eax,0x4
c001492c:	0f 22 c0             	mov    cr0,eax
c001492f:	31 db                	xor    ebx,ebx
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	89 d8                	mov    eax,ebx
c0014936:	83 c4 08             	add    esp,0x8
c0014939:	5b                   	pop    ebx
c001493a:	c3                   	ret    
c001493b:	90                   	nop

c001493c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001493c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014944:	c1 e0 04             	shl    eax,0x4
c0014947:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001494b:	8d 50 10             	lea    edx,[eax+0x10]
c001494e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014954:	74 08                	je     c001495e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014956:	83 c0 04             	add    eax,0x4
c0014959:	39 d0                	cmp    eax,edx
c001495b:	75 f1                	jne    c001494e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001495d:	c3                   	ret    
c001495e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014968:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014972:	eb e2                	jmp    c0014956 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014974 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014974:	57                   	push   edi
c0014975:	31 c0                	xor    eax,eax
c0014977:	56                   	push   esi
c0014978:	53                   	push   ebx
c0014979:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001497d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014981:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014985:	89 da                	mov    edx,ebx
c0014987:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001498b:	c1 e2 04             	shl    edx,0x4
c001498e:	01 ca                	add    edx,ecx
c0014990:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014998:	74 16                	je     c00149b0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001499a:	40                   	inc    eax
c001499b:	83 f8 04             	cmp    eax,0x4
c001499e:	75 f0                	jne    c0014990 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149a0:	c7 44 24 10 f8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acf8
c00149a8:	5b                   	pop    ebx
c00149a9:	5e                   	pop    esi
c00149aa:	5f                   	pop    edi
c00149ab:	e9 cd 5b 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c00149b0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149b3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149b6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149bc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149c2:	5b                   	pop    ebx
c00149c3:	5e                   	pop    esi
c00149c4:	5f                   	pop    edi
c00149c5:	c3                   	ret    

c00149c6 <doubleFault(regs*, void*)>:
c00149c6:	55                   	push   ebp
c00149c7:	89 e5                	mov    ebp,esp
c00149c9:	83 ec 08             	sub    esp,0x8
c00149cc:	83 ec 0c             	sub    esp,0xc
c00149cf:	68 33 ad 02 c0       	push   0xc002ad33
c00149d4:	e8 a4 5b 00 00       	call   c001a57d <Krnl::panic(char const*)>
c00149d9:	83 c4 10             	add    esp,0x10
c00149dc:	90                   	nop
c00149dd:	c9                   	leave  
c00149de:	c3                   	ret    
c00149df:	90                   	nop

c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149e0:	56                   	push   esi
c00149e1:	53                   	push   ebx
c00149e2:	50                   	push   eax
c00149e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149eb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f0:	75 35                	jne    c0014a27 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149f2:	8d 43 20             	lea    eax,[ebx+0x20]
c00149f5:	31 d2                	xor    edx,edx
c00149f7:	89 c1                	mov    ecx,eax
c00149f9:	c1 e1 04             	shl    ecx,0x4
c00149fc:	01 f1                	add    ecx,esi
c00149fe:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a06:	74 3e                	je     c0014a46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a08:	42                   	inc    edx
c0014a09:	83 fa 04             	cmp    edx,0x4
c0014a0c:	75 f0                	jne    c00149fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	68 78 ad 02 c0       	push   0xc002ad78
c0014a16:	e8 62 5b 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0014a1b:	83 c4 10             	add    esp,0x10
c0014a1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a23:	5a                   	pop    edx
c0014a24:	5b                   	pop    ebx
c0014a25:	5e                   	pop    esi
c0014a26:	c3                   	ret    
c0014a27:	83 ec 0c             	sub    esp,0xc
c0014a2a:	56                   	push   esi
c0014a2b:	e8 ba fb ff ff       	call   c00145ea <Device::getName()>
c0014a30:	83 c4 10             	add    esp,0x10
c0014a33:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a36:	75 ba                	jne    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a38:	83 fb 0f             	cmp    ebx,0xf
c0014a3b:	7f 29                	jg     c0014a66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a3d:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c0014a44:	eb ac                	jmp    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a46:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a4d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a50:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a5a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a60:	89 d8                	mov    eax,ebx
c0014a62:	5a                   	pop    edx
c0014a63:	5b                   	pop    ebx
c0014a64:	5e                   	pop    esi
c0014a65:	c3                   	ret    
c0014a66:	83 ec 0c             	sub    esp,0xc
c0014a69:	68 40 ad 02 c0       	push   0xc002ad40
c0014a6e:	e8 0a 5b 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	e9 77 ff ff ff       	jmp    c00149f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7b:	90                   	nop

c0014a7c <InterruptController::clearAllHandlers(int, bool)>:
c0014a7c:	56                   	push   esi
c0014a7d:	53                   	push   ebx
c0014a7e:	52                   	push   edx
c0014a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a87:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a8c:	75 61                	jne    c0014aef <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a8e:	8d 46 20             	lea    eax,[esi+0x20]
c0014a91:	c1 e6 04             	shl    esi,0x4
c0014a94:	c1 e0 04             	shl    eax,0x4
c0014a97:	01 de                	add    esi,ebx
c0014a99:	01 d8                	add    eax,ebx
c0014a9b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014aa5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014aaf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ab9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ac3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014acd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ad7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ae1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014aeb:	58                   	pop    eax
c0014aec:	5b                   	pop    ebx
c0014aed:	5e                   	pop    esi
c0014aee:	c3                   	ret    
c0014aef:	83 ec 0c             	sub    esp,0xc
c0014af2:	53                   	push   ebx
c0014af3:	e8 f2 fa ff ff       	call   c00145ea <Device::getName()>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014afe:	75 8e                	jne    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b00:	83 fe 0f             	cmp    esi,0xf
c0014b03:	7f 09                	jg     c0014b0e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b05:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c0014b0c:	eb 80                	jmp    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b0e:	83 ec 0c             	sub    esp,0xc
c0014b11:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b16:	e8 62 5a 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	e9 6b ff ff ff       	jmp    c0014a8e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b23:	90                   	nop

c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b24:	56                   	push   esi
c0014b25:	53                   	push   ebx
c0014b26:	52                   	push   edx
c0014b27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b2f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b34:	75 3a                	jne    c0014b70 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b3a:	8d 50 20             	lea    edx,[eax+0x20]
c0014b3d:	c1 e2 04             	shl    edx,0x4
c0014b40:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b43:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b47:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b4d:	74 0b                	je     c0014b5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b4f:	83 c0 04             	add    eax,0x4
c0014b52:	39 d0                	cmp    eax,edx
c0014b54:	75 f1                	jne    c0014b47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b56:	58                   	pop    eax
c0014b57:	5b                   	pop    ebx
c0014b58:	5e                   	pop    esi
c0014b59:	c3                   	ret    
c0014b5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b64:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b6e:	eb df                	jmp    c0014b4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	56                   	push   esi
c0014b74:	e8 71 fa ff ff       	call   c00145ea <Device::getName()>
c0014b79:	83 c4 10             	add    esp,0x10
c0014b7c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b7f:	75 b5                	jne    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b81:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b86:	7f 11                	jg     c0014b99 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b8c:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014b93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b97:	eb 9d                	jmp    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b99:	83 ec 0c             	sub    esp,0xc
c0014b9c:	68 b4 ad 02 c0       	push   0xc002adb4
c0014ba1:	e8 d7 59 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	eb 8b                	jmp    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bab <nmiHandler(regs*, void*)>:
c0014bab:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bb4:	e9 d3 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014bb9 <int_handler>:
c0014bb9:	55                   	push   ebp
c0014bba:	57                   	push   edi
c0014bbb:	56                   	push   esi
c0014bbc:	53                   	push   ebx
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bc4:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014bcb:	74 0b                	je     c0014bd8 <int_handler+0x1f>
c0014bcd:	fa                   	cli    
c0014bce:	f4                   	hlt    
c0014bcf:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014bd6:	75 f5                	jne    c0014bcd <int_handler+0x14>
c0014bd8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bdd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014be0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014be6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bec:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bef:	83 f8 17             	cmp    eax,0x17
c0014bf2:	77 13                	ja     c0014c07 <int_handler+0x4e>
c0014bf4:	83 ec 08             	sub    esp,0x8
c0014bf7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bf9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bfc:	0f b6 c0             	movzx  eax,al
c0014bff:	50                   	push   eax
c0014c00:	57                   	push   edi
c0014c01:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	83 c3 15             	add    ebx,0x15
c0014c0a:	c1 e3 04             	shl    ebx,0x4
c0014c0d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c11:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c18:	31 db                	xor    ebx,ebx
c0014c1a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c1e:	85 c0                	test   eax,eax
c0014c20:	74 13                	je     c0014c35 <int_handler+0x7c>
c0014c22:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c25:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c29:	74 1c                	je     c0014c47 <int_handler+0x8e>
c0014c2b:	83 ec 08             	sub    esp,0x8
c0014c2e:	52                   	push   edx
c0014c2f:	56                   	push   esi
c0014c30:	ff d0                	call   eax
c0014c32:	83 c4 10             	add    esp,0x10
c0014c35:	43                   	inc    ebx
c0014c36:	83 fb 04             	cmp    ebx,0x4
c0014c39:	75 df                	jne    c0014c1a <int_handler+0x61>
c0014c3b:	83 c4 0c             	add    esp,0xc
c0014c3e:	31 c0                	xor    eax,eax
c0014c40:	5b                   	pop    ebx
c0014c41:	31 d2                	xor    edx,edx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	5d                   	pop    ebp
c0014c46:	c3                   	ret    
c0014c47:	83 ec 08             	sub    esp,0x8
c0014c4a:	52                   	push   edx
c0014c4b:	56                   	push   esi
c0014c4c:	ff d0                	call   eax
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	83 c4 0c             	add    esp,0xc
c0014c54:	5b                   	pop    ebx
c0014c55:	5e                   	pop    esi
c0014c56:	5f                   	pop    edi
c0014c57:	5d                   	pop    ebp
c0014c58:	c3                   	ret    
c0014c59:	90                   	nop

c0014c5a <InterruptController::InterruptController(char const*)>:
c0014c5a:	83 ec 1c             	sub    esp,0x1c
c0014c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c61:	83 ec 08             	sub    esp,0x8
c0014c64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c68:	50                   	push   eax
c0014c69:	e8 80 f8 ff ff       	call   c00144ee <Device::Device(char const*)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	ba 54 b0 02 c0       	mov    edx,0xc002b054
c0014c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7a:	89 10                	mov    DWORD PTR [eax],edx
c0014c7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c80:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c92:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c9a:	7f 5e                	jg     c0014cfa <InterruptController::InterruptController(char const*)+0xa0>
c0014c9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ca4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ca9:	7f 49                	jg     c0014cf4 <InterruptController::InterruptController(char const*)+0x9a>
c0014cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cb3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cbe:	01 ca                	add    edx,ecx
c0014cc0:	83 c2 54             	add    edx,0x54
c0014cc3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ccf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cd3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cde:	01 ca                	add    edx,ecx
c0014ce0:	81 c2 54 04 00 00    	add    edx,0x454
c0014ce6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cf2:	eb b0                	jmp    c0014ca4 <InterruptController::InterruptController(char const*)+0x4a>
c0014cf4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cf8:	eb 98                	jmp    c0014c92 <InterruptController::InterruptController(char const*)+0x38>
c0014cfa:	90                   	nop
c0014cfb:	83 c4 1c             	add    esp,0x1c
c0014cfe:	c3                   	ret    
c0014cff:	90                   	nop

c0014d00 <InterruptController::~InterruptController()>:
c0014d00:	83 ec 0c             	sub    esp,0xc
c0014d03:	ba 54 b0 02 c0       	mov    edx,0xc002b054
c0014d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d0c:	89 10                	mov    DWORD PTR [eax],edx
c0014d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d12:	83 ec 0c             	sub    esp,0xc
c0014d15:	50                   	push   eax
c0014d16:	e8 b5 f4 ff ff       	call   c00141d0 <Device::~Device()>
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	90                   	nop
c0014d1f:	83 c4 0c             	add    esp,0xc
c0014d22:	c3                   	ret    
c0014d23:	90                   	nop

c0014d24 <InterruptController::~InterruptController()>:
c0014d24:	83 ec 0c             	sub    esp,0xc
c0014d27:	83 ec 0c             	sub    esp,0xc
c0014d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d2e:	e8 cd ff ff ff       	call   c0014d00 <InterruptController::~InterruptController()>
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	83 ec 08             	sub    esp,0x8
c0014d39:	68 58 21 00 00       	push   0x2158
c0014d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d42:	e8 b1 e0 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	83 c4 0c             	add    esp,0xc
c0014d4d:	c3                   	ret    

c0014d4e <displayDebugInfo(regs*)>:
c0014d4e:	55                   	push   ebp
c0014d4f:	57                   	push   edi
c0014d50:	56                   	push   esi
c0014d51:	53                   	push   ebx
c0014d52:	83 ec 24             	sub    esp,0x24
c0014d55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d59:	0f 20 c2             	mov    edx,cr0
c0014d5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d60:	0f 20 d7             	mov    edi,cr2
c0014d63:	0f 20 de             	mov    esi,cr3
c0014d66:	0f 20 e5             	mov    ebp,cr4
c0014d69:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d6c:	68 ee ad 02 c0       	push   0xc002adee
c0014d71:	e8 62 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014d76:	59                   	pop    ecx
c0014d77:	58                   	pop    eax
c0014d78:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d7b:	68 f9 ad 02 c0       	push   0xc002adf9
c0014d80:	e8 53 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014d85:	58                   	pop    eax
c0014d86:	5a                   	pop    edx
c0014d87:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d8a:	68 04 ae 02 c0       	push   0xc002ae04
c0014d8f:	e8 44 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014d94:	59                   	pop    ecx
c0014d95:	58                   	pop    eax
c0014d96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d99:	68 0f ae 02 c0       	push   0xc002ae0f
c0014d9e:	e8 35 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014da3:	58                   	pop    eax
c0014da4:	5a                   	pop    edx
c0014da5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014da8:	68 1a ae 02 c0       	push   0xc002ae1a
c0014dad:	e8 26 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014db2:	59                   	pop    ecx
c0014db3:	58                   	pop    eax
c0014db4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014db7:	68 25 ae 02 c0       	push   0xc002ae25
c0014dbc:	e8 17 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014dc1:	58                   	pop    eax
c0014dc2:	5a                   	pop    edx
c0014dc3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dc6:	68 30 ae 02 c0       	push   0xc002ae30
c0014dcb:	e8 08 e1 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014dd0:	59                   	pop    ecx
c0014dd1:	58                   	pop    eax
c0014dd2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014dd5:	68 3b ae 02 c0       	push   0xc002ae3b
c0014dda:	e8 f9 e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014ddf:	58                   	pop    eax
c0014de0:	5a                   	pop    edx
c0014de1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014de4:	68 46 ae 02 c0       	push   0xc002ae46
c0014de9:	e8 ea e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014dee:	59                   	pop    ecx
c0014def:	58                   	pop    eax
c0014df0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df3:	68 55 ae 02 c0       	push   0xc002ae55
c0014df8:	e8 db e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014dfd:	58                   	pop    eax
c0014dfe:	5a                   	pop    edx
c0014dff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e02:	68 60 ae 02 c0       	push   0xc002ae60
c0014e07:	e8 cc e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014e0c:	59                   	pop    ecx
c0014e0d:	58                   	pop    eax
c0014e0e:	57                   	push   edi
c0014e0f:	68 6b ae 02 c0       	push   0xc002ae6b
c0014e14:	e8 bf e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014e19:	58                   	pop    eax
c0014e1a:	5a                   	pop    edx
c0014e1b:	56                   	push   esi
c0014e1c:	68 76 ae 02 c0       	push   0xc002ae76
c0014e21:	e8 b2 e0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0014e26:	59                   	pop    ecx
c0014e27:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e2c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e32:	e8 f6 be ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0014e37:	58                   	pop    eax
c0014e38:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e3b:	5a                   	pop    edx
c0014e3c:	c1 e0 05             	shl    eax,0x5
c0014e3f:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014e44:	50                   	push   eax
c0014e45:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e4a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e50:	e8 f7 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e55:	59                   	pop    ecx
c0014e56:	58                   	pop    eax
c0014e57:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e5c:	68 81 ae 02 c0       	push   0xc002ae81
c0014e61:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e67:	e8 e0 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e6c:	58                   	pop    eax
c0014e6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e72:	5a                   	pop    edx
c0014e73:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e76:	83 c0 0c             	add    eax,0xc
c0014e79:	50                   	push   eax
c0014e7a:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e7f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e85:	e8 c2 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e8a:	59                   	pop    ecx
c0014e8b:	58                   	pop    eax
c0014e8c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e91:	68 8a ae 02 c0       	push   0xc002ae8a
c0014e96:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e9c:	e8 ab c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014ea1:	58                   	pop    eax
c0014ea2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ea7:	5a                   	pop    edx
c0014ea8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eab:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eb1:	e8 bc c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014eb6:	59                   	pop    ecx
c0014eb7:	58                   	pop    eax
c0014eb8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ebd:	68 92 ae 02 c0       	push   0xc002ae92
c0014ec2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ec8:	e8 7f c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014ecd:	58                   	pop    eax
c0014ece:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ed3:	5a                   	pop    edx
c0014ed4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ed7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014edd:	e8 90 c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014ee2:	59                   	pop    ecx
c0014ee3:	58                   	pop    eax
c0014ee4:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ee9:	68 9a ae 02 c0       	push   0xc002ae9a
c0014eee:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef4:	e8 53 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014ef9:	58                   	pop    eax
c0014efa:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014eff:	5a                   	pop    edx
c0014f00:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f03:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f09:	e8 64 c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f0e:	59                   	pop    ecx
c0014f0f:	58                   	pop    eax
c0014f10:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f15:	68 a2 ae 02 c0       	push   0xc002aea2
c0014f1a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f20:	e8 27 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f25:	58                   	pop    eax
c0014f26:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f2b:	5a                   	pop    edx
c0014f2c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f2f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f35:	e8 38 c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f3a:	59                   	pop    ecx
c0014f3b:	58                   	pop    eax
c0014f3c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f41:	68 aa ae 02 c0       	push   0xc002aeaa
c0014f46:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4c:	e8 fb c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f51:	58                   	pop    eax
c0014f52:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f57:	5a                   	pop    edx
c0014f58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f5b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f61:	e8 0c c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f66:	59                   	pop    ecx
c0014f67:	58                   	pop    eax
c0014f68:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f6d:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014f72:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f78:	e8 cf c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f7d:	58                   	pop    eax
c0014f7e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f83:	5a                   	pop    edx
c0014f84:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f87:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f8d:	e8 e0 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f92:	59                   	pop    ecx
c0014f93:	58                   	pop    eax
c0014f94:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f99:	68 ba ae 02 c0       	push   0xc002aeba
c0014f9e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa4:	e8 a3 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fa9:	58                   	pop    eax
c0014faa:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014faf:	5a                   	pop    edx
c0014fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fb4:	52                   	push   edx
c0014fb5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fbb:	e8 b2 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014fc0:	59                   	pop    ecx
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fc7:	68 c3 ae 02 c0       	push   0xc002aec3
c0014fcc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd2:	e8 75 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fdd:	5a                   	pop    edx
c0014fde:	57                   	push   edi
c0014fdf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fe5:	e8 88 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014fea:	59                   	pop    ecx
c0014feb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ff0:	5f                   	pop    edi
c0014ff1:	68 cb ae 02 c0       	push   0xc002aecb
c0014ff6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ffc:	e8 4b c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015001:	58                   	pop    eax
c0015002:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015007:	5a                   	pop    edx
c0015008:	56                   	push   esi
c0015009:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001500f:	e8 5e c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015014:	59                   	pop    ecx
c0015015:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001501a:	5e                   	pop    esi
c001501b:	68 d3 ae 02 c0       	push   0xc002aed3
c0015020:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015026:	e8 21 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001502b:	5f                   	pop    edi
c001502c:	58                   	pop    eax
c001502d:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015032:	55                   	push   ebp
c0015033:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015039:	e8 34 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001503e:	58                   	pop    eax
c001503f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015044:	5a                   	pop    edx
c0015045:	68 db ae 02 c0       	push   0xc002aedb
c001504a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015050:	e8 f7 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015055:	0f 21 c0             	mov    eax,db0
c0015058:	59                   	pop    ecx
c0015059:	5e                   	pop    esi
c001505a:	50                   	push   eax
c001505b:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015060:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015066:	e8 07 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001506b:	5f                   	pop    edi
c001506c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015071:	5d                   	pop    ebp
c0015072:	68 e4 ae 02 c0       	push   0xc002aee4
c0015077:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001507d:	e8 ca c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015082:	0f 21 c8             	mov    eax,db1
c0015085:	5a                   	pop    edx
c0015086:	59                   	pop    ecx
c0015087:	50                   	push   eax
c0015088:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001508d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015093:	e8 da c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015098:	5e                   	pop    esi
c0015099:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001509e:	5f                   	pop    edi
c001509f:	68 ec ae 02 c0       	push   0xc002aeec
c00150a4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150aa:	e8 9d c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150af:	0f 21 d0             	mov    eax,db2
c00150b2:	5d                   	pop    ebp
c00150b3:	5a                   	pop    edx
c00150b4:	50                   	push   eax
c00150b5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150ba:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150c0:	e8 ad c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150c5:	59                   	pop    ecx
c00150c6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150cb:	5e                   	pop    esi
c00150cc:	68 f4 ae 02 c0       	push   0xc002aef4
c00150d1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150d7:	e8 70 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150dc:	0f 21 d8             	mov    eax,db3
c00150df:	5f                   	pop    edi
c00150e0:	5d                   	pop    ebp
c00150e1:	50                   	push   eax
c00150e2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150e7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150ed:	e8 80 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150f2:	58                   	pop    eax
c00150f3:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150f8:	5a                   	pop    edx
c00150f9:	68 fc ae 02 c0       	push   0xc002aefc
c00150fe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015104:	e8 43 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015109:	0f 21 f0             	mov    eax,db6
c001510c:	59                   	pop    ecx
c001510d:	5e                   	pop    esi
c001510e:	50                   	push   eax
c001510f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015114:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001511a:	e8 53 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001511f:	5f                   	pop    edi
c0015120:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015125:	5d                   	pop    ebp
c0015126:	68 04 af 02 c0       	push   0xc002af04
c001512b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015131:	e8 16 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015136:	0f 21 f8             	mov    eax,db7
c0015139:	5a                   	pop    edx
c001513a:	59                   	pop    ecx
c001513b:	50                   	push   eax
c001513c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015141:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015147:	e8 26 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001514c:	5e                   	pop    esi
c001514d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015150:	e8 0a 85 00 00       	call   c001d65f <Thr::getDriverNameFromAddress(unsigned long)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	85 c0                	test   eax,eax
c001515a:	74 7d                	je     c00151d9 <displayDebugInfo(regs*)+0x48b>
c001515c:	89 c6                	mov    esi,eax
c001515e:	50                   	push   eax
c001515f:	50                   	push   eax
c0015160:	56                   	push   esi
c0015161:	68 0c af 02 c0       	push   0xc002af0c
c0015166:	e8 6d dd ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001516b:	5a                   	pop    edx
c001516c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015171:	59                   	pop    ecx
c0015172:	68 1a af 02 c0       	push   0xc002af1a
c0015177:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001517d:	e8 ca bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015182:	5f                   	pop    edi
c0015183:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015188:	5d                   	pop    ebp
c0015189:	56                   	push   esi
c001518a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015190:	e8 b7 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015195:	58                   	pop    eax
c0015196:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001519b:	5a                   	pop    edx
c001519c:	68 26 af 02 c0       	push   0xc002af26
c00151a1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00151a7:	e8 a0 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c00151ac:	59                   	pop    ecx
c00151ad:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00151b2:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c00151b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151bb:	e8 d6 84 00 00       	call   c001d696 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151c0:	5b                   	pop    ebx
c00151c1:	5d                   	pop    ebp
c00151c2:	50                   	push   eax
c00151c3:	57                   	push   edi
c00151c4:	e8 a9 bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00151c9:	58                   	pop    eax
c00151ca:	5a                   	pop    edx
c00151cb:	56                   	push   esi
c00151cc:	68 32 af 02 c0       	push   0xc002af32
c00151d1:	e8 02 dd ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	fa                   	cli    
c00151da:	f4                   	hlt    
c00151db:	eb fe                	jmp    c00151db <displayDebugInfo(regs*)+0x48d>

c00151dd <x87EmulHandler(regs*, void*)>:
c00151dd:	53                   	push   ebx
c00151de:	83 ec 14             	sub    esp,0x14
c00151e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151e5:	53                   	push   ebx
c00151e6:	e8 4d a8 00 00       	call   c001fa38 <Vm::x87Handler(regs*)>
c00151eb:	83 c4 10             	add    esp,0x10
c00151ee:	84 c0                	test   al,al
c00151f0:	74 05                	je     c00151f7 <x87EmulHandler(regs*, void*)+0x1a>
c00151f2:	83 c4 08             	add    esp,0x8
c00151f5:	5b                   	pop    ebx
c00151f6:	c3                   	ret    
c00151f7:	83 ec 0c             	sub    esp,0xc
c00151fa:	68 42 af 02 c0       	push   0xc002af42
c00151ff:	e8 d4 dc ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0015204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015207:	e8 42 fb ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c001520c <gpFault(regs*, void*)>:
c001520c:	53                   	push   ebx
c001520d:	83 ec 14             	sub    esp,0x14
c0015210:	c7 05 38 e5 02 c0 87 ed 01 c0 	mov    DWORD PTR ds:0xc002e538,0xc001ed87
c001521a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001521e:	53                   	push   ebx
c001521f:	e8 63 9b 00 00       	call   c001ed87 <Vm::faultHandler(regs*)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	84 c0                	test   al,al
c0015229:	74 05                	je     c0015230 <gpFault(regs*, void*)+0x24>
c001522b:	83 c4 08             	add    esp,0x8
c001522e:	5b                   	pop    ebx
c001522f:	c3                   	ret    
c0015230:	83 ec 0c             	sub    esp,0xc
c0015233:	68 58 af 02 c0       	push   0xc002af58
c0015238:	e8 9b dc ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001523d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015240:	e8 09 fb ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c0015245 <pgFault(regs*, void*)>:
c0015245:	83 ec 14             	sub    esp,0x14
c0015248:	0f 20 d0             	mov    eax,cr2
c001524b:	50                   	push   eax
c001524c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015251:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015254:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001525a:	e8 9f d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	84 c0                	test   al,al
c0015264:	74 04                	je     c001526a <pgFault(regs*, void*)+0x25>
c0015266:	83 c4 0c             	add    esp,0xc
c0015269:	c3                   	ret    
c001526a:	83 ec 0c             	sub    esp,0xc
c001526d:	68 73 af 02 c0       	push   0xc002af73
c0015272:	e8 61 dc ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0015277:	58                   	pop    eax
c0015278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527c:	e8 cd fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c0015281 <otherISRHandler(regs*, void*)>:
c0015281:	53                   	push   ebx
c0015282:	83 ec 0c             	sub    esp,0xc
c0015285:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015289:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001528c:	50                   	push   eax
c001528d:	50                   	push   eax
c001528e:	68 85 af 02 c0       	push   0xc002af85
c0015293:	e8 40 dc ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0015298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529b:	e8 ae fa ff ff       	call   c0014d4e <displayDebugInfo(regs*)>

c00152a0 <opcodeFault(regs*, void*)>:
c00152a0:	55                   	push   ebp
c00152a1:	89 e5                	mov    ebp,esp
c00152a3:	56                   	push   esi
c00152a4:	53                   	push   ebx
c00152a5:	83 ec 40             	sub    esp,0x40
c00152a8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00152ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152b3:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152b9:	84 c0                	test   al,al
c00152bb:	74 24                	je     c00152e1 <opcodeFault(regs*, void*)+0x41>
c00152bd:	83 ec 0c             	sub    esp,0xc
c00152c0:	68 a4 af 02 c0       	push   0xc002afa4
c00152c5:	e8 0e dc ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d3:	8d 50 19             	lea    edx,[eax+0x19]
c00152d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152dc:	e9 be 05 00 00       	jmp    c001589f <opcodeFault(regs*, void*)+0x5ff>
c00152e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152ea:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152ee:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015300:	3c f0                	cmp    al,0xf0
c0015302:	75 17                	jne    c001531b <opcodeFault(regs*, void*)+0x7b>
c0015304:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530d:	8d 50 01             	lea    edx,[eax+0x1]
c0015310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015313:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015316:	e9 da 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c001531b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531e:	8a 00                	mov    al,BYTE PTR [eax]
c0015320:	3c f2                	cmp    al,0xf2
c0015322:	74 09                	je     c001532d <opcodeFault(regs*, void*)+0x8d>
c0015324:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015327:	8a 00                	mov    al,BYTE PTR [eax]
c0015329:	3c f3                	cmp    al,0xf3
c001532b:	75 1b                	jne    c0015348 <opcodeFault(regs*, void*)+0xa8>
c001532d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015331:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015337:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533a:	8d 50 01             	lea    edx,[eax+0x1]
c001533d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015340:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015343:	e9 ad 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534b:	8a 00                	mov    al,BYTE PTR [eax]
c001534d:	3c 66                	cmp    al,0x66
c001534f:	75 1f                	jne    c0015370 <opcodeFault(regs*, void*)+0xd0>
c0015351:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015355:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015359:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	8d 50 01             	lea    edx,[eax+0x1]
c0015365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015368:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536b:	e9 85 00 00 00       	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c 67                	cmp    al,0x67
c0015377:	75 18                	jne    c0015391 <opcodeFault(regs*, void*)+0xf1>
c0015379:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015386:	8d 50 01             	lea    edx,[eax+0x1]
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538f:	eb 64                	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8a 00                	mov    al,BYTE PTR [eax]
c0015396:	3c 2e                	cmp    al,0x2e
c0015398:	74 09                	je     c00153a3 <opcodeFault(regs*, void*)+0x103>
c001539a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539d:	8a 00                	mov    al,BYTE PTR [eax]
c001539f:	3c 3e                	cmp    al,0x3e
c00153a1:	75 18                	jne    c00153bb <opcodeFault(regs*, void*)+0x11b>
c00153a3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b0:	8d 50 01             	lea    edx,[eax+0x1]
c00153b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b9:	eb 3a                	jmp    c00153f5 <opcodeFault(regs*, void*)+0x155>
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c 36                	cmp    al,0x36
c00153c2:	74 1b                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8a 00                	mov    al,BYTE PTR [eax]
c00153c9:	3c 26                	cmp    al,0x26
c00153cb:	74 12                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d0:	8a 00                	mov    al,BYTE PTR [eax]
c00153d2:	3c 64                	cmp    al,0x64
c00153d4:	74 09                	je     c00153df <opcodeFault(regs*, void*)+0x13f>
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	3c 65                	cmp    al,0x65
c00153dd:	75 16                	jne    c00153f5 <opcodeFault(regs*, void*)+0x155>
c00153df:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ec:	8d 50 01             	lea    edx,[eax+0x1]
c00153ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8a 00                	mov    al,BYTE PTR [eax]
c00153fa:	3c 0f                	cmp    al,0xf
c00153fc:	0f 85 ad 00 00 00    	jne    c00154af <opcodeFault(regs*, void*)+0x20f>
c0015402:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015405:	40                   	inc    eax
c0015406:	8a 00                	mov    al,BYTE PTR [eax]
c0015408:	3c c2                	cmp    al,0xc2
c001540a:	74 0e                	je     c001541a <opcodeFault(regs*, void*)+0x17a>
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	40                   	inc    eax
c0015410:	8a 00                	mov    al,BYTE PTR [eax]
c0015412:	3c c3                	cmp    al,0xc3
c0015414:	0f 85 95 00 00 00    	jne    c00154af <opcodeFault(regs*, void*)+0x20f>
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	68 c7 af 02 c0       	push   0xc002afc7
c0015422:	e8 b1 da ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015430:	8d 50 01             	lea    edx,[eax+0x1]
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015439:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001543c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543f:	8a 00                	mov    al,BYTE PTR [eax]
c0015441:	8d 50 fe             	lea    edx,[eax-0x2]
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	88 10                	mov    BYTE PTR [eax],dl
c0015449:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001544c:	50                   	push   eax
c001544d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015450:	50                   	push   eax
c0015451:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015454:	50                   	push   eax
c0015455:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015458:	e8 e7 47 00 00       	call   c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015469:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001546c:	01 d0                	add    eax,edx
c001546e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015474:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015477:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001547a:	48                   	dec    eax
c001547b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015481:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015484:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	83 ec 04             	sub    esp,0x4
c001548d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015490:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015493:	50                   	push   eax
c0015494:	e8 1b ad fe ff       	call   c00001b4 <voodooXADD>
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001549f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154a2:	01 c2                	add    edx,eax
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154aa:	e9 f0 03 00 00       	jmp    c001589f <opcodeFault(regs*, void*)+0x5ff>
c00154af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b2:	8a 00                	mov    al,BYTE PTR [eax]
c00154b4:	3c 0f                	cmp    al,0xf
c00154b6:	0f 85 8b 01 00 00    	jne    c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bf:	40                   	inc    eax
c00154c0:	8a 00                	mov    al,BYTE PTR [eax]
c00154c2:	3c c7                	cmp    al,0xc7
c00154c4:	0f 86 7d 01 00 00    	jbe    c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	40                   	inc    eax
c00154ce:	8a 00                	mov    al,BYTE PTR [eax]
c00154d0:	3c cf                	cmp    al,0xcf
c00154d2:	0f 87 6f 01 00 00    	ja     c0015647 <opcodeFault(regs*, void*)+0x3a7>
c00154d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154db:	40                   	inc    eax
c00154dc:	8a 00                	mov    al,BYTE PTR [eax]
c00154de:	83 c0 38             	add    eax,0x38
c00154e1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154e4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154e8:	75 0b                	jne    c00154f5 <opcodeFault(regs*, void*)+0x255>
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154f0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f3:	eb 75                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c00154f5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154f9:	75 0b                	jne    c0015506 <opcodeFault(regs*, void*)+0x266>
c00154fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015501:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015504:	eb 64                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015506:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001550a:	75 0b                	jne    c0015517 <opcodeFault(regs*, void*)+0x277>
c001550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015512:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015515:	eb 53                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015517:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001551b:	75 0b                	jne    c0015528 <opcodeFault(regs*, void*)+0x288>
c001551d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015520:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015523:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015526:	eb 42                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015528:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001552c:	75 0b                	jne    c0015539 <opcodeFault(regs*, void*)+0x299>
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015534:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015537:	eb 31                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015539:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001553d:	75 0b                	jne    c001554a <opcodeFault(regs*, void*)+0x2aa>
c001553f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015542:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015548:	eb 20                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c001554a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001554e:	75 0b                	jne    c001555b <opcodeFault(regs*, void*)+0x2bb>
c0015550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015553:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015556:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015559:	eb 0f                	jmp    c001556a <opcodeFault(regs*, void*)+0x2ca>
c001555b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001555f:	75 09                	jne    c001556a <opcodeFault(regs*, void*)+0x2ca>
c0015561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015564:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015567:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001556e:	74 10                	je     c0015580 <opcodeFault(regs*, void*)+0x2e0>
c0015570:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015577:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001557e:	eb 2d                	jmp    c00155ad <opcodeFault(regs*, void*)+0x30d>
c0015580:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015583:	c1 e0 18             	shl    eax,0x18
c0015586:	89 c2                	mov    edx,eax
c0015588:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001558b:	c1 e0 08             	shl    eax,0x8
c001558e:	25 00 00 ff 00       	and    eax,0xff0000
c0015593:	09 c2                	or     edx,eax
c0015595:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015598:	c1 e8 08             	shr    eax,0x8
c001559b:	25 00 ff 00 00       	and    eax,0xff00
c00155a0:	09 c2                	or     edx,eax
c00155a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155a5:	c1 e8 18             	shr    eax,0x18
c00155a8:	09 d0                	or     eax,edx
c00155aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ad:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155b1:	75 0b                	jne    c00155be <opcodeFault(regs*, void*)+0x31e>
c00155b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155bc:	eb 75                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155be:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155c2:	75 0b                	jne    c00155cf <opcodeFault(regs*, void*)+0x32f>
c00155c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155cd:	eb 64                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155cf:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155d3:	75 0b                	jne    c00155e0 <opcodeFault(regs*, void*)+0x340>
c00155d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155db:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155de:	eb 53                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155e0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155e4:	75 0b                	jne    c00155f1 <opcodeFault(regs*, void*)+0x351>
c00155e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155ef:	eb 42                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c00155f1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155f5:	75 0b                	jne    c0015602 <opcodeFault(regs*, void*)+0x362>
c00155f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015600:	eb 31                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015602:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015606:	75 0b                	jne    c0015613 <opcodeFault(regs*, void*)+0x373>
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015611:	eb 20                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015613:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015617:	75 0b                	jne    c0015624 <opcodeFault(regs*, void*)+0x384>
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015622:	eb 0f                	jmp    c0015633 <opcodeFault(regs*, void*)+0x393>
c0015624:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015628:	75 09                	jne    c0015633 <opcodeFault(regs*, void*)+0x393>
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015630:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015636:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015639:	8d 50 02             	lea    edx,[eax+0x2]
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015642:	e9 58 02 00 00       	jmp    c001589f <opcodeFault(regs*, void*)+0x5ff>
c0015647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564a:	8a 00                	mov    al,BYTE PTR [eax]
c001564c:	3c 0f                	cmp    al,0xf
c001564e:	0f 85 76 01 00 00    	jne    c00157ca <opcodeFault(regs*, void*)+0x52a>
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	40                   	inc    eax
c0015658:	8a 00                	mov    al,BYTE PTR [eax]
c001565a:	3c c7                	cmp    al,0xc7
c001565c:	0f 85 68 01 00 00    	jne    c00157ca <opcodeFault(regs*, void*)+0x52a>
c0015662:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566b:	8d 50 01             	lea    edx,[eax+0x1]
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015674:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015677:	50                   	push   eax
c0015678:	8d 45 bb             	lea    eax,[ebp-0x45]
c001567b:	50                   	push   eax
c001567c:	8d 45 bc             	lea    eax,[ebp-0x44]
c001567f:	50                   	push   eax
c0015680:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015683:	e8 bc 45 00 00       	call   c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015688:	83 c4 10             	add    esp,0x10
c001568b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001568e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015691:	83 f0 01             	xor    eax,0x1
c0015694:	84 c0                	test   al,al
c0015696:	0f 84 2e 01 00 00    	je     c00157ca <opcodeFault(regs*, void*)+0x52a>
c001569c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001569f:	3c 01                	cmp    al,0x1
c00156a1:	0f 85 23 01 00 00    	jne    c00157ca <opcodeFault(regs*, void*)+0x52a>
c00156a7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156aa:	83 f0 01             	xor    eax,0x1
c00156ad:	84 c0                	test   al,al
c00156af:	0f 84 15 01 00 00    	je     c00157ca <opcodeFault(regs*, void*)+0x52a>
c00156b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156bb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156be:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156c5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156c8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156cb:	89 c2                	mov    edx,eax
c00156cd:	b8 00 00 00 00       	mov    eax,0x0
c00156d2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156d5:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156de:	ba 00 00 00 00       	mov    edx,0x0
c00156e3:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156e6:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156ef:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156f2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156f9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156ff:	89 c2                	mov    edx,eax
c0015701:	b8 00 00 00 00       	mov    eax,0x0
c0015706:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015709:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015712:	ba 00 00 00 00       	mov    edx,0x0
c0015717:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001571a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001571d:	e8 55 86 00 00       	call   c001dd77 <lockScheduler()>
c0015722:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015725:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015728:	8b 00                	mov    eax,DWORD PTR [eax]
c001572a:	89 c1                	mov    ecx,eax
c001572c:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001572f:	89 cb                	mov    ebx,ecx
c0015731:	89 d0                	mov    eax,edx
c0015733:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015736:	89 c6                	mov    esi,eax
c0015738:	89 f0                	mov    eax,esi
c001573a:	09 d8                	or     eax,ebx
c001573c:	85 c0                	test   eax,eax
c001573e:	75 21                	jne    c0015761 <opcodeFault(regs*, void*)+0x4c1>
c0015740:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015743:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015746:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015749:	89 01                	mov    DWORD PTR [ecx],eax
c001574b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001574e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015751:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015754:	83 c8 40             	or     eax,0x40
c0015757:	89 c2                	mov    edx,eax
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001575f:	eb 3e                	jmp    c001579f <opcodeFault(regs*, void*)+0x4ff>
c0015761:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015764:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015767:	8b 00                	mov    eax,DWORD PTR [eax]
c0015769:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001576c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001576f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015775:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015778:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001577b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001577e:	89 d0                	mov    eax,edx
c0015780:	31 d2                	xor    edx,edx
c0015782:	89 c3                	mov    ebx,eax
c0015784:	89 d6                	mov    esi,edx
c0015786:	89 da                	mov    edx,ebx
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015794:	83 e0 bf             	and    eax,0xffffffbf
c0015797:	89 c2                	mov    edx,eax
c0015799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001579f:	e8 d5 85 00 00       	call   c001dd79 <unlockScheduler()>
c00157a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157aa:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157ad:	01 c2                	add    edx,eax
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157b5:	83 ec 0c             	sub    esp,0xc
c00157b8:	68 d6 af 02 c0       	push   0xc002afd6
c00157bd:	e8 16 d7 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00157c2:	83 c4 10             	add    esp,0x10
c00157c5:	e9 d5 00 00 00       	jmp    c001589f <opcodeFault(regs*, void*)+0x5ff>
c00157ca:	83 ec 0c             	sub    esp,0xc
c00157cd:	68 e9 af 02 c0       	push   0xc002afe9
c00157d2:	e8 01 d7 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e6:	c1 e0 04             	shl    eax,0x4
c00157e9:	01 d0                	add    eax,edx
c00157eb:	83 c0 03             	add    eax,0x3
c00157ee:	8a 00                	mov    al,BYTE PTR [eax]
c00157f0:	0f b6 d8             	movzx  ebx,al
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ff:	c1 e0 04             	shl    eax,0x4
c0015802:	01 d0                	add    eax,edx
c0015804:	83 c0 02             	add    eax,0x2
c0015807:	8a 00                	mov    al,BYTE PTR [eax]
c0015809:	0f b6 c8             	movzx  ecx,al
c001580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015815:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015818:	c1 e0 04             	shl    eax,0x4
c001581b:	01 d0                	add    eax,edx
c001581d:	40                   	inc    eax
c001581e:	8a 00                	mov    al,BYTE PTR [eax]
c0015820:	0f b6 d0             	movzx  edx,al
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582f:	c1 e0 04             	shl    eax,0x4
c0015832:	01 f0                	add    eax,esi
c0015834:	8a 00                	mov    al,BYTE PTR [eax]
c0015836:	0f b6 c0             	movzx  eax,al
c0015839:	83 ec 0c             	sub    esp,0xc
c001583c:	53                   	push   ebx
c001583d:	51                   	push   ecx
c001583e:	52                   	push   edx
c001583f:	50                   	push   eax
c0015840:	68 fc af 02 c0       	push   0xc002affc
c0015845:	e8 8e d6 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001584a:	83 c4 20             	add    esp,0x20
c001584d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015850:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015853:	83 c0 03             	add    eax,0x3
c0015856:	8a 00                	mov    al,BYTE PTR [eax]
c0015858:	0f b6 d8             	movzx  ebx,al
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015861:	83 c0 02             	add    eax,0x2
c0015864:	8a 00                	mov    al,BYTE PTR [eax]
c0015866:	0f b6 c8             	movzx  ecx,al
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001586f:	40                   	inc    eax
c0015870:	8a 00                	mov    al,BYTE PTR [eax]
c0015872:	0f b6 d0             	movzx  edx,al
c0015875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015878:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001587b:	8a 00                	mov    al,BYTE PTR [eax]
c001587d:	0f b6 c0             	movzx  eax,al
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	53                   	push   ebx
c0015884:	51                   	push   ecx
c0015885:	52                   	push   edx
c0015886:	50                   	push   eax
c0015887:	68 24 b0 02 c0       	push   0xc002b024
c001588c:	e8 47 d6 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0015891:	83 c4 20             	add    esp,0x20
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001589a:	e8 af f4 ff ff       	call   c0014d4e <displayDebugInfo(regs*)>
c001589f:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158a2:	5b                   	pop    ebx
c00158a3:	5e                   	pop    esi
c00158a4:	5d                   	pop    ebp
c00158a5:	c3                   	ret    

c00158a6 <displayProgramFault(char const*)>:
c00158a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158ae:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00158b4:	85 c0                	test   eax,eax
c00158b6:	74 15                	je     c00158cd <displayProgramFault(char const*)+0x27>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	6a 04                	push   0x4
c00158bd:	6a 0f                	push   0xf
c00158bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158c3:	50                   	push   eax
c00158c4:	e8 45 b5 ff ff       	call   c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158c9:	83 c4 1c             	add    esp,0x1c
c00158cc:	c3                   	ret    
c00158cd:	c3                   	ret    

c00158ce <setupInterruptController()>:
c00158ce:	55                   	push   ebp
c00158cf:	89 e5                	mov    ebp,esp
c00158d1:	53                   	push   ebx
c00158d2:	83 ec 24             	sub    esp,0x24
c00158d5:	b8 00 00 00 00       	mov    eax,0x0
c00158da:	85 c0                	test   eax,eax
c00158dc:	0f 95 c0             	setne  al
c00158df:	84 c0                	test   al,al
c00158e1:	74 5b                	je     c001593e <setupInterruptController()+0x70>
c00158e3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158f0:	e8 4e 9f ff ff       	call   c000f843 <malloc>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	89 c3                	mov    ebx,eax
c00158fa:	83 ec 0c             	sub    esp,0xc
c00158fd:	53                   	push   ebx
c00158fe:	e8 f9 ff 00 00       	call   c00258fc <APIC::APIC()>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015909:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001590c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001590f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015911:	83 c0 08             	add    eax,0x8
c0015914:	8b 00                	mov    eax,DWORD PTR [eax]
c0015916:	6a 00                	push   0x0
c0015918:	6a 00                	push   0x0
c001591a:	6a 00                	push   0x0
c001591c:	52                   	push   edx
c001591d:	ff d0                	call   eax
c001591f:	83 c4 10             	add    esp,0x10
c0015922:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015927:	83 ec 08             	sub    esp,0x8
c001592a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001592d:	50                   	push   eax
c001592e:	e8 cb e9 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0015933:	83 c4 10             	add    esp,0x10
c0015936:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015939:	e9 52 03 00 00       	jmp    c0015c90 <setupInterruptController()+0x3c2>
c001593e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015943:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015949:	83 e0 01             	and    eax,0x1
c001594c:	84 c0                	test   al,al
c001594e:	0f 95 c0             	setne  al
c0015951:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015954:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015961:	e8 dd 9e ff ff       	call   c000f843 <malloc>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	89 c3                	mov    ebx,eax
c001596b:	83 ec 0c             	sub    esp,0xc
c001596e:	53                   	push   ebx
c001596f:	e8 e0 04 01 00       	call   c0025e54 <PIC::PIC()>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001597a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001597d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015980:	8b 00                	mov    eax,DWORD PTR [eax]
c0015982:	83 c0 08             	add    eax,0x8
c0015985:	8b 00                	mov    eax,DWORD PTR [eax]
c0015987:	6a 00                	push   0x0
c0015989:	6a 00                	push   0x0
c001598b:	6a 00                	push   0x0
c001598d:	52                   	push   edx
c001598e:	ff d0                	call   eax
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015997:	74 73                	je     c0015a0c <setupInterruptController()+0x13e>
c0015999:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001599c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599f:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a1:	83 c0 0c             	add    eax,0xc
c00159a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a6:	6a 00                	push   0x0
c00159a8:	6a 00                	push   0x0
c00159aa:	6a 00                	push   0x0
c00159ac:	52                   	push   edx
c00159ad:	ff d0                	call   eax
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b6:	74 15                	je     c00159cd <setupInterruptController()+0xff>
c00159b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	83 c0 04             	add    eax,0x4
c00159c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c8:	ff d0                	call   eax
c00159ca:	83 c4 10             	add    esp,0x10
c00159cd:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159da:	e8 64 9e ff ff       	call   c000f843 <malloc>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	89 c3                	mov    ebx,eax
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	53                   	push   ebx
c00159e8:	e8 0f ff 00 00       	call   c00258fc <APIC::APIC()>
c00159ed:	83 c4 10             	add    esp,0x10
c00159f0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fb:	83 c0 08             	add    eax,0x8
c00159fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a00:	6a 00                	push   0x0
c0015a02:	6a 00                	push   0x0
c0015a04:	6a 00                	push   0x0
c0015a06:	52                   	push   edx
c0015a07:	ff d0                	call   eax
c0015a09:	83 c4 10             	add    esp,0x10
c0015a0c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015a11:	83 ec 08             	sub    esp,0x8
c0015a14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a17:	50                   	push   eax
c0015a18:	e8 e1 e8 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a25:	83 c0 24             	add    eax,0x24
c0015a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2a:	6a 00                	push   0x0
c0015a2c:	68 81 52 01 c0       	push   0xc0015281
c0015a31:	6a 00                	push   0x0
c0015a33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a36:	ff d0                	call   eax
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 24             	add    eax,0x24
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	6a 00                	push   0x0
c0015a47:	68 81 52 01 c0       	push   0xc0015281
c0015a4c:	6a 01                	push   0x1
c0015a4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a51:	ff d0                	call   eax
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5b:	83 c0 24             	add    eax,0x24
c0015a5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a60:	6a 00                	push   0x0
c0015a62:	68 ab 4b 01 c0       	push   0xc0014bab
c0015a67:	6a 02                	push   0x2
c0015a69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6c:	ff d0                	call   eax
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a76:	83 c0 24             	add    eax,0x24
c0015a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7b:	6a 00                	push   0x0
c0015a7d:	68 81 52 01 c0       	push   0xc0015281
c0015a82:	6a 03                	push   0x3
c0015a84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a87:	ff d0                	call   eax
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a91:	83 c0 24             	add    eax,0x24
c0015a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a96:	6a 00                	push   0x0
c0015a98:	68 81 52 01 c0       	push   0xc0015281
c0015a9d:	6a 04                	push   0x4
c0015a9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa2:	ff d0                	call   eax
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aac:	83 c0 24             	add    eax,0x24
c0015aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab1:	6a 00                	push   0x0
c0015ab3:	68 81 52 01 c0       	push   0xc0015281
c0015ab8:	6a 05                	push   0x5
c0015aba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abd:	ff d0                	call   eax
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	83 c0 24             	add    eax,0x24
c0015aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acc:	6a 00                	push   0x0
c0015ace:	68 a0 52 01 c0       	push   0xc00152a0
c0015ad3:	6a 06                	push   0x6
c0015ad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad8:	ff d0                	call   eax
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	83 c0 24             	add    eax,0x24
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	6a 00                	push   0x0
c0015ae9:	68 dd 51 01 c0       	push   0xc00151dd
c0015aee:	6a 07                	push   0x7
c0015af0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	83 c0 24             	add    eax,0x24
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	6a 00                	push   0x0
c0015b04:	68 c6 49 01 c0       	push   0xc00149c6
c0015b09:	6a 08                	push   0x8
c0015b0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0e:	ff d0                	call   eax
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	83 c0 24             	add    eax,0x24
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	6a 00                	push   0x0
c0015b1f:	68 81 52 01 c0       	push   0xc0015281
c0015b24:	6a 09                	push   0x9
c0015b26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b29:	ff d0                	call   eax
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	83 c0 24             	add    eax,0x24
c0015b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b38:	6a 00                	push   0x0
c0015b3a:	68 81 52 01 c0       	push   0xc0015281
c0015b3f:	6a 0a                	push   0xa
c0015b41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b44:	ff d0                	call   eax
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	83 c0 24             	add    eax,0x24
c0015b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b53:	6a 00                	push   0x0
c0015b55:	68 81 52 01 c0       	push   0xc0015281
c0015b5a:	6a 0b                	push   0xb
c0015b5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5f:	ff d0                	call   eax
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	83 c0 24             	add    eax,0x24
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	6a 00                	push   0x0
c0015b70:	68 81 52 01 c0       	push   0xc0015281
c0015b75:	6a 0c                	push   0xc
c0015b77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7a:	ff d0                	call   eax
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	83 c0 24             	add    eax,0x24
c0015b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b89:	6a 00                	push   0x0
c0015b8b:	68 0c 52 01 c0       	push   0xc001520c
c0015b90:	6a 0d                	push   0xd
c0015b92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b95:	ff d0                	call   eax
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	83 c0 24             	add    eax,0x24
c0015ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba4:	6a 00                	push   0x0
c0015ba6:	68 45 52 01 c0       	push   0xc0015245
c0015bab:	6a 0e                	push   0xe
c0015bad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb0:	ff d0                	call   eax
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	83 c0 24             	add    eax,0x24
c0015bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbf:	6a 00                	push   0x0
c0015bc1:	68 81 52 01 c0       	push   0xc0015281
c0015bc6:	6a 0f                	push   0xf
c0015bc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcb:	ff d0                	call   eax
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	83 c0 24             	add    eax,0x24
c0015bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bda:	6a 00                	push   0x0
c0015bdc:	68 81 52 01 c0       	push   0xc0015281
c0015be1:	6a 10                	push   0x10
c0015be3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be6:	ff d0                	call   eax
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	83 c0 24             	add    eax,0x24
c0015bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf5:	6a 00                	push   0x0
c0015bf7:	68 81 52 01 c0       	push   0xc0015281
c0015bfc:	6a 11                	push   0x11
c0015bfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c01:	ff d0                	call   eax
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	83 c0 24             	add    eax,0x24
c0015c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c10:	6a 00                	push   0x0
c0015c12:	68 81 52 01 c0       	push   0xc0015281
c0015c17:	6a 12                	push   0x12
c0015c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1c:	ff d0                	call   eax
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	83 c0 24             	add    eax,0x24
c0015c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2b:	6a 00                	push   0x0
c0015c2d:	68 81 52 01 c0       	push   0xc0015281
c0015c32:	6a 13                	push   0x13
c0015c34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c37:	ff d0                	call   eax
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	83 c0 24             	add    eax,0x24
c0015c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c46:	6a 00                	push   0x0
c0015c48:	68 81 52 01 c0       	push   0xc0015281
c0015c4d:	6a 14                	push   0x14
c0015c4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c52:	ff d0                	call   eax
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	83 c0 24             	add    eax,0x24
c0015c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c61:	6a 00                	push   0x0
c0015c63:	68 81 52 01 c0       	push   0xc0015281
c0015c68:	6a 1e                	push   0x1e
c0015c6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6d:	ff d0                	call   eax
c0015c6f:	83 c4 10             	add    esp,0x10
c0015c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	83 c0 24             	add    eax,0x24
c0015c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7c:	6a 00                	push   0x0
c0015c7e:	68 07 c7 01 c0       	push   0xc001c707
c0015c83:	6a 60                	push   0x60
c0015c85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c88:	ff d0                	call   eax
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c93:	c9                   	leave  
c0015c94:	c3                   	ret    
c0015c95:	90                   	nop

c0015c96 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c96:	55                   	push   ebp
c0015c97:	89 e5                	mov    ebp,esp
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	50                   	push   eax
c0015ca3:	e8 42 e9 ff ff       	call   c00145ea <Device::getName()>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8a 00                	mov    al,BYTE PTR [eax]
c0015cad:	3c 41                	cmp    al,0x41
c0015caf:	0f 94 c0             	sete   al
c0015cb2:	84 c0                	test   al,al
c0015cb4:	74 28                	je     c0015cde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cb6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cba:	7f 12                	jg     c0015cce <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cbf:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015cc4:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc6:	0f b6 c0             	movzx  eax,al
c0015cc9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ccc:	eb 10                	jmp    c0015cde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	68 40 ad 02 c0       	push   0xc002ad40
c0015cd6:	e8 a2 48 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0015cdb:	83 c4 10             	add    esp,0x10
c0015cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce1:	c9                   	leave  
c0015ce2:	c3                   	ret    
c0015ce3:	90                   	nop

c0015ce4 <startGUI(void*)>:
c0015ce4:	55                   	push   ebp
c0015ce5:	89 e5                	mov    ebp,esp
c0015ce7:	53                   	push   ebx
c0015ce8:	83 ec 04             	sub    esp,0x4
c0015ceb:	e8 89 80 00 00       	call   c001dd79 <unlockScheduler()>
c0015cf0:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015cf6:	83 ec 08             	sub    esp,0x8
c0015cf9:	6a 01                	push   0x1
c0015cfb:	68 94 b0 02 c0       	push   0xc002b094
c0015d00:	e8 ab 79 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	83 ec 08             	sub    esp,0x8
c0015d0b:	53                   	push   ebx
c0015d0c:	50                   	push   eax
c0015d0d:	e8 ed 7b 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	6a 01                	push   0x1
c0015d20:	68 ae b0 02 c0       	push   0xc002b0ae
c0015d25:	e8 86 79 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	83 ec 08             	sub    esp,0x8
c0015d30:	53                   	push   ebx
c0015d31:	50                   	push   eax
c0015d32:	e8 c8 7b 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	90                   	nop
c0015d3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3e:	c9                   	leave  
c0015d3f:	c3                   	ret    

c0015d40 <startGUIVESA(void*)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	53                   	push   ebx
c0015d44:	83 ec 04             	sub    esp,0x4
c0015d47:	e8 2d 80 00 00       	call   c001dd79 <unlockScheduler()>
c0015d4c:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	6a 01                	push   0x1
c0015d57:	68 c8 b0 02 c0       	push   0xc002b0c8
c0015d5c:	e8 4f 79 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	83 ec 08             	sub    esp,0x8
c0015d67:	53                   	push   ebx
c0015d68:	50                   	push   eax
c0015d69:	e8 91 7b 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	6a 01                	push   0x1
c0015d7c:	68 ae b0 02 c0       	push   0xc002b0ae
c0015d81:	e8 2a 79 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	53                   	push   ebx
c0015d8d:	50                   	push   eax
c0015d8e:	e8 6c 7b 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	90                   	nop
c0015d97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d9a:	c9                   	leave  
c0015d9b:	c3                   	ret    

c0015d9c <sendKeyToTerminal(unsigned char)>:
c0015d9c:	55                   	push   ebp
c0015d9d:	89 e5                	mov    ebp,esp
c0015d9f:	83 ec 28             	sub    esp,0x28
c0015da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015da8:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0015dad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	52                   	push   edx
c0015db5:	50                   	push   eax
c0015db6:	e8 8f b5 ff ff       	call   c001134a <VgaText::receiveKey(unsigned char)>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dc2:	75 41                	jne    c0015e05 <sendKeyToTerminal(unsigned char)+0x69>
c0015dc4:	e8 d5 7f 00 00       	call   c001dd9e <lockStuff()>
c0015dc9:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0015dce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dd1:	c7 05 40 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e540,0x0
c0015ddb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ddf:	74 1f                	je     c0015e00 <sendKeyToTerminal(unsigned char)+0x64>
c0015de1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015de7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ded:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015df6:	e8 93 85 00 00       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	eb db                	jmp    c0015ddb <sendKeyToTerminal(unsigned char)+0x3f>
c0015e00:	e8 32 83 00 00       	call   c001e137 <unlockStuff()>
c0015e05:	90                   	nop
c0015e06:	c9                   	leave  
c0015e07:	c3                   	ret    

c0015e08 <sendKeyboardToken(KeyboardToken)>:
c0015e08:	55                   	push   ebp
c0015e09:	89 e5                	mov    ebp,esp
c0015e0b:	83 ec 18             	sub    esp,0x18
c0015e0e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e14:	0f b7 c0             	movzx  eax,ax
c0015e17:	83 f2 01             	xor    edx,0x1
c0015e1a:	88 90 60 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1aa0],dl
c0015e20:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0015e25:	85 c0                	test   eax,eax
c0015e27:	74 24                	je     c0015e4d <sendKeyboardToken(KeyboardToken)+0x45>
c0015e29:	8b 0d 48 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e548
c0015e2f:	83 ec 04             	sub    esp,0x4
c0015e32:	68 60 e5 02 c0       	push   0xc002e560
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	89 e2                	mov    edx,esp
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	89 02                	mov    DWORD PTR [edx],eax
c0015e41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e44:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e48:	ff d1                	call   ecx
c0015e4a:	83 c4 10             	add    esp,0x10
c0015e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e50:	66 3d 03 02          	cmp    ax,0x203
c0015e54:	75 07                	jne    c0015e5d <sendKeyboardToken(KeyboardToken)+0x55>
c0015e56:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c0015e5b:	84 c0                	test   al,al
c0015e5d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e61:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e64:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015e69:	38 c2                	cmp    dl,al
c0015e6b:	74 1c                	je     c0015e89 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e6d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e70:	a2 68 e9 02 c0       	mov    ds:0xc002e968,al
c0015e75:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015e7a:	0f b6 c0             	movzx  eax,al
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	50                   	push   eax
c0015e81:	e8 24 a7 ff ff       	call   c00105aa <setTerminalScrollLock(bool)>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e8c:	84 c0                	test   al,al
c0015e8e:	0f 84 ae 00 00 00    	je     c0015f42 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e97:	66 3d 10 03          	cmp    ax,0x310
c0015e9b:	75 06                	jne    c0015ea3 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e9d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea6:	66 3d 11 03          	cmp    ax,0x311
c0015eaa:	75 06                	jne    c0015eb2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015eac:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb5:	66 3d 12 03          	cmp    ax,0x312
c0015eb9:	75 06                	jne    c0015ec1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ebb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	66 3d 13 03          	cmp    ax,0x313
c0015ec8:	75 06                	jne    c0015ed0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015eca:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed3:	66 3d 14 03          	cmp    ax,0x314
c0015ed7:	75 06                	jne    c0015edf <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ed9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee2:	66 3d 15 03          	cmp    ax,0x315
c0015ee6:	75 06                	jne    c0015eee <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ee8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef1:	66 3d 16 03          	cmp    ax,0x316
c0015ef5:	75 06                	jne    c0015efd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ef7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f00:	66 3d 17 03          	cmp    ax,0x317
c0015f04:	75 06                	jne    c0015f0c <sendKeyboardToken(KeyboardToken)+0x104>
c0015f06:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 3d 18 03          	cmp    ax,0x318
c0015f13:	75 06                	jne    c0015f1b <sendKeyboardToken(KeyboardToken)+0x113>
c0015f15:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 19 03          	cmp    ax,0x319
c0015f22:	75 06                	jne    c0015f2a <sendKeyboardToken(KeyboardToken)+0x122>
c0015f24:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2d:	66 3d 1a 03          	cmp    ax,0x31a
c0015f31:	0f 85 c9 00 00 00    	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f37:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f3d:	e9 be 00 00 00       	jmp    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f45:	66 3d 10 03          	cmp    ax,0x310
c0015f49:	75 0a                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f4b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 11 03          	cmp    ax,0x311
c0015f5c:	75 0a                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f5e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 12 03          	cmp    ax,0x312
c0015f6f:	75 0a                	jne    c0015f7b <sendKeyboardToken(KeyboardToken)+0x173>
c0015f71:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7e:	66 3d 13 03          	cmp    ax,0x313
c0015f82:	75 0a                	jne    c0015f8e <sendKeyboardToken(KeyboardToken)+0x186>
c0015f84:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 14 03          	cmp    ax,0x314
c0015f95:	75 0a                	jne    c0015fa1 <sendKeyboardToken(KeyboardToken)+0x199>
c0015f97:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 15 03          	cmp    ax,0x315
c0015fa8:	75 0a                	jne    c0015fb4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015faa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fb0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb7:	66 3d 16 03          	cmp    ax,0x316
c0015fbb:	75 0a                	jne    c0015fc7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fbd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fc3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fca:	66 3d 17 03          	cmp    ax,0x317
c0015fce:	75 0a                	jne    c0015fda <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015fd0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015fd6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 18 03          	cmp    ax,0x318
c0015fe1:	75 0a                	jne    c0015fed <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015fe3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015fe9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff0:	66 3d 19 03          	cmp    ax,0x319
c0015ff4:	75 0a                	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ffc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 00 02          	cmp    ax,0x200
c0016007:	75 2c                	jne    c0016035 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016009:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c001600e:	83 f0 01             	xor    eax,0x1
c0016011:	84 c0                	test   al,al
c0016013:	74 20                	je     c0016035 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016015:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001601a:	6a 01                	push   0x1
c001601c:	6a 00                	push   0x0
c001601e:	68 e4 5c 01 c0       	push   0xc0015ce4
c0016023:	50                   	push   eax
c0016024:	e8 7f 7e 00 00       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c0016033:	eb 33                	jmp    c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c0016035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016038:	66 3d 01 02          	cmp    ax,0x201
c001603c:	75 2a                	jne    c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c001603e:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0016043:	83 f0 01             	xor    eax,0x1
c0016046:	84 c0                	test   al,al
c0016048:	74 1e                	je     c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c001604a:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001604f:	6a 01                	push   0x1
c0016051:	6a 00                	push   0x0
c0016053:	68 40 5d 01 c0       	push   0xc0015d40
c0016058:	50                   	push   eax
c0016059:	e8 4a 7e 00 00       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c0016068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606b:	66 3d 1d 03          	cmp    ax,0x31d
c001606f:	75 06                	jne    c0016077 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016071:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607a:	66 3d 1c 03          	cmp    ax,0x31c
c001607e:	75 06                	jne    c0016086 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016080:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016089:	66 3d 1b 03          	cmp    ax,0x31b
c001608d:	75 06                	jne    c0016095 <sendKeyboardToken(KeyboardToken)+0x28d>
c001608f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 3d 1e 03          	cmp    ax,0x31e
c001609c:	75 06                	jne    c00160a4 <sendKeyboardToken(KeyboardToken)+0x29c>
c001609e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a7:	66 3d 1f 03          	cmp    ax,0x31f
c00160ab:	75 06                	jne    c00160b3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160ad:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 1a 03          	cmp    ax,0x31a
c00160ba:	75 06                	jne    c00160c2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160bc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160c2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160c9:	83 f0 01             	xor    eax,0x1
c00160cc:	84 c0                	test   al,al
c00160ce:	74 77                	je     c0016147 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160d0:	a0 61 e6 02 c0       	mov    al,ds:0xc002e661
c00160d5:	84 c0                	test   al,al
c00160d7:	74 41                	je     c001611a <sendKeyboardToken(KeyboardToken)+0x312>
c00160d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160dd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00160e1:	74 2b                	je     c001610e <sendKeyboardToken(KeyboardToken)+0x306>
c00160e3:	8b 15 64 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e964
c00160e9:	89 d0                	mov    eax,edx
c00160eb:	c1 e0 02             	shl    eax,0x2
c00160ee:	01 d0                	add    eax,edx
c00160f0:	01 c0                	add    eax,eax
c00160f2:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c00160f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fa:	0f b7 c0             	movzx  eax,ax
c00160fd:	8d 50 d0             	lea    edx,[eax-0x30]
c0016100:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016105:	01 d0                	add    eax,edx
c0016107:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c001610c:	eb 6d                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c001610e:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c0016118:	eb 61                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c001611a:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c001611f:	85 c0                	test   eax,eax
c0016121:	74 18                	je     c001613b <sendKeyboardToken(KeyboardToken)+0x333>
c0016123:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016128:	0f b6 c0             	movzx  eax,al
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	50                   	push   eax
c001612f:	e8 68 fc ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001613b:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c0016145:	eb 34                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 01 01          	cmp    ax,0x101
c001614e:	75 2b                	jne    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c0016150:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016155:	85 c0                	test   eax,eax
c0016157:	74 18                	je     c0016171 <sendKeyboardToken(KeyboardToken)+0x369>
c0016159:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c001615e:	0f b6 c0             	movzx  eax,al
c0016161:	83 ec 0c             	sub    esp,0xc
c0016164:	50                   	push   eax
c0016165:	e8 32 fc ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016171:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c001617b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001617e:	83 f0 01             	xor    eax,0x1
c0016181:	84 c0                	test   al,al
c0016183:	74 4c                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016185:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016188:	83 f0 01             	xor    eax,0x1
c001618b:	84 c0                	test   al,al
c001618d:	74 42                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001618f:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c0016194:	83 f0 01             	xor    eax,0x1
c0016197:	84 c0                	test   al,al
c0016199:	74 36                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001619b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619e:	66 83 f8 1f          	cmp    ax,0x1f
c00161a2:	76 09                	jbe    c00161ad <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a7:	66 83 f8 7e          	cmp    ax,0x7e
c00161ab:	76 12                	jbe    c00161bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b0:	66 83 f8 0a          	cmp    ax,0xa
c00161b4:	74 09                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b9:	66 83 f8 08          	cmp    ax,0x8
c00161bd:	75 12                	jne    c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c2:	0f b6 c0             	movzx  eax,al
c00161c5:	83 ec 0c             	sub    esp,0xc
c00161c8:	50                   	push   eax
c00161c9:	e8 ce fb ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161d4:	83 f0 01             	xor    eax,0x1
c00161d7:	84 c0                	test   al,al
c00161d9:	74 4f                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161de:	83 f0 01             	xor    eax,0x1
c00161e1:	84 c0                	test   al,al
c00161e3:	74 45                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161e5:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c00161ea:	84 c0                	test   al,al
c00161ec:	74 3c                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f1:	66 83 f8 3f          	cmp    ax,0x3f
c00161f5:	76 33                	jbe    c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fa:	66 83 f8 7f          	cmp    ax,0x7f
c00161fe:	77 2a                	ja     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c0016200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016203:	88 c2                	mov    dl,al
c0016205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016208:	66 83 f8 5f          	cmp    ax,0x5f
c001620c:	76 04                	jbe    c0016212 <sendKeyboardToken(KeyboardToken)+0x40a>
c001620e:	b0 20                	mov    al,0x20
c0016210:	eb 02                	jmp    c0016214 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016212:	b0 00                	mov    al,0x0
c0016214:	29 c2                	sub    edx,eax
c0016216:	88 d0                	mov    al,dl
c0016218:	83 e8 40             	sub    eax,0x40
c001621b:	0f b6 c0             	movzx  eax,al
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	50                   	push   eax
c0016222:	e8 75 fb ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622d:	66 3d 00 03          	cmp    ax,0x300
c0016231:	75 0f                	jne    c0016242 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016233:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016236:	83 f0 01             	xor    eax,0x1
c0016239:	84 c0                	test   al,al
c001623b:	74 05                	je     c0016242 <sendKeyboardToken(KeyboardToken)+0x43a>
c001623d:	e8 9d ab ff ff       	call   c0010ddf <doTerminalCycle()>
c0016242:	90                   	nop
c0016243:	c9                   	leave  
c0016244:	c3                   	ret    

c0016245 <clearInternalKeybuffer(VgaText*)>:
c0016245:	55                   	push   ebp
c0016246:	89 e5                	mov    ebp,esp
c0016248:	83 ec 08             	sub    esp,0x8
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	05 34 11 00 00       	add    eax,0x1134
c0016253:	83 ec 0c             	sub    esp,0xc
c0016256:	50                   	push   eax
c0016257:	e8 38 a5 fe ff       	call   c0000794 <strlen>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016262:	81 c2 34 11 00 00    	add    edx,0x1134
c0016268:	83 ec 04             	sub    esp,0x4
c001626b:	50                   	push   eax
c001626c:	6a 00                	push   0x0
c001626e:	52                   	push   edx
c001626f:	e8 04 a5 fe ff       	call   c0000778 <memset>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	90                   	nop
c0016278:	c9                   	leave  
c0016279:	c3                   	ret    

c001627a <readKeyboard(VgaText*, char*, unsigned long)>:
c001627a:	55                   	push   ebp
c001627b:	89 e5                	mov    ebp,esp
c001627d:	83 ec 18             	sub    esp,0x18
c0016280:	fb                   	sti    
c0016281:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016288:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001628c:	0f 84 8a 00 00 00    	je     c001631c <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016295:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001629b:	84 c0                	test   al,al
c001629d:	75 11                	jne    c00162b0 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001629f:	e8 d3 7a 00 00       	call   c001dd77 <lockScheduler()>
c00162a4:	e8 09 7e 00 00       	call   c001e0b2 <schedule()>
c00162a9:	e8 cb 7a 00 00       	call   c001dd79 <unlockScheduler()>
c00162ae:	eb e2                	jmp    c0016292 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162b3:	8d 50 01             	lea    edx,[eax+0x1]
c00162b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162bc:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162c2:	88 10                	mov    BYTE PTR [eax],dl
c00162c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162cd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00162d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d3:	05 34 11 00 00       	add    eax,0x1134
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	50                   	push   eax
c00162dc:	e8 b3 a4 fe ff       	call   c0000794 <strlen>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e7:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ed:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f3:	81 c2 34 11 00 00    	add    edx,0x1134
c00162f9:	83 ec 04             	sub    esp,0x4
c00162fc:	50                   	push   eax
c00162fd:	51                   	push   ecx
c00162fe:	52                   	push   edx
c00162ff:	e8 78 a3 fe ff       	call   c000067c <memmove>
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001630a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001630d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016311:	0f 85 71 ff ff ff    	jne    c0016288 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016317:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001631a:	eb 03                	jmp    c001631f <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001631c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001631f:	c9                   	leave  
c0016320:	c3                   	ret    
c0016321:	90                   	nop

c0016322 <Keyboard::Keyboard(char const*)>:
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016329:	83 ec 08             	sub    esp,0x8
c001632c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016330:	50                   	push   eax
c0016331:	e8 b8 e1 ff ff       	call   c00144ee <Device::Device(char const*)>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c001633e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016342:	89 10                	mov    DWORD PTR [eax],edx
c0016344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016348:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016352:	c6 05 44 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e544,0x1
c0016359:	90                   	nop
c001635a:	83 c4 0c             	add    esp,0xc
c001635d:	c3                   	ret    

c001635e <Keyboard::~Keyboard()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 57 de ff ff       	call   c00141d0 <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <Keyboard::~Keyboard()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <Keyboard::~Keyboard()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 5c 01 00 00       	push   0x15c
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 53 ca ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <LogicalDisk::close(int, int, void*)>:
c00163ac:	83 c8 ff             	or     eax,0xffffffff
c00163af:	c3                   	ret    

c00163b0 <LogicalDisk::~LogicalDisk()>:
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	ba 9c b1 02 c0       	mov    edx,0xc002b19c
c00163b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bc:	89 10                	mov    DWORD PTR [eax],edx
c00163be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c2:	83 ec 0c             	sub    esp,0xc
c00163c5:	50                   	push   eax
c00163c6:	e8 05 de ff ff       	call   c00141d0 <Device::~Device()>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	90                   	nop
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	c3                   	ret    
c00163d3:	90                   	nop

c00163d4 <LogicalDisk::~LogicalDisk()>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	83 ec 0c             	sub    esp,0xc
c00163da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163de:	e8 cd ff ff ff       	call   c00163b0 <LogicalDisk::~LogicalDisk()>
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	83 ec 08             	sub    esp,0x8
c00163e9:	68 74 01 00 00       	push   0x174
c00163ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f2:	e8 01 ca ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	83 c4 0c             	add    esp,0xc
c00163fd:	c3                   	ret    

c00163fe <LogicalDisk::open(int, int, void*)>:
c00163fe:	83 ec 18             	sub    esp,0x18
c0016401:	68 18 b1 02 c0       	push   0xc002b118
c0016406:	e8 72 41 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001640b:	83 c8 ff             	or     eax,0xffffffff
c001640e:	83 c4 1c             	add    esp,0x1c
c0016411:	c3                   	ret    

c0016412 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016412:	53                   	push   ebx
c0016413:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001641b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016425:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001642b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016431:	77 10                	ja     c0016443 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016433:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016439:	89 d3                	mov    ebx,edx
c001643b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016441:	72 05                	jb     c0016448 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016443:	83 c8 ff             	or     eax,0xffffffff
c0016446:	89 c2                	mov    edx,eax
c0016448:	5b                   	pop    ebx
c0016449:	c3                   	ret    

c001644a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001644a:	56                   	push   esi
c001644b:	83 c8 ff             	or     eax,0xffffffff
c001644e:	53                   	push   ebx
c001644f:	89 c2                	mov    edx,eax
c0016451:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016455:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016459:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001645d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016463:	77 27                	ja     c001648c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016465:	89 d8                	mov    eax,ebx
c0016467:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001646d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016473:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016478:	89 c2                	mov    edx,eax
c001647a:	73 10                	jae    c001648c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001647c:	89 c8                	mov    eax,ecx
c001647e:	89 da                	mov    edx,ebx
c0016480:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016486:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001648c:	5b                   	pop    ebx
c001648d:	5e                   	pop    esi
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016490:	83 ec 1c             	sub    esp,0x1c
c0016493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001649b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001649f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00164aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164bd:	50                   	push   eax
c00164be:	e8 2b e0 ff ff       	call   c00144ee <Device::Device(char const*)>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	ba 9c b1 02 c0       	mov    edx,0xc002b19c
c00164cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164cf:	89 10                	mov    DWORD PTR [eax],edx
c00164d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164eb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164f5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016501:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016507:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001650d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016511:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016518:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001651e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016528:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001652c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016536:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016540:	90                   	nop
c0016541:	83 c4 1c             	add    esp,0x1c
c0016544:	c3                   	ret    
c0016545:	90                   	nop

c0016546 <LogicalDisk::assignDriveLetter()>:
c0016546:	55                   	push   ebp
c0016547:	57                   	push   edi
c0016548:	56                   	push   esi
c0016549:	53                   	push   ebx
c001654a:	83 ec 14             	sub    esp,0x14
c001654d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016551:	8b 3d 80 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e980
c0016557:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001655d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016561:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016567:	8b 3d 84 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e984
c001656d:	3c 01                	cmp    al,0x1
c001656f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016573:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016577:	19 c0                	sbb    eax,eax
c0016579:	83 e0 02             	and    eax,0x2
c001657c:	83 c0 41             	add    eax,0x41
c001657f:	0f be e8             	movsx  ebp,al
c0016582:	3c 43                	cmp    al,0x43
c0016584:	75 10                	jne    c0016596 <LogicalDisk::assignDriveLetter()+0x50>
c0016586:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001658d:	75 5d                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c001658f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016594:	75 56                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c0016596:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016599:	ba 01 00 00 00       	mov    edx,0x1
c001659e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165a2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165a6:	d3 e2                	shl    edx,cl
c00165a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165ac:	89 d7                	mov    edi,edx
c00165ae:	89 d6                	mov    esi,edx
c00165b0:	c1 ff 1f             	sar    edi,0x1f
c00165b3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165b7:	21 f9                	and    ecx,edi
c00165b9:	09 d1                	or     ecx,edx
c00165bb:	75 2f                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c00165bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165c5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165cb:	09 f2                	or     edx,esi
c00165cd:	89 15 80 e9 02 c0    	mov    DWORD PTR ds:0xc002e980,edx
c00165d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d7:	09 fa                	or     edx,edi
c00165d9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00165dd:	89 15 84 e9 02 c0    	mov    DWORD PTR ds:0xc002e984,edx
c00165e3:	89 1c bd a0 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1660],ebx
c00165ea:	eb 08                	jmp    c00165f4 <LogicalDisk::assignDriveLetter()+0xae>
c00165ec:	45                   	inc    ebp
c00165ed:	40                   	inc    eax
c00165ee:	3c 5b                	cmp    al,0x5b
c00165f0:	75 90                	jne    c0016582 <LogicalDisk::assignDriveLetter()+0x3c>
c00165f2:	31 c0                	xor    eax,eax
c00165f4:	83 c4 14             	add    esp,0x14
c00165f7:	5b                   	pop    ebx
c00165f8:	5e                   	pop    esi
c00165f9:	5f                   	pop    edi
c00165fa:	5d                   	pop    ebp
c00165fb:	c3                   	ret    

c00165fc <LogicalDisk::mount()>:
c00165fc:	56                   	push   esi
c00165fd:	53                   	push   ebx
c00165fe:	51                   	push   ecx
c00165ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016603:	8b 1d 10 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e510
c0016609:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016613:	85 db                	test   ebx,ebx
c0016615:	74 50                	je     c0016667 <LogicalDisk::mount()+0x6b>
c0016617:	e8 46 77 00 00       	call   c001dd62 <getIRQNestingLevel()>
c001661c:	52                   	push   edx
c001661d:	52                   	push   edx
c001661e:	50                   	push   eax
c001661f:	68 3c b1 02 c0       	push   0xc002b13c
c0016624:	e8 af c8 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0016629:	83 c4 0c             	add    esp,0xc
c001662c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016633:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016635:	83 e8 41             	sub    eax,0x41
c0016638:	50                   	push   eax
c0016639:	56                   	push   esi
c001663a:	53                   	push   ebx
c001663b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	84 c0                	test   al,al
c0016643:	74 08                	je     c001664d <LogicalDisk::mount()+0x51>
c0016645:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001664b:	eb 1c                	jmp    c0016669 <LogicalDisk::mount()+0x6d>
c001664d:	e8 10 77 00 00       	call   c001dd62 <getIRQNestingLevel()>
c0016652:	51                   	push   ecx
c0016653:	51                   	push   ecx
c0016654:	50                   	push   eax
c0016655:	68 57 b1 02 c0       	push   0xc002b157
c001665a:	e8 79 c8 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001665f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016662:	83 c4 10             	add    esp,0x10
c0016665:	eb ac                	jmp    c0016613 <LogicalDisk::mount()+0x17>
c0016667:	31 c0                	xor    eax,eax
c0016669:	5a                   	pop    edx
c001666a:	5b                   	pop    ebx
c001666b:	5e                   	pop    esi
c001666c:	c3                   	ret    
c001666d:	90                   	nop

c001666e <LogicalDisk::unmount()>:
c001666e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016672:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001667c:	c3                   	ret    
c001667d:	90                   	nop

c001667e <LogicalDisk::eject()>:
c001667e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016682:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016688:	8b 10                	mov    edx,DWORD PTR [eax]
c001668a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001668e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016691:	90                   	nop

c0016692 <LogicalDisk::unassignDriveLetter()>:
c0016692:	57                   	push   edi
c0016693:	56                   	push   esi
c0016694:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016698:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001669f:	84 c9                	test   cl,cl
c00166a1:	75 0f                	jne    c00166b2 <LogicalDisk::unassignDriveLetter()+0x20>
c00166a3:	c7 44 24 0c 72 b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b172
c00166ab:	5e                   	pop    esi
c00166ac:	5f                   	pop    edi
c00166ad:	e9 cb 3e 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c00166b2:	83 e9 41             	sub    ecx,0x41
c00166b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166bc:	b8 01 00 00 00       	mov    eax,0x1
c00166c1:	c7 04 8d a0 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1660],0x0
c00166cc:	d3 e0                	shl    eax,cl
c00166ce:	89 c7                	mov    edi,eax
c00166d0:	f7 d0                	not    eax
c00166d2:	c1 ff 1f             	sar    edi,0x1f
c00166d5:	21 05 80 e9 02 c0    	and    DWORD PTR ds:0xc002e980,eax
c00166db:	89 fe                	mov    esi,edi
c00166dd:	f7 d6                	not    esi
c00166df:	21 35 84 e9 02 c0    	and    DWORD PTR ds:0xc002e984,esi
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    

c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166e8:	57                   	push   edi
c00166e9:	56                   	push   esi
c00166ea:	53                   	push   ebx
c00166eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016701:	77 41                	ja     c0016744 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016703:	99                   	cdq    
c0016704:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001670a:	01 c8                	add    eax,ecx
c001670c:	11 da                	adc    edx,ebx
c001670e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016714:	19 d7                	sbb    edi,edx
c0016716:	72 33                	jb     c001674b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016718:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001671e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016724:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016728:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001672c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016732:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016738:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001673c:	5b                   	pop    ebx
c001673d:	5e                   	pop    esi
c001673e:	5f                   	pop    edi
c001673f:	e9 b0 0a 00 00       	jmp    c00171f4 <VCache::read(unsigned long long, int, void*)>
c0016744:	b8 05 00 00 00       	mov    eax,0x5
c0016749:	eb 05                	jmp    c0016750 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001674b:	b8 07 00 00 00       	mov    eax,0x7
c0016750:	5b                   	pop    ebx
c0016751:	5e                   	pop    esi
c0016752:	5f                   	pop    edi
c0016753:	c3                   	ret    

c0016754 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016754:	57                   	push   edi
c0016755:	56                   	push   esi
c0016756:	53                   	push   ebx
c0016757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001675b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001675f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016767:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001676d:	77 41                	ja     c00167b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001676f:	99                   	cdq    
c0016770:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016776:	01 c8                	add    eax,ecx
c0016778:	11 da                	adc    edx,ebx
c001677a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016780:	19 d7                	sbb    edi,edx
c0016782:	72 33                	jb     c00167b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016784:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001678a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016790:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016794:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016798:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001679e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a8:	5b                   	pop    ebx
c00167a9:	5e                   	pop    esi
c00167aa:	5f                   	pop    edi
c00167ab:	e9 4e 09 00 00       	jmp    c00170fe <VCache::write(unsigned long long, int, void*)>
c00167b0:	b8 05 00 00 00       	mov    eax,0x5
c00167b5:	eb 05                	jmp    c00167bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167b7:	b8 07 00 00 00       	mov    eax,0x7
c00167bc:	5b                   	pop    ebx
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    

c00167c0 <Mouse::Mouse(char const*)>:
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ce:	50                   	push   eax
c00167cf:	e8 1a dd ff ff       	call   c00144ee <Device::Device(char const*)>
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c00167dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e0:	89 10                	mov    DWORD PTR [eax],edx
c00167e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167f0:	90                   	nop
c00167f1:	83 c4 0c             	add    esp,0xc
c00167f4:	c3                   	ret    
c00167f5:	90                   	nop

c00167f6 <Mouse::~Mouse()>:
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c00167fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016802:	89 10                	mov    DWORD PTR [eax],edx
c0016804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	50                   	push   eax
c001680c:	e8 bf d9 ff ff       	call   c00141d0 <Device::~Device()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	90                   	nop
c0016815:	83 c4 0c             	add    esp,0xc
c0016818:	c3                   	ret    
c0016819:	90                   	nop

c001681a <Mouse::~Mouse()>:
c001681a:	83 ec 0c             	sub    esp,0xc
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016824:	e8 cd ff ff ff       	call   c00167f6 <Mouse::~Mouse()>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	83 ec 08             	sub    esp,0x8
c001682f:	68 58 01 00 00       	push   0x158
c0016834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016838:	e8 bb c5 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	83 c4 0c             	add    esp,0xc
c0016843:	c3                   	ret    

c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016844:	55                   	push   ebp
c0016845:	57                   	push   edi
c0016846:	56                   	push   esi
c0016847:	53                   	push   ebx
c0016848:	81 ec 28 01 00 00    	sub    esp,0x128
c001684e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016855:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001685c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016863:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001686a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001686e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016872:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016879:	e8 6c dd ff ff       	call   c00145ea <Device::getName()>
c001687e:	5a                   	pop    edx
c001687f:	59                   	pop    ecx
c0016880:	50                   	push   eax
c0016881:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016885:	55                   	push   ebp
c0016886:	e8 a9 9f fe ff       	call   c0000834 <strcpy>
c001688b:	5b                   	pop    ebx
c001688c:	58                   	pop    eax
c001688d:	68 ec b1 02 c0       	push   0xc002b1ec
c0016892:	55                   	push   ebp
c0016893:	e8 dc a0 fe ff       	call   c0000974 <strcat>
c0016898:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001689f:	e8 9f 8f ff ff       	call   c000f843 <malloc>
c00168a4:	83 c4 0c             	add    esp,0xc
c00168a7:	89 c3                	mov    ebx,eax
c00168a9:	57                   	push   edi
c00168aa:	56                   	push   esi
c00168ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168b3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168ba:	55                   	push   ebp
c00168bb:	50                   	push   eax
c00168bc:	e8 cf fb ff ff       	call   c0016490 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168c1:	83 c4 14             	add    esp,0x14
c00168c4:	53                   	push   ebx
c00168c5:	e8 7c fc ff ff       	call   c0016546 <LogicalDisk::assignDriveLetter()>
c00168ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168cd:	89 c6                	mov    esi,eax
c00168cf:	e8 28 fd ff ff       	call   c00165fc <LogicalDisk::mount()>
c00168d4:	58                   	pop    eax
c00168d5:	5a                   	pop    edx
c00168d6:	53                   	push   ebx
c00168d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168de:	e8 1b da ff ff       	call   c00142fe <Device::addChild(Device*)>
c00168e3:	59                   	pop    ecx
c00168e4:	89 f0                	mov    eax,esi
c00168e6:	5b                   	pop    ebx
c00168e7:	0f be f0             	movsx  esi,al
c00168ea:	56                   	push   esi
c00168eb:	68 f7 b1 02 c0       	push   0xc002b1f7
c00168f0:	e8 e3 c5 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00168f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168fb:	5b                   	pop    ebx
c00168fc:	5e                   	pop    esi
c00168fd:	5f                   	pop    edi
c00168fe:	5d                   	pop    ebp
c00168ff:	c3                   	ret    

c0016900 <createPartitionsForDisk(PhysicalDisk*)>:
c0016900:	55                   	push   ebp
c0016901:	57                   	push   edi
c0016902:	56                   	push   esi
c0016903:	53                   	push   ebx
c0016904:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001690a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016911:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016917:	3d 00 02 00 00       	cmp    eax,0x200
c001691c:	74 27                	je     c0016945 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001691e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016924:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001692a:	83 ec 10             	sub    esp,0x10
c001692d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016931:	99                   	cdq    
c0016932:	c1 e6 0a             	shl    esi,0xa
c0016935:	52                   	push   edx
c0016936:	89 fd                	mov    ebp,edi
c0016938:	50                   	push   eax
c0016939:	55                   	push   ebp
c001693a:	56                   	push   esi
c001693b:	e8 3c 00 01 00       	call   c002697c <__udivdi3>
c0016940:	e9 b1 00 00 00       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001694a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001694e:	56                   	push   esi
c001694f:	6a 01                	push   0x1
c0016951:	6a 00                	push   0x0
c0016953:	6a 00                	push   0x0
c0016955:	53                   	push   ebx
c0016956:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016959:	83 c4 20             	add    esp,0x20
c001695c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016964:	75 0a                	jne    c0016970 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016966:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001696e:	74 2c                	je     c001699c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016970:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016976:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001697c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016982:	83 ec 10             	sub    esp,0x10
c0016985:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016989:	89 f7                	mov    edi,esi
c001698b:	c1 e0 0a             	shl    eax,0xa
c001698e:	c1 ff 1f             	sar    edi,0x1f
c0016991:	57                   	push   edi
c0016992:	56                   	push   esi
c0016993:	52                   	push   edx
c0016994:	50                   	push   eax
c0016995:	e8 e2 ff 00 00       	call   c002697c <__udivdi3>
c001699a:	eb 5a                	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001699c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169a3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169aa:	83 e1 7f             	and    ecx,0x7f
c00169ad:	83 e0 7f             	and    eax,0x7f
c00169b0:	01 c1                	add    ecx,eax
c00169b2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169b9:	83 e0 7f             	and    eax,0x7f
c00169bc:	01 c1                	add    ecx,eax
c00169be:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169c5:	83 e0 7f             	and    eax,0x7f
c00169c8:	00 c1                	add    cl,al
c00169ca:	74 41                	je     c0016a0d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169de:	83 ec 10             	sub    esp,0x10
c00169e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169e5:	89 f7                	mov    edi,esi
c00169e7:	c1 e0 0a             	shl    eax,0xa
c00169ea:	c1 ff 1f             	sar    edi,0x1f
c00169ed:	57                   	push   edi
c00169ee:	56                   	push   esi
c00169ef:	52                   	push   edx
c00169f0:	50                   	push   eax
c00169f1:	e8 86 ff 00 00       	call   c002697c <__udivdi3>
c00169f6:	83 c4 14             	add    esp,0x14
c00169f9:	52                   	push   edx
c00169fa:	50                   	push   eax
c00169fb:	6a 00                	push   0x0
c00169fd:	6a 00                	push   0x0
c00169ff:	53                   	push   ebx
c0016a00:	e8 3f fe ff ff       	call   c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a05:	83 c4 20             	add    esp,0x20
c0016a08:	e9 79 01 00 00       	jmp    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a0d:	89 f0                	mov    eax,esi
c0016a0f:	31 f6                	xor    esi,esi
c0016a11:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a18:	75 02                	jne    c0016a1c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a1a:	89 f1                	mov    ecx,esi
c0016a1c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a23:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a2a:	c1 e2 08             	shl    edx,0x8
c0016a2d:	c1 e7 10             	shl    edi,0x10
c0016a30:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a38:	09 fa                	or     edx,edi
c0016a3a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a42:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a49:	83 c0 10             	add    eax,0x10
c0016a4c:	09 fa                	or     edx,edi
c0016a4e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a55:	c1 e7 18             	shl    edi,0x18
c0016a58:	09 fa                	or     edx,edi
c0016a5a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a61:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a65:	c1 e7 10             	shl    edi,0x10
c0016a68:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a6f:	c1 e2 08             	shl    edx,0x8
c0016a72:	09 fa                	or     edx,edi
c0016a74:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a7b:	09 fa                	or     edx,edi
c0016a7d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a84:	c1 e7 18             	shl    edi,0x18
c0016a87:	09 fa                	or     edx,edi
c0016a89:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a8d:	46                   	inc    esi
c0016a8e:	83 fe 04             	cmp    esi,0x4
c0016a91:	0f 85 7a ff ff ff    	jne    c0016a11 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9b:	83 f0 01             	xor    eax,0x1
c0016a9e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016aa2:	75 57                	jne    c0016afb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa8:	83 f0 01             	xor    eax,0x1
c0016aab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016aaf:	75 4a                	jne    c0016afb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ab1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ab5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016abd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ac5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016acb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adb:	89 f7                	mov    edi,esi
c0016add:	c1 e0 0a             	shl    eax,0xa
c0016ae0:	c1 ff 1f             	sar    edi,0x1f
c0016ae3:	57                   	push   edi
c0016ae4:	56                   	push   esi
c0016ae5:	52                   	push   edx
c0016ae6:	50                   	push   eax
c0016ae7:	e8 90 fe 00 00       	call   c002697c <__udivdi3>
c0016aec:	83 c4 10             	add    esp,0x10
c0016aef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016af3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016af7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016afb:	84 c9                	test   cl,cl
c0016afd:	74 53                	je     c0016b52 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016aff:	0f b6 c9             	movzx  ecx,cl
c0016b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b1a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b1e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b32:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b36:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b3a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b3e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b4a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b4e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b52:	31 ed                	xor    ebp,ebp
c0016b54:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b58:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b5c:	89 f8                	mov    eax,edi
c0016b5e:	09 f0                	or     eax,esi
c0016b60:	74 1e                	je     c0016b80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b62:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b66:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b6a:	89 d1                	mov    ecx,edx
c0016b6c:	09 c1                	or     ecx,eax
c0016b6e:	74 10                	je     c0016b80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	57                   	push   edi
c0016b74:	56                   	push   esi
c0016b75:	52                   	push   edx
c0016b76:	50                   	push   eax
c0016b77:	53                   	push   ebx
c0016b78:	e8 c7 fc ff ff       	call   c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b7d:	83 c4 20             	add    esp,0x20
c0016b80:	45                   	inc    ebp
c0016b81:	83 fd 04             	cmp    ebp,0x4
c0016b84:	75 ce                	jne    c0016b54 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b86:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b8c:	5b                   	pop    ebx
c0016b8d:	5e                   	pop    esi
c0016b8e:	5f                   	pop    edi
c0016b8f:	5d                   	pop    ebp
c0016b90:	c3                   	ret    
c0016b91:	90                   	nop

c0016b92 <Serial::Serial(char const*)>:
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b99:	83 ec 08             	sub    esp,0x8
c0016b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ba0:	50                   	push   eax
c0016ba1:	e8 48 d9 ff ff       	call   c00144ee <Device::Device(char const*)>
c0016ba6:	83 c4 10             	add    esp,0x10
c0016ba9:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb2:	89 10                	mov    DWORD PTR [eax],edx
c0016bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bc2:	90                   	nop
c0016bc3:	83 c4 0c             	add    esp,0xc
c0016bc6:	c3                   	ret    
c0016bc7:	90                   	nop

c0016bc8 <Serial::~Serial()>:
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd4:	89 10                	mov    DWORD PTR [eax],edx
c0016bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	50                   	push   eax
c0016bde:	e8 ed d5 ff ff       	call   c00141d0 <Device::~Device()>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	90                   	nop
c0016be7:	83 c4 0c             	add    esp,0xc
c0016bea:	c3                   	ret    
c0016beb:	90                   	nop

c0016bec <Serial::~Serial()>:
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	83 ec 0c             	sub    esp,0xc
c0016bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf6:	e8 cd ff ff ff       	call   c0016bc8 <Serial::~Serial()>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	83 ec 08             	sub    esp,0x8
c0016c01:	68 58 01 00 00       	push   0x158
c0016c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0a:	e8 e9 c1 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	83 c4 0c             	add    esp,0xc
c0016c15:	c3                   	ret    

c0016c16 <Timer::Timer(char const*)>:
c0016c16:	83 ec 0c             	sub    esp,0xc
c0016c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1d:	83 ec 08             	sub    esp,0x8
c0016c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c24:	50                   	push   eax
c0016c25:	e8 c4 d8 ff ff       	call   c00144ee <Device::Device(char const*)>
c0016c2a:	83 c4 10             	add    esp,0x10
c0016c2d:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0016c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c36:	89 10                	mov    DWORD PTR [eax],edx
c0016c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c46:	90                   	nop
c0016c47:	83 c4 0c             	add    esp,0xc
c0016c4a:	c3                   	ret    
c0016c4b:	90                   	nop

c0016c4c <Timer::~Timer()>:
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0016c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c58:	89 10                	mov    DWORD PTR [eax],edx
c0016c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	50                   	push   eax
c0016c62:	e8 69 d5 ff ff       	call   c00141d0 <Device::~Device()>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	90                   	nop
c0016c6b:	83 c4 0c             	add    esp,0xc
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Timer::~Timer()>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7a:	e8 cd ff ff ff       	call   c0016c4c <Timer::~Timer()>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	83 ec 08             	sub    esp,0x8
c0016c85:	68 5c 01 00 00       	push   0x15c
c0016c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8e:	e8 65 c1 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	83 c4 0c             	add    esp,0xc
c0016c99:	c3                   	ret    

c0016c9a <Timer::read()>:
c0016c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ca4:	c3                   	ret    

c0016ca5 <timerHandler(unsigned long long)>:
c0016ca5:	55                   	push   ebp
c0016ca6:	57                   	push   edi
c0016ca7:	56                   	push   esi
c0016ca8:	53                   	push   ebx
c0016ca9:	83 ec 0c             	sub    esp,0xc
c0016cac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cb0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cb4:	01 35 10 ea 02 c0    	add    DWORD PTR ds:0xc002ea10,esi
c0016cba:	11 3d 14 ea 02 c0    	adc    DWORD PTR ds:0xc002ea14,edi
c0016cc0:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c0016cc7:	0f 84 07 01 00 00    	je     c0016dd4 <timerHandler(unsigned long long)+0x12f>
c0016ccd:	e8 cc 70 00 00       	call   c001dd9e <lockStuff()>
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	68 dc 18 03 c0       	push   0xc00318dc
c0016cda:	e8 0f 1d 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cdf:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016ce6:	89 c3                	mov    ebx,eax
c0016ce8:	e8 09 1d 01 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	84 c0                	test   al,al
c0016cf2:	74 60                	je     c0016d54 <timerHandler(unsigned long long)+0xaf>
c0016cf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cfa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cfd:	85 c0                	test   eax,eax
c0016cff:	0f 85 91 00 00 00    	jne    c0016d96 <timerHandler(unsigned long long)+0xf1>
c0016d05:	e9 be 00 00 00       	jmp    c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	55                   	push   ebp
c0016d0e:	e8 7b 76 00 00       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	39 eb                	cmp    ebx,ebp
c0016d18:	75 12                	jne    c0016d2c <timerHandler(unsigned long long)+0x87>
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	68 dc 18 03 c0       	push   0xc00318dc
c0016d22:	e8 c7 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d27:	89 c3                	mov    ebx,eax
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	68 dc 18 03 c0       	push   0xc00318dc
c0016d34:	e8 bd 1c 01 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	84 c0                	test   al,al
c0016d3e:	75 b4                	jne    c0016cf4 <timerHandler(unsigned long long)+0x4f>
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	68 dc 18 03 c0       	push   0xc00318dc
c0016d48:	e8 a1 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	39 d8                	cmp    eax,ebx
c0016d52:	74 a0                	je     c0016cf4 <timerHandler(unsigned long long)+0x4f>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 dc 18 03 c0       	push   0xc00318dc
c0016d5c:	e8 8d 1c 01 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016d68:	89 c5                	mov    ebp,eax
c0016d6a:	e8 a3 1c 01 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d6f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d78:	39 15 10 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea10,edx
c0016d7e:	a1 14 ea 02 c0       	mov    eax,ds:0xc002ea14
c0016d83:	19 c8                	sbb    eax,ecx
c0016d85:	73 83                	jae    c0016d0a <timerHandler(unsigned long long)+0x65>
c0016d87:	50                   	push   eax
c0016d88:	50                   	push   eax
c0016d89:	55                   	push   ebp
c0016d8a:	68 dc 18 03 c0       	push   0xc00318dc
c0016d8f:	e8 2c 1d 01 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d94:	eb 93                	jmp    c0016d29 <timerHandler(unsigned long long)+0x84>
c0016d96:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016d9d:	74 29                	je     c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016d9f:	39 c6                	cmp    esi,eax
c0016da1:	bb 00 00 00 00       	mov    ebx,0x0
c0016da6:	19 df                	sbb    edi,ebx
c0016da8:	72 19                	jb     c0016dc3 <timerHandler(unsigned long long)+0x11e>
c0016daa:	e8 c8 6f 00 00       	call   c001dd77 <lockScheduler()>
c0016daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016db7:	e8 f6 72 00 00       	call   c001e0b2 <schedule()>
c0016dbc:	e8 b8 6f 00 00       	call   c001dd79 <unlockScheduler()>
c0016dc1:	eb 05                	jmp    c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016dc3:	29 f0                	sub    eax,esi
c0016dc5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016dc8:	83 c4 0c             	add    esp,0xc
c0016dcb:	5b                   	pop    ebx
c0016dcc:	5e                   	pop    esi
c0016dcd:	5f                   	pop    edi
c0016dce:	5d                   	pop    ebp
c0016dcf:	e9 63 73 00 00       	jmp    c001e137 <unlockStuff()>
c0016dd4:	83 c4 0c             	add    esp,0xc
c0016dd7:	5b                   	pop    ebx
c0016dd8:	5e                   	pop    esi
c0016dd9:	5f                   	pop    edi
c0016dda:	5d                   	pop    ebp
c0016ddb:	c3                   	ret    

c0016ddc <setupTimer(int)>:
c0016ddc:	57                   	push   edi
c0016ddd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016de2:	56                   	push   esi
c0016de3:	53                   	push   ebx
c0016de4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016df7:	e8 ee d7 ff ff       	call   c00145ea <Device::getName()>
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e02:	0f 85 8d 00 00 00    	jne    c0016e95 <setupTimer(int)+0xb9>
c0016e08:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e0d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e14:	74 7f                	je     c0016e95 <setupTimer(int)+0xb9>
c0016e16:	83 ec 0c             	sub    esp,0xc
c0016e19:	68 5c 01 00 00       	push   0x15c
c0016e1e:	e8 20 8a ff ff       	call   c000f843 <malloc>
c0016e23:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e26:	89 c3                	mov    ebx,eax
c0016e28:	e8 31 f7 00 00       	call   c002655e <PIT::PIT()>
c0016e2d:	59                   	pop    ecx
c0016e2e:	5f                   	pop    edi
c0016e2f:	53                   	push   ebx
c0016e30:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016e36:	e8 c3 d4 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0016e3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e3d:	6a 00                	push   0x0
c0016e3f:	6a 00                	push   0x0
c0016e41:	56                   	push   esi
c0016e42:	53                   	push   ebx
c0016e43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e46:	83 c4 14             	add    esp,0x14
c0016e49:	68 60 01 00 00       	push   0x160
c0016e4e:	e8 f0 89 ff ff       	call   c000f843 <malloc>
c0016e53:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e56:	89 c7                	mov    edi,eax
c0016e58:	e8 b1 f5 00 00       	call   c002640e <APICTimer::APICTimer()>
c0016e5d:	6a 00                	push   0x0
c0016e5f:	6a 00                	push   0x0
c0016e61:	56                   	push   esi
c0016e62:	57                   	push   edi
c0016e63:	e8 a8 f4 00 00       	call   c0026310 <APICTimer::open(int, int, void*)>
c0016e68:	83 c4 20             	add    esp,0x20
c0016e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e6d:	6a 00                	push   0x0
c0016e6f:	6a 00                	push   0x0
c0016e71:	6a 00                	push   0x0
c0016e73:	53                   	push   ebx
c0016e74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e77:	58                   	pop    eax
c0016e78:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e7d:	5a                   	pop    edx
c0016e7e:	57                   	push   edi
c0016e7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e85:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e8b:	e8 6e d4 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	eb 33                	jmp    c0016ec8 <setupTimer(int)+0xec>
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	68 5c 01 00 00       	push   0x15c
c0016e9d:	e8 a1 89 ff ff       	call   c000f843 <malloc>
c0016ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea5:	89 c3                	mov    ebx,eax
c0016ea7:	e8 b2 f6 00 00       	call   c002655e <PIT::PIT()>
c0016eac:	58                   	pop    eax
c0016ead:	5a                   	pop    edx
c0016eae:	53                   	push   ebx
c0016eaf:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016eb5:	e8 44 d4 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0016eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ebc:	6a 00                	push   0x0
c0016ebe:	6a 00                	push   0x0
c0016ec0:	56                   	push   esi
c0016ec1:	53                   	push   ebx
c0016ec2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec5:	83 c4 20             	add    esp,0x20
c0016ec8:	89 d8                	mov    eax,ebx
c0016eca:	5b                   	pop    ebx
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	c3                   	ret    

c0016ece <VCache::VCache(PhysicalDisk*)>:
c0016ece:	53                   	push   ebx
c0016ecf:	83 ec 18             	sub    esp,0x18
c0016ed2:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c0016ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edb:	89 10                	mov    DWORD PTR [eax],edx
c0016edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eec:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016efe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f09:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f26:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f35:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f40:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f50:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f58:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f5f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f6e:	e8 d0 88 ff ff       	call   c000f843 <malloc>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	89 c3                	mov    ebx,eax
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	53                   	push   ebx
c0016f7c:	e8 15 6f 00 00       	call   c001de96 <Mutex::Mutex()>
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f88:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016fa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016faf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fb6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fc2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fc6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fc9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fde:	05 00 01 00 00       	add    eax,0x100
c0016fe3:	c1 e0 04             	shl    eax,0x4
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	50                   	push   eax
c0016fea:	e8 54 88 ff ff       	call   c000f843 <malloc>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	89 c2                	mov    edx,eax
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001700e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017012:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017018:	c1 e0 07             	shl    eax,0x7
c001701b:	83 ec 0c             	sub    esp,0xc
c001701e:	50                   	push   eax
c001701f:	e8 1f 88 ff ff       	call   c000f843 <malloc>
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	89 c2                	mov    edx,eax
c0017029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017030:	90                   	nop
c0017031:	83 c4 18             	add    esp,0x18
c0017034:	5b                   	pop    ebx
c0017035:	c3                   	ret    

c0017036 <VCache::invalidateReadBuffer()>:
c0017036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001703a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017040:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017044:	c3                   	ret    
c0017045:	90                   	nop

c0017046 <VCache::writeWriteBuffer()>:
c0017046:	53                   	push   ebx
c0017047:	83 ec 14             	sub    esp,0x14
c001704a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001704e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017051:	8b 10                	mov    edx,DWORD PTR [eax]
c0017053:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017056:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017059:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001705c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001705f:	50                   	push   eax
c0017060:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017063:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001706a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017071:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017075:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001707c:	83 c4 28             	add    esp,0x28
c001707f:	5b                   	pop    ebx
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <VCache::~VCache()>:
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c001708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708e:	89 10                	mov    DWORD PTR [eax],edx
c0017090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017094:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017097:	84 c0                	test   al,al
c0017099:	74 0f                	je     c00170aa <VCache::~VCache()+0x28>
c001709b:	83 ec 0c             	sub    esp,0xc
c001709e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a2:	e8 9f ff ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c00170a7:	83 c4 10             	add    esp,0x10
c00170aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170b1:	83 ec 0c             	sub    esp,0xc
c00170b4:	50                   	push   eax
c00170b5:	e8 99 87 ff ff       	call   c000f853 <free>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	50                   	push   eax
c00170c8:	e8 86 87 ff ff       	call   c000f853 <free>
c00170cd:	83 c4 10             	add    esp,0x10
c00170d0:	90                   	nop
c00170d1:	83 c4 0c             	add    esp,0xc
c00170d4:	c3                   	ret    
c00170d5:	90                   	nop

c00170d6 <VCache::~VCache()>:
c00170d6:	83 ec 0c             	sub    esp,0xc
c00170d9:	83 ec 0c             	sub    esp,0xc
c00170dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e0:	e8 9d ff ff ff       	call   c0017082 <VCache::~VCache()>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	83 ec 08             	sub    esp,0x8
c00170eb:	6a 44                	push   0x44
c00170ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170f1:	e8 02 bd ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00170f6:	83 c4 10             	add    esp,0x10
c00170f9:	83 c4 0c             	add    esp,0xc
c00170fc:	c3                   	ret    
c00170fd:	90                   	nop

c00170fe <VCache::write(unsigned long long, int, void*)>:
c00170fe:	55                   	push   ebp
c00170ff:	57                   	push   edi
c0017100:	56                   	push   esi
c0017101:	53                   	push   ebx
c0017102:	83 ec 28             	sub    esp,0x28
c0017105:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017109:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001710d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017111:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017118:	e8 db 71 00 00       	call   c001e2f8 <Semaphore::acquire()>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017124:	74 0c                	je     c0017132 <VCache::write(unsigned long long, int, void*)+0x34>
c0017126:	83 ec 0c             	sub    esp,0xc
c0017129:	53                   	push   ebx
c001712a:	e8 07 ff ff ff       	call   c0017036 <VCache::invalidateReadBuffer()>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017136:	74 66                	je     c001719e <VCache::write(unsigned long long, int, void*)+0xa0>
c0017138:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001713b:	99                   	cdq    
c001713c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017140:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017143:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017146:	89 c1                	mov    ecx,eax
c0017148:	89 d0                	mov    eax,edx
c001714a:	31 f1                	xor    ecx,esi
c001714c:	31 f8                	xor    eax,edi
c001714e:	89 ca                	mov    edx,ecx
c0017150:	09 c2                	or     edx,eax
c0017152:	75 3e                	jne    c0017192 <VCache::write(unsigned long long, int, void*)+0x94>
c0017154:	83 fd 01             	cmp    ebp,0x1
c0017157:	75 39                	jne    c0017192 <VCache::write(unsigned long long, int, void*)+0x94>
c0017159:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001715c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017162:	51                   	push   ecx
c0017163:	50                   	push   eax
c0017164:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017168:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001716c:	0f af c8             	imul   ecx,eax
c001716f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017172:	51                   	push   ecx
c0017173:	e8 cc 95 fe ff       	call   c0000744 <memcpy>
c0017178:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	40                   	inc    eax
c001717f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017182:	83 c0 80             	add    eax,0xffffff80
c0017185:	75 57                	jne    c00171de <VCache::write(unsigned long long, int, void*)+0xe0>
c0017187:	83 ec 0c             	sub    esp,0xc
c001718a:	53                   	push   ebx
c001718b:	e8 b6 fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c0017190:	eb 34                	jmp    c00171c6 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017192:	83 ec 0c             	sub    esp,0xc
c0017195:	53                   	push   ebx
c0017196:	e8 ab fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171a1:	83 fd 7f             	cmp    ebp,0x7f
c00171a4:	7f 25                	jg     c00171cb <VCache::write(unsigned long long, int, void*)+0xcd>
c00171a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171b3:	52                   	push   edx
c00171b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171c1:	e8 7e 95 fe ff       	call   c0000744 <memcpy>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	eb 13                	jmp    c00171de <VCache::write(unsigned long long, int, void*)+0xe0>
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00171d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171d4:	55                   	push   ebp
c00171d5:	57                   	push   edi
c00171d6:	56                   	push   esi
c00171d7:	50                   	push   eax
c00171d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171db:	83 c4 20             	add    esp,0x20
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e4:	e8 bd 76 00 00       	call   c001e8a6 <Semaphore::release()>
c00171e9:	83 c4 2c             	add    esp,0x2c
c00171ec:	31 c0                	xor    eax,eax
c00171ee:	5b                   	pop    ebx
c00171ef:	5e                   	pop    esi
c00171f0:	5f                   	pop    edi
c00171f1:	5d                   	pop    ebp
c00171f2:	c3                   	ret    
c00171f3:	90                   	nop

c00171f4 <VCache::read(unsigned long long, int, void*)>:
c00171f4:	55                   	push   ebp
c00171f5:	57                   	push   edi
c00171f6:	56                   	push   esi
c00171f7:	53                   	push   ebx
c00171f8:	83 ec 28             	sub    esp,0x28
c00171fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017203:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001720b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001720f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017213:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017217:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001721a:	e8 d9 70 00 00       	call   c001e2f8 <Semaphore::acquire()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017226:	74 0c                	je     c0017234 <VCache::read(unsigned long long, int, void*)+0x40>
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	53                   	push   ebx
c001722c:	e8 15 fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	83 fe 01             	cmp    esi,0x1
c0017237:	0f 85 80 00 00 00    	jne    c00172bd <VCache::read(unsigned long long, int, void*)+0xc9>
c001723d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017240:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017247:	75 74                	jne    c00172bd <VCache::read(unsigned long long, int, void*)+0xc9>
c0017249:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001724c:	89 d1                	mov    ecx,edx
c001724e:	f7 d9                	neg    ecx
c0017250:	89 cf                	mov    edi,ecx
c0017252:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017256:	c1 ff 1f             	sar    edi,0x1f
c0017259:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001725c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017260:	89 ce                	mov    esi,ecx
c0017262:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017266:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001726a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001726e:	89 cf                	mov    edi,ecx
c0017270:	74 0a                	je     c001727c <VCache::read(unsigned long long, int, void*)+0x88>
c0017272:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017275:	75 05                	jne    c001727c <VCache::read(unsigned long long, int, void*)+0x88>
c0017277:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001727a:	74 1c                	je     c0017298 <VCache::read(unsigned long long, int, void*)+0xa4>
c001727c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017280:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017283:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	8b 08                	mov    ecx,DWORD PTR [eax]
c001728b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001728e:	52                   	push   edx
c001728f:	57                   	push   edi
c0017290:	56                   	push   esi
c0017291:	50                   	push   eax
c0017292:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017295:	83 c4 20             	add    esp,0x20
c0017298:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001729b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172a1:	50                   	push   eax
c00172a2:	52                   	push   edx
c00172a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172a6:	48                   	dec    eax
c00172a7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172ab:	0f af c2             	imul   eax,edx
c00172ae:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172b1:	50                   	push   eax
c00172b2:	55                   	push   ebp
c00172b3:	e8 8c 94 fe ff       	call   c0000744 <memcpy>
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	eb 21                	jmp    c00172de <VCache::read(unsigned long long, int, void*)+0xea>
c00172bd:	83 ec 0c             	sub    esp,0xc
c00172c0:	53                   	push   ebx
c00172c1:	e8 70 fd ff ff       	call   c0017036 <VCache::invalidateReadBuffer()>
c00172c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172ce:	56                   	push   esi
c00172cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d7:	50                   	push   eax
c00172d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172db:	83 c4 20             	add    esp,0x20
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172e4:	e8 bd 75 00 00       	call   c001e8a6 <Semaphore::release()>
c00172e9:	83 c4 2c             	add    esp,0x2c
c00172ec:	31 c0                	xor    eax,eax
c00172ee:	5b                   	pop    ebx
c00172ef:	5e                   	pop    esi
c00172f0:	5f                   	pop    edi
c00172f1:	5d                   	pop    ebp
c00172f2:	c3                   	ret    
c00172f3:	90                   	nop

c00172f4 <Video::putrect(int, int, int, int, unsigned int)>:
c00172f4:	55                   	push   ebp
c00172f5:	57                   	push   edi
c00172f6:	56                   	push   esi
c00172f7:	53                   	push   ebx
c00172f8:	83 ec 1c             	sub    esp,0x1c
c00172fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017303:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017307:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001730b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001730f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017313:	01 df                	add    edi,ebx
c0017315:	39 fb                	cmp    ebx,edi
c0017317:	7d 1f                	jge    c0017338 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017319:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001731d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017321:	7d 12                	jge    c0017335 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017323:	8b 16                	mov    edx,DWORD PTR [esi]
c0017325:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017329:	53                   	push   ebx
c001732a:	55                   	push   ebp
c001732b:	45                   	inc    ebp
c001732c:	56                   	push   esi
c001732d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	eb e8                	jmp    c001731d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017335:	43                   	inc    ebx
c0017336:	eb dd                	jmp    c0017315 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017338:	83 c4 1c             	add    esp,0x1c
c001733b:	5b                   	pop    ebx
c001733c:	5e                   	pop    esi
c001733d:	5f                   	pop    edi
c001733e:	5d                   	pop    ebp
c001733f:	c3                   	ret    

c0017340 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017340:	55                   	push   ebp
c0017341:	57                   	push   edi
c0017342:	31 ff                	xor    edi,edi
c0017344:	56                   	push   esi
c0017345:	53                   	push   ebx
c0017346:	83 ec 1c             	sub    esp,0x1c
c0017349:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001734d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017351:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017358:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001735d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017361:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017365:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017369:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001736c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017370:	01 f9                	add    ecx,edi
c0017372:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017376:	7d 2f                	jge    c00173a7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017378:	31 f6                	xor    esi,esi
c001737a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001737e:	01 f2                	add    edx,esi
c0017380:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017384:	7d 1a                	jge    c00173a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017386:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017389:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001738c:	46                   	inc    esi
c001738d:	51                   	push   ecx
c001738e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017392:	52                   	push   edx
c0017393:	55                   	push   ebp
c0017394:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001739e:	eb da                	jmp    c001737a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173a0:	47                   	inc    edi
c00173a1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173a5:	eb c5                	jmp    c001736c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173a7:	83 c4 1c             	add    esp,0x1c
c00173aa:	5b                   	pop    ebx
c00173ab:	5e                   	pop    esi
c00173ac:	5f                   	pop    edi
c00173ad:	5d                   	pop    ebp
c00173ae:	c3                   	ret    
c00173af:	90                   	nop

c00173b0 <Video::blit(unsigned int*, int, int, int, int)>:
c00173b0:	55                   	push   ebp
c00173b1:	57                   	push   edi
c00173b2:	56                   	push   esi
c00173b3:	53                   	push   ebx
c00173b4:	83 ec 1c             	sub    esp,0x1c
c00173b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173bf:	85 c0                	test   eax,eax
c00173c1:	79 02                	jns    c00173c5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173c3:	31 c0                	xor    eax,eax
c00173c5:	c1 e0 02             	shl    eax,0x2
c00173c8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173d4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173d8:	39 d8                	cmp    eax,ebx
c00173da:	7e 49                	jle    c0017425 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173dc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173e2:	7c 41                	jl     c0017425 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173e4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173ec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173f4:	39 f9                	cmp    ecx,edi
c00173f6:	7e 22                	jle    c001741a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173f8:	83 c5 04             	add    ebp,0x4
c00173fb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017401:	7c 14                	jl     c0017417 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017403:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017405:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017408:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001740c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017410:	56                   	push   esi
c0017411:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	47                   	inc    edi
c0017418:	eb d2                	jmp    c00173ec <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001741a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001741e:	43                   	inc    ebx
c001741f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017423:	eb ab                	jmp    c00173d0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017425:	83 c4 1c             	add    esp,0x1c
c0017428:	5b                   	pop    ebx
c0017429:	5e                   	pop    esi
c001742a:	5f                   	pop    edi
c001742b:	5d                   	pop    ebp
c001742c:	c3                   	ret    
c001742d:	90                   	nop

c001742e <Video::clearScreen(unsigned int)>:
c001742e:	57                   	push   edi
c001742f:	56                   	push   esi
c0017430:	53                   	push   ebx
c0017431:	31 db                	xor    ebx,ebx
c0017433:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017437:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001743d:	7e 1f                	jle    c001745e <Video::clearScreen(unsigned int)+0x30>
c001743f:	31 ff                	xor    edi,edi
c0017441:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017447:	7e 12                	jle    c001745b <Video::clearScreen(unsigned int)+0x2d>
c0017449:	8b 06                	mov    eax,DWORD PTR [esi]
c001744b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001744f:	53                   	push   ebx
c0017450:	57                   	push   edi
c0017451:	47                   	inc    edi
c0017452:	56                   	push   esi
c0017453:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	eb e6                	jmp    c0017441 <Video::clearScreen(unsigned int)+0x13>
c001745b:	43                   	inc    ebx
c001745c:	eb d9                	jmp    c0017437 <Video::clearScreen(unsigned int)+0x9>
c001745e:	5b                   	pop    ebx
c001745f:	5e                   	pop    esi
c0017460:	5f                   	pop    edi
c0017461:	c3                   	ret    

c0017462 <Video::putpixel(int, int, unsigned int)>:
c0017462:	c7 44 24 04 a0 b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2a0
c001746a:	e9 0e 31 00 00       	jmp    c001a57d <Krnl::panic(char const*)>
c001746f:	90                   	nop

c0017470 <Video::Video(char const*)>:
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747e:	50                   	push   eax
c001747f:	e8 6a d0 ff ff       	call   c00144ee <Device::Device(char const*)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	ba 24 b3 02 c0       	mov    edx,0xc002b324
c001748c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017490:	89 10                	mov    DWORD PTR [eax],edx
c0017492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017496:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174a0:	90                   	nop
c00174a1:	83 c4 0c             	add    esp,0xc
c00174a4:	c3                   	ret    
c00174a5:	90                   	nop

c00174a6 <Video::~Video()>:
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	ba 24 b3 02 c0       	mov    edx,0xc002b324
c00174ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b2:	89 10                	mov    DWORD PTR [eax],edx
c00174b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	50                   	push   eax
c00174bc:	e8 0f cd ff ff       	call   c00141d0 <Device::~Device()>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	90                   	nop
c00174c5:	83 c4 0c             	add    esp,0xc
c00174c8:	c3                   	ret    
c00174c9:	90                   	nop

c00174ca <Video::~Video()>:
c00174ca:	83 ec 0c             	sub    esp,0xc
c00174cd:	83 ec 0c             	sub    esp,0xc
c00174d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d4:	e8 cd ff ff ff       	call   c00174a6 <Video::~Video()>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	83 ec 08             	sub    esp,0x8
c00174df:	68 64 01 00 00       	push   0x164
c00174e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174e8:	e8 0b b9 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	83 c4 0c             	add    esp,0xc
c00174f3:	c3                   	ret    

c00174f4 <Video::isMonochrome()>:
c00174f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174fe:	c3                   	ret    
c00174ff:	90                   	nop

c0017500 <Video::getWidth()>:
c0017500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017504:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001750a:	c3                   	ret    
c001750b:	90                   	nop

c001750c <Video::getHeight()>:
c001750c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017510:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017516:	c3                   	ret    
c0017517:	90                   	nop

c0017518 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017518:	55                   	push   ebp
c0017519:	57                   	push   edi
c001751a:	56                   	push   esi
c001751b:	53                   	push   ebx
c001751c:	83 ec 2c             	sub    esp,0x2c
c001751f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017523:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017527:	83 f8 01             	cmp    eax,0x1
c001752a:	19 c9                	sbb    ecx,ecx
c001752c:	31 db                	xor    ebx,ebx
c001752e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017532:	89 cd                	mov    ebp,ecx
c0017534:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001753c:	f7 d5                	not    ebp
c001753e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017544:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017548:	01 d8                	add    eax,ebx
c001754a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001754e:	56                   	push   esi
c001754f:	e8 b8 ff ff ff       	call   c001750c <Video::getHeight()>
c0017554:	59                   	pop    ecx
c0017555:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017559:	7e 70                	jle    c00175cb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001755b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001755f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017563:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017566:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001756a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001756e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017579:	89 f8                	mov    eax,edi
c001757b:	83 c0 20             	add    eax,0x20
c001757e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017582:	56                   	push   esi
c0017583:	e8 78 ff ff ff       	call   c0017500 <Video::getWidth()>
c0017588:	5a                   	pop    edx
c0017589:	39 c7                	cmp    edi,eax
c001758b:	7d 34                	jge    c00175c1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001758d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017592:	74 05                	je     c0017599 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017594:	8b 06                	mov    eax,DWORD PTR [esi]
c0017596:	55                   	push   ebp
c0017597:	eb 0d                	jmp    c00175a6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017599:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001759e:	74 12                	je     c00175b2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00175a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175aa:	57                   	push   edi
c00175ab:	56                   	push   esi
c00175ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175b6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175ba:	47                   	inc    edi
c00175bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175bf:	75 c1                	jne    c0017582 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175c1:	43                   	inc    ebx
c00175c2:	83 fb 20             	cmp    ebx,0x20
c00175c5:	0f 85 79 ff ff ff    	jne    c0017544 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175cb:	83 c4 2c             	add    esp,0x2c
c00175ce:	5b                   	pop    ebx
c00175cf:	5e                   	pop    esi
c00175d0:	5f                   	pop    edi
c00175d1:	5d                   	pop    ebp
c00175d2:	c3                   	ret    
c00175d3:	90                   	nop

c00175d4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175d4:	55                   	push   ebp
c00175d5:	57                   	push   edi
c00175d6:	56                   	push   esi
c00175d7:	53                   	push   ebx
c00175d8:	83 ec 28             	sub    esp,0x28
c00175db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175df:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175e3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175e7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175eb:	c1 e7 08             	shl    edi,0x8
c00175ee:	01 c7                	add    edi,eax
c00175f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175f4:	c1 e0 08             	shl    eax,0x8
c00175f7:	01 d0                	add    eax,edx
c00175f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017601:	0f af c7             	imul   eax,edi
c0017604:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001760b:	50                   	push   eax
c001760c:	e8 32 82 ff ff       	call   c000f843 <malloc>
c0017611:	83 c4 10             	add    esp,0x10
c0017614:	89 c5                	mov    ebp,eax
c0017616:	85 c0                	test   eax,eax
c0017618:	75 15                	jne    c001762f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001761a:	83 ec 0c             	sub    esp,0xc
c001761d:	68 c1 b2 02 c0       	push   0xc002b2c1
c0017622:	e8 b1 b8 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	e9 1c 01 00 00       	jmp    c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001762f:	be 12 00 00 00       	mov    esi,0x12
c0017634:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017638:	74 11                	je     c001764b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001763a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001763e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017642:	c1 fe 03             	sar    esi,0x3
c0017645:	0f af f0             	imul   esi,eax
c0017648:	83 c6 12             	add    esi,0x12
c001764b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001764f:	74 04                	je     c0017655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017651:	85 ff                	test   edi,edi
c0017653:	75 12                	jne    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017655:	83 ec 0c             	sub    esp,0xc
c0017658:	68 d8 b2 02 c0       	push   0xc002b2d8
c001765d:	e8 76 b8 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0017662:	e9 ce 00 00 00       	jmp    c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017667:	52                   	push   edx
c0017668:	52                   	push   edx
c0017669:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001766d:	50                   	push   eax
c001766e:	68 ed b2 02 c0       	push   0xc002b2ed
c0017673:	e8 60 b8 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0017678:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	80 fa 02             	cmp    dl,0x2
c0017682:	0f 85 98 00 00 00    	jne    c0017720 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017688:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001768d:	75 10                	jne    c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001768f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017693:	75 0a                	jne    c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017695:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017698:	83 e8 18             	sub    eax,0x18
c001769b:	a8 f7                	test   al,0xf7
c001769d:	74 0a                	je     c00176a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001769f:	83 ec 0c             	sub    esp,0xc
c00176a2:	68 fa b2 02 c0       	push   0xc002b2fa
c00176a7:	eb 7f                	jmp    c0017728 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176c5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176c9:	75 0c                	jne    c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176cb:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176d0:	c1 e0 18             	shl    eax,0x18
c00176d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d7:	41                   	inc    ecx
c00176d8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176dd:	c1 e2 10             	shl    edx,0x10
c00176e0:	89 d0                	mov    eax,edx
c00176e2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176e7:	c1 e2 08             	shl    edx,0x8
c00176ea:	09 c2                	or     edx,eax
c00176ec:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176f0:	09 c2                	or     edx,eax
c00176f2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176f6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176fa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176fe:	c1 f8 03             	sar    eax,0x3
c0017701:	01 c6                	add    esi,eax
c0017703:	89 c8                	mov    eax,ecx
c0017705:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017709:	39 c7                	cmp    edi,eax
c001770b:	7f b0                	jg     c00176bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001770d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017711:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017715:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017718:	7e 22                	jle    c001773c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001771a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001771e:	eb 99                	jmp    c00176b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017720:	50                   	push   eax
c0017721:	50                   	push   eax
c0017722:	52                   	push   edx
c0017723:	68 08 b3 02 c0       	push   0xc002b308
c0017728:	e8 ab b7 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001772d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017730:	e8 1e 81 ff ff       	call   c000f853 <free>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	31 ed                	xor    ebp,ebp
c001773a:	eb 0f                	jmp    c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001773c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017740:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017743:	89 38                	mov    DWORD PTR [eax],edi
c0017745:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017749:	89 08                	mov    DWORD PTR [eax],ecx
c001774b:	83 c4 1c             	add    esp,0x1c
c001774e:	89 e8                	mov    eax,ebp
c0017750:	5b                   	pop    ebx
c0017751:	5e                   	pop    esi
c0017752:	5f                   	pop    edi
c0017753:	5d                   	pop    ebp
c0017754:	c3                   	ret    
c0017755:	90                   	nop

c0017756 <Video::putTGA(int, int, unsigned char*, int)>:
c0017756:	55                   	push   ebp
c0017757:	57                   	push   edi
c0017758:	56                   	push   esi
c0017759:	53                   	push   ebx
c001775a:	83 ec 28             	sub    esp,0x28
c001775d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017761:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017765:	50                   	push   eax
c0017766:	8d 44 24 18          	lea    eax,[esp+0x18]
c001776a:	50                   	push   eax
c001776b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001776f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017773:	56                   	push   esi
c0017774:	e8 5b fe ff ff       	call   c00175d4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017779:	83 c4 20             	add    esp,0x20
c001777c:	85 c0                	test   eax,eax
c001777e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017782:	74 35                	je     c00177b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017784:	89 c7                	mov    edi,eax
c0017786:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001778a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001778e:	39 d8                	cmp    eax,ebx
c0017790:	7e 27                	jle    c00177b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017792:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017796:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001779a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001779e:	39 e8                	cmp    eax,ebp
c00177a0:	7e 14                	jle    c00177b6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00177a4:	83 c7 04             	add    edi,0x4
c00177a7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177aa:	53                   	push   ebx
c00177ab:	55                   	push   ebp
c00177ac:	45                   	inc    ebp
c00177ad:	56                   	push   esi
c00177ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	eb e0                	jmp    c0017796 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177b6:	43                   	inc    ebx
c00177b7:	eb cd                	jmp    c0017786 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177b9:	83 c4 1c             	add    esp,0x1c
c00177bc:	5b                   	pop    ebx
c00177bd:	5e                   	pop    esi
c00177be:	5f                   	pop    edi
c00177bf:	5d                   	pop    ebp
c00177c0:	c3                   	ret    
c00177c1:	90                   	nop

c00177c2 <ACPI::close(int, int, void*)>:
c00177c2:	83 ec 1c             	sub    esp,0x1c
c00177c5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177cd:	74 0a                	je     c00177d9 <ACPI::close(int, int, void*)+0x17>
c00177cf:	b8 00 00 00 00       	mov    eax,0x0
c00177d4:	e9 9a 00 00 00       	jmp    c0017873 <ACPI::close(int, int, void*)+0xb1>
c00177d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177de:	75 37                	jne    c0017817 <ACPI::close(int, int, void*)+0x55>
c00177e0:	83 ec 0c             	sub    esp,0xc
c00177e3:	68 64 b3 02 c0       	push   0xc002b364
c00177e8:	e8 eb b6 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c00177f5:	85 c0                	test   eax,eax
c00177f7:	74 07                	je     c0017800 <ACPI::close(int, int, void*)+0x3e>
c00177f9:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c00177fe:	ff d0                	call   eax
c0017800:	83 ec 0c             	sub    esp,0xc
c0017803:	68 88 b4 02 c0       	push   0xc002b488
c0017808:	e8 70 2d 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017815:	eb 5c                	jmp    c0017873 <ACPI::close(int, int, void*)+0xb1>
c0017817:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001781c:	75 50                	jne    c001786e <ACPI::close(int, int, void*)+0xac>
c001781e:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c0017823:	85 c0                	test   eax,eax
c0017825:	74 07                	je     c001782e <ACPI::close(int, int, void*)+0x6c>
c0017827:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c001782c:	ff d0                	call   eax
c001782e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017833:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017838:	83 e0 02             	and    eax,0x2
c001783b:	74 1c                	je     c0017859 <ACPI::close(int, int, void*)+0x97>
c001783d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017848:	89 c2                	mov    edx,eax
c001784a:	ec                   	in     al,dx
c001784b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001784f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017853:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017857:	eb da                	jmp    c0017833 <ACPI::close(int, int, void*)+0x71>
c0017859:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017860:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017865:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017869:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001786d:	ee                   	out    dx,al
c001786e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017873:	83 c4 1c             	add    esp,0x1c
c0017876:	c3                   	ret    

c0017877 <findRSDP()>:
c0017877:	83 ec 1c             	sub    esp,0x1c
c001787a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001787f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017885:	83 e0 04             	and    eax,0x4
c0017888:	84 c0                	test   al,al
c001788a:	75 07                	jne    c0017893 <findRSDP()+0x1c>
c001788c:	b8 00 00 00 00       	mov    eax,0x0
c0017891:	eb 6a                	jmp    c00178fd <findRSDP()+0x86>
c0017893:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0017898:	3d ff 07 00 00       	cmp    eax,0x7ff
c001789d:	7f 1b                	jg     c00178ba <findRSDP()+0x43>
c001789f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178aa:	83 e2 fb             	and    edx,0xfffffffb
c00178ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178b3:	b8 00 00 00 00       	mov    eax,0x0
c00178b8:	eb 43                	jmp    c00178fd <findRSDP()+0x86>
c00178ba:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178c2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178ca:	77 2c                	ja     c00178f8 <findRSDP()+0x81>
c00178cc:	83 ec 04             	sub    esp,0x4
c00178cf:	6a 08                	push   0x8
c00178d1:	68 71 b3 02 c0       	push   0xc002b371
c00178d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178da:	e8 61 8d fe ff       	call   c0000640 <memcmp>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	85 c0                	test   eax,eax
c00178e4:	0f 94 c0             	sete   al
c00178e7:	84 c0                	test   al,al
c00178e9:	74 06                	je     c00178f1 <findRSDP()+0x7a>
c00178eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ef:	eb 0c                	jmp    c00178fd <findRSDP()+0x86>
c00178f1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178f6:	eb ca                	jmp    c00178c2 <findRSDP()+0x4b>
c00178f8:	b8 00 00 00 00       	mov    eax,0x0
c00178fd:	83 c4 1c             	add    esp,0x1c
c0017900:	c3                   	ret    

c0017901 <loadACPITables(unsigned char*)>:
c0017901:	56                   	push   esi
c0017902:	53                   	push   ebx
c0017903:	83 ec 44             	sub    esp,0x44
c0017906:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001790b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017911:	83 e0 04             	and    eax,0x4
c0017914:	84 c0                	test   al,al
c0017916:	0f 84 05 02 00 00    	je     c0017b21 <loadACPITables(unsigned char*)+0x220>
c001791c:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017921:	84 c0                	test   al,al
c0017923:	74 75                	je     c001799a <loadACPITables(unsigned char*)+0x99>
c0017925:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001792d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017931:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017934:	83 e8 24             	sub    eax,0x24
c0017937:	c1 e8 03             	shr    eax,0x3
c001793a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001793e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017946:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001794a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001794e:	0f 8d b2 00 00 00    	jge    c0017a06 <loadACPITables(unsigned char*)+0x105>
c0017954:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017958:	83 c0 24             	add    eax,0x24
c001795b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001795f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017963:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017967:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001796b:	c1 e0 03             	shl    eax,0x3
c001796e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017972:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017976:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017979:	8b 00                	mov    eax,DWORD PTR [eax]
c001797b:	89 c1                	mov    ecx,eax
c001797d:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017982:	8d 50 01             	lea    edx,[eax+0x1]
c0017985:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c001798b:	89 ca                	mov    edx,ecx
c001798d:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017994:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017998:	eb ac                	jmp    c0017946 <loadACPITables(unsigned char*)+0x45>
c001799a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001799e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a9:	83 e8 24             	sub    eax,0x24
c00179ac:	c1 e8 02             	shr    eax,0x2
c00179af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179bf:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179c3:	7d 41                	jge    c0017a06 <loadACPITables(unsigned char*)+0x105>
c00179c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179c9:	83 c0 24             	add    eax,0x24
c00179cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179dc:	c1 e0 02             	shl    eax,0x2
c00179df:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179e9:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c00179ee:	8d 50 01             	lea    edx,[eax+0x1]
c00179f1:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c00179f7:	89 ca                	mov    edx,ecx
c00179f9:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017a00:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a04:	eb b5                	jmp    c00179bb <loadACPITables(unsigned char*)+0xba>
c0017a06:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a0e:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017a13:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a17:	0f 8d 05 01 00 00    	jge    c0017b22 <loadACPITables(unsigned char*)+0x221>
c0017a1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a21:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017a28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a38:	25 ff 0f 00 00       	and    eax,0xfff
c0017a3d:	89 c6                	mov    esi,eax
c0017a3f:	e8 d2 a3 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0017a44:	89 c3                	mov    ebx,eax
c0017a46:	83 ec 0c             	sub    esp,0xc
c0017a49:	6a 01                	push   0x1
c0017a4b:	e8 2b a1 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a57:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a5d:	83 ec 0c             	sub    esp,0xc
c0017a60:	6a 01                	push   0x1
c0017a62:	6a 01                	push   0x1
c0017a64:	50                   	push   eax
c0017a65:	52                   	push   edx
c0017a66:	53                   	push   ebx
c0017a67:	e8 f0 ab ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a6c:	83 c4 20             	add    esp,0x20
c0017a6f:	09 f0                	or     eax,esi
c0017a71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a79:	c1 e0 03             	shl    eax,0x3
c0017a7c:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017a81:	83 ec 04             	sub    esp,0x4
c0017a84:	6a 04                	push   0x4
c0017a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a8a:	50                   	push   eax
c0017a8b:	e8 b4 8c fe ff       	call   c0000744 <memcpy>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aa2:	05 00 10 00 00       	add    eax,0x1000
c0017aa7:	c1 e8 0c             	shr    eax,0xc
c0017aaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab9:	25 ff 0f 00 00       	and    eax,0xfff
c0017abe:	89 c6                	mov    esi,eax
c0017ac0:	e8 51 a3 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0017ac5:	89 c3                	mov    ebx,eax
c0017ac7:	83 ec 0c             	sub    esp,0xc
c0017aca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ace:	e8 a8 a0 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017ad3:	83 c4 10             	add    esp,0x10
c0017ad6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ada:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ae0:	83 ec 0c             	sub    esp,0xc
c0017ae3:	6a 01                	push   0x1
c0017ae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ae9:	50                   	push   eax
c0017aea:	52                   	push   edx
c0017aeb:	53                   	push   ebx
c0017aec:	e8 6b ab ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017af1:	83 c4 20             	add    esp,0x20
c0017af4:	09 f0                	or     eax,esi
c0017af6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017afa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017afd:	83 ec 0c             	sub    esp,0xc
c0017b00:	50                   	push   eax
c0017b01:	e8 fb a4 ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b11:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017b18:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b1c:	e9 ed fe ff ff       	jmp    c0017a0e <loadACPITables(unsigned char*)+0x10d>
c0017b21:	90                   	nop
c0017b22:	83 c4 44             	add    esp,0x44
c0017b25:	5b                   	pop    ebx
c0017b26:	5e                   	pop    esi
c0017b27:	c3                   	ret    

c0017b28 <findRSDT(unsigned char*)>:
c0017b28:	56                   	push   esi
c0017b29:	53                   	push   ebx
c0017b2a:	83 ec 44             	sub    esp,0x44
c0017b2d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017b32:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b38:	83 e0 04             	and    eax,0x4
c0017b3b:	84 c0                	test   al,al
c0017b3d:	75 0a                	jne    c0017b49 <findRSDT(unsigned char*)+0x21>
c0017b3f:	b8 00 00 00 00       	mov    eax,0x0
c0017b44:	e9 f7 00 00 00       	jmp    c0017c40 <findRSDT(unsigned char*)+0x118>
c0017b49:	83 ec 04             	sub    esp,0x4
c0017b4c:	6a 24                	push   0x24
c0017b4e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b56:	50                   	push   eax
c0017b57:	e8 e8 8b fe ff       	call   c0000744 <memcpy>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b63:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b67:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b77:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b87:	25 ff 0f 00 00       	and    eax,0xfff
c0017b8c:	89 c6                	mov    esi,eax
c0017b8e:	e8 83 a2 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0017b93:	89 c3                	mov    ebx,eax
c0017b95:	83 ec 0c             	sub    esp,0xc
c0017b98:	6a 02                	push   0x2
c0017b9a:	e8 dc 9f ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ba6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bac:	83 ec 0c             	sub    esp,0xc
c0017baf:	6a 01                	push   0x1
c0017bb1:	6a 02                	push   0x2
c0017bb3:	50                   	push   eax
c0017bb4:	52                   	push   edx
c0017bb5:	53                   	push   ebx
c0017bb6:	e8 a1 aa ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bbb:	83 c4 20             	add    esp,0x20
c0017bbe:	09 f0                	or     eax,esi
c0017bc0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc8:	25 ff 0f 00 00       	and    eax,0xfff
c0017bcd:	89 c6                	mov    esi,eax
c0017bcf:	e8 42 a2 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0017bd4:	89 c3                	mov    ebx,eax
c0017bd6:	83 ec 0c             	sub    esp,0xc
c0017bd9:	6a 02                	push   0x2
c0017bdb:	e8 9b 9f ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017be7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bed:	83 ec 0c             	sub    esp,0xc
c0017bf0:	6a 01                	push   0x1
c0017bf2:	6a 02                	push   0x2
c0017bf4:	50                   	push   eax
c0017bf5:	52                   	push   edx
c0017bf6:	53                   	push   ebx
c0017bf7:	e8 60 aa ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bfc:	83 c4 20             	add    esp,0x20
c0017bff:	09 f0                	or     eax,esi
c0017c01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c05:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c0a:	75 11                	jne    c0017c1d <findRSDT(unsigned char*)+0xf5>
c0017c0c:	c6 05 60 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c60,0x0
c0017c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c17:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c1b:	eb 1f                	jmp    c0017c3c <findRSDT(unsigned char*)+0x114>
c0017c1d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c22:	75 11                	jne    c0017c35 <findRSDT(unsigned char*)+0x10d>
c0017c24:	c6 05 60 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c60,0x1
c0017c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c2f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c33:	eb 07                	jmp    c0017c3c <findRSDT(unsigned char*)+0x114>
c0017c35:	b8 00 00 00 00       	mov    eax,0x0
c0017c3a:	eb 04                	jmp    c0017c40 <findRSDT(unsigned char*)+0x118>
c0017c3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c40:	83 c4 44             	add    esp,0x44
c0017c43:	5b                   	pop    ebx
c0017c44:	5e                   	pop    esi
c0017c45:	c3                   	ret    

c0017c46 <findDataTable(unsigned char*, char*)>:
c0017c46:	83 ec 1c             	sub    esp,0x1c
c0017c49:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017c4e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c54:	83 e0 04             	and    eax,0x4
c0017c57:	84 c0                	test   al,al
c0017c59:	75 07                	jne    c0017c62 <findDataTable(unsigned char*, char*)+0x1c>
c0017c5b:	b8 00 00 00 00       	mov    eax,0x0
c0017c60:	eb 7c                	jmp    c0017cde <findDataTable(unsigned char*, char*)+0x98>
c0017c62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c6a:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017c6f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c73:	7d 3a                	jge    c0017caf <findDataTable(unsigned char*, char*)+0x69>
c0017c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c79:	c1 e0 03             	shl    eax,0x3
c0017c7c:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017c81:	83 ec 04             	sub    esp,0x4
c0017c84:	6a 04                	push   0x4
c0017c86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c8a:	50                   	push   eax
c0017c8b:	e8 b0 89 fe ff       	call   c0000640 <memcmp>
c0017c90:	83 c4 10             	add    esp,0x10
c0017c93:	85 c0                	test   eax,eax
c0017c95:	0f 94 c0             	sete   al
c0017c98:	84 c0                	test   al,al
c0017c9a:	74 0d                	je     c0017ca9 <findDataTable(unsigned char*, char*)+0x63>
c0017c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ca0:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017ca7:	eb 35                	jmp    c0017cde <findDataTable(unsigned char*, char*)+0x98>
c0017ca9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017cad:	eb bb                	jmp    c0017c6a <findDataTable(unsigned char*, char*)+0x24>
c0017caf:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017cb4:	84 c0                	test   al,al
c0017cb6:	74 07                	je     c0017cbf <findDataTable(unsigned char*, char*)+0x79>
c0017cb8:	b8 58 00 00 00       	mov    eax,0x58
c0017cbd:	eb 05                	jmp    c0017cc4 <findDataTable(unsigned char*, char*)+0x7e>
c0017cbf:	b8 52 00 00 00       	mov    eax,0x52
c0017cc4:	83 ec 04             	sub    esp,0x4
c0017cc7:	50                   	push   eax
c0017cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ccc:	68 ac b4 02 c0       	push   0xc002b4ac
c0017cd1:	e8 02 b2 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	b8 00 00 00 00       	mov    eax,0x0
c0017cde:	83 c4 1c             	add    esp,0x1c
c0017ce1:	c3                   	ret    

c0017ce2 <scanMADT()>:
c0017ce2:	53                   	push   ebx
c0017ce3:	83 ec 38             	sub    esp,0x38
c0017ce6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017ceb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cf1:	83 e0 04             	and    eax,0x4
c0017cf4:	84 c0                	test   al,al
c0017cf6:	0f 84 63 04 00 00    	je     c001815f <scanMADT()+0x47d>
c0017cfc:	e8 76 fb ff ff       	call   c0017877 <findRSDP()>
c0017d01:	a3 6c 0c 03 c0       	mov    ds:0xc0030c6c,eax
c0017d06:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017d0b:	85 c0                	test   eax,eax
c0017d0d:	75 19                	jne    c0017d28 <scanMADT()+0x46>
c0017d0f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d14:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d1a:	83 e2 fb             	and    edx,0xfffffffb
c0017d1d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d23:	e9 3b 04 00 00       	jmp    c0018163 <scanMADT()+0x481>
c0017d28:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017d2d:	83 ec 0c             	sub    esp,0xc
c0017d30:	50                   	push   eax
c0017d31:	e8 f2 fd ff ff       	call   c0017b28 <findRSDT(unsigned char*)>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0017d3e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d43:	85 c0                	test   eax,eax
c0017d45:	75 19                	jne    c0017d60 <scanMADT()+0x7e>
c0017d47:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d4c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d52:	83 e2 fb             	and    edx,0xfffffffb
c0017d55:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d5b:	e9 03 04 00 00       	jmp    c0018163 <scanMADT()+0x481>
c0017d60:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	50                   	push   eax
c0017d69:	e8 93 fb ff ff       	call   c0017901 <loadACPITables(unsigned char*)>
c0017d6e:	83 c4 10             	add    esp,0x10
c0017d71:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d76:	83 ec 08             	sub    esp,0x8
c0017d79:	68 7a b3 02 c0       	push   0xc002b37a
c0017d7e:	50                   	push   eax
c0017d7f:	e8 c2 fe ff ff       	call   c0017c46 <findDataTable(unsigned char*, char*)>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d8b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d90:	75 19                	jne    c0017dab <scanMADT()+0xc9>
c0017d92:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d97:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d9d:	83 e2 fe             	and    edx,0xfffffffe
c0017da0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017da6:	e9 b8 03 00 00       	jmp    c0018163 <scanMADT()+0x481>
c0017dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017db3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dba:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dbe:	0f 87 9f 03 00 00    	ja     c0018163 <scanMADT()+0x481>
c0017dc4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dcc:	0f 87 91 03 00 00    	ja     c0018163 <scanMADT()+0x481>
c0017dd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dde:	8d 50 01             	lea    edx,[eax+0x1]
c0017de1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017de5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017de9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ded:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017df1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df5:	8d 50 01             	lea    edx,[eax+0x1]
c0017df8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e04:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e08:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e0d:	0f 86 4f 03 00 00    	jbe    c0018162 <scanMADT()+0x480>
c0017e13:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e18:	75 57                	jne    c0017e71 <scanMADT()+0x18f>
c0017e1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e25:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e2b:	0f b6 d2             	movzx  edx,dl
c0017e2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e32:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e36:	88 82 a0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf160],al
c0017e3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e40:	8d 50 01             	lea    edx,[eax+0x1]
c0017e43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e47:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e50:	88 0d 60 0e 03 c0    	mov    BYTE PTR ds:0xc0030e60,cl
c0017e56:	0f b6 d2             	movzx  edx,dl
c0017e59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e5d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e61:	88 82 80 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf180],al
c0017e67:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e6c:	e9 da 02 00 00       	jmp    c001814b <scanMADT()+0x469>
c0017e71:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e76:	0f 85 14 01 00 00    	jne    c0017f90 <scanMADT()+0x2ae>
c0017e7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e80:	8d 50 01             	lea    edx,[eax+0x1]
c0017e83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e87:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017e8d:	0f b6 d2             	movzx  edx,dl
c0017e90:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e94:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e98:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017e9e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ea2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eaa:	01 d0                	add    eax,edx
c0017eac:	83 c0 2c             	add    eax,0x2c
c0017eaf:	8a 00                	mov    al,BYTE PTR [eax]
c0017eb1:	0f b6 d0             	movzx  edx,al
c0017eb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ebb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ec3:	0f b6 c0             	movzx  eax,al
c0017ec6:	c1 e0 08             	shl    eax,0x8
c0017ec9:	89 d1                	mov    ecx,edx
c0017ecb:	09 c1                	or     ecx,eax
c0017ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed1:	8d 50 02             	lea    edx,[eax+0x2]
c0017ed4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017edc:	0f b6 c0             	movzx  eax,al
c0017edf:	c1 e0 10             	shl    eax,0x10
c0017ee2:	09 c1                	or     ecx,eax
c0017ee4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee8:	8d 50 03             	lea    edx,[eax+0x3]
c0017eeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ef3:	0f b6 c0             	movzx  eax,al
c0017ef6:	c1 e0 18             	shl    eax,0x18
c0017ef9:	09 c1                	or     ecx,eax
c0017efb:	89 ca                	mov    edx,ecx
c0017efd:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f02:	0f b6 c0             	movzx  eax,al
c0017f05:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c0017f0c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f19:	01 d0                	add    eax,edx
c0017f1b:	83 c0 2c             	add    eax,0x2c
c0017f1e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f20:	0f b6 d0             	movzx  edx,al
c0017f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f27:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f32:	0f b6 c0             	movzx  eax,al
c0017f35:	c1 e0 08             	shl    eax,0x8
c0017f38:	89 d1                	mov    ecx,edx
c0017f3a:	09 c1                	or     ecx,eax
c0017f3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f40:	8d 50 02             	lea    edx,[eax+0x2]
c0017f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f4b:	0f b6 c0             	movzx  eax,al
c0017f4e:	c1 e0 10             	shl    eax,0x10
c0017f51:	09 c1                	or     ecx,eax
c0017f53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f57:	8d 50 03             	lea    edx,[eax+0x3]
c0017f5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f62:	0f b6 c0             	movzx  eax,al
c0017f65:	c1 e0 18             	shl    eax,0x18
c0017f68:	09 c1                	or     ecx,eax
c0017f6a:	89 ca                	mov    edx,ecx
c0017f6c:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f71:	0f b6 c0             	movzx  eax,al
c0017f74:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0017f7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f80:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f85:	40                   	inc    eax
c0017f86:	a2 20 0d 03 c0       	mov    ds:0xc0030d20,al
c0017f8b:	e9 bb 01 00 00       	jmp    c001814b <scanMADT()+0x469>
c0017f90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f95:	0f 85 e9 00 00 00    	jne    c0018084 <scanMADT()+0x3a2>
c0017f9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017faa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd1:	01 d0                	add    eax,edx
c0017fd3:	83 c0 2c             	add    eax,0x2c
c0017fd6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd8:	0f b6 d0             	movzx  edx,al
c0017fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fe2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fea:	0f b6 c0             	movzx  eax,al
c0017fed:	c1 e0 08             	shl    eax,0x8
c0017ff0:	89 d1                	mov    ecx,edx
c0017ff2:	09 c1                	or     ecx,eax
c0017ff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff8:	8d 50 02             	lea    edx,[eax+0x2]
c0017ffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018003:	0f b6 c0             	movzx  eax,al
c0018006:	c1 e0 10             	shl    eax,0x10
c0018009:	09 c1                	or     ecx,eax
c001800b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800f:	8d 50 03             	lea    edx,[eax+0x3]
c0018012:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018016:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001801a:	0f b6 c0             	movzx  eax,al
c001801d:	c1 e0 18             	shl    eax,0x18
c0018020:	09 c8                	or     eax,ecx
c0018022:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018026:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001802b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018033:	01 d0                	add    eax,edx
c0018035:	83 c0 2c             	add    eax,0x2c
c0018038:	8a 00                	mov    al,BYTE PTR [eax]
c001803a:	0f b6 c0             	movzx  eax,al
c001803d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018041:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018044:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018048:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001804c:	0f b6 d2             	movzx  edx,dl
c001804f:	c1 e2 08             	shl    edx,0x8
c0018052:	09 d0                	or     eax,edx
c0018054:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018059:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001805e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018063:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018067:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c001806d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018072:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018077:	66 89 84 12 00 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf300],ax
c001807f:	e9 c7 00 00 00       	jmp    c001814b <scanMADT()+0x469>
c0018084:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018089:	0f 85 b0 00 00 00    	jne    c001813f <scanMADT()+0x45d>
c001808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018093:	8d 50 01             	lea    edx,[eax+0x1]
c0018096:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b1:	01 d0                	add    eax,edx
c00180b3:	83 c0 2c             	add    eax,0x2c
c00180b6:	8a 00                	mov    al,BYTE PTR [eax]
c00180b8:	0f b6 d0             	movzx  edx,al
c00180bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00180c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180ca:	0f b6 c0             	movzx  eax,al
c00180cd:	c1 e0 08             	shl    eax,0x8
c00180d0:	09 d0                	or     eax,edx
c00180d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180d6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180df:	8d 50 01             	lea    edx,[eax+0x1]
c00180e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ee:	0f b6 c0             	movzx  eax,al
c00180f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f9:	c1 e0 08             	shl    eax,0x8
c00180fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018100:	89 c1                	mov    ecx,eax
c0018102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018106:	c1 e0 18             	shl    eax,0x18
c0018109:	89 c3                	mov    ebx,eax
c001810b:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0018110:	8d 50 01             	lea    edx,[eax+0x1]
c0018113:	89 15 70 0c 03 c0    	mov    DWORD PTR ds:0xc0030c70,edx
c0018119:	09 d9                	or     ecx,ebx
c001811b:	89 ca                	mov    edx,ecx
c001811d:	89 14 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],edx
c0018124:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001812c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018130:	68 dc b4 02 c0       	push   0xc002b4dc
c0018135:	e8 9e ad ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	eb 0c                	jmp    c001814b <scanMADT()+0x469>
c001813f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018144:	75 05                	jne    c001814b <scanMADT()+0x469>
c0018146:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001814b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018150:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018154:	01 d0                	add    eax,edx
c0018156:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001815a:	e9 54 fc ff ff       	jmp    c0017db3 <scanMADT()+0xd1>
c001815f:	90                   	nop
c0018160:	eb 01                	jmp    c0018163 <scanMADT()+0x481>
c0018162:	90                   	nop
c0018163:	83 c4 38             	add    esp,0x38
c0018166:	5b                   	pop    ebx
c0018167:	c3                   	ret    

c0018168 <ACPI::ACPI()>:
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001816f:	83 ec 08             	sub    esp,0x8
c0018172:	68 7f b3 02 c0       	push   0xc002b37f
c0018177:	50                   	push   eax
c0018178:	e8 71 c3 ff ff       	call   c00144ee <Device::Device(char const*)>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0018185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018189:	89 10                	mov    DWORD PTR [eax],edx
c001818b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181c8:	e8 15 fb ff ff       	call   c0017ce2 <scanMADT()>
c00181cd:	90                   	nop
c00181ce:	83 c4 0c             	add    esp,0xc
c00181d1:	c3                   	ret    

c00181d2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181d2:	83 ec 2c             	sub    esp,0x2c
c00181d5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181dd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181e1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181e5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181ea:	88 d0                	mov    al,dl
c00181ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018201:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018207:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001820b:	0f 8d 97 00 00 00    	jge    c00182a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018211:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018215:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018219:	83 c2 2a             	add    edx,0x2a
c001821c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018220:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018225:	75 78                	jne    c001829f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018227:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001822b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001822f:	83 c2 2a             	add    edx,0x2a
c0018232:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018236:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001823a:	75 63                	jne    c001829f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001823c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018241:	74 3a                	je     c001827d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018243:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018247:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001824b:	83 c2 2a             	add    edx,0x2a
c001824e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018259:	39 c2                	cmp    edx,eax
c001825b:	74 10                	je     c001826d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	68 18 b5 02 c0       	push   0xc002b518
c0018265:	e8 13 23 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	68 84 b3 02 c0       	push   0xc002b384
c0018275:	e8 03 23 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018281:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018285:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018289:	83 c2 2a             	add    edx,0x2a
c001828c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018290:	8b 02                	mov    eax,DWORD PTR [edx]
c0018292:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018295:	89 01                	mov    DWORD PTR [ecx],eax
c0018297:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001829a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001829f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182a3:	e9 55 ff ff ff       	jmp    c00181fd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182a8:	90                   	nop
c00182a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ad:	83 c4 2c             	add    esp,0x2c
c00182b0:	c2 04 00             	ret    0x4
c00182b3:	90                   	nop

c00182b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182b4:	83 ec 1c             	sub    esp,0x1c
c00182b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182c8:	88 c8                	mov    al,cl
c00182ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182ce:	88 d0                	mov    al,dl
c00182d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182e5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182e9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182fb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018302:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018311:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018315:	8d 48 01             	lea    ecx,[eax+0x1]
c0018318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831c:	83 c2 2a             	add    edx,0x2a
c001831f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018327:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001832d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018331:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018334:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018338:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001833c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018340:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018346:	8d 50 01             	lea    edx,[eax+0x1]
c0018349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018357:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001835d:	3d 00 02 00 00       	cmp    eax,0x200
c0018362:	75 10                	jne    c0018374 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018364:	83 ec 0c             	sub    esp,0xc
c0018367:	68 93 b3 02 c0       	push   0xc002b393
c001836c:	e8 0c 22 00 00       	call   c001a57d <Krnl::panic(char const*)>
c0018371:	83 c4 10             	add    esp,0x10
c0018374:	90                   	nop
c0018375:	83 c4 1c             	add    esp,0x1c
c0018378:	c3                   	ret    
c0018379:	90                   	nop

c001837a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001837a:	b8 00 00 00 00       	mov    eax,0x0
c001837f:	c3                   	ret    

c0018380 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018380:	83 ec 1c             	sub    esp,0x1c
c0018383:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018387:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001838a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001838e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018393:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018398:	83 ec 08             	sub    esp,0x8
c001839b:	52                   	push   edx
c001839c:	50                   	push   eax
c001839d:	e8 b6 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183a9:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183b3:	83 ec 04             	sub    esp,0x4
c00183b6:	6a 01                	push   0x1
c00183b8:	52                   	push   edx
c00183b9:	50                   	push   eax
c00183ba:	e8 af 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	90                   	nop
c00183c3:	83 c4 1c             	add    esp,0x1c
c00183c6:	c3                   	ret    
c00183c7:	90                   	nop

c00183c8 <ACPI::open(int, int, void*)>:
c00183c8:	53                   	push   ebx
c00183c9:	83 ec 28             	sub    esp,0x28
c00183cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183db:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183e2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183ed:	83 e0 04             	and    eax,0x4
c00183f0:	84 c0                	test   al,al
c00183f2:	74 47                	je     c001843b <ACPI::open(int, int, void*)+0x73>
c00183f4:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00183f9:	83 ec 08             	sub    esp,0x8
c00183fc:	68 b0 b3 02 c0       	push   0xc002b3b0
c0018401:	50                   	push   eax
c0018402:	e8 3f f8 ff ff       	call   c0017c46 <findDataTable(unsigned char*, char*)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001840e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018413:	74 26                	je     c001843b <ACPI::open(int, int, void*)+0x73>
c0018415:	83 ec 0c             	sub    esp,0xc
c0018418:	68 b5 b3 02 c0       	push   0xc002b3b5
c001841d:	e8 b6 aa ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018429:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018430:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018434:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001843b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018447:	8a 00                	mov    al,BYTE PTR [eax]
c0018449:	3c 01                	cmp    al,0x1
c001844b:	75 28                	jne    c0018475 <ACPI::open(int, int, void*)+0xad>
c001844d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018451:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018458:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018463:	83 ec 0c             	sub    esp,0xc
c0018466:	68 c6 b3 02 c0       	push   0xc002b3c6
c001846b:	e8 68 aa ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018470:	83 c4 10             	add    esp,0x10
c0018473:	eb 25                	jmp    c001849a <ACPI::open(int, int, void*)+0xd2>
c0018475:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018479:	8a 00                	mov    al,BYTE PTR [eax]
c001847b:	3c 02                	cmp    al,0x2
c001847d:	75 1b                	jne    c001849a <ACPI::open(int, int, void*)+0xd2>
c001847f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018483:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001848a:	83 ec 0c             	sub    esp,0xc
c001848d:	68 ce b3 02 c0       	push   0xc002b3ce
c0018492:	e8 41 aa ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184a4:	83 f0 01             	xor    eax,0x1
c00184a7:	84 c0                	test   al,al
c00184a9:	74 6a                	je     c0018515 <ACPI::open(int, int, void*)+0x14d>
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	68 d6 b3 02 c0       	push   0xc002b3d6
c00184b3:	e8 20 aa ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	e8 90 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184c4:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184c9:	75 28                	jne    c00184f3 <ACPI::open(int, int, void*)+0x12b>
c00184cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184cf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184da:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e1:	83 ec 0c             	sub    esp,0xc
c00184e4:	68 e4 b3 02 c0       	push   0xc002b3e4
c00184e9:	e8 ea a9 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00184ee:	83 c4 10             	add    esp,0x10
c00184f1:	eb 22                	jmp    c0018515 <ACPI::open(int, int, void*)+0x14d>
c00184f3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00184f8:	75 1b                	jne    c0018515 <ACPI::open(int, int, void*)+0x14d>
c00184fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fe:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018505:	83 ec 0c             	sub    esp,0xc
c0018508:	68 ee b3 02 c0       	push   0xc002b3ee
c001850d:	e8 c6 a9 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018512:	83 c4 10             	add    esp,0x10
c0018515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018519:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001851f:	84 c0                	test   al,al
c0018521:	74 13                	je     c0018536 <ACPI::open(int, int, void*)+0x16e>
c0018523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018527:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001852d:	83 f0 01             	xor    eax,0x1
c0018530:	0f b6 c0             	movzx  eax,al
c0018533:	40                   	inc    eax
c0018534:	eb 05                	jmp    c001853b <ACPI::open(int, int, void*)+0x173>
c0018536:	b8 00 00 00 00       	mov    eax,0x0
c001853b:	83 ec 08             	sub    esp,0x8
c001853e:	50                   	push   eax
c001853f:	68 f8 b3 02 c0       	push   0xc002b3f8
c0018544:	e8 8f a9 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018550:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018556:	84 c0                	test   al,al
c0018558:	74 67                	je     c00185c1 <ACPI::open(int, int, void*)+0x1f9>
c001855a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018562:	83 ec 0c             	sub    esp,0xc
c0018565:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018569:	e8 d5 72 ff ff       	call   c000f843 <malloc>
c001856e:	83 c4 10             	add    esp,0x10
c0018571:	89 c3                	mov    ebx,eax
c0018573:	83 ec 0c             	sub    esp,0xc
c0018576:	53                   	push   ebx
c0018577:	e8 2c a3 00 00       	call   c00228a8 <PCI::PCI()>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018587:	83 ec 08             	sub    esp,0x8
c001858a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001858e:	50                   	push   eax
c001858f:	e8 6a bd ff ff       	call   c00142fe <Device::addChild(Device*)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859b:	8b 00                	mov    eax,DWORD PTR [eax]
c001859d:	83 c0 08             	add    eax,0x8
c00185a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00185a2:	6a 00                	push   0x0
c00185a4:	6a 00                	push   0x0
c00185a6:	6a 00                	push   0x0
c00185a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185ac:	ff d0                	call   eax
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	83 ec 0c             	sub    esp,0xc
c00185b4:	68 01 b4 02 c0       	push   0xc002b401
c00185b9:	e8 1a a9 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	e8 f3 97 ff ff       	call   c0011db9 <Virt::swappingSetup()>
c00185c6:	83 ec 0c             	sub    esp,0xc
c00185c9:	68 0c b4 02 c0       	push   0xc002b40c
c00185ce:	e8 80 46 00 00       	call   c001cc53 <Thr::loadKernelSymbolTable(char const*)>
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00185dc:	83 ec 08             	sub    esp,0x8
c00185df:	6a 01                	push   0x1
c00185e1:	68 2a b4 02 c0       	push   0xc002b42a
c00185e6:	e8 c5 50 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	83 ec 08             	sub    esp,0x8
c00185f1:	53                   	push   ebx
c00185f2:	50                   	push   eax
c00185f3:	e8 07 53 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0018601:	83 ec 08             	sub    esp,0x8
c0018604:	6a 01                	push   0x1
c0018606:	68 47 b4 02 c0       	push   0xc002b447
c001860b:	e8 a0 50 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	83 ec 08             	sub    esp,0x8
c0018616:	53                   	push   ebx
c0018617:	50                   	push   eax
c0018618:	e8 e2 52 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c001861d:	83 c4 10             	add    esp,0x10
c0018620:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018625:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001862b:	83 e0 04             	and    eax,0x4
c001862e:	84 c0                	test   al,al
c0018630:	0f 84 d2 00 00 00    	je     c0018708 <ACPI::open(int, int, void*)+0x340>
c0018636:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001863d:	83 ec 0c             	sub    esp,0xc
c0018640:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018644:	e8 fa 71 ff ff       	call   c000f843 <malloc>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	89 c3                	mov    ebx,eax
c001864e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0018653:	83 ec 04             	sub    esp,0x4
c0018656:	50                   	push   eax
c0018657:	68 64 b4 02 c0       	push   0xc002b464
c001865c:	53                   	push   ebx
c001865d:	e8 ce ad ff ff       	call   c0013430 <File::File(char const*, Process*)>
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018669:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001866e:	74 17                	je     c0018687 <ACPI::open(int, int, void*)+0x2bf>
c0018670:	83 ec 0c             	sub    esp,0xc
c0018673:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018677:	e8 86 b0 ff ff       	call   c0013702 <File::exists()>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	84 c0                	test   al,al
c0018681:	74 04                	je     c0018687 <ACPI::open(int, int, void*)+0x2bf>
c0018683:	b0 01                	mov    al,0x1
c0018685:	eb 02                	jmp    c0018689 <ACPI::open(int, int, void*)+0x2c1>
c0018687:	b0 00                	mov    al,0x0
c0018689:	84 c0                	test   al,al
c001868b:	74 22                	je     c00186af <ACPI::open(int, int, void*)+0x2e7>
c001868d:	83 ec 08             	sub    esp,0x8
c0018690:	6a 01                	push   0x1
c0018692:	68 64 b4 02 c0       	push   0xc002b464
c0018697:	e8 14 50 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	83 ec 08             	sub    esp,0x8
c00186a2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186a6:	50                   	push   eax
c00186a7:	e8 53 52 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c00186ac:	83 c4 10             	add    esp,0x10
c00186af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186b4:	74 1e                	je     c00186d4 <ACPI::open(int, int, void*)+0x30c>
c00186b6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186bb:	74 17                	je     c00186d4 <ACPI::open(int, int, void*)+0x30c>
c00186bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c3:	83 c0 08             	add    eax,0x8
c00186c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c8:	83 ec 0c             	sub    esp,0xc
c00186cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186cf:	ff d0                	call   eax
c00186d1:	83 c4 10             	add    esp,0x10
c00186d4:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00186d9:	83 ec 08             	sub    esp,0x8
c00186dc:	68 81 b4 02 c0       	push   0xc002b481
c00186e1:	50                   	push   eax
c00186e2:	e8 5f f5 ff ff       	call   c0017c46 <findDataTable(unsigned char*, char*)>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186ee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186f3:	74 13                	je     c0018708 <ACPI::open(int, int, void*)+0x340>
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018700:	e8 7b fc ff ff       	call   c0018380 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	b8 00 00 00 00       	mov    eax,0x0
c001870d:	83 c4 28             	add    esp,0x28
c0018710:	5b                   	pop    ebx
c0018711:	c3                   	ret    

c0018712 <ACPI::sleep()>:
c0018712:	83 ec 0c             	sub    esp,0xc
c0018715:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c001871a:	85 c0                	test   eax,eax
c001871c:	74 07                	je     c0018725 <ACPI::sleep()+0x13>
c001871e:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c0018723:	ff d0                	call   eax
c0018725:	90                   	nop
c0018726:	83 c4 0c             	add    esp,0xc
c0018729:	c3                   	ret    

c001872a <CPU::close(int, int, void*)>:
c001872a:	31 c0                	xor    eax,eax
c001872c:	c3                   	ret    
c001872d:	90                   	nop

c001872e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001872e:	55                   	push   ebp
c001872f:	57                   	push   edi
c0018730:	56                   	push   esi
c0018731:	53                   	push   ebx
c0018732:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018736:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001873a:	89 ce                	mov    esi,ecx
c001873c:	89 d5                	mov    ebp,edx
c001873e:	80 f9 04             	cmp    cl,0x4
c0018741:	75 28                	jne    c001876b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018743:	8d 42 f9             	lea    eax,[edx-0x7]
c0018746:	3c 03                	cmp    al,0x3
c0018748:	0f 86 63 01 00 00    	jbe    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001874e:	80 fa 03             	cmp    dl,0x3
c0018751:	0f 84 5a 01 00 00    	je     c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018757:	8d 7a f2             	lea    edi,[edx-0xe]
c001875a:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c001875f:	89 fb                	mov    ebx,edi
c0018761:	80 fb 01             	cmp    bl,0x1
c0018764:	77 4e                	ja     c00187b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018766:	e9 52 01 00 00       	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876b:	80 f9 05             	cmp    cl,0x5
c001876e:	75 4d                	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018770:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018775:	80 fa 03             	cmp    dl,0x3
c0018778:	0f 86 3f 01 00 00    	jbe    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018781:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018786:	89 fb                	mov    ebx,edi
c0018788:	80 fb 01             	cmp    bl,0x1
c001878b:	0f 86 2c 01 00 00    	jbe    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018791:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018796:	80 fa 08             	cmp    dl,0x8
c0018799:	0f 84 1e 01 00 00    	je     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879f:	89 d7                	mov    edi,edx
c00187a1:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00187a6:	83 e7 fb             	and    edi,0xfffffffb
c00187a9:	89 fb                	mov    ebx,edi
c00187ab:	80 fb 09             	cmp    bl,0x9
c00187ae:	0f 84 09 01 00 00    	je     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b4:	31 c0                	xor    eax,eax
c00187b6:	89 eb                	mov    ebx,ebp
c00187b8:	0f b6 fb             	movzx  edi,bl
c00187bb:	eb 30                	jmp    c00187ed <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187bd:	31 c0                	xor    eax,eax
c00187bf:	80 f9 06             	cmp    cl,0x6
c00187c2:	75 f2                	jne    c00187b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187c4:	80 fa 0a             	cmp    dl,0xa
c00187c7:	77 ed                	ja     c00187b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187c9:	bf de 05 00 00       	mov    edi,0x5de
c00187ce:	0f a3 d7             	bt     edi,edx
c00187d1:	73 e3                	jae    c00187b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187d3:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00187d8:	e9 e0 00 00 00       	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187dd:	39 c7                	cmp    edi,eax
c00187df:	0f 84 d3 00 00 00    	je     c00188b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187e5:	40                   	inc    eax
c00187e6:	3d d0 00 00 00       	cmp    eax,0xd0
c00187eb:	74 09                	je     c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187ed:	89 f3                	mov    ebx,esi
c00187ef:	80 fb 0f             	cmp    bl,0xf
c00187f2:	75 f1                	jne    c00187e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00187f4:	eb e7                	jmp    c00187dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00187f6:	80 f9 10             	cmp    cl,0x10
c00187f9:	75 14                	jne    c001880f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00187fb:	8d 42 fc             	lea    eax,[edx-0x4]
c00187fe:	83 e0 fb             	and    eax,0xfffffffb
c0018801:	3c 02                	cmp    al,0x2
c0018803:	76 34                	jbe    c0018839 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018805:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001880a:	80 fa 02             	cmp    dl,0x2
c001880d:	eb 24                	jmp    c0018833 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001880f:	80 f9 11             	cmp    cl,0x11
c0018812:	75 13                	jne    c0018827 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018814:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018819:	80 fa 03             	cmp    dl,0x3
c001881c:	0f 85 9b 00 00 00    	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018822:	e9 91 00 00 00       	jmp    c00188b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018827:	80 f9 12             	cmp    cl,0x12
c001882a:	75 14                	jne    c0018840 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001882c:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018831:	fe ca                	dec    dl
c0018833:	0f 85 84 00 00 00    	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018839:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001883e:	eb 7d                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018840:	80 f9 14             	cmp    cl,0x14
c0018843:	75 12                	jne    c0018857 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018845:	4a                   	dec    edx
c0018846:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001884b:	80 fa 01             	cmp    dl,0x1
c001884e:	77 6d                	ja     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018850:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018855:	eb 66                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018857:	80 f9 15             	cmp    cl,0x15
c001885a:	75 31                	jne    c001888d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001885c:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018861:	80 fa 01             	cmp    dl,0x1
c0018864:	74 57                	je     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018866:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001886b:	80 fa 13             	cmp    dl,0x13
c001886e:	76 0c                	jbe    c001887c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018870:	80 fa 30             	cmp    dl,0x30
c0018873:	75 48                	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018875:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001887a:	eb 41                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018881:	0f a3 d1             	bt     ecx,edx
c0018884:	73 37                	jae    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018886:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001888b:	eb 30                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888d:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018892:	80 f9 16             	cmp    cl,0x16
c0018895:	75 26                	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018897:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001889c:	84 d2                	test   dl,dl
c001889e:	74 1d                	je     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a0:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c00188a5:	80 fa 30             	cmp    dl,0x30
c00188a8:	75 13                	jne    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188aa:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00188af:	eb 0c                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b1:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00188b6:	eb 05                	jmp    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b8:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c00188bd:	5b                   	pop    ebx
c00188be:	5e                   	pop    esi
c00188bf:	5f                   	pop    edi
c00188c0:	5d                   	pop    ebp
c00188c1:	c3                   	ret    

c00188c2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188c2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188ca:	80 f9 04             	cmp    cl,0x4
c00188cd:	75 6b                	jne    c001893a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188cf:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00188d4:	80 fa 01             	cmp    dl,0x1
c00188d7:	0f 86 92 02 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188dd:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00188e2:	80 fa 02             	cmp    dl,0x2
c00188e5:	0f 84 84 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188eb:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00188f0:	80 fa 03             	cmp    dl,0x3
c00188f3:	0f 84 76 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f9:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00188fe:	80 fa 04             	cmp    dl,0x4
c0018901:	0f 84 68 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018907:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c001890c:	80 fa 05             	cmp    dl,0x5
c001890f:	0f 84 5a 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018915:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001891a:	80 fa 07             	cmp    dl,0x7
c001891d:	0f 84 4c 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018923:	83 ea 08             	sub    edx,0x8
c0018926:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001892b:	80 fa 01             	cmp    dl,0x1
c001892e:	0f 87 3b 02 00 00    	ja     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018934:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018939:	c3                   	ret    
c001893a:	80 f9 05             	cmp    cl,0x5
c001893d:	75 45                	jne    c0018984 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001893f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018942:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018947:	80 f9 02             	cmp    cl,0x2
c001894a:	0f 86 1f 02 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018950:	80 fa 04             	cmp    dl,0x4
c0018953:	0f 84 f3 01 00 00    	je     c0018b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018959:	80 fa 07             	cmp    dl,0x7
c001895c:	0f 84 0d 02 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018962:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018967:	80 fa 08             	cmp    dl,0x8
c001896a:	0f 84 ff 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018970:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018975:	80 fa 09             	cmp    dl,0x9
c0018978:	0f 85 f1 01 00 00    	jne    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897e:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018983:	c3                   	ret    
c0018984:	80 f9 06             	cmp    cl,0x6
c0018987:	0f 85 85 01 00 00    	jne    c0018b12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001898d:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018992:	80 fa 01             	cmp    dl,0x1
c0018995:	0f 84 d4 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899b:	8d 42 fb             	lea    eax,[edx-0x5]
c001899e:	3c 01                	cmp    al,0x1
c00189a0:	0f 86 ac 01 00 00    	jbe    c0018b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189a6:	80 fa 03             	cmp    dl,0x3
c00189a9:	0f 84 a3 01 00 00    	je     c0018b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189af:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189b2:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189b7:	80 f9 01             	cmp    cl,0x1
c00189ba:	0f 86 af 01 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c0:	80 fa 09             	cmp    dl,0x9
c00189c3:	0f 84 8f 01 00 00    	je     c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189c9:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189cc:	80 f9 01             	cmp    cl,0x1
c00189cf:	0f 86 9a 01 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d5:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00189da:	80 fa 0d             	cmp    dl,0xd
c00189dd:	0f 84 8c 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e3:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00189e8:	80 fa 0e             	cmp    dl,0xe
c00189eb:	0f 84 7e 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f1:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00189f6:	80 fa 0f             	cmp    dl,0xf
c00189f9:	0f 84 70 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ff:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a04:	80 fa 15             	cmp    dl,0x15
c0018a07:	0f 84 62 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a10:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a15:	80 f9 01             	cmp    cl,0x1
c0018a18:	0f 86 51 01 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1e:	80 fa 1a             	cmp    dl,0x1a
c0018a21:	0f 84 37 01 00 00    	je     c0018b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a27:	80 fa 1c             	cmp    dl,0x1c
c0018a2a:	0f 84 34 01 00 00    	je     c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a30:	80 fa 1d             	cmp    dl,0x1d
c0018a33:	0f 84 36 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a39:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a3e:	80 fa 25             	cmp    dl,0x25
c0018a41:	0f 84 28 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a47:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a4a:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a4f:	80 f9 01             	cmp    cl,0x1
c0018a52:	0f 86 17 01 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a58:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a5d:	80 fa 2a             	cmp    dl,0x2a
c0018a60:	0f 84 09 01 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a66:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a6b:	80 fa 2c             	cmp    dl,0x2c
c0018a6e:	0f 84 fb 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a74:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a79:	80 fa 2d             	cmp    dl,0x2d
c0018a7c:	0f 84 ed 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a82:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a87:	80 fa 2e             	cmp    dl,0x2e
c0018a8a:	0f 84 df 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a90:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a95:	80 fa 2f             	cmp    dl,0x2f
c0018a98:	0f 84 d1 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018aa1:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018aa6:	80 f9 01             	cmp    cl,0x1
c0018aa9:	0f 86 c0 00 00 00    	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaf:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018ab4:	80 fa 37             	cmp    dl,0x37
c0018ab7:	0f 84 b2 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abd:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ac2:	80 fa 3a             	cmp    dl,0x3a
c0018ac5:	0f 84 a4 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018ad0:	80 fa 3c             	cmp    dl,0x3c
c0018ad3:	0f 84 96 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018ade:	80 fa 3d             	cmp    dl,0x3d
c0018ae1:	0f 84 88 00 00 00    	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae7:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018aec:	80 fa 3e             	cmp    dl,0x3e
c0018aef:	74 7e                	je     c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af1:	8d 42 bb             	lea    eax,[edx-0x45]
c0018af4:	3c 01                	cmp    al,0x1
c0018af6:	76 72                	jbe    c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018af8:	80 fa 3f             	cmp    dl,0x3f
c0018afb:	74 6d                	je     c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018afd:	80 fa 4a             	cmp    dl,0x4a
c0018b00:	74 0a                	je     c0018b0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b02:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b07:	80 fa 4d             	cmp    dl,0x4d
c0018b0a:	75 63                	jne    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0c:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b11:	c3                   	ret    
c0018b12:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b17:	80 f9 0b             	cmp    cl,0xb
c0018b1a:	75 0a                	jne    c0018b26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b1c:	fe ca                	dec    dl
c0018b1e:	75 4f                	jne    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b20:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b25:	c3                   	ret    
c0018b26:	80 f9 0f             	cmp    cl,0xf
c0018b29:	75 44                	jne    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2b:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b30:	80 fa 02             	cmp    dl,0x2
c0018b33:	76 3a                	jbe    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b35:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b38:	3c 01                	cmp    al,0x1
c0018b3a:	76 0a                	jbe    c0018b46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b3c:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b41:	80 fa 06             	cmp    dl,0x6
c0018b44:	75 29                	jne    c0018b6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b46:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b4b:	c3                   	ret    
c0018b4c:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018b51:	c3                   	ret    
c0018b52:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018b57:	c3                   	ret    
c0018b58:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018b5d:	c3                   	ret    
c0018b5e:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018b63:	c3                   	ret    
c0018b64:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b69:	c3                   	ret    
c0018b6a:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b6f:	c3                   	ret    

c0018b70 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b70:	60                   	pusha  
c0018b71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b7d:	9c                   	pushf  
c0018b7e:	fa                   	cli    
c0018b7f:	0f 09                	wbinvd 
c0018b81:	0f 30                	wrmsr  
c0018b83:	9d                   	popf   
c0018b84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b88:	89 02                	mov    DWORD PTR [edx],eax
c0018b8a:	61                   	popa   
c0018b8b:	c3                   	ret    

c0018b8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b8c:	60                   	pusha  
c0018b8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b91:	9c                   	pushf  
c0018b92:	fa                   	cli    
c0018b93:	0f 09                	wbinvd 
c0018b95:	31 c0                	xor    eax,eax
c0018b97:	31 d2                	xor    edx,edx
c0018b99:	0f 32                	rdmsr  
c0018b9b:	9d                   	popf   
c0018b9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ba0:	89 02                	mov    DWORD PTR [edx],eax
c0018ba2:	61                   	popa   
c0018ba3:	c3                   	ret    

c0018ba4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ba4:	56                   	push   esi
c0018ba5:	53                   	push   ebx
c0018ba6:	83 ec 10             	sub    esp,0x10
c0018ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bad:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bb2:	75 5d                	jne    c0018c11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bb4:	83 f8 08             	cmp    eax,0x8
c0018bb7:	75 09                	jne    c0018bc2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bb9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bbe:	7e 13                	jle    c0018bd3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bc0:	eb 30                	jmp    c0018bf2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bc2:	83 f8 06             	cmp    eax,0x6
c0018bc5:	7c 4a                	jl     c0018c11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bc7:	83 f8 07             	cmp    eax,0x7
c0018bca:	7e 07                	jle    c0018bd3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bcc:	83 f8 09             	cmp    eax,0x9
c0018bcf:	74 21                	je     c0018bf2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bd1:	eb 3e                	jmp    c0018c11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bd3:	89 e6                	mov    esi,esp
c0018bd5:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018bdb:	56                   	push   esi
c0018bdc:	c1 eb 15             	shr    ebx,0x15
c0018bdf:	68 82 00 00 c0       	push   0xc0000082
c0018be4:	83 e3 7e             	and    ebx,0x7e
c0018be7:	e8 a0 ff ff ff       	call   c0018b8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bec:	56                   	push   esi
c0018bed:	6a 00                	push   0x0
c0018bef:	53                   	push   ebx
c0018bf0:	eb 12                	jmp    c0018c04 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018bf2:	89 e3                	mov    ebx,esp
c0018bf4:	53                   	push   ebx
c0018bf5:	68 82 00 00 c0       	push   0xc0000082
c0018bfa:	e8 8d ff ff ff       	call   c0018b8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bff:	53                   	push   ebx
c0018c00:	6a 00                	push   0x0
c0018c02:	6a 00                	push   0x0
c0018c04:	68 82 00 00 c0       	push   0xc0000082
c0018c09:	e8 62 ff ff ff       	call   c0018b70 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c0e:	83 c4 18             	add    esp,0x18
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	5b                   	pop    ebx
c0018c15:	5e                   	pop    esi
c0018c16:	c3                   	ret    
c0018c17:	90                   	nop

c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c18:	55                   	push   ebp
c0018c19:	57                   	push   edi
c0018c1a:	56                   	push   esi
c0018c1b:	53                   	push   ebx
c0018c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c28:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c2c:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018c32:	75 23                	jne    c0018c57 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c34:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0018c39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c3d:	89 06                	mov    DWORD PTR [esi],eax
c0018c3f:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0018c44:	89 07                	mov    DWORD PTR [edi],eax
c0018c46:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c0018c4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c4e:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c0018c53:	89 02                	mov    DWORD PTR [edx],eax
c0018c55:	eb 3f                	jmp    c0018c96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c57:	31 c9                	xor    ecx,ecx
c0018c59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c5d:	0f a2                	cpuid  
c0018c5f:	89 06                	mov    DWORD PTR [esi],eax
c0018c61:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c67:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c6a:	89 10                	mov    DWORD PTR [eax],edx
c0018c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c70:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018c75:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c77:	a3 cc 0e 03 c0       	mov    ds:0xc0030ecc,eax
c0018c7c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c7e:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0018c83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c86:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c0018c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c91:	a3 c0 0e 03 c0       	mov    ds:0xc0030ec0,eax
c0018c96:	5b                   	pop    ebx
c0018c97:	5e                   	pop    esi
c0018c98:	5f                   	pop    edi
c0018c99:	5d                   	pop    ebp
c0018c9a:	c3                   	ret    
c0018c9b:	90                   	nop

c0018c9c <CPU::cpuidCheckEDX(unsigned int)>:
c0018c9c:	83 ec 10             	sub    esp,0x10
c0018c9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca3:	50                   	push   eax
c0018ca4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca8:	50                   	push   eax
c0018ca9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cad:	50                   	push   eax
c0018cae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb2:	50                   	push   eax
c0018cb3:	6a 01                	push   0x1
c0018cb5:	e8 5e ff ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cbe:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cc2:	0f 95 c0             	setne  al
c0018cc5:	83 c4 24             	add    esp,0x24
c0018cc8:	c3                   	ret    
c0018cc9:	90                   	nop

c0018cca <CPU::cpuidCheckECX(unsigned int)>:
c0018cca:	83 ec 10             	sub    esp,0x10
c0018ccd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd1:	50                   	push   eax
c0018cd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd6:	50                   	push   eax
c0018cd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cdb:	50                   	push   eax
c0018cdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce0:	50                   	push   eax
c0018ce1:	6a 01                	push   0x1
c0018ce3:	e8 30 ff ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ce8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cf0:	0f 95 c0             	setne  al
c0018cf3:	83 c4 24             	add    esp,0x24
c0018cf6:	c3                   	ret    
c0018cf7:	90                   	nop

c0018cf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018cf8:	83 ec 10             	sub    esp,0x10
c0018cfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cff:	50                   	push   eax
c0018d00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d04:	50                   	push   eax
c0018d05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d09:	50                   	push   eax
c0018d0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0e:	50                   	push   eax
c0018d0f:	6a 07                	push   0x7
c0018d11:	e8 02 ff ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d1a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d1e:	0f 95 c0             	setne  al
c0018d21:	83 c4 24             	add    esp,0x24
c0018d24:	c3                   	ret    
c0018d25:	90                   	nop

c0018d26 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d26:	83 ec 10             	sub    esp,0x10
c0018d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2d:	50                   	push   eax
c0018d2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d32:	50                   	push   eax
c0018d33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d37:	50                   	push   eax
c0018d38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3c:	50                   	push   eax
c0018d3d:	6a 07                	push   0x7
c0018d3f:	e8 d4 fe ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d48:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d4c:	0f 95 c0             	setne  al
c0018d4f:	83 c4 24             	add    esp,0x24
c0018d52:	c3                   	ret    
c0018d53:	90                   	nop

c0018d54 <CPU::CPU()>:
c0018d54:	83 ec 0c             	sub    esp,0xc
c0018d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d5b:	83 ec 08             	sub    esp,0x8
c0018d5e:	68 66 b8 02 c0       	push   0xc002b866
c0018d63:	50                   	push   eax
c0018d64:	e8 85 b7 ff ff       	call   c00144ee <Device::Device(char const*)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0018d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d75:	89 10                	mov    DWORD PTR [eax],edx
c0018d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d7b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d89:	05 78 01 00 00       	add    eax,0x178
c0018d8e:	83 ec 0c             	sub    esp,0xc
c0018d91:	50                   	push   eax
c0018d92:	e8 c1 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018d97:	83 c4 10             	add    esp,0x10
c0018d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d9e:	05 7c 09 00 00       	add    eax,0x97c
c0018da3:	83 ec 0c             	sub    esp,0xc
c0018da6:	50                   	push   eax
c0018da7:	e8 0e 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018dac:	83 c4 10             	add    esp,0x10
c0018daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db3:	05 7c 11 00 00       	add    eax,0x117c
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	50                   	push   eax
c0018dbc:	e8 eb 86 ff ff       	call   c00114ac <TSS::TSS()>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ddd:	90                   	nop
c0018dde:	83 c4 0c             	add    esp,0xc
c0018de1:	c3                   	ret    

c0018de2 <CPU::displayFeatures()>:
c0018de2:	53                   	push   ebx
c0018de3:	83 ec 10             	sub    esp,0x10
c0018de6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dea:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018df0:	68 74 b5 02 c0       	push   0xc002b574
c0018df5:	e8 de a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018dfa:	59                   	pop    ecx
c0018dfb:	58                   	pop    eax
c0018dfc:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e02:	50                   	push   eax
c0018e03:	68 85 b5 02 c0       	push   0xc002b585
c0018e08:	e8 cb a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e0d:	58                   	pop    eax
c0018e0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e14:	5a                   	pop    edx
c0018e15:	c1 e8 0e             	shr    eax,0xe
c0018e18:	0f b6 c0             	movzx  eax,al
c0018e1b:	50                   	push   eax
c0018e1c:	68 96 b5 02 c0       	push   0xc002b596
c0018e21:	e8 b2 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e26:	59                   	pop    ecx
c0018e27:	58                   	pop    eax
c0018e28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e2e:	66 c1 e8 06          	shr    ax,0x6
c0018e32:	0f b6 c0             	movzx  eax,al
c0018e35:	50                   	push   eax
c0018e36:	68 a7 b5 02 c0       	push   0xc002b5a7
c0018e3b:	e8 98 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e40:	c7 04 24 54 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba54
c0018e47:	e8 8c a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e4c:	83 c4 10             	add    esp,0x10
c0018e4f:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e54:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e5b:	74 05                	je     c0018e62 <CPU::displayFeatures()+0x80>
c0018e5d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e62:	52                   	push   edx
c0018e63:	52                   	push   edx
c0018e64:	50                   	push   eax
c0018e65:	68 b8 b5 02 c0       	push   0xc002b5b8
c0018e6a:	e8 69 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e77:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e7e:	78 05                	js     c0018e85 <CPU::displayFeatures()+0xa3>
c0018e80:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e85:	51                   	push   ecx
c0018e86:	51                   	push   ecx
c0018e87:	50                   	push   eax
c0018e88:	68 cf b5 02 c0       	push   0xc002b5cf
c0018e8d:	e8 46 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018e92:	83 c4 10             	add    esp,0x10
c0018e95:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e9a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ea1:	75 05                	jne    c0018ea8 <CPU::displayFeatures()+0xc6>
c0018ea3:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ea8:	52                   	push   edx
c0018ea9:	52                   	push   edx
c0018eaa:	50                   	push   eax
c0018eab:	68 e6 b5 02 c0       	push   0xc002b5e6
c0018eb0:	e8 23 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018eb5:	83 c4 10             	add    esp,0x10
c0018eb8:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ebd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ec4:	75 05                	jne    c0018ecb <CPU::displayFeatures()+0xe9>
c0018ec6:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ecb:	51                   	push   ecx
c0018ecc:	51                   	push   ecx
c0018ecd:	50                   	push   eax
c0018ece:	68 fd b5 02 c0       	push   0xc002b5fd
c0018ed3:	e8 00 a0 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018ed8:	83 c4 10             	add    esp,0x10
c0018edb:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ee0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ee7:	75 05                	jne    c0018eee <CPU::displayFeatures()+0x10c>
c0018ee9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018eee:	52                   	push   edx
c0018eef:	52                   	push   edx
c0018ef0:	50                   	push   eax
c0018ef1:	68 14 b6 02 c0       	push   0xc002b614
c0018ef6:	e8 dd 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f03:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f0a:	75 05                	jne    c0018f11 <CPU::displayFeatures()+0x12f>
c0018f0c:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f11:	51                   	push   ecx
c0018f12:	51                   	push   ecx
c0018f13:	50                   	push   eax
c0018f14:	68 2b b6 02 c0       	push   0xc002b62b
c0018f19:	e8 ba 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018f1e:	83 c4 10             	add    esp,0x10
c0018f21:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f26:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f2d:	75 05                	jne    c0018f34 <CPU::displayFeatures()+0x152>
c0018f2f:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f34:	52                   	push   edx
c0018f35:	52                   	push   edx
c0018f36:	50                   	push   eax
c0018f37:	68 42 b6 02 c0       	push   0xc002b642
c0018f3c:	e8 97 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018f41:	83 c4 10             	add    esp,0x10
c0018f44:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f49:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f50:	75 05                	jne    c0018f57 <CPU::displayFeatures()+0x175>
c0018f52:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f57:	51                   	push   ecx
c0018f58:	51                   	push   ecx
c0018f59:	50                   	push   eax
c0018f5a:	68 59 b6 02 c0       	push   0xc002b659
c0018f5f:	e8 74 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f6c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f73:	75 05                	jne    c0018f7a <CPU::displayFeatures()+0x198>
c0018f75:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f7a:	52                   	push   edx
c0018f7b:	52                   	push   edx
c0018f7c:	50                   	push   eax
c0018f7d:	68 70 b6 02 c0       	push   0xc002b670
c0018f82:	e8 51 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f8f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f96:	75 05                	jne    c0018f9d <CPU::displayFeatures()+0x1bb>
c0018f98:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f9d:	51                   	push   ecx
c0018f9e:	51                   	push   ecx
c0018f9f:	50                   	push   eax
c0018fa0:	68 87 b6 02 c0       	push   0xc002b687
c0018fa5:	e8 2e 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018faa:	83 c4 10             	add    esp,0x10
c0018fad:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fb2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fb9:	75 05                	jne    c0018fc0 <CPU::displayFeatures()+0x1de>
c0018fbb:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fc0:	52                   	push   edx
c0018fc1:	52                   	push   edx
c0018fc2:	50                   	push   eax
c0018fc3:	68 9e b6 02 c0       	push   0xc002b69e
c0018fc8:	e8 0b 9f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fd5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fdc:	75 05                	jne    c0018fe3 <CPU::displayFeatures()+0x201>
c0018fde:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fe3:	51                   	push   ecx
c0018fe4:	51                   	push   ecx
c0018fe5:	50                   	push   eax
c0018fe6:	68 b5 b6 02 c0       	push   0xc002b6b5
c0018feb:	e8 e8 9e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0018ff0:	83 c4 10             	add    esp,0x10
c0018ff3:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ff8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018fff:	75 05                	jne    c0019006 <CPU::displayFeatures()+0x224>
c0019001:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019006:	52                   	push   edx
c0019007:	52                   	push   edx
c0019008:	50                   	push   eax
c0019009:	68 cc b6 02 c0       	push   0xc002b6cc
c001900e:	e8 c5 9e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c001901b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019022:	78 05                	js     c0019029 <CPU::displayFeatures()+0x247>
c0019024:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019029:	51                   	push   ecx
c001902a:	51                   	push   ecx
c001902b:	50                   	push   eax
c001902c:	68 e3 b6 02 c0       	push   0xc002b6e3
c0019031:	e8 a2 9e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c001903e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019045:	75 05                	jne    c001904c <CPU::displayFeatures()+0x26a>
c0019047:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c001904c:	52                   	push   edx
c001904d:	52                   	push   edx
c001904e:	50                   	push   eax
c001904f:	68 fa b6 02 c0       	push   0xc002b6fa
c0019054:	e8 7f 9e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0019059:	83 c4 18             	add    esp,0x18
c001905c:	5b                   	pop    ebx
c001905d:	c3                   	ret    

c001905e <CPU::detectFeatures()>:
c001905e:	55                   	push   ebp
c001905f:	57                   	push   edi
c0019060:	56                   	push   esi
c0019061:	53                   	push   ebx
c0019062:	83 ec 50             	sub    esp,0x50
c0019065:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019069:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019073:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001907a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019080:	6a 0d                	push   0xd
c0019082:	6a 00                	push   0x0
c0019084:	57                   	push   edi
c0019085:	e8 ee 76 fe ff       	call   c0000778 <memset>
c001908a:	83 c4 10             	add    esp,0x10
c001908d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019092:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019099:	0f 84 20 09 00 00    	je     c00199bf <CPU::detectFeatures()+0x961>
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	6a 10                	push   0x10
c00190a4:	e8 f3 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c00190a9:	83 e0 01             	and    eax,0x1
c00190ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00190af:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190b5:	83 e0 fd             	and    eax,0xfffffffd
c00190b8:	09 d0                	or     eax,edx
c00190ba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190c0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190c7:	e8 d0 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c00190cc:	83 e0 01             	and    eax,0x1
c00190cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190d6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190dc:	83 e0 fb             	and    eax,0xfffffffb
c00190df:	09 d0                	or     eax,edx
c00190e1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190ee:	e8 a9 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c00190f3:	83 e0 01             	and    eax,0x1
c00190f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019103:	83 e0 f7             	and    eax,0xfffffff7
c0019106:	09 d0                	or     eax,edx
c0019108:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001910e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019115:	e8 82 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c001911a:	83 e0 01             	and    eax,0x1
c001911d:	c1 e0 04             	shl    eax,0x4
c0019120:	88 c2                	mov    dl,al
c0019122:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019128:	83 e0 ef             	and    eax,0xffffffef
c001912b:	09 d0                	or     eax,edx
c001912d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019133:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001913a:	e8 5d fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c001913f:	83 e0 01             	and    eax,0x1
c0019142:	c1 e0 05             	shl    eax,0x5
c0019145:	88 c2                	mov    dl,al
c0019147:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001914d:	83 e0 df             	and    eax,0xffffffdf
c0019150:	09 d0                	or     eax,edx
c0019152:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019158:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001915f:	e8 38 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c0019164:	83 e0 01             	and    eax,0x1
c0019167:	8d 14 00             	lea    edx,[eax+eax*1]
c001916a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019170:	83 e0 fd             	and    eax,0xfffffffd
c0019173:	09 d0                	or     eax,edx
c0019175:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001917b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019182:	e8 15 fb ff ff       	call   c0018c9c <CPU::cpuidCheckEDX(unsigned int)>
c0019187:	83 e0 01             	and    eax,0x1
c001918a:	c1 e0 06             	shl    eax,0x6
c001918d:	88 c2                	mov    dl,al
c001918f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019195:	83 e0 bf             	and    eax,0xffffffbf
c0019198:	09 d0                	or     eax,edx
c001919a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191a0:	58                   	pop    eax
c00191a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191a5:	56                   	push   esi
c00191a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191aa:	55                   	push   ebp
c00191ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191af:	50                   	push   eax
c00191b0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191b4:	52                   	push   edx
c00191b5:	6a 00                	push   0x0
c00191b7:	e8 5c fa ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191bc:	83 c4 1c             	add    esp,0x1c
c00191bf:	6a 04                	push   0x4
c00191c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191c5:	50                   	push   eax
c00191c6:	57                   	push   edi
c00191c7:	e8 78 75 fe ff       	call   c0000744 <memcpy>
c00191cc:	83 c4 0c             	add    esp,0xc
c00191cf:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191d5:	6a 04                	push   0x4
c00191d7:	56                   	push   esi
c00191d8:	50                   	push   eax
c00191d9:	e8 66 75 fe ff       	call   c0000744 <memcpy>
c00191de:	83 c4 0c             	add    esp,0xc
c00191e1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191e7:	6a 04                	push   0x4
c00191e9:	55                   	push   ebp
c00191ea:	50                   	push   eax
c00191eb:	e8 54 75 fe ff       	call   c0000744 <memcpy>
c00191f0:	58                   	pop    eax
c00191f1:	5a                   	pop    edx
c00191f2:	68 11 b7 02 c0       	push   0xc002b711
c00191f7:	57                   	push   edi
c00191f8:	e8 c3 76 fe ff       	call   c00008c0 <strcmp>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	75 0f                	jne    c0019213 <CPU::detectFeatures()+0x1b5>
c0019204:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001920e:	e9 22 02 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019213:	50                   	push   eax
c0019214:	50                   	push   eax
c0019215:	68 1e b7 02 c0       	push   0xc002b71e
c001921a:	57                   	push   edi
c001921b:	e8 a0 76 fe ff       	call   c00008c0 <strcmp>
c0019220:	83 c4 10             	add    esp,0x10
c0019223:	85 c0                	test   eax,eax
c0019225:	74 dd                	je     c0019204 <CPU::detectFeatures()+0x1a6>
c0019227:	51                   	push   ecx
c0019228:	51                   	push   ecx
c0019229:	68 2b b7 02 c0       	push   0xc002b72b
c001922e:	57                   	push   edi
c001922f:	e8 8c 76 fe ff       	call   c00008c0 <strcmp>
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	85 c0                	test   eax,eax
c0019239:	74 2a                	je     c0019265 <CPU::detectFeatures()+0x207>
c001923b:	52                   	push   edx
c001923c:	52                   	push   edx
c001923d:	68 38 b7 02 c0       	push   0xc002b738
c0019242:	57                   	push   edi
c0019243:	e8 78 76 fe ff       	call   c00008c0 <strcmp>
c0019248:	83 c4 10             	add    esp,0x10
c001924b:	85 c0                	test   eax,eax
c001924d:	74 16                	je     c0019265 <CPU::detectFeatures()+0x207>
c001924f:	50                   	push   eax
c0019250:	50                   	push   eax
c0019251:	68 45 b7 02 c0       	push   0xc002b745
c0019256:	57                   	push   edi
c0019257:	e8 64 76 fe ff       	call   c00008c0 <strcmp>
c001925c:	83 c4 10             	add    esp,0x10
c001925f:	85 c0                	test   eax,eax
c0019261:	74 48                	je     c00192ab <CPU::detectFeatures()+0x24d>
c0019263:	eb 0f                	jmp    c0019274 <CPU::detectFeatures()+0x216>
c0019265:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001926f:	e9 c1 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019274:	50                   	push   eax
c0019275:	50                   	push   eax
c0019276:	68 52 b7 02 c0       	push   0xc002b752
c001927b:	57                   	push   edi
c001927c:	e8 3f 76 fe ff       	call   c00008c0 <strcmp>
c0019281:	83 c4 10             	add    esp,0x10
c0019284:	85 c0                	test   eax,eax
c0019286:	74 23                	je     c00192ab <CPU::detectFeatures()+0x24d>
c0019288:	50                   	push   eax
c0019289:	50                   	push   eax
c001928a:	68 5f b7 02 c0       	push   0xc002b75f
c001928f:	57                   	push   edi
c0019290:	e8 2b 76 fe ff       	call   c00008c0 <strcmp>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	85 c0                	test   eax,eax
c001929a:	75 1e                	jne    c00192ba <CPU::detectFeatures()+0x25c>
c001929c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192a6:	e9 8a 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00192ab:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192b5:	e9 7b 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00192ba:	50                   	push   eax
c00192bb:	50                   	push   eax
c00192bc:	68 6c b7 02 c0       	push   0xc002b76c
c00192c1:	57                   	push   edi
c00192c2:	e8 f9 75 fe ff       	call   c00008c0 <strcmp>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	85 c0                	test   eax,eax
c00192cc:	75 0f                	jne    c00192dd <CPU::detectFeatures()+0x27f>
c00192ce:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192d8:	e9 58 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00192dd:	50                   	push   eax
c00192de:	50                   	push   eax
c00192df:	68 2b b7 02 c0       	push   0xc002b72b
c00192e4:	57                   	push   edi
c00192e5:	e8 d6 75 fe ff       	call   c00008c0 <strcmp>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	85 c0                	test   eax,eax
c00192ef:	75 0f                	jne    c0019300 <CPU::detectFeatures()+0x2a2>
c00192f1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00192fb:	e9 35 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019300:	50                   	push   eax
c0019301:	50                   	push   eax
c0019302:	68 79 b7 02 c0       	push   0xc002b779
c0019307:	57                   	push   edi
c0019308:	e8 b3 75 fe ff       	call   c00008c0 <strcmp>
c001930d:	83 c4 10             	add    esp,0x10
c0019310:	85 c0                	test   eax,eax
c0019312:	75 0f                	jne    c0019323 <CPU::detectFeatures()+0x2c5>
c0019314:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001931e:	e9 12 01 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019323:	51                   	push   ecx
c0019324:	51                   	push   ecx
c0019325:	68 86 b7 02 c0       	push   0xc002b786
c001932a:	57                   	push   edi
c001932b:	e8 90 75 fe ff       	call   c00008c0 <strcmp>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	85 c0                	test   eax,eax
c0019335:	75 0f                	jne    c0019346 <CPU::detectFeatures()+0x2e8>
c0019337:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019341:	e9 ef 00 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019346:	52                   	push   edx
c0019347:	52                   	push   edx
c0019348:	68 93 b7 02 c0       	push   0xc002b793
c001934d:	57                   	push   edi
c001934e:	e8 6d 75 fe ff       	call   c00008c0 <strcmp>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	85 c0                	test   eax,eax
c0019358:	75 0f                	jne    c0019369 <CPU::detectFeatures()+0x30b>
c001935a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019364:	e9 cc 00 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c0019369:	50                   	push   eax
c001936a:	50                   	push   eax
c001936b:	68 a0 b7 02 c0       	push   0xc002b7a0
c0019370:	57                   	push   edi
c0019371:	e8 4a 75 fe ff       	call   c00008c0 <strcmp>
c0019376:	83 c4 10             	add    esp,0x10
c0019379:	85 c0                	test   eax,eax
c001937b:	75 0f                	jne    c001938c <CPU::detectFeatures()+0x32e>
c001937d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019387:	e9 a9 00 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c001938c:	50                   	push   eax
c001938d:	50                   	push   eax
c001938e:	68 ad b7 02 c0       	push   0xc002b7ad
c0019393:	57                   	push   edi
c0019394:	e8 27 75 fe ff       	call   c00008c0 <strcmp>
c0019399:	83 c4 10             	add    esp,0x10
c001939c:	85 c0                	test   eax,eax
c001939e:	75 0f                	jne    c00193af <CPU::detectFeatures()+0x351>
c00193a0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193aa:	e9 86 00 00 00       	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00193af:	50                   	push   eax
c00193b0:	50                   	push   eax
c00193b1:	68 ba b7 02 c0       	push   0xc002b7ba
c00193b6:	57                   	push   edi
c00193b7:	e8 04 75 fe ff       	call   c00008c0 <strcmp>
c00193bc:	83 c4 10             	add    esp,0x10
c00193bf:	85 c0                	test   eax,eax
c00193c1:	75 0c                	jne    c00193cf <CPU::detectFeatures()+0x371>
c00193c3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193cd:	eb 66                	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00193cf:	50                   	push   eax
c00193d0:	50                   	push   eax
c00193d1:	68 c7 b7 02 c0       	push   0xc002b7c7
c00193d6:	57                   	push   edi
c00193d7:	e8 e4 74 fe ff       	call   c00008c0 <strcmp>
c00193dc:	83 c4 10             	add    esp,0x10
c00193df:	85 c0                	test   eax,eax
c00193e1:	75 0c                	jne    c00193ef <CPU::detectFeatures()+0x391>
c00193e3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193ed:	eb 46                	jmp    c0019435 <CPU::detectFeatures()+0x3d7>
c00193ef:	50                   	push   eax
c00193f0:	50                   	push   eax
c00193f1:	68 d4 b7 02 c0       	push   0xc002b7d4
c00193f6:	57                   	push   edi
c00193f7:	e8 c4 74 fe ff       	call   c00008c0 <strcmp>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	85 c0                	test   eax,eax
c0019401:	74 e0                	je     c00193e3 <CPU::detectFeatures()+0x385>
c0019403:	50                   	push   eax
c0019404:	50                   	push   eax
c0019405:	68 e1 b7 02 c0       	push   0xc002b7e1
c001940a:	57                   	push   edi
c001940b:	e8 b0 74 fe ff       	call   c00008c0 <strcmp>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	85 c0                	test   eax,eax
c0019415:	74 cc                	je     c00193e3 <CPU::detectFeatures()+0x385>
c0019417:	51                   	push   ecx
c0019418:	51                   	push   ecx
c0019419:	68 ee b7 02 c0       	push   0xc002b7ee
c001941e:	57                   	push   edi
c001941f:	e8 9c 74 fe ff       	call   c00008c0 <strcmp>
c0019424:	83 c4 10             	add    esp,0x10
c0019427:	85 c0                	test   eax,eax
c0019429:	74 b8                	je     c00193e3 <CPU::detectFeatures()+0x385>
c001942b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019435:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001943a:	0f 86 be 00 00 00    	jbe    c00194fe <CPU::detectFeatures()+0x4a0>
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	68 80 00 00 00       	push   0x80
c0019448:	e8 ab f8 ff ff       	call   c0018cf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001944d:	83 e0 01             	and    eax,0x1
c0019450:	c1 e0 06             	shl    eax,0x6
c0019453:	88 c2                	mov    dl,al
c0019455:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945b:	83 e0 bf             	and    eax,0xffffffbf
c001945e:	09 d0                	or     eax,edx
c0019460:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019466:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001946d:	e8 86 f8 ff ff       	call   c0018cf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019472:	83 e0 01             	and    eax,0x1
c0019475:	c1 e0 04             	shl    eax,0x4
c0019478:	88 c2                	mov    dl,al
c001947a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019480:	83 e0 ef             	and    eax,0xffffffef
c0019483:	09 d0                	or     eax,edx
c0019485:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001948b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019492:	e8 61 f8 ff ff       	call   c0018cf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019497:	c1 e0 07             	shl    eax,0x7
c001949a:	88 c2                	mov    dl,al
c001949c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194a2:	83 e0 7f             	and    eax,0x7f
c00194a5:	09 d0                	or     eax,edx
c00194a7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194ad:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194b4:	e8 6d f8 ff ff       	call   c0018d26 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194b9:	83 e0 01             	and    eax,0x1
c00194bc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194c3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194c9:	83 e0 f7             	and    eax,0xfffffff7
c00194cc:	09 d0                	or     eax,edx
c00194ce:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194d4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194db:	e8 46 f8 ff ff       	call   c0018d26 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	83 e0 01             	and    eax,0x1
c00194e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194ed:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194f3:	83 e0 fb             	and    eax,0xfffffffb
c00194f6:	09 d0                	or     eax,edx
c00194f8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194fe:	83 ec 0c             	sub    esp,0xc
c0019501:	56                   	push   esi
c0019502:	55                   	push   ebp
c0019503:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019507:	57                   	push   edi
c0019508:	8d 44 24 28          	lea    eax,[esp+0x28]
c001950c:	50                   	push   eax
c001950d:	6a 01                	push   0x1
c001950f:	e8 04 f7 ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019518:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001951e:	88 ca                	mov    dl,cl
c0019520:	83 e0 f0             	and    eax,0xfffffff0
c0019523:	83 e2 0f             	and    edx,0xf
c0019526:	09 d0                	or     eax,edx
c0019528:	88 ca                	mov    dl,cl
c001952a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019530:	c0 ea 04             	shr    dl,0x4
c0019533:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019537:	0f b6 c2             	movzx  eax,dl
c001953a:	83 c4 20             	add    esp,0x20
c001953d:	c1 e0 06             	shl    eax,0x6
c0019540:	89 c5                	mov    ebp,eax
c0019542:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019548:	66 25 3f c0          	and    ax,0xc03f
c001954c:	09 e8                	or     eax,ebp
c001954e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019555:	89 c8                	mov    eax,ecx
c0019557:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001955d:	c1 e8 08             	shr    eax,0x8
c0019560:	83 e2 3f             	and    edx,0x3f
c0019563:	83 e0 0f             	and    eax,0xf
c0019566:	89 c5                	mov    ebp,eax
c0019568:	c1 e5 06             	shl    ebp,0x6
c001956b:	09 d5                	or     ebp,edx
c001956d:	89 ea                	mov    edx,ebp
c001956f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019575:	88 c2                	mov    dl,al
c0019577:	c0 ea 02             	shr    dl,0x2
c001957a:	89 d5                	mov    ebp,edx
c001957c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019582:	83 e2 c0             	and    edx,0xffffffc0
c0019585:	09 d5                	or     ebp,edx
c0019587:	89 ea                	mov    edx,ebp
c0019589:	89 cd                	mov    ebp,ecx
c001958b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019591:	c1 ed 0c             	shr    ebp,0xc
c0019594:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001959a:	83 e5 03             	and    ebp,0x3
c001959d:	83 e2 cf             	and    edx,0xffffffcf
c00195a0:	c1 e5 04             	shl    ebp,0x4
c00195a3:	09 d5                	or     ebp,edx
c00195a5:	3c 06                	cmp    al,0x6
c00195a7:	89 ea                	mov    edx,ebp
c00195a9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195af:	74 04                	je     c00195b5 <CPU::detectFeatures()+0x557>
c00195b1:	3c 0f                	cmp    al,0xf
c00195b3:	75 5c                	jne    c0019611 <CPU::detectFeatures()+0x5b3>
c00195b5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195b9:	89 cd                	mov    ebp,ecx
c00195bb:	c1 ed 10             	shr    ebp,0x10
c00195be:	c1 e5 04             	shl    ebp,0x4
c00195c1:	09 ea                	or     edx,ebp
c00195c3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195c9:	0f b6 d2             	movzx  edx,dl
c00195cc:	66 81 e5 3f c0       	and    bp,0xc03f
c00195d1:	c1 e2 06             	shl    edx,0x6
c00195d4:	09 ea                	or     edx,ebp
c00195d6:	3c 0f                	cmp    al,0xf
c00195d8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195df:	75 30                	jne    c0019611 <CPU::detectFeatures()+0x5b3>
c00195e1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195e7:	c1 e9 14             	shr    ecx,0x14
c00195ea:	83 e0 3f             	and    eax,0x3f
c00195ed:	83 c1 0f             	add    ecx,0xf
c00195f0:	88 ca                	mov    dl,cl
c00195f2:	c0 e9 02             	shr    cl,0x2
c00195f5:	c1 e2 06             	shl    edx,0x6
c00195f8:	09 d0                	or     eax,edx
c00195fa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019600:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019606:	83 e0 c0             	and    eax,0xffffffc0
c0019609:	09 c1                	or     ecx,eax
c001960b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019611:	83 ec 0c             	sub    esp,0xc
c0019614:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001961b:	56                   	push   esi
c001961c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019620:	50                   	push   eax
c0019621:	57                   	push   edi
c0019622:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019626:	55                   	push   ebp
c0019627:	68 00 00 00 80       	push   0x80000000
c001962c:	e8 e7 f5 ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019631:	83 c4 20             	add    esp,0x20
c0019634:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001963c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019640:	76 1e                	jbe    c0019660 <CPU::detectFeatures()+0x602>
c0019642:	83 ec 0c             	sub    esp,0xc
c0019645:	56                   	push   esi
c0019646:	50                   	push   eax
c0019647:	57                   	push   edi
c0019648:	55                   	push   ebp
c0019649:	68 01 00 00 80       	push   0x80000001
c001964e:	e8 c5 f5 ff ff       	call   c0018c18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019653:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001965d:	83 c4 20             	add    esp,0x20
c0019660:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019666:	83 f8 01             	cmp    eax,0x1
c0019669:	75 6f                	jne    c00196da <CPU::detectFeatures()+0x67c>
c001966b:	51                   	push   ecx
c001966c:	51                   	push   ecx
c001966d:	68 fa b7 02 c0       	push   0xc002b7fa
c0019672:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019676:	56                   	push   esi
c0019677:	e8 b8 71 fe ff       	call   c0000834 <strcpy>
c001967c:	5f                   	pop    edi
c001967d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019683:	5d                   	pop    ebp
c0019684:	66 c1 e8 06          	shr    ax,0x6
c0019688:	0f b6 c0             	movzx  eax,al
c001968b:	50                   	push   eax
c001968c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019692:	c1 e8 0e             	shr    eax,0xe
c0019695:	0f b6 c0             	movzx  eax,al
c0019698:	50                   	push   eax
c0019699:	e8 24 f2 ff ff       	call   c00188c2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001969e:	5a                   	pop    edx
c001969f:	59                   	pop    ecx
c00196a0:	50                   	push   eax
c00196a1:	56                   	push   esi
c00196a2:	e8 cd 72 fe ff       	call   c0000974 <strcat>
c00196a7:	5f                   	pop    edi
c00196a8:	5d                   	pop    ebp
c00196a9:	56                   	push   esi
c00196aa:	53                   	push   ebx
c00196ab:	e8 30 ae ff ff       	call   c00144e0 <Device::setName(char const*)>
c00196b0:	58                   	pop    eax
c00196b1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196b7:	5a                   	pop    edx
c00196b8:	68 01 b8 02 c0       	push   0xc002b801
c00196bd:	50                   	push   eax
c00196be:	e8 fd 71 fe ff       	call   c00008c0 <strcmp>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	85 c0                	test   eax,eax
c00196c8:	0f 85 71 03 00 00    	jne    c0019a3f <CPU::detectFeatures()+0x9e1>
c00196ce:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196d5:	e9 65 03 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x9e1>
c00196da:	83 f8 02             	cmp    eax,0x2
c00196dd:	0f 85 b5 00 00 00    	jne    c0019798 <CPU::detectFeatures()+0x73a>
c00196e3:	57                   	push   edi
c00196e4:	57                   	push   edi
c00196e5:	68 13 b8 02 c0       	push   0xc002b813
c00196ea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196ee:	56                   	push   esi
c00196ef:	e8 40 71 fe ff       	call   c0000834 <strcpy>
c00196f4:	5d                   	pop    ebp
c00196f5:	58                   	pop    eax
c00196f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196fc:	66 c1 e8 06          	shr    ax,0x6
c0019700:	0f b6 c0             	movzx  eax,al
c0019703:	50                   	push   eax
c0019704:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001970a:	c1 e8 0e             	shr    eax,0xe
c001970d:	0f b6 c0             	movzx  eax,al
c0019710:	50                   	push   eax
c0019711:	e8 18 f0 ff ff       	call   c001872e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019716:	5a                   	pop    edx
c0019717:	59                   	pop    ecx
c0019718:	50                   	push   eax
c0019719:	56                   	push   esi
c001971a:	e8 55 72 fe ff       	call   c0000974 <strcat>
c001971f:	5f                   	pop    edi
c0019720:	5d                   	pop    ebp
c0019721:	56                   	push   esi
c0019722:	53                   	push   ebx
c0019723:	e8 b8 ad ff ff       	call   c00144e0 <Device::setName(char const*)>
c0019728:	58                   	pop    eax
c0019729:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001972f:	5a                   	pop    edx
c0019730:	68 18 b8 02 c0       	push   0xc002b818
c0019735:	50                   	push   eax
c0019736:	e8 85 71 fe ff       	call   c00008c0 <strcmp>
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	85 c0                	test   eax,eax
c0019740:	75 20                	jne    c0019762 <CPU::detectFeatures()+0x704>
c0019742:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0019748:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001974e:	a8 01                	test   al,0x1
c0019750:	74 10                	je     c0019762 <CPU::detectFeatures()+0x704>
c0019752:	83 e0 fe             	and    eax,0xfffffffe
c0019755:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001975b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019762:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019768:	c1 e8 0e             	shr    eax,0xe
c001976b:	3c 05                	cmp    al,0x5
c001976d:	0f 85 cc 02 00 00    	jne    c0019a3f <CPU::detectFeatures()+0x9e1>
c0019773:	56                   	push   esi
c0019774:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001977a:	83 e0 0f             	and    eax,0xf
c001977d:	50                   	push   eax
c001977e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019784:	66 c1 e8 06          	shr    ax,0x6
c0019788:	0f b6 c0             	movzx  eax,al
c001978b:	50                   	push   eax
c001978c:	6a 05                	push   0x5
c001978e:	e8 11 f4 ff ff       	call   c0018ba4 <CPU::AMD_K6_writeback(int, int, int)>
c0019793:	e9 1f 02 00 00       	jmp    c00199b7 <CPU::detectFeatures()+0x959>
c0019798:	8d 50 fd             	lea    edx,[eax-0x3]
c001979b:	83 fa 01             	cmp    edx,0x1
c001979e:	76 09                	jbe    c00197a9 <CPU::detectFeatures()+0x74b>
c00197a0:	83 f8 06             	cmp    eax,0x6
c00197a3:	0f 85 91 01 00 00    	jne    c001993a <CPU::detectFeatures()+0x8dc>
c00197a9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197af:	c1 ea 0e             	shr    edx,0xe
c00197b2:	80 fa 05             	cmp    dl,0x5
c00197b5:	75 7b                	jne    c0019832 <CPU::detectFeatures()+0x7d4>
c00197b7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197bd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197c2:	66 81 fa 00 01       	cmp    dx,0x100
c00197c7:	75 0c                	jne    c00197d5 <CPU::detectFeatures()+0x777>
c00197c9:	51                   	push   ecx
c00197ca:	51                   	push   ecx
c00197cb:	68 1f b8 02 c0       	push   0xc002b81f
c00197d0:	e9 dc 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c00197d5:	66 81 fa 00 02       	cmp    dx,0x200
c00197da:	75 0c                	jne    c00197e8 <CPU::detectFeatures()+0x78a>
c00197dc:	52                   	push   edx
c00197dd:	52                   	push   edx
c00197de:	68 32 b8 02 c0       	push   0xc002b832
c00197e3:	e9 c9 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c00197e8:	66 81 fa 40 02       	cmp    dx,0x240
c00197ed:	75 0c                	jne    c00197fb <CPU::detectFeatures()+0x79d>
c00197ef:	50                   	push   eax
c00197f0:	50                   	push   eax
c00197f1:	68 44 b8 02 c0       	push   0xc002b844
c00197f6:	e9 b6 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c00197fb:	83 f8 06             	cmp    eax,0x6
c00197fe:	75 0c                	jne    c001980c <CPU::detectFeatures()+0x7ae>
c0019800:	50                   	push   eax
c0019801:	50                   	push   eax
c0019802:	68 56 b8 02 c0       	push   0xc002b856
c0019807:	e9 a5 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c001980c:	83 f8 04             	cmp    eax,0x4
c001980f:	75 0c                	jne    c001981d <CPU::detectFeatures()+0x7bf>
c0019811:	50                   	push   eax
c0019812:	50                   	push   eax
c0019813:	68 62 b8 02 c0       	push   0xc002b862
c0019818:	e9 94 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c001981d:	83 f8 03             	cmp    eax,0x3
c0019820:	0f 85 19 02 00 00    	jne    c0019a3f <CPU::detectFeatures()+0x9e1>
c0019826:	50                   	push   eax
c0019827:	50                   	push   eax
c0019828:	68 6a b8 02 c0       	push   0xc002b86a
c001982d:	e9 7f 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019832:	80 fa 06             	cmp    dl,0x6
c0019835:	0f 85 db 00 00 00    	jne    c0019916 <CPU::detectFeatures()+0x8b8>
c001983b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019841:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019846:	66 81 fa 80 01       	cmp    dx,0x180
c001984b:	75 0c                	jne    c0019859 <CPU::detectFeatures()+0x7fb>
c001984d:	50                   	push   eax
c001984e:	50                   	push   eax
c001984f:	68 75 b8 02 c0       	push   0xc002b875
c0019854:	e9 58 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019859:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001985f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019864:	75 0c                	jne    c0019872 <CPU::detectFeatures()+0x814>
c0019866:	50                   	push   eax
c0019867:	50                   	push   eax
c0019868:	68 85 b8 02 c0       	push   0xc002b885
c001986d:	e9 3f 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019872:	66 81 fa 40 02       	cmp    dx,0x240
c0019877:	75 0c                	jne    c0019885 <CPU::detectFeatures()+0x827>
c0019879:	55                   	push   ebp
c001987a:	55                   	push   ebp
c001987b:	68 8c b8 02 c0       	push   0xc002b88c
c0019880:	e9 2c 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019885:	66 81 fa 80 02       	cmp    dx,0x280
c001988a:	75 0c                	jne    c0019898 <CPU::detectFeatures()+0x83a>
c001988c:	57                   	push   edi
c001988d:	57                   	push   edi
c001988e:	68 95 b8 02 c0       	push   0xc002b895
c0019893:	e9 19 01 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019898:	66 81 fa 40 03       	cmp    dx,0x340
c001989d:	74 ed                	je     c001988c <CPU::detectFeatures()+0x82e>
c001989f:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198a4:	75 0c                	jne    c00198b2 <CPU::detectFeatures()+0x854>
c00198a6:	56                   	push   esi
c00198a7:	56                   	push   esi
c00198a8:	68 9c b8 02 c0       	push   0xc002b89c
c00198ad:	e9 ff 00 00 00       	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c00198b2:	83 f8 06             	cmp    eax,0x6
c00198b5:	0f 84 45 ff ff ff    	je     c0019800 <CPU::detectFeatures()+0x7a2>
c00198bb:	83 f8 04             	cmp    eax,0x4
c00198be:	0f 84 4d ff ff ff    	je     c0019811 <CPU::detectFeatures()+0x7b3>
c00198c4:	83 f8 03             	cmp    eax,0x3
c00198c7:	0f 85 72 01 00 00    	jne    c0019a3f <CPU::detectFeatures()+0x9e1>
c00198cd:	51                   	push   ecx
c00198ce:	51                   	push   ecx
c00198cf:	68 a5 b8 02 c0       	push   0xc002b8a5
c00198d4:	53                   	push   ebx
c00198d5:	e8 06 ac ff ff       	call   c00144e0 <Device::setName(char const*)>
c00198da:	b1 c1                	mov    cl,0xc1
c00198dc:	88 c8                	mov    al,cl
c00198de:	e6 22                	out    0x22,al
c00198e0:	e4 23                	in     al,0x23
c00198e2:	88 c2                	mov    dl,al
c00198e4:	88 c8                	mov    al,cl
c00198e6:	e6 22                	out    0x22,al
c00198e8:	88 d0                	mov    al,dl
c00198ea:	83 c8 10             	or     eax,0x10
c00198ed:	e6 23                	out    0x23,al
c00198ef:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00198f6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198f9:	89 d0                	mov    eax,edx
c00198fb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019901:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019905:	40                   	inc    eax
c0019906:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001990c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019911:	e9 a1 00 00 00       	jmp    c00199b7 <CPU::detectFeatures()+0x959>
c0019916:	83 f8 06             	cmp    eax,0x6
c0019919:	0f 84 e1 fe ff ff    	je     c0019800 <CPU::detectFeatures()+0x7a2>
c001991f:	83 f8 04             	cmp    eax,0x4
c0019922:	0f 84 e9 fe ff ff    	je     c0019811 <CPU::detectFeatures()+0x7b3>
c0019928:	83 f8 03             	cmp    eax,0x3
c001992b:	0f 85 0e 01 00 00    	jne    c0019a3f <CPU::detectFeatures()+0x9e1>
c0019931:	52                   	push   edx
c0019932:	52                   	push   edx
c0019933:	68 b0 b8 02 c0       	push   0xc002b8b0
c0019938:	eb 77                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c001993a:	83 f8 07             	cmp    eax,0x7
c001993d:	75 09                	jne    c0019948 <CPU::detectFeatures()+0x8ea>
c001993f:	50                   	push   eax
c0019940:	50                   	push   eax
c0019941:	68 ba b8 02 c0       	push   0xc002b8ba
c0019946:	eb 69                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019948:	83 f8 0a             	cmp    eax,0xa
c001994b:	75 09                	jne    c0019956 <CPU::detectFeatures()+0x8f8>
c001994d:	50                   	push   eax
c001994e:	50                   	push   eax
c001994f:	68 c5 b8 02 c0       	push   0xc002b8c5
c0019954:	eb 5b                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019956:	83 f8 0b             	cmp    eax,0xb
c0019959:	75 09                	jne    c0019964 <CPU::detectFeatures()+0x906>
c001995b:	50                   	push   eax
c001995c:	50                   	push   eax
c001995d:	68 cd b8 02 c0       	push   0xc002b8cd
c0019962:	eb 4d                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019964:	83 f8 08             	cmp    eax,0x8
c0019967:	75 09                	jne    c0019972 <CPU::detectFeatures()+0x914>
c0019969:	50                   	push   eax
c001996a:	50                   	push   eax
c001996b:	68 d6 b8 02 c0       	push   0xc002b8d6
c0019970:	eb 3f                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019972:	83 f8 09             	cmp    eax,0x9
c0019975:	75 09                	jne    c0019980 <CPU::detectFeatures()+0x922>
c0019977:	50                   	push   eax
c0019978:	50                   	push   eax
c0019979:	68 de b8 02 c0       	push   0xc002b8de
c001997e:	eb 31                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c0019980:	83 f8 05             	cmp    eax,0x5
c0019983:	75 09                	jne    c001998e <CPU::detectFeatures()+0x930>
c0019985:	50                   	push   eax
c0019986:	50                   	push   eax
c0019987:	68 e6 b8 02 c0       	push   0xc002b8e6
c001998c:	eb 23                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c001998e:	83 f8 0c             	cmp    eax,0xc
c0019991:	75 09                	jne    c001999c <CPU::detectFeatures()+0x93e>
c0019993:	55                   	push   ebp
c0019994:	55                   	push   ebp
c0019995:	68 f4 b8 02 c0       	push   0xc002b8f4
c001999a:	eb 15                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c001999c:	83 f8 0d             	cmp    eax,0xd
c001999f:	75 09                	jne    c00199aa <CPU::detectFeatures()+0x94c>
c00199a1:	57                   	push   edi
c00199a2:	57                   	push   edi
c00199a3:	68 ff b8 02 c0       	push   0xc002b8ff
c00199a8:	eb 07                	jmp    c00199b1 <CPU::detectFeatures()+0x953>
c00199aa:	56                   	push   esi
c00199ab:	56                   	push   esi
c00199ac:	68 13 b9 02 c0       	push   0xc002b913
c00199b1:	53                   	push   ebx
c00199b2:	e8 29 ab ff ff       	call   c00144e0 <Device::setName(char const*)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	e9 80 00 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x9e1>
c00199bf:	51                   	push   ecx
c00199c0:	51                   	push   ecx
c00199c1:	68 5f b7 02 c0       	push   0xc002b75f
c00199c6:	57                   	push   edi
c00199c7:	e8 68 6e fe ff       	call   c0000834 <strcpy>
c00199cc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199d6:	e8 d3 68 fe ff       	call   c00002ae <is486>
c00199db:	83 c4 10             	add    esp,0x10
c00199de:	85 c0                	test   eax,eax
c00199e0:	74 2b                	je     c0019a0d <CPU::detectFeatures()+0x9af>
c00199e2:	52                   	push   edx
c00199e3:	52                   	push   edx
c00199e4:	68 1f b9 02 c0       	push   0xc002b91f
c00199e9:	53                   	push   ebx
c00199ea:	e8 f1 aa ff ff       	call   c00144e0 <Device::setName(char const*)>
c00199ef:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199f6:	0f 20 c0             	mov    eax,cr0
c00199f9:	83 e0 14             	and    eax,0x14
c00199fc:	83 c4 10             	add    esp,0x10
c00199ff:	83 f8 04             	cmp    eax,0x4
c0019a02:	75 1f                	jne    c0019a23 <CPU::detectFeatures()+0x9c5>
c0019a04:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a0b:	eb 32                	jmp    c0019a3f <CPU::detectFeatures()+0x9e1>
c0019a0d:	50                   	push   eax
c0019a0e:	50                   	push   eax
c0019a0f:	68 2a b9 02 c0       	push   0xc002b92a
c0019a14:	53                   	push   ebx
c0019a15:	e8 c6 aa ff ff       	call   c00144e0 <Device::setName(char const*)>
c0019a1a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a21:	eb d3                	jmp    c00199f6 <CPU::detectFeatures()+0x998>
c0019a23:	e8 61 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a28:	83 e0 01             	and    eax,0x1
c0019a2b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a2e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a34:	83 e0 fd             	and    eax,0xfffffffd
c0019a37:	09 d0                	or     eax,edx
c0019a39:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a3f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a46:	83 c4 4c             	add    esp,0x4c
c0019a49:	5b                   	pop    ebx
c0019a4a:	5e                   	pop    esi
c0019a4b:	5f                   	pop    edi
c0019a4c:	5d                   	pop    ebp
c0019a4d:	c3                   	ret    

c0019a4e <CPU::setupSMEP()>:
c0019a4e:	0f 20 e0             	mov    eax,cr4
c0019a51:	0d 00 00 10 00       	or     eax,0x100000
c0019a56:	0f 22 e0             	mov    cr4,eax
c0019a59:	c3                   	ret    

c0019a5a <CPU::setupUMIP()>:
c0019a5a:	0f 20 e0             	mov    eax,cr4
c0019a5d:	80 cc 08             	or     ah,0x8
c0019a60:	0f 22 e0             	mov    cr4,eax
c0019a63:	c3                   	ret    

c0019a64 <CPU::setupTSC()>:
c0019a64:	0f 20 e0             	mov    eax,cr4
c0019a67:	83 c8 04             	or     eax,0x4
c0019a6a:	0f 22 e0             	mov    cr4,eax
c0019a6d:	c3                   	ret    

c0019a6e <CPU::setupLargePages()>:
c0019a6e:	0f 20 e0             	mov    eax,cr4
c0019a71:	83 c8 10             	or     eax,0x10
c0019a74:	0f 22 e0             	mov    cr4,eax
c0019a77:	c3                   	ret    

c0019a78 <CPU::setupPAT()>:
c0019a78:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019a7d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a84:	74 2c                	je     c0019ab2 <CPU::setupPAT()+0x3a>
c0019a86:	53                   	push   ebx
c0019a87:	83 ec 10             	sub    esp,0x10
c0019a8a:	68 77 02 00 00       	push   0x277
c0019a8f:	50                   	push   eax
c0019a90:	e8 53 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a95:	83 e2 f8             	and    edx,0xfffffff8
c0019a98:	83 ca 01             	or     edx,0x1
c0019a9b:	52                   	push   edx
c0019a9c:	50                   	push   eax
c0019a9d:	68 77 02 00 00       	push   0x277
c0019aa2:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019aa8:	e8 67 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019aad:	83 c4 28             	add    esp,0x28
c0019ab0:	5b                   	pop    ebx
c0019ab1:	c3                   	ret    
c0019ab2:	c3                   	ret    
c0019ab3:	90                   	nop

c0019ab4 <CPU::setupMTRR()>:
c0019ab4:	c3                   	ret    
c0019ab5:	90                   	nop

c0019ab6 <CPU::setupGlobalPages()>:
c0019ab6:	0f 20 e0             	mov    eax,cr4
c0019ab9:	0c 80                	or     al,0x80
c0019abb:	0f 22 e0             	mov    cr4,eax
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <CPU::allowUsermodeDataAccess()>:
c0019ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019acb:	74 03                	je     c0019ad0 <CPU::allowUsermodeDataAccess()+0x10>
c0019acd:	0f 01 cb             	stac   
c0019ad0:	c3                   	ret    
c0019ad1:	90                   	nop

c0019ad2 <CPU::prohibitUsermodeDataAccess()>:
c0019ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019add:	74 03                	je     c0019ae2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019adf:	0f 01 ca             	clac   
c0019ae2:	c3                   	ret    
c0019ae3:	90                   	nop

c0019ae4 <CPU::setupSMAP()>:
c0019ae4:	0f 20 e0             	mov    eax,cr4
c0019ae7:	0d 00 00 20 00       	or     eax,0x200000
c0019aec:	0f 22 e0             	mov    cr4,eax
c0019aef:	eb e1                	jmp    c0019ad2 <CPU::prohibitUsermodeDataAccess()>
c0019af1:	90                   	nop

c0019af2 <CPU::setupFeatures()>:
c0019af2:	83 ec 0c             	sub    esp,0xc
c0019af5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b00:	74 07                	je     c0019b09 <CPU::setupFeatures()+0x17>
c0019b02:	52                   	push   edx
c0019b03:	e8 46 ff ff ff       	call   c0019a4e <CPU::setupSMEP()>
c0019b08:	58                   	pop    eax
c0019b09:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b10:	74 07                	je     c0019b19 <CPU::setupFeatures()+0x27>
c0019b12:	52                   	push   edx
c0019b13:	e8 cc ff ff ff       	call   c0019ae4 <CPU::setupSMAP()>
c0019b18:	58                   	pop    eax
c0019b19:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b20:	74 07                	je     c0019b29 <CPU::setupFeatures()+0x37>
c0019b22:	52                   	push   edx
c0019b23:	e8 32 ff ff ff       	call   c0019a5a <CPU::setupUMIP()>
c0019b28:	58                   	pop    eax
c0019b29:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b30:	74 07                	je     c0019b39 <CPU::setupFeatures()+0x47>
c0019b32:	52                   	push   edx
c0019b33:	e8 2c ff ff ff       	call   c0019a64 <CPU::setupTSC()>
c0019b38:	58                   	pop    eax
c0019b39:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b40:	74 07                	je     c0019b49 <CPU::setupFeatures()+0x57>
c0019b42:	52                   	push   edx
c0019b43:	e8 26 ff ff ff       	call   c0019a6e <CPU::setupLargePages()>
c0019b48:	59                   	pop    ecx
c0019b49:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b50:	74 07                	je     c0019b59 <CPU::setupFeatures()+0x67>
c0019b52:	52                   	push   edx
c0019b53:	e8 5e ff ff ff       	call   c0019ab6 <CPU::setupGlobalPages()>
c0019b58:	58                   	pop    eax
c0019b59:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b60:	74 0c                	je     c0019b6e <CPU::setupFeatures()+0x7c>
c0019b62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b66:	83 c4 0c             	add    esp,0xc
c0019b69:	e9 0a ff ff ff       	jmp    c0019a78 <CPU::setupPAT()>
c0019b6e:	83 c4 0c             	add    esp,0xc
c0019b71:	c3                   	ret    

c0019b72 <CPU::open(int, int, void*)>:
c0019b72:	57                   	push   edi
c0019b73:	56                   	push   esi
c0019b74:	53                   	push   ebx
c0019b75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b7d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b83:	83 ec 0c             	sub    esp,0xc
c0019b86:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b8c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b92:	50                   	push   eax
c0019b93:	e8 3c 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019b98:	83 c4 0c             	add    esp,0xc
c0019b9b:	6a 00                	push   0x0
c0019b9d:	68 ef be ad de       	push   0xdeadbeef
c0019ba2:	57                   	push   edi
c0019ba3:	e8 44 79 ff ff       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c0019ba8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bab:	e8 1c 79 ff ff       	call   c00114cc <TSS::flush()>
c0019bb0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bb9:	e8 72 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bbe:	b8 00 04 00 00       	mov    eax,0x400
c0019bc3:	0f 23 f8             	mov    db7,eax
c0019bc6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bd0:	e8 0b 63 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0019bd5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019bdb:	89 30                	mov    DWORD PTR [eax],esi
c0019bdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019be3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019be6:	58                   	pop    eax
c0019be7:	5a                   	pop    edx
c0019be8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bf2:	e8 49 8a ff ff       	call   c0012640 <VAS::setCPUSpecific(unsigned long)>
c0019bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bfa:	e8 5f f4 ff ff       	call   c001905e <CPU::detectFeatures()>
c0019bff:	e8 ca bc ff ff       	call   c00158ce <setupInterruptController()>
c0019c04:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c0a:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0019c0f:	83 e0 10             	and    eax,0x10
c0019c12:	83 f8 01             	cmp    eax,0x1
c0019c15:	19 c0                	sbb    eax,eax
c0019c17:	83 e0 46             	and    eax,0x46
c0019c1a:	83 c0 1e             	add    eax,0x1e
c0019c1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c20:	e8 b7 d1 ff ff       	call   c0016ddc <setupTimer(int)>
c0019c25:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c2e:	e8 bf fe ff ff       	call   c0019af2 <CPU::setupFeatures()>
c0019c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c36:	e8 a7 f1 ff ff       	call   c0018de2 <CPU::displayFeatures()>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	31 c0                	xor    eax,eax
c0019c40:	5b                   	pop    ebx
c0019c41:	5e                   	pop    esi
c0019c42:	5f                   	pop    edi
c0019c43:	c3                   	ret    

c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c44:	57                   	push   edi
c0019c45:	56                   	push   esi
c0019c46:	53                   	push   ebx
c0019c47:	51                   	push   ecx
c0019c48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c4c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c4f:	0f 02 c0             	lar    eax,ax
c0019c52:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c59:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c5c:	88 ca                	mov    dl,cl
c0019c5e:	c0 ea 06             	shr    dl,0x6
c0019c61:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c65:	89 ca                	mov    edx,ecx
c0019c67:	66 c1 ea 03          	shr    dx,0x3
c0019c6b:	83 e2 07             	and    edx,0x7
c0019c6e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c73:	88 17                	mov    BYTE PTR [edi],dl
c0019c75:	0f 84 a6 01 00 00    	je     c0019e21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c7b:	83 e1 07             	and    ecx,0x7
c0019c7e:	80 f9 04             	cmp    cl,0x4
c0019c81:	0f 84 98 00 00 00    	je     c0019d1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c87:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c8c:	0f 95 c0             	setne  al
c0019c8f:	80 f9 05             	cmp    cl,0x5
c0019c92:	0f 95 c2             	setne  dl
c0019c95:	08 c2                	or     dl,al
c0019c97:	74 79                	je     c0019d12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c99:	84 c9                	test   cl,cl
c0019c9b:	75 05                	jne    c0019ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c9d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ca0:	eb 3c                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ca2:	80 f9 01             	cmp    cl,0x1
c0019ca5:	75 05                	jne    c0019cac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019ca7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019caa:	eb 32                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cac:	80 f9 02             	cmp    cl,0x2
c0019caf:	75 05                	jne    c0019cb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019cb1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cb4:	eb 28                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cb6:	31 c0                	xor    eax,eax
c0019cb8:	80 f9 03             	cmp    cl,0x3
c0019cbb:	75 05                	jne    c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cbd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cc0:	eb 1c                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc2:	80 f9 05             	cmp    cl,0x5
c0019cc5:	75 05                	jne    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cc7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cca:	eb 12                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ccc:	80 f9 06             	cmp    cl,0x6
c0019ccf:	75 05                	jne    c0019cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cd1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cd4:	eb 08                	jmp    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd6:	80 f9 07             	cmp    cl,0x7
c0019cd9:	75 03                	jne    c0019cde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cdb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cde:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ce3:	75 10                	jne    c0019cf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ce5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ce9:	b9 03 00 00 00       	mov    ecx,0x3
c0019cee:	01 d0                	add    eax,edx
c0019cf0:	e9 37 01 00 00       	jmp    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0019cfa:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019cff:	0f 85 27 01 00 00    	jne    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d05:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d08:	b9 06 00 00 00       	mov    ecx,0x6
c0019d0d:	e9 1a 01 00 00       	jmp    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d12:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d15:	b9 06 00 00 00       	mov    ecx,0x6
c0019d1a:	e9 0f 01 00 00       	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d1f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d22:	88 ca                	mov    dl,cl
c0019d24:	c0 ea 06             	shr    dl,0x6
c0019d27:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d2b:	89 ca                	mov    edx,ecx
c0019d2d:	66 c1 ea 03          	shr    dx,0x3
c0019d31:	83 e2 07             	and    edx,0x7
c0019d34:	80 e1 07             	and    cl,0x7
c0019d37:	75 05                	jne    c0019d3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d39:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d3c:	eb 4c                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d3e:	80 f9 01             	cmp    cl,0x1
c0019d41:	75 05                	jne    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d43:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d46:	eb 42                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d48:	80 f9 02             	cmp    cl,0x2
c0019d4b:	75 05                	jne    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d4d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d50:	eb 38                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d52:	80 f9 03             	cmp    cl,0x3
c0019d55:	75 05                	jne    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d57:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d5a:	eb 2e                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d5c:	80 f9 04             	cmp    cl,0x4
c0019d5f:	75 12                	jne    c0019d73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d61:	f6 c4 60             	test   ah,0x60
c0019d64:	75 08                	jne    c0019d6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d69:	8d 78 14             	lea    edi,[eax+0x14]
c0019d6c:	eb 1c                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d71:	eb 17                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d73:	80 f9 05             	cmp    cl,0x5
c0019d76:	75 05                	jne    c0019d7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d78:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d7b:	eb 0d                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7d:	80 f9 06             	cmp    cl,0x6
c0019d80:	75 05                	jne    c0019d87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d82:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d85:	eb 03                	jmp    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d87:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d8a:	84 d2                	test   dl,dl
c0019d8c:	75 05                	jne    c0019d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d8e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d91:	eb 3c                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d93:	80 fa 01             	cmp    dl,0x1
c0019d96:	75 05                	jne    c0019d9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d98:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d9b:	eb 32                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d9d:	80 fa 02             	cmp    dl,0x2
c0019da0:	75 05                	jne    c0019da7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019da2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019da5:	eb 28                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da7:	80 fa 03             	cmp    dl,0x3
c0019daa:	75 05                	jne    c0019db1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019dac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019daf:	eb 1e                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db1:	31 c0                	xor    eax,eax
c0019db3:	80 fa 04             	cmp    dl,0x4
c0019db6:	74 17                	je     c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db8:	80 fa 05             	cmp    dl,0x5
c0019dbb:	75 05                	jne    c0019dc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dbd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dc0:	eb 0d                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc2:	80 fa 06             	cmp    dl,0x6
c0019dc5:	75 05                	jne    c0019dcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019dc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dca:	eb 03                	jmp    c0019dcf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dcc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dcf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dd4:	0f 94 c2             	sete   dl
c0019dd7:	80 f9 05             	cmp    cl,0x5
c0019dda:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019dde:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019de3:	d3 e0                	shl    eax,cl
c0019de5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019de9:	74 0a                	je     c0019df5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019deb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019dee:	b9 07 00 00 00       	mov    ecx,0x7
c0019df3:	eb 37                	jmp    c0019e2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019df5:	01 f8                	add    eax,edi
c0019df7:	b9 03 00 00 00       	mov    ecx,0x3
c0019dfc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e01:	74 2b                	je     c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e03:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e08:	75 0d                	jne    c0019e17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e0a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e0e:	01 c8                	add    eax,ecx
c0019e10:	b9 04 00 00 00       	mov    ecx,0x4
c0019e15:	eb 17                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e17:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e1a:	b9 07 00 00 00       	mov    ecx,0x7
c0019e1f:	eb 0d                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e21:	b9 02 00 00 00       	mov    ecx,0x2
c0019e26:	b2 01                	mov    dl,0x1
c0019e28:	31 c0                	xor    eax,eax
c0019e2a:	eb 02                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e2c:	31 d2                	xor    edx,edx
c0019e2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e32:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e38:	88 11                	mov    BYTE PTR [ecx],dl
c0019e3a:	5a                   	pop    edx
c0019e3b:	5b                   	pop    ebx
c0019e3c:	5e                   	pop    esi
c0019e3d:	5f                   	pop    edi
c0019e3e:	c3                   	ret    

c0019e3f <Krnl::smpEntry()>:
c0019e3f:	eb fe                	jmp    c0019e3f <Krnl::smpEntry()>

c0019e41 <Krnl::startCPU(int)>:
c0019e41:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019e46:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e4d:	0f 84 36 01 00 00    	je     c0019f89 <Krnl::startCPU(int)+0x148>
c0019e53:	53                   	push   ebx
c0019e54:	83 ec 08             	sub    esp,0x8
c0019e57:	e8 1b 3f 00 00       	call   c001dd77 <lockScheduler()>
c0019e5c:	52                   	push   edx
c0019e5d:	52                   	push   edx
c0019e5e:	6a 1b                	push   0x1b
c0019e60:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019e66:	e8 7d 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e6b:	59                   	pop    ecx
c0019e6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e71:	89 c3                	mov    ebx,eax
c0019e73:	58                   	pop    eax
c0019e74:	53                   	push   ebx
c0019e75:	68 64 b9 02 c0       	push   0xc002b964
c0019e7a:	e8 59 90 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0019e7f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e8d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e97:	c1 e0 18             	shl    eax,0x18
c0019e9a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ea0:	83 c4 10             	add    esp,0x10
c0019ea3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ea9:	09 c2                	or     edx,eax
c0019eab:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019eb1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019eb7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ebd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ec3:	80 cd c5             	or     ch,0xc5
c0019ec6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ecc:	f3 90                	pause  
c0019ece:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ed0:	0f ba e1 0c          	bt     ecx,0xc
c0019ed4:	72 f6                	jb     c0019ecc <Krnl::startCPU(int)+0x8b>
c0019ed6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019edc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ee2:	09 c1                	or     ecx,eax
c0019ee4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019eea:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ef0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ef6:	80 cd 85             	or     ch,0x85
c0019ef9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019eff:	f3 90                	pause  
c0019f01:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f03:	0f ba e1 0c          	bt     ecx,0xc
c0019f07:	72 f6                	jb     c0019eff <Krnl::startCPU(int)+0xbe>
c0019f09:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f13:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f19:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f1f:	09 c1                	or     ecx,eax
c0019f21:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f27:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f2d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f33:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f39:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f3f:	f3 90                	pause  
c0019f41:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f43:	0f ba e1 0c          	bt     ecx,0xc
c0019f47:	72 f6                	jb     c0019f3f <Krnl::startCPU(int)+0xfe>
c0019f49:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f53:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f59:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f5f:	09 c8                	or     eax,ecx
c0019f61:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f67:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f6d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f72:	0d 02 06 00 00       	or     eax,0x602
c0019f77:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f7d:	f3 90                	pause  
c0019f7f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f81:	0f ba e0 0c          	bt     eax,0xc
c0019f85:	72 f6                	jb     c0019f7d <Krnl::startCPU(int)+0x13c>
c0019f87:	eb fe                	jmp    c0019f87 <Krnl::startCPU(int)+0x146>
c0019f89:	c3                   	ret    

c0019f8a <Krnl::startCPUs()>:
c0019f8a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019f8f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f95:	88 c2                	mov    dl,al
c0019f97:	83 e2 0a             	and    edx,0xa
c0019f9a:	80 fa 0a             	cmp    dl,0xa
c0019f9d:	75 09                	jne    c0019fa8 <Krnl::startCPUs()+0x1e>
c0019f9f:	a8 01                	test   al,0x1
c0019fa1:	74 05                	je     c0019fa8 <Krnl::startCPUs()+0x1e>
c0019fa3:	e9 f3 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <EnvVarContainer::getEnv(char const*)>:
c0019faa:	57                   	push   edi
c0019fab:	56                   	push   esi
c0019fac:	53                   	push   ebx
c0019fad:	31 db                	xor    ebx,ebx
c0019faf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fb3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fb5:	7e 2b                	jle    c0019fe2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fb7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fbe:	50                   	push   eax
c0019fbf:	50                   	push   eax
c0019fc0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fc3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fca:	e8 f1 68 fe ff       	call   c00008c0 <strcmp>
c0019fcf:	83 c4 10             	add    esp,0x10
c0019fd2:	85 c0                	test   eax,eax
c0019fd4:	75 09                	jne    c0019fdf <EnvVarContainer::getEnv(char const*)+0x35>
c0019fd6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fd9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fdd:	eb 05                	jmp    c0019fe4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019fdf:	43                   	inc    ebx
c0019fe0:	eb d1                	jmp    c0019fb3 <EnvVarContainer::getEnv(char const*)+0x9>
c0019fe2:	31 c0                	xor    eax,eax
c0019fe4:	5b                   	pop    ebx
c0019fe5:	5e                   	pop    esi
c0019fe6:	5f                   	pop    edi
c0019fe7:	c3                   	ret    

c0019fe8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019fe8:	57                   	push   edi
c0019fe9:	56                   	push   esi
c0019fea:	53                   	push   ebx
c0019feb:	83 ec 1c             	sub    esp,0x1c
c0019fee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ff2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ff6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ffa:	57                   	push   edi
c0019ffb:	e8 94 67 fe ff       	call   c0000794 <strlen>
c001a000:	40                   	inc    eax
c001a001:	89 04 24             	mov    DWORD PTR [esp],eax
c001a004:	e8 3a 58 ff ff       	call   c000f843 <malloc>
c001a009:	89 34 24             	mov    DWORD PTR [esp],esi
c001a00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a010:	e8 7f 67 fe ff       	call   c0000794 <strlen>
c001a015:	40                   	inc    eax
c001a016:	89 04 24             	mov    DWORD PTR [esp],eax
c001a019:	e8 25 58 ff ff       	call   c000f843 <malloc>
c001a01e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a021:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a025:	e8 6a 67 fe ff       	call   c0000794 <strlen>
c001a02a:	83 c4 0c             	add    esp,0xc
c001a02d:	40                   	inc    eax
c001a02e:	50                   	push   eax
c001a02f:	6a 00                	push   0x0
c001a031:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a035:	e8 3e 67 fe ff       	call   c0000778 <memset>
c001a03a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a03d:	e8 52 67 fe ff       	call   c0000794 <strlen>
c001a042:	83 c4 0c             	add    esp,0xc
c001a045:	40                   	inc    eax
c001a046:	50                   	push   eax
c001a047:	57                   	push   edi
c001a048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a04c:	e8 f3 66 fe ff       	call   c0000744 <memcpy>
c001a051:	89 34 24             	mov    DWORD PTR [esp],esi
c001a054:	e8 3b 67 fe ff       	call   c0000794 <strlen>
c001a059:	83 c4 0c             	add    esp,0xc
c001a05c:	40                   	inc    eax
c001a05d:	50                   	push   eax
c001a05e:	6a 00                	push   0x0
c001a060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a064:	e8 0f 67 fe ff       	call   c0000778 <memset>
c001a069:	89 34 24             	mov    DWORD PTR [esp],esi
c001a06c:	e8 23 67 fe ff       	call   c0000794 <strlen>
c001a071:	83 c4 0c             	add    esp,0xc
c001a074:	40                   	inc    eax
c001a075:	50                   	push   eax
c001a076:	56                   	push   esi
c001a077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a07b:	e8 c4 66 fe ff       	call   c0000744 <memcpy>
c001a080:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a082:	40                   	inc    eax
c001a083:	89 03                	mov    DWORD PTR [ebx],eax
c001a085:	c1 e0 03             	shl    eax,0x3
c001a088:	5a                   	pop    edx
c001a089:	59                   	pop    ecx
c001a08a:	50                   	push   eax
c001a08b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a08e:	e8 9c 57 ff ff       	call   c000f82f <realloc>
c001a093:	83 c4 0c             	add    esp,0xc
c001a096:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a099:	6a 08                	push   0x8
c001a09b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a09f:	52                   	push   edx
c001a0a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0a2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0a6:	50                   	push   eax
c001a0a7:	e8 98 66 fe ff       	call   c0000744 <memcpy>
c001a0ac:	83 c4 20             	add    esp,0x20
c001a0af:	5b                   	pop    ebx
c001a0b0:	5e                   	pop    esi
c001a0b1:	5f                   	pop    edi
c001a0b2:	c3                   	ret    
c001a0b3:	90                   	nop

c001a0b4 <EnvVarContainer::deleteEnv(char const*)>:
c001a0b4:	c3                   	ret    
c001a0b5:	90                   	nop

c001a0b6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0b6:	55                   	push   ebp
c001a0b7:	57                   	push   edi
c001a0b8:	56                   	push   esi
c001a0b9:	53                   	push   ebx
c001a0ba:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0c0:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0c7:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0ce:	68 14 01 00 00       	push   0x114
c001a0d3:	e8 6b 57 ff ff       	call   c000f843 <malloc>
c001a0d8:	83 c4 0c             	add    esp,0xc
c001a0db:	89 c7                	mov    edi,eax
c001a0dd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0e7:	50                   	push   eax
c001a0e8:	e8 43 93 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001a0ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0f0:	e8 0d 96 ff ff       	call   c0013702 <File::exists()>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	84 c0                	test   al,al
c001a0fa:	75 31                	jne    c001a12d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a0fc:	51                   	push   ecx
c001a0fd:	51                   	push   ecx
c001a0fe:	6a 12                	push   0x12
c001a100:	57                   	push   edi
c001a101:	e8 8e 93 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001a106:	8b 07                	mov    eax,DWORD PTR [edi]
c001a108:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a10b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a10e:	e8 81 66 fe ff       	call   c0000794 <strlen>
c001a113:	5a                   	pop    edx
c001a114:	31 d2                	xor    edx,edx
c001a116:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a11a:	51                   	push   ecx
c001a11b:	55                   	push   ebp
c001a11c:	52                   	push   edx
c001a11d:	50                   	push   eax
c001a11e:	57                   	push   edi
c001a11f:	ff d3                	call   ebx
c001a121:	83 c4 14             	add    esp,0x14
c001a124:	57                   	push   edi
c001a125:	e8 c8 93 ff ff       	call   c00134f2 <File::close()>
c001a12a:	83 c4 10             	add    esp,0x10
c001a12d:	31 db                	xor    ebx,ebx
c001a12f:	50                   	push   eax
c001a130:	31 ed                	xor    ebp,ebp
c001a132:	68 00 01 00 00       	push   0x100
c001a137:	6a 00                	push   0x0
c001a139:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a13d:	50                   	push   eax
c001a13e:	e8 35 66 fe ff       	call   c0000778 <memset>
c001a143:	58                   	pop    eax
c001a144:	5a                   	pop    edx
c001a145:	6a 01                	push   0x1
c001a147:	57                   	push   edi
c001a148:	e8 47 93 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	83 ec 0c             	sub    esp,0xc
c001a153:	8b 07                	mov    eax,DWORD PTR [edi]
c001a155:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a159:	51                   	push   ecx
c001a15a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a15e:	52                   	push   edx
c001a15f:	6a 00                	push   0x0
c001a161:	6a 01                	push   0x1
c001a163:	57                   	push   edi
c001a164:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a167:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a16b:	83 c4 20             	add    esp,0x20
c001a16e:	3c 0d                	cmp    al,0xd
c001a170:	0f 84 12 01 00 00    	je     c001a288 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a176:	85 db                	test   ebx,ebx
c001a178:	0f 84 fd 00 00 00    	je     c001a27b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a17e:	3c 0a                	cmp    al,0xa
c001a180:	74 13                	je     c001a195 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a182:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a187:	74 0c                	je     c001a195 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a189:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a18f:	0f 8e e6 00 00 00    	jle    c001a27b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a195:	83 ec 0c             	sub    esp,0xc
c001a198:	8d 53 01             	lea    edx,[ebx+0x1]
c001a19b:	29 dd                	sub    ebp,ebx
c001a19d:	52                   	push   edx
c001a19e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1a2:	e8 9c 56 ff ff       	call   c000f843 <malloc>
c001a1a7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1ae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1b1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1b5:	e8 89 56 ff ff       	call   c000f843 <malloc>
c001a1ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1be:	83 c4 0c             	add    esp,0xc
c001a1c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1c5:	52                   	push   edx
c001a1c6:	6a 00                	push   0x0
c001a1c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1cc:	e8 a7 65 fe ff       	call   c0000778 <memset>
c001a1d1:	83 c4 0c             	add    esp,0xc
c001a1d4:	53                   	push   ebx
c001a1d5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1d9:	55                   	push   ebp
c001a1da:	01 eb                	add    ebx,ebp
c001a1dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1e0:	e8 5f 65 fe ff       	call   c0000744 <memcpy>
c001a1e5:	83 c4 0c             	add    esp,0xc
c001a1e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1ec:	51                   	push   ecx
c001a1ed:	6a 00                	push   0x0
c001a1ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1f3:	e8 80 65 fe ff       	call   c0000778 <memset>
c001a1f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1fb:	e8 94 65 fe ff       	call   c0000794 <strlen>
c001a200:	83 c4 0c             	add    esp,0xc
c001a203:	50                   	push   eax
c001a204:	53                   	push   ebx
c001a205:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a209:	e8 36 65 fe ff       	call   c0000744 <memcpy>
c001a20e:	5b                   	pop    ebx
c001a20f:	58                   	pop    eax
c001a210:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a214:	68 75 b9 02 c0       	push   0xc002b975
c001a219:	e8 ba 8c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a21e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a220:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a223:	40                   	inc    eax
c001a224:	83 c4 10             	add    esp,0x10
c001a227:	89 06                	mov    DWORD PTR [esi],eax
c001a229:	85 d2                	test   edx,edx
c001a22b:	75 0c                	jne    c001a239 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a22d:	83 ec 0c             	sub    esp,0xc
c001a230:	6a 08                	push   0x8
c001a232:	e8 0c 56 ff ff       	call   c000f843 <malloc>
c001a237:	eb 0c                	jmp    c001a245 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a239:	c1 e0 03             	shl    eax,0x3
c001a23c:	51                   	push   ecx
c001a23d:	51                   	push   ecx
c001a23e:	50                   	push   eax
c001a23f:	52                   	push   edx
c001a240:	e8 ea 55 ff ff       	call   c000f82f <realloc>
c001a245:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	31 db                	xor    ebx,ebx
c001a24d:	52                   	push   edx
c001a24e:	6a 08                	push   0x8
c001a250:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a254:	50                   	push   eax
c001a255:	8b 16                	mov    edx,DWORD PTR [esi]
c001a257:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a25a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a25e:	50                   	push   eax
c001a25f:	e8 e0 64 fe ff       	call   c0000744 <memcpy>
c001a264:	83 c4 0c             	add    esp,0xc
c001a267:	68 00 01 00 00       	push   0x100
c001a26c:	6a 00                	push   0x0
c001a26e:	55                   	push   ebp
c001a26f:	31 ed                	xor    ebp,ebp
c001a271:	e8 02 65 fe ff       	call   c0000778 <memset>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	eb 0d                	jmp    c001a288 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a27b:	3c 3d                	cmp    al,0x3d
c001a27d:	74 07                	je     c001a286 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a27f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a283:	45                   	inc    ebp
c001a284:	eb 02                	jmp    c001a288 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a286:	89 eb                	mov    ebx,ebp
c001a288:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a28d:	0f 85 bd fe ff ff    	jne    c001a150 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a293:	50                   	push   eax
c001a294:	50                   	push   eax
c001a295:	ff 36                	push   DWORD PTR [esi]
c001a297:	68 83 b9 02 c0       	push   0xc002b983
c001a29c:	e8 37 8c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a2a1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2a7:	5b                   	pop    ebx
c001a2a8:	5e                   	pop    esi
c001a2a9:	5f                   	pop    edi
c001a2aa:	5d                   	pop    ebp
c001a2ab:	c3                   	ret    

c001a2ac <EnvVarContainer::__loadSystem()>:
c001a2ac:	83 ec 10             	sub    esp,0x10
c001a2af:	68 c0 d8 02 c0       	push   0xc002d8c0
c001a2b4:	68 ae b9 02 c0       	push   0xc002b9ae
c001a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2bd:	e8 f4 fd ff ff       	call   c001a0b6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2c2:	83 c4 1c             	add    esp,0x1c
c001a2c5:	c3                   	ret    

c001a2c6 <EnvVarContainer::__loadUser()>:
c001a2c6:	c3                   	ret    
c001a2c7:	90                   	nop

c001a2c8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2e8:	90                   	nop
c001a2e9:	c3                   	ret    

c001a2ea <EnvVarContainer::~EnvVarContainer()>:
c001a2ea:	83 ec 0c             	sub    esp,0xc
c001a2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2f4:	85 c0                	test   eax,eax
c001a2f6:	74 1d                	je     c001a315 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2fe:	85 c0                	test   eax,eax
c001a300:	74 13                	je     c001a315 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a309:	83 ec 0c             	sub    esp,0xc
c001a30c:	50                   	push   eax
c001a30d:	e8 41 55 ff ff       	call   c000f853 <free>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	90                   	nop
c001a316:	83 c4 0c             	add    esp,0xc
c001a319:	c3                   	ret    

c001a31a <Krnl::getEnv(Process*, char const*)>:
c001a31a:	53                   	push   ebx
c001a31b:	83 ec 08             	sub    esp,0x8
c001a31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a322:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a326:	39 05 f4 18 03 c0    	cmp    DWORD PTR ds:0xc00318f4,eax
c001a32c:	74 04                	je     c001a332 <Krnl::getEnv(Process*, char const*)+0x18>
c001a32e:	85 c0                	test   eax,eax
c001a330:	75 0b                	jne    c001a33d <Krnl::getEnv(Process*, char const*)+0x23>
c001a332:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a337:	85 c0                	test   eax,eax
c001a339:	75 19                	jne    c001a354 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a33b:	eb 27                	jmp    c001a364 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a33d:	52                   	push   edx
c001a33e:	52                   	push   edx
c001a33f:	53                   	push   ebx
c001a340:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a346:	e8 5f fc ff ff       	call   c0019faa <EnvVarContainer::getEnv(char const*)>
c001a34b:	83 c4 10             	add    esp,0x10
c001a34e:	85 c0                	test   eax,eax
c001a350:	75 28                	jne    c001a37a <Krnl::getEnv(Process*, char const*)+0x60>
c001a352:	eb de                	jmp    c001a332 <Krnl::getEnv(Process*, char const*)+0x18>
c001a354:	52                   	push   edx
c001a355:	52                   	push   edx
c001a356:	53                   	push   ebx
c001a357:	50                   	push   eax
c001a358:	e8 4d fc ff ff       	call   c0019faa <EnvVarContainer::getEnv(char const*)>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	85 c0                	test   eax,eax
c001a362:	75 16                	jne    c001a37a <Krnl::getEnv(Process*, char const*)+0x60>
c001a364:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a368:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a36d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a371:	83 c4 08             	add    esp,0x8
c001a374:	5b                   	pop    ebx
c001a375:	e9 30 fc ff ff       	jmp    c0019faa <EnvVarContainer::getEnv(char const*)>
c001a37a:	83 c4 08             	add    esp,0x8
c001a37d:	5b                   	pop    ebx
c001a37e:	c3                   	ret    

c001a37f <Krnl::setEnvSystem(char const*, char const*)>:
c001a37f:	83 ec 10             	sub    esp,0x10
c001a382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a38a:	ff 35 d8 0e 03 c0    	push   DWORD PTR ds:0xc0030ed8
c001a390:	e8 53 fc ff ff       	call   c0019fe8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a395:	83 c4 1c             	add    esp,0x1c
c001a398:	c3                   	ret    

c001a399 <Krnl::setEnvUser(char const*, char const*)>:
c001a399:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a39e:	85 c0                	test   eax,eax
c001a3a0:	74 15                	je     c001a3b7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3a2:	83 ec 10             	sub    esp,0x10
c001a3a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ad:	50                   	push   eax
c001a3ae:	e8 35 fc ff ff       	call   c0019fe8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3b3:	83 c4 1c             	add    esp,0x1c
c001a3b6:	c3                   	ret    
c001a3b7:	c3                   	ret    

c001a3b8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3bc:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a3c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3c6:	e9 1d fc ff ff       	jmp    c0019fe8 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3cb <Krnl::deleteEnvSystem(char const*)>:
c001a3cb:	c3                   	ret    

c001a3cc <Krnl::deleteEnvUser(char const*)>:
c001a3cc:	c3                   	ret    

c001a3cd <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3cd:	c3                   	ret    

c001a3ce <Krnl::newProcessEnv(Process*)>:
c001a3ce:	83 ec 28             	sub    esp,0x28
c001a3d1:	6a 0c                	push   0xc
c001a3d3:	e8 6b 54 ff ff       	call   c000f843 <malloc>
c001a3d8:	5a                   	pop    edx
c001a3d9:	59                   	pop    ecx
c001a3da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3de:	50                   	push   eax
c001a3df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3e3:	e8 e0 fe ff ff       	call   c001a2c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3ec:	83 c4 2c             	add    esp,0x2c
c001a3ef:	c3                   	ret    

c001a3f0 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a3f0:	56                   	push   esi
c001a3f1:	53                   	push   ebx
c001a3f2:	83 ec 10             	sub    esp,0x10
c001a3f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3f9:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a3ff:	6a 0c                	push   0xc
c001a401:	e8 3d 54 ff ff       	call   c000f843 <malloc>
c001a406:	89 c3                	mov    ebx,eax
c001a408:	58                   	pop    eax
c001a409:	5a                   	pop    edx
c001a40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a40e:	53                   	push   ebx
c001a40f:	e8 b4 fe ff ff       	call   c001a2c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a414:	8b 06                	mov    eax,DWORD PTR [esi]
c001a416:	89 03                	mov    DWORD PTR [ebx],eax
c001a418:	c1 e0 03             	shl    eax,0x3
c001a41b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a41e:	e8 20 54 ff ff       	call   c000f843 <malloc>
c001a423:	83 c4 0c             	add    esp,0xc
c001a426:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a429:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a42b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a432:	52                   	push   edx
c001a433:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a436:	50                   	push   eax
c001a437:	e8 08 63 fe ff       	call   c0000744 <memcpy>
c001a43c:	89 d8                	mov    eax,ebx
c001a43e:	83 c4 14             	add    esp,0x14
c001a441:	5b                   	pop    ebx
c001a442:	5e                   	pop    esi
c001a443:	c3                   	ret    

c001a444 <Krnl::loadSystemEnv()>:
c001a444:	53                   	push   ebx
c001a445:	83 ec 14             	sub    esp,0x14
c001a448:	6a 0c                	push   0xc
c001a44a:	e8 f4 53 ff ff       	call   c000f843 <malloc>
c001a44f:	89 c3                	mov    ebx,eax
c001a451:	58                   	pop    eax
c001a452:	5a                   	pop    edx
c001a453:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a459:	53                   	push   ebx
c001a45a:	e8 69 fe ff ff       	call   c001a2c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a45f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a462:	89 1d d8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed8,ebx
c001a468:	e8 3f fe ff ff       	call   c001a2ac <EnvVarContainer::__loadSystem()>
c001a46d:	83 c4 18             	add    esp,0x18
c001a470:	5b                   	pop    ebx
c001a471:	c3                   	ret    

c001a472 <Krnl::loadUserEnv()>:
c001a472:	53                   	push   ebx
c001a473:	83 ec 14             	sub    esp,0x14
c001a476:	6a 0c                	push   0xc
c001a478:	e8 c6 53 ff ff       	call   c000f843 <malloc>
c001a47d:	89 c3                	mov    ebx,eax
c001a47f:	58                   	pop    eax
c001a480:	5a                   	pop    edx
c001a481:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a487:	53                   	push   ebx
c001a488:	e8 3b fe ff ff       	call   c001a2c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a48d:	89 1d d4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed4,ebx
c001a493:	83 c4 18             	add    esp,0x18
c001a496:	5b                   	pop    ebx
c001a497:	c3                   	ret    

c001a498 <Krnl::flushEnv()>:
c001a498:	c3                   	ret    

c001a499 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a49d:	8b 15 d4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed4
c001a4a3:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a4a9:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a4ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4b0:	03 01                	add    eax,DWORD PTR [ecx]
c001a4b2:	85 d2                	test   edx,edx
c001a4b4:	74 02                	je     c001a4b8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4b6:	03 02                	add    eax,DWORD PTR [edx]
c001a4b8:	c3                   	ret    

c001a4b9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4b9:	57                   	push   edi
c001a4ba:	8b 0d d4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed4
c001a4c0:	56                   	push   esi
c001a4c1:	85 c9                	test   ecx,ecx
c001a4c3:	53                   	push   ebx
c001a4c4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4cc:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a4d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4d6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4d8:	75 47                	jne    c001a521 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4da:	39 c3                	cmp    ebx,eax
c001a4dc:	7c 47                	jl     c001a525 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4de:	8b 15 d8 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed8
c001a4e4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4e6:	01 c1                	add    ecx,eax
c001a4e8:	39 d9                	cmp    ecx,ebx
c001a4ea:	7e 6c                	jle    c001a558 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4ec:	51                   	push   ecx
c001a4ed:	89 d9                	mov    ecx,ebx
c001a4ef:	29 c1                	sub    ecx,eax
c001a4f1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4f4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a4f8:	53                   	push   ebx
c001a4f9:	68 d0 b9 02 c0       	push   0xc002b9d0
c001a4fe:	e8 d5 89 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a503:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a509:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a50b:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a513:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a517:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a51a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a51d:	89 06                	mov    DWORD PTR [esi],eax
c001a51f:	eb 51                	jmp    c001a572 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a521:	39 c3                	cmp    ebx,eax
c001a523:	7d 05                	jge    c001a52a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a525:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a528:	eb 20                	jmp    c001a54a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a52a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a52c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a52f:	39 da                	cmp    edx,ebx
c001a531:	7e 04                	jle    c001a537 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a533:	29 c3                	sub    ebx,eax
c001a535:	eb 10                	jmp    c001a547 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a537:	8b 0d d8 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed8
c001a53d:	03 11                	add    edx,DWORD PTR [ecx]
c001a53f:	39 da                	cmp    edx,ebx
c001a541:	7e 15                	jle    c001a558 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a543:	29 c3                	sub    ebx,eax
c001a545:	29 fb                	sub    ebx,edi
c001a547:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a54a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a54e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a551:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a554:	89 06                	mov    DWORD PTR [esi],eax
c001a556:	eb 1d                	jmp    c001a575 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	68 e4 b9 02 c0       	push   0xc002b9e4
c001a560:	e8 18 00 00 00       	call   c001a57d <Krnl::panic(char const*)>
c001a565:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a56b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	89 f0                	mov    eax,esi
c001a577:	5b                   	pop    ebx
c001a578:	5e                   	pop    esi
c001a579:	5f                   	pop    edi
c001a57a:	c2 04 00             	ret    0x4

c001a57d <Krnl::panic(char const*)>:
c001a57d:	55                   	push   ebp
c001a57e:	89 e5                	mov    ebp,esp
c001a580:	53                   	push   ebx
c001a581:	83 ec 0c             	sub    esp,0xc
c001a584:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a587:	fa                   	cli    
c001a588:	c6 05 e4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee4,0x1
c001a58f:	53                   	push   ebx
c001a590:	c6 05 c4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c4,0x0
c001a597:	68 fe b9 02 c0       	push   0xc002b9fe
c001a59c:	e8 37 89 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a5a1:	58                   	pop    eax
c001a5a2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5a7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5ad:	e8 7b 67 ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001a5b2:	83 c4 0c             	add    esp,0xc
c001a5b5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5ba:	6a 01                	push   0x1
c001a5bc:	6a 0f                	push   0xf
c001a5be:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5c4:	e8 95 61 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5c9:	58                   	pop    eax
c001a5ca:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5cf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5d5:	e8 f4 69 ff ff       	call   c0010fce <VgaText::clearScreen()>
c001a5da:	58                   	pop    eax
c001a5db:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5e0:	5a                   	pop    edx
c001a5e1:	68 17 ba 02 c0       	push   0xc002ba17
c001a5e6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5ec:	e8 5b 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a5f1:	59                   	pop    ecx
c001a5f2:	58                   	pop    eax
c001a5f3:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5f8:	68 bc ba 02 c0       	push   0xc002babc
c001a5fd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a603:	e8 44 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a608:	58                   	pop    eax
c001a609:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a60e:	5a                   	pop    edx
c001a60f:	68 33 ba 02 c0       	push   0xc002ba33
c001a614:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a61a:	e8 2d 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a61f:	59                   	pop    ecx
c001a620:	58                   	pop    eax
c001a621:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a626:	53                   	push   ebx
c001a627:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a62d:	e8 1a 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a632:	58                   	pop    eax
c001a633:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a638:	5a                   	pop    edx
c001a639:	68 53 ba 02 c0       	push   0xc002ba53
c001a63e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a644:	e8 03 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a649:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001a64e:	83 c4 10             	add    esp,0x10
c001a651:	85 c0                	test   eax,eax
c001a653:	74 02                	je     c001a657 <Krnl::panic(char const*)+0xda>
c001a655:	ff d0                	call   eax
c001a657:	83 ec 0c             	sub    esp,0xc
c001a65a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a65d:	e8 fd 2f 00 00       	call   c001d65f <Thr::getDriverNameFromAddress(unsigned long)>
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	89 c3                	mov    ebx,eax
c001a667:	85 c0                	test   eax,eax
c001a669:	0f 84 50 02 00 00    	je     c001a8bf <Krnl::panic(char const*)+0x342>
c001a66f:	83 ec 08             	sub    esp,0x8
c001a672:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a678:	68 f8 ba 02 c0       	push   0xc002baf8
c001a67d:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a683:	e8 c4 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a688:	58                   	pop    eax
c001a689:	5a                   	pop    edx
c001a68a:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a690:	68 33 ba 02 c0       	push   0xc002ba33
c001a695:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a69b:	e8 ac 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6a0:	59                   	pop    ecx
c001a6a1:	58                   	pop    eax
c001a6a2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6a7:	53                   	push   ebx
c001a6a8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ae:	e8 99 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	83 ec 08             	sub    esp,0x8
c001a6b9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6be:	68 52 ba 02 c0       	push   0xc002ba52
c001a6c3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6c9:	e8 7e 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6ce:	58                   	pop    eax
c001a6cf:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6d4:	5a                   	pop    edx
c001a6d5:	68 50 bb 02 c0       	push   0xc002bb50
c001a6da:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e0:	e8 67 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6e5:	59                   	pop    ecx
c001a6e6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6eb:	5b                   	pop    ebx
c001a6ec:	68 90 bb 02 c0       	push   0xc002bb90
c001a6f1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6f7:	e8 50 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6fc:	58                   	pop    eax
c001a6fd:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a702:	5a                   	pop    edx
c001a703:	68 3e ba 02 c0       	push   0xc002ba3e
c001a708:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a70e:	e8 39 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a713:	59                   	pop    ecx
c001a714:	5b                   	pop    ebx
c001a715:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a718:	68 56 ba 02 c0       	push   0xc002ba56
c001a71d:	e8 b6 87 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a722:	58                   	pop    eax
c001a723:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a726:	5a                   	pop    edx
c001a727:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a72a:	68 5f ba 02 c0       	push   0xc002ba5f
c001a72f:	e8 a4 87 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a734:	59                   	pop    ecx
c001a735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a738:	5b                   	pop    ebx
c001a739:	8b 00                	mov    eax,DWORD PTR [eax]
c001a73b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a73e:	68 68 ba 02 c0       	push   0xc002ba68
c001a743:	e8 90 87 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001a748:	58                   	pop    eax
c001a749:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a74e:	5a                   	pop    edx
c001a74f:	68 d4 bb 02 c0       	push   0xc002bbd4
c001a754:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a75a:	e8 ed 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a75f:	59                   	pop    ecx
c001a760:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a765:	5b                   	pop    ebx
c001a766:	68 71 ba 02 c0       	push   0xc002ba71
c001a76b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a771:	e8 d6 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a776:	0f 20 c0             	mov    eax,cr0
c001a779:	5a                   	pop    edx
c001a77a:	59                   	pop    ecx
c001a77b:	50                   	push   eax
c001a77c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a781:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a787:	e8 e6 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a78c:	5b                   	pop    ebx
c001a78d:	58                   	pop    eax
c001a78e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a793:	68 7b ba 02 c0       	push   0xc002ba7b
c001a798:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a79e:	e8 a9 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7a3:	0f 20 d0             	mov    eax,cr2
c001a7a6:	5a                   	pop    edx
c001a7a7:	59                   	pop    ecx
c001a7a8:	50                   	push   eax
c001a7a9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7ae:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7b4:	e8 b9 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a7b9:	5b                   	pop    ebx
c001a7ba:	58                   	pop    eax
c001a7bb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7c0:	68 85 ba 02 c0       	push   0xc002ba85
c001a7c5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7cb:	e8 7c 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7d0:	0f 20 d8             	mov    eax,cr3
c001a7d3:	5a                   	pop    edx
c001a7d4:	59                   	pop    ecx
c001a7d5:	50                   	push   eax
c001a7d6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7db:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7e1:	e8 8c 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a7e6:	5b                   	pop    ebx
c001a7e7:	58                   	pop    eax
c001a7e8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7ed:	68 98 ba 02 c0       	push   0xc002ba98
c001a7f2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7f8:	e8 4f 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7fd:	0f 20 e0             	mov    eax,cr4
c001a800:	5a                   	pop    edx
c001a801:	59                   	pop    ecx
c001a802:	50                   	push   eax
c001a803:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a808:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a80e:	e8 5f 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a813:	5b                   	pop    ebx
c001a814:	58                   	pop    eax
c001a815:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a81a:	68 a2 ba 02 c0       	push   0xc002baa2
c001a81f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a825:	e8 22 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a82a:	5a                   	pop    edx
c001a82b:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a830:	59                   	pop    ecx
c001a831:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a837:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a83a:	50                   	push   eax
c001a83b:	e8 32 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a840:	5b                   	pop    ebx
c001a841:	58                   	pop    eax
c001a842:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a847:	68 b9 ba 02 c0       	push   0xc002bab9
c001a84c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a852:	e8 f5 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a857:	5a                   	pop    edx
c001a858:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a85d:	59                   	pop    ecx
c001a85e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a864:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a867:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a86a:	50                   	push   eax
c001a86b:	e8 02 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a870:	5b                   	pop    ebx
c001a871:	58                   	pop    eax
c001a872:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a877:	68 b9 ba 02 c0       	push   0xc002bab9
c001a87c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a882:	e8 c5 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a887:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a88c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a88f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a895:	8b 12                	mov    edx,DWORD PTR [edx]
c001a897:	59                   	pop    ecx
c001a898:	5b                   	pop    ebx
c001a899:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a89c:	50                   	push   eax
c001a89d:	e8 d0 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a8a2:	83 c4 10             	add    esp,0x10
c001a8a5:	b2 fe                	mov    dl,0xfe
c001a8a7:	e4 60                	in     al,0x60
c001a8a9:	3c 1c                	cmp    al,0x1c
c001a8ab:	74 04                	je     c001a8b1 <Krnl::panic(char const*)+0x334>
c001a8ad:	3c 5a                	cmp    al,0x5a
c001a8af:	75 f6                	jne    c001a8a7 <Krnl::panic(char const*)+0x32a>
c001a8b1:	e4 64                	in     al,0x64
c001a8b3:	a8 02                	test   al,0x2
c001a8b5:	75 fa                	jne    c001a8b1 <Krnl::panic(char const*)+0x334>
c001a8b7:	88 d0                	mov    al,dl
c001a8b9:	e6 64                	out    0x64,al
c001a8bb:	fa                   	cli    
c001a8bc:	f4                   	hlt    
c001a8bd:	eb e8                	jmp    c001a8a7 <Krnl::panic(char const*)+0x32a>
c001a8bf:	50                   	push   eax
c001a8c0:	50                   	push   eax
c001a8c1:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8c6:	68 24 bb 02 c0       	push   0xc002bb24
c001a8cb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8d1:	e8 76 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8d6:	58                   	pop    eax
c001a8d7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8dc:	5a                   	pop    edx
c001a8dd:	68 33 ba 02 c0       	push   0xc002ba33
c001a8e2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8e8:	e8 5f 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8ed:	59                   	pop    ecx
c001a8ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8f3:	5b                   	pop    ebx
c001a8f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8f7:	83 c0 0c             	add    eax,0xc
c001a8fa:	50                   	push   eax
c001a8fb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a900:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a906:	e8 41 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	e9 a3 fd ff ff       	jmp    c001a6b6 <Krnl::panic(char const*)+0x139>

c001a913 <Net::switchEndian16(unsigned short)>:
c001a913:	83 ec 04             	sub    esp,0x4
c001a916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a91a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a91e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a922:	c1 f8 08             	sar    eax,0x8
c001a925:	89 c2                	mov    edx,eax
c001a927:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a92b:	c1 e0 08             	shl    eax,0x8
c001a92e:	09 d0                	or     eax,edx
c001a930:	83 c4 04             	add    esp,0x4
c001a933:	c3                   	ret    

c001a934 <Net::switchEndian32(unsigned int)>:
c001a934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a938:	c1 e8 18             	shr    eax,0x18
c001a93b:	89 c2                	mov    edx,eax
c001a93d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a941:	c1 e0 08             	shl    eax,0x8
c001a944:	25 00 00 ff 00       	and    eax,0xff0000
c001a949:	09 c2                	or     edx,eax
c001a94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94f:	c1 e8 08             	shr    eax,0x8
c001a952:	25 00 ff 00 00       	and    eax,0xff00
c001a957:	09 c2                	or     edx,eax
c001a959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a95d:	c1 e0 18             	shl    eax,0x18
c001a960:	09 d0                	or     eax,edx
c001a962:	c3                   	ret    

c001a963 <Net::crc32Calc(unsigned char*, int)>:
c001a963:	83 ec 10             	sub    esp,0x10
c001a966:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a96b:	75 07                	jne    c001a974 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a96d:	b8 00 00 00 00       	mov    eax,0x0
c001a972:	eb 7c                	jmp    c001a9f0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a974:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a979:	7f 07                	jg     c001a982 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a97b:	b8 00 00 00 00       	mov    eax,0x0
c001a980:	eb 6e                	jmp    c001a9f0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a982:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a98a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a992:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a996:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a99a:	7d 4e                	jge    c001a9ea <Net::crc32Calc(unsigned char*, int)+0x87>
c001a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9a4:	01 d0                	add    eax,edx
c001a9a6:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a8:	0f b6 c0             	movzx  eax,al
c001a9ab:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9b7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9bc:	7f 26                	jg     c001a9e4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c2:	83 e0 01             	and    eax,0x1
c001a9c5:	74 0d                	je     c001a9d4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cb:	d1 e8                	shr    eax,1
c001a9cd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9d2:	eb 06                	jmp    c001a9da <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d8:	d1 e8                	shr    eax,1
c001a9da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9e2:	eb d3                	jmp    c001a9b7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9e4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9e8:	eb a8                	jmp    c001a992 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ee:	f7 d0                	not    eax
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	c3                   	ret    

c001a9f4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a9f4:	83 ec 1c             	sub    esp,0x1c
c001a9f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa07:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa0c:	7f 14                	jg     c001aa22 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa12:	8d 50 01             	lea    edx,[eax+0x1]
c001aa15:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa19:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa1c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa20:	eb e5                	jmp    c001aa07 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa26:	8d 50 01             	lea    edx,[eax+0x1]
c001aa29:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa2d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa30:	83 ec 04             	sub    esp,0x4
c001aa33:	6a 06                	push   0x6
c001aa35:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa39:	50                   	push   eax
c001aa3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa3e:	e8 01 5d fe ff       	call   c0000744 <memcpy>
c001aa43:	83 c4 10             	add    esp,0x10
c001aa46:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa4b:	83 ec 04             	sub    esp,0x4
c001aa4e:	6a 06                	push   0x6
c001aa50:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa54:	50                   	push   eax
c001aa55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa59:	e8 e6 5c fe ff       	call   c0000744 <memcpy>
c001aa5e:	83 c4 10             	add    esp,0x10
c001aa61:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa6a:	0f b7 c0             	movzx  eax,ax
c001aa6d:	c1 f8 08             	sar    eax,0x8
c001aa70:	89 c1                	mov    ecx,eax
c001aa72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa76:	8d 50 01             	lea    edx,[eax+0x1]
c001aa79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa7d:	88 ca                	mov    dl,cl
c001aa7f:	88 10                	mov    BYTE PTR [eax],dl
c001aa81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa89:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa8c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa90:	88 10                	mov    BYTE PTR [eax],dl
c001aa92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa9a:	83 ec 04             	sub    esp,0x4
c001aa9d:	52                   	push   edx
c001aa9e:	50                   	push   eax
c001aa9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaa3:	e8 9c 5c fe ff       	call   c0000744 <memcpy>
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaaf:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aab3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aabb:	83 ec 08             	sub    esp,0x8
c001aabe:	50                   	push   eax
c001aabf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aac3:	e8 9b fe ff ff       	call   c001a963 <Net::crc32Calc(unsigned char*, int)>
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aacf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad3:	c1 e8 18             	shr    eax,0x18
c001aad6:	89 c1                	mov    ecx,eax
c001aad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aadc:	8d 50 01             	lea    edx,[eax+0x1]
c001aadf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae3:	88 ca                	mov    dl,cl
c001aae5:	88 10                	mov    BYTE PTR [eax],dl
c001aae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaeb:	c1 e8 10             	shr    eax,0x10
c001aaee:	89 c1                	mov    ecx,eax
c001aaf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf4:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aafb:	88 ca                	mov    dl,cl
c001aafd:	88 10                	mov    BYTE PTR [eax],dl
c001aaff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab03:	c1 e8 08             	shr    eax,0x8
c001ab06:	89 c1                	mov    ecx,eax
c001ab08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab13:	88 ca                	mov    dl,cl
c001ab15:	88 10                	mov    BYTE PTR [eax],dl
c001ab17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab26:	88 10                	mov    BYTE PTR [eax],dl
c001ab28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab2c:	83 c4 1c             	add    esp,0x1c
c001ab2f:	c3                   	ret    

c001ab30 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab30:	83 ec 2c             	sub    esp,0x2c
c001ab33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab3b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab40:	83 ec 04             	sub    esp,0x4
c001ab43:	6a 06                	push   0x6
c001ab45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab4d:	83 c0 0e             	add    eax,0xe
c001ab50:	50                   	push   eax
c001ab51:	e8 ee 5b fe ff       	call   c0000744 <memcpy>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab5e:	83 ec 04             	sub    esp,0x4
c001ab61:	6a 06                	push   0x6
c001ab63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab6b:	83 c0 08             	add    eax,0x8
c001ab6e:	50                   	push   eax
c001ab6f:	e8 d0 5b fe ff       	call   c0000744 <memcpy>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab80:	8d 50 01             	lea    edx,[eax+0x1]
c001ab83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab87:	8a 00                	mov    al,BYTE PTR [eax]
c001ab89:	0f b6 c0             	movzx  eax,al
c001ab8c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab95:	8d 50 01             	lea    edx,[eax+0x1]
c001ab98:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab9c:	8a 00                	mov    al,BYTE PTR [eax]
c001ab9e:	0f b6 c0             	movzx  eax,al
c001aba1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aba6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abab:	c1 e0 08             	shl    eax,0x8
c001abae:	89 c2                	mov    edx,eax
c001abb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abb4:	09 d0                	or     eax,edx
c001abb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abba:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abbe:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abc3:	75 3a                	jne    c001abff <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abcc:	66 3d dc 05          	cmp    ax,0x5dc
c001abd0:	77 10                	ja     c001abe2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abd6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abd9:	0f b7 c0             	movzx  eax,ax
c001abdc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abe0:	eb 1d                	jmp    c001abff <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abe2:	83 ec 0c             	sub    esp,0xc
c001abe5:	68 fc bb 02 c0       	push   0xc002bbfc
c001abea:	e8 e9 82 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abf6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abfa:	e9 c0 00 00 00       	jmp    c001acbf <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001abff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac09:	83 ec 04             	sub    esp,0x4
c001ac0c:	52                   	push   edx
c001ac0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac11:	50                   	push   eax
c001ac12:	e8 2d 5b fe ff       	call   c0000744 <memcpy>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac1e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac26:	8d 50 01             	lea    edx,[eax+0x1]
c001ac29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2f:	0f b6 c0             	movzx  eax,al
c001ac32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac41:	8a 00                	mov    al,BYTE PTR [eax]
c001ac43:	0f b6 c0             	movzx  eax,al
c001ac46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac55:	8a 00                	mov    al,BYTE PTR [eax]
c001ac57:	0f b6 c0             	movzx  eax,al
c001ac5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac62:	8d 50 01             	lea    edx,[eax+0x1]
c001ac65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac69:	8a 00                	mov    al,BYTE PTR [eax]
c001ac6b:	0f b6 c0             	movzx  eax,al
c001ac6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac76:	c1 e0 18             	shl    eax,0x18
c001ac79:	89 c2                	mov    edx,eax
c001ac7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7f:	c1 e0 10             	shl    eax,0x10
c001ac82:	09 c2                	or     edx,eax
c001ac84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac88:	c1 e0 08             	shl    eax,0x8
c001ac8b:	09 d0                	or     eax,edx
c001ac8d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac99:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac9d:	83 e8 04             	sub    eax,0x4
c001aca0:	83 ec 08             	sub    esp,0x8
c001aca3:	50                   	push   eax
c001aca4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aca8:	e8 b6 fc ff ff       	call   c001a963 <Net::crc32Calc(unsigned char*, int)>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acb4:	0f 94 c2             	sete   dl
c001acb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acbe:	90                   	nop
c001acbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acc3:	83 c4 2c             	add    esp,0x2c
c001acc6:	c2 04 00             	ret    0x4

c001acc9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acc9:	55                   	push   ebp
c001acca:	57                   	push   edi
c001accb:	56                   	push   esi
c001accc:	53                   	push   ebx
c001accd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acd3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acda:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acdc:	8d 6e 01             	lea    ebp,[esi+0x1]
c001acdf:	80 fb 40             	cmp    bl,0x40
c001ace2:	75 1b                	jne    c001acff <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ace4:	8a 16                	mov    dl,BYTE PTR [esi]
c001ace6:	84 d2                	test   dl,dl
c001ace8:	0f 84 f1 00 00 00    	je     c001addf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acee:	8d 46 01             	lea    eax,[esi+0x1]
c001acf1:	80 fa 3a             	cmp    dl,0x3a
c001acf4:	74 04                	je     c001acfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001acf6:	89 c6                	mov    esi,eax
c001acf8:	eb ea                	jmp    c001ace4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acfa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acfd:	89 c6                	mov    esi,eax
c001acff:	50                   	push   eax
c001ad00:	6a 40                	push   0x40
c001ad02:	6a 00                	push   0x0
c001ad04:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad08:	50                   	push   eax
c001ad09:	e8 6a 5a fe ff       	call   c0000778 <memset>
c001ad0e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad15:	31 c0                	xor    eax,eax
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad1c:	84 c9                	test   cl,cl
c001ad1e:	0f 84 bb 00 00 00    	je     c001addf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad24:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad29:	0f 8f b0 00 00 00    	jg     c001addf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad2f:	80 f9 0a             	cmp    cl,0xa
c001ad32:	0f 85 98 00 00 00    	jne    c001add0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad38:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad3d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad41:	a8 df                	test   al,0xdf
c001ad43:	0f 94 c1             	sete   cl
c001ad46:	3c 23                	cmp    al,0x23
c001ad48:	0f 94 c2             	sete   dl
c001ad4b:	08 d1                	or     cl,dl
c001ad4d:	75 4a                	jne    c001ad99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad52:	80 fa 01             	cmp    dl,0x1
c001ad55:	76 42                	jbe    c001ad99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad57:	3c 5b                	cmp    al,0x5b
c001ad59:	75 42                	jne    c001ad9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad5b:	80 fb 40             	cmp    bl,0x40
c001ad5e:	75 39                	jne    c001ad99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad60:	83 ec 0c             	sub    esp,0xc
c001ad63:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad67:	52                   	push   edx
c001ad68:	e8 27 5a fe ff       	call   c0000794 <strlen>
c001ad6d:	83 c4 10             	add    esp,0x10
c001ad70:	83 f8 3f             	cmp    eax,0x3f
c001ad73:	77 6a                	ja     c001addf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad75:	50                   	push   eax
c001ad76:	50                   	push   eax
c001ad77:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad7b:	52                   	push   edx
c001ad7c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad80:	52                   	push   edx
c001ad81:	e8 ae 5a fe ff       	call   c0000834 <strcpy>
c001ad86:	58                   	pop    eax
c001ad87:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad8b:	52                   	push   edx
c001ad8c:	e8 03 5a fe ff       	call   c0000794 <strlen>
c001ad91:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad96:	83 c4 10             	add    esp,0x10
c001ad99:	31 d2                	xor    edx,edx
c001ad9b:	eb 3a                	jmp    c001add7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad9d:	80 fb 40             	cmp    bl,0x40
c001ada0:	74 06                	je     c001ada8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ada2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ada6:	eb 20                	jmp    c001adc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ada8:	50                   	push   eax
c001ada9:	50                   	push   eax
c001adaa:	55                   	push   ebp
c001adab:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adaf:	50                   	push   eax
c001adb0:	e8 0b 5b fe ff       	call   c00008c0 <strcmp>
c001adb5:	83 c4 10             	add    esp,0x10
c001adb8:	85 c0                	test   eax,eax
c001adba:	75 dd                	jne    c001ad99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adbc:	eb e4                	jmp    c001ada2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adbe:	8d 50 01             	lea    edx,[eax+0x1]
c001adc1:	80 f9 3d             	cmp    cl,0x3d
c001adc4:	74 1d                	je     c001ade3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adc6:	89 d0                	mov    eax,edx
c001adc8:	8a 08                	mov    cl,BYTE PTR [eax]
c001adca:	84 c9                	test   cl,cl
c001adcc:	75 f0                	jne    c001adbe <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adce:	eb 0f                	jmp    c001addf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add0:	8d 50 01             	lea    edx,[eax+0x1]
c001add3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001add7:	47                   	inc    edi
c001add8:	89 d0                	mov    eax,edx
c001adda:	e9 3b ff ff ff       	jmp    c001ad1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001addf:	31 c0                	xor    eax,eax
c001ade1:	eb 33                	jmp    c001ae16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ade3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ade7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001adea:	50                   	push   eax
c001adeb:	50                   	push   eax
c001adec:	8d 44 24 60          	lea    eax,[esp+0x60]
c001adf0:	50                   	push   eax
c001adf1:	56                   	push   esi
c001adf2:	e8 c9 5a fe ff       	call   c00008c0 <strcmp>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	85 c0                	test   eax,eax
c001adfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae00:	75 97                	jne    c001ad99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae02:	51                   	push   ecx
c001ae03:	51                   	push   ecx
c001ae04:	52                   	push   edx
c001ae05:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae0c:	e8 23 5a fe ff       	call   c0000834 <strcpy>
c001ae11:	83 c4 10             	add    esp,0x10
c001ae14:	b0 01                	mov    al,0x1
c001ae16:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae1c:	5b                   	pop    ebx
c001ae1d:	5e                   	pop    esi
c001ae1e:	5f                   	pop    edi
c001ae1f:	5d                   	pop    ebp
c001ae20:	c3                   	ret    

c001ae21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae21:	57                   	push   edi
c001ae22:	56                   	push   esi
c001ae23:	53                   	push   ebx
c001ae24:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae2a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae31:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae38:	53                   	push   ebx
c001ae39:	e8 56 59 fe ff       	call   c0000794 <strlen>
c001ae3e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae41:	89 c7                	mov    edi,eax
c001ae43:	e8 4c 59 fe ff       	call   c0000794 <strlen>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae4f:	3d ff 00 00 00       	cmp    eax,0xff
c001ae54:	0f 87 d3 00 00 00    	ja     c001af2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae5a:	57                   	push   edi
c001ae5b:	57                   	push   edi
c001ae5c:	56                   	push   esi
c001ae5d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae61:	56                   	push   esi
c001ae62:	e8 cd 59 fe ff       	call   c0000834 <strcpy>
c001ae67:	58                   	pop    eax
c001ae68:	5a                   	pop    edx
c001ae69:	68 5c c1 02 c0       	push   0xc002c15c
c001ae6e:	56                   	push   esi
c001ae6f:	e8 00 5b fe ff       	call   c0000974 <strcat>
c001ae74:	59                   	pop    ecx
c001ae75:	5f                   	pop    edi
c001ae76:	53                   	push   ebx
c001ae77:	56                   	push   esi
c001ae78:	e8 f7 5a fe ff       	call   c0000974 <strcat>
c001ae7d:	58                   	pop    eax
c001ae7e:	5a                   	pop    edx
c001ae7f:	68 48 bc 02 c0       	push   0xc002bc48
c001ae84:	56                   	push   esi
c001ae85:	e8 ea 5a fe ff       	call   c0000974 <strcat>
c001ae8a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae91:	e8 ad 49 ff ff       	call   c000f843 <malloc>
c001ae96:	83 c4 0c             	add    esp,0xc
c001ae99:	89 c3                	mov    ebx,eax
c001ae9b:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001aea1:	56                   	push   esi
c001aea2:	50                   	push   eax
c001aea3:	e8 88 85 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001aea8:	83 c4 10             	add    esp,0x10
c001aeab:	85 db                	test   ebx,ebx
c001aead:	74 7e                	je     c001af2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeaf:	51                   	push   ecx
c001aeb0:	51                   	push   ecx
c001aeb1:	6a 01                	push   0x1
c001aeb3:	53                   	push   ebx
c001aeb4:	e8 db 85 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001aeb9:	83 c4 10             	add    esp,0x10
c001aebc:	85 c0                	test   eax,eax
c001aebe:	74 08                	je     c001aec8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec5:	53                   	push   ebx
c001aec6:	eb 5f                	jmp    c001af27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aec8:	52                   	push   edx
c001aec9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aecd:	50                   	push   eax
c001aece:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aed2:	50                   	push   eax
c001aed3:	53                   	push   ebx
c001aed4:	e8 67 88 ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c001aed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	89 c1                	mov    ecx,eax
c001aee2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aee6:	74 31                	je     c001af19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aee8:	83 ec 0c             	sub    esp,0xc
c001aeeb:	50                   	push   eax
c001aeec:	e8 52 49 ff ff       	call   c000f843 <malloc>
c001aef1:	89 c6                	mov    esi,eax
c001aef3:	58                   	pop    eax
c001aef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aef6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aefa:	52                   	push   edx
c001aefb:	56                   	push   esi
c001aefc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af04:	53                   	push   ebx
c001af05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af08:	83 c4 20             	add    esp,0x20
c001af0b:	85 c0                	test   eax,eax
c001af0d:	75 0a                	jne    c001af19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af13:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af17:	74 18                	je     c001af31 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af19:	83 ec 0c             	sub    esp,0xc
c001af1c:	53                   	push   ebx
c001af1d:	e8 d0 85 ff ff       	call   c00134f2 <File::close()>
c001af22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	31 c0                	xor    eax,eax
c001af2f:	eb 3b                	jmp    c001af6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af31:	83 ec 0c             	sub    esp,0xc
c001af34:	53                   	push   ebx
c001af35:	e8 b8 85 ff ff       	call   c00134f2 <File::close()>
c001af3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af42:	83 c4 0c             	add    esp,0xc
c001af45:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af4c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af53:	56                   	push   esi
c001af54:	e8 70 fd ff ff       	call   c001acc9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af59:	89 34 24             	mov    DWORD PTR [esp],esi
c001af5c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af60:	e8 ee 48 ff ff       	call   c000f853 <free>
c001af65:	83 c4 10             	add    esp,0x10
c001af68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af6c:	81 c4 20 01 00 00    	add    esp,0x120
c001af72:	5b                   	pop    ebx
c001af73:	5e                   	pop    esi
c001af74:	5f                   	pop    edi
c001af75:	c3                   	ret    

c001af76 <Reg::getLine(char*, char*, char*)>:
c001af76:	57                   	push   edi
c001af77:	56                   	push   esi
c001af78:	53                   	push   ebx
c001af79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af85:	57                   	push   edi
c001af86:	56                   	push   esi
c001af87:	53                   	push   ebx
c001af88:	68 4d bc 02 c0       	push   0xc002bc4d
c001af8d:	e8 8f fe ff ff       	call   c001ae21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af92:	83 c4 10             	add    esp,0x10
c001af95:	84 c0                	test   al,al
c001af97:	75 10                	jne    c001afa9 <Reg::getLine(char*, char*, char*)+0x33>
c001af99:	57                   	push   edi
c001af9a:	56                   	push   esi
c001af9b:	53                   	push   ebx
c001af9c:	68 72 bc 02 c0       	push   0xc002bc72
c001afa1:	e8 7b fe ff ff       	call   c001ae21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	5b                   	pop    ebx
c001afaa:	5e                   	pop    esi
c001afab:	5f                   	pop    edi
c001afac:	c3                   	ret    

c001afad <Reg::readInt(char*, char*, int*)>:
c001afad:	55                   	push   ebp
c001afae:	57                   	push   edi
c001afaf:	56                   	push   esi
c001afb0:	53                   	push   ebx
c001afb1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afb7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afbb:	57                   	push   edi
c001afbc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afc3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afca:	e8 a7 ff ff ff       	call   c001af76 <Reg::getLine(char*, char*, char*)>
c001afcf:	83 c4 10             	add    esp,0x10
c001afd2:	84 c0                	test   al,al
c001afd4:	0f 84 b3 00 00 00    	je     c001b08d <Reg::readInt(char*, char*, int*)+0xe0>
c001afda:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afde:	80 fa 2b             	cmp    dl,0x2b
c001afe1:	74 0c                	je     c001afef <Reg::readInt(char*, char*, int*)+0x42>
c001afe3:	80 fa 2d             	cmp    dl,0x2d
c001afe6:	75 0e                	jne    c001aff6 <Reg::readInt(char*, char*, int*)+0x49>
c001afe8:	ba 01 00 00 00       	mov    edx,0x1
c001afed:	eb 0b                	jmp    c001affa <Reg::readInt(char*, char*, int*)+0x4d>
c001afef:	ba 01 00 00 00       	mov    edx,0x1
c001aff4:	eb 02                	jmp    c001aff8 <Reg::readInt(char*, char*, int*)+0x4b>
c001aff6:	31 d2                	xor    edx,edx
c001aff8:	31 c0                	xor    eax,eax
c001affa:	be 0a 00 00 00       	mov    esi,0xa
c001afff:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b004:	75 20                	jne    c001b026 <Reg::readInt(char*, char*, int*)+0x79>
c001b006:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b00a:	80 f9 78             	cmp    cl,0x78
c001b00d:	75 0a                	jne    c001b019 <Reg::readInt(char*, char*, int*)+0x6c>
c001b00f:	83 c2 02             	add    edx,0x2
c001b012:	be 10 00 00 00       	mov    esi,0x10
c001b017:	eb 0d                	jmp    c001b026 <Reg::readInt(char*, char*, int*)+0x79>
c001b019:	80 f9 62             	cmp    cl,0x62
c001b01c:	75 08                	jne    c001b026 <Reg::readInt(char*, char*, int*)+0x79>
c001b01e:	83 c2 02             	add    edx,0x2
c001b021:	be 02 00 00 00       	mov    esi,0x2
c001b026:	01 d7                	add    edi,edx
c001b028:	31 d2                	xor    edx,edx
c001b02a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b02c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b030:	80 fb 0d             	cmp    bl,0xd
c001b033:	0f 94 c3             	sete   bl
c001b036:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b03b:	0f 94 c1             	sete   cl
c001b03e:	08 cb                	or     bl,cl
c001b040:	75 3a                	jne    c001b07c <Reg::readInt(char*, char*, int*)+0xcf>
c001b042:	0f af d6             	imul   edx,esi
c001b045:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b04a:	83 fe 10             	cmp    esi,0x10
c001b04d:	75 26                	jne    c001b075 <Reg::readInt(char*, char*, int*)+0xc8>
c001b04f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b053:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b056:	89 e9                	mov    ecx,ebp
c001b058:	80 f9 05             	cmp    cl,0x5
c001b05b:	77 06                	ja     c001b063 <Reg::readInt(char*, char*, int*)+0xb6>
c001b05d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b061:	eb 16                	jmp    c001b079 <Reg::readInt(char*, char*, int*)+0xcc>
c001b063:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b067:	83 e9 61             	sub    ecx,0x61
c001b06a:	80 f9 05             	cmp    cl,0x5
c001b06d:	77 06                	ja     c001b075 <Reg::readInt(char*, char*, int*)+0xc8>
c001b06f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b073:	eb 04                	jmp    c001b079 <Reg::readInt(char*, char*, int*)+0xcc>
c001b075:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b079:	47                   	inc    edi
c001b07a:	eb ae                	jmp    c001b02a <Reg::readInt(char*, char*, int*)+0x7d>
c001b07c:	84 c0                	test   al,al
c001b07e:	74 02                	je     c001b082 <Reg::readInt(char*, char*, int*)+0xd5>
c001b080:	f7 da                	neg    edx
c001b082:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b089:	89 10                	mov    DWORD PTR [eax],edx
c001b08b:	88 d8                	mov    al,bl
c001b08d:	81 c4 ec 00 00 00    	add    esp,0xec
c001b093:	5b                   	pop    ebx
c001b094:	5e                   	pop    esi
c001b095:	5f                   	pop    edi
c001b096:	5d                   	pop    ebp
c001b097:	c3                   	ret    

c001b098 <Reg::readString(char*, char*, char*, int)>:
c001b098:	57                   	push   edi
c001b099:	56                   	push   esi
c001b09a:	53                   	push   ebx
c001b09b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0a1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0a8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0ac:	57                   	push   edi
c001b0ad:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0b4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0bb:	e8 b6 fe ff ff       	call   c001af76 <Reg::getLine(char*, char*, char*)>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	89 c6                	mov    esi,eax
c001b0c5:	84 c0                	test   al,al
c001b0c7:	74 44                	je     c001b10d <Reg::readString(char*, char*, char*, int)+0x75>
c001b0c9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0d0:	31 c0                	xor    eax,eax
c001b0d2:	4a                   	dec    edx
c001b0d3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0d6:	84 c9                	test   cl,cl
c001b0d8:	74 0f                	je     c001b0e9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0da:	39 c2                	cmp    edx,eax
c001b0dc:	7e 0b                	jle    c001b0e9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0de:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0e1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0e6:	40                   	inc    eax
c001b0e7:	eb ea                	jmp    c001b0d3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0e9:	83 ec 0c             	sub    esp,0xc
c001b0ec:	53                   	push   ebx
c001b0ed:	e8 a2 56 fe ff       	call   c0000794 <strlen>
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0fa:	75 11                	jne    c001b10d <Reg::readString(char*, char*, char*, int)+0x75>
c001b0fc:	83 ec 0c             	sub    esp,0xc
c001b0ff:	53                   	push   ebx
c001b100:	e8 8f 56 fe ff       	call   c0000794 <strlen>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b10d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b113:	89 f0                	mov    eax,esi
c001b115:	5b                   	pop    ebx
c001b116:	5e                   	pop    esi
c001b117:	5f                   	pop    edi
c001b118:	c3                   	ret    

c001b119 <Reg::readBool(char*, char*, bool*)>:
c001b119:	83 ec 20             	sub    esp,0x20
c001b11c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b120:	50                   	push   eax
c001b121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b125:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b129:	e8 7f fe ff ff       	call   c001afad <Reg::readInt(char*, char*, int*)>
c001b12e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b133:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b137:	0f 95 02             	setne  BYTE PTR [edx]
c001b13a:	83 c4 2c             	add    esp,0x2c
c001b13d:	c3                   	ret    

c001b13e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b13e:	53                   	push   ebx
c001b13f:	83 ec 1c             	sub    esp,0x1c
c001b142:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b146:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b14a:	50                   	push   eax
c001b14b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b153:	e8 c1 ff ff ff       	call   c001b119 <Reg::readBool(char*, char*, bool*)>
c001b158:	83 c4 10             	add    esp,0x10
c001b15b:	84 c0                	test   al,al
c001b15d:	74 04                	je     c001b163 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b15f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b163:	88 d8                	mov    al,bl
c001b165:	83 c4 18             	add    esp,0x18
c001b168:	5b                   	pop    ebx
c001b169:	c3                   	ret    

c001b16a <Reg::readIntWithDefault(char*, char*, int)>:
c001b16a:	53                   	push   ebx
c001b16b:	83 ec 1c             	sub    esp,0x1c
c001b16e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b172:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b176:	50                   	push   eax
c001b177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17f:	e8 29 fe ff ff       	call   c001afad <Reg::readInt(char*, char*, int*)>
c001b184:	83 c4 10             	add    esp,0x10
c001b187:	84 c0                	test   al,al
c001b189:	74 04                	je     c001b18f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b18b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b18f:	89 d8                	mov    eax,ebx
c001b191:	83 c4 18             	add    esp,0x18
c001b194:	5b                   	pop    ebx
c001b195:	c3                   	ret    

c001b196 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b196:	57                   	push   edi
c001b197:	56                   	push   esi
c001b198:	53                   	push   ebx
c001b199:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b19d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1a5:	56                   	push   esi
c001b1a6:	53                   	push   ebx
c001b1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1af:	e8 e4 fe ff ff       	call   c001b098 <Reg::readString(char*, char*, char*, int)>
c001b1b4:	83 c4 10             	add    esp,0x10
c001b1b7:	84 c0                	test   al,al
c001b1b9:	75 1b                	jne    c001b1d6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1bb:	50                   	push   eax
c001b1bc:	56                   	push   esi
c001b1bd:	4e                   	dec    esi
c001b1be:	6a 00                	push   0x0
c001b1c0:	53                   	push   ebx
c001b1c1:	e8 b2 55 fe ff       	call   c0000778 <memset>
c001b1c6:	83 c4 0c             	add    esp,0xc
c001b1c9:	56                   	push   esi
c001b1ca:	57                   	push   edi
c001b1cb:	53                   	push   ebx
c001b1cc:	89 fb                	mov    ebx,edi
c001b1ce:	e8 71 55 fe ff       	call   c0000744 <memcpy>
c001b1d3:	83 c4 10             	add    esp,0x10
c001b1d6:	89 d8                	mov    eax,ebx
c001b1d8:	5b                   	pop    ebx
c001b1d9:	5e                   	pop    esi
c001b1da:	5f                   	pop    edi
c001b1db:	c3                   	ret    

c001b1dc <Sys::eject(regs*)>:
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	83 ca ff             	or     edx,0xffffffff
c001b1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1ee:	83 e9 41             	sub    ecx,0x41
c001b1f1:	83 f9 19             	cmp    ecx,0x19
c001b1f4:	77 18                	ja     c001b20e <Sys::eject(regs*)+0x32>
c001b1f6:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001b1fd:	85 c9                	test   ecx,ecx
c001b1ff:	74 0d                	je     c001b20e <Sys::eject(regs*)+0x32>
c001b201:	83 ec 0c             	sub    esp,0xc
c001b204:	51                   	push   ecx
c001b205:	e8 74 b4 ff ff       	call   c001667e <LogicalDisk::eject()>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	99                   	cdq    
c001b20e:	83 c4 0c             	add    esp,0xc
c001b211:	c3                   	ret    

c001b212 <Sys::exit(regs*)>:
c001b212:	83 ec 18             	sub    esp,0x18
c001b215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b219:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b21c:	e8 99 35 00 00       	call   c001e7ba <terminateTask(int)>
c001b221:	83 c8 ff             	or     eax,0xffffffff
c001b224:	83 c4 1c             	add    esp,0x1c
c001b227:	89 c2                	mov    edx,eax
c001b229:	c3                   	ret    

c001b22a <Sys::getCwd(regs*)>:
c001b22a:	83 ec 10             	sub    esp,0x10
c001b22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b231:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b234:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b23f:	e8 ee 7f ff ff       	call   c0013232 <Fs::getcwd(Process*, char*, int)>
c001b244:	83 c4 1c             	add    esp,0x1c
c001b247:	99                   	cdq    
c001b248:	c3                   	ret    

c001b249 <Sys::getPID(regs*)>:
c001b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b24e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b251:	8b 00                	mov    eax,DWORD PTR [eax]
c001b253:	99                   	cdq    
c001b254:	c3                   	ret    

c001b255 <Sys::getRAMData(regs*)>:
c001b255:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b25b:	6b 05 d0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3d0,0x64
c001b262:	99                   	cdq    
c001b263:	f7 f9                	idiv   ecx
c001b265:	c1 e0 18             	shl    eax,0x18
c001b268:	09 c8                	or     eax,ecx
c001b26a:	99                   	cdq    
c001b26b:	c3                   	ret    

c001b26c <Sys::loadDLL(regs*)>:
c001b26c:	56                   	push   esi
c001b26d:	53                   	push   ebx
c001b26e:	31 d2                	xor    edx,edx
c001b270:	51                   	push   ecx
c001b271:	b8 01 00 00 00       	mov    eax,0x1
c001b276:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b27a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b27e:	0f 84 8c 00 00 00    	je     c001b310 <Sys::loadDLL(regs*)+0xa4>
c001b284:	83 ec 0c             	sub    esp,0xc
c001b287:	68 14 01 00 00       	push   0x114
c001b28c:	e8 b2 45 ff ff       	call   c000f843 <malloc>
c001b291:	83 c4 0c             	add    esp,0xc
c001b294:	89 c3                	mov    ebx,eax
c001b296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b29b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b29e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2a1:	53                   	push   ebx
c001b2a2:	e8 89 81 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001b2a7:	83 c4 10             	add    esp,0x10
c001b2aa:	31 d2                	xor    edx,edx
c001b2ac:	b8 02 00 00 00       	mov    eax,0x2
c001b2b1:	85 db                	test   ebx,ebx
c001b2b3:	74 5b                	je     c001b310 <Sys::loadDLL(regs*)+0xa4>
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	53                   	push   ebx
c001b2b9:	e8 44 84 ff ff       	call   c0013702 <File::exists()>
c001b2be:	83 c4 10             	add    esp,0x10
c001b2c1:	84 c0                	test   al,al
c001b2c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2c5:	75 11                	jne    c001b2d8 <Sys::loadDLL(regs*)+0x6c>
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	53                   	push   ebx
c001b2cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	b8 03 00 00 00       	mov    eax,0x3
c001b2d6:	eb 36                	jmp    c001b30e <Sys::loadDLL(regs*)+0xa2>
c001b2d8:	83 ec 0c             	sub    esp,0xc
c001b2db:	53                   	push   ebx
c001b2dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2df:	58                   	pop    eax
c001b2e0:	5a                   	pop    edx
c001b2e1:	6a 00                	push   0x0
c001b2e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2e6:	e8 c5 23 00 00       	call   c001d6b0 <Thr::loadDLL(char const*, bool)>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	89 c1                	mov    ecx,eax
c001b2f0:	31 d2                	xor    edx,edx
c001b2f2:	b8 04 00 00 00       	mov    eax,0x4
c001b2f7:	85 c9                	test   ecx,ecx
c001b2f9:	74 15                	je     c001b310 <Sys::loadDLL(regs*)+0xa4>
c001b2fb:	53                   	push   ebx
c001b2fc:	53                   	push   ebx
c001b2fd:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b303:	51                   	push   ecx
c001b304:	e8 f6 25 00 00       	call   c001d8ff <Thr::executeDLL(unsigned long, void*)>
c001b309:	83 c4 10             	add    esp,0x10
c001b30c:	31 c0                	xor    eax,eax
c001b30e:	31 d2                	xor    edx,edx
c001b310:	59                   	pop    ecx
c001b311:	5b                   	pop    ebx
c001b312:	5e                   	pop    esi
c001b313:	c3                   	ret    

c001b314 <Sys::read(regs*)>:
c001b314:	57                   	push   edi
c001b315:	56                   	push   esi
c001b316:	53                   	push   ebx
c001b317:	83 ec 10             	sub    esp,0x10
c001b31a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b31e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b321:	83 f8 02             	cmp    eax,0x2
c001b324:	77 10                	ja     c001b336 <Sys::read(regs*)+0x22>
c001b326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b32b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b32e:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b334:	eb 0e                	jmp    c001b344 <Sys::read(regs*)+0x30>
c001b336:	83 ec 0c             	sub    esp,0xc
c001b339:	50                   	push   eax
c001b33a:	e8 e6 66 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b33f:	83 c4 10             	add    esp,0x10
c001b342:	89 c1                	mov    ecx,eax
c001b344:	83 c8 ff             	or     eax,0xffffffff
c001b347:	85 c9                	test   ecx,ecx
c001b349:	89 c2                	mov    edx,eax
c001b34b:	74 28                	je     c001b375 <Sys::read(regs*)+0x61>
c001b34d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b355:	31 ff                	xor    edi,edi
c001b357:	83 ec 0c             	sub    esp,0xc
c001b35a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b35c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b360:	52                   	push   edx
c001b361:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b364:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b367:	57                   	push   edi
c001b368:	56                   	push   esi
c001b369:	51                   	push   ecx
c001b36a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b36d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b371:	83 c4 20             	add    esp,0x20
c001b374:	99                   	cdq    
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	5b                   	pop    ebx
c001b379:	5e                   	pop    esi
c001b37a:	5f                   	pop    edi
c001b37b:	c3                   	ret    

c001b37c <Sys::sbrk(regs*)>:
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	50                   	push   eax
c001b37f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b388:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b38b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b38e:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b394:	85 db                	test   ebx,ebx
c001b396:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b399:	74 02                	je     c001b39d <Sys::sbrk(regs*)+0x21>
c001b39b:	79 06                	jns    c001b3a3 <Sys::sbrk(regs*)+0x27>
c001b39d:	89 f0                	mov    eax,esi
c001b39f:	31 d2                	xor    edx,edx
c001b3a1:	eb 2a                	jmp    c001b3cd <Sys::sbrk(regs*)+0x51>
c001b3a3:	83 c8 ff             	or     eax,0xffffffff
c001b3a6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3ac:	89 c2                	mov    edx,eax
c001b3ae:	77 1d                	ja     c001b3cd <Sys::sbrk(regs*)+0x51>
c001b3b0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3b6:	50                   	push   eax
c001b3b7:	c1 ea 0c             	shr    edx,0xc
c001b3ba:	68 07 0c 00 00       	push   0xc07
c001b3bf:	52                   	push   edx
c001b3c0:	51                   	push   ecx
c001b3c1:	e8 a2 70 ff ff       	call   c0012468 <VAS::allocatePages(int, int)>
c001b3c6:	89 f0                	mov    eax,esi
c001b3c8:	31 d2                	xor    edx,edx
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	59                   	pop    ecx
c001b3ce:	5b                   	pop    ebx
c001b3cf:	5e                   	pop    esi
c001b3d0:	c3                   	ret    

c001b3d1 <Sys::setCwd(regs*)>:
c001b3d1:	83 ec 14             	sub    esp,0x14
c001b3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3e0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3e3:	e8 b9 83 ff ff       	call   c00137a1 <Fs::setcwd(Process*, char*)>
c001b3e8:	83 c4 1c             	add    esp,0x1c
c001b3eb:	99                   	cdq    
c001b3ec:	c3                   	ret    

c001b3ed <Sys::setTime(regs*)>:
c001b3ed:	55                   	push   ebp
c001b3ee:	31 d2                	xor    edx,edx
c001b3f0:	57                   	push   edi
c001b3f1:	bf 18 00 00 00       	mov    edi,0x18
c001b3f6:	56                   	push   esi
c001b3f7:	53                   	push   ebx
c001b3f8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3fd:	83 ec 30             	sub    esp,0x30
c001b400:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b404:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b407:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b40a:	f7 f3                	div    ebx
c001b40c:	89 d6                	mov    esi,edx
c001b40e:	31 d2                	xor    edx,edx
c001b410:	f7 f3                	div    ebx
c001b412:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b415:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b419:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b41e:	31 d2                	xor    edx,edx
c001b420:	f7 f3                	div    ebx
c001b422:	31 d2                	xor    edx,edx
c001b424:	bb 0c 00 00 00       	mov    ebx,0xc
c001b429:	f7 f7                	div    edi
c001b42b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b42e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b432:	0f b7 cd             	movzx  ecx,bp
c001b435:	56                   	push   esi
c001b436:	89 c7                	mov    edi,eax
c001b438:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b43c:	c1 e6 10             	shl    esi,0x10
c001b43f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b443:	83 e7 1f             	and    edi,0x1f
c001b446:	51                   	push   ecx
c001b447:	47                   	inc    edi
c001b448:	c1 e8 05             	shr    eax,0x5
c001b44b:	31 d2                	xor    edx,edx
c001b44d:	f7 f3                	div    ebx
c001b44f:	31 db                	xor    ebx,ebx
c001b451:	52                   	push   edx
c001b452:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b456:	57                   	push   edi
c001b457:	68 8d bc 02 c0       	push   0xc002bc8d
c001b45c:	e8 77 7a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b461:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b465:	89 f8                	mov    eax,edi
c001b467:	31 c9                	xor    ecx,ecx
c001b469:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b46d:	88 c1                	mov    cl,al
c001b46f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b475:	88 d5                	mov    ch,dl
c001b477:	c1 e0 10             	shl    eax,0x10
c001b47a:	0f b7 d1             	movzx  edx,cx
c001b47d:	09 c2                	or     edx,eax
c001b47f:	89 d8                	mov    eax,ebx
c001b481:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b486:	09 f0                	or     eax,esi
c001b488:	89 c3                	mov    ebx,eax
c001b48a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b48e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b492:	83 c4 18             	add    esp,0x18
c001b495:	53                   	push   ebx
c001b496:	52                   	push   edx
c001b497:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b49b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b49f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4a3:	e8 13 8a ff ff       	call   c0013ebb <datetimeToSeconds(datetime_t)>
c001b4a8:	83 c4 0c             	add    esp,0xc
c001b4ab:	52                   	push   edx
c001b4ac:	50                   	push   eax
c001b4ad:	56                   	push   esi
c001b4ae:	e8 8f 8b ff ff       	call   c0014042 <secondsToDatetime(unsigned long long)>
c001b4b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4bb:	51                   	push   ecx
c001b4bc:	89 d6                	mov    esi,edx
c001b4be:	51                   	push   ecx
c001b4bf:	c1 ee 10             	shr    esi,0x10
c001b4c2:	89 f3                	mov    ebx,esi
c001b4c4:	0f b6 f3             	movzx  esi,bl
c001b4c7:	56                   	push   esi
c001b4c8:	0f b6 f6             	movzx  esi,dh
c001b4cb:	0f b6 d2             	movzx  edx,dl
c001b4ce:	56                   	push   esi
c001b4cf:	52                   	push   edx
c001b4d0:	89 c2                	mov    edx,eax
c001b4d2:	c1 ea 10             	shr    edx,0x10
c001b4d5:	52                   	push   edx
c001b4d6:	0f b6 d4             	movzx  edx,ah
c001b4d9:	0f b6 c0             	movzx  eax,al
c001b4dc:	52                   	push   edx
c001b4dd:	50                   	push   eax
c001b4de:	68 a9 bc 02 c0       	push   0xc002bca9
c001b4e3:	e8 f0 79 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b4e8:	83 c4 2c             	add    esp,0x2c
c001b4eb:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b4f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4f8:	53                   	push   ebx
c001b4f9:	51                   	push   ecx
c001b4fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b500:	e8 dd 8a ff ff       	call   c0013fe2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b505:	83 f0 01             	xor    eax,0x1
c001b508:	31 d2                	xor    edx,edx
c001b50a:	0f b6 c0             	movzx  eax,al
c001b50d:	83 c4 3c             	add    esp,0x3c
c001b510:	5b                   	pop    ebx
c001b511:	5e                   	pop    esi
c001b512:	5f                   	pop    edi
c001b513:	5d                   	pop    ebp
c001b514:	c3                   	ret    

c001b515 <Sys::timezone(regs*)>:
c001b515:	53                   	push   ebx
c001b516:	83 ec 08             	sub    esp,0x8
c001b519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b51d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b521:	75 17                	jne    c001b53a <Sys::timezone(regs*)+0x25>
c001b523:	83 ec 0c             	sub    esp,0xc
c001b526:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b52b:	e8 a8 79 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b530:	83 c8 ff             	or     eax,0xffffffff
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	89 c2                	mov    edx,eax
c001b538:	eb 20                	jmp    c001b55a <Sys::timezone(regs*)+0x45>
c001b53a:	83 ec 0c             	sub    esp,0xc
c001b53d:	68 fd bc 02 c0       	push   0xc002bcfd
c001b542:	e8 91 79 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b547:	58                   	pop    eax
c001b548:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b54b:	e8 f4 87 ff ff       	call   c0013d44 <User::loadClockSettings(int)>
c001b550:	83 c4 10             	add    esp,0x10
c001b553:	b8 01 00 00 00       	mov    eax,0x1
c001b558:	31 d2                	xor    edx,edx
c001b55a:	83 c4 08             	add    esp,0x8
c001b55d:	5b                   	pop    ebx
c001b55e:	c3                   	ret    

c001b55f <Sys::write(regs*)>:
c001b55f:	57                   	push   edi
c001b560:	56                   	push   esi
c001b561:	53                   	push   ebx
c001b562:	83 ec 10             	sub    esp,0x10
c001b565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b569:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b56c:	83 f8 02             	cmp    eax,0x2
c001b56f:	77 10                	ja     c001b581 <Sys::write(regs*)+0x22>
c001b571:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b576:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b579:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b57f:	eb 0e                	jmp    c001b58f <Sys::write(regs*)+0x30>
c001b581:	83 ec 0c             	sub    esp,0xc
c001b584:	50                   	push   eax
c001b585:	e8 9b 64 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b58a:	83 c4 10             	add    esp,0x10
c001b58d:	89 c1                	mov    ecx,eax
c001b58f:	83 c8 ff             	or     eax,0xffffffff
c001b592:	85 c9                	test   ecx,ecx
c001b594:	89 c2                	mov    edx,eax
c001b596:	74 28                	je     c001b5c0 <Sys::write(regs*)+0x61>
c001b598:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5a0:	31 ff                	xor    edi,edi
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5ab:	52                   	push   edx
c001b5ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5b2:	57                   	push   edi
c001b5b3:	56                   	push   esi
c001b5b4:	51                   	push   ecx
c001b5b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5bc:	83 c4 20             	add    esp,0x20
c001b5bf:	99                   	cdq    
c001b5c0:	83 c4 10             	add    esp,0x10
c001b5c3:	5b                   	pop    ebx
c001b5c4:	5e                   	pop    esi
c001b5c5:	5f                   	pop    edi
c001b5c6:	c3                   	ret    

c001b5c7 <Sys::wsbe(regs*)>:
c001b5c7:	57                   	push   edi
c001b5c8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5cd:	56                   	push   esi
c001b5ce:	be 3c bd 02 c0       	mov    esi,0xc002bd3c
c001b5d3:	53                   	push   ebx
c001b5d4:	83 ec 30             	sub    esp,0x30
c001b5d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5db:	fc                   	cld    
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5ed:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b5f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5f8:	57                   	push   edi
c001b5f9:	e8 96 51 fe ff       	call   c0000794 <strlen>
c001b5fe:	5a                   	pop    edx
c001b5ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b603:	52                   	push   edx
c001b604:	31 d2                	xor    edx,edx
c001b606:	57                   	push   edi
c001b607:	52                   	push   edx
c001b608:	50                   	push   eax
c001b609:	56                   	push   esi
c001b60a:	ff d3                	call   ebx
c001b60c:	83 c4 14             	add    esp,0x14
c001b60f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b613:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b616:	e8 9f 31 00 00       	call   c001e7ba <terminateTask(int)>
c001b61b:	83 c4 40             	add    esp,0x40
c001b61e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b623:	5b                   	pop    ebx
c001b624:	31 d2                	xor    edx,edx
c001b626:	5e                   	pop    esi
c001b627:	5f                   	pop    edi
c001b628:	c3                   	ret    

c001b629 <Sys::yield(regs*)>:
c001b629:	57                   	push   edi
c001b62a:	56                   	push   esi
c001b62b:	53                   	push   ebx
c001b62c:	e8 46 27 00 00       	call   c001dd77 <lockScheduler()>
c001b631:	e8 7c 2a 00 00       	call   c001e0b2 <schedule()>
c001b636:	e8 3e 27 00 00       	call   c001dd79 <unlockScheduler()>
c001b63b:	8b 35 10 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea10
c001b641:	8b 3d 14 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea14
c001b647:	89 f0                	mov    eax,esi
c001b649:	89 fb                	mov    ebx,edi
c001b64b:	89 f1                	mov    ecx,esi
c001b64d:	c1 e0 07             	shl    eax,0x7
c001b650:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b654:	25 80 30 0f 00       	and    eax,0xf3080
c001b659:	c1 eb 17             	shr    ebx,0x17
c001b65c:	31 c8                	xor    eax,ecx
c001b65e:	89 da                	mov    edx,ebx
c001b660:	5b                   	pop    ebx
c001b661:	5e                   	pop    esi
c001b662:	5f                   	pop    edi
c001b663:	c3                   	ret    

c001b664 <sysCallSeekDir(regs*)>:
c001b664:	31 c0                	xor    eax,eax
c001b666:	31 d2                	xor    edx,edx
c001b668:	c3                   	ret    

c001b669 <sysCallTellDir(regs*)>:
c001b669:	31 c0                	xor    eax,eax
c001b66b:	31 d2                	xor    edx,edx
c001b66d:	c3                   	ret    

c001b66e <sysCallVerify(regs*)>:
c001b66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b672:	31 d2                	xor    edx,edx
c001b674:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b677:	c3                   	ret    

c001b678 <sysFormatDisk(regs*)>:
c001b678:	56                   	push   esi
c001b679:	53                   	push   ebx
c001b67a:	53                   	push   ebx
c001b67b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b67f:	8b 1d 10 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e510
c001b685:	eb 25                	jmp    c001b6ac <sysFormatDisk(regs*)+0x34>
c001b687:	83 ec 0c             	sub    esp,0xc
c001b68a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b68d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b68f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b692:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b695:	50                   	push   eax
c001b696:	ff 34 85 a0 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1660]
c001b69d:	53                   	push   ebx
c001b69e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6a1:	83 c4 20             	add    esp,0x20
c001b6a4:	83 f8 08             	cmp    eax,0x8
c001b6a7:	75 12                	jne    c001b6bb <sysFormatDisk(regs*)+0x43>
c001b6a9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6ac:	85 db                	test   ebx,ebx
c001b6ae:	75 d7                	jne    c001b687 <sysFormatDisk(regs*)+0xf>
c001b6b0:	59                   	pop    ecx
c001b6b1:	b8 03 00 00 00       	mov    eax,0x3
c001b6b6:	31 d2                	xor    edx,edx
c001b6b8:	5b                   	pop    ebx
c001b6b9:	5e                   	pop    esi
c001b6ba:	c3                   	ret    
c001b6bb:	85 c0                	test   eax,eax
c001b6bd:	74 1b                	je     c001b6da <sysFormatDisk(regs*)+0x62>
c001b6bf:	83 f8 09             	cmp    eax,0x9
c001b6c2:	74 0b                	je     c001b6cf <sysFormatDisk(regs*)+0x57>
c001b6c4:	59                   	pop    ecx
c001b6c5:	b8 02 00 00 00       	mov    eax,0x2
c001b6ca:	31 d2                	xor    edx,edx
c001b6cc:	5b                   	pop    ebx
c001b6cd:	5e                   	pop    esi
c001b6ce:	c3                   	ret    
c001b6cf:	59                   	pop    ecx
c001b6d0:	b8 01 00 00 00       	mov    eax,0x1
c001b6d5:	31 d2                	xor    edx,edx
c001b6d7:	5b                   	pop    ebx
c001b6d8:	5e                   	pop    esi
c001b6d9:	c3                   	ret    
c001b6da:	59                   	pop    ecx
c001b6db:	31 c0                	xor    eax,eax
c001b6dd:	31 d2                	xor    edx,edx
c001b6df:	5b                   	pop    ebx
c001b6e0:	5e                   	pop    esi
c001b6e1:	c3                   	ret    

c001b6e2 <sysSetDiskVolumeLabel(regs*)>:
c001b6e2:	56                   	push   esi
c001b6e3:	53                   	push   ebx
c001b6e4:	53                   	push   ebx
c001b6e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6ec:	83 f8 19             	cmp    eax,0x19
c001b6ef:	77 29                	ja     c001b71a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f1:	8b 0c 85 a0 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1660]
c001b6f8:	85 c9                	test   ecx,ecx
c001b6fa:	74 1e                	je     c001b71a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6fc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ff:	85 d2                	test   edx,edx
c001b701:	74 17                	je     c001b71a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b703:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b709:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b70b:	52                   	push   edx
c001b70c:	50                   	push   eax
c001b70d:	51                   	push   ecx
c001b70e:	53                   	push   ebx
c001b70f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b712:	83 c4 10             	add    esp,0x10
c001b715:	99                   	cdq    
c001b716:	59                   	pop    ecx
c001b717:	5b                   	pop    ebx
c001b718:	5e                   	pop    esi
c001b719:	c3                   	ret    
c001b71a:	59                   	pop    ecx
c001b71b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b720:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b725:	5b                   	pop    ebx
c001b726:	5e                   	pop    esi
c001b727:	c3                   	ret    

c001b728 <sysGetDiskVolumeLabel(regs*)>:
c001b728:	57                   	push   edi
c001b729:	56                   	push   esi
c001b72a:	53                   	push   ebx
c001b72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b732:	83 fa 19             	cmp    edx,0x19
c001b735:	77 34                	ja     c001b76b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b737:	8b 0c 95 a0 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1660]
c001b73e:	85 c9                	test   ecx,ecx
c001b740:	74 29                	je     c001b76b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b742:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b745:	85 db                	test   ebx,ebx
c001b747:	74 22                	je     c001b76b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b749:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b74c:	85 c0                	test   eax,eax
c001b74e:	74 1b                	je     c001b76b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b750:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b75b:	50                   	push   eax
c001b75c:	53                   	push   ebx
c001b75d:	52                   	push   edx
c001b75e:	51                   	push   ecx
c001b75f:	56                   	push   esi
c001b760:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b763:	83 c4 20             	add    esp,0x20
c001b766:	99                   	cdq    
c001b767:	5b                   	pop    ebx
c001b768:	5e                   	pop    esi
c001b769:	5f                   	pop    edi
c001b76a:	c3                   	ret    
c001b76b:	5b                   	pop    ebx
c001b76c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b771:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b776:	5e                   	pop    esi
c001b777:	5f                   	pop    edi
c001b778:	c3                   	ret    

c001b779 <sysShutdown(regs*)>:
c001b779:	83 ec 0c             	sub    esp,0xc
c001b77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b780:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b783:	85 c0                	test   eax,eax
c001b785:	74 18                	je     c001b79f <sysShutdown(regs*)+0x26>
c001b787:	83 f8 01             	cmp    eax,0x1
c001b78a:	74 38                	je     c001b7c4 <sysShutdown(regs*)+0x4b>
c001b78c:	83 f8 02             	cmp    eax,0x2
c001b78f:	74 24                	je     c001b7b5 <sysShutdown(regs*)+0x3c>
c001b791:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b796:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b79b:	83 c4 0c             	add    esp,0xc
c001b79e:	c3                   	ret    
c001b79f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7a6:	6a 00                	push   0x0
c001b7a8:	6a 00                	push   0x0
c001b7aa:	6a 00                	push   0x0
c001b7ac:	50                   	push   eax
c001b7ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7b0:	83 c4 10             	add    esp,0x10
c001b7b3:	eb dc                	jmp    c001b791 <sysShutdown(regs*)+0x18>
c001b7b5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7bc:	6a 00                	push   0x0
c001b7be:	6a 00                	push   0x0
c001b7c0:	6a 01                	push   0x1
c001b7c2:	eb e8                	jmp    c001b7ac <sysShutdown(regs*)+0x33>
c001b7c4:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c001b7c9:	85 c0                	test   eax,eax
c001b7cb:	74 02                	je     c001b7cf <sysShutdown(regs*)+0x56>
c001b7cd:	ff d0                	call   eax
c001b7cf:	31 c0                	xor    eax,eax
c001b7d1:	31 d2                	xor    edx,edx
c001b7d3:	83 c4 0c             	add    esp,0xc
c001b7d6:	c3                   	ret    

c001b7d7 <sysCallRealpath(regs*)>:
c001b7d7:	83 ec 0c             	sub    esp,0xc
c001b7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7de:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7e1:	85 d2                	test   edx,edx
c001b7e3:	74 07                	je     c001b7ec <sysCallRealpath(regs*)+0x15>
c001b7e5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7e8:	85 c0                	test   eax,eax
c001b7ea:	75 0b                	jne    c001b7f7 <sysCallRealpath(regs*)+0x20>
c001b7ec:	b8 01 00 00 00       	mov    eax,0x1
c001b7f1:	31 d2                	xor    edx,edx
c001b7f3:	83 c4 0c             	add    esp,0xc
c001b7f6:	c3                   	ret    
c001b7f7:	51                   	push   ecx
c001b7f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7fe:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b801:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b807:	51                   	push   ecx
c001b808:	52                   	push   edx
c001b809:	50                   	push   eax
c001b80a:	e8 77 7a ff ff       	call   c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	31 c0                	xor    eax,eax
c001b814:	31 d2                	xor    edx,edx
c001b816:	83 c4 0c             	add    esp,0xc
c001b819:	c3                   	ret    

c001b81a <sysCallGetArgc(regs*)>:
c001b81a:	83 ec 14             	sub    esp,0x14
c001b81d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b825:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b82b:	68 68 bd 02 c0       	push   0xc002bd68
c001b830:	e8 a3 76 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b83a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b83d:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b843:	83 c4 1c             	add    esp,0x1c
c001b846:	99                   	cdq    
c001b847:	c3                   	ret    

c001b848 <sysCallReadDir(regs*)>:
c001b848:	53                   	push   ebx
c001b849:	83 ec 18             	sub    esp,0x18
c001b84c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b850:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b853:	83 f8 02             	cmp    eax,0x2
c001b856:	76 53                	jbe    c001b8ab <sysCallReadDir(regs*)+0x63>
c001b858:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b85b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b861:	77 4f                	ja     c001b8b2 <sysCallReadDir(regs*)+0x6a>
c001b863:	83 ec 0c             	sub    esp,0xc
c001b866:	50                   	push   eax
c001b867:	e8 b9 61 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b86c:	83 c4 10             	add    esp,0x10
c001b86f:	85 c0                	test   eax,eax
c001b871:	74 50                	je     c001b8c3 <sysCallReadDir(regs*)+0x7b>
c001b873:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b87b:	83 ec 0c             	sub    esp,0xc
c001b87e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b880:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b884:	51                   	push   ecx
c001b885:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b888:	6a 00                	push   0x0
c001b88a:	68 10 01 00 00       	push   0x110
c001b88f:	50                   	push   eax
c001b890:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b893:	83 c4 20             	add    esp,0x20
c001b896:	85 c0                	test   eax,eax
c001b898:	74 38                	je     c001b8d2 <sysCallReadDir(regs*)+0x8a>
c001b89a:	83 f8 07             	cmp    eax,0x7
c001b89d:	74 0c                	je     c001b8ab <sysCallReadDir(regs*)+0x63>
c001b89f:	b8 02 00 00 00       	mov    eax,0x2
c001b8a4:	31 d2                	xor    edx,edx
c001b8a6:	83 c4 18             	add    esp,0x18
c001b8a9:	5b                   	pop    ebx
c001b8aa:	c3                   	ret    
c001b8ab:	b8 01 00 00 00       	mov    eax,0x1
c001b8b0:	eb f2                	jmp    c001b8a4 <sysCallReadDir(regs*)+0x5c>
c001b8b2:	83 ec 08             	sub    esp,0x8
c001b8b5:	52                   	push   edx
c001b8b6:	68 80 be 02 c0       	push   0xc002be80
c001b8bb:	e8 18 76 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b8c0:	83 c4 10             	add    esp,0x10
c001b8c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8cd:	83 c4 18             	add    esp,0x18
c001b8d0:	5b                   	pop    ebx
c001b8d1:	c3                   	ret    
c001b8d2:	31 c0                	xor    eax,eax
c001b8d4:	eb ce                	jmp    c001b8a4 <sysCallReadDir(regs*)+0x5c>

c001b8d6 <sysCallIsATTY(regs*)>:
c001b8d6:	83 ec 0c             	sub    esp,0xc
c001b8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8e0:	83 f8 02             	cmp    eax,0x2
c001b8e3:	76 07                	jbe    c001b8ec <sysCallIsATTY(regs*)+0x16>
c001b8e5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8ea:	75 26                	jne    c001b912 <sysCallIsATTY(regs*)+0x3c>
c001b8ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f4:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b8fa:	85 c0                	test   eax,eax
c001b8fc:	74 24                	je     c001b922 <sysCallIsATTY(regs*)+0x4c>
c001b8fe:	83 ec 0c             	sub    esp,0xc
c001b901:	8b 10                	mov    edx,DWORD PTR [eax]
c001b903:	50                   	push   eax
c001b904:	ff 12                	call   DWORD PTR [edx]
c001b906:	31 d2                	xor    edx,edx
c001b908:	0f b6 c0             	movzx  eax,al
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	83 c4 0c             	add    esp,0xc
c001b911:	c3                   	ret    
c001b912:	83 ec 0c             	sub    esp,0xc
c001b915:	50                   	push   eax
c001b916:	e8 0a 61 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b91b:	83 c4 10             	add    esp,0x10
c001b91e:	85 c0                	test   eax,eax
c001b920:	75 dc                	jne    c001b8fe <sysCallIsATTY(regs*)+0x28>
c001b922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b927:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b92c:	83 c4 0c             	add    esp,0xc
c001b92f:	c3                   	ret    

c001b930 <sysCallSeek(regs*)>:
c001b930:	53                   	push   ebx
c001b931:	83 ec 08             	sub    esp,0x8
c001b934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b938:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b93b:	83 f8 02             	cmp    eax,0x2
c001b93e:	76 4a                	jbe    c001b98a <sysCallSeek(regs*)+0x5a>
c001b940:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b945:	77 32                	ja     c001b979 <sysCallSeek(regs*)+0x49>
c001b947:	83 ec 0c             	sub    esp,0xc
c001b94a:	50                   	push   eax
c001b94b:	e8 d5 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b950:	83 c4 0c             	add    esp,0xc
c001b953:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b956:	31 db                	xor    ebx,ebx
c001b958:	53                   	push   ebx
c001b959:	51                   	push   ecx
c001b95a:	50                   	push   eax
c001b95b:	e8 f2 7b ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001b960:	83 c4 10             	add    esp,0x10
c001b963:	85 c0                	test   eax,eax
c001b965:	0f 95 c0             	setne  al
c001b968:	31 d2                	xor    edx,edx
c001b96a:	0f b6 c0             	movzx  eax,al
c001b96d:	f7 d8                	neg    eax
c001b96f:	83 d2 00             	adc    edx,0x0
c001b972:	83 c4 08             	add    esp,0x8
c001b975:	f7 da                	neg    edx
c001b977:	5b                   	pop    ebx
c001b978:	c3                   	ret    
c001b979:	83 ec 08             	sub    esp,0x8
c001b97c:	50                   	push   eax
c001b97d:	68 73 bd 02 c0       	push   0xc002bd73
c001b982:	e8 51 75 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b987:	83 c4 10             	add    esp,0x10
c001b98a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b98f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b994:	83 c4 08             	add    esp,0x8
c001b997:	5b                   	pop    ebx
c001b998:	c3                   	ret    

c001b999 <sysCallTell(regs*)>:
c001b999:	53                   	push   ebx
c001b99a:	83 ec 08             	sub    esp,0x8
c001b99d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9a4:	83 f8 02             	cmp    eax,0x2
c001b9a7:	76 5e                	jbe    c001ba07 <sysCallTell(regs*)+0x6e>
c001b9a9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9ae:	77 2d                	ja     c001b9dd <sysCallTell(regs*)+0x44>
c001b9b0:	83 ec 0c             	sub    esp,0xc
c001b9b3:	50                   	push   eax
c001b9b4:	e8 6c 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b9b9:	5a                   	pop    edx
c001b9ba:	59                   	pop    ecx
c001b9bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9be:	50                   	push   eax
c001b9bf:	e8 e4 7b ff ff       	call   c00135a8 <File::tell(unsigned long long*)>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	85 c0                	test   eax,eax
c001b9c9:	0f 95 c0             	setne  al
c001b9cc:	31 d2                	xor    edx,edx
c001b9ce:	0f b6 c0             	movzx  eax,al
c001b9d1:	f7 d8                	neg    eax
c001b9d3:	83 d2 00             	adc    edx,0x0
c001b9d6:	83 c4 08             	add    esp,0x8
c001b9d9:	f7 da                	neg    edx
c001b9db:	5b                   	pop    ebx
c001b9dc:	c3                   	ret    
c001b9dd:	83 ec 08             	sub    esp,0x8
c001b9e0:	50                   	push   eax
c001b9e1:	68 8d bd 02 c0       	push   0xc002bd8d
c001b9e6:	e8 ed 74 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001b9eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9ee:	83 c4 10             	add    esp,0x10
c001b9f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9fe:	31 d2                	xor    edx,edx
c001ba00:	31 c0                	xor    eax,eax
c001ba02:	83 c4 08             	add    esp,0x8
c001ba05:	5b                   	pop    ebx
c001ba06:	c3                   	ret    
c001ba07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba11:	83 c4 08             	add    esp,0x8
c001ba14:	5b                   	pop    ebx
c001ba15:	c3                   	ret    

c001ba16 <sysCallSize(regs*)>:
c001ba16:	53                   	push   ebx
c001ba17:	83 ec 18             	sub    esp,0x18
c001ba1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba21:	83 f8 02             	cmp    eax,0x2
c001ba24:	76 64                	jbe    c001ba8a <sysCallSize(regs*)+0x74>
c001ba26:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba2b:	77 33                	ja     c001ba60 <sysCallSize(regs*)+0x4a>
c001ba2d:	83 ec 0c             	sub    esp,0xc
c001ba30:	50                   	push   eax
c001ba31:	e8 ef 5f ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001ba36:	83 c4 0c             	add    esp,0xc
c001ba39:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba3d:	52                   	push   edx
c001ba3e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba41:	50                   	push   eax
c001ba42:	e8 f9 7c ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	85 c0                	test   eax,eax
c001ba4c:	0f 95 c0             	setne  al
c001ba4f:	31 d2                	xor    edx,edx
c001ba51:	0f b6 c0             	movzx  eax,al
c001ba54:	f7 d8                	neg    eax
c001ba56:	83 d2 00             	adc    edx,0x0
c001ba59:	83 c4 18             	add    esp,0x18
c001ba5c:	f7 da                	neg    edx
c001ba5e:	5b                   	pop    ebx
c001ba5f:	c3                   	ret    
c001ba60:	83 ec 08             	sub    esp,0x8
c001ba63:	50                   	push   eax
c001ba64:	68 a7 bd 02 c0       	push   0xc002bda7
c001ba69:	e8 6a 74 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001ba6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba71:	83 c4 10             	add    esp,0x10
c001ba74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba81:	31 d2                	xor    edx,edx
c001ba83:	31 c0                	xor    eax,eax
c001ba85:	83 c4 18             	add    esp,0x18
c001ba88:	5b                   	pop    ebx
c001ba89:	c3                   	ret    
c001ba8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba94:	83 c4 18             	add    esp,0x18
c001ba97:	5b                   	pop    ebx
c001ba98:	c3                   	ret    

c001ba99 <sysCallSizeFromFilename(regs*)>:
c001ba99:	57                   	push   edi
c001ba9a:	56                   	push   esi
c001ba9b:	53                   	push   ebx
c001ba9c:	83 ec 20             	sub    esp,0x20
c001ba9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001baa3:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001baa6:	83 fb 02             	cmp    ebx,0x2
c001baa9:	0f 86 99 00 00 00    	jbe    c001bb48 <sysCallSizeFromFilename(regs*)+0xaf>
c001baaf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bab5:	77 65                	ja     c001bb1c <sysCallSizeFromFilename(regs*)+0x83>
c001bab7:	83 ec 0c             	sub    esp,0xc
c001baba:	68 14 01 00 00       	push   0x114
c001babf:	e8 7f 3d ff ff       	call   c000f843 <malloc>
c001bac4:	83 c4 0c             	add    esp,0xc
c001bac7:	89 c6                	mov    esi,eax
c001bac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bace:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bad1:	53                   	push   ebx
c001bad2:	56                   	push   esi
c001bad3:	e8 58 79 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001bad8:	83 c4 0c             	add    esp,0xc
c001badb:	8d 44 24 23          	lea    eax,[esp+0x23]
c001badf:	50                   	push   eax
c001bae0:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bae3:	56                   	push   esi
c001bae4:	e8 57 7c ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	85 f6                	test   esi,esi
c001baee:	74 14                	je     c001bb04 <sysCallSizeFromFilename(regs*)+0x6b>
c001baf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baf4:	8b 16                	mov    edx,DWORD PTR [esi]
c001baf6:	83 ec 0c             	sub    esp,0xc
c001baf9:	56                   	push   esi
c001bafa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb04:	85 c0                	test   eax,eax
c001bb06:	0f 95 c0             	setne  al
c001bb09:	31 d2                	xor    edx,edx
c001bb0b:	0f b6 c0             	movzx  eax,al
c001bb0e:	f7 d8                	neg    eax
c001bb10:	83 d2 00             	adc    edx,0x0
c001bb13:	83 c4 20             	add    esp,0x20
c001bb16:	f7 da                	neg    edx
c001bb18:	5b                   	pop    ebx
c001bb19:	5e                   	pop    esi
c001bb1a:	5f                   	pop    edi
c001bb1b:	c3                   	ret    
c001bb1c:	83 ec 08             	sub    esp,0x8
c001bb1f:	53                   	push   ebx
c001bb20:	68 a7 bd 02 c0       	push   0xc002bda7
c001bb25:	e8 ae 73 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bb2a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb3d:	31 d2                	xor    edx,edx
c001bb3f:	83 c4 20             	add    esp,0x20
c001bb42:	31 c0                	xor    eax,eax
c001bb44:	5b                   	pop    ebx
c001bb45:	5e                   	pop    esi
c001bb46:	5f                   	pop    edi
c001bb47:	c3                   	ret    
c001bb48:	83 c4 20             	add    esp,0x20
c001bb4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb50:	5b                   	pop    ebx
c001bb51:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb56:	5e                   	pop    esi
c001bb57:	5f                   	pop    edi
c001bb58:	c3                   	ret    

c001bb59 <sysCallClose(regs*)>:
c001bb59:	53                   	push   ebx
c001bb5a:	83 ec 08             	sub    esp,0x8
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb64:	83 f8 02             	cmp    eax,0x2
c001bb67:	76 50                	jbe    c001bbb9 <sysCallClose(regs*)+0x60>
c001bb69:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb6e:	74 58                	je     c001bbc8 <sysCallClose(regs*)+0x6f>
c001bb70:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb75:	74 60                	je     c001bbd7 <sysCallClose(regs*)+0x7e>
c001bb77:	77 2f                	ja     c001bba8 <sysCallClose(regs*)+0x4f>
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	50                   	push   eax
c001bb7d:	e8 a3 5e ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bb82:	89 c3                	mov    ebx,eax
c001bb84:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb87:	e8 66 79 ff ff       	call   c00134f2 <File::close()>
c001bb8c:	83 c4 10             	add    esp,0x10
c001bb8f:	85 db                	test   ebx,ebx
c001bb91:	74 0c                	je     c001bb9f <sysCallClose(regs*)+0x46>
c001bb93:	83 ec 0c             	sub    esp,0xc
c001bb96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb98:	53                   	push   ebx
c001bb99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb9c:	83 c4 10             	add    esp,0x10
c001bb9f:	31 c0                	xor    eax,eax
c001bba1:	31 d2                	xor    edx,edx
c001bba3:	83 c4 08             	add    esp,0x8
c001bba6:	5b                   	pop    ebx
c001bba7:	c3                   	ret    
c001bba8:	83 ec 08             	sub    esp,0x8
c001bbab:	50                   	push   eax
c001bbac:	68 a4 be 02 c0       	push   0xc002bea4
c001bbb1:	e8 22 73 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbc3:	83 c4 08             	add    esp,0x8
c001bbc6:	5b                   	pop    ebx
c001bbc7:	c3                   	ret    
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	68 c2 bd 02 c0       	push   0xc002bdc2
c001bbd0:	e8 03 73 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bbd5:	eb c5                	jmp    c001bb9c <sysCallClose(regs*)+0x43>
c001bbd7:	83 ec 0c             	sub    esp,0xc
c001bbda:	68 d0 bd 02 c0       	push   0xc002bdd0
c001bbdf:	eb ef                	jmp    c001bbd0 <sysCallClose(regs*)+0x77>

c001bbe1 <sysCallOpenDir(regs*)>:
c001bbe1:	56                   	push   esi
c001bbe2:	53                   	push   ebx
c001bbe3:	53                   	push   ebx
c001bbe4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbe8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbeb:	85 f6                	test   esi,esi
c001bbed:	74 59                	je     c001bc48 <sysCallOpenDir(regs*)+0x67>
c001bbef:	83 ec 0c             	sub    esp,0xc
c001bbf2:	68 14 01 00 00       	push   0x114
c001bbf7:	e8 47 3c ff ff       	call   c000f843 <malloc>
c001bbfc:	83 c4 0c             	add    esp,0xc
c001bbff:	89 c6                	mov    esi,eax
c001bc01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc0c:	56                   	push   esi
c001bc0d:	e8 ca 7c ff ff       	call   c00138dc <Directory::Directory(char const*, Process*)>
c001bc12:	83 c4 10             	add    esp,0x10
c001bc15:	85 f6                	test   esi,esi
c001bc17:	74 2f                	je     c001bc48 <sysCallOpenDir(regs*)+0x67>
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	56                   	push   esi
c001bc1d:	e8 1e 7d ff ff       	call   c0013940 <Directory::open()>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	85 c0                	test   eax,eax
c001bc27:	75 1f                	jne    c001bc48 <sysCallOpenDir(regs*)+0x67>
c001bc29:	83 ec 0c             	sub    esp,0xc
c001bc2c:	56                   	push   esi
c001bc2d:	e8 fe 5a ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001bc32:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc35:	83 c4 10             	add    esp,0x10
c001bc38:	89 02                	mov    DWORD PTR [edx],eax
c001bc3a:	c1 f8 1f             	sar    eax,0x1f
c001bc3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc40:	31 c0                	xor    eax,eax
c001bc42:	59                   	pop    ecx
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	5b                   	pop    ebx
c001bc46:	5e                   	pop    esi
c001bc47:	c3                   	ret    
c001bc48:	59                   	pop    ecx
c001bc49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc53:	5b                   	pop    ebx
c001bc54:	5e                   	pop    esi
c001bc55:	c3                   	ret    

c001bc56 <sysCallCloseDir(regs*)>:
c001bc56:	53                   	push   ebx
c001bc57:	83 ec 08             	sub    esp,0x8
c001bc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc61:	83 f8 02             	cmp    eax,0x2
c001bc64:	76 47                	jbe    c001bcad <sysCallCloseDir(regs*)+0x57>
c001bc66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc6b:	77 2f                	ja     c001bc9c <sysCallCloseDir(regs*)+0x46>
c001bc6d:	83 ec 0c             	sub    esp,0xc
c001bc70:	50                   	push   eax
c001bc71:	e8 af 5d ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bc76:	89 c3                	mov    ebx,eax
c001bc78:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc7b:	e8 1c 7d ff ff       	call   c001399c <Directory::close()>
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	85 db                	test   ebx,ebx
c001bc85:	74 0c                	je     c001bc93 <sysCallCloseDir(regs*)+0x3d>
c001bc87:	83 ec 0c             	sub    esp,0xc
c001bc8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc8c:	53                   	push   ebx
c001bc8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	31 c0                	xor    eax,eax
c001bc95:	31 d2                	xor    edx,edx
c001bc97:	83 c4 08             	add    esp,0x8
c001bc9a:	5b                   	pop    ebx
c001bc9b:	c3                   	ret    
c001bc9c:	83 ec 08             	sub    esp,0x8
c001bc9f:	50                   	push   eax
c001bca0:	68 cc be 02 c0       	push   0xc002becc
c001bca5:	e8 2e 72 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bcaa:	83 c4 10             	add    esp,0x10
c001bcad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb7:	83 c4 08             	add    esp,0x8
c001bcba:	5b                   	pop    ebx
c001bcbb:	c3                   	ret    

c001bcbc <sysCallMakeDir(regs*)>:
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	83 ec 10             	sub    esp,0x10
c001bcc1:	68 14 01 00 00       	push   0x114
c001bcc6:	e8 78 3b ff ff       	call   c000f843 <malloc>
c001bccb:	83 c4 0c             	add    esp,0xc
c001bcce:	89 c3                	mov    ebx,eax
c001bcd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcdc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcdf:	53                   	push   ebx
c001bce0:	e8 f7 7b ff ff       	call   c00138dc <Directory::Directory(char const*, Process*)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	85 db                	test   ebx,ebx
c001bcea:	74 32                	je     c001bd1e <sysCallMakeDir(regs*)+0x62>
c001bcec:	83 ec 0c             	sub    esp,0xc
c001bcef:	53                   	push   ebx
c001bcf0:	e8 2b 7e ff ff       	call   c0013b20 <Directory::create()>
c001bcf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcf8:	89 c6                	mov    esi,eax
c001bcfa:	e8 9d 7c ff ff       	call   c001399c <Directory::close()>
c001bcff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	31 c0                	xor    eax,eax
c001bd0c:	59                   	pop    ecx
c001bd0d:	85 f6                	test   esi,esi
c001bd0f:	5b                   	pop    ebx
c001bd10:	0f 95 c0             	setne  al
c001bd13:	5e                   	pop    esi
c001bd14:	31 d2                	xor    edx,edx
c001bd16:	f7 d8                	neg    eax
c001bd18:	83 d2 00             	adc    edx,0x0
c001bd1b:	f7 da                	neg    edx
c001bd1d:	c3                   	ret    
c001bd1e:	59                   	pop    ecx
c001bd1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd29:	5b                   	pop    ebx
c001bd2a:	5e                   	pop    esi
c001bd2b:	c3                   	ret    

c001bd2c <sysCallWait(regs*)>:
c001bd2c:	83 ec 10             	sub    esp,0x10
c001bd2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd33:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd36:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd39:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd3c:	e8 ec 24 00 00       	call   c001e22d <waitTask(int, int*, int)>
c001bd41:	83 c4 1c             	add    esp,0x1c
c001bd44:	99                   	cdq    
c001bd45:	c3                   	ret    

c001bd46 <sysCallNotImpl(regs*)>:
c001bd46:	83 ec 18             	sub    esp,0x18
c001bd49:	68 de bd 02 c0       	push   0xc002bdde
c001bd4e:	e8 2a e8 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001bd53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd58:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd5d:	83 c4 1c             	add    esp,0x1c
c001bd60:	c3                   	ret    

c001bd61 <sysPanic(regs*)>:
c001bd61:	83 ec 18             	sub    esp,0x18
c001bd64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd68:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd6b:	e8 0d e8 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001bd70:	c7 04 24 f8 bd 02 c0 	mov    DWORD PTR [esp],0xc002bdf8
c001bd77:	e8 01 e8 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001bd7c:	b8 01 00 00 00       	mov    eax,0x1
c001bd81:	31 d2                	xor    edx,edx
c001bd83:	83 c4 1c             	add    esp,0x1c
c001bd86:	c3                   	ret    

c001bd87 <sysCallRmdir(regs*)>:
c001bd87:	56                   	push   esi
c001bd88:	53                   	push   ebx
c001bd89:	83 ec 20             	sub    esp,0x20
c001bd8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd90:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd93:	68 14 01 00 00       	push   0x114
c001bd98:	e8 a6 3a ff ff       	call   c000f843 <malloc>
c001bd9d:	83 c4 0c             	add    esp,0xc
c001bda0:	89 c3                	mov    ebx,eax
c001bda2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdaa:	56                   	push   esi
c001bdab:	53                   	push   ebx
c001bdac:	e8 7f 76 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001bdb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdb4:	e8 53 78 ff ff       	call   c001360c <File::unlink()>
c001bdb9:	83 c4 10             	add    esp,0x10
c001bdbc:	85 db                	test   ebx,ebx
c001bdbe:	74 14                	je     c001bdd4 <sysCallRmdir(regs*)+0x4d>
c001bdc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdc6:	83 ec 0c             	sub    esp,0xc
c001bdc9:	53                   	push   ebx
c001bdca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdd4:	85 c0                	test   eax,eax
c001bdd6:	0f 95 c0             	setne  al
c001bdd9:	31 d2                	xor    edx,edx
c001bddb:	0f b6 c0             	movzx  eax,al
c001bdde:	f7 d8                	neg    eax
c001bde0:	83 d2 00             	adc    edx,0x0
c001bde3:	83 c4 14             	add    esp,0x14
c001bde6:	f7 da                	neg    edx
c001bde8:	5b                   	pop    ebx
c001bde9:	5e                   	pop    esi
c001bdea:	c3                   	ret    

c001bdeb <sysCallUnlink(regs*)>:
c001bdeb:	56                   	push   esi
c001bdec:	53                   	push   ebx
c001bded:	83 ec 20             	sub    esp,0x20
c001bdf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdf4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdf7:	68 14 01 00 00       	push   0x114
c001bdfc:	e8 42 3a ff ff       	call   c000f843 <malloc>
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	89 c3                	mov    ebx,eax
c001be06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be0e:	56                   	push   esi
c001be0f:	53                   	push   ebx
c001be10:	e8 1b 76 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001be15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be18:	e8 ef 77 ff ff       	call   c001360c <File::unlink()>
c001be1d:	83 c4 10             	add    esp,0x10
c001be20:	85 db                	test   ebx,ebx
c001be22:	74 14                	je     c001be38 <sysCallUnlink(regs*)+0x4d>
c001be24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be28:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be2a:	83 ec 0c             	sub    esp,0xc
c001be2d:	53                   	push   ebx
c001be2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be31:	83 c4 10             	add    esp,0x10
c001be34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be38:	85 c0                	test   eax,eax
c001be3a:	0f 95 c0             	setne  al
c001be3d:	31 d2                	xor    edx,edx
c001be3f:	0f b6 c0             	movzx  eax,al
c001be42:	f7 d8                	neg    eax
c001be44:	83 d2 00             	adc    edx,0x0
c001be47:	83 c4 14             	add    esp,0x14
c001be4a:	f7 da                	neg    edx
c001be4c:	5b                   	pop    ebx
c001be4d:	5e                   	pop    esi
c001be4e:	c3                   	ret    

c001be4f <sysCallGetArgv(regs*)>:
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be56:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be59:	85 c0                	test   eax,eax
c001be5b:	78 2b                	js     c001be88 <sysCallGetArgv(regs*)+0x39>
c001be5d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be63:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be66:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001be6c:	7d 1a                	jge    c001be88 <sysCallGetArgv(regs*)+0x39>
c001be6e:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001be75:	85 c0                	test   eax,eax
c001be77:	74 17                	je     c001be90 <sysCallGetArgv(regs*)+0x41>
c001be79:	83 ec 08             	sub    esp,0x8
c001be7c:	50                   	push   eax
c001be7d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be80:	e8 af 49 fe ff       	call   c0000834 <strcpy>
c001be85:	83 c4 10             	add    esp,0x10
c001be88:	31 c0                	xor    eax,eax
c001be8a:	31 d2                	xor    edx,edx
c001be8c:	83 c4 0c             	add    esp,0xc
c001be8f:	c3                   	ret    
c001be90:	b8 01 00 00 00       	mov    eax,0x1
c001be95:	31 d2                	xor    edx,edx
c001be97:	83 c4 0c             	add    esp,0xc
c001be9a:	c3                   	ret    

c001be9b <sysCallTTYName(regs*)>:
c001be9b:	56                   	push   esi
c001be9c:	53                   	push   ebx
c001be9d:	53                   	push   ebx
c001be9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bea2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bea5:	85 c0                	test   eax,eax
c001bea7:	74 5f                	je     c001bf08 <sysCallTTYName(regs*)+0x6d>
c001bea9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001beac:	83 f8 02             	cmp    eax,0x2
c001beaf:	77 3e                	ja     c001beef <sysCallTTYName(regs*)+0x54>
c001beb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beb9:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bebf:	85 db                	test   ebx,ebx
c001bec1:	74 45                	je     c001bf08 <sysCallTTYName(regs*)+0x6d>
c001bec3:	83 ec 0c             	sub    esp,0xc
c001bec6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bec8:	53                   	push   ebx
c001bec9:	ff 10                	call   DWORD PTR [eax]
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	84 c0                	test   al,al
c001bed0:	74 41                	je     c001bf13 <sysCallTTYName(regs*)+0x78>
c001bed2:	83 ec 08             	sub    esp,0x8
c001bed5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bedb:	53                   	push   ebx
c001bedc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bedf:	e8 50 49 fe ff       	call   c0000834 <strcpy>
c001bee4:	83 c4 10             	add    esp,0x10
c001bee7:	31 c0                	xor    eax,eax
c001bee9:	59                   	pop    ecx
c001beea:	31 d2                	xor    edx,edx
c001beec:	5b                   	pop    ebx
c001beed:	5e                   	pop    esi
c001beee:	c3                   	ret    
c001beef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bef4:	74 bb                	je     c001beb1 <sysCallTTYName(regs*)+0x16>
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	50                   	push   eax
c001befa:	e8 26 5b ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	89 c3                	mov    ebx,eax
c001bf04:	85 db                	test   ebx,ebx
c001bf06:	75 bb                	jne    c001bec3 <sysCallTTYName(regs*)+0x28>
c001bf08:	59                   	pop    ecx
c001bf09:	b8 01 00 00 00       	mov    eax,0x1
c001bf0e:	31 d2                	xor    edx,edx
c001bf10:	5b                   	pop    ebx
c001bf11:	5e                   	pop    esi
c001bf12:	c3                   	ret    
c001bf13:	59                   	pop    ecx
c001bf14:	b8 02 00 00 00       	mov    eax,0x2
c001bf19:	31 d2                	xor    edx,edx
c001bf1b:	5b                   	pop    ebx
c001bf1c:	5e                   	pop    esi
c001bf1d:	c3                   	ret    

c001bf1e <sysCallUSleep(regs*)>:
c001bf1e:	83 ec 14             	sub    esp,0x14
c001bf21:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf2a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf31:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf34:	01 ca                	add    edx,ecx
c001bf36:	52                   	push   edx
c001bf37:	50                   	push   eax
c001bf38:	e8 89 23 00 00       	call   c001e2c6 <nanoSleep(unsigned long long)>
c001bf3d:	31 c0                	xor    eax,eax
c001bf3f:	31 d2                	xor    edx,edx
c001bf41:	83 c4 1c             	add    esp,0x1c
c001bf44:	c3                   	ret    

c001bf45 <sysCallSpawn(regs*)>:
c001bf45:	56                   	push   esi
c001bf46:	53                   	push   ebx
c001bf47:	53                   	push   ebx
c001bf48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf4c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf4f:	85 f6                	test   esi,esi
c001bf51:	75 08                	jne    c001bf5b <sysCallSpawn(regs*)+0x16>
c001bf53:	59                   	pop    ecx
c001bf54:	31 c0                	xor    eax,eax
c001bf56:	31 d2                	xor    edx,edx
c001bf58:	5b                   	pop    ebx
c001bf59:	5e                   	pop    esi
c001bf5a:	c3                   	ret    
c001bf5b:	83 ec 0c             	sub    esp,0xc
c001bf5e:	68 3f 1b 00 00       	push   0x1b3f
c001bf63:	e8 db 38 ff ff       	call   c000f843 <malloc>
c001bf68:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf6b:	89 c6                	mov    esi,eax
c001bf6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf72:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf78:	56                   	push   esi
c001bf79:	e8 44 1a 00 00       	call   c001d9c2 <Process::Process(char const*, Process*, char**)>
c001bf7e:	83 c4 20             	add    esp,0x20
c001bf81:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001bf88:	75 c9                	jne    c001bf53 <sysCallSpawn(regs*)+0xe>
c001bf8a:	83 ec 0c             	sub    esp,0xc
c001bf8d:	56                   	push   esi
c001bf8e:	e8 f9 1f 00 00       	call   c001df8c <Process::createUserThread()>
c001bf93:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	99                   	cdq    
c001bf99:	59                   	pop    ecx
c001bf9a:	5b                   	pop    ebx
c001bf9b:	5e                   	pop    esi
c001bf9c:	c3                   	ret    

c001bf9d <sysCallGetEnv(regs*)>:
c001bf9d:	55                   	push   ebp
c001bf9e:	57                   	push   edi
c001bf9f:	56                   	push   esi
c001bfa0:	53                   	push   ebx
c001bfa1:	83 ec 28             	sub    esp,0x28
c001bfa4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfa8:	68 07 be 02 c0       	push   0xc002be07
c001bfad:	e8 26 6f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bfb2:	5f                   	pop    edi
c001bfb3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfb6:	5d                   	pop    ebp
c001bfb7:	53                   	push   ebx
c001bfb8:	68 4d c1 02 c0       	push   0xc002c14d
c001bfbd:	e8 16 6f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bfc2:	58                   	pop    eax
c001bfc3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfc6:	5a                   	pop    edx
c001bfc7:	57                   	push   edi
c001bfc8:	68 10 be 02 c0       	push   0xc002be10
c001bfcd:	e8 06 6f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bfd2:	59                   	pop    ecx
c001bfd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfdb:	e8 b9 e4 ff ff       	call   c001a499 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfe0:	5a                   	pop    edx
c001bfe1:	89 c5                	mov    ebp,eax
c001bfe3:	59                   	pop    ecx
c001bfe4:	50                   	push   eax
c001bfe5:	68 1a be 02 c0       	push   0xc002be1a
c001bfea:	e8 e9 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	39 ef                	cmp    edi,ebp
c001bff4:	7c 15                	jl     c001c00b <sysCallGetEnv(regs*)+0x6e>
c001bff6:	85 db                	test   ebx,ebx
c001bff8:	75 0c                	jne    c001c006 <sysCallGetEnv(regs*)+0x69>
c001bffa:	83 c4 1c             	add    esp,0x1c
c001bffd:	31 c0                	xor    eax,eax
c001bfff:	5b                   	pop    ebx
c001c000:	31 d2                	xor    edx,edx
c001c002:	5e                   	pop    esi
c001c003:	5f                   	pop    edi
c001c004:	5d                   	pop    ebp
c001c005:	c3                   	ret    
c001c006:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c009:	eb ef                	jmp    c001bffa <sysCallGetEnv(regs*)+0x5d>
c001c00b:	83 ec 0c             	sub    esp,0xc
c001c00e:	68 26 be 02 c0       	push   0xc002be26
c001c013:	e8 c0 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c018:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c01c:	83 c4 0c             	add    esp,0xc
c001c01f:	57                   	push   edi
c001c020:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c026:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c029:	50                   	push   eax
c001c02a:	e8 8a e4 ff ff       	call   c001a4b9 <Krnl::getProcessEnvPair(Process*, int)>
c001c02f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c033:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c037:	68 cc c1 02 c0       	push   0xc002c1cc
c001c03c:	e8 97 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c047:	85 f6                	test   esi,esi
c001c049:	75 47                	jne    c001c092 <sysCallGetEnv(regs*)+0xf5>
c001c04b:	83 ec 0c             	sub    esp,0xc
c001c04e:	55                   	push   ebp
c001c04f:	e8 40 47 fe ff       	call   c0000794 <strlen>
c001c054:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c057:	89 c3                	mov    ebx,eax
c001c059:	e8 36 47 fe ff       	call   c0000794 <strlen>
c001c05e:	5a                   	pop    edx
c001c05f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c063:	59                   	pop    ecx
c001c064:	50                   	push   eax
c001c065:	68 29 be 02 c0       	push   0xc002be29
c001c06a:	e8 69 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c06f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c072:	e8 1d 47 fe ff       	call   c0000794 <strlen>
c001c077:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c07a:	89 c3                	mov    ebx,eax
c001c07c:	e8 13 47 fe ff       	call   c0000794 <strlen>
c001c081:	83 c4 10             	add    esp,0x10
c001c084:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c088:	83 c4 1c             	add    esp,0x1c
c001c08b:	31 d2                	xor    edx,edx
c001c08d:	5b                   	pop    ebx
c001c08e:	5e                   	pop    esi
c001c08f:	5f                   	pop    edi
c001c090:	5d                   	pop    ebp
c001c091:	c3                   	ret    
c001c092:	83 ec 0c             	sub    esp,0xc
c001c095:	68 e6 c1 02 c0       	push   0xc002c1e6
c001c09a:	e8 39 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c09f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0a2:	58                   	pop    eax
c001c0a3:	5a                   	pop    edx
c001c0a4:	55                   	push   ebp
c001c0a5:	53                   	push   ebx
c001c0a6:	e8 89 47 fe ff       	call   c0000834 <strcpy>
c001c0ab:	59                   	pop    ecx
c001c0ac:	5e                   	pop    esi
c001c0ad:	68 33 be 02 c0       	push   0xc002be33
c001c0b2:	53                   	push   ebx
c001c0b3:	e8 bc 48 fe ff       	call   c0000974 <strcat>
c001c0b8:	5d                   	pop    ebp
c001c0b9:	58                   	pop    eax
c001c0ba:	57                   	push   edi
c001c0bb:	53                   	push   ebx
c001c0bc:	e8 b3 48 fe ff       	call   c0000974 <strcat>
c001c0c1:	c7 04 24 00 c2 02 c0 	mov    DWORD PTR [esp],0xc002c200
c001c0c8:	e8 0b 6e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c0cd:	83 c4 10             	add    esp,0x10
c001c0d0:	e9 25 ff ff ff       	jmp    c001bffa <sysCallGetEnv(regs*)+0x5d>

c001c0d5 <sysAppSettings(regs*)>:
c001c0d5:	53                   	push   ebx
c001c0d6:	83 ec 08             	sub    esp,0x8
c001c0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0dd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c0e0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c0e6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0eb:	66 3d c0 09          	cmp    ax,0x9c0
c001c0ef:	75 2f                	jne    c001c120 <sysAppSettings(regs*)+0x4b>
c001c0f1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c0f7:	83 e0 1f             	and    eax,0x1f
c001c0fa:	3c 01                	cmp    al,0x1
c001c0fc:	74 2e                	je     c001c12c <sysAppSettings(regs*)+0x57>
c001c0fe:	3c 07                	cmp    al,0x7
c001c100:	0f 84 bd 00 00 00    	je     c001c1c3 <sysAppSettings(regs*)+0xee>
c001c106:	84 c0                	test   al,al
c001c108:	0f 84 dc 00 00 00    	je     c001c1ea <sysAppSettings(regs*)+0x115>
c001c10e:	3c 08                	cmp    al,0x8
c001c110:	74 6d                	je     c001c17f <sysAppSettings(regs*)+0xaa>
c001c112:	0f b6 c0             	movzx  eax,al
c001c115:	83 c4 08             	add    esp,0x8
c001c118:	05 e8 03 00 00       	add    eax,0x3e8
c001c11d:	5b                   	pop    ebx
c001c11e:	99                   	cdq    
c001c11f:	c3                   	ret    
c001c120:	b8 01 00 00 00       	mov    eax,0x1
c001c125:	31 d2                	xor    edx,edx
c001c127:	83 c4 08             	add    esp,0x8
c001c12a:	5b                   	pop    ebx
c001c12b:	c3                   	ret    
c001c12c:	51                   	push   ecx
c001c12d:	68 00 01 00 00       	push   0x100
c001c132:	6a 00                	push   0x0
c001c134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c139:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c13c:	83 c0 0c             	add    eax,0xc
c001c13f:	50                   	push   eax
c001c140:	e8 33 46 fe ff       	call   c0000778 <memset>
c001c145:	83 c4 0c             	add    esp,0xc
c001c148:	68 ff 00 00 00       	push   0xff
c001c14d:	53                   	push   ebx
c001c14e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c153:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c156:	83 c0 0c             	add    eax,0xc
c001c159:	50                   	push   eax
c001c15a:	e8 e5 45 fe ff       	call   c0000744 <memcpy>
c001c15f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c164:	5b                   	pop    ebx
c001c165:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c168:	5a                   	pop    edx
c001c169:	8d 50 0c             	lea    edx,[eax+0xc]
c001c16c:	52                   	push   edx
c001c16d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c173:	e8 28 4a ff ff       	call   c0010ba0 <VgaText::setTitle(char*)>
c001c178:	83 c4 10             	add    esp,0x10
c001c17b:	31 c0                	xor    eax,eax
c001c17d:	eb a6                	jmp    c001c125 <sysAppSettings(regs*)+0x50>
c001c17f:	83 ec 08             	sub    esp,0x8
c001c182:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c188:	83 e0 0f             	and    eax,0xf
c001c18b:	50                   	push   eax
c001c18c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c191:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c194:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c19a:	e8 f1 49 ff ff       	call   c0010b90 <VgaText::setTitleColour(VgaColour)>
c001c19f:	58                   	pop    eax
c001c1a0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1a6:	5a                   	pop    edx
c001c1a7:	c1 e8 04             	shr    eax,0x4
c001c1aa:	83 e0 0f             	and    eax,0xf
c001c1ad:	50                   	push   eax
c001c1ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c1bc:	e8 bf 49 ff ff       	call   c0010b80 <VgaText::setTitleTextColour(VgaColour)>
c001c1c1:	eb b5                	jmp    c001c178 <sysAppSettings(regs*)+0xa3>
c001c1c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1cb:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c1d1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c1d7:	c0 e8 06             	shr    al,0x6
c001c1da:	83 e0 01             	and    eax,0x1
c001c1dd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c1e3:	31 c0                	xor    eax,eax
c001c1e5:	e9 3b ff ff ff       	jmp    c001c125 <sysAppSettings(regs*)+0x50>
c001c1ea:	b8 02 00 00 00       	mov    eax,0x2
c001c1ef:	e9 31 ff ff ff       	jmp    c001c125 <sysAppSettings(regs*)+0x50>

c001c1f4 <sysSetFatAttrib(regs*)>:
c001c1f4:	57                   	push   edi
c001c1f5:	56                   	push   esi
c001c1f6:	53                   	push   ebx
c001c1f7:	83 ec 1c             	sub    esp,0x1c
c001c1fa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1fe:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c201:	68 14 01 00 00       	push   0x114
c001c206:	e8 38 36 ff ff       	call   c000f843 <malloc>
c001c20b:	83 c4 0c             	add    esp,0xc
c001c20e:	89 c3                	mov    ebx,eax
c001c210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c215:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c218:	57                   	push   edi
c001c219:	53                   	push   ebx
c001c21a:	e8 11 72 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001c21f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c222:	83 c4 0c             	add    esp,0xc
c001c225:	0f b6 d4             	movzx  edx,ah
c001c228:	0f b6 c0             	movzx  eax,al
c001c22b:	52                   	push   edx
c001c22c:	50                   	push   eax
c001c22d:	53                   	push   ebx
c001c22e:	e8 73 74 ff ff       	call   c00136a6 <File::chfatattr(unsigned char, unsigned char)>
c001c233:	83 c4 10             	add    esp,0x10
c001c236:	85 db                	test   ebx,ebx
c001c238:	74 14                	je     c001c24e <sysSetFatAttrib(regs*)+0x5a>
c001c23a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c23e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c240:	83 ec 0c             	sub    esp,0xc
c001c243:	53                   	push   ebx
c001c244:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c247:	83 c4 10             	add    esp,0x10
c001c24a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c24e:	85 c0                	test   eax,eax
c001c250:	0f 95 c0             	setne  al
c001c253:	31 d2                	xor    edx,edx
c001c255:	0f b6 c0             	movzx  eax,al
c001c258:	f7 d8                	neg    eax
c001c25a:	83 d2 00             	adc    edx,0x0
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	f7 da                	neg    edx
c001c262:	5b                   	pop    ebx
c001c263:	5e                   	pop    esi
c001c264:	5f                   	pop    edi
c001c265:	c3                   	ret    

c001c266 <sysPipe(regs*)>:
c001c266:	57                   	push   edi
c001c267:	56                   	push   esi
c001c268:	53                   	push   ebx
c001c269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26d:	83 ec 0c             	sub    esp,0xc
c001c270:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c273:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c276:	6a 20                	push   0x20
c001c278:	e8 c6 35 ff ff       	call   c000f843 <malloc>
c001c27d:	89 c3                	mov    ebx,eax
c001c27f:	58                   	pop    eax
c001c280:	5a                   	pop    edx
c001c281:	68 00 50 00 00       	push   0x5000
c001c286:	53                   	push   ebx
c001c287:	e8 44 42 ff ff       	call   c00104d0 <Pipe::Pipe(int)>
c001c28c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c28f:	e8 9c 54 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c294:	89 07                	mov    DWORD PTR [edi],eax
c001c296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c299:	e8 92 54 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c29e:	83 c4 10             	add    esp,0x10
c001c2a1:	89 06                	mov    DWORD PTR [esi],eax
c001c2a3:	31 d2                	xor    edx,edx
c001c2a5:	5b                   	pop    ebx
c001c2a6:	31 c0                	xor    eax,eax
c001c2a8:	5e                   	pop    esi
c001c2a9:	5f                   	pop    edi
c001c2aa:	c3                   	ret    

c001c2ab <sysGetUnixTime(regs*)>:
c001c2ab:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001c2b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2ba:	e9 5b 7b ff ff       	jmp    c0013e1a <Clock::timeInSecondsLocal()>

c001c2bf <string_ends_with(char const*, char const*)>:
c001c2bf:	57                   	push   edi
c001c2c0:	56                   	push   esi
c001c2c1:	53                   	push   ebx
c001c2c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	53                   	push   ebx
c001c2ce:	e8 c1 44 fe ff       	call   c0000794 <strlen>
c001c2d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2d6:	89 c6                	mov    esi,eax
c001c2d8:	e8 b7 44 fe ff       	call   c0000794 <strlen>
c001c2dd:	83 c4 10             	add    esp,0x10
c001c2e0:	39 c6                	cmp    esi,eax
c001c2e2:	7d 06                	jge    c001c2ea <string_ends_with(char const*, char const*)+0x2b>
c001c2e4:	5b                   	pop    ebx
c001c2e5:	31 c0                	xor    eax,eax
c001c2e7:	5e                   	pop    esi
c001c2e8:	5f                   	pop    edi
c001c2e9:	c3                   	ret    
c001c2ea:	83 ec 08             	sub    esp,0x8
c001c2ed:	29 c6                	sub    esi,eax
c001c2ef:	57                   	push   edi
c001c2f0:	01 f3                	add    ebx,esi
c001c2f2:	53                   	push   ebx
c001c2f3:	e8 c8 45 fe ff       	call   c00008c0 <strcmp>
c001c2f8:	83 c4 10             	add    esp,0x10
c001c2fb:	85 c0                	test   eax,eax
c001c2fd:	5b                   	pop    ebx
c001c2fe:	0f 94 c0             	sete   al
c001c301:	5e                   	pop    esi
c001c302:	0f b6 c0             	movzx  eax,al
c001c305:	5f                   	pop    edi
c001c306:	c3                   	ret    

c001c307 <sysCallOpen(regs*)>:
c001c307:	56                   	push   esi
c001c308:	53                   	push   ebx
c001c309:	81 ec 04 01 00 00    	sub    esp,0x104
c001c30f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c316:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c319:	85 c9                	test   ecx,ecx
c001c31b:	0f 84 b3 00 00 00    	je     c001c3d4 <sysCallOpen(regs*)+0xcd>
c001c321:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c324:	85 c0                	test   eax,eax
c001c326:	0f 84 a8 00 00 00    	je     c001c3d4 <sysCallOpen(regs*)+0xcd>
c001c32c:	52                   	push   edx
c001c32d:	68 35 be 02 c0       	push   0xc002be35
c001c332:	50                   	push   eax
c001c333:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c337:	56                   	push   esi
c001c338:	e8 49 6f ff ff       	call   c0013286 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c33d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c340:	e8 4f 44 fe ff       	call   c0000794 <strlen>
c001c345:	83 c4 10             	add    esp,0x10
c001c348:	48                   	dec    eax
c001c349:	74 1d                	je     c001c368 <sysCallOpen(regs*)+0x61>
c001c34b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c34e:	eb 0f                	jmp    c001c35f <sysCallOpen(regs*)+0x58>
c001c350:	80 fa 3a             	cmp    dl,0x3a
c001c353:	74 0f                	je     c001c364 <sysCallOpen(regs*)+0x5d>
c001c355:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c359:	48                   	dec    eax
c001c35a:	74 0c                	je     c001c368 <sysCallOpen(regs*)+0x61>
c001c35c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c35f:	80 fa 2e             	cmp    dl,0x2e
c001c362:	75 ec                	jne    c001c350 <sysCallOpen(regs*)+0x49>
c001c364:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c368:	83 ec 08             	sub    esp,0x8
c001c36b:	68 39 be 02 c0       	push   0xc002be39
c001c370:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c373:	e8 47 ff ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	85 c0                	test   eax,eax
c001c37d:	75 17                	jne    c001c396 <sysCallOpen(regs*)+0x8f>
c001c37f:	83 ec 08             	sub    esp,0x8
c001c382:	68 5a be 02 c0       	push   0xc002be5a
c001c387:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c38a:	e8 30 ff ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	85 c0                	test   eax,eax
c001c394:	74 51                	je     c001c3e7 <sysCallOpen(regs*)+0xe0>
c001c396:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c399:	83 ec 08             	sub    esp,0x8
c001c39c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ac:	ff 30                	push   DWORD PTR [eax]
c001c3ae:	68 3e be 02 c0       	push   0xc002be3e
c001c3b3:	e8 20 6b ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c3b8:	c7 04 24 4d be 02 c0 	mov    DWORD PTR [esp],0xc002be4d
c001c3bf:	e8 14 6b ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	81 c4 04 01 00 00    	add    esp,0x104
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	31 d2                	xor    edx,edx
c001c3d1:	5b                   	pop    ebx
c001c3d2:	5e                   	pop    esi
c001c3d3:	c3                   	ret    
c001c3d4:	81 c4 04 01 00 00    	add    esp,0x104
c001c3da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3df:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3e4:	5b                   	pop    ebx
c001c3e5:	5e                   	pop    esi
c001c3e6:	c3                   	ret    
c001c3e7:	83 ec 08             	sub    esp,0x8
c001c3ea:	68 3a be 02 c0       	push   0xc002be3a
c001c3ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3f2:	e8 c9 44 fe ff       	call   c00008c0 <strcmp>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	85 c0                	test   eax,eax
c001c3fc:	74 98                	je     c001c396 <sysCallOpen(regs*)+0x8f>
c001c3fe:	83 ec 08             	sub    esp,0x8
c001c401:	68 39 be 02 c0       	push   0xc002be39
c001c406:	56                   	push   esi
c001c407:	e8 b3 fe ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	85 c0                	test   eax,eax
c001c411:	75 83                	jne    c001c396 <sysCallOpen(regs*)+0x8f>
c001c413:	83 ec 08             	sub    esp,0x8
c001c416:	68 5f be 02 c0       	push   0xc002be5f
c001c41b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c41e:	e8 9c fe ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c423:	83 c4 10             	add    esp,0x10
c001c426:	85 c0                	test   eax,eax
c001c428:	0f 85 d9 00 00 00    	jne    c001c507 <sysCallOpen(regs*)+0x200>
c001c42e:	83 ec 08             	sub    esp,0x8
c001c431:	68 64 be 02 c0       	push   0xc002be64
c001c436:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c439:	e8 81 fe ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	85 c0                	test   eax,eax
c001c443:	0f 85 be 00 00 00    	jne    c001c507 <sysCallOpen(regs*)+0x200>
c001c449:	83 ec 08             	sub    esp,0x8
c001c44c:	68 60 be 02 c0       	push   0xc002be60
c001c451:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c454:	e8 67 44 fe ff       	call   c00008c0 <strcmp>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	85 c0                	test   eax,eax
c001c45e:	0f 84 a3 00 00 00    	je     c001c507 <sysCallOpen(regs*)+0x200>
c001c464:	83 ec 08             	sub    esp,0x8
c001c467:	68 5f be 02 c0       	push   0xc002be5f
c001c46c:	56                   	push   esi
c001c46d:	e8 4d fe ff ff       	call   c001c2bf <string_ends_with(char const*, char const*)>
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	85 c0                	test   eax,eax
c001c477:	0f 85 8a 00 00 00    	jne    c001c507 <sysCallOpen(regs*)+0x200>
c001c47d:	83 ec 0c             	sub    esp,0xc
c001c480:	68 14 01 00 00       	push   0x114
c001c485:	e8 b9 33 ff ff       	call   c000f843 <malloc>
c001c48a:	83 c4 0c             	add    esp,0xc
c001c48d:	89 c6                	mov    esi,eax
c001c48f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c494:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c497:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c49a:	56                   	push   esi
c001c49b:	e8 90 6f ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001c4a0:	83 c4 10             	add    esp,0x10
c001c4a3:	85 f6                	test   esi,esi
c001c4a5:	0f 84 29 ff ff ff    	je     c001c3d4 <sysCallOpen(regs*)+0xcd>
c001c4ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4ae:	0f b6 c2             	movzx  eax,dl
c001c4b1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4b4:	89 d0                	mov    eax,edx
c001c4b6:	83 e0 01             	and    eax,0x1
c001c4b9:	f6 c2 02             	test   dl,0x2
c001c4bc:	74 03                	je     c001c4c1 <sysCallOpen(regs*)+0x1ba>
c001c4be:	83 c8 02             	or     eax,0x2
c001c4c1:	f6 c2 04             	test   dl,0x4
c001c4c4:	74 03                	je     c001c4c9 <sysCallOpen(regs*)+0x1c2>
c001c4c6:	83 c8 04             	or     eax,0x4
c001c4c9:	f6 c2 08             	test   dl,0x8
c001c4cc:	74 03                	je     c001c4d1 <sysCallOpen(regs*)+0x1ca>
c001c4ce:	83 c8 0a             	or     eax,0xa
c001c4d1:	83 e2 10             	and    edx,0x10
c001c4d4:	74 03                	je     c001c4d9 <sysCallOpen(regs*)+0x1d2>
c001c4d6:	83 c8 12             	or     eax,0x12
c001c4d9:	83 ec 08             	sub    esp,0x8
c001c4dc:	50                   	push   eax
c001c4dd:	56                   	push   esi
c001c4de:	e8 b1 6f ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	85 c0                	test   eax,eax
c001c4e8:	0f 85 e6 fe ff ff    	jne    c001c3d4 <sysCallOpen(regs*)+0xcd>
c001c4ee:	83 ec 0c             	sub    esp,0xc
c001c4f1:	56                   	push   esi
c001c4f2:	e8 39 52 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c4f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4fa:	89 02                	mov    DWORD PTR [edx],eax
c001c4fc:	c1 f8 1f             	sar    eax,0x1f
c001c4ff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c502:	e9 bd fe ff ff       	jmp    c001c3c4 <sysCallOpen(regs*)+0xbd>
c001c507:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c50a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c510:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c517:	e9 ab fe ff ff       	jmp    c001c3c7 <sysCallOpen(regs*)+0xc0>

c001c51c <Sys::loadSyscalls()>:
c001c51c:	c7 05 00 0f 03 c0 29 b6 01 c0 	mov    DWORD PTR ds:0xc0030f00,0xc001b629
c001c526:	c7 05 04 0f 03 c0 12 b2 01 c0 	mov    DWORD PTR ds:0xc0030f04,0xc001b212
c001c530:	c7 05 08 0f 03 c0 7c b3 01 c0 	mov    DWORD PTR ds:0xc0030f08,0xc001b37c
c001c53a:	c7 05 0c 0f 03 c0 5f b5 01 c0 	mov    DWORD PTR ds:0xc0030f0c,0xc001b55f
c001c544:	c7 05 10 0f 03 c0 14 b3 01 c0 	mov    DWORD PTR ds:0xc0030f10,0xc001b314
c001c54e:	c7 05 14 0f 03 c0 49 b2 01 c0 	mov    DWORD PTR ds:0xc0030f14,0xc001b249
c001c558:	c7 05 18 0f 03 c0 2a b2 01 c0 	mov    DWORD PTR ds:0xc0030f18,0xc001b22a
c001c562:	c7 05 1c 0f 03 c0 d1 b3 01 c0 	mov    DWORD PTR ds:0xc0030f1c,0xc001b3d1
c001c56c:	c7 05 24 0f 03 c0 59 bb 01 c0 	mov    DWORD PTR ds:0xc0030f24,0xc001bb59
c001c576:	c7 05 20 0f 03 c0 07 c3 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001c307
c001c580:	c7 05 28 0f 03 c0 e1 bb 01 c0 	mov    DWORD PTR ds:0xc0030f28,0xc001bbe1
c001c58a:	c7 05 2c 0f 03 c0 48 b8 01 c0 	mov    DWORD PTR ds:0xc0030f2c,0xc001b848
c001c594:	c7 05 30 0f 03 c0 64 b6 01 c0 	mov    DWORD PTR ds:0xc0030f30,0xc001b664
c001c59e:	c7 05 34 0f 03 c0 69 b6 01 c0 	mov    DWORD PTR ds:0xc0030f34,0xc001b669
c001c5a8:	c7 05 38 0f 03 c0 bc bc 01 c0 	mov    DWORD PTR ds:0xc0030f38,0xc001bcbc
c001c5b2:	c7 05 3c 0f 03 c0 56 bc 01 c0 	mov    DWORD PTR ds:0xc0030f3c,0xc001bc56
c001c5bc:	c7 05 40 0f 03 c0 30 b9 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001b930
c001c5c6:	c7 05 44 0f 03 c0 99 b9 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001b999
c001c5d0:	c7 05 48 0f 03 c0 16 ba 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001ba16
c001c5da:	c7 05 4c 0f 03 c0 6e b6 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b66e
c001c5e4:	c7 05 50 0f 03 c0 2c bd 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001bd2c
c001c5ee:	c7 05 54 0f 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001bd46
c001c5f8:	c7 05 58 0f 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001bd46
c001c602:	c7 05 5c 0f 03 c0 87 bd 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001bd87
c001c60c:	c7 05 60 0f 03 c0 eb bd 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001bdeb
c001c616:	c7 05 64 0f 03 c0 1a b8 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001b81a
c001c620:	c7 05 68 0f 03 c0 4f be 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001be4f
c001c62a:	c7 05 6c 0f 03 c0 d7 b7 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b7d7
c001c634:	c7 05 70 0f 03 c0 9b be 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001be9b
c001c63e:	c7 05 74 0f 03 c0 d6 b8 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b8d6
c001c648:	c7 05 78 0f 03 c0 1e bf 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001bf1e
c001c652:	c7 05 7c 0f 03 c0 99 ba 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001ba99
c001c65c:	c7 05 80 0f 03 c0 45 bf 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001bf45
c001c666:	c7 05 84 0f 03 c0 9d bf 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001bf9d
c001c670:	c7 05 88 0f 03 c0 d5 c0 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001c0d5
c001c67a:	c7 05 8c 0f 03 c0 78 b6 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b678
c001c684:	c7 05 90 0f 03 c0 e2 b6 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b6e2
c001c68e:	c7 05 94 0f 03 c0 28 b7 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b728
c001c698:	c7 05 98 0f 03 c0 f4 c1 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001c1f4
c001c6a2:	c7 05 9c 0f 03 c0 61 bd 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bd61
c001c6ac:	c7 05 a0 0f 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b779
c001c6b6:	c7 05 a4 0f 03 c0 66 c2 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001c266
c001c6c0:	c7 05 a8 0f 03 c0 ab c2 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001c2ab
c001c6ca:	c7 05 ac 0f 03 c0 6c b2 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b26c
c001c6d4:	c7 05 b0 0f 03 c0 ed b3 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b3ed
c001c6de:	c7 05 b4 0f 03 c0 15 b5 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b515
c001c6e8:	c7 05 b8 0f 03 c0 dc b1 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001b1dc
c001c6f2:	c7 05 bc 0f 03 c0 c7 b5 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001b5c7
c001c6fc:	c7 05 c0 0f 03 c0 55 b2 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b255
c001c706:	c3                   	ret    

c001c707 <Sys::systemCall(regs*, void*)>:
c001c707:	53                   	push   ebx
c001c708:	83 ec 08             	sub    esp,0x8
c001c70b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c70f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c712:	83 f8 7f             	cmp    eax,0x7f
c001c715:	77 16                	ja     c001c72d <Sys::systemCall(regs*, void*)+0x26>
c001c717:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c001c71e:	85 d2                	test   edx,edx
c001c720:	74 0b                	je     c001c72d <Sys::systemCall(regs*, void*)+0x26>
c001c722:	83 ec 0c             	sub    esp,0xc
c001c725:	53                   	push   ebx
c001c726:	ff d2                	call   edx
c001c728:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c72b:	eb 0d                	jmp    c001c73a <Sys::systemCall(regs*, void*)+0x33>
c001c72d:	52                   	push   edx
c001c72e:	52                   	push   edx
c001c72f:	50                   	push   eax
c001c730:	68 69 be 02 c0       	push   0xc002be69
c001c735:	e8 9e 67 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c73a:	83 c4 10             	add    esp,0x10
c001c73d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c742:	31 d2                	xor    edx,edx
c001c744:	83 c4 08             	add    esp,0x8
c001c747:	5b                   	pop    ebx
c001c748:	c3                   	ret    

c001c749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c749:	55                   	push   ebp
c001c74a:	57                   	push   edi
c001c74b:	56                   	push   esi
c001c74c:	53                   	push   ebx
c001c74d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c753:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c75a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c761:	85 c0                	test   eax,eax
c001c763:	0f 95 c1             	setne  cl
c001c766:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c76e:	0f 94 c2             	sete   dl
c001c771:	84 d1                	test   cl,dl
c001c773:	74 23                	je     c001c798 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c775:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c77b:	74 1b                	je     c001c798 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c77d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c783:	89 da                	mov    edx,ebx
c001c785:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c78b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c791:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c798:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c79f:	05 ff 0f 00 00       	add    eax,0xfff
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7ab:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c7b1:	c1 e8 0c             	shr    eax,0xc
c001c7b4:	89 ef                	mov    edi,ebp
c001c7b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7ba:	c1 ef 0c             	shr    edi,0xc
c001c7bd:	6a 01                	push   0x1
c001c7bf:	e8 b7 53 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001c7c4:	89 c6                	mov    esi,eax
c001c7c6:	58                   	pop    eax
c001c7c7:	5a                   	pop    edx
c001c7c8:	57                   	push   edi
c001c7c9:	68 ef be 02 c0       	push   0xc002beef
c001c7ce:	e8 05 67 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c7d3:	59                   	pop    ecx
c001c7d4:	58                   	pop    eax
c001c7d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7d9:	68 01 bf 02 c0       	push   0xc002bf01
c001c7de:	e8 f5 66 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c7ec:	0f 86 24 01 00 00    	jbe    c001c916 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c7f2:	c1 e7 0c             	shl    edi,0xc
c001c7f5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c7f8:	89 df                	mov    edi,ebx
c001c7fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7fe:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c805:	01 dd                	add    ebp,ebx
c001c807:	29 fd                	sub    ebp,edi
c001c809:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c80d:	0f 84 01 01 00 00    	je     c001c914 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c813:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c819:	76 05                	jbe    c001c820 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c81b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	31 d2                	xor    edx,edx
c001c825:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c82c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c82e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c832:	50                   	push   eax
c001c833:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c837:	50                   	push   eax
c001c838:	52                   	push   edx
c001c839:	55                   	push   ebp
c001c83a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c844:	83 c4 20             	add    esp,0x20
c001c847:	85 c0                	test   eax,eax
c001c849:	74 0a                	je     c001c855 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c84b:	53                   	push   ebx
c001c84c:	53                   	push   ebx
c001c84d:	50                   	push   eax
c001c84e:	68 13 bf 02 c0       	push   0xc002bf13
c001c853:	eb 0f                	jmp    c001c864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c855:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c859:	74 20                	je     c001c87b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c85b:	51                   	push   ecx
c001c85c:	51                   	push   ecx
c001c85d:	6a 00                	push   0x0
c001c85f:	68 3e bf 02 c0       	push   0xc002bf3e
c001c864:	e8 6f 66 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001c869:	89 34 24             	mov    DWORD PTR [esp],esi
c001c86c:	e8 90 57 ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c001c871:	83 c4 10             	add    esp,0x10
c001c874:	31 c0                	xor    eax,eax
c001c876:	e9 55 01 00 00       	jmp    c001c9d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c87b:	e8 f7 14 00 00       	call   c001dd77 <lockScheduler()>
c001c880:	e8 5b 36 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c885:	6a 07                	push   0x7
c001c887:	89 c5                	mov    ebp,eax
c001c889:	56                   	push   esi
c001c88a:	50                   	push   eax
c001c88b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c890:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c893:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c899:	e8 ca 5a ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c89e:	83 c4 0c             	add    esp,0xc
c001c8a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8a8:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8ae:	6a 00                	push   0x0
c001c8b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8b8:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8be:	e8 0f 59 ff ff       	call   c00121d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8c3:	58                   	pop    eax
c001c8c4:	5a                   	pop    edx
c001c8c5:	68 07 0c 00 00       	push   0xc07
c001c8ca:	57                   	push   edi
c001c8cb:	81 c7 00 10 00 00    	add    edi,0x1000
c001c8d1:	55                   	push   ebp
c001c8d2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8d9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8df:	6a 00                	push   0x0
c001c8e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8e9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8ef:	e8 2e 5e ff ff       	call   c0012722 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8f4:	83 c4 1c             	add    esp,0x1c
c001c8f7:	68 00 10 00 00       	push   0x1000
c001c8fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c900:	50                   	push   eax
c001c901:	56                   	push   esi
c001c902:	e8 3d 3e fe ff       	call   c0000744 <memcpy>
c001c907:	e8 6d 14 00 00       	call   c001dd79 <unlockScheduler()>
c001c90c:	83 c4 10             	add    esp,0x10
c001c90f:	e9 ea fe ff ff       	jmp    c001c7fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c914:	89 fb                	mov    ebx,edi
c001c916:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c91e:	0f 86 9e 00 00 00    	jbe    c001c9c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c924:	e8 4e 14 00 00       	call   c001dd77 <lockScheduler()>
c001c929:	51                   	push   ecx
c001c92a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c931:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c937:	6a 00                	push   0x0
c001c939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c93e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c941:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c947:	e8 86 58 ff ff       	call   c00121d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c94c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c950:	c1 e7 0c             	shl    edi,0xc
c001c953:	01 df                	add    edi,ebx
c001c955:	83 c4 10             	add    esp,0x10
c001c958:	39 fb                	cmp    ebx,edi
c001c95a:	74 61                	je     c001c9bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c95c:	e8 7f 35 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c961:	6a 07                	push   0x7
c001c963:	89 c5                	mov    ebp,eax
c001c965:	56                   	push   esi
c001c966:	50                   	push   eax
c001c967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c96c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c975:	e8 ee 59 ff ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c97a:	58                   	pop    eax
c001c97b:	5a                   	pop    edx
c001c97c:	68 07 0c 00 00       	push   0xc07
c001c981:	53                   	push   ebx
c001c982:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c988:	55                   	push   ebp
c001c989:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c990:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c996:	6a 00                	push   0x0
c001c998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c99d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a0:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c9a6:	e8 77 5d ff ff       	call   c0012722 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9ab:	83 c4 1c             	add    esp,0x1c
c001c9ae:	68 00 10 00 00       	push   0x1000
c001c9b3:	6a 00                	push   0x0
c001c9b5:	56                   	push   esi
c001c9b6:	e8 bd 3d fe ff       	call   c0000778 <memset>
c001c9bb:	eb 98                	jmp    c001c955 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9bd:	e8 b7 13 00 00       	call   c001dd79 <unlockScheduler()>
c001c9c2:	83 ec 0c             	sub    esp,0xc
c001c9c5:	56                   	push   esi
c001c9c6:	e8 36 56 ff ff       	call   c0012001 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	b0 01                	mov    al,0x1
c001c9d0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9d6:	5b                   	pop    ebx
c001c9d7:	5e                   	pop    esi
c001c9d8:	5f                   	pop    edi
c001c9d9:	5d                   	pop    ebp
c001c9da:	c3                   	ret    

c001c9db <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9db:	55                   	push   ebp
c001c9dc:	57                   	push   edi
c001c9dd:	56                   	push   esi
c001c9de:	53                   	push   ebx
c001c9df:	83 ec 48             	sub    esp,0x48
c001c9e2:	68 14 01 00 00       	push   0x114
c001c9e7:	e8 57 2e ff ff       	call   c000f843 <malloc>
c001c9ec:	83 c4 0c             	add    esp,0xc
c001c9ef:	89 c6                	mov    esi,eax
c001c9f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c9f9:	50                   	push   eax
c001c9fa:	e8 31 6a ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001c9ff:	58                   	pop    eax
c001ca00:	5a                   	pop    edx
c001ca01:	6a 01                	push   0x1
c001ca03:	56                   	push   esi
c001ca04:	e8 8b 6a ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001ca09:	83 c4 10             	add    esp,0x10
c001ca0c:	85 c0                	test   eax,eax
c001ca0e:	0f 85 47 01 00 00    	jne    c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca14:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	6a 34                	push   0x34
c001ca21:	e8 1d 2e ff ff       	call   c000f843 <malloc>
c001ca26:	89 c3                	mov    ebx,eax
c001ca28:	58                   	pop    eax
c001ca29:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca2b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca2f:	57                   	push   edi
c001ca30:	53                   	push   ebx
c001ca31:	6a 00                	push   0x0
c001ca33:	6a 34                	push   0x34
c001ca35:	56                   	push   esi
c001ca36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca39:	83 c4 20             	add    esp,0x20
c001ca3c:	85 c0                	test   eax,eax
c001ca3e:	0f 85 17 01 00 00    	jne    c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca44:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca4a:	0f 85 0b 01 00 00    	jne    c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca53:	85 c0                	test   eax,eax
c001ca55:	0f 84 00 01 00 00    	je     c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca5b:	31 d2                	xor    edx,edx
c001ca5d:	55                   	push   ebp
c001ca5e:	52                   	push   edx
c001ca5f:	50                   	push   eax
c001ca60:	56                   	push   esi
c001ca61:	e8 ec 6a ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001ca66:	83 c4 10             	add    esp,0x10
c001ca69:	85 c0                	test   eax,eax
c001ca6b:	0f 85 ea 00 00 00    	jne    c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca71:	83 ec 0c             	sub    esp,0xc
c001ca74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca77:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca7f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca83:	0f af c2             	imul   eax,edx
c001ca86:	50                   	push   eax
c001ca87:	e8 b7 2d ff ff       	call   c000f843 <malloc>
c001ca8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca92:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca99:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca9d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caa1:	0f af c2             	imul   eax,edx
c001caa4:	99                   	cdq    
c001caa5:	52                   	push   edx
c001caa6:	50                   	push   eax
c001caa7:	56                   	push   esi
c001caa8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001caae:	83 c4 20             	add    esp,0x20
c001cab1:	85 c0                	test   eax,eax
c001cab3:	0f 84 a2 00 00 00    	je     c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cab9:	31 d2                	xor    edx,edx
c001cabb:	51                   	push   ecx
c001cabc:	52                   	push   edx
c001cabd:	50                   	push   eax
c001cabe:	56                   	push   esi
c001cabf:	e8 8e 6a ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	85 c0                	test   eax,eax
c001cac9:	0f 85 8c 00 00 00    	jne    c001cb5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cacf:	83 ec 0c             	sub    esp,0xc
c001cad2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cad6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cada:	31 ed                	xor    ebp,ebp
c001cadc:	0f af c2             	imul   eax,edx
c001cadf:	50                   	push   eax
c001cae0:	e8 5e 2d ff ff       	call   c000f843 <malloc>
c001cae5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cae7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001caf6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cafa:	0f af c2             	imul   eax,edx
c001cafd:	99                   	cdq    
c001cafe:	52                   	push   edx
c001caff:	50                   	push   eax
c001cb00:	56                   	push   esi
c001cb01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb04:	83 c4 20             	add    esp,0x20
c001cb07:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb0f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb13:	0f 86 80 00 00 00    	jbe    c001cb99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb19:	0f b7 fd             	movzx  edi,bp
c001cb1c:	c1 e7 05             	shl    edi,0x5
c001cb1f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb23:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb26:	75 6b                	jne    c001cb93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb28:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb2f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb36:	52                   	push   edx
c001cb37:	31 d2                	xor    edx,edx
c001cb39:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb3c:	52                   	push   edx
c001cb3d:	50                   	push   eax
c001cb3e:	56                   	push   esi
c001cb3f:	e8 0e 6a ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	85 c0                	test   eax,eax
c001cb49:	74 17                	je     c001cb62 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb4b:	83 ec 0c             	sub    esp,0xc
c001cb4e:	68 6a bf 02 c0       	push   0xc002bf6a
c001cb53:	e8 80 63 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	31 c0                	xor    eax,eax
c001cb5d:	e9 87 00 00 00       	jmp    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb68:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb6b:	50                   	push   eax
c001cb6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb74:	56                   	push   esi
c001cb75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb79:	e8 cb fb ff ff       	call   c001c749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb82:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb86:	83 c4 20             	add    esp,0x20
c001cb89:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb8d:	73 04                	jae    c001cb93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb93:	45                   	inc    ebp
c001cb94:	e9 76 ff ff ff       	jmp    c001cb0f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb99:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cba5:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001cbab:	83 ec 0c             	sub    esp,0xc
c001cbae:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001cbb4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbb9:	05 00 10 00 00       	add    eax,0x1000
c001cbbe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc5:	e8 89 2c ff ff       	call   c000f853 <free>
c001cbca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbcd:	e8 81 2c ff ff       	call   c000f853 <free>
c001cbd2:	58                   	pop    eax
c001cbd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbd7:	e8 77 2c ff ff       	call   c000f853 <free>
c001cbdc:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbdf:	e8 0e 69 ff ff       	call   c00134f2 <File::close()>
c001cbe4:	83 c4 10             	add    esp,0x10
c001cbe7:	b0 01                	mov    al,0x1
c001cbe9:	83 c4 3c             	add    esp,0x3c
c001cbec:	5b                   	pop    ebx
c001cbed:	5e                   	pop    esi
c001cbee:	5f                   	pop    edi
c001cbef:	5d                   	pop    ebp
c001cbf0:	c3                   	ret    

c001cbf1 <Thr::runtimeReferenceHelper()>:
c001cbf1:	83 ec 18             	sub    esp,0x18
c001cbf4:	68 72 bf 02 c0       	push   0xc002bf72
c001cbf9:	e8 da 62 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001cbfe:	fa                   	cli    
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	eb fe                	jmp    c001cc02 <Thr::runtimeReferenceHelper()+0x11>

c001cc04 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc04:	57                   	push   edi
c001cc05:	56                   	push   esi
c001cc06:	53                   	push   ebx
c001cc07:	31 db                	xor    ebx,ebx
c001cc09:	39 1d a0 18 03 c0    	cmp    DWORD PTR ds:0xc00318a0,ebx
c001cc0f:	7e 3c                	jle    c001cc4d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc11:	8b 34 9d 20 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce7e0]
c001cc18:	31 ff                	xor    edi,edi
c001cc1a:	39 3c 9d 20 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce8e0],edi
c001cc21:	7e 27                	jle    c001cc4a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc23:	50                   	push   eax
c001cc24:	50                   	push   eax
c001cc25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc29:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc2b:	03 04 9d a0 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce860]
c001cc32:	50                   	push   eax
c001cc33:	e8 88 3c fe ff       	call   c00008c0 <strcmp>
c001cc38:	83 c4 10             	add    esp,0x10
c001cc3b:	85 c0                	test   eax,eax
c001cc3d:	75 05                	jne    c001cc44 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc3f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc42:	eb 0b                	jmp    c001cc4f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc44:	83 c6 10             	add    esi,0x10
c001cc47:	47                   	inc    edi
c001cc48:	eb d0                	jmp    c001cc1a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc4a:	43                   	inc    ebx
c001cc4b:	eb bc                	jmp    c001cc09 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc4d:	31 c0                	xor    eax,eax
c001cc4f:	5b                   	pop    ebx
c001cc50:	5e                   	pop    esi
c001cc51:	5f                   	pop    edi
c001cc52:	c3                   	ret    

c001cc53 <Thr::loadKernelSymbolTable(char const*)>:
c001cc53:	55                   	push   ebp
c001cc54:	57                   	push   edi
c001cc55:	56                   	push   esi
c001cc56:	53                   	push   ebx
c001cc57:	83 ec 68             	sub    esp,0x68
c001cc5a:	8b 35 f4 18 03 c0    	mov    esi,DWORD PTR ds:0xc00318f4
c001cc60:	68 14 01 00 00       	push   0x114
c001cc65:	e8 d9 2b ff ff       	call   c000f843 <malloc>
c001cc6a:	83 c4 0c             	add    esp,0xc
c001cc6d:	89 c3                	mov    ebx,eax
c001cc6f:	56                   	push   esi
c001cc70:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc74:	50                   	push   eax
c001cc75:	e8 b6 67 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001cc7a:	5e                   	pop    esi
c001cc7b:	5f                   	pop    edi
c001cc7c:	6a 01                	push   0x1
c001cc7e:	53                   	push   ebx
c001cc7f:	e8 10 68 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	85 c0                	test   eax,eax
c001cc89:	74 0a                	je     c001cc95 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc8b:	83 ec 0c             	sub    esp,0xc
c001cc8e:	68 94 bf 02 c0       	push   0xc002bf94
c001cc93:	eb 34                	jmp    c001ccc9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc95:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc9d:	83 ec 0c             	sub    esp,0xc
c001cca0:	6a 34                	push   0x34
c001cca2:	e8 9c 2b ff ff       	call   c000f843 <malloc>
c001cca7:	59                   	pop    ecx
c001cca8:	89 c7                	mov    edi,eax
c001ccaa:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccb0:	56                   	push   esi
c001ccb1:	57                   	push   edi
c001ccb2:	6a 00                	push   0x0
c001ccb4:	6a 34                	push   0x34
c001ccb6:	53                   	push   ebx
c001ccb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccba:	83 c4 20             	add    esp,0x20
c001ccbd:	85 c0                	test   eax,eax
c001ccbf:	74 17                	je     c001ccd8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	68 ab bf 02 c0       	push   0xc002bfab
c001ccc9:	e8 af d8 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001ccce:	83 c4 10             	add    esp,0x10
c001ccd1:	31 c0                	xor    eax,eax
c001ccd3:	e9 31 02 00 00       	jmp    c001cf09 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ccd8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccde:	75 e1                	jne    c001ccc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cce0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cce3:	85 c0                	test   eax,eax
c001cce5:	74 da                	je     c001ccc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cce7:	52                   	push   edx
c001cce8:	31 d2                	xor    edx,edx
c001ccea:	52                   	push   edx
c001cceb:	50                   	push   eax
c001ccec:	53                   	push   ebx
c001cced:	e8 60 68 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	85 c0                	test   eax,eax
c001ccf7:	75 c8                	jne    c001ccc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccf9:	83 ec 0c             	sub    esp,0xc
c001ccfc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd04:	31 ed                	xor    ebp,ebp
c001cd06:	0f af c2             	imul   eax,edx
c001cd09:	50                   	push   eax
c001cd0a:	e8 34 2b ff ff       	call   c000f843 <malloc>
c001cd0f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd15:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd24:	0f af c2             	imul   eax,edx
c001cd27:	99                   	cdq    
c001cd28:	52                   	push   edx
c001cd29:	50                   	push   eax
c001cd2a:	53                   	push   ebx
c001cd2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd2e:	83 c4 20             	add    esp,0x20
c001cd31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd39:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd51:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd55:	0f 86 aa 00 00 00    	jbe    c001ce05 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd5b:	0f b7 f5             	movzx  esi,bp
c001cd5e:	6b f6 28             	imul   esi,esi,0x28
c001cd61:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd65:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd6c:	50                   	push   eax
c001cd6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd71:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd75:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd77:	6b c0 28             	imul   eax,eax,0x28
c001cd7a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd7e:	89 d0                	mov    eax,edx
c001cd80:	31 d2                	xor    edx,edx
c001cd82:	52                   	push   edx
c001cd83:	50                   	push   eax
c001cd84:	53                   	push   ebx
c001cd85:	e8 c8 67 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001cd8a:	83 c4 0c             	add    esp,0xc
c001cd8d:	6a 20                	push   0x20
c001cd8f:	6a 00                	push   0x0
c001cd91:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd95:	52                   	push   edx
c001cd96:	e8 dd 39 fe ff       	call   c0000778 <memset>
c001cd9b:	58                   	pop    eax
c001cd9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd9e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cda2:	51                   	push   ecx
c001cda3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cda7:	52                   	push   edx
c001cda8:	6a 00                	push   0x0
c001cdaa:	6a 1f                	push   0x1f
c001cdac:	53                   	push   ebx
c001cdad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdb0:	83 c4 18             	add    esp,0x18
c001cdb3:	68 c2 bf 02 c0       	push   0xc002bfc2
c001cdb8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdbc:	52                   	push   edx
c001cdbd:	e8 fe 3a fe ff       	call   c00008c0 <strcmp>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	85 c0                	test   eax,eax
c001cdc7:	75 0f                	jne    c001cdd8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdd8:	50                   	push   eax
c001cdd9:	50                   	push   eax
c001cdda:	68 ca bf 02 c0       	push   0xc002bfca
c001cddf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cde3:	50                   	push   eax
c001cde4:	e8 d7 3a fe ff       	call   c00008c0 <strcmp>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	85 c0                	test   eax,eax
c001cdee:	75 0f                	jne    c001cdff <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdf0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cdf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdff:	45                   	inc    ebp
c001ce00:	e9 4c ff ff ff       	jmp    c001cd51 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce0a:	75 10                	jne    c001ce1c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce0c:	83 ec 0c             	sub    esp,0xc
c001ce0f:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce14:	e8 64 d7 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce21:	75 10                	jne    c001ce33 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce23:	83 ec 0c             	sub    esp,0xc
c001ce26:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce2b:	e8 4d d7 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	31 d2                	xor    edx,edx
c001ce35:	50                   	push   eax
c001ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3a:	52                   	push   edx
c001ce3b:	50                   	push   eax
c001ce3c:	53                   	push   ebx
c001ce3d:	e8 10 67 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001ce42:	5a                   	pop    edx
c001ce43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce47:	e8 f7 29 ff ff       	call   c000f843 <malloc>
c001ce4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce54:	31 c9                	xor    ecx,ecx
c001ce56:	5e                   	pop    esi
c001ce57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce59:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce5d:	55                   	push   ebp
c001ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce62:	51                   	push   ecx
c001ce63:	52                   	push   edx
c001ce64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce68:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce6c:	53                   	push   ebx
c001ce6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce70:	83 c4 14             	add    esp,0x14
c001ce73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce77:	e8 c7 29 ff ff       	call   c000f843 <malloc>
c001ce7c:	89 c6                	mov    esi,eax
c001ce7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce83:	56                   	push   esi
c001ce84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce8c:	51                   	push   ecx
c001ce8d:	52                   	push   edx
c001ce8e:	53                   	push   ebx
c001ce8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce96:	8b 15 a0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318a0
c001ce9c:	83 c4 1c             	add    esp,0x1c
c001ce9f:	c1 e8 04             	shr    eax,0x4
c001cea2:	89 04 95 20 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce8e0],eax
c001cea9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cead:	31 d2                	xor    edx,edx
c001ceaf:	52                   	push   edx
c001ceb0:	50                   	push   eax
c001ceb1:	53                   	push   ebx
c001ceb2:	e8 9b 66 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001ceb7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ceb9:	31 d2                	xor    edx,edx
c001cebb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cebe:	56                   	push   esi
c001cebf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cec3:	52                   	push   edx
c001cec4:	50                   	push   eax
c001cec5:	53                   	push   ebx
c001cec6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cec9:	83 c4 14             	add    esp,0x14
c001cecc:	53                   	push   ebx
c001cecd:	e8 20 66 ff ff       	call   c00134f2 <File::close()>
c001ced2:	5d                   	pop    ebp
c001ced3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ced7:	e8 77 29 ff ff       	call   c000f853 <free>
c001cedc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cedf:	e8 6f 29 ff ff       	call   c000f853 <free>
c001cee4:	a1 a0 18 03 c0       	mov    eax,ds:0xc00318a0
c001cee9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ceed:	8d 50 01             	lea    edx,[eax+0x1]
c001cef0:	89 0c 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],ecx
c001cef7:	89 34 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],esi
c001cefe:	89 15 a0 18 03 c0    	mov    DWORD PTR ds:0xc00318a0,edx
c001cf04:	83 c4 10             	add    esp,0x10
c001cf07:	b0 01                	mov    al,0x1
c001cf09:	83 c4 5c             	add    esp,0x5c
c001cf0c:	5b                   	pop    ebx
c001cf0d:	5e                   	pop    esi
c001cf0e:	5f                   	pop    edi
c001cf0f:	5d                   	pop    ebp
c001cf10:	c3                   	ret    

c001cf11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf11:	55                   	push   ebp
c001cf12:	57                   	push   edi
c001cf13:	56                   	push   esi
c001cf14:	53                   	push   ebx
c001cf15:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf1b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf22:	8b 1d f4 18 03 c0    	mov    ebx,DWORD PTR ds:0xc00318f4
c001cf28:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf2c:	68 14 01 00 00       	push   0x114
c001cf31:	e8 0d 29 ff ff       	call   c000f843 <malloc>
c001cf36:	83 c4 0c             	add    esp,0xc
c001cf39:	89 c5                	mov    ebp,eax
c001cf3b:	53                   	push   ebx
c001cf3c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf43:	50                   	push   eax
c001cf44:	e8 e7 64 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001cf49:	5e                   	pop    esi
c001cf4a:	5f                   	pop    edi
c001cf4b:	6a 01                	push   0x1
c001cf4d:	55                   	push   ebp
c001cf4e:	e8 41 65 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	85 c0                	test   eax,eax
c001cf58:	0f 85 8d 06 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf5e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf66:	83 ec 0c             	sub    esp,0xc
c001cf69:	6a 34                	push   0x34
c001cf6b:	e8 d3 28 ff ff       	call   c000f843 <malloc>
c001cf70:	5b                   	pop    ebx
c001cf71:	89 c7                	mov    edi,eax
c001cf73:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf7a:	53                   	push   ebx
c001cf7b:	57                   	push   edi
c001cf7c:	6a 00                	push   0x0
c001cf7e:	6a 34                	push   0x34
c001cf80:	55                   	push   ebp
c001cf81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf84:	83 c4 20             	add    esp,0x20
c001cf87:	85 c0                	test   eax,eax
c001cf89:	0f 85 5c 06 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf8f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf95:	0f 85 50 06 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf9b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf9e:	85 c0                	test   eax,eax
c001cfa0:	0f 84 45 06 00 00    	je     c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfa6:	31 d2                	xor    edx,edx
c001cfa8:	51                   	push   ecx
c001cfa9:	52                   	push   edx
c001cfaa:	50                   	push   eax
c001cfab:	55                   	push   ebp
c001cfac:	e8 a1 65 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001cfb1:	83 c4 10             	add    esp,0x10
c001cfb4:	85 c0                	test   eax,eax
c001cfb6:	0f 85 2f 06 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfc2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfce:	0f af c2             	imul   eax,edx
c001cfd1:	50                   	push   eax
c001cfd2:	e8 6c 28 ff ff       	call   c000f843 <malloc>
c001cfd7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfe5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfe9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfed:	0f af c2             	imul   eax,edx
c001cff0:	99                   	cdq    
c001cff1:	52                   	push   edx
c001cff2:	50                   	push   eax
c001cff3:	55                   	push   ebp
c001cff4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cff7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cffa:	83 c4 20             	add    esp,0x20
c001cffd:	85 c0                	test   eax,eax
c001cfff:	0f 84 e6 05 00 00    	je     c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d005:	52                   	push   edx
c001d006:	31 d2                	xor    edx,edx
c001d008:	52                   	push   edx
c001d009:	50                   	push   eax
c001d00a:	55                   	push   ebp
c001d00b:	e8 42 65 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d010:	83 c4 10             	add    esp,0x10
c001d013:	85 c0                	test   eax,eax
c001d015:	0f 85 d0 05 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d01b:	83 ec 0c             	sub    esp,0xc
c001d01e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d022:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d026:	31 f6                	xor    esi,esi
c001d028:	0f af c2             	imul   eax,edx
c001d02b:	50                   	push   eax
c001d02c:	e8 12 28 ff ff       	call   c000f843 <malloc>
c001d031:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d034:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d038:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d03b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d03f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d043:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d047:	0f af c2             	imul   eax,edx
c001d04a:	99                   	cdq    
c001d04b:	52                   	push   edx
c001d04c:	50                   	push   eax
c001d04d:	55                   	push   ebp
c001d04e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d051:	83 c4 20             	add    esp,0x20
c001d054:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d058:	0f 86 8a 00 00 00    	jbe    c001d0e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d05e:	0f b7 de             	movzx  ebx,si
c001d061:	c1 e3 05             	shl    ebx,0x5
c001d064:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d068:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d06b:	75 75                	jne    c001d0e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d06d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d070:	31 d2                	xor    edx,edx
c001d072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d076:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d079:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d07d:	50                   	push   eax
c001d07e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d081:	52                   	push   edx
c001d082:	50                   	push   eax
c001d083:	55                   	push   ebp
c001d084:	e8 c9 64 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	85 c0                	test   eax,eax
c001d08e:	0f 85 57 05 00 00    	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d094:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d09b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d09e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0a2:	31 d2                	xor    edx,edx
c001d0a4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0b6:	50                   	push   eax
c001d0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0bf:	52                   	push   edx
c001d0c0:	50                   	push   eax
c001d0c1:	55                   	push   ebp
c001d0c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0c5:	83 c4 1c             	add    esp,0x1c
c001d0c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0cb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0ce:	50                   	push   eax
c001d0cf:	6a 00                	push   0x0
c001d0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0d9:	50                   	push   eax
c001d0da:	e8 99 36 fe ff       	call   c0000778 <memset>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	46                   	inc    esi
c001d0e3:	e9 6c ff ff ff       	jmp    c001d054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0e8:	53                   	push   ebx
c001d0e9:	31 db                	xor    ebx,ebx
c001d0eb:	68 00 01 00 00       	push   0x100
c001d0f0:	6a 00                	push   0x0
c001d0f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0f6:	50                   	push   eax
c001d0f7:	e8 7c 36 fe ff       	call   c0000778 <memset>
c001d0fc:	83 c4 0c             	add    esp,0xc
c001d0ff:	68 00 01 00 00       	push   0x100
c001d104:	6a 00                	push   0x0
c001d106:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d10d:	50                   	push   eax
c001d10e:	e8 65 36 fe ff       	call   c0000778 <memset>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d11e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d126:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d12e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d136:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d13e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d142:	0f 86 30 01 00 00    	jbe    c001d278 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d148:	0f b7 f3             	movzx  esi,bx
c001d14b:	6b f6 28             	imul   esi,esi,0x28
c001d14e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d152:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d159:	52                   	push   edx
c001d15a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d15e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d162:	8b 06                	mov    eax,DWORD PTR [esi]
c001d164:	6b d2 28             	imul   edx,edx,0x28
c001d167:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d16b:	31 d2                	xor    edx,edx
c001d16d:	52                   	push   edx
c001d16e:	50                   	push   eax
c001d16f:	55                   	push   ebp
c001d170:	e8 dd 63 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d175:	83 c4 0c             	add    esp,0xc
c001d178:	6a 20                	push   0x20
c001d17a:	6a 00                	push   0x0
c001d17c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d183:	51                   	push   ecx
c001d184:	e8 ef 35 fe ff       	call   c0000778 <memset>
c001d189:	59                   	pop    ecx
c001d18a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d18d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d191:	52                   	push   edx
c001d192:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d199:	51                   	push   ecx
c001d19a:	6a 00                	push   0x0
c001d19c:	6a 1f                	push   0x1f
c001d19e:	55                   	push   ebp
c001d19f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1a2:	83 c4 1c             	add    esp,0x1c
c001d1a5:	6a 09                	push   0x9
c001d1a7:	68 ec bf 02 c0       	push   0xc002bfec
c001d1ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1b3:	51                   	push   ecx
c001d1b4:	e8 87 34 fe ff       	call   c0000640 <memcmp>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	85 c0                	test   eax,eax
c001d1be:	75 21                	jne    c001d1e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1c8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1d3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1da:	89 d0                	mov    eax,edx
c001d1dc:	40                   	inc    eax
c001d1dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1e1:	50                   	push   eax
c001d1e2:	6a 09                	push   0x9
c001d1e4:	68 f6 bf 02 c0       	push   0xc002bff6
c001d1e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1f0:	50                   	push   eax
c001d1f1:	e8 4a 34 fe ff       	call   c0000640 <memcmp>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	85 c0                	test   eax,eax
c001d1fb:	75 21                	jne    c001d21e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d1fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d205:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d209:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d20d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d210:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d217:	89 d0                	mov    eax,edx
c001d219:	40                   	inc    eax
c001d21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d21e:	50                   	push   eax
c001d21f:	50                   	push   eax
c001d220:	68 c2 bf 02 c0       	push   0xc002bfc2
c001d225:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d22c:	50                   	push   eax
c001d22d:	e8 8e 36 fe ff       	call   c00008c0 <strcmp>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	85 c0                	test   eax,eax
c001d237:	75 0f                	jne    c001d248 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d239:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d23c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d244:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d248:	50                   	push   eax
c001d249:	50                   	push   eax
c001d24a:	68 ca bf 02 c0       	push   0xc002bfca
c001d24f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d256:	50                   	push   eax
c001d257:	e8 64 36 fe ff       	call   c00008c0 <strcmp>
c001d25c:	83 c4 10             	add    esp,0x10
c001d25f:	85 c0                	test   eax,eax
c001d261:	75 0f                	jne    c001d272 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d263:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d266:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d26a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d272:	43                   	inc    ebx
c001d273:	e9 c6 fe ff ff       	jmp    c001d13e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d278:	31 d2                	xor    edx,edx
c001d27a:	50                   	push   eax
c001d27b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d27f:	52                   	push   edx
c001d280:	50                   	push   eax
c001d281:	55                   	push   ebp
c001d282:	e8 cb 62 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d287:	58                   	pop    eax
c001d288:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d28c:	e8 b2 25 ff ff       	call   c000f843 <malloc>
c001d291:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d294:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d298:	31 d2                	xor    edx,edx
c001d29a:	58                   	pop    eax
c001d29b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d29f:	53                   	push   ebx
c001d2a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2a8:	52                   	push   edx
c001d2a9:	50                   	push   eax
c001d2aa:	55                   	push   ebp
c001d2ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2ae:	83 c4 14             	add    esp,0x14
c001d2b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2b5:	e8 89 25 ff ff       	call   c000f843 <malloc>
c001d2ba:	31 d2                	xor    edx,edx
c001d2bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2c0:	83 c4 0c             	add    esp,0xc
c001d2c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2c7:	52                   	push   edx
c001d2c8:	50                   	push   eax
c001d2c9:	55                   	push   ebp
c001d2ca:	e8 83 62 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d2cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2d2:	31 d2                	xor    edx,edx
c001d2d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2df:	52                   	push   edx
c001d2e0:	50                   	push   eax
c001d2e1:	55                   	push   ebp
c001d2e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2e5:	83 c4 20             	add    esp,0x20
c001d2e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2f4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d2f8:	0f 84 f1 02 00 00    	je     c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d2fe:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d305:	31 d2                	xor    edx,edx
c001d307:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d30b:	c1 e8 03             	shr    eax,0x3
c001d30e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d312:	51                   	push   ecx
c001d313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d317:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d31b:	52                   	push   edx
c001d31c:	50                   	push   eax
c001d31d:	55                   	push   ebp
c001d31e:	e8 2f 62 ff ff       	call   c0013552 <File::seek(unsigned long long)>
c001d323:	5b                   	pop    ebx
c001d324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d328:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d32f:	e8 0f 25 ff ff       	call   c000f843 <malloc>
c001d334:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d337:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d33b:	31 d2                	xor    edx,edx
c001d33d:	5e                   	pop    esi
c001d33e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d342:	50                   	push   eax
c001d343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d347:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d34b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d352:	52                   	push   edx
c001d353:	50                   	push   eax
c001d354:	55                   	push   ebp
c001d355:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d358:	83 c4 20             	add    esp,0x20
c001d35b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d363:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d367:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d36b:	0f 8d 62 02 00 00    	jge    c001d5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d371:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d379:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d37e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d381:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d385:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d389:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d38d:	89 d8                	mov    eax,ebx
c001d38f:	c1 e8 08             	shr    eax,0x8
c001d392:	89 c6                	mov    esi,eax
c001d394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d398:	c1 e6 04             	shl    esi,0x4
c001d39b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d39f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3a2:	85 d2                	test   edx,edx
c001d3a4:	0f 85 bf 00 00 00    	jne    c001d469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3aa:	83 ec 0c             	sub    esp,0xc
c001d3ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3b1:	03 06                	add    eax,DWORD PTR [esi]
c001d3b3:	50                   	push   eax
c001d3b4:	e8 4b f8 ff ff       	call   c001cc04 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	89 c2                	mov    edx,eax
c001d3be:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3c3:	85 c0                	test   eax,eax
c001d3c5:	0f 85 9e 00 00 00    	jne    c001d469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3cb:	83 ec 0c             	sub    esp,0xc
c001d3ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3d2:	03 06                	add    eax,DWORD PTR [esi]
c001d3d4:	50                   	push   eax
c001d3d5:	e8 1b 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d3da:	83 c4 10             	add    esp,0x10
c001d3dd:	89 c2                	mov    edx,eax
c001d3df:	85 c0                	test   eax,eax
c001d3e1:	0f 85 82 00 00 00    	jne    c001d469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3eb:	50                   	push   eax
c001d3ec:	50                   	push   eax
c001d3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f1:	03 06                	add    eax,DWORD PTR [esi]
c001d3f3:	50                   	push   eax
c001d3f4:	68 00 c0 02 c0       	push   0xc002c000
c001d3f9:	e8 da 5a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001d3fe:	58                   	pop    eax
c001d3ff:	5a                   	pop    edx
c001d400:	68 1a c0 02 c0       	push   0xc002c01a
c001d405:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d40c:	50                   	push   eax
c001d40d:	e8 22 34 fe ff       	call   c0000834 <strcpy>
c001d412:	59                   	pop    ecx
c001d413:	58                   	pop    eax
c001d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d418:	03 06                	add    eax,DWORD PTR [esi]
c001d41a:	50                   	push   eax
c001d41b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d422:	50                   	push   eax
c001d423:	e8 4c 35 fe ff       	call   c0000974 <strcat>
c001d428:	58                   	pop    eax
c001d429:	5a                   	pop    edx
c001d42a:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d42f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d436:	50                   	push   eax
c001d437:	e8 38 35 fe ff       	call   c0000974 <strcat>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d444:	0f 84 43 01 00 00    	je     c001d58d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d44a:	83 ec 0c             	sub    esp,0xc
c001d44d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d454:	50                   	push   eax
c001d455:	e8 23 d1 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d461:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d465:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d469:	80 fb 01             	cmp    bl,0x1
c001d46c:	75 7d                	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d46e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d475:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d479:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d47d:	01 ce                	add    esi,ecx
c001d47f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d485:	0f 94 c0             	sete   al
c001d488:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d48e:	0f 94 c3             	sete   bl
c001d491:	09 c3                	or     ebx,eax
c001d493:	8b 06                	mov    eax,DWORD PTR [esi]
c001d495:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d49a:	74 36                	je     c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d49c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d49f:	84 db                	test   bl,bl
c001d4a1:	75 0a                	jne    c001d4ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d4a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4a7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4ab:	76 37                	jbe    c001d4e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4ad:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4b1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4b6:	0f 84 d1 00 00 00    	je     c001d58d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	68 31 c0 02 c0       	push   0xc002c031
c001d4c4:	e8 b4 d0 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4d0:	eb 12                	jmp    c001d4e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4d2:	01 c1                	add    ecx,eax
c001d4d4:	84 db                	test   bl,bl
c001d4d6:	75 0c                	jne    c001d4e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4dc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4e0:	77 02                	ja     c001d4e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4e2:	01 d1                	add    ecx,edx
c001d4e4:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4e6:	e9 df 00 00 00       	jmp    c001d5ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4eb:	80 fb 02             	cmp    bl,0x2
c001d4ee:	75 71                	jne    c001d561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d4f0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d4f7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d4fb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d4ff:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d505:	74 15                	je     c001d51c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d507:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d50d:	74 0d                	je     c001d51c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d50f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d513:	83 e8 04             	sub    eax,0x4
c001d516:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d51a:	76 1f                	jbe    c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d51c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d520:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d525:	74 66                	je     c001d58d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d527:	83 ec 0c             	sub    esp,0xc
c001d52a:	68 4d c0 02 c0       	push   0xc002c04d
c001d52f:	e8 49 d0 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d534:	83 c4 10             	add    esp,0x10
c001d537:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d53b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d53d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d542:	74 13                	je     c001d557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d544:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d548:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d54f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d553:	01 c8                	add    eax,ecx
c001d555:	eb 04                	jmp    c001d55b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d557:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d55b:	01 c2                	add    edx,eax
c001d55d:	89 16                	mov    DWORD PTR [esi],edx
c001d55f:	eb 69                	jmp    c001d5ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d561:	0f b6 db             	movzx  ebx,bl
c001d564:	50                   	push   eax
c001d565:	50                   	push   eax
c001d566:	53                   	push   ebx
c001d567:	68 69 c0 02 c0       	push   0xc002c069
c001d56c:	e8 67 59 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d579:	74 12                	je     c001d58d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d57b:	83 ec 0c             	sub    esp,0xc
c001d57e:	68 74 c0 02 c0       	push   0xc002c074
c001d583:	e8 f5 cf ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d588:	83 c4 10             	add    esp,0x10
c001d58b:	eb 3d                	jmp    c001d5ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d58d:	83 ec 0c             	sub    esp,0xc
c001d590:	55                   	push   ebp
c001d591:	e8 5c 5f ff ff       	call   c00134f2 <File::close()>
c001d596:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d599:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d59c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d59f:	59                   	pop    ecx
c001d5a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5a4:	e8 aa 22 ff ff       	call   c000f853 <free>
c001d5a9:	5b                   	pop    ebx
c001d5aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5ae:	e8 a0 22 ff ff       	call   c000f853 <free>
c001d5b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5b6:	e8 98 22 ff ff       	call   c000f853 <free>
c001d5bb:	5e                   	pop    esi
c001d5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c0:	e8 8e 22 ff ff       	call   c000f853 <free>
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	eb 21                	jmp    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d5ca:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5ce:	e9 90 fd ff ff       	jmp    c001d363 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5d3:	83 ec 0c             	sub    esp,0xc
c001d5d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5da:	e8 74 22 ff ff       	call   c000f853 <free>
c001d5df:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	e9 05 fd ff ff       	jmp    c001d2f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d5eb:	31 c0                	xor    eax,eax
c001d5ed:	eb 33                	jmp    c001d622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d5ef:	83 ec 0c             	sub    esp,0xc
c001d5f2:	55                   	push   ebp
c001d5f3:	e8 fa 5e ff ff       	call   c00134f2 <File::close()>
c001d5f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d601:	58                   	pop    eax
c001d602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d606:	e8 48 22 ff ff       	call   c000f853 <free>
c001d60b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d60e:	e8 40 22 ff ff       	call   c000f853 <free>
c001d613:	5a                   	pop    edx
c001d614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d618:	e8 36 22 ff ff       	call   c000f853 <free>
c001d61d:	83 c4 10             	add    esp,0x10
c001d620:	b0 01                	mov    al,0x1
c001d622:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d628:	5b                   	pop    ebx
c001d629:	5e                   	pop    esi
c001d62a:	5f                   	pop    edi
c001d62b:	5d                   	pop    ebp
c001d62c:	c3                   	ret    

c001d62d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d62d:	56                   	push   esi
c001d62e:	31 d2                	xor    edx,edx
c001d630:	53                   	push   ebx
c001d631:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d637:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d63b:	39 d3                	cmp    ebx,edx
c001d63d:	7e 1b                	jle    c001d65a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d63f:	8b 04 95 20 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcece0]
c001d646:	39 c8                	cmp    eax,ecx
c001d648:	77 0d                	ja     c001d657 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d64a:	8b 34 95 20 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceee0]
c001d651:	01 c6                	add    esi,eax
c001d653:	39 ce                	cmp    esi,ecx
c001d655:	77 05                	ja     c001d65c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d657:	42                   	inc    edx
c001d658:	eb e1                	jmp    c001d63b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d65a:	31 c0                	xor    eax,eax
c001d65c:	5b                   	pop    ebx
c001d65d:	5e                   	pop    esi
c001d65e:	c3                   	ret    

c001d65f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d65f:	53                   	push   ebx
c001d660:	31 c0                	xor    eax,eax
c001d662:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d666:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d66c:	39 c3                	cmp    ebx,eax
c001d66e:	7e 22                	jle    c001d692 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d670:	8b 14 85 20 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcece0]
c001d677:	39 ca                	cmp    edx,ecx
c001d679:	77 14                	ja     c001d68f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d67b:	03 14 85 20 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceee0]
c001d682:	39 ca                	cmp    edx,ecx
c001d684:	76 09                	jbe    c001d68f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d686:	8b 04 85 20 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceae0]
c001d68d:	eb 05                	jmp    c001d694 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d68f:	40                   	inc    eax
c001d690:	eb da                	jmp    c001d66c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d692:	31 c0                	xor    eax,eax
c001d694:	5b                   	pop    ebx
c001d695:	c3                   	ret    

c001d696 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d696:	53                   	push   ebx
c001d697:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d69b:	53                   	push   ebx
c001d69c:	e8 8c ff ff ff       	call   c001d62d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6a1:	5a                   	pop    edx
c001d6a2:	31 d2                	xor    edx,edx
c001d6a4:	85 c0                	test   eax,eax
c001d6a6:	74 04                	je     c001d6ac <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6a8:	89 da                	mov    edx,ebx
c001d6aa:	29 c2                	sub    edx,eax
c001d6ac:	89 d0                	mov    eax,edx
c001d6ae:	5b                   	pop    ebx
c001d6af:	c3                   	ret    

c001d6b0 <Thr::loadDLL(char const*, bool)>:
c001d6b0:	55                   	push   ebp
c001d6b1:	57                   	push   edi
c001d6b2:	56                   	push   esi
c001d6b3:	53                   	push   ebx
c001d6b4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6c1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d6c8:	56                   	push   esi
c001d6c9:	68 8c c0 02 c0       	push   0xc002c08c
c001d6ce:	e8 05 58 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001d6d3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6da:	e8 64 21 ff ff       	call   c000f843 <malloc>
c001d6df:	83 c4 0c             	add    esp,0xc
c001d6e2:	89 c3                	mov    ebx,eax
c001d6e4:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001d6ea:	56                   	push   esi
c001d6eb:	50                   	push   eax
c001d6ec:	e8 3f 5d ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001d6f1:	83 c4 10             	add    esp,0x10
c001d6f4:	85 db                	test   ebx,ebx
c001d6f6:	75 3c                	jne    c001d734 <Thr::loadDLL(char const*, bool)+0x84>
c001d6f8:	89 e8                	mov    eax,ebp
c001d6fa:	84 c0                	test   al,al
c001d6fc:	0f 84 f0 01 00 00    	je     c001d8f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d702:	50                   	push   eax
c001d703:	50                   	push   eax
c001d704:	68 9d c0 02 c0       	push   0xc002c09d
c001d709:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d70d:	57                   	push   edi
c001d70e:	e8 21 31 fe ff       	call   c0000834 <strcpy>
c001d713:	58                   	pop    eax
c001d714:	5a                   	pop    edx
c001d715:	56                   	push   esi
c001d716:	57                   	push   edi
c001d717:	e8 58 32 fe ff       	call   c0000974 <strcat>
c001d71c:	59                   	pop    ecx
c001d71d:	58                   	pop    eax
c001d71e:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d723:	57                   	push   edi
c001d724:	e8 4b 32 fe ff       	call   c0000974 <strcat>
c001d729:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d72c:	e8 4c ce ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d731:	83 c4 10             	add    esp,0x10
c001d734:	50                   	push   eax
c001d735:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d739:	50                   	push   eax
c001d73a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d73e:	50                   	push   eax
c001d73f:	53                   	push   ebx
c001d740:	e8 fb 5f ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	85 db                	test   ebx,ebx
c001d74a:	74 0c                	je     c001d758 <Thr::loadDLL(char const*, bool)+0xa8>
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d751:	53                   	push   ebx
c001d752:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d75d:	75 0a                	jne    c001d769 <Thr::loadDLL(char const*, bool)+0xb9>
c001d75f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d763:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d767:	75 3c                	jne    c001d7a5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d769:	89 e8                	mov    eax,ebp
c001d76b:	84 c0                	test   al,al
c001d76d:	0f 84 67 01 00 00    	je     c001d8da <Thr::loadDLL(char const*, bool)+0x22a>
c001d773:	50                   	push   eax
c001d774:	50                   	push   eax
c001d775:	68 9d c0 02 c0       	push   0xc002c09d
c001d77a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d77e:	53                   	push   ebx
c001d77f:	e8 b0 30 fe ff       	call   c0000834 <strcpy>
c001d784:	58                   	pop    eax
c001d785:	5a                   	pop    edx
c001d786:	56                   	push   esi
c001d787:	53                   	push   ebx
c001d788:	e8 e7 31 fe ff       	call   c0000974 <strcat>
c001d78d:	59                   	pop    ecx
c001d78e:	5f                   	pop    edi
c001d78f:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d794:	53                   	push   ebx
c001d795:	e8 da 31 fe ff       	call   c0000974 <strcat>
c001d79a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d79d:	e8 db cd ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d7a2:	83 c4 10             	add    esp,0x10
c001d7a5:	e8 6c 46 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c001d7aa:	51                   	push   ecx
c001d7ab:	68 03 08 00 00       	push   0x803
c001d7b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7b4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7b8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7be:	83 d3 00             	adc    ebx,0x0
c001d7c1:	89 ca                	mov    edx,ecx
c001d7c3:	89 d1                	mov    ecx,edx
c001d7c5:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d7c9:	51                   	push   ecx
c001d7ca:	50                   	push   eax
c001d7cb:	e8 98 4c ff ff       	call   c0012468 <VAS::allocatePages(int, int)>
c001d7d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d7d4:	89 c3                	mov    ebx,eax
c001d7d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7da:	05 ff 0f 00 00       	add    eax,0xfff
c001d7df:	83 d2 00             	adc    edx,0x0
c001d7e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7e6:	c1 ea 0c             	shr    edx,0xc
c001d7e9:	52                   	push   edx
c001d7ea:	50                   	push   eax
c001d7eb:	53                   	push   ebx
c001d7ec:	68 b2 c0 02 c0       	push   0xc002c0b2
c001d7f1:	e8 e2 56 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001d7f6:	83 c4 14             	add    esp,0x14
c001d7f9:	56                   	push   esi
c001d7fa:	e8 95 2f fe ff       	call   c0000794 <strlen>
c001d7ff:	8b 3d 00 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031100
c001d805:	40                   	inc    eax
c001d806:	89 04 24             	mov    DWORD PTR [esp],eax
c001d809:	e8 35 20 ff ff       	call   c000f843 <malloc>
c001d80e:	89 04 bd 20 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceae0],eax
c001d815:	5f                   	pop    edi
c001d816:	58                   	pop    eax
c001d817:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d81c:	56                   	push   esi
c001d81d:	ff 34 85 20 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceae0]
c001d824:	e8 0b 30 fe ff       	call   c0000834 <strcpy>
c001d829:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d82e:	8d 50 01             	lea    edx,[eax+0x1]
c001d831:	89 1c 85 20 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcece0],ebx
c001d838:	89 15 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,edx
c001d83e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d842:	83 c4 0c             	add    esp,0xc
c001d845:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001d84c:	6a 01                	push   0x1
c001d84e:	53                   	push   ebx
c001d84f:	56                   	push   esi
c001d850:	e8 bc f6 ff ff       	call   c001cf11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	89 c7                	mov    edi,eax
c001d85a:	84 c0                	test   al,al
c001d85c:	0f 85 8c 00 00 00    	jne    c001d8ee <Thr::loadDLL(char const*, bool)+0x23e>
c001d862:	89 e8                	mov    eax,ebp
c001d864:	84 c0                	test   al,al
c001d866:	74 76                	je     c001d8de <Thr::loadDLL(char const*, bool)+0x22e>
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	68 d6 c0 02 c0       	push   0xc002c0d6
c001d870:	e8 08 cd ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	eb 64                	jmp    c001d8de <Thr::loadDLL(char const*, bool)+0x22e>
c001d87a:	e8 97 45 ff ff       	call   c0011e16 <Virt::getAKernelVAS()>
c001d87f:	89 f5                	mov    ebp,esi
c001d881:	c1 e5 0c             	shl    ebp,0xc
c001d884:	52                   	push   edx
c001d885:	01 dd                	add    ebp,ebx
c001d887:	52                   	push   edx
c001d888:	55                   	push   ebp
c001d889:	50                   	push   eax
c001d88a:	e8 53 47 ff ff       	call   c0011fe2 <VAS::getPageTableEntry(unsigned long)>
c001d88f:	83 c4 10             	add    esp,0x10
c001d892:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d895:	75 0c                	jne    c001d8a3 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d897:	83 ec 0c             	sub    esp,0xc
c001d89a:	55                   	push   ebp
c001d89b:	e8 b6 25 ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001d8a0:	83 c4 10             	add    esp,0x10
c001d8a3:	46                   	inc    esi
c001d8a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8ac:	05 ff 0f 00 00       	add    eax,0xfff
c001d8b1:	83 d2 00             	adc    edx,0x0
c001d8b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8b8:	c1 ea 0c             	shr    edx,0xc
c001d8bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8c3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8c7:	ba 00 00 00 00       	mov    edx,0x0
c001d8cc:	89 d0                	mov    eax,edx
c001d8ce:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8d2:	72 a6                	jb     c001d87a <Thr::loadDLL(char const*, bool)+0x1ca>
c001d8d4:	89 f8                	mov    eax,edi
c001d8d6:	84 c0                	test   al,al
c001d8d8:	75 18                	jne    c001d8f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d8da:	31 db                	xor    ebx,ebx
c001d8dc:	eb 14                	jmp    c001d8f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	68 f5 c0 02 c0       	push   0xc002c0f5
c001d8e6:	e8 92 cc ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d8eb:	83 c4 10             	add    esp,0x10
c001d8ee:	31 f6                	xor    esi,esi
c001d8f0:	eb b2                	jmp    c001d8a4 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d8f2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8f8:	89 d8                	mov    eax,ebx
c001d8fa:	5b                   	pop    ebx
c001d8fb:	5e                   	pop    esi
c001d8fc:	5f                   	pop    edi
c001d8fd:	5d                   	pop    ebp
c001d8fe:	c3                   	ret    

c001d8ff <Thr::executeDLL(unsigned long, void*)>:
c001d8ff:	56                   	push   esi
c001d900:	53                   	push   ebx
c001d901:	52                   	push   edx
c001d902:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d906:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d90a:	85 db                	test   ebx,ebx
c001d90c:	75 10                	jne    c001d91e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d90e:	83 ec 0c             	sub    esp,0xc
c001d911:	68 11 c1 02 c0       	push   0xc002c111
c001d916:	e8 62 cc ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001d91b:	83 c4 10             	add    esp,0x10
c001d91e:	50                   	push   eax
c001d91f:	50                   	push   eax
c001d920:	53                   	push   ebx
c001d921:	68 3b c1 02 c0       	push   0xc002c13b
c001d926:	e8 ad 55 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001d92b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d92f:	89 d8                	mov    eax,ebx
c001d931:	83 c4 14             	add    esp,0x14
c001d934:	5b                   	pop    ebx
c001d935:	5e                   	pop    esi
c001d936:	ff e0                	jmp    eax

c001d938 <changeTSS>:
c001d938:	83 ec 14             	sub    esp,0x14
c001d93b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d940:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d943:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d948:	c1 e2 15             	shl    edx,0x15
c001d94b:	29 d0                	sub    eax,edx
c001d94d:	50                   	push   eax
c001d94e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d953:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d959:	05 7c 11 00 00       	add    eax,0x117c
c001d95e:	50                   	push   eax
c001d95f:	e8 56 3b ff ff       	call   c00114ba <TSS::setESP(unsigned long)>
c001d964:	83 c4 1c             	add    esp,0x1c
c001d967:	c3                   	ret    

c001d968 <Process::addArgs(char**)>:
c001d968:	57                   	push   edi
c001d969:	56                   	push   esi
c001d96a:	53                   	push   ebx
c001d96b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d96f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d973:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d97d:	85 ff                	test   edi,edi
c001d97f:	74 3d                	je     c001d9be <Process::addArgs(char**)+0x56>
c001d981:	8b 07                	mov    eax,DWORD PTR [edi]
c001d983:	85 c0                	test   eax,eax
c001d985:	74 37                	je     c001d9be <Process::addArgs(char**)+0x56>
c001d987:	31 db                	xor    ebx,ebx
c001d989:	83 ec 0c             	sub    esp,0xc
c001d98c:	50                   	push   eax
c001d98d:	e8 02 2e fe ff       	call   c0000794 <strlen>
c001d992:	40                   	inc    eax
c001d993:	89 04 24             	mov    DWORD PTR [esp],eax
c001d996:	e8 a8 1e ff ff       	call   c000f843 <malloc>
c001d99b:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d9a2:	5a                   	pop    edx
c001d9a3:	59                   	pop    ecx
c001d9a4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d9a7:	43                   	inc    ebx
c001d9a8:	50                   	push   eax
c001d9a9:	e8 86 2e fe ff       	call   c0000834 <strcpy>
c001d9ae:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d9b4:	83 c4 10             	add    esp,0x10
c001d9b7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9ba:	85 c0                	test   eax,eax
c001d9bc:	75 cb                	jne    c001d989 <Process::addArgs(char**)+0x21>
c001d9be:	5b                   	pop    ebx
c001d9bf:	5e                   	pop    esi
c001d9c0:	5f                   	pop    edi
c001d9c1:	c3                   	ret    

c001d9c2 <Process::Process(char const*, Process*, char**)>:
c001d9c2:	56                   	push   esi
c001d9c3:	53                   	push   ebx
c001d9c4:	83 ec 14             	sub    esp,0x14
c001d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9cb:	05 0c 02 00 00       	add    eax,0x20c
c001d9d0:	bb 07 00 00 00       	mov    ebx,0x7
c001d9d5:	89 c6                	mov    esi,eax
c001d9d7:	85 db                	test   ebx,ebx
c001d9d9:	78 15                	js     c001d9f0 <Process::Process(char const*, Process*, char**)+0x2e>
c001d9db:	83 ec 0c             	sub    esp,0xc
c001d9de:	56                   	push   esi
c001d9df:	e8 4e b2 00 00       	call   c0028c32 <ThreadControlBlock::ThreadControlBlock()>
c001d9e4:	83 c4 10             	add    esp,0x10
c001d9e7:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d9ed:	4b                   	dec    ebx
c001d9ee:	eb e7                	jmp    c001d9d7 <Process::Process(char const*, Process*, char**)+0x15>
c001d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f4:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d9fb:	83 ec 0c             	sub    esp,0xc
c001d9fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da02:	e8 c7 c9 ff ff       	call   c001a3ce <Krnl::newProcessEnv(Process*)>
c001da07:	83 c4 10             	add    esp,0x10
c001da0a:	89 c2                	mov    edx,eax
c001da0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da10:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001da16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1a:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001da23:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001da28:	8d 50 01             	lea    edx,[eax+0x1]
c001da2b:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001da31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da35:	89 02                	mov    DWORD PTR [edx],eax
c001da37:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001da3f:	83 ec 0c             	sub    esp,0xc
c001da42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da46:	e8 f8 1d ff ff       	call   c000f843 <malloc>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	89 c3                	mov    ebx,eax
c001da50:	83 ec 08             	sub    esp,0x8
c001da53:	6a 00                	push   0x0
c001da55:	53                   	push   ebx
c001da56:	e8 b5 4d ff ff       	call   c0012810 <VAS::VAS(bool)>
c001da5b:	83 c4 10             	add    esp,0x10
c001da5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da62:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6c:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001da76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da7e:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001da84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da88:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da8e:	85 c0                	test   eax,eax
c001da90:	74 42                	je     c001dad4 <Process::Process(char const*, Process*, char**)+0x112>
c001da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da96:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da9c:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa6:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab0:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dab6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac0:	05 0c 01 00 00       	add    eax,0x10c
c001dac5:	83 ec 08             	sub    esp,0x8
c001dac8:	52                   	push   edx
c001dac9:	50                   	push   eax
c001daca:	e8 65 2d fe ff       	call   c0000834 <strcpy>
c001dacf:	83 c4 10             	add    esp,0x10
c001dad2:	eb 63                	jmp    c001db37 <Process::Process(char const*, Process*, char**)+0x175>
c001dad4:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dadc:	83 ec 0c             	sub    esp,0xc
c001dadf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dae3:	e8 5b 1d ff ff       	call   c000f843 <malloc>
c001dae8:	83 c4 10             	add    esp,0x10
c001daeb:	89 c3                	mov    ebx,eax
c001daed:	83 ec 08             	sub    esp,0x8
c001daf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daf4:	53                   	push   ebx
c001daf5:	e8 be 36 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001dafa:	83 c4 10             	add    esp,0x10
c001dafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db01:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001db07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0b:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001db11:	83 ec 0c             	sub    esp,0xc
c001db14:	50                   	push   eax
c001db15:	e8 91 2a ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db21:	05 0c 01 00 00       	add    eax,0x10c
c001db26:	83 ec 08             	sub    esp,0x8
c001db29:	68 5a c1 02 c0       	push   0xc002c15a
c001db2e:	50                   	push   eax
c001db2f:	e8 00 2d fe ff       	call   c0000834 <strcpy>
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3b:	83 c0 0c             	add    eax,0xc
c001db3e:	83 ec 08             	sub    esp,0x8
c001db41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db45:	50                   	push   eax
c001db46:	e8 e9 2c fe ff       	call   c0000834 <strcpy>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	83 ec 08             	sub    esp,0x8
c001db51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db59:	e8 0a fe ff ff       	call   c001d968 <Process::addArgs(char**)>
c001db5e:	83 c4 10             	add    esp,0x10
c001db61:	83 ec 08             	sub    esp,0x8
c001db64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db6c:	e8 6a ee ff ff       	call   c001c9db <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db78:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db7c:	83 f0 01             	xor    eax,0x1
c001db7f:	88 c2                	mov    dl,al
c001db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db85:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001db8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db90:	83 ec 08             	sub    esp,0x8
c001db93:	50                   	push   eax
c001db94:	68 58 c2 02 c0       	push   0xc002c258
c001db99:	e8 3a 53 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001db9e:	83 c4 10             	add    esp,0x10
c001dba1:	90                   	nop
c001dba2:	83 c4 14             	add    esp,0x14
c001dba5:	5b                   	pop    ebx
c001dba6:	5e                   	pop    esi
c001dba7:	c3                   	ret    

c001dba8 <Process::Process(bool, char const*, Process*, char**)>:
c001dba8:	56                   	push   esi
c001dba9:	53                   	push   ebx
c001dbaa:	83 ec 24             	sub    esp,0x24
c001dbad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dbb1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb9:	05 0c 02 00 00       	add    eax,0x20c
c001dbbe:	bb 07 00 00 00       	mov    ebx,0x7
c001dbc3:	89 c6                	mov    esi,eax
c001dbc5:	85 db                	test   ebx,ebx
c001dbc7:	78 15                	js     c001dbde <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dbc9:	83 ec 0c             	sub    esp,0xc
c001dbcc:	56                   	push   esi
c001dbcd:	e8 60 b0 00 00       	call   c0028c32 <ThreadControlBlock::ThreadControlBlock()>
c001dbd2:	83 c4 10             	add    esp,0x10
c001dbd5:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dbdb:	4b                   	dec    ebx
c001dbdc:	eb e7                	jmp    c001dbc5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dbde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe2:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dbe9:	83 ec 0c             	sub    esp,0xc
c001dbec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbf0:	e8 d9 c7 ff ff       	call   c001a3ce <Krnl::newProcessEnv(Process*)>
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	89 c2                	mov    edx,eax
c001dbfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbfe:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dc04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc08:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001dc11:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001dc16:	8d 50 01             	lea    edx,[eax+0x1]
c001dc19:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001dc1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc23:	89 02                	mov    DWORD PTR [edx],eax
c001dc25:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dc2d:	83 ec 0c             	sub    esp,0xc
c001dc30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc34:	e8 0a 1c ff ff       	call   c000f843 <malloc>
c001dc39:	83 c4 10             	add    esp,0x10
c001dc3c:	89 c3                	mov    ebx,eax
c001dc3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc43:	83 ec 08             	sub    esp,0x8
c001dc46:	50                   	push   eax
c001dc47:	53                   	push   ebx
c001dc48:	e8 c3 4b ff ff       	call   c0012810 <VAS::VAS(bool)>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc54:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001dc5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5e:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001dc68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc70:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001dc76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc7a:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc80:	85 c0                	test   eax,eax
c001dc82:	74 42                	je     c001dcc6 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001dc84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc88:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc8e:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001dc94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc98:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001dc9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca2:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dca8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dcae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb2:	05 0c 01 00 00       	add    eax,0x10c
c001dcb7:	83 ec 08             	sub    esp,0x8
c001dcba:	52                   	push   edx
c001dcbb:	50                   	push   eax
c001dcbc:	e8 73 2b fe ff       	call   c0000834 <strcpy>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	eb 63                	jmp    c001dd29 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dcc6:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcce:	83 ec 0c             	sub    esp,0xc
c001dcd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dcd5:	e8 69 1b ff ff       	call   c000f843 <malloc>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	89 c3                	mov    ebx,eax
c001dcdf:	83 ec 08             	sub    esp,0x8
c001dce2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dce6:	53                   	push   ebx
c001dce7:	e8 cc 34 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001dcec:	83 c4 10             	add    esp,0x10
c001dcef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf3:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dd03:	83 ec 0c             	sub    esp,0xc
c001dd06:	50                   	push   eax
c001dd07:	e8 9f 28 ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd13:	05 0c 01 00 00       	add    eax,0x10c
c001dd18:	83 ec 08             	sub    esp,0x8
c001dd1b:	68 5a c1 02 c0       	push   0xc002c15a
c001dd20:	50                   	push   eax
c001dd21:	e8 0e 2b fe ff       	call   c0000834 <strcpy>
c001dd26:	83 c4 10             	add    esp,0x10
c001dd29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2d:	83 c0 0c             	add    eax,0xc
c001dd30:	83 ec 08             	sub    esp,0x8
c001dd33:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd37:	50                   	push   eax
c001dd38:	e8 f7 2a fe ff       	call   c0000834 <strcpy>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	83 ec 08             	sub    esp,0x8
c001dd43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd4b:	e8 18 fc ff ff       	call   c001d968 <Process::addArgs(char**)>
c001dd50:	83 c4 10             	add    esp,0x10
c001dd53:	90                   	nop
c001dd54:	83 c4 24             	add    esp,0x24
c001dd57:	5b                   	pop    ebx
c001dd58:	5e                   	pop    esi
c001dd59:	c3                   	ret    

c001dd5a <disableIRQs()>:
c001dd5a:	fa                   	cli    
c001dd5b:	ff 05 cc 18 03 c0    	inc    DWORD PTR ds:0xc00318cc
c001dd61:	c3                   	ret    

c001dd62 <getIRQNestingLevel()>:
c001dd62:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd67:	c3                   	ret    

c001dd68 <enableIRQs()>:
c001dd68:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd6d:	48                   	dec    eax
c001dd6e:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c001dd73:	75 01                	jne    c001dd76 <enableIRQs()+0xe>
c001dd75:	fb                   	sti    
c001dd76:	c3                   	ret    

c001dd77 <lockScheduler()>:
c001dd77:	eb e1                	jmp    c001dd5a <disableIRQs()>

c001dd79 <unlockScheduler()>:
c001dd79:	eb ed                	jmp    c001dd68 <enableIRQs()>

c001dd7b <userModeEntryPoint(void*)>:
c001dd7b:	83 ec 0c             	sub    esp,0xc
c001dd7e:	e8 f6 ff ff ff       	call   c001dd79 <unlockScheduler()>
c001dd83:	fb                   	sti    
c001dd84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd8c:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dd92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd96:	83 c4 0c             	add    esp,0xc
c001dd99:	e9 8c 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd9e <lockStuff()>:
c001dd9e:	e8 b7 ff ff ff       	call   c001dd5a <disableIRQs()>
c001dda3:	ff 05 c8 18 03 c0    	inc    DWORD PTR ds:0xc00318c8
c001dda9:	c3                   	ret    

c001ddaa <taskStartupFunction>:
c001ddaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddaf:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ddb2:	c3                   	ret    

c001ddb3 <updateTimeUsed()>:
c001ddb3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001ddb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddbe:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddc5:	74 50                	je     c001de17 <updateTimeUsed()+0x64>
c001ddc7:	57                   	push   edi
c001ddc8:	56                   	push   esi
c001ddc9:	53                   	push   ebx
c001ddca:	0f 31                	rdtsc  
c001ddcc:	89 c1                	mov    ecx,eax
c001ddce:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c001ddd3:	2b 0d f8 18 03 c0    	sub    ecx,DWORD PTR ds:0xc00318f8
c001ddd9:	89 d3                	mov    ebx,edx
c001dddb:	89 0d 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,ecx
c001dde1:	1b 1d fc 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc00318fc
c001dde7:	a3 f8 18 03 c0       	mov    ds:0xc00318f8,eax
c001ddec:	89 1d 04 19 03 c0    	mov    DWORD PTR ds:0xc0031904,ebx
c001ddf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddf7:	89 15 0c 19 03 c0    	mov    DWORD PTR ds:0xc003190c,edx
c001ddfd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de00:	89 15 fc 18 03 c0    	mov    DWORD PTR ds:0xc00318fc,edx
c001de06:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de09:	01 f1                	add    ecx,esi
c001de0b:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de0e:	11 fb                	adc    ebx,edi
c001de10:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de13:	5b                   	pop    ebx
c001de14:	5e                   	pop    esi
c001de15:	5f                   	pop    edi
c001de16:	c3                   	ret    
c001de17:	c3                   	ret    

c001de18 <switchToThread(ThreadControlBlock*)>:
c001de18:	53                   	push   ebx
c001de19:	83 ec 08             	sub    esp,0x8
c001de1c:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001de21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de25:	85 c0                	test   eax,eax
c001de27:	75 30                	jne    c001de59 <switchToThread(ThreadControlBlock*)+0x41>
c001de29:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de2c:	3c ff                	cmp    al,0xff
c001de2e:	74 25                	je     c001de55 <switchToThread(ThreadControlBlock*)+0x3d>
c001de30:	0f b6 d0             	movzx  edx,al
c001de33:	b8 84 03 00 00       	mov    eax,0x384
c001de38:	29 d0                	sub    eax,edx
c001de3a:	c1 e0 10             	shl    eax,0x10
c001de3d:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de40:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de43:	e8 6b ff ff ff       	call   c001ddb3 <updateTimeUsed()>
c001de48:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de4c:	83 c4 08             	add    esp,0x8
c001de4f:	5b                   	pop    ebx
c001de50:	e9 0d 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de55:	31 c0                	xor    eax,eax
c001de57:	eb e7                	jmp    c001de40 <switchToThread(ThreadControlBlock*)+0x28>
c001de59:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001de63:	83 c4 08             	add    esp,0x8
c001de66:	5b                   	pop    ebx
c001de67:	c3                   	ret    

c001de68 <Semaphore::Semaphore(int)>:
c001de68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de70:	89 10                	mov    DWORD PTR [eax],edx
c001de72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de76:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de93:	90                   	nop
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <Mutex::Mutex()>:
c001de96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de9a:	6a 01                	push   0x1
c001de9c:	50                   	push   eax
c001de9d:	e8 c6 ff ff ff       	call   c001de68 <Semaphore::Semaphore(int)>
c001dea2:	83 c4 08             	add    esp,0x8
c001dea5:	90                   	nop
c001dea6:	c3                   	ret    
c001dea7:	90                   	nop

c001dea8 <Process::createThread(void (*)(void*), void*, int)>:
c001dea8:	55                   	push   ebp
c001dea9:	31 c9                	xor    ecx,ecx
c001deab:	57                   	push   edi
c001deac:	56                   	push   esi
c001dead:	53                   	push   ebx
c001deae:	83 ec 1c             	sub    esp,0x1c
c001deb1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001deb5:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001debc:	89 f2                	mov    edx,esi
c001debe:	0f b7 c2             	movzx  eax,dx
c001dec1:	83 e2 01             	and    edx,0x1
c001dec4:	74 14                	je     c001deda <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dec6:	d1 f8                	sar    eax,1
c001dec8:	41                   	inc    ecx
c001dec9:	89 c2                	mov    edx,eax
c001decb:	83 f9 10             	cmp    ecx,0x10
c001dece:	75 ee                	jne    c001debe <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ded0:	83 c4 1c             	add    esp,0x1c
c001ded3:	31 c0                	xor    eax,eax
c001ded5:	5b                   	pop    ebx
c001ded6:	5e                   	pop    esi
c001ded7:	5f                   	pop    edi
c001ded8:	5d                   	pop    ebp
c001ded9:	c3                   	ret    
c001deda:	83 ec 08             	sub    esp,0x8
c001dedd:	b8 01 00 00 00       	mov    eax,0x1
c001dee2:	d3 e0                	shl    eax,cl
c001dee4:	09 c6                	or     esi,eax
c001dee6:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001deec:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001def3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001def6:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001def9:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001defc:	8d 34 c0             	lea    esi,[eax+eax*8]
c001deff:	01 f6                	add    esi,esi
c001df01:	01 ce                	add    esi,ecx
c001df03:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df06:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df0c:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df12:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df16:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df1c:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df22:	89 ca                	mov    edx,ecx
c001df24:	f7 da                	neg    edx
c001df26:	c1 e2 15             	shl    edx,0x15
c001df29:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df2f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df35:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df39:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df43:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df49:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df4d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df53:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df5d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df67:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df6e:	50                   	push   eax
c001df6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df73:	68 e8 18 03 c0       	push   0xc00318e8
c001df78:	e8 43 ab 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df7d:	83 c4 10             	add    esp,0x10
c001df80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df84:	83 c4 1c             	add    esp,0x1c
c001df87:	5b                   	pop    ebx
c001df88:	5e                   	pop    esi
c001df89:	5f                   	pop    edi
c001df8a:	5d                   	pop    ebp
c001df8b:	c3                   	ret    

c001df8c <Process::createUserThread()>:
c001df8c:	83 ec 0c             	sub    esp,0xc
c001df8f:	68 80 00 00 00       	push   0x80
c001df94:	6a 00                	push   0x0
c001df96:	68 7b dd 01 c0       	push   0xc001dd7b
c001df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df9f:	e8 04 ff ff ff       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c001dfa4:	83 c4 1c             	add    esp,0x1c
c001dfa7:	c3                   	ret    

c001dfa8 <setupMultitasking(void (*)())>:
c001dfa8:	56                   	push   esi
c001dfa9:	53                   	push   ebx
c001dfaa:	53                   	push   ebx
c001dfab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfaf:	eb 10                	jmp    c001dfc1 <setupMultitasking(void (*)())+0x19>
c001dfb1:	83 ec 0c             	sub    esp,0xc
c001dfb4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfb9:	e8 54 aa 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfc9:	e8 28 aa 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	84 c0                	test   al,al
c001dfd3:	74 dc                	je     c001dfb1 <setupMultitasking(void (*)())+0x9>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	68 3f 1b 00 00       	push   0x1b3f
c001dfdd:	e8 61 18 ff ff       	call   c000f843 <malloc>
c001dfe2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfe9:	89 c3                	mov    ebx,eax
c001dfeb:	6a 00                	push   0x0
c001dfed:	68 5e c1 02 c0       	push   0xc002c15e
c001dff2:	6a 01                	push   0x1
c001dff4:	50                   	push   eax
c001dff5:	e8 ae fb ff ff       	call   c001dba8 <Process::Process(bool, char const*, Process*, char**)>
c001dffa:	83 c4 18             	add    esp,0x18
c001dffd:	89 1d f4 18 03 c0    	mov    DWORD PTR ds:0xc00318f4,ebx
c001e003:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001e009:	68 80 c2 02 c0       	push   0xc002c280
c001e00e:	e8 c5 4e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e013:	58                   	pop    eax
c001e014:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001e01a:	e8 0e 2d ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001e01f:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001e027:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001e02d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e030:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e03a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e040:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e046:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e050:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e05a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e064:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e06a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e070:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e07a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e080:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e08a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e090:	5a                   	pop    edx
c001e091:	59                   	pop    ecx
c001e092:	68 5a c1 02 c0       	push   0xc002c15a
c001e097:	50                   	push   eax
c001e098:	e8 97 27 fe ff       	call   c0000834 <strcpy>
c001e09d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0a4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0a8:	83 c4 14             	add    esp,0x14
c001e0ab:	5b                   	pop    ebx
c001e0ac:	5e                   	pop    esi
c001e0ad:	e9 a2 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0b2 <schedule()>:
c001e0b2:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e0b7:	85 c0                	test   eax,eax
c001e0b9:	74 0b                	je     c001e0c6 <schedule()+0x14>
c001e0bb:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001e0c5:	c3                   	ret    
c001e0c6:	53                   	push   ebx
c001e0c7:	83 ec 14             	sub    esp,0x14
c001e0ca:	68 e8 18 03 c0       	push   0xc00318e8
c001e0cf:	e8 22 a9 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0d4:	83 c4 10             	add    esp,0x10
c001e0d7:	84 c0                	test   al,al
c001e0d9:	75 38                	jne    c001e113 <schedule()+0x61>
c001e0db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0e3:	4a                   	dec    edx
c001e0e4:	74 32                	je     c001e118 <schedule()+0x66>
c001e0e6:	83 ec 0c             	sub    esp,0xc
c001e0e9:	68 e8 18 03 c0       	push   0xc00318e8
c001e0ee:	e8 fb a8 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f3:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e0fa:	89 c3                	mov    ebx,eax
c001e0fc:	e8 11 a9 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e101:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e108:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e10b:	e8 08 fd ff ff       	call   c001de18 <switchToThread(ThreadControlBlock*)>
c001e110:	83 c4 10             	add    esp,0x10
c001e113:	83 c4 08             	add    esp,0x8
c001e116:	5b                   	pop    ebx
c001e117:	c3                   	ret    
c001e118:	83 ec 08             	sub    esp,0x8
c001e11b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e122:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e128:	68 e8 18 03 c0       	push   0xc00318e8
c001e12d:	e8 8e a9 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	eb af                	jmp    c001e0e6 <schedule()+0x34>

c001e137 <unlockStuff()>:
c001e137:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e13c:	48                   	dec    eax
c001e13d:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c001e142:	75 09                	jne    c001e14d <unlockStuff()+0x16>
c001e144:	a1 c4 18 03 c0       	mov    eax,ds:0xc00318c4
c001e149:	85 c0                	test   eax,eax
c001e14b:	75 05                	jne    c001e152 <unlockStuff()+0x1b>
c001e14d:	e9 16 fc ff ff       	jmp    c001dd68 <enableIRQs()>
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	c7 05 c4 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x0
c001e15f:	e8 4e ff ff ff       	call   c001e0b2 <schedule()>
c001e164:	83 c4 0c             	add    esp,0xc
c001e167:	e9 fc fb ff ff       	jmp    c001dd68 <enableIRQs()>

c001e16c <Semaphore::tryAcquire()>:
c001e16c:	83 ec 0c             	sub    esp,0xc
c001e16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e173:	e8 26 fc ff ff       	call   c001dd9e <lockStuff()>
c001e178:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e17b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e17d:	7c 0b                	jl     c001e18a <Semaphore::tryAcquire()+0x1e>
c001e17f:	e8 b3 ff ff ff       	call   c001e137 <unlockStuff()>
c001e184:	31 c0                	xor    eax,eax
c001e186:	83 c4 0c             	add    esp,0xc
c001e189:	c3                   	ret    
c001e18a:	42                   	inc    edx
c001e18b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e18e:	e8 a4 ff ff ff       	call   c001e137 <unlockStuff()>
c001e193:	b0 01                	mov    al,0x1
c001e195:	83 c4 0c             	add    esp,0xc
c001e198:	c3                   	ret    
c001e199:	90                   	nop

c001e19a <Semaphore::assertLocked(char const*)>:
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1a5:	e8 f4 fb ff ff       	call   c001dd9e <lockStuff()>
c001e1aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1ac:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e1af:	7c 05                	jl     c001e1b6 <Semaphore::assertLocked(char const*)+0x1c>
c001e1b1:	83 c4 0c             	add    esp,0xc
c001e1b4:	eb 81                	jmp    c001e137 <unlockStuff()>
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	52                   	push   edx
c001e1ba:	e8 be c3 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001e1bf:	83 c4 10             	add    esp,0x10
c001e1c2:	83 c4 0c             	add    esp,0xc
c001e1c5:	e9 6d ff ff ff       	jmp    c001e137 <unlockStuff()>

c001e1ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	e8 90 fb ff ff       	call   c001dd62 <getIRQNestingLevel()>
c001e1d2:	83 ec 08             	sub    esp,0x8
c001e1d5:	50                   	push   eax
c001e1d6:	68 b4 c2 02 c0       	push   0xc002c2b4
c001e1db:	e8 f8 4c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e1e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1ec:	e8 c1 fe ff ff       	call   c001e0b2 <schedule()>
c001e1f1:	e8 83 fb ff ff       	call   c001dd79 <unlockScheduler()>
c001e1f6:	e8 67 fb ff ff       	call   c001dd62 <getIRQNestingLevel()>
c001e1fb:	5a                   	pop    edx
c001e1fc:	59                   	pop    ecx
c001e1fd:	50                   	push   eax
c001e1fe:	68 e8 c2 02 c0       	push   0xc002c2e8
c001e203:	e8 d0 4c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e208:	83 c4 1c             	add    esp,0x1c
c001e20b:	c3                   	ret    

c001e20c <blockTask(TaskState)>:
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e213:	e8 5f fb ff ff       	call   c001dd77 <lockScheduler()>
c001e218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e21d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e220:	e8 8d fe ff ff       	call   c001e0b2 <schedule()>
c001e225:	83 c4 0c             	add    esp,0xc
c001e228:	e9 4c fb ff ff       	jmp    c001dd79 <unlockScheduler()>

c001e22d <waitTask(int, int*, int)>:
c001e22d:	83 ec 18             	sub    esp,0x18
c001e230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e235:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e239:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e23c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e245:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e248:	6a 07                	push   0x7
c001e24a:	e8 bd ff ff ff       	call   c001e20c <blockTask(TaskState)>
c001e24f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e25a:	85 d2                	test   edx,edx
c001e25c:	74 0a                	je     c001e268 <waitTask(int, int*, int)+0x3b>
c001e25e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e261:	89 02                	mov    DWORD PTR [edx],eax
c001e263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e268:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e26b:	83 c4 0c             	add    esp,0xc
c001e26e:	c3                   	ret    

c001e26f <nanoSleepUntil(unsigned long long)>:
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e276:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e27a:	3b 05 10 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea10
c001e280:	89 d1                	mov    ecx,edx
c001e282:	1b 0d 14 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea14
c001e288:	73 04                	jae    c001e28e <nanoSleepUntil(unsigned long long)+0x1f>
c001e28a:	83 c4 0c             	add    esp,0xc
c001e28d:	c3                   	ret    
c001e28e:	e8 0b fb ff ff       	call   c001dd9e <lockStuff()>
c001e293:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e299:	83 ec 08             	sub    esp,0x8
c001e29c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e29f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e2a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e2a8:	68 dc 18 03 c0       	push   0xc00318dc
c001e2ad:	e8 0e a8 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2b9:	e8 4e ff ff ff       	call   c001e20c <blockTask(TaskState)>
c001e2be:	83 c4 1c             	add    esp,0x1c
c001e2c1:	e9 71 fe ff ff       	jmp    c001e137 <unlockStuff()>

c001e2c6 <nanoSleep(unsigned long long)>:
c001e2c6:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c001e2cb:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c001e2d1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2d5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2d9:	eb 94                	jmp    c001e26f <nanoSleepUntil(unsigned long long)>

c001e2db <sleep(unsigned long long)>:
c001e2db:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e2e3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e2e8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e2ec:	01 ca                	add    edx,ecx
c001e2ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e2f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2f6:	eb ce                	jmp    c001e2c6 <nanoSleep(unsigned long long)>

c001e2f8 <Semaphore::acquire()>:
c001e2f8:	83 ec 0c             	sub    esp,0xc
c001e2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ff:	e8 9a fa ff ff       	call   c001dd9e <lockStuff()>
c001e304:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e307:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e309:	7d 0c                	jge    c001e317 <Semaphore::acquire()+0x1f>
c001e30b:	42                   	inc    edx
c001e30c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e30f:	83 c4 0c             	add    esp,0xc
c001e312:	e9 20 fe ff ff       	jmp    c001e137 <unlockStuff()>
c001e317:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e31d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e324:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e327:	85 d2                	test   edx,edx
c001e329:	74 2a                	je     c001e355 <Semaphore::acquire()+0x5d>
c001e32b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e32e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e334:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e337:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e33d:	83 ec 0c             	sub    esp,0xc
c001e340:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e343:	6a 05                	push   0x5
c001e345:	e8 c2 fe ff ff       	call   c001e20c <blockTask(TaskState)>
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	83 c4 0c             	add    esp,0xc
c001e350:	e9 e2 fd ff ff       	jmp    c001e137 <unlockStuff()>
c001e355:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e35b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e35e:	eb d7                	jmp    c001e337 <Semaphore::acquire()+0x3f>

c001e360 <taskReturned>:
c001e360:	83 ec 18             	sub    esp,0x18
c001e363:	68 1c c3 02 c0       	push   0xc002c31c
c001e368:	e8 10 c2 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	6a 02                	push   0x2
c001e375:	e8 92 fe ff ff       	call   c001e20c <blockTask(TaskState)>
c001e37a:	e8 f8 f9 ff ff       	call   c001dd77 <lockScheduler()>
c001e37f:	e8 2e fd ff ff       	call   c001e0b2 <schedule()>
c001e384:	e8 f0 f9 ff ff       	call   c001dd79 <unlockScheduler()>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	eb e2                	jmp    c001e370 <taskReturned+0x10>

c001e38e <unblockTask(ThreadControlBlock*)>:
c001e38e:	53                   	push   ebx
c001e38f:	83 ec 08             	sub    esp,0x8
c001e392:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e396:	e8 dc f9 ff ff       	call   c001dd77 <lockScheduler()>
c001e39b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e39e:	85 c0                	test   eax,eax
c001e3a0:	74 5c                	je     c001e3fe <unblockTask(ThreadControlBlock*)+0x70>
c001e3a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e3a5:	48                   	dec    eax
c001e3a6:	74 31                	je     c001e3d9 <unblockTask(ThreadControlBlock*)+0x4b>
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	68 e8 18 03 c0       	push   0xc00318e8
c001e3b0:	e8 39 a6 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3b5:	83 c4 10             	add    esp,0x10
c001e3b8:	85 c0                	test   eax,eax
c001e3ba:	75 17                	jne    c001e3d3 <unblockTask(ThreadControlBlock*)+0x45>
c001e3bc:	eb 65                	jmp    c001e423 <unblockTask(ThreadControlBlock*)+0x95>
c001e3be:	83 ec 08             	sub    esp,0x8
c001e3c1:	50                   	push   eax
c001e3c2:	68 e8 18 03 c0       	push   0xc00318e8
c001e3c7:	e8 fc a8 00 00       	call   c0028cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3cc:	83 c4 10             	add    esp,0x10
c001e3cf:	85 c0                	test   eax,eax
c001e3d1:	74 50                	je     c001e423 <unblockTask(ThreadControlBlock*)+0x95>
c001e3d3:	39 c3                	cmp    ebx,eax
c001e3d5:	75 e7                	jne    c001e3be <unblockTask(ThreadControlBlock*)+0x30>
c001e3d7:	eb 1c                	jmp    c001e3f5 <unblockTask(ThreadControlBlock*)+0x67>
c001e3d9:	83 ec 0c             	sub    esp,0xc
c001e3dc:	68 0c c4 02 c0       	push   0xc002c40c
c001e3e1:	e8 f2 4a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e3e6:	c7 04 24 98 c3 02 c0 	mov    DWORD PTR [esp],0xc002c398
c001e3ed:	e8 e6 4a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e3f2:	83 c4 10             	add    esp,0x10
c001e3f5:	83 c4 08             	add    esp,0x8
c001e3f8:	5b                   	pop    ebx
c001e3f9:	e9 7b f9 ff ff       	jmp    c001dd79 <unlockScheduler()>
c001e3fe:	83 ec 0c             	sub    esp,0xc
c001e401:	68 50 c3 02 c0       	push   0xc002c350
c001e406:	e8 cd 4a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e40b:	c7 04 24 98 c3 02 c0 	mov    DWORD PTR [esp],0xc002c398
c001e412:	e8 c1 4a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	83 c4 08             	add    esp,0x8
c001e41d:	5b                   	pop    ebx
c001e41e:	e9 56 f9 ff ff       	jmp    c001dd79 <unlockScheduler()>
c001e423:	83 ec 08             	sub    esp,0x8
c001e426:	53                   	push   ebx
c001e427:	68 e8 18 03 c0       	push   0xc00318e8
c001e42c:	e8 8f a6 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	83 c4 08             	add    esp,0x8
c001e437:	5b                   	pop    ebx
c001e438:	e9 3c f9 ff ff       	jmp    c001dd79 <unlockScheduler()>

c001e43d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e43d:	55                   	push   ebp
c001e43e:	57                   	push   edi
c001e43f:	56                   	push   esi
c001e440:	53                   	push   ebx
c001e441:	83 ec 1c             	sub    esp,0x1c
c001e444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e448:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e44b:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e451:	85 ff                	test   edi,edi
c001e453:	7e 20                	jle    c001e475 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e455:	31 f6                	xor    esi,esi
c001e457:	83 ec 0c             	sub    esp,0xc
c001e45a:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e461:	46                   	inc    esi
c001e462:	e8 ec 13 ff ff       	call   c000f853 <free>
c001e467:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e46a:	83 c4 10             	add    esp,0x10
c001e46d:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e473:	7f e2                	jg     c001e457 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e475:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e47f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e484:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e487:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e48a:	d3 c0                	rol    eax,cl
c001e48c:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e493:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e496:	89 f7                	mov    edi,esi
c001e498:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e4a0:	0f 85 75 01 00 00    	jne    c001e61b <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e4a6:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e4ac:	85 ed                	test   ebp,ebp
c001e4ae:	74 1b                	je     c001e4cb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4b0:	83 ec 0c             	sub    esp,0xc
c001e4b3:	55                   	push   ebp
c001e4b4:	e8 31 be ff ff       	call   c001a2ea <EnvVarContainer::~EnvVarContainer()>
c001e4b9:	59                   	pop    ecx
c001e4ba:	5e                   	pop    esi
c001e4bb:	6a 0c                	push   0xc
c001e4bd:	55                   	push   ebp
c001e4be:	e8 35 49 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c001e4c3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4c6:	83 c4 10             	add    esp,0x10
c001e4c9:	89 f7                	mov    edi,esi
c001e4cb:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4d1:	85 c0                	test   eax,eax
c001e4d3:	0f 84 ab 00 00 00    	je     c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4d9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4e0:	31 c9                	xor    ecx,ecx
c001e4e2:	eb 10                	jmp    c001e4f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4e4:	41                   	inc    ecx
c001e4e5:	83 f9 10             	cmp    ecx,0x10
c001e4e8:	0f 84 96 00 00 00    	je     c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4ee:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4f4:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e4fb:	d3 fa                	sar    edx,cl
c001e4fd:	83 e2 01             	and    edx,0x1
c001e500:	74 e2                	je     c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e502:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e505:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e508:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e50b:	01 d2                	add    edx,edx
c001e50d:	01 ca                	add    edx,ecx
c001e50f:	01 d0                	add    eax,edx
c001e511:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e517:	83 fd 07             	cmp    ebp,0x7
c001e51a:	75 c8                	jne    c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e51c:	05 40 02 00 00       	add    eax,0x240
c001e521:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e524:	83 fd ff             	cmp    ebp,0xffffffff
c001e527:	0f 8c 08 01 00 00    	jl     c001e635 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e52d:	0f 84 b9 01 00 00    	je     c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e533:	85 ed                	test   ebp,ebp
c001e535:	0f 84 a0 01 00 00    	je     c001e6db <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e53b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e53d:	75 a5                	jne    c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e53f:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e545:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e549:	01 d0                	add    eax,edx
c001e54b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e54f:	83 ec 0c             	sub    esp,0xc
c001e552:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e558:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e55b:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e561:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e568:	50                   	push   eax
c001e569:	e8 20 fe ff ff       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c001e56e:	83 c4 10             	add    esp,0x10
c001e571:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e578:	89 f7                	mov    edi,esi
c001e57a:	41                   	inc    ecx
c001e57b:	83 f9 10             	cmp    ecx,0x10
c001e57e:	0f 85 6a ff ff ff    	jne    c001e4ee <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e584:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e58a:	85 c0                	test   eax,eax
c001e58c:	74 5d                	je     c001e5eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e58e:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e594:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e59a:	74 4f                	je     c001e5eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	68 e8 18 03 c0       	push   0xc00318e8
c001e5a4:	e8 45 a4 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a9:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e5b0:	89 c7                	mov    edi,eax
c001e5b2:	e8 3f a4 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5b7:	83 c4 10             	add    esp,0x10
c001e5ba:	84 c0                	test   al,al
c001e5bc:	0f 84 e4 00 00 00    	je     c001e6a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e5c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c5:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e5cb:	85 d2                	test   edx,edx
c001e5cd:	74 0f                	je     c001e5de <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e5cf:	83 ec 0c             	sub    esp,0xc
c001e5d2:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5d4:	52                   	push   edx
c001e5d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5db:	83 c4 10             	add    esp,0x10
c001e5de:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e5e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5eb:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e5f1:	85 db                	test   ebx,ebx
c001e5f3:	74 16                	je     c001e60b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	53                   	push   ebx
c001e5f9:	e8 fe 3b ff ff       	call   c00121fc <VAS::~VAS()>
c001e5fe:	58                   	pop    eax
c001e5ff:	5a                   	pop    edx
c001e600:	6a 14                	push   0x14
c001e602:	53                   	push   ebx
c001e603:	e8 f0 47 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c001e608:	83 c4 10             	add    esp,0x10
c001e60b:	83 ec 0c             	sub    esp,0xc
c001e60e:	68 65 c1 02 c0       	push   0xc002c165
c001e613:	e8 c0 48 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e618:	83 c4 10             	add    esp,0x10
c001e61b:	83 ec 08             	sub    esp,0x8
c001e61e:	68 3f 1b 00 00       	push   0x1b3f
c001e623:	68 73 c1 02 c0       	push   0xc002c173
c001e628:	e8 ab 48 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e62d:	83 c4 2c             	add    esp,0x2c
c001e630:	5b                   	pop    ebx
c001e631:	5e                   	pop    esi
c001e632:	5f                   	pop    edi
c001e633:	5d                   	pop    ebp
c001e634:	c3                   	ret    
c001e635:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e639:	83 ec 0c             	sub    esp,0xc
c001e63c:	68 50 c4 02 c0       	push   0xc002c450
c001e641:	e8 37 bf ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001e646:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e649:	83 c4 10             	add    esp,0x10
c001e64c:	89 f7                	mov    edi,esi
c001e64e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e652:	e9 8d fe ff ff       	jmp    c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e657:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e65d:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e663:	75 1c                	jne    c001e681 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e665:	83 ec 0c             	sub    esp,0xc
c001e668:	68 b8 c4 02 c0       	push   0xc002c4b8
c001e66d:	e8 66 48 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e672:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e679:	e8 8e fb ff ff       	call   c001e20c <blockTask(TaskState)>
c001e67e:	83 c4 10             	add    esp,0x10
c001e681:	83 ec 08             	sub    esp,0x8
c001e684:	56                   	push   esi
c001e685:	68 e8 18 03 c0       	push   0xc00318e8
c001e68a:	e8 31 a4 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e68f:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e696:	e8 53 a3 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e69b:	83 c4 10             	add    esp,0x10
c001e69e:	39 f8                	cmp    eax,edi
c001e6a0:	0f 84 1c ff ff ff    	je     c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e6a6:	83 ec 0c             	sub    esp,0xc
c001e6a9:	68 e8 18 03 c0       	push   0xc00318e8
c001e6ae:	e8 3b a3 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6b3:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e6ba:	89 c6                	mov    esi,eax
c001e6bc:	e8 51 a3 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6c1:	83 c4 10             	add    esp,0x10
c001e6c4:	39 f3                	cmp    ebx,esi
c001e6c6:	74 b9                	je     c001e681 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6c8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6ce:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e6d4:	75 ab                	jne    c001e681 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6d6:	e9 7c ff ff ff       	jmp    c001e657 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e6db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	68 84 c4 02 c0       	push   0xc002c484
c001e6e7:	e9 55 ff ff ff       	jmp    c001e641 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e6ec:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6f2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f8:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e6fe:	01 d7                	add    edi,edx
c001e700:	89 f8                	mov    eax,edi
c001e702:	e9 44 fe ff ff       	jmp    c001e54b <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e707 <cleanerTaskFunction(void*)>:
c001e707:	53                   	push   ebx
c001e708:	83 ec 08             	sub    esp,0x8
c001e70b:	e8 69 f6 ff ff       	call   c001dd79 <unlockScheduler()>
c001e710:	e8 62 f6 ff ff       	call   c001dd77 <lockScheduler()>
c001e715:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e71c:	0f 85 8e 00 00 00    	jne    c001e7b0 <cleanerTaskFunction(void*)+0xa9>
c001e722:	83 ec 0c             	sub    esp,0xc
c001e725:	6a 02                	push   0x2
c001e727:	e8 9e fa ff ff       	call   c001e1ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	c6 05 ac 18 03 c0 00 	mov    BYTE PTR ds:0xc00318ac,0x0
c001e736:	e8 63 f6 ff ff       	call   c001dd9e <lockStuff()>
c001e73b:	e8 37 f6 ff ff       	call   c001dd77 <lockScheduler()>
c001e740:	83 ec 0c             	sub    esp,0xc
c001e743:	68 d0 18 03 c0       	push   0xc00318d0
c001e748:	e8 a9 a2 00 00       	call   c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e74d:	83 c4 10             	add    esp,0x10
c001e750:	84 c0                	test   al,al
c001e752:	75 40                	jne    c001e794 <cleanerTaskFunction(void*)+0x8d>
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 d0 18 03 c0       	push   0xc00318d0
c001e75c:	e8 8d a2 00 00       	call   c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e761:	c7 04 24 d0 18 03 c0 	mov    DWORD PTR [esp],0xc00318d0
c001e768:	89 c3                	mov    ebx,eax
c001e76a:	e8 a3 a2 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e76f:	c7 04 24 89 c1 02 c0 	mov    DWORD PTR [esp],0xc002c189
c001e776:	e8 5d 47 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e77e:	e8 ba fc ff ff       	call   c001e43d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e783:	c7 04 24 a2 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1a2
c001e78a:	e8 49 47 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e78f:	83 c4 10             	add    esp,0x10
c001e792:	eb ac                	jmp    c001e740 <cleanerTaskFunction(void*)+0x39>
c001e794:	e8 e0 f5 ff ff       	call   c001dd79 <unlockScheduler()>
c001e799:	e8 99 f9 ff ff       	call   c001e137 <unlockStuff()>
c001e79e:	e8 d4 f5 ff ff       	call   c001dd77 <lockScheduler()>
c001e7a3:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e7aa:	0f 84 72 ff ff ff    	je     c001e722 <cleanerTaskFunction(void*)+0x1b>
c001e7b0:	e8 c4 f5 ff ff       	call   c001dd79 <unlockScheduler()>
c001e7b5:	e9 75 ff ff ff       	jmp    c001e72f <cleanerTaskFunction(void*)+0x28>

c001e7ba <terminateTask(int)>:
c001e7ba:	83 ec 14             	sub    esp,0x14
c001e7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7c5:	83 c0 0c             	add    eax,0xc
c001e7c8:	50                   	push   eax
c001e7c9:	68 e0 c4 02 c0       	push   0xc002c4e0
c001e7ce:	e8 05 47 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e7d3:	e8 c6 f5 ff ff       	call   c001dd9e <lockStuff()>
c001e7d8:	e8 9a f5 ff ff       	call   c001dd77 <lockScheduler()>
c001e7dd:	c7 04 24 b5 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b5
c001e7e4:	e8 ef 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e7e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7f2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7fa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7fd:	5a                   	pop    edx
c001e7fe:	59                   	pop    ecx
c001e7ff:	50                   	push   eax
c001e800:	68 d0 18 03 c0       	push   0xc00318d0
c001e805:	e8 b6 a2 00 00       	call   c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e80a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e80f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e816:	c7 04 24 cf c1 02 c0 	mov    DWORD PTR [esp],0xc002c1cf
c001e81d:	e8 b6 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e822:	83 c4 10             	add    esp,0x10
c001e825:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001e82a:	85 c0                	test   eax,eax
c001e82c:	74 5a                	je     c001e888 <terminateTask(int)+0xce>
c001e82e:	83 ec 0c             	sub    esp,0xc
c001e831:	68 e9 c1 02 c0       	push   0xc002c1e9
c001e836:	e8 9d 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e83b:	58                   	pop    eax
c001e83c:	c6 05 ac 18 03 c0 01 	mov    BYTE PTR ds:0xc00318ac,0x1
c001e843:	ff 35 a8 18 03 c0    	push   DWORD PTR ds:0xc00318a8
c001e849:	e8 40 fb ff ff       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c001e84e:	c7 04 24 03 c2 02 c0 	mov    DWORD PTR [esp],0xc002c203
c001e855:	e8 7e 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e85a:	83 c4 10             	add    esp,0x10
c001e85d:	e8 17 f5 ff ff       	call   c001dd79 <unlockScheduler()>
c001e862:	e8 d0 f8 ff ff       	call   c001e137 <unlockStuff()>
c001e867:	83 ec 0c             	sub    esp,0xc
c001e86a:	68 3b c2 02 c0       	push   0xc002c23b
c001e86f:	e8 64 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e874:	83 c4 10             	add    esp,0x10
c001e877:	e8 fb f4 ff ff       	call   c001dd77 <lockScheduler()>
c001e87c:	e8 31 f8 ff ff       	call   c001e0b2 <schedule()>
c001e881:	e8 f3 f4 ff ff       	call   c001dd79 <unlockScheduler()>
c001e886:	eb ef                	jmp    c001e877 <terminateTask(int)+0xbd>
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	68 1d c2 02 c0       	push   0xc002c21d
c001e890:	e8 43 46 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	eb c3                	jmp    c001e85d <terminateTask(int)+0xa3>

c001e89a <Thr::terminateFromIRQ(int)>:
c001e89a:	83 ec 18             	sub    esp,0x18
c001e89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a1:	e8 14 ff ff ff       	call   c001e7ba <terminateTask(int)>

c001e8a6 <Semaphore::release()>:
c001e8a6:	83 ec 0c             	sub    esp,0xc
c001e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ad:	e8 ec f4 ff ff       	call   c001dd9e <lockStuff()>
c001e8b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8b5:	85 d2                	test   edx,edx
c001e8b7:	74 1a                	je     c001e8d3 <Semaphore::release()+0x2d>
c001e8b9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8bc:	83 ec 0c             	sub    esp,0xc
c001e8bf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8c2:	52                   	push   edx
c001e8c3:	e8 c6 fa ff ff       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c001e8c8:	83 c4 10             	add    esp,0x10
c001e8cb:	83 c4 0c             	add    esp,0xc
c001e8ce:	e9 64 f8 ff ff       	jmp    c001e137 <unlockStuff()>
c001e8d3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8d6:	83 c4 0c             	add    esp,0xc
c001e8d9:	e9 59 f8 ff ff       	jmp    c001e137 <unlockStuff()>

c001e8de <__static_initialization_and_destruction_0(int, int)>:
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8e6:	0f 85 88 00 00 00    	jne    c001e974 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8f4:	75 7e                	jne    c001e974 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8f6:	83 ec 0c             	sub    esp,0xc
c001e8f9:	68 e8 18 03 c0       	push   0xc00318e8
c001e8fe:	e8 6d a3 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	83 ec 04             	sub    esp,0x4
c001e909:	68 98 d2 02 c0       	push   0xc002d298
c001e90e:	68 e8 18 03 c0       	push   0xc00318e8
c001e913:	68 30 8c 02 c0       	push   0xc0028c30
c001e918:	e8 55 44 ff ff       	call   c0012d72 <__cxa_atexit>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	68 dc 18 03 c0       	push   0xc00318dc
c001e928:	e8 43 a3 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	83 ec 04             	sub    esp,0x4
c001e933:	68 98 d2 02 c0       	push   0xc002d298
c001e938:	68 dc 18 03 c0       	push   0xc00318dc
c001e93d:	68 30 8c 02 c0       	push   0xc0028c30
c001e942:	e8 2b 44 ff ff       	call   c0012d72 <__cxa_atexit>
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	68 d0 18 03 c0       	push   0xc00318d0
c001e952:	e8 19 a3 00 00       	call   c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	83 ec 04             	sub    esp,0x4
c001e95d:	68 98 d2 02 c0       	push   0xc002d298
c001e962:	68 d0 18 03 c0       	push   0xc00318d0
c001e967:	68 30 8c 02 c0       	push   0xc0028c30
c001e96c:	e8 01 44 ff ff       	call   c0012d72 <__cxa_atexit>
c001e971:	83 c4 10             	add    esp,0x10
c001e974:	90                   	nop
c001e975:	83 c4 0c             	add    esp,0xc
c001e978:	c3                   	ret    

c001e979 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e979:	83 ec 0c             	sub    esp,0xc
c001e97c:	83 ec 08             	sub    esp,0x8
c001e97f:	68 ff ff 00 00       	push   0xffff
c001e984:	6a 01                	push   0x1
c001e986:	e8 53 ff ff ff       	call   c001e8de <__static_initialization_and_destruction_0(int, int)>
c001e98b:	83 c4 10             	add    esp,0x10
c001e98e:	83 c4 0c             	add    esp,0xc
c001e991:	c3                   	ret    

c001e992 <Vm::inbv(unsigned short)>:
c001e992:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e996:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e99b:	75 06                	jne    c001e9a3 <Vm::inbv(unsigned short)+0x11>
c001e99d:	a0 2c 19 03 c0       	mov    al,ds:0xc003192c
c001e9a2:	c3                   	ret    
c001e9a3:	ec                   	in     al,dx
c001e9a4:	c3                   	ret    

c001e9a5 <Vm::outbv(unsigned short, unsigned char)>:
c001e9a5:	53                   	push   ebx
c001e9a6:	83 ec 08             	sub    esp,0x8
c001e9a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9b1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9b6:	75 38                	jne    c001e9f0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9b8:	0f b6 c3             	movzx  eax,bl
c001e9bb:	51                   	push   ecx
c001e9bc:	51                   	push   ecx
c001e9bd:	50                   	push   eax
c001e9be:	68 ff c4 02 c0       	push   0xc002c4ff
c001e9c3:	e8 10 45 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001e9c8:	8b 15 2c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003192c
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	8d 42 01             	lea    eax,[edx+0x1]
c001e9d4:	88 9a 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],bl
c001e9da:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c001e9df:	83 f8 20             	cmp    eax,0x20
c001e9e2:	75 0f                	jne    c001e9f3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9e4:	c7 05 2c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x1f
c001e9ee:	eb 03                	jmp    c001e9f3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9f0:	88 d8                	mov    al,bl
c001e9f2:	ee                   	out    dx,al
c001e9f3:	83 c4 08             	add    esp,0x8
c001e9f6:	5b                   	pop    ebx
c001e9f7:	c3                   	ret    

c001e9f8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea02:	c1 e0 04             	shl    eax,0x4
c001ea05:	01 d0                	add    eax,edx
c001ea07:	c3                   	ret    

c001ea08 <Vm::getSegment(unsigned int)>:
c001ea08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea0c:	c1 e8 10             	shr    eax,0x10
c001ea0f:	c3                   	ret    

c001ea10 <Vm::getOffset(unsigned int)>:
c001ea10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea14:	c3                   	ret    

c001ea15 <Vm::mainloop2()>:
c001ea15:	83 ec 0c             	sub    esp,0xc
c001ea18:	e8 5a f3 ff ff       	call   c001dd77 <lockScheduler()>
c001ea1d:	83 ec 0c             	sub    esp,0xc
c001ea20:	c6 05 25 19 03 c0 01 	mov    BYTE PTR ds:0xc0031925,0x1
c001ea27:	6a 02                	push   0x2
c001ea29:	e8 9c f7 ff ff       	call   c001e1ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea33:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea37:	52                   	push   edx
c001ea38:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea3c:	52                   	push   edx
c001ea3d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea41:	52                   	push   edx
c001ea42:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea46:	50                   	push   eax
c001ea47:	e8 ae 18 fe ff       	call   c00002fa <goToVM86>
c001ea4c:	83 c4 2c             	add    esp,0x2c
c001ea4f:	c3                   	ret    

c001ea50 <Vm::mainVm8086Loop(void*)>:
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	e8 21 f3 ff ff       	call   c001dd79 <unlockScheduler()>
c001ea58:	83 c4 0c             	add    esp,0xc
c001ea5b:	eb b8                	jmp    c001ea15 <Vm::mainloop2()>

c001ea5d <Vm::mainloop3(unsigned long)>:
c001ea5d:	53                   	push   ebx
c001ea5e:	83 ec 08             	sub    esp,0x8
c001ea61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea65:	e8 0d f3 ff ff       	call   c001dd77 <lockScheduler()>
c001ea6a:	83 ec 0c             	sub    esp,0xc
c001ea6d:	89 1d 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,ebx
c001ea73:	6a 02                	push   0x2
c001ea75:	c6 05 24 19 03 c0 01 	mov    BYTE PTR ds:0xc0031924,0x1
c001ea7c:	e8 49 f7 ff ff       	call   c001e1ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea81:	83 c4 18             	add    esp,0x18
c001ea84:	5b                   	pop    ebx
c001ea85:	eb 8e                	jmp    c001ea15 <Vm::mainloop2()>

c001ea87 <Vm::initialise8086()>:
c001ea87:	83 ec 0c             	sub    esp,0xc
c001ea8a:	68 80 00 00 00       	push   0x80
c001ea8f:	6a 00                	push   0x0
c001ea91:	68 50 ea 01 c0       	push   0xc001ea50
c001ea96:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001ea9c:	e8 07 f4 ff ff       	call   c001dea8 <Process::createThread(void (*)(void*), void*, int)>
c001eaa1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eaa8:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001eaad:	68 00 01 00 00       	push   0x100
c001eab2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001eab7:	6a 00                	push   0x0
c001eab9:	6a 00                	push   0x0
c001eabb:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001eac1:	e8 96 3b ff ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eac6:	83 c4 2c             	add    esp,0x2c
c001eac9:	c3                   	ret    

c001eaca <Vm::finish8086()>:
c001eaca:	53                   	push   ebx
c001eacb:	83 ec 08             	sub    esp,0x8
c001eace:	e8 a4 f2 ff ff       	call   c001dd77 <lockScheduler()>
c001ead3:	80 3d 24 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031924,0x0
c001eada:	75 0c                	jne    c001eae8 <Vm::finish8086()+0x1e>
c001eadc:	e8 d1 f5 ff ff       	call   c001e0b2 <schedule()>
c001eae1:	e8 93 f2 ff ff       	call   c001dd79 <unlockScheduler()>
c001eae6:	eb e6                	jmp    c001eace <Vm::finish8086()+0x4>
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	8b 1d 20 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031920
c001eaf1:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001eaf7:	c6 05 24 19 03 c0 00 	mov    BYTE PTR ds:0xc0031924,0x0
c001eafe:	e8 8b f8 ff ff       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c001eb03:	e8 71 f2 ff ff       	call   c001dd79 <unlockScheduler()>
c001eb08:	89 d8                	mov    eax,ebx
c001eb0a:	83 c4 18             	add    esp,0x18
c001eb0d:	5b                   	pop    ebx
c001eb0e:	c3                   	ret    

c001eb0f <Vm::getOutput8086(unsigned char*)>:
c001eb0f:	83 ec 10             	sub    esp,0x10
c001eb12:	ff 35 2c 19 03 c0    	push   DWORD PTR ds:0xc003192c
c001eb18:	68 40 19 03 c0       	push   0xc0031940
c001eb1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb21:	e8 1e 1c fe ff       	call   c0000744 <memcpy>
c001eb26:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001eb2b:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb35:	83 c4 1c             	add    esp,0x1c
c001eb38:	c3                   	ret    

c001eb39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb39:	55                   	push   ebp
c001eb3a:	57                   	push   edi
c001eb3b:	56                   	push   esi
c001eb3c:	53                   	push   ebx
c001eb3d:	83 ec 2c             	sub    esp,0x2c
c001eb40:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb44:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb48:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb50:	e8 22 f2 ff ff       	call   c001dd77 <lockScheduler()>
c001eb55:	a0 25 19 03 c0       	mov    al,ds:0xc0031925
c001eb5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb5e:	84 c0                	test   al,al
c001eb60:	75 0c                	jne    c001eb6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb62:	e8 4b f5 ff ff       	call   c001e0b2 <schedule()>
c001eb67:	e8 0d f2 ff ff       	call   c001dd79 <unlockScheduler()>
c001eb6c:	eb e2                	jmp    c001eb50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb6e:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001eb73:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb7d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb81:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb85:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb89:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb8d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb91:	50                   	push   eax
c001eb92:	6a 20                	push   0x20
c001eb94:	6a 00                	push   0x0
c001eb96:	68 40 19 03 c0       	push   0xc0031940
c001eb9b:	e8 d8 1b fe ff       	call   c0000778 <memset>
c001eba0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eba7:	e8 97 0c ff ff       	call   c000f843 <malloc>
c001ebac:	83 c4 0c             	add    esp,0xc
c001ebaf:	89 c7                	mov    edi,eax
c001ebb1:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001ebb7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebbb:	50                   	push   eax
c001ebbc:	e8 6f 48 ff ff       	call   c0013430 <File::File(char const*, Process*)>
c001ebc1:	83 c4 10             	add    esp,0x10
c001ebc4:	85 ff                	test   edi,edi
c001ebc6:	75 0a                	jne    c001ebd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	68 1b c5 02 c0       	push   0xc002c51b
c001ebd0:	eb 27                	jmp    c001ebf9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebd2:	50                   	push   eax
c001ebd3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebd7:	50                   	push   eax
c001ebd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebdc:	50                   	push   eax
c001ebdd:	57                   	push   edi
c001ebde:	e8 5d 4b ff ff       	call   c0013740 <File::stat(unsigned long long*, bool*)>
c001ebe3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	89 e8                	mov    eax,ebp
c001ebed:	84 c0                	test   al,al
c001ebef:	74 19                	je     c001ec0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	68 2f c5 02 c0       	push   0xc002c52f
c001ebf9:	e8 7f b9 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001ebfe:	31 ed                	xor    ebp,ebp
c001ec00:	e8 74 f1 ff ff       	call   c001dd79 <unlockScheduler()>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	eb 75                	jmp    c001ec7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec0a:	50                   	push   eax
c001ec0b:	50                   	push   eax
c001ec0c:	6a 01                	push   0x1
c001ec0e:	57                   	push   edi
c001ec0f:	e8 80 48 ff ff       	call   c0013494 <File::open(FileOpenMode)>
c001ec14:	83 c4 10             	add    esp,0x10
c001ec17:	85 c0                	test   eax,eax
c001ec19:	74 17                	je     c001ec32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec1b:	83 ec 0c             	sub    esp,0xc
c001ec1e:	68 48 c5 02 c0       	push   0xc002c548
c001ec23:	e8 55 b9 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001ec28:	e8 4c f1 ff ff       	call   c001dd79 <unlockScheduler()>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	eb 4d                	jmp    c001ec7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec32:	0f b7 f6             	movzx  esi,si
c001ec35:	50                   	push   eax
c001ec36:	0f b7 db             	movzx  ebx,bx
c001ec39:	50                   	push   eax
c001ec3a:	56                   	push   esi
c001ec3b:	53                   	push   ebx
c001ec3c:	e8 b7 fd ff ff       	call   c001e9f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec41:	5a                   	pop    edx
c001ec42:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec44:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec48:	51                   	push   ecx
c001ec49:	50                   	push   eax
c001ec4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec52:	57                   	push   edi
c001ec53:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec56:	83 c4 14             	add    esp,0x14
c001ec59:	57                   	push   edi
c001ec5a:	e8 93 48 ff ff       	call   c00134f2 <File::close()>
c001ec5f:	c6 05 25 19 03 c0 00 	mov    BYTE PTR ds:0xc0031925,0x0
c001ec66:	e8 0e f1 ff ff       	call   c001dd79 <unlockScheduler()>
c001ec6b:	59                   	pop    ecx
c001ec6c:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001ec72:	e8 17 f7 ff ff       	call   c001e38e <unblockTask(ThreadControlBlock*)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec7f:	83 c4 2c             	add    esp,0x2c
c001ec82:	89 e8                	mov    eax,ebp
c001ec84:	5b                   	pop    ebx
c001ec85:	5e                   	pop    esi
c001ec86:	5f                   	pop    edi
c001ec87:	5d                   	pop    ebp
c001ec88:	c3                   	ret    

c001ec89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec89:	57                   	push   edi
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec98:	83 e8 06             	sub    eax,0x6
c001ec9b:	0f b7 c0             	movzx  eax,ax
c001ec9e:	50                   	push   eax
c001ec9f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eca4:	50                   	push   eax
c001eca5:	e8 4e fd ff ff       	call   c001e9f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecaa:	5a                   	pop    edx
c001ecab:	5e                   	pop    esi
c001ecac:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecaf:	8d 56 fa             	lea    edx,[esi-0x6]
c001ecb2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ecb8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ecbb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecbe:	83 c2 02             	add    edx,0x2
c001ecc1:	66 89 10             	mov    WORD PTR [eax],dx
c001ecc4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecc7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eccb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecd2:	89 d6                	mov    esi,edx
c001ecd4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecda:	66 81 e6 ff fd       	and    si,0xfdff
c001ecdf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ece3:	74 07                	je     c001ecec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ece5:	89 d6                	mov    esi,edx
c001ece7:	66 81 ce 00 02       	or     si,0x200
c001ecec:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ecf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecf5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ecf9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed01:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed04:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed0c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed0f:	5b                   	pop    ebx
c001ed10:	5e                   	pop    esi
c001ed11:	5f                   	pop    edi
c001ed12:	c3                   	ret    

c001ed13 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed18:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed1d:	c1 e0 04             	shl    eax,0x4
c001ed20:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed23:	c3                   	ret    

c001ed24 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed2e:	c1 e0 04             	shl    eax,0x4
c001ed31:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed35:	c3                   	ret    

c001ed36 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed40:	c1 e0 04             	shl    eax,0x4
c001ed43:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed46:	c3                   	ret    

c001ed47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed51:	c1 e0 04             	shl    eax,0x4
c001ed54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed58:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed5b:	c3                   	ret    

c001ed5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed66:	c1 e0 04             	shl    eax,0x4
c001ed69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed6d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed71:	c3                   	ret    

c001ed72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7c:	c1 e0 04             	shl    eax,0x4
c001ed7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed83:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed86:	c3                   	ret    

c001ed87 <Vm::faultHandler(regs*)>:
c001ed87:	55                   	push   ebp
c001ed88:	57                   	push   edi
c001ed89:	56                   	push   esi
c001ed8a:	53                   	push   ebx
c001ed8b:	83 ec 1c             	sub    esp,0x1c
c001ed8e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed92:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed95:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed98:	0f b7 c1             	movzx  eax,cx
c001ed9b:	50                   	push   eax
c001ed9c:	0f b7 c3             	movzx  eax,bx
c001ed9f:	c1 e3 04             	shl    ebx,0x4
c001eda2:	50                   	push   eax
c001eda3:	e8 50 fc ff ff       	call   c001e9f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eda8:	5a                   	pop    edx
c001eda9:	89 c5                	mov    ebp,eax
c001edab:	5e                   	pop    esi
c001edac:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001edb0:	50                   	push   eax
c001edb1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001edb5:	50                   	push   eax
c001edb6:	e8 3d fc ff ff       	call   c001e9f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001edbb:	01 cb                	add    ebx,ecx
c001edbd:	89 c6                	mov    esi,eax
c001edbf:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001edc3:	50                   	push   eax
c001edc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edc8:	50                   	push   eax
c001edc9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edcd:	50                   	push   eax
c001edce:	55                   	push   ebp
c001edcf:	53                   	push   ebx
c001edd0:	b3 06                	mov    bl,0x6
c001edd2:	68 61 c5 02 c0       	push   0xc002c561
c001edd7:	e8 fc 40 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001eddc:	83 c4 20             	add    esp,0x20
c001eddf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ede4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ede9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eded:	3c 9d                	cmp    al,0x9d
c001edef:	0f 84 d7 02 00 00    	je     c001f0cc <Vm::faultHandler(regs*)+0x345>
c001edf5:	0f 87 a3 00 00 00    	ja     c001ee9e <Vm::faultHandler(regs*)+0x117>
c001edfb:	3c 66                	cmp    al,0x66
c001edfd:	0f 84 15 02 00 00    	je     c001f018 <Vm::faultHandler(regs*)+0x291>
c001ee03:	77 5f                	ja     c001ee64 <Vm::faultHandler(regs*)+0xdd>
c001ee05:	3c 36                	cmp    al,0x36
c001ee07:	0f 84 f1 01 00 00    	je     c001effe <Vm::faultHandler(regs*)+0x277>
c001ee0d:	77 28                	ja     c001ee37 <Vm::faultHandler(regs*)+0xb0>
c001ee0f:	3c 26                	cmp    al,0x26
c001ee11:	0f 84 99 01 00 00    	je     c001efb0 <Vm::faultHandler(regs*)+0x229>
c001ee17:	3c 2e                	cmp    al,0x2e
c001ee19:	0f 85 3b 07 00 00    	jne    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ee1f:	83 ec 0c             	sub    esp,0xc
c001ee22:	31 db                	xor    ebx,ebx
c001ee24:	68 76 c5 02 c0       	push   0xc002c576
c001ee29:	e8 aa 40 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001ee2e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee31:	83 c4 10             	add    esp,0x10
c001ee34:	45                   	inc    ebp
c001ee35:	eb b2                	jmp    c001ede9 <Vm::faultHandler(regs*)+0x62>
c001ee37:	3c 64                	cmp    al,0x64
c001ee39:	0f 84 8b 01 00 00    	je     c001efca <Vm::faultHandler(regs*)+0x243>
c001ee3f:	0f 87 9f 01 00 00    	ja     c001efe4 <Vm::faultHandler(regs*)+0x25d>
c001ee45:	3c 3e                	cmp    al,0x3e
c001ee47:	0f 85 0d 07 00 00    	jne    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	b3 01                	mov    bl,0x1
c001ee52:	68 7a c5 02 c0       	push   0xc002c57a
c001ee57:	e8 7c 40 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001ee5c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	eb d0                	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001ee64:	3c 6d                	cmp    al,0x6d
c001ee66:	0f 84 af 03 00 00    	je     c001f21b <Vm::faultHandler(regs*)+0x494>
c001ee6c:	77 15                	ja     c001ee83 <Vm::faultHandler(regs*)+0xfc>
c001ee6e:	3c 67                	cmp    al,0x67
c001ee70:	0f 84 bf 01 00 00    	je     c001f035 <Vm::faultHandler(regs*)+0x2ae>
c001ee76:	3c 6c                	cmp    al,0x6c
c001ee78:	0f 84 3f 03 00 00    	je     c001f1bd <Vm::faultHandler(regs*)+0x436>
c001ee7e:	e9 d7 06 00 00       	jmp    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ee83:	3c 6f                	cmp    al,0x6f
c001ee85:	0f 84 a4 04 00 00    	je     c001f32f <Vm::faultHandler(regs*)+0x5a8>
c001ee8b:	0f 82 11 04 00 00    	jb     c001f2a2 <Vm::faultHandler(regs*)+0x51b>
c001ee91:	3c 9c                	cmp    al,0x9c
c001ee93:	0f 84 ba 01 00 00    	je     c001f053 <Vm::faultHandler(regs*)+0x2cc>
c001ee99:	e9 bc 06 00 00       	jmp    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ee9e:	3c ec                	cmp    al,0xec
c001eea0:	0f 84 24 06 00 00    	je     c001f4ca <Vm::faultHandler(regs*)+0x743>
c001eea6:	0f 87 93 00 00 00    	ja     c001ef3f <Vm::faultHandler(regs*)+0x1b8>
c001eeac:	3c e4                	cmp    al,0xe4
c001eeae:	0f 84 5c 05 00 00    	je     c001f410 <Vm::faultHandler(regs*)+0x689>
c001eeb4:	77 6a                	ja     c001ef20 <Vm::faultHandler(regs*)+0x199>
c001eeb6:	3c cd                	cmp    al,0xcd
c001eeb8:	0f 84 7e 02 00 00    	je     c001f13c <Vm::faultHandler(regs*)+0x3b5>
c001eebe:	3c cf                	cmp    al,0xcf
c001eec0:	0f 85 94 06 00 00    	jne    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	68 be c5 02 c0       	push   0xc002c5be
c001eece:	e8 05 40 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001eed3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eed6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eed9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eedd:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eee0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eee4:	0d 00 02 02 00       	or     eax,0x20200
c001eee9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eeec:	56                   	push   esi
c001eeed:	53                   	push   ebx
c001eeee:	52                   	push   edx
c001eeef:	68 c4 c5 02 c0       	push   0xc002c5c4
c001eef4:	e8 df 3f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001eef9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eefd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef03:	66 c1 e8 09          	shr    ax,0x9
c001ef07:	83 e0 01             	and    eax,0x1
c001ef0a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef0d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef10:	83 c0 06             	add    eax,0x6
c001ef13:	25 ff ff 00 00       	and    eax,0xffff
c001ef18:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef1b:	e9 95 02 00 00       	jmp    c001f1b5 <Vm::faultHandler(regs*)+0x42e>
c001ef20:	3c e6                	cmp    al,0xe6
c001ef22:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef26:	0f 84 4e 05 00 00    	je     c001f47a <Vm::faultHandler(regs*)+0x6f3>
c001ef2c:	0f 82 0a 05 00 00    	jb     c001f43c <Vm::faultHandler(regs*)+0x6b5>
c001ef32:	3c e7                	cmp    al,0xe7
c001ef34:	0f 84 69 05 00 00    	je     c001f4a3 <Vm::faultHandler(regs*)+0x71c>
c001ef3a:	e9 1b 06 00 00       	jmp    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ef3f:	3c ef                	cmp    al,0xef
c001ef41:	0f 84 e6 05 00 00    	je     c001f52d <Vm::faultHandler(regs*)+0x7a6>
c001ef47:	77 37                	ja     c001ef80 <Vm::faultHandler(regs*)+0x1f9>
c001ef49:	3c ed                	cmp    al,0xed
c001ef4b:	0f 84 a3 05 00 00    	je     c001f4f4 <Vm::faultHandler(regs*)+0x76d>
c001ef51:	3c ee                	cmp    al,0xee
c001ef53:	0f 85 01 06 00 00    	jne    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ef59:	52                   	push   edx
c001ef5a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef5d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef60:	68 5f c6 02 c0       	push   0xc002c65f
c001ef65:	e8 6e 3f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001ef6a:	59                   	pop    ecx
c001ef6b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef6f:	5b                   	pop    ebx
c001ef70:	50                   	push   eax
c001ef71:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef75:	50                   	push   eax
c001ef76:	e8 2a fa ff ff       	call   c001e9a5 <Vm::outbv(unsigned short, unsigned char)>
c001ef7b:	e9 a5 05 00 00       	jmp    c001f525 <Vm::faultHandler(regs*)+0x79e>
c001ef80:	3c fa                	cmp    al,0xfa
c001ef82:	0f 84 f7 01 00 00    	je     c001f17f <Vm::faultHandler(regs*)+0x3f8>
c001ef88:	3c fb                	cmp    al,0xfb
c001ef8a:	0f 84 0a 02 00 00    	je     c001f19a <Vm::faultHandler(regs*)+0x413>
c001ef90:	3c f3                	cmp    al,0xf3
c001ef92:	0f 85 c2 05 00 00    	jne    c001f55a <Vm::faultHandler(regs*)+0x7d3>
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	68 97 c5 02 c0       	push   0xc002c597
c001efa0:	e8 33 3f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001efa5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	e9 84 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	b3 02                	mov    bl,0x2
c001efb5:	68 72 c5 02 c0       	push   0xc002c572
c001efba:	e8 19 3f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001efbf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efc2:	83 c4 10             	add    esp,0x10
c001efc5:	e9 6a fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001efca:	83 ec 0c             	sub    esp,0xc
c001efcd:	b3 03                	mov    bl,0x3
c001efcf:	68 7e c5 02 c0       	push   0xc002c57e
c001efd4:	e8 ff 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001efd9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efdc:	83 c4 10             	add    esp,0x10
c001efdf:	e9 50 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	b3 04                	mov    bl,0x4
c001efe9:	68 82 c5 02 c0       	push   0xc002c582
c001efee:	e8 e5 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001eff3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	e9 36 fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001effe:	83 ec 0c             	sub    esp,0xc
c001f001:	b3 05                	mov    bl,0x5
c001f003:	68 86 c5 02 c0       	push   0xc002c586
c001f008:	e8 cb 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f00d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f010:	83 c4 10             	add    esp,0x10
c001f013:	e9 1c fe ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001f018:	83 ec 0c             	sub    esp,0xc
c001f01b:	68 8a c5 02 c0       	push   0xc002c58a
c001f020:	e8 b3 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f025:	83 c4 10             	add    esp,0x10
c001f028:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f02b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f030:	e9 ff fd ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001f035:	50                   	push   eax
c001f036:	50                   	push   eax
c001f037:	6a 01                	push   0x1
c001f039:	68 8f c5 02 c0       	push   0xc002c58f
c001f03e:	e8 95 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f043:	83 c4 10             	add    esp,0x10
c001f046:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f049:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f04e:	e9 e1 fd ff ff       	jmp    c001ee34 <Vm::faultHandler(regs*)+0xad>
c001f053:	83 ec 0c             	sub    esp,0xc
c001f056:	68 9d c5 02 c0       	push   0xc002c59d
c001f05b:	e8 78 3e ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f060:	83 c4 10             	add    esp,0x10
c001f063:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f066:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f06b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f06e:	74 2f                	je     c001f09f <Vm::faultHandler(regs*)+0x318>
c001f070:	83 ea 04             	sub    edx,0x4
c001f073:	25 ff 0d 00 00       	and    eax,0xdff
c001f078:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f07e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f081:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f084:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f08a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f08e:	0f 84 bf 04 00 00    	je     c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f094:	80 cc 02             	or     ah,0x2
c001f097:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f09a:	e9 b4 04 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f09f:	83 ea 02             	sub    edx,0x2
c001f0a2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f0a8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f0ab:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0b5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0b9:	74 05                	je     c001f0c0 <Vm::faultHandler(regs*)+0x339>
c001f0bb:	80 cc 02             	or     ah,0x2
c001f0be:	eb 03                	jmp    c001f0c3 <Vm::faultHandler(regs*)+0x33c>
c001f0c0:	80 e4 fd             	and    ah,0xfd
c001f0c3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0c7:	e9 87 04 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f0cc:	83 ec 0c             	sub    esp,0xc
c001f0cf:	68 a4 c5 02 c0       	push   0xc002c5a4
c001f0d4:	e8 ff 3d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f0d9:	83 c4 10             	add    esp,0x10
c001f0dc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0e1:	74 28                	je     c001f10b <Vm::faultHandler(regs*)+0x384>
c001f0e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0e5:	25 ff 0d 00 00       	and    eax,0xdff
c001f0ea:	0d 00 02 02 00       	or     eax,0x20200
c001f0ef:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0f2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0fa:	c1 e8 09             	shr    eax,0x9
c001f0fd:	83 e0 01             	and    eax,0x1
c001f100:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f103:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f106:	83 c0 04             	add    eax,0x4
c001f109:	eb 24                	jmp    c001f12f <Vm::faultHandler(regs*)+0x3a8>
c001f10b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f10e:	0d 00 02 02 00       	or     eax,0x20200
c001f113:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f116:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f119:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f11f:	66 c1 e8 09          	shr    ax,0x9
c001f123:	83 e0 01             	and    eax,0x1
c001f126:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f129:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f12c:	83 c0 02             	add    eax,0x2
c001f12f:	25 ff ff 00 00       	and    eax,0xffff
c001f134:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f137:	e9 17 04 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f13c:	53                   	push   ebx
c001f13d:	53                   	push   ebx
c001f13e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f142:	50                   	push   eax
c001f143:	68 aa c5 02 c0       	push   0xc002c5aa
c001f148:	e8 8b 3d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f14d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	3c ee                	cmp    al,0xee
c001f156:	75 10                	jne    c001f168 <Vm::faultHandler(regs*)+0x3e1>
c001f158:	83 ec 0c             	sub    esp,0xc
c001f15b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f15e:	e8 fa f8 ff ff       	call   c001ea5d <Vm::mainloop3(unsigned long)>
c001f163:	e9 c0 03 00 00       	jmp    c001f528 <Vm::faultHandler(regs*)+0x7a1>
c001f168:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	53                   	push   ebx
c001f170:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f174:	53                   	push   ebx
c001f175:	55                   	push   ebp
c001f176:	50                   	push   eax
c001f177:	57                   	push   edi
c001f178:	e8 0c fb ff ff       	call   c001ec89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f17d:	eb 36                	jmp    c001f1b5 <Vm::faultHandler(regs*)+0x42e>
c001f17f:	83 ec 0c             	sub    esp,0xc
c001f182:	68 b4 c5 02 c0       	push   0xc002c5b4
c001f187:	e8 4c 3d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f18c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f191:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f195:	e9 8b 03 00 00       	jmp    c001f525 <Vm::faultHandler(regs*)+0x79e>
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	68 b9 c5 02 c0       	push   0xc002c5b9
c001f1a2:	e8 31 3d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f1a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f1ac:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f1b0:	e9 70 03 00 00       	jmp    c001f525 <Vm::faultHandler(regs*)+0x79e>
c001f1b5:	83 c4 20             	add    esp,0x20
c001f1b8:	e9 99 03 00 00       	jmp    c001f556 <Vm::faultHandler(regs*)+0x7cf>
c001f1bd:	83 ec 0c             	sub    esp,0xc
c001f1c0:	68 f7 c5 02 c0       	push   0xc002c5f7
c001f1c5:	e8 0e 3d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f1ca:	83 c4 10             	add    esp,0x10
c001f1cd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1d5:	74 0d                	je     c001f1e4 <Vm::faultHandler(regs*)+0x45d>
c001f1d7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1de:	0f 87 9e 01 00 00    	ja     c001f382 <Vm::faultHandler(regs*)+0x5fb>
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1eb:	0f b7 db             	movzx  ebx,bx
c001f1ee:	50                   	push   eax
c001f1ef:	e8 9e f7 ff ff       	call   c001e992 <Vm::inbv(unsigned short)>
c001f1f4:	83 c4 0c             	add    esp,0xc
c001f1f7:	0f b6 c0             	movzx  eax,al
c001f1fa:	50                   	push   eax
c001f1fb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f1ff:	50                   	push   eax
c001f200:	53                   	push   ebx
c001f201:	e8 41 fb ff ff       	call   c001ed47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f206:	83 c4 10             	add    esp,0x10
c001f209:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f20c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f210:	74 03                	je     c001f215 <Vm::faultHandler(regs*)+0x48e>
c001f212:	48                   	dec    eax
c001f213:	eb 01                	jmp    c001f216 <Vm::faultHandler(regs*)+0x48f>
c001f215:	40                   	inc    eax
c001f216:	0f b7 c0             	movzx  eax,ax
c001f219:	eb 7f                	jmp    c001f29a <Vm::faultHandler(regs*)+0x513>
c001f21b:	83 ec 0c             	sub    esp,0xc
c001f21e:	68 29 c6 02 c0       	push   0xc002c629
c001f223:	e8 b0 3c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f228:	83 c4 10             	add    esp,0x10
c001f22b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f22e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f233:	74 0d                	je     c001f242 <Vm::faultHandler(regs*)+0x4bb>
c001f235:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f23c:	0f 87 40 01 00 00    	ja     c001f382 <Vm::faultHandler(regs*)+0x5fb>
c001f242:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f245:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f249:	0f b7 db             	movzx  ebx,bx
c001f24c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f251:	74 20                	je     c001f273 <Vm::faultHandler(regs*)+0x4ec>
c001f253:	ed                   	in     eax,dx
c001f254:	51                   	push   ecx
c001f255:	50                   	push   eax
c001f256:	56                   	push   esi
c001f257:	53                   	push   ebx
c001f258:	e8 15 fb ff ff       	call   c001ed72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f263:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f267:	74 05                	je     c001f26e <Vm::faultHandler(regs*)+0x4e7>
c001f269:	83 e8 04             	sub    eax,0x4
c001f26c:	eb 27                	jmp    c001f295 <Vm::faultHandler(regs*)+0x50e>
c001f26e:	83 c0 04             	add    eax,0x4
c001f271:	eb 22                	jmp    c001f295 <Vm::faultHandler(regs*)+0x50e>
c001f273:	66 ed                	in     ax,dx
c001f275:	0f b7 c0             	movzx  eax,ax
c001f278:	52                   	push   edx
c001f279:	50                   	push   eax
c001f27a:	56                   	push   esi
c001f27b:	53                   	push   ebx
c001f27c:	e8 db fa ff ff       	call   c001ed5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f281:	83 c4 10             	add    esp,0x10
c001f284:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f287:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f28b:	74 05                	je     c001f292 <Vm::faultHandler(regs*)+0x50b>
c001f28d:	83 e8 02             	sub    eax,0x2
c001f290:	eb 03                	jmp    c001f295 <Vm::faultHandler(regs*)+0x50e>
c001f292:	83 c0 02             	add    eax,0x2
c001f295:	25 ff ff 00 00       	and    eax,0xffff
c001f29a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f29d:	e9 b1 02 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f2a2:	83 ec 0c             	sub    esp,0xc
c001f2a5:	4b                   	dec    ebx
c001f2a6:	68 2f c6 02 c0       	push   0xc002c62f
c001f2ab:	e8 28 3c ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	80 fb 05             	cmp    bl,0x5
c001f2b6:	77 0a                	ja     c001f2c2 <Vm::faultHandler(regs*)+0x53b>
c001f2b8:	0f b6 db             	movzx  ebx,bl
c001f2bb:	ff 24 9d a0 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3960]
c001f2c2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2c6:	eb 1b                	jmp    c001f2e3 <Vm::faultHandler(regs*)+0x55c>
c001f2c8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2cc:	eb 15                	jmp    c001f2e3 <Vm::faultHandler(regs*)+0x55c>
c001f2ce:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2d2:	eb 0f                	jmp    c001f2e3 <Vm::faultHandler(regs*)+0x55c>
c001f2d4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2d8:	eb 09                	jmp    c001f2e3 <Vm::faultHandler(regs*)+0x55c>
c001f2da:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2dd:	eb 04                	jmp    c001f2e3 <Vm::faultHandler(regs*)+0x55c>
c001f2df:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2e8:	74 0d                	je     c001f2f7 <Vm::faultHandler(regs*)+0x570>
c001f2ea:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f2f1:	0f 87 8b 00 00 00    	ja     c001f382 <Vm::faultHandler(regs*)+0x5fb>
c001f2f7:	53                   	push   ebx
c001f2f8:	53                   	push   ebx
c001f2f9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f2fd:	52                   	push   edx
c001f2fe:	50                   	push   eax
c001f2ff:	e8 0f fa ff ff       	call   c001ed13 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f304:	5e                   	pop    esi
c001f305:	0f b6 c0             	movzx  eax,al
c001f308:	5d                   	pop    ebp
c001f309:	50                   	push   eax
c001f30a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f30e:	50                   	push   eax
c001f30f:	e8 91 f6 ff ff       	call   c001e9a5 <Vm::outbv(unsigned short, unsigned char)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f31a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f31e:	74 03                	je     c001f323 <Vm::faultHandler(regs*)+0x59c>
c001f320:	48                   	dec    eax
c001f321:	eb 01                	jmp    c001f324 <Vm::faultHandler(regs*)+0x59d>
c001f323:	40                   	inc    eax
c001f324:	0f b7 c0             	movzx  eax,ax
c001f327:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f32a:	e9 24 02 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f32f:	83 ec 0c             	sub    esp,0xc
c001f332:	4b                   	dec    ebx
c001f333:	68 2f c6 02 c0       	push   0xc002c62f
c001f338:	e8 9b 3b ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	80 fb 05             	cmp    bl,0x5
c001f343:	77 0a                	ja     c001f34f <Vm::faultHandler(regs*)+0x5c8>
c001f345:	0f b6 db             	movzx  ebx,bl
c001f348:	ff 24 9d b8 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3948]
c001f34f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f353:	eb 1b                	jmp    c001f370 <Vm::faultHandler(regs*)+0x5e9>
c001f355:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f359:	eb 15                	jmp    c001f370 <Vm::faultHandler(regs*)+0x5e9>
c001f35b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f35f:	eb 0f                	jmp    c001f370 <Vm::faultHandler(regs*)+0x5e9>
c001f361:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f365:	eb 09                	jmp    c001f370 <Vm::faultHandler(regs*)+0x5e9>
c001f367:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f36a:	eb 04                	jmp    c001f370 <Vm::faultHandler(regs*)+0x5e9>
c001f36c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f370:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f373:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f378:	74 39                	je     c001f3b3 <Vm::faultHandler(regs*)+0x62c>
c001f37a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f380:	76 31                	jbe    c001f3b3 <Vm::faultHandler(regs*)+0x62c>
c001f382:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f386:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f38a:	51                   	push   ecx
c001f38b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f38f:	51                   	push   ecx
c001f390:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f394:	51                   	push   ecx
c001f395:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f399:	51                   	push   ecx
c001f39a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f39e:	52                   	push   edx
c001f39f:	50                   	push   eax
c001f3a0:	50                   	push   eax
c001f3a1:	68 fc c5 02 c0       	push   0xc002c5fc
c001f3a6:	e8 2d 3b ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f3ab:	83 c4 20             	add    esp,0x20
c001f3ae:	e9 fb 01 00 00       	jmp    c001f5ae <Vm::faultHandler(regs*)+0x827>
c001f3b3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3b6:	0f b7 d3             	movzx  edx,bx
c001f3b9:	81 e6 00 04 00 00    	and    esi,0x400
c001f3bf:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3c2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3c7:	74 1d                	je     c001f3e6 <Vm::faultHandler(regs*)+0x65f>
c001f3c9:	51                   	push   ecx
c001f3ca:	51                   	push   ecx
c001f3cb:	52                   	push   edx
c001f3cc:	50                   	push   eax
c001f3cd:	e8 64 f9 ff ff       	call   c001ed36 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3d2:	83 c4 10             	add    esp,0x10
c001f3d5:	89 ea                	mov    edx,ebp
c001f3d7:	ef                   	out    dx,eax
c001f3d8:	85 f6                	test   esi,esi
c001f3da:	74 05                	je     c001f3e1 <Vm::faultHandler(regs*)+0x65a>
c001f3dc:	83 eb 04             	sub    ebx,0x4
c001f3df:	eb 21                	jmp    c001f402 <Vm::faultHandler(regs*)+0x67b>
c001f3e1:	83 c3 04             	add    ebx,0x4
c001f3e4:	eb 1c                	jmp    c001f402 <Vm::faultHandler(regs*)+0x67b>
c001f3e6:	51                   	push   ecx
c001f3e7:	51                   	push   ecx
c001f3e8:	52                   	push   edx
c001f3e9:	50                   	push   eax
c001f3ea:	e8 35 f9 ff ff       	call   c001ed24 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	89 ea                	mov    edx,ebp
c001f3f4:	66 ef                	out    dx,ax
c001f3f6:	85 f6                	test   esi,esi
c001f3f8:	74 05                	je     c001f3ff <Vm::faultHandler(regs*)+0x678>
c001f3fa:	83 eb 02             	sub    ebx,0x2
c001f3fd:	eb 03                	jmp    c001f402 <Vm::faultHandler(regs*)+0x67b>
c001f3ff:	83 c3 02             	add    ebx,0x2
c001f402:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f408:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f40b:	e9 43 01 00 00       	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f410:	53                   	push   ebx
c001f411:	53                   	push   ebx
c001f412:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f416:	50                   	push   eax
c001f417:	68 35 c6 02 c0       	push   0xc002c635
c001f41c:	e8 b7 3a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f421:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f428:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f42c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f42f:	e8 5e f5 ff ff       	call   c001e992 <Vm::inbv(unsigned short)>
c001f434:	0f b6 c0             	movzx  eax,al
c001f437:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f43a:	eb 5e                	jmp    c001f49a <Vm::faultHandler(regs*)+0x713>
c001f43c:	51                   	push   ecx
c001f43d:	51                   	push   ecx
c001f43e:	53                   	push   ebx
c001f43f:	68 3b c6 02 c0       	push   0xc002c63b
c001f444:	e8 8f 3a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f449:	83 c4 10             	add    esp,0x10
c001f44c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f451:	74 07                	je     c001f45a <Vm::faultHandler(regs*)+0x6d3>
c001f453:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f457:	ed                   	in     eax,dx
c001f458:	eb 14                	jmp    c001f46e <Vm::faultHandler(regs*)+0x6e7>
c001f45a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f45d:	66 31 db             	xor    bx,bx
c001f460:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f463:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f467:	66 ed                	in     ax,dx
c001f469:	0f b7 c0             	movzx  eax,ax
c001f46c:	09 d8                	or     eax,ebx
c001f46e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f471:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f475:	e9 dc 00 00 00       	jmp    c001f556 <Vm::faultHandler(regs*)+0x7cf>
c001f47a:	50                   	push   eax
c001f47b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f47e:	53                   	push   ebx
c001f47f:	68 41 c6 02 c0       	push   0xc002c641
c001f484:	e8 4f 3a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f489:	58                   	pop    eax
c001f48a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f48e:	5a                   	pop    edx
c001f48f:	50                   	push   eax
c001f490:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f494:	50                   	push   eax
c001f495:	e8 0b f5 ff ff       	call   c001e9a5 <Vm::outbv(unsigned short, unsigned char)>
c001f49a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f49e:	e9 85 00 00 00       	jmp    c001f528 <Vm::faultHandler(regs*)+0x7a1>
c001f4a3:	50                   	push   eax
c001f4a4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f4a7:	53                   	push   ebx
c001f4a8:	68 4a c6 02 c0       	push   0xc002c64a
c001f4ad:	e8 26 3a ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f4b2:	83 c4 10             	add    esp,0x10
c001f4b5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4b9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4be:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4c1:	74 03                	je     c001f4c6 <Vm::faultHandler(regs*)+0x73f>
c001f4c3:	ef                   	out    dx,eax
c001f4c4:	eb ab                	jmp    c001f471 <Vm::faultHandler(regs*)+0x6ea>
c001f4c6:	66 ef                	out    dx,ax
c001f4c8:	eb a7                	jmp    c001f471 <Vm::faultHandler(regs*)+0x6ea>
c001f4ca:	55                   	push   ebp
c001f4cb:	55                   	push   ebp
c001f4cc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4cf:	68 53 c6 02 c0       	push   0xc002c653
c001f4d4:	e8 ff 39 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f4d9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4e0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f4e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e7:	e8 a6 f4 ff ff       	call   c001e992 <Vm::inbv(unsigned short)>
c001f4ec:	0f b6 c0             	movzx  eax,al
c001f4ef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4f2:	eb 31                	jmp    c001f525 <Vm::faultHandler(regs*)+0x79e>
c001f4f4:	56                   	push   esi
c001f4f5:	56                   	push   esi
c001f4f6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4f9:	68 59 c6 02 c0       	push   0xc002c659
c001f4fe:	e8 d5 39 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f503:	83 c4 10             	add    esp,0x10
c001f506:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f509:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f50e:	74 03                	je     c001f513 <Vm::faultHandler(regs*)+0x78c>
c001f510:	ed                   	in     eax,dx
c001f511:	eb 0d                	jmp    c001f520 <Vm::faultHandler(regs*)+0x799>
c001f513:	66 ed                	in     ax,dx
c001f515:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f518:	0f b7 c0             	movzx  eax,ax
c001f51b:	66 31 d2             	xor    dx,dx
c001f51e:	09 d0                	or     eax,edx
c001f520:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f523:	eb 2e                	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f525:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f528:	83 c4 10             	add    esp,0x10
c001f52b:	eb 29                	jmp    c001f556 <Vm::faultHandler(regs*)+0x7cf>
c001f52d:	50                   	push   eax
c001f52e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f531:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f534:	68 68 c6 02 c0       	push   0xc002c668
c001f539:	e8 9a 39 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f544:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f549:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f54c:	74 03                	je     c001f551 <Vm::faultHandler(regs*)+0x7ca>
c001f54e:	ef                   	out    dx,eax
c001f54f:	eb 02                	jmp    c001f553 <Vm::faultHandler(regs*)+0x7cc>
c001f551:	66 ef                	out    dx,ax
c001f553:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f556:	b0 01                	mov    al,0x1
c001f558:	eb 56                	jmp    c001f5b0 <Vm::faultHandler(regs*)+0x829>
c001f55a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f55e:	51                   	push   ecx
c001f55f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f563:	51                   	push   ecx
c001f564:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f568:	51                   	push   ecx
c001f569:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f56d:	51                   	push   ecx
c001f56e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f572:	52                   	push   edx
c001f573:	50                   	push   eax
c001f574:	50                   	push   eax
c001f575:	68 71 c6 02 c0       	push   0xc002c671
c001f57a:	e8 59 39 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c001f57f:	83 c4 20             	add    esp,0x20
c001f582:	83 ec 0c             	sub    esp,0xc
c001f585:	6a 60                	push   0x60
c001f587:	e8 06 f4 ff ff       	call   c001e992 <Vm::inbv(unsigned short)>
c001f58c:	83 c4 10             	add    esp,0x10
c001f58f:	3c 1c                	cmp    al,0x1c
c001f591:	74 04                	je     c001f597 <Vm::faultHandler(regs*)+0x810>
c001f593:	3c 5a                	cmp    al,0x5a
c001f595:	75 eb                	jne    c001f582 <Vm::faultHandler(regs*)+0x7fb>
c001f597:	3c 1c                	cmp    al,0x1c
c001f599:	74 04                	je     c001f59f <Vm::faultHandler(regs*)+0x818>
c001f59b:	3c 5a                	cmp    al,0x5a
c001f59d:	75 0f                	jne    c001f5ae <Vm::faultHandler(regs*)+0x827>
c001f59f:	83 ec 0c             	sub    esp,0xc
c001f5a2:	6a 60                	push   0x60
c001f5a4:	e8 e9 f3 ff ff       	call   c001e992 <Vm::inbv(unsigned short)>
c001f5a9:	83 c4 10             	add    esp,0x10
c001f5ac:	eb e9                	jmp    c001f597 <Vm::faultHandler(regs*)+0x810>
c001f5ae:	31 c0                	xor    eax,eax
c001f5b0:	83 c4 1c             	add    esp,0x1c
c001f5b3:	5b                   	pop    ebx
c001f5b4:	5e                   	pop    esi
c001f5b5:	5f                   	pop    edi
c001f5b6:	5d                   	pop    ebp
c001f5b7:	c3                   	ret    

c001f5b8 <Vm::x87Save(void*)>:
c001f5b8:	83 ec 10             	sub    esp,0x10
c001f5bb:	6a 48                	push   0x48
c001f5bd:	68 60 19 03 c0       	push   0xc0031960
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 79 11 fe ff       	call   c0000744 <memcpy>
c001f5cb:	83 c4 1c             	add    esp,0x1c
c001f5ce:	c3                   	ret    

c001f5cf <Vm::x87Load(void*)>:
c001f5cf:	83 ec 10             	sub    esp,0x10
c001f5d2:	6a 48                	push   0x48
c001f5d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5d8:	68 60 19 03 c0       	push   0xc0031960
c001f5dd:	e8 62 11 fe ff       	call   c0000744 <memcpy>
c001f5e2:	83 c4 1c             	add    esp,0x1c
c001f5e5:	c3                   	ret    

c001f5e6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f5e6:	57                   	push   edi
c001f5e7:	56                   	push   esi
c001f5e8:	53                   	push   ebx
c001f5e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f1:	89 d6                	mov    esi,edx
c001f5f3:	89 d7                	mov    edi,edx
c001f5f5:	89 c1                	mov    ecx,eax
c001f5f7:	c1 ef 14             	shr    edi,0x14
c001f5fa:	89 d3                	mov    ebx,edx
c001f5fc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f602:	31 d2                	xor    edx,edx
c001f604:	89 f8                	mov    eax,edi
c001f606:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f60c:	bf ff 00 00 00       	mov    edi,0xff
c001f611:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f616:	83 d2 ff             	adc    edx,0xffffffff
c001f619:	39 c7                	cmp    edi,eax
c001f61b:	bf 00 00 00 00       	mov    edi,0x0
c001f620:	19 d7                	sbb    edi,edx
c001f622:	72 15                	jb     c001f639 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f624:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f628:	c1 e0 17             	shl    eax,0x17
c001f62b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f631:	09 f1                	or     ecx,esi
c001f633:	09 c1                	or     ecx,eax
c001f635:	89 cf                	mov    edi,ecx
c001f637:	eb 02                	jmp    c001f63b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f639:	31 ff                	xor    edi,edi
c001f63b:	89 f8                	mov    eax,edi
c001f63d:	5b                   	pop    ebx
c001f63e:	5e                   	pop    esi
c001f63f:	5f                   	pop    edi
c001f640:	c3                   	ret    

c001f641 <Vm::fpuInternalTo64(unsigned long long)>:
c001f641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f645:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f649:	c3                   	ret    

c001f64a <Vm::fpu32ToInternal(unsigned int)>:
c001f64a:	57                   	push   edi
c001f64b:	31 ff                	xor    edi,edi
c001f64d:	56                   	push   esi
c001f64e:	53                   	push   ebx
c001f64f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f653:	89 cb                	mov    ebx,ecx
c001f655:	89 ce                	mov    esi,ecx
c001f657:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f65d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f663:	c1 e9 17             	shr    ecx,0x17
c001f666:	89 f0                	mov    eax,esi
c001f668:	0f b6 d1             	movzx  edx,cl
c001f66b:	81 c2 80 03 00 00    	add    edx,0x380
c001f671:	89 d1                	mov    ecx,edx
c001f673:	89 fa                	mov    edx,edi
c001f675:	c1 e1 14             	shl    ecx,0x14
c001f678:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f67c:	c1 e0 1d             	shl    eax,0x1d
c001f67f:	89 d7                	mov    edi,edx
c001f681:	89 c6                	mov    esi,eax
c001f683:	89 ca                	mov    edx,ecx
c001f685:	89 f0                	mov    eax,esi
c001f687:	09 fa                	or     edx,edi
c001f689:	09 da                	or     edx,ebx
c001f68b:	5b                   	pop    ebx
c001f68c:	5e                   	pop    esi
c001f68d:	5f                   	pop    edi
c001f68e:	c3                   	ret    

c001f68f <Vm::fpu64ToInternal(unsigned long long)>:
c001f68f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f693:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f697:	c3                   	ret    

c001f698 <Vm::fpuFloatToLong(unsigned long long)>:
c001f698:	57                   	push   edi
c001f699:	31 c0                	xor    eax,eax
c001f69b:	56                   	push   esi
c001f69c:	31 d2                	xor    edx,edx
c001f69e:	53                   	push   ebx
c001f69f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6a7:	89 d9                	mov    ecx,ebx
c001f6a9:	c1 e9 14             	shr    ecx,0x14
c001f6ac:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6b2:	89 cf                	mov    edi,ecx
c001f6b4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6ba:	78 33                	js     c001f6ef <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6bc:	89 d9                	mov    ecx,ebx
c001f6be:	89 f0                	mov    eax,esi
c001f6c0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6c6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6cc:	89 ca                	mov    edx,ecx
c001f6ce:	b9 34 00 00 00       	mov    ecx,0x34
c001f6d3:	29 f9                	sub    ecx,edi
c001f6d5:	0f ad d0             	shrd   eax,edx,cl
c001f6d8:	d3 fa                	sar    edx,cl
c001f6da:	f6 c1 20             	test   cl,0x20
c001f6dd:	74 05                	je     c001f6e4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6df:	89 d0                	mov    eax,edx
c001f6e1:	c1 fa 1f             	sar    edx,0x1f
c001f6e4:	85 db                	test   ebx,ebx
c001f6e6:	79 07                	jns    c001f6ef <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6e8:	f7 d8                	neg    eax
c001f6ea:	83 d2 00             	adc    edx,0x0
c001f6ed:	f7 da                	neg    edx
c001f6ef:	5b                   	pop    ebx
c001f6f0:	5e                   	pop    esi
c001f6f1:	5f                   	pop    edi
c001f6f2:	c3                   	ret    

c001f6f3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6f3:	57                   	push   edi
c001f6f4:	31 c9                	xor    ecx,ecx
c001f6f6:	56                   	push   esi
c001f6f7:	53                   	push   ebx
c001f6f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6fc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f700:	0f ba e7 14          	bt     edi,0x14
c001f704:	72 07                	jb     c001f70d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f706:	01 f6                	add    esi,esi
c001f708:	11 ff                	adc    edi,edi
c001f70a:	41                   	inc    ecx
c001f70b:	eb f3                	jmp    c001f700 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f70d:	89 fa                	mov    edx,edi
c001f70f:	89 f0                	mov    eax,esi
c001f711:	bb 33 04 00 00       	mov    ebx,0x433
c001f716:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f71c:	29 cb                	sub    ebx,ecx
c001f71e:	89 d9                	mov    ecx,ebx
c001f720:	5b                   	pop    ebx
c001f721:	c1 e1 14             	shl    ecx,0x14
c001f724:	5e                   	pop    esi
c001f725:	09 ca                	or     edx,ecx
c001f727:	5f                   	pop    edi
c001f728:	c3                   	ret    

c001f729 <Vm::fpuLongToFloat(long long)>:
c001f729:	56                   	push   esi
c001f72a:	31 c0                	xor    eax,eax
c001f72c:	53                   	push   ebx
c001f72d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f735:	39 c8                	cmp    eax,ecx
c001f737:	19 d8                	sbb    eax,ebx
c001f739:	7d 04                	jge    c001f73f <Vm::fpuLongToFloat(long long)+0x16>
c001f73b:	31 f6                	xor    esi,esi
c001f73d:	eb 0c                	jmp    c001f74b <Vm::fpuLongToFloat(long long)+0x22>
c001f73f:	f7 d9                	neg    ecx
c001f741:	be 01 00 00 00       	mov    esi,0x1
c001f746:	83 d3 00             	adc    ebx,0x0
c001f749:	f7 db                	neg    ebx
c001f74b:	31 c0                	xor    eax,eax
c001f74d:	0f ba e3 14          	bt     ebx,0x14
c001f751:	72 07                	jb     c001f75a <Vm::fpuLongToFloat(long long)+0x31>
c001f753:	01 c9                	add    ecx,ecx
c001f755:	11 db                	adc    ebx,ebx
c001f757:	40                   	inc    eax
c001f758:	eb f3                	jmp    c001f74d <Vm::fpuLongToFloat(long long)+0x24>
c001f75a:	ba 33 04 00 00       	mov    edx,0x433
c001f75f:	29 c2                	sub    edx,eax
c001f761:	89 c8                	mov    eax,ecx
c001f763:	c1 e2 14             	shl    edx,0x14
c001f766:	89 d9                	mov    ecx,ebx
c001f768:	89 f3                	mov    ebx,esi
c001f76a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f770:	09 ca                	or     edx,ecx
c001f772:	84 db                	test   bl,bl
c001f774:	74 06                	je     c001f77c <Vm::fpuLongToFloat(long long)+0x53>
c001f776:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f77c:	5b                   	pop    ebx
c001f77d:	5e                   	pop    esi
c001f77e:	c3                   	ret    

c001f77f <Vm::fpuGet0()>:
c001f77f:	31 c0                	xor    eax,eax
c001f781:	31 d2                	xor    edx,edx
c001f783:	c3                   	ret    

c001f784 <Vm::fpuGet1()>:
c001f784:	b8 01 00 00 00       	mov    eax,0x1
c001f789:	31 d2                	xor    edx,edx
c001f78b:	c3                   	ret    

c001f78c <Vm::fpuGetPi()>:
c001f78c:	b8 03 00 00 00       	mov    eax,0x3
c001f791:	31 d2                	xor    edx,edx
c001f793:	c3                   	ret    

c001f794 <Vm::fpuGetLog2E()>:
c001f794:	83 ec 18             	sub    esp,0x18
c001f797:	68 d0 c6 02 c0       	push   0xc002c6d0
c001f79c:	e8 dc ad ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f7a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7a6:	31 d2                	xor    edx,edx
c001f7a8:	83 c4 1c             	add    esp,0x1c
c001f7ab:	c3                   	ret    

c001f7ac <Vm::fpuGetLogE2()>:
c001f7ac:	83 ec 18             	sub    esp,0x18
c001f7af:	68 dc c6 02 c0       	push   0xc002c6dc
c001f7b4:	e8 c4 ad ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f7b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7be:	31 d2                	xor    edx,edx
c001f7c0:	83 c4 1c             	add    esp,0x1c
c001f7c3:	c3                   	ret    

c001f7c4 <Vm::fpuGetLog210()>:
c001f7c4:	83 ec 18             	sub    esp,0x18
c001f7c7:	68 e8 c6 02 c0       	push   0xc002c6e8
c001f7cc:	e8 ac ad ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f7d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7d6:	31 d2                	xor    edx,edx
c001f7d8:	83 c4 1c             	add    esp,0x1c
c001f7db:	c3                   	ret    

c001f7dc <Vm::fpuGetLog102()>:
c001f7dc:	83 ec 18             	sub    esp,0x18
c001f7df:	68 f5 c6 02 c0       	push   0xc002c6f5
c001f7e4:	e8 94 ad ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f7e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7ee:	31 d2                	xor    edx,edx
c001f7f0:	83 c4 1c             	add    esp,0x1c
c001f7f3:	c3                   	ret    

c001f7f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f800:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f804:	0f 92 c0             	setb   al
c001f807:	c3                   	ret    

c001f808 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f808:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f810:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f814:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f818:	09 c2                	or     edx,eax
c001f81a:	0f 94 c0             	sete   al
c001f81d:	c3                   	ret    

c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f81e:	57                   	push   edi
c001f81f:	56                   	push   esi
c001f820:	53                   	push   ebx
c001f821:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f825:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f829:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f82d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f831:	57                   	push   edi
c001f832:	56                   	push   esi
c001f833:	53                   	push   ebx
c001f834:	51                   	push   ecx
c001f835:	e8 ce ff ff ff       	call   c001f808 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f83a:	83 c4 10             	add    esp,0x10
c001f83d:	88 c2                	mov    dl,al
c001f83f:	31 c0                	xor    eax,eax
c001f841:	84 d2                	test   dl,dl
c001f843:	75 0c                	jne    c001f851 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f845:	57                   	push   edi
c001f846:	56                   	push   esi
c001f847:	53                   	push   ebx
c001f848:	51                   	push   ecx
c001f849:	e8 a6 ff ff ff       	call   c001f7f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f84e:	83 c4 10             	add    esp,0x10
c001f851:	83 e0 01             	and    eax,0x1
c001f854:	5b                   	pop    ebx
c001f855:	88 c1                	mov    cl,al
c001f857:	83 e2 01             	and    edx,0x1
c001f85a:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f85f:	c1 e2 06             	shl    edx,0x6
c001f862:	83 e0 ba             	and    eax,0xffffffba
c001f865:	5e                   	pop    esi
c001f866:	09 c8                	or     eax,ecx
c001f868:	5f                   	pop    edi
c001f869:	09 d0                	or     eax,edx
c001f86b:	a2 61 19 03 c0       	mov    ds:0xc0031961,al
c001f870:	c3                   	ret    

c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f875:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f879:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f87d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f881:	c3                   	ret    

c001f882 <Vm::fpuAbs(unsigned long long)>:
c001f882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f88a:	c3                   	ret    

c001f88b <Vm::fpuChs(unsigned long long)>:
c001f88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f893:	f7 d8                	neg    eax
c001f895:	83 d2 00             	adc    edx,0x0
c001f898:	f7 da                	neg    edx
c001f89a:	c3                   	ret    

c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f89b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f89f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8a4:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8a8:	eb c7                	jmp    c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f8aa:	53                   	push   ebx
c001f8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8bb:	0f af ca             	imul   ecx,edx
c001f8be:	0f af d8             	imul   ebx,eax
c001f8c1:	f7 e2                	mul    edx
c001f8c3:	01 d9                	add    ecx,ebx
c001f8c5:	5b                   	pop    ebx
c001f8c6:	01 ca                	add    edx,ecx
c001f8c8:	c3                   	ret    

c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8c9:	83 ec 0c             	sub    esp,0xc
c001f8cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8dc:	e8 9b 70 00 00       	call   c002697c <__udivdi3>
c001f8e1:	83 c4 1c             	add    esp,0x1c
c001f8e4:	c3                   	ret    

c001f8e5 <Vm::fpuSquare(unsigned long long)>:
c001f8e5:	50                   	push   eax
c001f8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8ee:	52                   	push   edx
c001f8ef:	50                   	push   eax
c001f8f0:	52                   	push   edx
c001f8f1:	50                   	push   eax
c001f8f2:	e8 b3 ff ff ff       	call   c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8f7:	83 c4 14             	add    esp,0x14
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuGetReg(int)>:
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f903:	76 10                	jbe    c001f915 <Vm::fpuGetReg(int)+0x1a>
c001f905:	83 ec 0c             	sub    esp,0xc
c001f908:	68 02 c7 02 c0       	push   0xc002c702
c001f90d:	e8 6b ac ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f912:	83 c4 10             	add    esp,0x10
c001f915:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f91a:	b9 08 00 00 00       	mov    ecx,0x8
c001f91f:	c0 e8 03             	shr    al,0x3
c001f922:	83 e0 07             	and    eax,0x7
c001f925:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f929:	99                   	cdq    
c001f92a:	f7 f9                	idiv   ecx
c001f92c:	8b 04 d5 64 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce69c]
c001f933:	8b 14 d5 68 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce698]
c001f93a:	83 c4 0c             	add    esp,0xc
c001f93d:	c3                   	ret    

c001f93e <Vm::fpuSetReg(int, unsigned long long)>:
c001f93e:	57                   	push   edi
c001f93f:	56                   	push   esi
c001f940:	52                   	push   edx
c001f941:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f945:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f949:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f94e:	76 10                	jbe    c001f960 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f950:	83 ec 0c             	sub    esp,0xc
c001f953:	68 15 c7 02 c0       	push   0xc002c715
c001f958:	e8 20 ac ff ff       	call   c001a57d <Krnl::panic(char const*)>
c001f95d:	83 c4 10             	add    esp,0x10
c001f960:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f965:	b9 08 00 00 00       	mov    ecx,0x8
c001f96a:	c0 e8 03             	shr    al,0x3
c001f96d:	83 e0 07             	and    eax,0x7
c001f970:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f974:	99                   	cdq    
c001f975:	f7 f9                	idiv   ecx
c001f977:	89 34 d5 64 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce69c],esi
c001f97e:	89 3c d5 68 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce698],edi
c001f985:	58                   	pop    eax
c001f986:	5e                   	pop    esi
c001f987:	5f                   	pop    edi
c001f988:	c3                   	ret    

c001f989 <Vm::fpuPush(unsigned long long)>:
c001f989:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f98e:	c0 e8 03             	shr    al,0x3
c001f991:	83 e0 07             	and    eax,0x7
c001f994:	83 c0 07             	add    eax,0x7
c001f997:	88 c2                	mov    dl,al
c001f999:	83 e0 07             	and    eax,0x7
c001f99c:	83 e2 07             	and    edx,0x7
c001f99f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9a6:	8a 15 61 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031961
c001f9ac:	83 e2 c7             	and    edx,0xffffffc7
c001f9af:	09 ca                	or     edx,ecx
c001f9b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9b5:	88 15 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,dl
c001f9bb:	89 0c c5 68 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce698],ecx
c001f9c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9c6:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c001f9cd:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001f9d2:	83 f8 08             	cmp    eax,0x8
c001f9d5:	75 08                	jne    c001f9df <Vm::fpuPush(unsigned long long)+0x56>
c001f9d7:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001f9de:	c3                   	ret    
c001f9df:	40                   	inc    eax
c001f9e0:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c001f9e5:	c3                   	ret    

c001f9e6 <Vm::fpuPop()>:
c001f9e6:	8a 0d 61 19 03 c0    	mov    cl,BYTE PTR ds:0xc0031961
c001f9ec:	53                   	push   ebx
c001f9ed:	c0 e9 03             	shr    cl,0x3
c001f9f0:	8a 1d 61 19 03 c0    	mov    bl,BYTE PTR ds:0xc0031961
c001f9f6:	83 e1 07             	and    ecx,0x7
c001f9f9:	83 e3 c7             	and    ebx,0xffffffc7
c001f9fc:	8b 04 cd 64 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce69c]
c001fa03:	8b 14 cd 68 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce698]
c001fa0a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa11:	83 e1 38             	and    ecx,0x38
c001fa14:	09 d9                	or     ecx,ebx
c001fa16:	88 0d 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,cl
c001fa1c:	8b 0d a4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319a4
c001fa22:	85 c9                	test   ecx,ecx
c001fa24:	74 09                	je     c001fa2f <Vm::fpuPop()+0x49>
c001fa26:	49                   	dec    ecx
c001fa27:	89 0d a4 19 03 c0    	mov    DWORD PTR ds:0xc00319a4,ecx
c001fa2d:	eb 07                	jmp    c001fa36 <Vm::fpuPop()+0x50>
c001fa2f:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001fa36:	5b                   	pop    ebx
c001fa37:	c3                   	ret    

c001fa38 <Vm::x87Handler(regs*)>:
c001fa38:	55                   	push   ebp
c001fa39:	57                   	push   edi
c001fa3a:	56                   	push   esi
c001fa3b:	53                   	push   ebx
c001fa3c:	83 ec 1c             	sub    esp,0x1c
c001fa3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa43:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa48:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa4b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa53:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa57:	50                   	push   eax
c001fa58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa5c:	50                   	push   eax
c001fa5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa61:	50                   	push   eax
c001fa62:	53                   	push   ebx
c001fa63:	e8 dc a1 ff ff       	call   c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa68:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	89 c6                	mov    esi,eax
c001fa70:	80 fa d9             	cmp    dl,0xd9
c001fa73:	0f 85 52 01 00 00    	jne    c001fbcb <Vm::x87Handler(regs*)+0x193>
c001fa79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa7d:	8d 50 20             	lea    edx,[eax+0x20]
c001fa80:	80 fa 0e             	cmp    dl,0xe
c001fa83:	0f 87 86 00 00 00    	ja     c001fb0f <Vm::x87Handler(regs*)+0xd7>
c001fa89:	0f b6 d2             	movzx  edx,dl
c001fa8c:	ff 24 95 28 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38d8]
c001fa93:	e8 e7 fc ff ff       	call   c001f77f <Vm::fpuGet0()>
c001fa98:	eb 05                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001fa9a:	e8 e5 fc ff ff       	call   c001f784 <Vm::fpuGet1()>
c001fa9f:	57                   	push   edi
c001faa0:	57                   	push   edi
c001faa1:	52                   	push   edx
c001faa2:	50                   	push   eax
c001faa3:	e8 e1 fe ff ff       	call   c001f989 <Vm::fpuPush(unsigned long long)>
c001faa8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faac:	83 c4 10             	add    esp,0x10
c001faaf:	b0 01                	mov    al,0x1
c001fab1:	e9 e3 09 00 00       	jmp    c0020499 <Vm::x87Handler(regs*)+0xa61>
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	6a 00                	push   0x0
c001fabb:	e8 3b fe ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fac0:	59                   	pop    ecx
c001fac1:	5e                   	pop    esi
c001fac2:	52                   	push   edx
c001fac3:	50                   	push   eax
c001fac4:	e8 c2 fd ff ff       	call   c001f88b <Vm::fpuChs(unsigned long long)>
c001fac9:	eb 13                	jmp    c001fade <Vm::x87Handler(regs*)+0xa6>
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	6a 00                	push   0x0
c001fad0:	e8 26 fe ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fad5:	5f                   	pop    edi
c001fad6:	5d                   	pop    ebp
c001fad7:	52                   	push   edx
c001fad8:	50                   	push   eax
c001fad9:	e8 a4 fd ff ff       	call   c001f882 <Vm::fpuAbs(unsigned long long)>
c001fade:	83 c4 0c             	add    esp,0xc
c001fae1:	52                   	push   edx
c001fae2:	50                   	push   eax
c001fae3:	6a 00                	push   0x0
c001fae5:	e8 54 fe ff ff       	call   c001f93e <Vm::fpuSetReg(int, unsigned long long)>
c001faea:	eb bc                	jmp    c001faa8 <Vm::x87Handler(regs*)+0x70>
c001faec:	e8 d3 fc ff ff       	call   c001f7c4 <Vm::fpuGetLog210()>
c001faf1:	eb ac                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001faf3:	e8 9c fc ff ff       	call   c001f794 <Vm::fpuGetLog2E()>
c001faf8:	eb a5                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001fafa:	e8 8d fc ff ff       	call   c001f78c <Vm::fpuGetPi()>
c001faff:	eb 9e                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001fb01:	e8 d6 fc ff ff       	call   c001f7dc <Vm::fpuGetLog102()>
c001fb06:	eb 97                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001fb08:	e8 9f fc ff ff       	call   c001f7ac <Vm::fpuGetLogE2()>
c001fb0d:	eb 90                	jmp    c001fa9f <Vm::x87Handler(regs*)+0x67>
c001fb0f:	8d 50 40             	lea    edx,[eax+0x40]
c001fb12:	80 fa 07             	cmp    dl,0x7
c001fb15:	77 15                	ja     c001fb2c <Vm::x87Handler(regs*)+0xf4>
c001fb17:	83 ec 0c             	sub    esp,0xc
c001fb1a:	2d c0 00 00 00       	sub    eax,0xc0
c001fb1f:	50                   	push   eax
c001fb20:	e8 d6 fd ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fb25:	59                   	pop    ecx
c001fb26:	5e                   	pop    esi
c001fb27:	e9 75 ff ff ff       	jmp    c001faa1 <Vm::x87Handler(regs*)+0x69>
c001fb2c:	8d 50 38             	lea    edx,[eax+0x38]
c001fb2f:	80 fa 07             	cmp    dl,0x7
c001fb32:	77 3c                	ja     c001fb70 <Vm::x87Handler(regs*)+0x138>
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	2d c8 00 00 00       	sub    eax,0xc8
c001fb3c:	50                   	push   eax
c001fb3d:	e8 b9 fd ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fb42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb49:	89 c6                	mov    esi,eax
c001fb4b:	89 d7                	mov    edi,edx
c001fb4d:	e8 a9 fd ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fb52:	83 c4 0c             	add    esp,0xc
c001fb55:	52                   	push   edx
c001fb56:	50                   	push   eax
c001fb57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb5b:	2d c8 00 00 00       	sub    eax,0xc8
c001fb60:	50                   	push   eax
c001fb61:	e8 d8 fd ff ff       	call   c001f93e <Vm::fpuSetReg(int, unsigned long long)>
c001fb66:	83 c4 0c             	add    esp,0xc
c001fb69:	57                   	push   edi
c001fb6a:	56                   	push   esi
c001fb6b:	e9 73 ff ff ff       	jmp    c001fae3 <Vm::x87Handler(regs*)+0xab>
c001fb70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb74:	84 d2                	test   dl,dl
c001fb76:	75 0f                	jne    c001fb87 <Vm::x87Handler(regs*)+0x14f>
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	ff 36                	push   DWORD PTR [esi]
c001fb7d:	e8 c8 fa ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c001fb82:	e9 bf 00 00 00       	jmp    c001fc46 <Vm::x87Handler(regs*)+0x20e>
c001fb87:	80 fa 03             	cmp    dl,0x3
c001fb8a:	75 13                	jne    c001fb9f <Vm::x87Handler(regs*)+0x167>
c001fb8c:	e8 55 fe ff ff       	call   c001f9e6 <Vm::fpuPop()>
c001fb91:	55                   	push   ebp
c001fb92:	55                   	push   ebp
c001fb93:	52                   	push   edx
c001fb94:	50                   	push   eax
c001fb95:	e8 4c fa ff ff       	call   c001f5e6 <Vm::fpuInternalTo32(unsigned long long)>
c001fb9a:	e9 88 00 00 00       	jmp    c001fc27 <Vm::x87Handler(regs*)+0x1ef>
c001fb9f:	80 fa 05             	cmp    dl,0x5
c001fba2:	75 0e                	jne    c001fbb2 <Vm::x87Handler(regs*)+0x17a>
c001fba4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fba7:	66 a3 62 19 03 c0    	mov    ds:0xc0031962,ax
c001fbad:	e9 df 00 00 00       	jmp    c001fc91 <Vm::x87Handler(regs*)+0x259>
c001fbb2:	31 c0                	xor    eax,eax
c001fbb4:	80 fa 07             	cmp    dl,0x7
c001fbb7:	0f 85 dc 08 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c001fbbd:	66 a1 62 19 03 c0    	mov    ax,ds:0xc0031962
c001fbc3:	66 89 06             	mov    WORD PTR [esi],ax
c001fbc6:	e9 c6 00 00 00       	jmp    c001fc91 <Vm::x87Handler(regs*)+0x259>
c001fbcb:	80 fa d8             	cmp    dl,0xd8
c001fbce:	0f 84 c9 00 00 00    	je     c001fc9d <Vm::x87Handler(regs*)+0x265>
c001fbd4:	80 fa dc             	cmp    dl,0xdc
c001fbd7:	0f 84 0d 02 00 00    	je     c001fdea <Vm::x87Handler(regs*)+0x3b2>
c001fbdd:	80 fa de             	cmp    dl,0xde
c001fbe0:	0f 84 cd 02 00 00    	je     c001feb3 <Vm::x87Handler(regs*)+0x47b>
c001fbe6:	80 fa dd             	cmp    dl,0xdd
c001fbe9:	0f 84 5f 04 00 00    	je     c002004e <Vm::x87Handler(regs*)+0x616>
c001fbef:	80 fa da             	cmp    dl,0xda
c001fbf2:	0f 84 24 05 00 00    	je     c002011c <Vm::x87Handler(regs*)+0x6e4>
c001fbf8:	80 fa df             	cmp    dl,0xdf
c001fbfb:	0f 84 68 05 00 00    	je     c0020169 <Vm::x87Handler(regs*)+0x731>
c001fc01:	31 c0                	xor    eax,eax
c001fc03:	80 fa db             	cmp    dl,0xdb
c001fc06:	0f 85 8d 08 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c001fc0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc10:	80 fa 03             	cmp    dl,0x3
c001fc13:	0f 85 70 06 00 00    	jne    c0020289 <Vm::x87Handler(regs*)+0x851>
c001fc19:	e8 c8 fd ff ff       	call   c001f9e6 <Vm::fpuPop()>
c001fc1e:	55                   	push   ebp
c001fc1f:	55                   	push   ebp
c001fc20:	52                   	push   edx
c001fc21:	50                   	push   eax
c001fc22:	e8 71 fa ff ff       	call   c001f698 <Vm::fpuFloatToLong(unsigned long long)>
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	89 06                	mov    DWORD PTR [esi],eax
c001fc2c:	eb 63                	jmp    c001fc91 <Vm::x87Handler(regs*)+0x259>
c001fc2e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc32:	84 d2                	test   dl,dl
c001fc34:	0f 85 e6 05 00 00    	jne    c0020220 <Vm::x87Handler(regs*)+0x7e8>
c001fc3a:	57                   	push   edi
c001fc3b:	57                   	push   edi
c001fc3c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3f:	ff 36                	push   DWORD PTR [esi]
c001fc41:	e8 49 fa ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c001fc46:	5e                   	pop    esi
c001fc47:	5f                   	pop    edi
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	e8 3a fd ff ff       	call   c001f989 <Vm::fpuPush(unsigned long long)>
c001fc4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc53:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc56:	e9 51 fe ff ff       	jmp    c001faac <Vm::x87Handler(regs*)+0x74>
c001fc5b:	80 fa 03             	cmp    dl,0x3
c001fc5e:	0f 85 d7 06 00 00    	jne    c002033b <Vm::x87Handler(regs*)+0x903>
c001fc64:	57                   	push   edi
c001fc65:	57                   	push   edi
c001fc66:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc69:	ff 36                	push   DWORD PTR [esi]
c001fc6b:	e8 1f fa ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c001fc70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc77:	89 c6                	mov    esi,eax
c001fc79:	89 d7                	mov    edi,edx
c001fc7b:	e8 7b fc ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fc80:	57                   	push   edi
c001fc81:	56                   	push   esi
c001fc82:	52                   	push   edx
c001fc83:	50                   	push   eax
c001fc84:	e8 95 fb ff ff       	call   c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc89:	83 c4 20             	add    esp,0x20
c001fc8c:	e8 55 fd ff ff       	call   c001f9e6 <Vm::fpuPop()>
c001fc91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc95:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc98:	e9 12 fe ff ff       	jmp    c001faaf <Vm::x87Handler(regs*)+0x77>
c001fc9d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca1:	8d 50 40             	lea    edx,[eax+0x40]
c001fca4:	80 fa 07             	cmp    dl,0x7
c001fca7:	77 29                	ja     c001fcd2 <Vm::x87Handler(regs*)+0x29a>
c001fca9:	83 ec 0c             	sub    esp,0xc
c001fcac:	2d c0 00 00 00       	sub    eax,0xc0
c001fcb1:	50                   	push   eax
c001fcb2:	e8 44 fc ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fcb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcbe:	89 c6                	mov    esi,eax
c001fcc0:	89 d7                	mov    edi,edx
c001fcc2:	e8 34 fc ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fcc7:	57                   	push   edi
c001fcc8:	56                   	push   esi
c001fcc9:	52                   	push   edx
c001fcca:	50                   	push   eax
c001fccb:	e8 a1 fb ff ff       	call   c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcd0:	eb 2f                	jmp    c001fd01 <Vm::x87Handler(regs*)+0x2c9>
c001fcd2:	8d 50 38             	lea    edx,[eax+0x38]
c001fcd5:	80 fa 07             	cmp    dl,0x7
c001fcd8:	77 2f                	ja     c001fd09 <Vm::x87Handler(regs*)+0x2d1>
c001fcda:	83 ec 0c             	sub    esp,0xc
c001fcdd:	2d c8 00 00 00       	sub    eax,0xc8
c001fce2:	50                   	push   eax
c001fce3:	e8 13 fc ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fce8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcef:	89 c6                	mov    esi,eax
c001fcf1:	89 d7                	mov    edi,edx
c001fcf3:	e8 03 fc ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fcf8:	57                   	push   edi
c001fcf9:	56                   	push   esi
c001fcfa:	52                   	push   edx
c001fcfb:	50                   	push   eax
c001fcfc:	e8 a9 fb ff ff       	call   c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd01:	83 c4 1c             	add    esp,0x1c
c001fd04:	e9 d8 fd ff ff       	jmp    c001fae1 <Vm::x87Handler(regs*)+0xa9>
c001fd09:	8d 50 30             	lea    edx,[eax+0x30]
c001fd0c:	80 fa 07             	cmp    dl,0x7
c001fd0f:	77 0d                	ja     c001fd1e <Vm::x87Handler(regs*)+0x2e6>
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	2d d0 00 00 00       	sub    eax,0xd0
c001fd19:	e9 99 03 00 00       	jmp    c00200b7 <Vm::x87Handler(regs*)+0x67f>
c001fd1e:	8d 50 28             	lea    edx,[eax+0x28]
c001fd21:	80 fa 07             	cmp    dl,0x7
c001fd24:	77 0d                	ja     c001fd33 <Vm::x87Handler(regs*)+0x2fb>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	2d d8 00 00 00       	sub    eax,0xd8
c001fd2e:	e9 c0 03 00 00       	jmp    c00200f3 <Vm::x87Handler(regs*)+0x6bb>
c001fd33:	8d 50 20             	lea    edx,[eax+0x20]
c001fd36:	80 fa 07             	cmp    dl,0x7
c001fd39:	77 1b                	ja     c001fd56 <Vm::x87Handler(regs*)+0x31e>
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	2d e0 00 00 00       	sub    eax,0xe0
c001fd43:	50                   	push   eax
c001fd44:	e8 b2 fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fd49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd50:	89 c6                	mov    esi,eax
c001fd52:	89 d7                	mov    edi,edx
c001fd54:	eb 22                	jmp    c001fd78 <Vm::x87Handler(regs*)+0x340>
c001fd56:	8d 50 18             	lea    edx,[eax+0x18]
c001fd59:	80 fa 07             	cmp    dl,0x7
c001fd5c:	77 2d                	ja     c001fd8b <Vm::x87Handler(regs*)+0x353>
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	6a 00                	push   0x0
c001fd63:	e8 93 fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fd68:	89 c6                	mov    esi,eax
c001fd6a:	89 d7                	mov    edi,edx
c001fd6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd70:	2d e8 00 00 00       	sub    eax,0xe8
c001fd75:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd78:	e8 7e fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fd7d:	57                   	push   edi
c001fd7e:	56                   	push   esi
c001fd7f:	52                   	push   edx
c001fd80:	50                   	push   eax
c001fd81:	e8 15 fb ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd86:	e9 76 ff ff ff       	jmp    c001fd01 <Vm::x87Handler(regs*)+0x2c9>
c001fd8b:	8d 50 10             	lea    edx,[eax+0x10]
c001fd8e:	80 fa 07             	cmp    dl,0x7
c001fd91:	77 1b                	ja     c001fdae <Vm::x87Handler(regs*)+0x376>
c001fd93:	83 ec 0c             	sub    esp,0xc
c001fd96:	2d f0 00 00 00       	sub    eax,0xf0
c001fd9b:	50                   	push   eax
c001fd9c:	e8 5a fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fda1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda8:	89 c6                	mov    esi,eax
c001fdaa:	89 d7                	mov    edi,edx
c001fdac:	eb 22                	jmp    c001fdd0 <Vm::x87Handler(regs*)+0x398>
c001fdae:	3c f7                	cmp    al,0xf7
c001fdb0:	0f 86 d1 03 00 00    	jbe    c0020187 <Vm::x87Handler(regs*)+0x74f>
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	6a 00                	push   0x0
c001fdbb:	e8 3b fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fdc0:	89 c6                	mov    esi,eax
c001fdc2:	89 d7                	mov    edi,edx
c001fdc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc8:	2d f8 00 00 00       	sub    eax,0xf8
c001fdcd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdd0:	e8 26 fb ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fdd5:	57                   	push   edi
c001fdd6:	56                   	push   esi
c001fdd7:	52                   	push   edx
c001fdd8:	50                   	push   eax
c001fdd9:	e8 eb fa ff ff       	call   c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdde:	83 c4 1c             	add    esp,0x1c
c001fde1:	52                   	push   edx
c001fde2:	50                   	push   eax
c001fde3:	6a 00                	push   0x0
c001fde5:	e9 51 02 00 00       	jmp    c002003b <Vm::x87Handler(regs*)+0x603>
c001fdea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdee:	8d 50 40             	lea    edx,[eax+0x40]
c001fdf1:	80 fa 07             	cmp    dl,0x7
c001fdf4:	77 37                	ja     c001fe2d <Vm::x87Handler(regs*)+0x3f5>
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	2d c0 00 00 00       	sub    eax,0xc0
c001fdfe:	50                   	push   eax
c001fdff:	e8 f7 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0b:	89 c6                	mov    esi,eax
c001fe0d:	89 d7                	mov    edi,edx
c001fe0f:	e8 e7 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe14:	57                   	push   edi
c001fe15:	56                   	push   esi
c001fe16:	52                   	push   edx
c001fe17:	50                   	push   eax
c001fe18:	e8 54 fa ff ff       	call   c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe1d:	83 c4 1c             	add    esp,0x1c
c001fe20:	52                   	push   edx
c001fe21:	50                   	push   eax
c001fe22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe26:	2d c0 00 00 00       	sub    eax,0xc0
c001fe2b:	eb 3d                	jmp    c001fe6a <Vm::x87Handler(regs*)+0x432>
c001fe2d:	8d 50 38             	lea    edx,[eax+0x38]
c001fe30:	80 fa 07             	cmp    dl,0x7
c001fe33:	77 3b                	ja     c001fe70 <Vm::x87Handler(regs*)+0x438>
c001fe35:	83 ec 0c             	sub    esp,0xc
c001fe38:	2d c8 00 00 00       	sub    eax,0xc8
c001fe3d:	50                   	push   eax
c001fe3e:	e8 b8 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe4a:	89 c6                	mov    esi,eax
c001fe4c:	89 d7                	mov    edi,edx
c001fe4e:	e8 a8 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe53:	57                   	push   edi
c001fe54:	56                   	push   esi
c001fe55:	52                   	push   edx
c001fe56:	50                   	push   eax
c001fe57:	e8 4e fa ff ff       	call   c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe5c:	83 c4 1c             	add    esp,0x1c
c001fe5f:	52                   	push   edx
c001fe60:	50                   	push   eax
c001fe61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe65:	2d c8 00 00 00       	sub    eax,0xc8
c001fe6a:	50                   	push   eax
c001fe6b:	e9 75 fc ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0xad>
c001fe70:	83 c0 18             	add    eax,0x18
c001fe73:	3c 07                	cmp    al,0x7
c001fe75:	0f 87 3b 04 00 00    	ja     c00202b6 <Vm::x87Handler(regs*)+0x87e>
c001fe7b:	83 ec 0c             	sub    esp,0xc
c001fe7e:	6a 00                	push   0x0
c001fe80:	e8 76 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe85:	89 c6                	mov    esi,eax
c001fe87:	89 d7                	mov    edi,edx
c001fe89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8d:	2d e8 00 00 00       	sub    eax,0xe8
c001fe92:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe95:	e8 61 fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fe9a:	57                   	push   edi
c001fe9b:	56                   	push   esi
c001fe9c:	52                   	push   edx
c001fe9d:	50                   	push   eax
c001fe9e:	e8 f8 f9 ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fea3:	83 c4 1c             	add    esp,0x1c
c001fea6:	52                   	push   edx
c001fea7:	50                   	push   eax
c001fea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feac:	2d e8 00 00 00       	sub    eax,0xe8
c001feb1:	eb b7                	jmp    c001fe6a <Vm::x87Handler(regs*)+0x432>
c001feb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb7:	8d 50 40             	lea    edx,[eax+0x40]
c001feba:	80 fa 07             	cmp    dl,0x7
c001febd:	77 3a                	ja     c001fef9 <Vm::x87Handler(regs*)+0x4c1>
c001febf:	83 ec 0c             	sub    esp,0xc
c001fec2:	2d c0 00 00 00       	sub    eax,0xc0
c001fec7:	50                   	push   eax
c001fec8:	e8 2e fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fecd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fed4:	89 c6                	mov    esi,eax
c001fed6:	89 d7                	mov    edi,edx
c001fed8:	e8 1e fa ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001fedd:	57                   	push   edi
c001fede:	56                   	push   esi
c001fedf:	52                   	push   edx
c001fee0:	50                   	push   eax
c001fee1:	e8 8b f9 ff ff       	call   c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fee6:	83 c4 1c             	add    esp,0x1c
c001fee9:	52                   	push   edx
c001feea:	50                   	push   eax
c001feeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feef:	2d c0 00 00 00       	sub    eax,0xc0
c001fef4:	e9 9e 01 00 00       	jmp    c0020097 <Vm::x87Handler(regs*)+0x65f>
c001fef9:	8d 50 20             	lea    edx,[eax+0x20]
c001fefc:	80 fa 07             	cmp    dl,0x7
c001feff:	77 3a                	ja     c001ff3b <Vm::x87Handler(regs*)+0x503>
c001ff01:	83 ec 0c             	sub    esp,0xc
c001ff04:	2d e0 00 00 00       	sub    eax,0xe0
c001ff09:	50                   	push   eax
c001ff0a:	e8 ec f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ff0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff16:	89 c6                	mov    esi,eax
c001ff18:	89 d7                	mov    edi,edx
c001ff1a:	e8 dc f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ff1f:	57                   	push   edi
c001ff20:	56                   	push   esi
c001ff21:	52                   	push   edx
c001ff22:	50                   	push   eax
c001ff23:	e8 73 f9 ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff28:	83 c4 1c             	add    esp,0x1c
c001ff2b:	52                   	push   edx
c001ff2c:	50                   	push   eax
c001ff2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff31:	2d e0 00 00 00       	sub    eax,0xe0
c001ff36:	e9 5c 01 00 00       	jmp    c0020097 <Vm::x87Handler(regs*)+0x65f>
c001ff3b:	8d 50 18             	lea    edx,[eax+0x18]
c001ff3e:	80 fa 07             	cmp    dl,0x7
c001ff41:	77 3b                	ja     c001ff7e <Vm::x87Handler(regs*)+0x546>
c001ff43:	83 ec 0c             	sub    esp,0xc
c001ff46:	6a 00                	push   0x0
c001ff48:	e8 ae f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ff4d:	89 c6                	mov    esi,eax
c001ff4f:	89 d7                	mov    edi,edx
c001ff51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff55:	2d e8 00 00 00       	sub    eax,0xe8
c001ff5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff5d:	e8 99 f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ff62:	57                   	push   edi
c001ff63:	56                   	push   esi
c001ff64:	52                   	push   edx
c001ff65:	50                   	push   eax
c001ff66:	e8 30 f9 ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff6b:	83 c4 1c             	add    esp,0x1c
c001ff6e:	52                   	push   edx
c001ff6f:	50                   	push   eax
c001ff70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff74:	2d e8 00 00 00       	sub    eax,0xe8
c001ff79:	e9 19 01 00 00       	jmp    c0020097 <Vm::x87Handler(regs*)+0x65f>
c001ff7e:	8d 50 38             	lea    edx,[eax+0x38]
c001ff81:	80 fa 07             	cmp    dl,0x7
c001ff84:	77 37                	ja     c001ffbd <Vm::x87Handler(regs*)+0x585>
c001ff86:	83 ec 0c             	sub    esp,0xc
c001ff89:	2d c8 00 00 00       	sub    eax,0xc8
c001ff8e:	50                   	push   eax
c001ff8f:	e8 67 f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ff94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff9b:	89 c6                	mov    esi,eax
c001ff9d:	89 d7                	mov    edi,edx
c001ff9f:	e8 57 f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ffa4:	57                   	push   edi
c001ffa5:	56                   	push   esi
c001ffa6:	52                   	push   edx
c001ffa7:	50                   	push   eax
c001ffa8:	e8 fd f8 ff ff       	call   c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffad:	83 c4 1c             	add    esp,0x1c
c001ffb0:	52                   	push   edx
c001ffb1:	50                   	push   eax
c001ffb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb6:	2d c8 00 00 00       	sub    eax,0xc8
c001ffbb:	eb 7d                	jmp    c002003a <Vm::x87Handler(regs*)+0x602>
c001ffbd:	3c f7                	cmp    al,0xf7
c001ffbf:	76 38                	jbe    c001fff9 <Vm::x87Handler(regs*)+0x5c1>
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	6a 00                	push   0x0
c001ffc6:	e8 30 f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ffcb:	89 c6                	mov    esi,eax
c001ffcd:	89 d7                	mov    edi,edx
c001ffcf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd3:	2d f8 00 00 00       	sub    eax,0xf8
c001ffd8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffdb:	e8 1b f9 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c001ffe0:	57                   	push   edi
c001ffe1:	56                   	push   esi
c001ffe2:	52                   	push   edx
c001ffe3:	50                   	push   eax
c001ffe4:	e8 e0 f8 ff ff       	call   c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffe9:	83 c4 1c             	add    esp,0x1c
c001ffec:	52                   	push   edx
c001ffed:	50                   	push   eax
c001ffee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff2:	2d f8 00 00 00       	sub    eax,0xf8
c001fff7:	eb 41                	jmp    c002003a <Vm::x87Handler(regs*)+0x602>
c001fff9:	8d 50 10             	lea    edx,[eax+0x10]
c001fffc:	80 fa 07             	cmp    dl,0x7
c001ffff:	0f 87 5a 01 00 00    	ja     c002015f <Vm::x87Handler(regs*)+0x727>
c0020005:	83 ec 0c             	sub    esp,0xc
c0020008:	2d f0 00 00 00       	sub    eax,0xf0
c002000d:	50                   	push   eax
c002000e:	e8 e8 f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020013:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001a:	89 c6                	mov    esi,eax
c002001c:	89 d7                	mov    edi,edx
c002001e:	e8 d8 f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020023:	57                   	push   edi
c0020024:	56                   	push   esi
c0020025:	52                   	push   edx
c0020026:	50                   	push   eax
c0020027:	e8 9d f8 ff ff       	call   c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002002c:	83 c4 1c             	add    esp,0x1c
c002002f:	52                   	push   edx
c0020030:	50                   	push   eax
c0020031:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020035:	2d f0 00 00 00       	sub    eax,0xf0
c002003a:	50                   	push   eax
c002003b:	e8 fe f8 ff ff       	call   c001f93e <Vm::fpuSetReg(int, unsigned long long)>
c0020040:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020044:	e8 9d f9 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c0020049:	e9 5e fa ff ff       	jmp    c001faac <Vm::x87Handler(regs*)+0x74>
c002004e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020052:	8d 50 30             	lea    edx,[eax+0x30]
c0020055:	80 fa 07             	cmp    dl,0x7
c0020058:	77 1d                	ja     c0020077 <Vm::x87Handler(regs*)+0x63f>
c002005a:	83 ec 0c             	sub    esp,0xc
c002005d:	6a 00                	push   0x0
c002005f:	e8 97 f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020064:	83 c4 0c             	add    esp,0xc
c0020067:	52                   	push   edx
c0020068:	50                   	push   eax
c0020069:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006d:	2d d0 00 00 00       	sub    eax,0xd0
c0020072:	e9 f3 fd ff ff       	jmp    c001fe6a <Vm::x87Handler(regs*)+0x432>
c0020077:	8d 50 28             	lea    edx,[eax+0x28]
c002007a:	80 fa 07             	cmp    dl,0x7
c002007d:	77 28                	ja     c00200a7 <Vm::x87Handler(regs*)+0x66f>
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	6a 00                	push   0x0
c0020084:	e8 72 f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020089:	83 c4 0c             	add    esp,0xc
c002008c:	52                   	push   edx
c002008d:	50                   	push   eax
c002008e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020092:	2d d8 00 00 00       	sub    eax,0xd8
c0020097:	50                   	push   eax
c0020098:	e8 a1 f8 ff ff       	call   c001f93e <Vm::fpuSetReg(int, unsigned long long)>
c002009d:	e8 44 f9 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c00200a2:	e9 01 fa ff ff       	jmp    c001faa8 <Vm::x87Handler(regs*)+0x70>
c00200a7:	8d 50 20             	lea    edx,[eax+0x20]
c00200aa:	80 fa 07             	cmp    dl,0x7
c00200ad:	77 30                	ja     c00200df <Vm::x87Handler(regs*)+0x6a7>
c00200af:	83 ec 0c             	sub    esp,0xc
c00200b2:	2d e0 00 00 00       	sub    eax,0xe0
c00200b7:	50                   	push   eax
c00200b8:	e8 3e f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00200bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200c4:	89 c6                	mov    esi,eax
c00200c6:	89 d7                	mov    edi,edx
c00200c8:	e8 2e f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00200cd:	57                   	push   edi
c00200ce:	56                   	push   esi
c00200cf:	52                   	push   edx
c00200d0:	50                   	push   eax
c00200d1:	e8 48 f7 ff ff       	call   c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200da:	e9 54 02 00 00       	jmp    c0020333 <Vm::x87Handler(regs*)+0x8fb>
c00200df:	8d 50 18             	lea    edx,[eax+0x18]
c00200e2:	80 fa 07             	cmp    dl,0x7
c00200e5:	0f 87 43 fb ff ff    	ja     c001fc2e <Vm::x87Handler(regs*)+0x1f6>
c00200eb:	83 ec 0c             	sub    esp,0xc
c00200ee:	2d e8 00 00 00       	sub    eax,0xe8
c00200f3:	50                   	push   eax
c00200f4:	e8 02 f8 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00200f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020100:	89 c6                	mov    esi,eax
c0020102:	89 d7                	mov    edi,edx
c0020104:	e8 f2 f7 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020109:	57                   	push   edi
c002010a:	56                   	push   esi
c002010b:	52                   	push   edx
c002010c:	50                   	push   eax
c002010d:	e8 0c f7 ff ff       	call   c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020112:	83 c4 20             	add    esp,0x20
c0020115:	e8 cc f8 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c002011a:	eb 62                	jmp    c002017e <Vm::x87Handler(regs*)+0x746>
c002011c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020120:	0f 85 0f 01 00 00    	jne    c0020235 <Vm::x87Handler(regs*)+0x7fd>
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	6a 01                	push   0x1
c002012b:	e8 cb f7 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020130:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020137:	89 c6                	mov    esi,eax
c0020139:	89 d7                	mov    edi,edx
c002013b:	e8 bb f7 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020140:	57                   	push   edi
c0020141:	56                   	push   esi
c0020142:	52                   	push   edx
c0020143:	50                   	push   eax
c0020144:	e8 d5 f6 ff ff       	call   c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020149:	83 c4 20             	add    esp,0x20
c002014c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020150:	e8 91 f8 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c0020155:	e8 8c f8 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c002015a:	e9 50 f9 ff ff       	jmp    c001faaf <Vm::x87Handler(regs*)+0x77>
c002015f:	3c d9                	cmp    al,0xd9
c0020161:	0f 85 b5 02 00 00    	jne    c002041c <Vm::x87Handler(regs*)+0x9e4>
c0020167:	eb bd                	jmp    c0020126 <Vm::x87Handler(regs*)+0x6ee>
c0020169:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002016d:	0f 85 ea 02 00 00    	jne    c002045d <Vm::x87Handler(regs*)+0xa25>
c0020173:	0f b7 05 60 19 03 c0 	movzx  eax,WORD PTR ds:0xc0031960
c002017a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002017e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020182:	e9 28 f9 ff ff       	jmp    c001faaf <Vm::x87Handler(regs*)+0x77>
c0020187:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002018b:	84 d2                	test   dl,dl
c002018d:	75 0f                	jne    c002019e <Vm::x87Handler(regs*)+0x766>
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	ff 36                	push   DWORD PTR [esi]
c0020194:	e8 b1 f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c0020199:	e9 2c 01 00 00       	jmp    c00202ca <Vm::x87Handler(regs*)+0x892>
c002019e:	80 fa 01             	cmp    dl,0x1
c00201a1:	75 0f                	jne    c00201b2 <Vm::x87Handler(regs*)+0x77a>
c00201a3:	83 ec 0c             	sub    esp,0xc
c00201a6:	ff 36                	push   DWORD PTR [esi]
c00201a8:	e8 9d f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c00201ad:	e9 81 02 00 00       	jmp    c0020433 <Vm::x87Handler(regs*)+0x9fb>
c00201b2:	80 fa 04             	cmp    dl,0x4
c00201b5:	75 0f                	jne    c00201c6 <Vm::x87Handler(regs*)+0x78e>
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 36                	push   DWORD PTR [esi]
c00201bc:	e8 89 f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c00201c1:	e9 86 01 00 00       	jmp    c002034c <Vm::x87Handler(regs*)+0x914>
c00201c6:	80 fa 05             	cmp    dl,0x5
c00201c9:	75 1b                	jne    c00201e6 <Vm::x87Handler(regs*)+0x7ae>
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	6a 00                	push   0x0
c00201d0:	e8 26 f7 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00201d5:	89 c7                	mov    edi,eax
c00201d7:	89 d5                	mov    ebp,edx
c00201d9:	58                   	pop    eax
c00201da:	ff 36                	push   DWORD PTR [esi]
c00201dc:	e8 69 f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c00201e1:	e9 a3 01 00 00       	jmp    c0020389 <Vm::x87Handler(regs*)+0x951>
c00201e6:	80 fa 06             	cmp    dl,0x6
c00201e9:	75 0f                	jne    c00201fa <Vm::x87Handler(regs*)+0x7c2>
c00201eb:	83 ec 0c             	sub    esp,0xc
c00201ee:	ff 36                	push   DWORD PTR [esi]
c00201f0:	e8 55 f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c00201f5:	e9 ae 01 00 00       	jmp    c00203a8 <Vm::x87Handler(regs*)+0x970>
c00201fa:	31 c0                	xor    eax,eax
c00201fc:	80 fa 07             	cmp    dl,0x7
c00201ff:	0f 85 94 02 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c0020205:	83 ec 0c             	sub    esp,0xc
c0020208:	6a 00                	push   0x0
c002020a:	e8 ec f6 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c002020f:	89 c7                	mov    edi,eax
c0020211:	89 d5                	mov    ebp,edx
c0020213:	58                   	pop    eax
c0020214:	ff 36                	push   DWORD PTR [esi]
c0020216:	e8 2f f4 ff ff       	call   c001f64a <Vm::fpu32ToInternal(unsigned int)>
c002021b:	e9 cb 01 00 00       	jmp    c00203eb <Vm::x87Handler(regs*)+0x9b3>
c0020220:	80 fa 03             	cmp    dl,0x3
c0020223:	0f 85 d3 01 00 00    	jne    c00203fc <Vm::x87Handler(regs*)+0x9c4>
c0020229:	e8 b8 f7 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c002022e:	51                   	push   ecx
c002022f:	51                   	push   ecx
c0020230:	e9 de 01 00 00       	jmp    c0020413 <Vm::x87Handler(regs*)+0x9db>
c0020235:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020239:	80 fa 01             	cmp    dl,0x1
c002023c:	75 09                	jne    c0020247 <Vm::x87Handler(regs*)+0x80f>
c002023e:	57                   	push   edi
c002023f:	57                   	push   edi
c0020240:	8b 06                	mov    eax,DWORD PTR [esi]
c0020242:	e9 e3 01 00 00       	jmp    c002042a <Vm::x87Handler(regs*)+0x9f2>
c0020247:	80 fa 04             	cmp    dl,0x4
c002024a:	75 12                	jne    c002025e <Vm::x87Handler(regs*)+0x826>
c002024c:	31 d2                	xor    edx,edx
c002024e:	51                   	push   ecx
c002024f:	51                   	push   ecx
c0020250:	8b 06                	mov    eax,DWORD PTR [esi]
c0020252:	52                   	push   edx
c0020253:	50                   	push   eax
c0020254:	e8 d0 f4 ff ff       	call   c001f729 <Vm::fpuLongToFloat(long long)>
c0020259:	e9 ee 00 00 00       	jmp    c002034c <Vm::x87Handler(regs*)+0x914>
c002025e:	31 c0                	xor    eax,eax
c0020260:	80 fa 07             	cmp    dl,0x7
c0020263:	0f 85 30 02 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	6a 00                	push   0x0
c002026e:	e8 88 f6 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020273:	89 c7                	mov    edi,eax
c0020275:	89 d5                	mov    ebp,edx
c0020277:	58                   	pop    eax
c0020278:	8b 06                	mov    eax,DWORD PTR [esi]
c002027a:	5a                   	pop    edx
c002027b:	31 d2                	xor    edx,edx
c002027d:	52                   	push   edx
c002027e:	50                   	push   eax
c002027f:	e8 a5 f4 ff ff       	call   c001f729 <Vm::fpuLongToFloat(long long)>
c0020284:	e9 62 01 00 00       	jmp    c00203eb <Vm::x87Handler(regs*)+0x9b3>
c0020289:	84 d2                	test   dl,dl
c002028b:	75 0d                	jne    c002029a <Vm::x87Handler(regs*)+0x862>
c002028d:	31 d2                	xor    edx,edx
c002028f:	55                   	push   ebp
c0020290:	55                   	push   ebp
c0020291:	8b 06                	mov    eax,DWORD PTR [esi]
c0020293:	52                   	push   edx
c0020294:	50                   	push   eax
c0020295:	e9 d3 01 00 00       	jmp    c002046d <Vm::x87Handler(regs*)+0xa35>
c002029a:	31 c0                	xor    eax,eax
c002029c:	80 fa 02             	cmp    dl,0x2
c002029f:	0f 85 f4 01 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	6a 00                	push   0x0
c00202aa:	e8 4c f6 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00202af:	59                   	pop    ecx
c00202b0:	5f                   	pop    edi
c00202b1:	e9 6a f9 ff ff       	jmp    c001fc20 <Vm::x87Handler(regs*)+0x1e8>
c00202b6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ba:	84 d2                	test   dl,dl
c00202bc:	75 2a                	jne    c00202e8 <Vm::x87Handler(regs*)+0x8b0>
c00202be:	50                   	push   eax
c00202bf:	50                   	push   eax
c00202c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202c3:	ff 36                	push   DWORD PTR [esi]
c00202c5:	e8 c5 f3 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c00202ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202d1:	89 c6                	mov    esi,eax
c00202d3:	89 d7                	mov    edi,edx
c00202d5:	e8 21 f6 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00202da:	57                   	push   edi
c00202db:	56                   	push   esi
c00202dc:	52                   	push   edx
c00202dd:	50                   	push   eax
c00202de:	e8 8e f5 ff ff       	call   c001f871 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202e3:	e9 64 01 00 00       	jmp    c002044c <Vm::x87Handler(regs*)+0xa14>
c00202e8:	80 fa 01             	cmp    dl,0x1
c00202eb:	75 11                	jne    c00202fe <Vm::x87Handler(regs*)+0x8c6>
c00202ed:	50                   	push   eax
c00202ee:	50                   	push   eax
c00202ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202f2:	ff 36                	push   DWORD PTR [esi]
c00202f4:	e8 96 f3 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c00202f9:	e9 35 01 00 00       	jmp    c0020433 <Vm::x87Handler(regs*)+0x9fb>
c00202fe:	80 fa 02             	cmp    dl,0x2
c0020301:	0f 85 54 f9 ff ff    	jne    c001fc5b <Vm::x87Handler(regs*)+0x223>
c0020307:	55                   	push   ebp
c0020308:	55                   	push   ebp
c0020309:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002030c:	ff 36                	push   DWORD PTR [esi]
c002030e:	e8 7c f3 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c0020313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002031a:	89 c6                	mov    esi,eax
c002031c:	89 d7                	mov    edi,edx
c002031e:	e8 d8 f5 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020323:	57                   	push   edi
c0020324:	56                   	push   esi
c0020325:	52                   	push   edx
c0020326:	50                   	push   eax
c0020327:	e8 f2 f4 ff ff       	call   c001f81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002032c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020330:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020333:	83 c4 20             	add    esp,0x20
c0020336:	e9 74 f7 ff ff       	jmp    c001faaf <Vm::x87Handler(regs*)+0x77>
c002033b:	80 fa 04             	cmp    dl,0x4
c002033e:	75 2a                	jne    c002036a <Vm::x87Handler(regs*)+0x932>
c0020340:	51                   	push   ecx
c0020341:	51                   	push   ecx
c0020342:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020345:	ff 36                	push   DWORD PTR [esi]
c0020347:	e8 43 f3 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c002034c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020353:	89 c6                	mov    esi,eax
c0020355:	89 d7                	mov    edi,edx
c0020357:	e8 9f f5 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c002035c:	57                   	push   edi
c002035d:	56                   	push   esi
c002035e:	52                   	push   edx
c002035f:	50                   	push   eax
c0020360:	e8 36 f5 ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020365:	e9 e2 00 00 00       	jmp    c002044c <Vm::x87Handler(regs*)+0xa14>
c002036a:	80 fa 05             	cmp    dl,0x5
c002036d:	75 28                	jne    c0020397 <Vm::x87Handler(regs*)+0x95f>
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	6a 00                	push   0x0
c0020374:	e8 82 f5 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020379:	89 c7                	mov    edi,eax
c002037b:	89 d5                	mov    ebp,edx
c002037d:	58                   	pop    eax
c002037e:	5a                   	pop    edx
c002037f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020382:	ff 36                	push   DWORD PTR [esi]
c0020384:	e8 06 f3 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c0020389:	83 c4 10             	add    esp,0x10
c002038c:	55                   	push   ebp
c002038d:	57                   	push   edi
c002038e:	52                   	push   edx
c002038f:	50                   	push   eax
c0020390:	e8 06 f5 ff ff       	call   c001f89b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020395:	eb 60                	jmp    c00203f7 <Vm::x87Handler(regs*)+0x9bf>
c0020397:	80 fa 06             	cmp    dl,0x6
c002039a:	75 2a                	jne    c00203c6 <Vm::x87Handler(regs*)+0x98e>
c002039c:	51                   	push   ecx
c002039d:	51                   	push   ecx
c002039e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a1:	ff 36                	push   DWORD PTR [esi]
c00203a3:	e8 e7 f2 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c00203a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203af:	89 c6                	mov    esi,eax
c00203b1:	89 d7                	mov    edi,edx
c00203b3:	e8 43 f5 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00203b8:	57                   	push   edi
c00203b9:	56                   	push   esi
c00203ba:	52                   	push   edx
c00203bb:	50                   	push   eax
c00203bc:	e8 08 f5 ff ff       	call   c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203c1:	e9 86 00 00 00       	jmp    c002044c <Vm::x87Handler(regs*)+0xa14>
c00203c6:	31 c0                	xor    eax,eax
c00203c8:	80 fa 07             	cmp    dl,0x7
c00203cb:	0f 85 c8 00 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c00203d1:	83 ec 0c             	sub    esp,0xc
c00203d4:	6a 00                	push   0x0
c00203d6:	e8 20 f5 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c00203db:	89 c7                	mov    edi,eax
c00203dd:	89 d5                	mov    ebp,edx
c00203df:	58                   	pop    eax
c00203e0:	5a                   	pop    edx
c00203e1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e4:	ff 36                	push   DWORD PTR [esi]
c00203e6:	e8 a4 f2 ff ff       	call   c001f68f <Vm::fpu64ToInternal(unsigned long long)>
c00203eb:	83 c4 10             	add    esp,0x10
c00203ee:	55                   	push   ebp
c00203ef:	57                   	push   edi
c00203f0:	52                   	push   edx
c00203f1:	50                   	push   eax
c00203f2:	e8 d2 f4 ff ff       	call   c001f8c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203f7:	83 c4 0c             	add    esp,0xc
c00203fa:	eb 53                	jmp    c002044f <Vm::x87Handler(regs*)+0xa17>
c00203fc:	31 c0                	xor    eax,eax
c00203fe:	80 fa 02             	cmp    dl,0x2
c0020401:	0f 85 92 00 00 00    	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c0020407:	83 ec 0c             	sub    esp,0xc
c002040a:	6a 00                	push   0x0
c002040c:	e8 ea f4 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020411:	59                   	pop    ecx
c0020412:	5f                   	pop    edi
c0020413:	52                   	push   edx
c0020414:	50                   	push   eax
c0020415:	e8 27 f2 ff ff       	call   c001f641 <Vm::fpuInternalTo64(unsigned long long)>
c002041a:	eb 70                	jmp    c002048c <Vm::x87Handler(regs*)+0xa54>
c002041c:	31 c0                	xor    eax,eax
c002041e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020423:	75 74                	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c0020425:	50                   	push   eax
c0020426:	50                   	push   eax
c0020427:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002042a:	31 d2                	xor    edx,edx
c002042c:	52                   	push   edx
c002042d:	50                   	push   eax
c002042e:	e8 f6 f2 ff ff       	call   c001f729 <Vm::fpuLongToFloat(long long)>
c0020433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002043a:	89 c6                	mov    esi,eax
c002043c:	89 d7                	mov    edi,edx
c002043e:	e8 b8 f4 ff ff       	call   c001f8fb <Vm::fpuGetReg(int)>
c0020443:	57                   	push   edi
c0020444:	56                   	push   esi
c0020445:	52                   	push   edx
c0020446:	50                   	push   eax
c0020447:	e8 5e f4 ff ff       	call   c001f8aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002044c:	83 c4 1c             	add    esp,0x1c
c002044f:	52                   	push   edx
c0020450:	50                   	push   eax
c0020451:	6a 00                	push   0x0
c0020453:	e8 e6 f4 ff ff       	call   c001f93e <Vm::fpuSetReg(int, unsigned long long)>
c0020458:	e9 f2 f7 ff ff       	jmp    c001fc4f <Vm::x87Handler(regs*)+0x217>
c002045d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020461:	80 fa 05             	cmp    dl,0x5
c0020464:	75 11                	jne    c0020477 <Vm::x87Handler(regs*)+0xa3f>
c0020466:	55                   	push   ebp
c0020467:	55                   	push   ebp
c0020468:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002046b:	ff 36                	push   DWORD PTR [esi]
c002046d:	e8 81 f2 ff ff       	call   c001f6f3 <Vm::fpuULongToFloat(unsigned long long)>
c0020472:	e9 cf f7 ff ff       	jmp    c001fc46 <Vm::x87Handler(regs*)+0x20e>
c0020477:	31 c0                	xor    eax,eax
c0020479:	80 fa 07             	cmp    dl,0x7
c002047c:	75 1b                	jne    c0020499 <Vm::x87Handler(regs*)+0xa61>
c002047e:	e8 63 f5 ff ff       	call   c001f9e6 <Vm::fpuPop()>
c0020483:	51                   	push   ecx
c0020484:	51                   	push   ecx
c0020485:	52                   	push   edx
c0020486:	50                   	push   eax
c0020487:	e8 0c f2 ff ff       	call   c001f698 <Vm::fpuFloatToLong(unsigned long long)>
c002048c:	83 c4 10             	add    esp,0x10
c002048f:	89 06                	mov    DWORD PTR [esi],eax
c0020491:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020494:	e9 f8 f7 ff ff       	jmp    c001fc91 <Vm::x87Handler(regs*)+0x259>
c0020499:	83 c4 1c             	add    esp,0x1c
c002049c:	5b                   	pop    ebx
c002049d:	5e                   	pop    esi
c002049e:	5f                   	pop    edi
c002049f:	5d                   	pop    ebp
c00204a0:	c3                   	ret    

c00204a1 <__static_initialization_and_destruction_0(int, int)>:
c00204a1:	83 ec 0c             	sub    esp,0xc
c00204a4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204a9:	75 1a                	jne    c00204c5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204ab:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204b3:	75 10                	jne    c00204c5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204b5:	83 ec 0c             	sub    esp,0xc
c00204b8:	68 60 19 03 c0       	push   0xc0031960
c00204bd:	e8 0e 88 00 00       	call   c0028cd0 <Vm::_FPUState::_FPUState()>
c00204c2:	83 c4 10             	add    esp,0x10
c00204c5:	90                   	nop
c00204c6:	83 c4 0c             	add    esp,0xc
c00204c9:	c3                   	ret    

c00204ca <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	83 ec 08             	sub    esp,0x8
c00204d0:	68 ff ff 00 00       	push   0xffff
c00204d5:	6a 01                	push   0x1
c00204d7:	e8 c5 ff ff ff       	call   c00204a1 <__static_initialization_and_destruction_0(int, int)>
c00204dc:	83 c4 10             	add    esp,0x10
c00204df:	83 c4 0c             	add    esp,0xc
c00204e2:	c3                   	ret    
c00204e3:	90                   	nop

c00204e4 <FAT::getName()>:
c00204e4:	b8 64 c7 02 c0       	mov    eax,0xc002c764
c00204e9:	c3                   	ret    

c00204ea <FAT::tell(void*, unsigned long long*)>:
c00204ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204ef:	75 06                	jne    c00204f7 <FAT::tell(void*, unsigned long long*)+0xd>
c00204f1:	b8 04 00 00 00       	mov    eax,0x4
c00204f6:	c3                   	ret    
c00204f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204fc:	75 06                	jne    c0020504 <FAT::tell(void*, unsigned long long*)+0x1a>
c00204fe:	b8 04 00 00 00       	mov    eax,0x4
c0020503:	c3                   	ret    
c0020504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020508:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002050b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002050e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020512:	89 01                	mov    DWORD PTR [ecx],eax
c0020514:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020517:	b8 00 00 00 00       	mov    eax,0x0
c002051c:	c3                   	ret    
c002051d:	90                   	nop

c002051e <FAT::stat(void*, unsigned long long*)>:
c002051e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020523:	75 06                	jne    c002052b <FAT::stat(void*, unsigned long long*)+0xd>
c0020525:	b8 04 00 00 00       	mov    eax,0x4
c002052a:	c3                   	ret    
c002052b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020530:	75 06                	jne    c0020538 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020532:	b8 04 00 00 00       	mov    eax,0x4
c0020537:	c3                   	ret    
c0020538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002053c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002053f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020542:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020546:	89 01                	mov    DWORD PTR [ecx],eax
c0020548:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002054b:	b8 00 00 00 00       	mov    eax,0x0
c0020550:	c3                   	ret    
c0020551:	90                   	nop

c0020552 <FAT::~FAT()>:
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	ba e8 c7 02 c0       	mov    edx,0xc002c7e8
c002055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055e:	89 10                	mov    DWORD PTR [eax],edx
c0020560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020564:	83 ec 0c             	sub    esp,0xc
c0020567:	50                   	push   eax
c0020568:	e8 93 2c ff ff       	call   c0013200 <Filesystem::~Filesystem()>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	90                   	nop
c0020571:	83 c4 0c             	add    esp,0xc
c0020574:	c3                   	ret    
c0020575:	90                   	nop

c0020576 <FAT::~FAT()>:
c0020576:	83 ec 0c             	sub    esp,0xc
c0020579:	83 ec 0c             	sub    esp,0xc
c002057c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020580:	e8 cd ff ff ff       	call   c0020552 <FAT::~FAT()>
c0020585:	83 c4 10             	add    esp,0x10
c0020588:	83 ec 08             	sub    esp,0x8
c002058b:	6a 08                	push   0x8
c002058d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020591:	e8 62 28 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0020596:	83 c4 10             	add    esp,0x10
c0020599:	83 c4 0c             	add    esp,0xc
c002059c:	c3                   	ret    
c002059d:	90                   	nop

c002059e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002059e:	83 ec 1c             	sub    esp,0x1c
c00205a1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205a8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00205ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205b1:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00205b8:	83 f8 ff             	cmp    eax,0xffffffff
c00205bb:	75 34                	jne    c00205f1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205bd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205c1:	88 c2                	mov    dl,al
c00205c3:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205c8:	01 d0                	add    eax,edx
c00205ca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205ce:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c00205d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205d8:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c00205df:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205e8:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00205ef:	eb 17                	jmp    c0020608 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205f1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205f5:	88 c2                	mov    dl,al
c00205f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205fb:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020602:	01 d0                	add    eax,edx
c0020604:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020608:	83 ec 04             	sub    esp,0x4
c002060b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002060f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020613:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020617:	50                   	push   eax
c0020618:	e8 1b 67 fe ff       	call   c0006d38 <f_getlabel>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020624:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020629:	75 07                	jne    c0020632 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002062b:	b8 00 00 00 00       	mov    eax,0x0
c0020630:	eb 05                	jmp    c0020637 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020632:	b8 01 00 00 00       	mov    eax,0x1
c0020637:	83 c4 1c             	add    esp,0x1c
c002063a:	c3                   	ret    
c002063b:	90                   	nop

c002063c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002063c:	57                   	push   edi
c002063d:	83 ec 58             	sub    esp,0x58
c0020640:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020648:	8d 54 24 10          	lea    edx,[esp+0x10]
c002064c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020651:	b8 00 00 00 00       	mov    eax,0x0
c0020656:	fc                   	cld    
c0020657:	89 d7                	mov    edi,edx
c0020659:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002065b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002065f:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020666:	83 f8 ff             	cmp    eax,0xffffffff
c0020669:	75 34                	jne    c002069f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002066b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002066f:	88 c2                	mov    dl,al
c0020671:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020676:	01 d0                	add    eax,edx
c0020678:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002067c:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020682:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020686:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c002068d:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020692:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020696:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c002069d:	eb 17                	jmp    c00206b6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002069f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206a3:	88 c2                	mov    dl,al
c00206a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206a9:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00206b0:	01 d0                	add    eax,edx
c00206b2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206b6:	83 ec 08             	sub    esp,0x8
c00206b9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206c1:	50                   	push   eax
c00206c2:	e8 ad 02 fe ff       	call   c0000974 <strcat>
c00206c7:	83 c4 10             	add    esp,0x10
c00206ca:	83 ec 0c             	sub    esp,0xc
c00206cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206d1:	50                   	push   eax
c00206d2:	e8 4f 68 fe ff       	call   c0006f26 <f_setlabel>
c00206d7:	83 c4 10             	add    esp,0x10
c00206da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206de:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206e3:	75 07                	jne    c00206ec <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206e5:	b8 00 00 00 00       	mov    eax,0x0
c00206ea:	eb 05                	jmp    c00206f1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206ec:	b8 01 00 00 00       	mov    eax,0x1
c00206f1:	83 c4 58             	add    esp,0x58
c00206f4:	5f                   	pop    edi
c00206f5:	c3                   	ret    

c00206f6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206f6:	83 ec 2c             	sub    esp,0x2c
c00206f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020701:	83 ec 08             	sub    esp,0x8
c0020704:	68 88 c7 02 c0       	push   0xc002c788
c0020709:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002070d:	e8 ae 01 fe ff       	call   c00008c0 <strcmp>
c0020712:	83 c4 10             	add    esp,0x10
c0020715:	85 c0                	test   eax,eax
c0020717:	0f 94 c0             	sete   al
c002071a:	84 c0                	test   al,al
c002071c:	74 0d                	je     c002072b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002071e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020726:	e9 a6 00 00 00       	jmp    c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002072b:	83 ec 08             	sub    esp,0x8
c002072e:	68 7a c7 02 c0       	push   0xc002c77a
c0020733:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020737:	e8 84 01 fe ff       	call   c00008c0 <strcmp>
c002073c:	83 c4 10             	add    esp,0x10
c002073f:	85 c0                	test   eax,eax
c0020741:	0f 94 c0             	sete   al
c0020744:	84 c0                	test   al,al
c0020746:	74 0a                	je     c0020752 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020748:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020750:	eb 7f                	jmp    c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020752:	83 ec 08             	sub    esp,0x8
c0020755:	68 80 c7 02 c0       	push   0xc002c780
c002075a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002075e:	e8 5d 01 fe ff       	call   c00008c0 <strcmp>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	85 c0                	test   eax,eax
c0020768:	0f 94 c0             	sete   al
c002076b:	84 c0                	test   al,al
c002076d:	74 0a                	je     c0020779 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002076f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020777:	eb 58                	jmp    c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020779:	83 ec 08             	sub    esp,0x8
c002077c:	68 2c 94 02 c0       	push   0xc002942c
c0020781:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020785:	e8 36 01 fe ff       	call   c00008c0 <strcmp>
c002078a:	83 c4 10             	add    esp,0x10
c002078d:	85 c0                	test   eax,eax
c002078f:	0f 94 c0             	sete   al
c0020792:	84 c0                	test   al,al
c0020794:	74 0a                	je     c00207a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020796:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002079e:	eb 31                	jmp    c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a0:	83 ec 08             	sub    esp,0x8
c00207a3:	68 86 c7 02 c0       	push   0xc002c786
c00207a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ac:	e8 0f 01 fe ff       	call   c00008c0 <strcmp>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	85 c0                	test   eax,eax
c00207b6:	0f 94 c0             	sete   al
c00207b9:	84 c0                	test   al,al
c00207bb:	74 0a                	je     c00207c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207bd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207c5:	eb 0a                	jmp    c00207d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207c7:	b8 08 00 00 00       	mov    eax,0x8
c00207cc:	e9 04 01 00 00       	jmp    c00208d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207d1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207d8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207e1:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00207e8:	83 f8 ff             	cmp    eax,0xffffffff
c00207eb:	75 34                	jne    c0020821 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207ed:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207f1:	88 c2                	mov    dl,al
c00207f3:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00207f8:	01 d0                	add    eax,edx
c00207fa:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207fe:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020804:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020808:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c002080f:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020814:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020818:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c002081f:	eb 17                	jmp    c0020838 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020821:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020825:	88 c2                	mov    dl,al
c0020827:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002082b:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020832:	01 d0                	add    eax,edx
c0020834:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020838:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002083c:	88 04 24             	mov    BYTE PTR [esp],al
c002083f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020843:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020847:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002084f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020854:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002085c:	83 ec 0c             	sub    esp,0xc
c002085f:	68 00 20 00 00       	push   0x2000
c0020864:	e8 da ef fe ff       	call   c000f843 <malloc>
c0020869:	83 c4 10             	add    esp,0x10
c002086c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020870:	68 00 20 00 00       	push   0x2000
c0020875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020879:	8d 44 24 08          	lea    eax,[esp+0x8]
c002087d:	50                   	push   eax
c002087e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020882:	50                   	push   eax
c0020883:	e8 e9 6a fe ff       	call   c0007371 <f_mkfs>
c0020888:	83 c4 10             	add    esp,0x10
c002088b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002088f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020894:	75 07                	jne    c002089d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020896:	b8 00 00 00 00       	mov    eax,0x0
c002089b:	eb 38                	jmp    c00208d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002089d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208a2:	75 17                	jne    c00208bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208a4:	83 ec 0c             	sub    esp,0xc
c00208a7:	68 b8 c7 02 c0       	push   0xc002c7b8
c00208ac:	e8 27 26 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00208b1:	83 c4 10             	add    esp,0x10
c00208b4:	b8 09 00 00 00       	mov    eax,0x9
c00208b9:	eb 1a                	jmp    c00208d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208bf:	83 ec 08             	sub    esp,0x8
c00208c2:	50                   	push   eax
c00208c3:	68 8c c7 02 c0       	push   0xc002c78c
c00208c8:	e8 0b 26 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	b8 01 00 00 00       	mov    eax,0x1
c00208d5:	83 c4 2c             	add    esp,0x2c
c00208d8:	c3                   	ret    
c00208d9:	90                   	nop

c00208da <FAT::tryMount(LogicalDisk*, int)>:
c00208da:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208e0:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00208e5:	83 f8 14             	cmp    eax,0x14
c00208e8:	75 17                	jne    c0020901 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208ea:	83 ec 0c             	sub    esp,0xc
c00208ed:	68 9e c7 02 c0       	push   0xc002c79e
c00208f2:	e8 86 9c ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00208f7:	83 c4 10             	add    esp,0x10
c00208fa:	b0 00                	mov    al,0x0
c00208fc:	e9 d7 01 00 00       	jmp    c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020901:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020908:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002090e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020914:	3d 00 02 00 00       	cmp    eax,0x200
c0020919:	74 07                	je     c0020922 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002091b:	b0 00                	mov    al,0x0
c002091d:	e9 b6 01 00 00       	jmp    c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020922:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002092a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020931:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020938:	83 f8 ff             	cmp    eax,0xffffffff
c002093b:	74 07                	je     c0020944 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002093d:	b0 01                	mov    al,0x1
c002093f:	e9 94 01 00 00       	jmp    c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020944:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002094e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020956:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002095d:	88 c2                	mov    dl,al
c002095f:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020964:	01 d0                	add    eax,edx
c0020966:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002096d:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020973:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002097a:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0020981:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020986:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002098d:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020994:	83 ec 0c             	sub    esp,0xc
c0020997:	68 54 02 00 00       	push   0x254
c002099c:	e8 a2 ee fe ff       	call   c000f843 <malloc>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00209ab:	83 ec 04             	sub    esp,0x4
c00209ae:	6a 00                	push   0x0
c00209b0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209b7:	50                   	push   eax
c00209b8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209bf:	e8 6b 45 fe ff       	call   c0004f2f <f_mount>
c00209c4:	83 c4 10             	add    esp,0x10
c00209c7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209ce:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209d6:	74 19                	je     c00209f1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209d8:	83 ec 0c             	sub    esp,0xc
c00209db:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209e2:	e8 7c ee fe ff       	call   c000f863 <rfree>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	b0 00                	mov    al,0x0
c00209ec:	e9 e7 00 00 00       	jmp    c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f1:	83 ec 04             	sub    esp,0x4
c00209f4:	68 00 01 00 00       	push   0x100
c00209f9:	6a 00                	push   0x0
c00209fb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a02:	50                   	push   eax
c0020a03:	e8 70 fd fd ff       	call   c0000778 <memset>
c0020a08:	83 c4 10             	add    esp,0x10
c0020a0b:	83 ec 08             	sub    esp,0x8
c0020a0e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a15:	50                   	push   eax
c0020a16:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a1d:	50                   	push   eax
c0020a1e:	e8 51 ff fd ff       	call   c0000974 <strcat>
c0020a23:	83 c4 10             	add    esp,0x10
c0020a26:	83 ec 08             	sub    esp,0x8
c0020a29:	68 ac c7 02 c0       	push   0xc002c7ac
c0020a2e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a35:	50                   	push   eax
c0020a36:	e8 39 ff fd ff       	call   c0000974 <strcat>
c0020a3b:	83 c4 10             	add    esp,0x10
c0020a3e:	83 ec 04             	sub    esp,0x4
c0020a41:	6a 01                	push   0x1
c0020a43:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a4a:	50                   	push   eax
c0020a4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a4f:	50                   	push   eax
c0020a50:	e8 3c 45 fe ff       	call   c0004f91 <f_open>
c0020a55:	83 c4 10             	add    esp,0x10
c0020a58:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a5f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a66:	85 c0                	test   eax,eax
c0020a68:	74 0a                	je     c0020a74 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a6a:	78 2d                	js     c0020a99 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a6c:	83 e8 04             	sub    eax,0x4
c0020a6f:	83 f8 01             	cmp    eax,0x1
c0020a72:	77 25                	ja     c0020a99 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a74:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a7c:	83 ec 0c             	sub    esp,0xc
c0020a7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a83:	50                   	push   eax
c0020a84:	e8 5a 50 fe ff       	call   c0005ae3 <f_close>
c0020a89:	83 c4 10             	add    esp,0x10
c0020a8c:	90                   	nop
c0020a8d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a95:	74 3a                	je     c0020ad1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a97:	eb 2d                	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a99:	83 ec 0c             	sub    esp,0xc
c0020a9c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020aa3:	e8 bb ed fe ff       	call   c000f863 <rfree>
c0020aa8:	83 c4 10             	add    esp,0x10
c0020aab:	83 ec 04             	sub    esp,0x4
c0020aae:	6a 00                	push   0x0
c0020ab0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ab7:	50                   	push   eax
c0020ab8:	6a 00                	push   0x0
c0020aba:	e8 70 44 fe ff       	call   c0004f2f <f_mount>
c0020abf:	83 c4 10             	add    esp,0x10
c0020ac2:	b0 00                	mov    al,0x0
c0020ac4:	eb 12                	jmp    c0020ad8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ac6:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020acb:	40                   	inc    eax
c0020acc:	a3 c0 19 03 c0       	mov    ds:0xc00319c0,eax
c0020ad1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020ad8:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020ade:	c3                   	ret    
c0020adf:	90                   	nop

c0020ae0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ae0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020ae6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020aee:	74 0a                	je     c0020afa <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020af0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020af8:	75 0a                	jne    c0020b04 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020afa:	b8 04 00 00 00       	mov    eax,0x4
c0020aff:	e9 db 00 00 00       	jmp    c0020bdf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b04:	83 ec 08             	sub    esp,0x8
c0020b07:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b0e:	50                   	push   eax
c0020b0f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b16:	e8 d2 55 fe ff       	call   c00060ed <f_readdir>
c0020b1b:	83 c4 10             	add    esp,0x10
c0020b1e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b25:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b2b:	83 ec 0c             	sub    esp,0xc
c0020b2e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b35:	83 c0 1a             	add    eax,0x1a
c0020b38:	50                   	push   eax
c0020b39:	e8 56 fc fd ff       	call   c0000794 <strlen>
c0020b3e:	83 c4 10             	add    esp,0x10
c0020b41:	ba 00 00 00 00       	mov    edx,0x0
c0020b46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b4e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b55:	0f b6 c0             	movzx  eax,al
c0020b58:	83 e0 10             	and    eax,0x10
c0020b5b:	74 07                	je     c0020b64 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b5d:	b8 02 00 00 00       	mov    eax,0x2
c0020b62:	eb 05                	jmp    c0020b69 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b64:	b8 01 00 00 00       	mov    eax,0x1
c0020b69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b6d:	83 ec 08             	sub    esp,0x8
c0020b70:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b77:	83 c0 1a             	add    eax,0x1a
c0020b7a:	50                   	push   eax
c0020b7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b7f:	83 c0 10             	add    eax,0x10
c0020b82:	50                   	push   eax
c0020b83:	e8 ac fc fd ff       	call   c0000834 <strcpy>
c0020b88:	83 c4 10             	add    esp,0x10
c0020b8b:	83 ec 04             	sub    esp,0x4
c0020b8e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b99:	50                   	push   eax
c0020b9a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020ba1:	e8 9e fb fd ff       	call   c0000744 <memcpy>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020bb0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bb6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bbd:	84 c0                	test   al,al
c0020bbf:	75 07                	jne    c0020bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bc1:	b8 07 00 00 00       	mov    eax,0x7
c0020bc6:	eb 17                	jmp    c0020bdf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bc8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bcf:	85 c0                	test   eax,eax
c0020bd1:	75 07                	jne    c0020bda <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bd3:	b8 00 00 00 00       	mov    eax,0x0
c0020bd8:	eb 05                	jmp    c0020bdf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bda:	b8 01 00 00 00       	mov    eax,0x1
c0020bdf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020be5:	c3                   	ret    

c0020be6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020be6:	83 ec 1c             	sub    esp,0x1c
c0020be9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bee:	74 07                	je     c0020bf7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020bf0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020bf5:	75 07                	jne    c0020bfe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020bf7:	b8 04 00 00 00       	mov    eax,0x4
c0020bfc:	eb 3d                	jmp    c0020c3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bfe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c02:	50                   	push   eax
c0020c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c0f:	e8 b9 47 fe ff       	call   c00053cd <f_read>
c0020c14:	83 c4 10             	add    esp,0x10
c0020c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c1f:	89 c2                	mov    edx,eax
c0020c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c25:	89 10                	mov    DWORD PTR [eax],edx
c0020c27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c2b:	85 c0                	test   eax,eax
c0020c2d:	75 07                	jne    c0020c36 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c2f:	b8 00 00 00 00       	mov    eax,0x0
c0020c34:	eb 05                	jmp    c0020c3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c36:	b8 01 00 00 00       	mov    eax,0x1
c0020c3b:	83 c4 1c             	add    esp,0x1c
c0020c3e:	c3                   	ret    
c0020c3f:	90                   	nop

c0020c40 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c40:	83 ec 1c             	sub    esp,0x1c
c0020c43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c48:	74 07                	je     c0020c51 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c4f:	75 07                	jne    c0020c58 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c51:	b8 04 00 00 00       	mov    eax,0x4
c0020c56:	eb 3d                	jmp    c0020c95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c5c:	50                   	push   eax
c0020c5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c69:	e8 df 49 fe ff       	call   c000564d <f_write>
c0020c6e:	83 c4 10             	add    esp,0x10
c0020c71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c79:	89 c2                	mov    edx,eax
c0020c7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c7f:	89 10                	mov    DWORD PTR [eax],edx
c0020c81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c85:	85 c0                	test   eax,eax
c0020c87:	75 07                	jne    c0020c90 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c89:	b8 00 00 00 00       	mov    eax,0x0
c0020c8e:	eb 05                	jmp    c0020c95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c90:	b8 01 00 00 00       	mov    eax,0x1
c0020c95:	83 c4 1c             	add    esp,0x1c
c0020c98:	c3                   	ret    
c0020c99:	90                   	nop

c0020c9a <FAT::close(void*)>:
c0020c9a:	83 ec 1c             	sub    esp,0x1c
c0020c9d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ca2:	75 07                	jne    c0020cab <FAT::close(void*)+0x11>
c0020ca4:	b8 04 00 00 00       	mov    eax,0x4
c0020ca9:	eb 36                	jmp    c0020ce1 <FAT::close(void*)+0x47>
c0020cab:	83 ec 0c             	sub    esp,0xc
c0020cae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb2:	e8 2c 4e fe ff       	call   c0005ae3 <f_close>
c0020cb7:	83 c4 10             	add    esp,0x10
c0020cba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cbe:	83 ec 0c             	sub    esp,0xc
c0020cc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cc5:	e8 89 eb fe ff       	call   c000f853 <free>
c0020cca:	83 c4 10             	add    esp,0x10
c0020ccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cd1:	85 c0                	test   eax,eax
c0020cd3:	75 07                	jne    c0020cdc <FAT::close(void*)+0x42>
c0020cd5:	b8 00 00 00 00       	mov    eax,0x0
c0020cda:	eb 05                	jmp    c0020ce1 <FAT::close(void*)+0x47>
c0020cdc:	b8 01 00 00 00       	mov    eax,0x1
c0020ce1:	83 c4 1c             	add    esp,0x1c
c0020ce4:	c3                   	ret    
c0020ce5:	90                   	nop

c0020ce6 <FAT::closeDir(void*)>:
c0020ce6:	83 ec 1c             	sub    esp,0x1c
c0020ce9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cee:	75 07                	jne    c0020cf7 <FAT::closeDir(void*)+0x11>
c0020cf0:	b8 04 00 00 00       	mov    eax,0x4
c0020cf5:	eb 36                	jmp    c0020d2d <FAT::closeDir(void*)+0x47>
c0020cf7:	83 ec 0c             	sub    esp,0xc
c0020cfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cfe:	e8 c8 53 fe ff       	call   c00060cb <f_closedir>
c0020d03:	83 c4 10             	add    esp,0x10
c0020d06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d0a:	83 ec 0c             	sub    esp,0xc
c0020d0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d11:	e8 3d eb fe ff       	call   c000f853 <free>
c0020d16:	83 c4 10             	add    esp,0x10
c0020d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d1d:	85 c0                	test   eax,eax
c0020d1f:	75 07                	jne    c0020d28 <FAT::closeDir(void*)+0x42>
c0020d21:	b8 00 00 00 00       	mov    eax,0x0
c0020d26:	eb 05                	jmp    c0020d2d <FAT::closeDir(void*)+0x47>
c0020d28:	b8 01 00 00 00       	mov    eax,0x1
c0020d2d:	83 c4 1c             	add    esp,0x1c
c0020d30:	c3                   	ret    
c0020d31:	90                   	nop

c0020d32 <FAT::seek(void*, unsigned long long)>:
c0020d32:	83 ec 2c             	sub    esp,0x2c
c0020d35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d45:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d4a:	75 07                	jne    c0020d53 <FAT::seek(void*, unsigned long long)+0x21>
c0020d4c:	b8 04 00 00 00       	mov    eax,0x4
c0020d51:	eb 2f                	jmp    c0020d82 <FAT::seek(void*, unsigned long long)+0x50>
c0020d53:	83 ec 04             	sub    esp,0x4
c0020d56:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d62:	e8 ab 4d fe ff       	call   c0005b12 <f_lseek>
c0020d67:	83 c4 10             	add    esp,0x10
c0020d6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d72:	85 c0                	test   eax,eax
c0020d74:	75 07                	jne    c0020d7d <FAT::seek(void*, unsigned long long)+0x4b>
c0020d76:	b8 00 00 00 00       	mov    eax,0x0
c0020d7b:	eb 05                	jmp    c0020d82 <FAT::seek(void*, unsigned long long)+0x50>
c0020d7d:	b8 01 00 00 00       	mov    eax,0x1
c0020d82:	83 c4 2c             	add    esp,0x2c
c0020d85:	c3                   	ret    

c0020d86 <fatWrapperReadDisk>:
c0020d86:	83 ec 1c             	sub    esp,0x1c
c0020d89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d8d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d95:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020da0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020da5:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020dac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020db0:	83 ec 0c             	sub    esp,0xc
c0020db3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db7:	52                   	push   edx
c0020db8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dc0:	50                   	push   eax
c0020dc1:	e8 22 59 ff ff       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020dc6:	83 c4 20             	add    esp,0x20
c0020dc9:	83 c4 1c             	add    esp,0x1c
c0020dcc:	c3                   	ret    

c0020dcd <fatWrapperWriteDisk>:
c0020dcd:	83 ec 1c             	sub    esp,0x1c
c0020dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ddc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ddf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020de3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020de7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dec:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020df3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020df7:	83 ec 0c             	sub    esp,0xc
c0020dfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dfe:	52                   	push   edx
c0020dff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e07:	50                   	push   eax
c0020e08:	e8 47 59 ff ff       	call   c0016754 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e0d:	83 c4 20             	add    esp,0x20
c0020e10:	83 c4 1c             	add    esp,0x1c
c0020e13:	c3                   	ret    

c0020e14 <fatWrapperIoctl>:
c0020e14:	53                   	push   ebx
c0020e15:	83 ec 28             	sub    esp,0x28
c0020e18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e20:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e24:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e28:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e2d:	75 31                	jne    c0020e60 <fatWrapperIoctl+0x4c>
c0020e2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e37:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e3c:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e53:	66 89 02             	mov    WORD PTR [edx],ax
c0020e56:	b8 00 00 00 00       	mov    eax,0x0
c0020e5b:	e9 b2 00 00 00       	jmp    c0020f12 <fatWrapperIoctl+0xfe>
c0020e60:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e65:	75 6a                	jne    c0020ed1 <fatWrapperIoctl+0xbd>
c0020e67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e74:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e81:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e87:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e8d:	89 c8                	mov    eax,ecx
c0020e8f:	89 da                	mov    edx,ebx
c0020e91:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e95:	c1 e0 0a             	shl    eax,0xa
c0020e98:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e9d:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0020ea4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020eaa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020eb0:	89 cb                	mov    ebx,ecx
c0020eb2:	c1 fb 1f             	sar    ebx,0x1f
c0020eb5:	53                   	push   ebx
c0020eb6:	51                   	push   ecx
c0020eb7:	52                   	push   edx
c0020eb8:	50                   	push   eax
c0020eb9:	e8 be 5a 00 00       	call   c002697c <__udivdi3>
c0020ebe:	83 c4 10             	add    esp,0x10
c0020ec1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ec5:	89 01                	mov    DWORD PTR [ecx],eax
c0020ec7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eca:	b8 00 00 00 00       	mov    eax,0x0
c0020ecf:	eb 41                	jmp    c0020f12 <fatWrapperIoctl+0xfe>
c0020ed1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ed6:	75 07                	jne    c0020edf <fatWrapperIoctl+0xcb>
c0020ed8:	b8 00 00 00 00       	mov    eax,0x0
c0020edd:	eb 33                	jmp    c0020f12 <fatWrapperIoctl+0xfe>
c0020edf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ee4:	75 19                	jne    c0020eff <fatWrapperIoctl+0xeb>
c0020ee6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ef2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ef8:	b8 00 00 00 00       	mov    eax,0x0
c0020efd:	eb 13                	jmp    c0020f12 <fatWrapperIoctl+0xfe>
c0020eff:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f04:	75 07                	jne    c0020f0d <fatWrapperIoctl+0xf9>
c0020f06:	b8 00 00 00 00       	mov    eax,0x0
c0020f0b:	eb 05                	jmp    c0020f12 <fatWrapperIoctl+0xfe>
c0020f0d:	b8 04 00 00 00       	mov    eax,0x4
c0020f12:	83 c4 28             	add    esp,0x28
c0020f15:	5b                   	pop    ebx
c0020f16:	c3                   	ret    
c0020f17:	90                   	nop

c0020f18 <FAT::FAT()>:
c0020f18:	83 ec 1c             	sub    esp,0x1c
c0020f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f1f:	83 ec 0c             	sub    esp,0xc
c0020f22:	50                   	push   eax
c0020f23:	e8 b4 22 ff ff       	call   c00131dc <Filesystem::Filesystem()>
c0020f28:	83 c4 10             	add    esp,0x10
c0020f2b:	ba e8 c7 02 c0       	mov    edx,0xc002c7e8
c0020f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f34:	89 10                	mov    DWORD PTR [eax],edx
c0020f36:	c7 05 c0 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319c0,0x0
c0020f40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f4d:	7f 15                	jg     c0020f64 <FAT::FAT()+0x4c>
c0020f4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f53:	c7 04 85 e0 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce620],0xffffffff
c0020f5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f62:	eb e4                	jmp    c0020f48 <FAT::FAT()+0x30>
c0020f64:	90                   	nop
c0020f65:	83 c4 1c             	add    esp,0x1c
c0020f68:	c3                   	ret    
c0020f69:	90                   	nop

c0020f6a <FAT::fixFilepath(char*)>:
c0020f6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f6e:	8a 00                	mov    al,BYTE PTR [eax]
c0020f70:	3c 40                	cmp    al,0x40
c0020f72:	7e 2c                	jle    c0020fa0 <FAT::fixFilepath(char*)+0x36>
c0020f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f78:	8a 00                	mov    al,BYTE PTR [eax]
c0020f7a:	83 e8 41             	sub    eax,0x41
c0020f7d:	88 c2                	mov    dl,al
c0020f7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f83:	88 10                	mov    BYTE PTR [eax],dl
c0020f85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f89:	8a 00                	mov    al,BYTE PTR [eax]
c0020f8b:	0f be c0             	movsx  eax,al
c0020f8e:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020f95:	83 c0 30             	add    eax,0x30
c0020f98:	88 c2                	mov    dl,al
c0020f9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f9e:	88 10                	mov    BYTE PTR [eax],dl
c0020fa0:	90                   	nop
c0020fa1:	c3                   	ret    

c0020fa2 <FAT::open(char const*, void**, FileOpenMode)>:
c0020fa2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fa8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fb0:	74 0a                	je     c0020fbc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fb2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fba:	75 0a                	jne    c0020fc6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fbc:	b8 04 00 00 00       	mov    eax,0x4
c0020fc1:	e9 fd 00 00 00       	jmp    c00210c3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fc6:	83 ec 08             	sub    esp,0x8
c0020fc9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fd0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fd4:	50                   	push   eax
c0020fd5:	e8 5a f8 fd ff       	call   c0000834 <strcpy>
c0020fda:	83 c4 10             	add    esp,0x10
c0020fdd:	83 ec 08             	sub    esp,0x8
c0020fe0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fe4:	50                   	push   eax
c0020fe5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fec:	e8 79 ff ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c0020ff1:	83 c4 10             	add    esp,0x10
c0020ff4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ffc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021003:	83 e0 01             	and    eax,0x1
c0021006:	74 08                	je     c0021010 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021008:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021010:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021017:	83 e0 04             	and    eax,0x4
c002101a:	74 10                	je     c002102c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002101c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021024:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002102c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021033:	83 e0 02             	and    eax,0x2
c0021036:	74 08                	je     c0021040 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021038:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021040:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021047:	83 e0 08             	and    eax,0x8
c002104a:	74 08                	je     c0021054 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002104c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021054:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002105b:	83 e0 10             	and    eax,0x10
c002105e:	74 08                	je     c0021068 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021060:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021068:	83 ec 0c             	sub    esp,0xc
c002106b:	68 50 02 00 00       	push   0x250
c0021070:	e8 ce e7 fe ff       	call   c000f843 <malloc>
c0021075:	83 c4 10             	add    esp,0x10
c0021078:	89 c2                	mov    edx,eax
c002107a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021081:	89 10                	mov    DWORD PTR [eax],edx
c0021083:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002108b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021092:	8b 00                	mov    eax,DWORD PTR [eax]
c0021094:	83 ec 04             	sub    esp,0x4
c0021097:	52                   	push   edx
c0021098:	8d 54 24 10          	lea    edx,[esp+0x10]
c002109c:	52                   	push   edx
c002109d:	50                   	push   eax
c002109e:	e8 ee 3e fe ff       	call   c0004f91 <f_open>
c00210a3:	83 c4 10             	add    esp,0x10
c00210a6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00210ad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210b5:	74 07                	je     c00210be <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210b7:	b8 01 00 00 00       	mov    eax,0x1
c00210bc:	eb 05                	jmp    c00210c3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210be:	b8 00 00 00 00       	mov    eax,0x0
c00210c3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210c9:	c3                   	ret    

c00210ca <FAT::openDir(char const*, void**)>:
c00210ca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210d0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210d8:	74 0a                	je     c00210e4 <FAT::openDir(char const*, void**)+0x1a>
c00210da:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210e2:	75 07                	jne    c00210eb <FAT::openDir(char const*, void**)+0x21>
c00210e4:	b8 04 00 00 00       	mov    eax,0x4
c00210e9:	eb 7d                	jmp    c0021168 <FAT::openDir(char const*, void**)+0x9e>
c00210eb:	83 ec 08             	sub    esp,0x8
c00210ee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210f9:	50                   	push   eax
c00210fa:	e8 35 f7 fd ff       	call   c0000834 <strcpy>
c00210ff:	83 c4 10             	add    esp,0x10
c0021102:	83 ec 08             	sub    esp,0x8
c0021105:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021109:	50                   	push   eax
c002110a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021111:	e8 54 fe ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c0021116:	83 c4 10             	add    esp,0x10
c0021119:	83 ec 0c             	sub    esp,0xc
c002111c:	6a 4c                	push   0x4c
c002111e:	e8 20 e7 fe ff       	call   c000f843 <malloc>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	89 c2                	mov    edx,eax
c0021128:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002112f:	89 10                	mov    DWORD PTR [eax],edx
c0021131:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021138:	8b 00                	mov    eax,DWORD PTR [eax]
c002113a:	83 ec 08             	sub    esp,0x8
c002113d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021141:	52                   	push   edx
c0021142:	50                   	push   eax
c0021143:	e8 81 4e fe ff       	call   c0005fc9 <f_opendir>
c0021148:	83 c4 10             	add    esp,0x10
c002114b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021152:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002115a:	74 07                	je     c0021163 <FAT::openDir(char const*, void**)+0x99>
c002115c:	b8 01 00 00 00       	mov    eax,0x1
c0021161:	eb 05                	jmp    c0021168 <FAT::openDir(char const*, void**)+0x9e>
c0021163:	b8 00 00 00 00       	mov    eax,0x0
c0021168:	81 c4 1c 01 00 00    	add    esp,0x11c
c002116e:	c3                   	ret    
c002116f:	90                   	nop

c0021170 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021170:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021176:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002117e:	75 0a                	jne    c002118a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021180:	b8 04 00 00 00       	mov    eax,0x4
c0021185:	e9 c9 00 00 00       	jmp    c0021253 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002118a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021192:	75 0a                	jne    c002119e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021194:	b8 04 00 00 00       	mov    eax,0x4
c0021199:	e9 b5 00 00 00       	jmp    c0021253 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002119e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211a6:	75 0a                	jne    c00211b2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211a8:	b8 04 00 00 00       	mov    eax,0x4
c00211ad:	e9 a1 00 00 00       	jmp    c0021253 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211b2:	83 ec 08             	sub    esp,0x8
c00211b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211c3:	50                   	push   eax
c00211c4:	e8 6b f6 fd ff       	call   c0000834 <strcpy>
c00211c9:	83 c4 10             	add    esp,0x10
c00211cc:	83 ec 08             	sub    esp,0x8
c00211cf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211d6:	50                   	push   eax
c00211d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211de:	e8 87 fd ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	83 ec 08             	sub    esp,0x8
c00211e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211ed:	50                   	push   eax
c00211ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211f5:	50                   	push   eax
c00211f6:	e8 8d 4f fe ff       	call   c0006188 <f_stat>
c00211fb:	83 c4 10             	add    esp,0x10
c00211fe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021205:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002120c:	85 c0                	test   eax,eax
c002120e:	74 07                	je     c0021217 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021210:	83 f8 04             	cmp    eax,0x4
c0021213:	74 32                	je     c0021247 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021215:	eb 37                	jmp    c002124e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021217:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002121b:	0f b6 c0             	movzx  eax,al
c002121e:	83 e0 10             	and    eax,0x10
c0021221:	0f 95 c2             	setne  dl
c0021224:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002122b:	88 10                	mov    BYTE PTR [eax],dl
c002122d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021230:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021234:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002123b:	89 01                	mov    DWORD PTR [ecx],eax
c002123d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021240:	b8 00 00 00 00       	mov    eax,0x0
c0021245:	eb 0c                	jmp    c0021253 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021247:	b8 02 00 00 00       	mov    eax,0x2
c002124c:	eb 05                	jmp    c0021253 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002124e:	b8 01 00 00 00       	mov    eax,0x1
c0021253:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021259:	c3                   	ret    

c002125a <FAT::unlink(char const*)>:
c002125a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021260:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021268:	75 07                	jne    c0021271 <FAT::unlink(char const*)+0x17>
c002126a:	b8 04 00 00 00       	mov    eax,0x4
c002126f:	eb 5c                	jmp    c00212cd <FAT::unlink(char const*)+0x73>
c0021271:	83 ec 08             	sub    esp,0x8
c0021274:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002127b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002127f:	50                   	push   eax
c0021280:	e8 af f5 fd ff       	call   c0000834 <strcpy>
c0021285:	83 c4 10             	add    esp,0x10
c0021288:	83 ec 08             	sub    esp,0x8
c002128b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002128f:	50                   	push   eax
c0021290:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021297:	e8 ce fc ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	83 ec 0c             	sub    esp,0xc
c00212a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a6:	50                   	push   eax
c00212a7:	e8 2e 52 fe ff       	call   c00064da <f_unlink>
c00212ac:	83 c4 10             	add    esp,0x10
c00212af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212b6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212bd:	85 c0                	test   eax,eax
c00212bf:	75 07                	jne    c00212c8 <FAT::unlink(char const*)+0x6e>
c00212c1:	b8 00 00 00 00       	mov    eax,0x0
c00212c6:	eb 05                	jmp    c00212cd <FAT::unlink(char const*)+0x73>
c00212c8:	b8 01 00 00 00       	mov    eax,0x1
c00212cd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212d3:	c3                   	ret    

c00212d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212f8:	75 0a                	jne    c0021304 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212fa:	b8 04 00 00 00       	mov    eax,0x4
c00212ff:	e9 1c 01 00 00       	jmp    c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021304:	83 ec 08             	sub    esp,0x8
c0021307:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002130e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021312:	50                   	push   eax
c0021313:	e8 1c f5 fd ff       	call   c0000834 <strcpy>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	83 ec 08             	sub    esp,0x8
c002131e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021322:	50                   	push   eax
c0021323:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002132a:	e8 3b fc ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c002132f:	83 c4 10             	add    esp,0x10
c0021332:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002133a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021342:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021347:	83 e0 01             	and    eax,0x1
c002134a:	74 08                	je     c0021354 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002134c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021359:	83 e0 02             	and    eax,0x2
c002135c:	74 08                	je     c0021366 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002135e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021366:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136b:	83 e0 04             	and    eax,0x4
c002136e:	74 08                	je     c0021378 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021370:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021378:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002137d:	83 e0 08             	and    eax,0x8
c0021380:	74 08                	je     c002138a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021382:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002138a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002138f:	83 e0 01             	and    eax,0x1
c0021392:	74 08                	je     c002139c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021394:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002139c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a1:	83 e0 02             	and    eax,0x2
c00213a4:	74 08                	je     c00213ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213a6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00213ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b3:	83 e0 04             	and    eax,0x4
c00213b6:	74 08                	je     c00213c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213b8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213c5:	83 e0 08             	and    eax,0x8
c00213c8:	74 08                	je     c00213d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213ca:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213d9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213e0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213e8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213f0:	83 ec 04             	sub    esp,0x4
c00213f3:	52                   	push   edx
c00213f4:	50                   	push   eax
c00213f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213f9:	50                   	push   eax
c00213fa:	e8 7d 57 fe ff       	call   c0006b7c <f_chmod>
c00213ff:	83 c4 10             	add    esp,0x10
c0021402:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021409:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021410:	85 c0                	test   eax,eax
c0021412:	75 07                	jne    c002141b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021414:	b8 00 00 00 00       	mov    eax,0x0
c0021419:	eb 05                	jmp    c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002141b:	b8 01 00 00 00       	mov    eax,0x1
c0021420:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021426:	c3                   	ret    
c0021427:	90                   	nop

c0021428 <FAT::rename(char const*, char const*)>:
c0021428:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002142e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021436:	74 0a                	je     c0021442 <FAT::rename(char const*, char const*)+0x1a>
c0021438:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021440:	75 0a                	jne    c002144c <FAT::rename(char const*, char const*)+0x24>
c0021442:	b8 04 00 00 00       	mov    eax,0x4
c0021447:	e9 98 00 00 00       	jmp    c00214e4 <FAT::rename(char const*, char const*)+0xbc>
c002144c:	83 ec 08             	sub    esp,0x8
c002144f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021456:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002145d:	50                   	push   eax
c002145e:	e8 d1 f3 fd ff       	call   c0000834 <strcpy>
c0021463:	83 c4 10             	add    esp,0x10
c0021466:	83 ec 08             	sub    esp,0x8
c0021469:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021470:	50                   	push   eax
c0021471:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021478:	e8 ed fa ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c002147d:	83 c4 10             	add    esp,0x10
c0021480:	83 ec 08             	sub    esp,0x8
c0021483:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002148a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002148e:	50                   	push   eax
c002148f:	e8 a0 f3 fd ff       	call   c0000834 <strcpy>
c0021494:	83 c4 10             	add    esp,0x10
c0021497:	83 ec 08             	sub    esp,0x8
c002149a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002149e:	50                   	push   eax
c002149f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214a6:	e8 bf fa ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c00214ab:	83 c4 10             	add    esp,0x10
c00214ae:	83 ec 08             	sub    esp,0x8
c00214b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214b5:	50                   	push   eax
c00214b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214bd:	50                   	push   eax
c00214be:	e8 c6 53 fe ff       	call   c0006889 <f_rename>
c00214c3:	83 c4 10             	add    esp,0x10
c00214c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214d4:	85 c0                	test   eax,eax
c00214d6:	75 07                	jne    c00214df <FAT::rename(char const*, char const*)+0xb7>
c00214d8:	b8 00 00 00 00       	mov    eax,0x0
c00214dd:	eb 05                	jmp    c00214e4 <FAT::rename(char const*, char const*)+0xbc>
c00214df:	b8 01 00 00 00       	mov    eax,0x1
c00214e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214ea:	c3                   	ret    
c00214eb:	90                   	nop

c00214ec <FAT::mkdir(char const*)>:
c00214ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214fa:	75 07                	jne    c0021503 <FAT::mkdir(char const*)+0x17>
c00214fc:	b8 04 00 00 00       	mov    eax,0x4
c0021501:	eb 5c                	jmp    c002155f <FAT::mkdir(char const*)+0x73>
c0021503:	83 ec 08             	sub    esp,0x8
c0021506:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002150d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021511:	50                   	push   eax
c0021512:	e8 1d f3 fd ff       	call   c0000834 <strcpy>
c0021517:	83 c4 10             	add    esp,0x10
c002151a:	83 ec 08             	sub    esp,0x8
c002151d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021521:	50                   	push   eax
c0021522:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021529:	e8 3c fa ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c002152e:	83 c4 10             	add    esp,0x10
c0021531:	83 ec 0c             	sub    esp,0xc
c0021534:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021538:	50                   	push   eax
c0021539:	e8 1f 51 fe ff       	call   c000665d <f_mkdir>
c002153e:	83 c4 10             	add    esp,0x10
c0021541:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021548:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002154f:	85 c0                	test   eax,eax
c0021551:	75 07                	jne    c002155a <FAT::mkdir(char const*)+0x6e>
c0021553:	b8 00 00 00 00       	mov    eax,0x0
c0021558:	eb 05                	jmp    c002155f <FAT::mkdir(char const*)+0x73>
c002155a:	b8 01 00 00 00       	mov    eax,0x1
c002155f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021565:	c3                   	ret    

c0021566 <FAT::exists(char const*)>:
c0021566:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002156c:	83 ec 08             	sub    esp,0x8
c002156f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021576:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002157a:	50                   	push   eax
c002157b:	e8 b4 f2 fd ff       	call   c0000834 <strcpy>
c0021580:	83 c4 10             	add    esp,0x10
c0021583:	83 ec 08             	sub    esp,0x8
c0021586:	8d 44 24 08          	lea    eax,[esp+0x8]
c002158a:	50                   	push   eax
c002158b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021592:	e8 d3 f9 ff ff       	call   c0020f6a <FAT::fixFilepath(char*)>
c0021597:	83 c4 10             	add    esp,0x10
c002159a:	83 ec 08             	sub    esp,0x8
c002159d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215a4:	50                   	push   eax
c00215a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215a9:	50                   	push   eax
c00215aa:	e8 d9 4b fe ff       	call   c0006188 <f_stat>
c00215af:	83 c4 10             	add    esp,0x10
c00215b2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215b9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215c0:	85 c0                	test   eax,eax
c00215c2:	75 04                	jne    c00215c8 <FAT::exists(char const*)+0x62>
c00215c4:	b0 01                	mov    al,0x1
c00215c6:	eb 02                	jmp    c00215ca <FAT::exists(char const*)+0x64>
c00215c8:	b0 00                	mov    al,0x0
c00215ca:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215d0:	c3                   	ret    
c00215d1:	90                   	nop

c00215d2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215d2:	b8 08 00 00 00       	mov    eax,0x8
c00215d7:	c3                   	ret    

c00215d8 <ISO9660::seek(void*, unsigned long long)>:
c00215d8:	53                   	push   ebx
c00215d9:	b8 04 00 00 00       	mov    eax,0x4
c00215de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215ea:	85 d2                	test   edx,edx
c00215ec:	74 17                	je     c0021605 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215ee:	89 c8                	mov    eax,ecx
c00215f0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215f3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215f6:	b8 01 00 00 00       	mov    eax,0x1
c00215fb:	73 08                	jae    c0021605 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215fd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021600:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021603:	31 c0                	xor    eax,eax
c0021605:	5b                   	pop    ebx
c0021606:	c3                   	ret    
c0021607:	90                   	nop

c0021608 <ISO9660::tell(void*, unsigned long long*)>:
c0021608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002160c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021610:	85 d2                	test   edx,edx
c0021612:	74 12                	je     c0021626 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021614:	85 c0                	test   eax,eax
c0021616:	74 0e                	je     c0021626 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021618:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002161b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002161e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021621:	89 10                	mov    DWORD PTR [eax],edx
c0021623:	31 c0                	xor    eax,eax
c0021625:	c3                   	ret    
c0021626:	b8 04 00 00 00       	mov    eax,0x4
c002162b:	c3                   	ret    

c002162c <ISO9660::getName()>:
c002162c:	b8 44 c8 02 c0       	mov    eax,0xc002c844
c0021631:	c3                   	ret    

c0021632 <ISO9660::stat(void*, unsigned long long*)>:
c0021632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002163a:	85 d2                	test   edx,edx
c002163c:	74 12                	je     c0021650 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002163e:	85 c0                	test   eax,eax
c0021640:	74 0e                	je     c0021650 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021642:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021645:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021648:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002164b:	89 10                	mov    DWORD PTR [eax],edx
c002164d:	31 c0                	xor    eax,eax
c002164f:	c3                   	ret    
c0021650:	b8 04 00 00 00       	mov    eax,0x4
c0021655:	c3                   	ret    

c0021656 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021656:	b8 01 00 00 00       	mov    eax,0x1
c002165b:	c3                   	ret    

c002165c <ISO9660::unlink(char const*)>:
c002165c:	b8 01 00 00 00       	mov    eax,0x1
c0021661:	c3                   	ret    

c0021662 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021662:	b8 01 00 00 00       	mov    eax,0x1
c0021667:	c3                   	ret    

c0021668 <ISO9660::rename(char const*, char const*)>:
c0021668:	b8 01 00 00 00       	mov    eax,0x1
c002166d:	c3                   	ret    

c002166e <ISO9660::mkdir(char const*)>:
c002166e:	b8 01 00 00 00       	mov    eax,0x1
c0021673:	c3                   	ret    

c0021674 <ISO9660::close(void*)>:
c0021674:	83 ec 0c             	sub    esp,0xc
c0021677:	b8 04 00 00 00       	mov    eax,0x4
c002167c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021680:	85 d2                	test   edx,edx
c0021682:	74 0e                	je     c0021692 <ISO9660::close(void*)+0x1e>
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	52                   	push   edx
c0021688:	e8 c6 e1 fe ff       	call   c000f853 <free>
c002168d:	83 c4 10             	add    esp,0x10
c0021690:	31 c0                	xor    eax,eax
c0021692:	83 c4 0c             	add    esp,0xc
c0021695:	c3                   	ret    

c0021696 <ISO9660::closeDir(void*)>:
c0021696:	83 ec 0c             	sub    esp,0xc
c0021699:	b8 04 00 00 00       	mov    eax,0x4
c002169e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a2:	85 d2                	test   edx,edx
c00216a4:	74 0e                	je     c00216b4 <ISO9660::closeDir(void*)+0x1e>
c00216a6:	83 ec 0c             	sub    esp,0xc
c00216a9:	52                   	push   edx
c00216aa:	e8 a4 e1 fe ff       	call   c000f853 <free>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	31 c0                	xor    eax,eax
c00216b4:	83 c4 0c             	add    esp,0xc
c00216b7:	c3                   	ret    

c00216b8 <ISO9660::~ISO9660()>:
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00216c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c4:	89 10                	mov    DWORD PTR [eax],edx
c00216c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	50                   	push   eax
c00216ce:	e8 2d 1b ff ff       	call   c0013200 <Filesystem::~Filesystem()>
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	90                   	nop
c00216d7:	83 c4 0c             	add    esp,0xc
c00216da:	c3                   	ret    
c00216db:	90                   	nop

c00216dc <ISO9660::~ISO9660()>:
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	83 ec 0c             	sub    esp,0xc
c00216e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216e6:	e8 cd ff ff ff       	call   c00216b8 <ISO9660::~ISO9660()>
c00216eb:	83 c4 10             	add    esp,0x10
c00216ee:	83 ec 08             	sub    esp,0x8
c00216f1:	6a 08                	push   0x8
c00216f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216f7:	e8 fc 16 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00216fc:	83 c4 10             	add    esp,0x10
c00216ff:	83 c4 0c             	add    esp,0xc
c0021702:	c3                   	ret    

c0021703 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021703:	55                   	push   ebp
c0021704:	31 c9                	xor    ecx,ecx
c0021706:	57                   	push   edi
c0021707:	56                   	push   esi
c0021708:	53                   	push   ebx
c0021709:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002170d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021711:	89 eb                	mov    ebx,ebp
c0021713:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021717:	39 ce                	cmp    esi,ecx
c0021719:	7e 17                	jle    c0021732 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002171b:	31 d2                	xor    edx,edx
c002171d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021721:	7d 13                	jge    c0021736 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021723:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021727:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002172a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002172d:	75 0d                	jne    c002173c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002172f:	42                   	inc    edx
c0021730:	eb eb                	jmp    c002171d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021732:	31 c0                	xor    eax,eax
c0021734:	eb 0a                	jmp    c0021740 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021736:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002173a:	eb 04                	jmp    c0021740 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002173c:	41                   	inc    ecx
c002173d:	43                   	inc    ebx
c002173e:	eb d7                	jmp    c0021717 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021740:	5b                   	pop    ebx
c0021741:	5e                   	pop    esi
c0021742:	5f                   	pop    edi
c0021743:	5d                   	pop    ebp
c0021744:	c3                   	ret    

c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021745:	56                   	push   esi
c0021746:	53                   	push   ebx
c0021747:	52                   	push   edx
c0021748:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002174c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021754:	39 0d c0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ac0,ecx
c002175a:	75 08                	jne    c0021764 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002175c:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021762:	74 2b                	je     c002178f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002176c:	68 e0 1a 03 c0       	push   0xc0031ae0
c0021771:	0f be c0             	movsx  eax,al
c0021774:	6a 01                	push   0x1
c0021776:	89 0d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ecx
c002177c:	31 db                	xor    ebx,ebx
c002177e:	53                   	push   ebx
c002177f:	51                   	push   ecx
c0021780:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0021787:	e8 5c 4f ff ff       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c002178c:	83 c4 20             	add    esp,0x20
c002178f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021797:	c7 44 24 14 e0 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ae0
c002179f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217a3:	58                   	pop    eax
c00217a4:	5b                   	pop    ebx
c00217a5:	5e                   	pop    esi
c00217a6:	e9 99 ef fd ff       	jmp    c0000744 <memcpy>
c00217ab:	90                   	nop

c00217ac <ISO9660::tryMount(LogicalDisk*, int)>:
c00217ac:	81 ec 10 08 00 00    	sub    esp,0x810
c00217b2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217b9:	83 c0 41             	add    eax,0x41
c00217bc:	0f be c0             	movsx  eax,al
c00217bf:	50                   	push   eax
c00217c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217c4:	50                   	push   eax
c00217c5:	6a 10                	push   0x10
c00217c7:	e8 79 ff ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217cc:	83 c4 10             	add    esp,0x10
c00217cf:	31 c0                	xor    eax,eax
c00217d1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217d6:	75 1d                	jne    c00217f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217d8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217dd:	75 16                	jne    c00217f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217df:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217e4:	75 0f                	jne    c00217f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217e6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217eb:	75 08                	jne    c00217f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ed:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217f2:	0f 94 c0             	sete   al
c00217f5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217fb:	c3                   	ret    

c00217fc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217fc:	55                   	push   ebp
c00217fd:	57                   	push   edi
c00217fe:	56                   	push   esi
c00217ff:	53                   	push   ebx
c0021800:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021806:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002180d:	85 ed                	test   ebp,ebp
c002180f:	0f 84 d6 01 00 00    	je     c00219eb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021815:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002181d:	0f 84 c8 01 00 00    	je     c00219eb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021823:	b8 01 00 00 00       	mov    eax,0x1
c0021828:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002182c:	0f 85 be 01 00 00    	jne    c00219f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021832:	31 d2                	xor    edx,edx
c0021834:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002183b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002183e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021841:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021845:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021848:	89 04 24             	mov    DWORD PTR [esp],eax
c002184b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002184f:	01 f0                	add    eax,esi
c0021851:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021854:	11 fa                	adc    edx,edi
c0021856:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002185a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002185e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021862:	19 d1                	sbb    ecx,edx
c0021864:	72 0a                	jb     c0021870 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021866:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002186a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002186e:	eb 13                	jmp    c0021883 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021874:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021878:	29 f0                	sub    eax,esi
c002187a:	19 fa                	sbb    edx,edi
c002187c:	89 04 24             	mov    DWORD PTR [esp],eax
c002187f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021883:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021886:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021889:	0f a4 c2 0b          	shld   edx,eax,0xb
c002188d:	51                   	push   ecx
c002188e:	c1 e0 0b             	shl    eax,0xb
c0021891:	01 c6                	add    esi,eax
c0021893:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021897:	11 d7                	adc    edi,edx
c0021899:	50                   	push   eax
c002189a:	89 fa                	mov    edx,edi
c002189c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218a0:	89 f0                	mov    eax,esi
c00218a2:	53                   	push   ebx
c00218a3:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218a7:	50                   	push   eax
c00218a8:	e8 98 fe ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218b4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218b8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218be:	83 c4 10             	add    esp,0x10
c00218c1:	b8 00 08 00 00       	mov    eax,0x800
c00218c6:	29 d0                	sub    eax,edx
c00218c8:	39 c1                	cmp    ecx,eax
c00218ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218ce:	83 d9 00             	sbb    ecx,0x0
c00218d1:	7d 1c                	jge    c00218ef <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218d8:	75 12                	jne    c00218ec <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218da:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218e7:	e9 fb 00 00 00       	jmp    c00219e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218ef:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218f2:	31 d2                	xor    edx,edx
c00218f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218f8:	39 c2                	cmp    edx,eax
c00218fa:	7d 14                	jge    c0021910 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218fc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021903:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021907:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002190a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002190d:	42                   	inc    edx
c002190e:	eb e8                	jmp    c00218f8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021910:	89 c3                	mov    ebx,eax
c0021912:	85 c0                	test   eax,eax
c0021914:	79 02                	jns    c0021918 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021916:	31 db                	xor    ebx,ebx
c0021918:	99                   	cdq    
c0021919:	01 c3                	add    ebx,eax
c002191b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021922:	01 c6                	add    esi,eax
c0021924:	11 d7                	adc    edi,edx
c0021926:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002192a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002192e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021931:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021935:	29 c6                	sub    esi,eax
c0021937:	19 d7                	sbb    edi,edx
c0021939:	89 34 24             	mov    DWORD PTR [esp],esi
c002193c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021940:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021945:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021948:	b8 00 00 00 00       	mov    eax,0x0
c002194d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021951:	7d 3e                	jge    c0021991 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021953:	52                   	push   edx
c0021954:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021958:	50                   	push   eax
c0021959:	53                   	push   ebx
c002195a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002195e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021962:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021966:	50                   	push   eax
c0021967:	e8 d9 fd ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002196c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021974:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021979:	81 c3 00 08 00 00    	add    ebx,0x800
c002197f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021987:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002198c:	83 c4 10             	add    esp,0x10
c002198f:	eb af                	jmp    c0021940 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021995:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021998:	74 32                	je     c00219cc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002199a:	50                   	push   eax
c002199b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002199f:	50                   	push   eax
c00219a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219a4:	50                   	push   eax
c00219a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00219ad:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219b1:	56                   	push   esi
c00219b2:	e8 8e fd ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219b7:	83 c4 0c             	add    esp,0xc
c00219ba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219c2:	50                   	push   eax
c00219c3:	53                   	push   ebx
c00219c4:	e8 7b ed fd ff       	call   c0000744 <memcpy>
c00219c9:	83 c4 10             	add    esp,0x10
c00219cc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219db:	89 38                	mov    DWORD PTR [eax],edi
c00219dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219e1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219e7:	31 c0                	xor    eax,eax
c00219e9:	eb 05                	jmp    c00219f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219eb:	b8 04 00 00 00       	mov    eax,0x4
c00219f0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219f6:	5b                   	pop    ebx
c00219f7:	5e                   	pop    esi
c00219f8:	5f                   	pop    edi
c00219f9:	5d                   	pop    ebp
c00219fa:	c3                   	ret    
c00219fb:	90                   	nop

c00219fc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219fc:	55                   	push   ebp
c00219fd:	57                   	push   edi
c00219fe:	56                   	push   esi
c00219ff:	53                   	push   ebx
c0021a00:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a06:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a0d:	85 f6                	test   esi,esi
c0021a0f:	0f 84 64 02 00 00    	je     c0021c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a15:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a1d:	0f 84 56 02 00 00    	je     c0021c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a23:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a26:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a29:	75 0a                	jne    c0021a35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a2b:	b8 07 00 00 00       	mov    eax,0x7
c0021a30:	e9 49 02 00 00       	jmp    c0021c7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a35:	50                   	push   eax
c0021a36:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a3a:	50                   	push   eax
c0021a3b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a42:	53                   	push   ebx
c0021a43:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a45:	c1 e0 0b             	shl    eax,0xb
c0021a48:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a4b:	c1 e8 0b             	shr    eax,0xb
c0021a4e:	50                   	push   eax
c0021a4f:	e8 f1 fc ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a54:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a57:	83 c4 10             	add    esp,0x10
c0021a5a:	89 c1                	mov    ecx,eax
c0021a5c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a5f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a65:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a68:	84 db                	test   bl,bl
c0021a6a:	0f 85 90 00 00 00    	jne    c0021b00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a70:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a76:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a7c:	29 c7                	sub    edi,eax
c0021a7e:	89 fb                	mov    ebx,edi
c0021a80:	c1 fb 1f             	sar    ebx,0x1f
c0021a83:	01 f8                	add    eax,edi
c0021a85:	11 da                	adc    edx,ebx
c0021a87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a8f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a92:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a95:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a98:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a9e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aa2:	89 d8                	mov    eax,ebx
c0021aa4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021aa7:	ba 00 00 00 00       	mov    edx,0x0
c0021aac:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ab0:	b8 00 00 00 00       	mov    eax,0x0
c0021ab5:	73 0b                	jae    c0021ac2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021abe:	29 f8                	sub    eax,edi
c0021ac0:	19 da                	sbb    edx,ebx
c0021ac2:	89 d3                	mov    ebx,edx
c0021ac4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ac7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021aca:	09 c3                	or     ebx,eax
c0021acc:	0f 84 59 ff ff ff    	je     c0021a2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ad2:	55                   	push   ebp
c0021ad3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ad7:	50                   	push   eax
c0021ad8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021adf:	53                   	push   ebx
c0021ae0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ae2:	c1 e0 0b             	shl    eax,0xb
c0021ae5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021ae9:	c1 e8 0b             	shr    eax,0xb
c0021aec:	50                   	push   eax
c0021aed:	e8 53 fc ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021af2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021af5:	83 c4 10             	add    esp,0x10
c0021af8:	25 ff 07 00 00       	and    eax,0x7ff
c0021afd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b00:	57                   	push   edi
c0021b01:	6a 28                	push   0x28
c0021b03:	6a 00                	push   0x0
c0021b05:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b09:	50                   	push   eax
c0021b0a:	e8 69 ec fd ff       	call   c0000778 <memset>
c0021b0f:	31 d2                	xor    edx,edx
c0021b11:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b14:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b1a:	89 f8                	mov    eax,edi
c0021b1c:	83 c0 21             	add    eax,0x21
c0021b1f:	83 d2 00             	adc    edx,0x0
c0021b22:	89 c7                	mov    edi,eax
c0021b24:	89 d5                	mov    ebp,edx
c0021b26:	83 c4 10             	add    esp,0x10
c0021b29:	31 c9                	xor    ecx,ecx
c0021b2b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b32:	83 f9 28             	cmp    ecx,0x28
c0021b35:	88 04 24             	mov    BYTE PTR [esp],al
c0021b38:	0f 94 c2             	sete   dl
c0021b3b:	88 d0                	mov    al,dl
c0021b3d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b42:	39 fa                	cmp    edx,edi
c0021b44:	ba 00 00 00 00       	mov    edx,0x0
c0021b49:	19 ea                	sbb    edx,ebp
c0021b4b:	0f 92 c2             	setb   dl
c0021b4e:	09 c2                	or     edx,eax
c0021b50:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b54:	0f 94 c0             	sete   al
c0021b57:	08 d0                	or     al,dl
c0021b59:	75 16                	jne    c0021b71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b5b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b5f:	74 10                	je     c0021b71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b61:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b64:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b68:	41                   	inc    ecx
c0021b69:	83 c7 01             	add    edi,0x1
c0021b6c:	83 d5 00             	adc    ebp,0x0
c0021b6f:	eb ba                	jmp    c0021b2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b71:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b7f:	57                   	push   edi
c0021b80:	e8 0f ec fd ff       	call   c0000794 <strlen>
c0021b85:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b91:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b98:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b9b:	5a                   	pop    edx
c0021b9c:	25 ff 07 00 00       	and    eax,0x7ff
c0021ba1:	01 c8                	add    eax,ecx
c0021ba3:	59                   	pop    ecx
c0021ba4:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021baa:	83 e0 02             	and    eax,0x2
c0021bad:	3c 01                	cmp    al,0x1
c0021baf:	19 c0                	sbb    eax,eax
c0021bb1:	83 c0 02             	add    eax,0x2
c0021bb4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021bb8:	57                   	push   edi
c0021bb9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bbd:	50                   	push   eax
c0021bbe:	e8 71 ec fd ff       	call   c0000834 <strcpy>
c0021bc3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bc7:	83 c4 10             	add    esp,0x10
c0021bca:	84 c0                	test   al,al
c0021bcc:	75 21                	jne    c0021bef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bce:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bd6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bde:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021be6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bed:	eb 28                	jmp    c0021c17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bef:	fe c8                	dec    al
c0021bf1:	75 24                	jne    c0021c17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bf3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021bfb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c03:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c0b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c12:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c17:	0f b6 fb             	movzx  edi,bl
c0021c1a:	31 db                	xor    ebx,ebx
c0021c1c:	50                   	push   eax
c0021c1d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c24:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c28:	50                   	push   eax
c0021c29:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c30:	e8 0f eb fd ff       	call   c0000744 <memcpy>
c0021c35:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c3c:	89 f9                	mov    ecx,edi
c0021c3e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c44:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c47:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c4a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c4d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c50:	83 c4 10             	add    esp,0x10
c0021c53:	39 c7                	cmp    edi,eax
c0021c55:	89 df                	mov    edi,ebx
c0021c57:	19 d7                	sbb    edi,edx
c0021c59:	72 10                	jb     c0021c6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c5b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c62:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c69:	eb 0a                	jmp    c0021c75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c6b:	29 c8                	sub    eax,ecx
c0021c6d:	19 da                	sbb    edx,ebx
c0021c6f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c72:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c75:	31 c0                	xor    eax,eax
c0021c77:	eb 05                	jmp    c0021c7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c79:	b8 04 00 00 00       	mov    eax,0x4
c0021c7e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c84:	5b                   	pop    ebx
c0021c85:	5e                   	pop    esi
c0021c86:	5f                   	pop    edi
c0021c87:	5d                   	pop    ebp
c0021c88:	c3                   	ret    

c0021c89 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c89:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c8f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c97:	50                   	push   eax
c0021c98:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c9c:	50                   	push   eax
c0021c9d:	6a 10                	push   0x10
c0021c9f:	e8 a1 fa ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca4:	83 c4 0c             	add    esp,0xc
c0021ca7:	6a 22                	push   0x22
c0021ca9:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021cb0:	50                   	push   eax
c0021cb1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021cb5:	50                   	push   eax
c0021cb6:	e8 89 ea fd ff       	call   c0000744 <memcpy>
c0021cbb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cc6:	89 10                	mov    DWORD PTR [eax],edx
c0021cc8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ccf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cd3:	89 10                	mov    DWORD PTR [eax],edx
c0021cd5:	b0 01                	mov    al,0x1
c0021cd7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021cdd:	c3                   	ret    

c0021cde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cde:	55                   	push   ebp
c0021cdf:	57                   	push   edi
c0021ce0:	56                   	push   esi
c0021ce1:	53                   	push   ebx
c0021ce2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ce8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cef:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cfa:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cfe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d02:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d06:	75 03                	jne    c0021d0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d08:	83 c3 02             	add    ebx,0x2
c0021d0b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d0e:	75 03                	jne    c0021d13 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d10:	43                   	inc    ebx
c0021d11:	eb f8                	jmp    c0021d0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d13:	51                   	push   ecx
c0021d14:	68 00 01 00 00       	push   0x100
c0021d19:	6a 00                	push   0x0
c0021d1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d1f:	50                   	push   eax
c0021d20:	e8 53 ea fd ff       	call   c0000778 <memset>
c0021d25:	83 c4 10             	add    esp,0x10
c0021d28:	31 d2                	xor    edx,edx
c0021d2a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d2d:	84 c0                	test   al,al
c0021d2f:	74 21                	je     c0021d52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d31:	3c 2f                	cmp    al,0x2f
c0021d33:	75 0b                	jne    c0021d40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d35:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d39:	bd 01 00 00 00       	mov    ebp,0x1
c0021d3e:	eb 14                	jmp    c0021d54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d40:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d43:	80 f9 19             	cmp    cl,0x19
c0021d46:	77 03                	ja     c0021d4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d48:	83 e8 20             	sub    eax,0x20
c0021d4b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d4f:	42                   	inc    edx
c0021d50:	eb d8                	jmp    c0021d2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d52:	31 ed                	xor    ebp,ebp
c0021d54:	83 ec 0c             	sub    esp,0xc
c0021d57:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d5e:	e8 e0 da fe ff       	call   c000f843 <malloc>
c0021d63:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d6a:	89 c6                	mov    esi,eax
c0021d6c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d72:	c1 ef 0b             	shr    edi,0xb
c0021d75:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d7c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d80:	83 c4 10             	add    esp,0x10
c0021d83:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d8c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d93:	74 28                	je     c0021dbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d95:	52                   	push   edx
c0021d96:	57                   	push   edi
c0021d97:	50                   	push   eax
c0021d98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d9c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021da3:	e8 9d f9 ff ff       	call   c0021745 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021da8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dac:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021db3:	05 00 08 00 00       	add    eax,0x800
c0021db8:	83 c4 10             	add    esp,0x10
c0021dbb:	eb cb                	jmp    c0021d88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dbd:	83 ec 0c             	sub    esp,0xc
c0021dc0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021dc4:	57                   	push   edi
c0021dc5:	e8 ca e9 fd ff       	call   c0000794 <strlen>
c0021dca:	50                   	push   eax
c0021dcb:	57                   	push   edi
c0021dcc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dd3:	56                   	push   esi
c0021dd4:	e8 2a f9 ff ff       	call   c0021703 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dd9:	83 c4 20             	add    esp,0x20
c0021ddc:	85 c0                	test   eax,eax
c0021dde:	75 13                	jne    c0021df3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021de0:	83 ec 0c             	sub    esp,0xc
c0021de3:	56                   	push   esi
c0021de4:	e8 6a da fe ff       	call   c000f853 <free>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	31 c0                	xor    eax,eax
c0021dee:	e9 b3 00 00 00       	jmp    c0021ea6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021df3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021df7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021dfb:	c1 e7 08             	shl    edi,0x8
c0021dfe:	c1 e2 10             	shl    edx,0x10
c0021e01:	09 d7                	or     edi,edx
c0021e03:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e07:	09 d7                	or     edi,edx
c0021e09:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e0d:	c1 e2 18             	shl    edx,0x18
c0021e10:	09 d7                	or     edi,edx
c0021e12:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e16:	89 d1                	mov    ecx,edx
c0021e18:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e1c:	c1 e1 08             	shl    ecx,0x8
c0021e1f:	c1 e2 10             	shl    edx,0x10
c0021e22:	09 ca                	or     edx,ecx
c0021e24:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e28:	09 ca                	or     edx,ecx
c0021e2a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e2e:	c1 e1 18             	shl    ecx,0x18
c0021e31:	09 ca                	or     edx,ecx
c0021e33:	89 e9                	mov    ecx,ebp
c0021e35:	84 c9                	test   cl,cl
c0021e37:	74 3c                	je     c0021e75 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e39:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e3d:	83 ec 0c             	sub    esp,0xc
c0021e40:	56                   	push   esi
c0021e41:	e8 0d da fe ff       	call   c000f853 <free>
c0021e46:	83 c4 0c             	add    esp,0xc
c0021e49:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e50:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e55:	50                   	push   eax
c0021e56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e5d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e68:	52                   	push   edx
c0021e69:	57                   	push   edi
c0021e6a:	53                   	push   ebx
c0021e6b:	e8 6e fe ff ff       	call   c0021cde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e70:	83 c4 20             	add    esp,0x20
c0021e73:	eb 31                	jmp    c0021ea6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e75:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e78:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e7f:	d0 e8                	shr    al,1
c0021e81:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e83:	83 e0 01             	and    eax,0x1
c0021e86:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e8d:	83 ec 0c             	sub    esp,0xc
c0021e90:	89 13                	mov    DWORD PTR [ebx],edx
c0021e92:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e99:	89 03                	mov    DWORD PTR [ebx],eax
c0021e9b:	56                   	push   esi
c0021e9c:	e8 b2 d9 fe ff       	call   c000f853 <free>
c0021ea1:	83 c4 10             	add    esp,0x10
c0021ea4:	b0 01                	mov    al,0x1
c0021ea6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021eac:	5b                   	pop    ebx
c0021ead:	5e                   	pop    esi
c0021eae:	5f                   	pop    edi
c0021eaf:	5d                   	pop    ebp
c0021eb0:	c3                   	ret    

c0021eb1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021eb1:	55                   	push   ebp
c0021eb2:	57                   	push   edi
c0021eb3:	56                   	push   esi
c0021eb4:	53                   	push   ebx
c0021eb5:	83 ec 20             	sub    esp,0x20
c0021eb8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ebc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ec0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ec4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ecc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ed4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ed9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021edf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ee5:	57                   	push   edi
c0021ee6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eea:	50                   	push   eax
c0021eeb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eef:	50                   	push   eax
c0021ef0:	e8 94 fd ff ff       	call   c0021c89 <readRoot(unsigned int*, unsigned int*, char)>
c0021ef5:	5a                   	pop    edx
c0021ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021efa:	e8 95 e8 fd ff       	call   c0000794 <strlen>
c0021eff:	83 c4 10             	add    esp,0x10
c0021f02:	83 f8 03             	cmp    eax,0x3
c0021f05:	77 17                	ja     c0021f1e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f0b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f11:	89 06                	mov    DWORD PTR [esi],eax
c0021f13:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f1a:	b0 01                	mov    al,0x1
c0021f1c:	eb 19                	jmp    c0021f37 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f1e:	50                   	push   eax
c0021f1f:	55                   	push   ebp
c0021f20:	57                   	push   edi
c0021f21:	56                   	push   esi
c0021f22:	53                   	push   ebx
c0021f23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f2f:	e8 aa fd ff ff       	call   c0021cde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f34:	83 c4 20             	add    esp,0x20
c0021f37:	83 c4 1c             	add    esp,0x1c
c0021f3a:	5b                   	pop    ebx
c0021f3b:	5e                   	pop    esi
c0021f3c:	5f                   	pop    edi
c0021f3d:	5d                   	pop    ebp
c0021f3e:	c3                   	ret    
c0021f3f:	90                   	nop

c0021f40 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f40:	57                   	push   edi
c0021f41:	56                   	push   esi
c0021f42:	53                   	push   ebx
c0021f43:	83 ec 10             	sub    esp,0x10
c0021f46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f4a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f4e:	85 ff                	test   edi,edi
c0021f50:	0f 84 9d 00 00 00    	je     c0021ff3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f56:	85 f6                	test   esi,esi
c0021f58:	0f 84 95 00 00 00    	je     c0021ff3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f5e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f63:	74 17                	je     c0021f7c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f65:	83 ec 0c             	sub    esp,0xc
c0021f68:	68 5f c8 02 c0       	push   0xc002c85f
c0021f6d:	e8 66 0f ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0021f72:	83 c4 10             	add    esp,0x10
c0021f75:	b8 03 00 00 00       	mov    eax,0x3
c0021f7a:	eb 7c                	jmp    c0021ff8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f7c:	83 ec 0c             	sub    esp,0xc
c0021f7f:	6a 1c                	push   0x1c
c0021f81:	e8 bd d8 fe ff       	call   c000f843 <malloc>
c0021f86:	89 07                	mov    DWORD PTR [edi],eax
c0021f88:	89 c3                	mov    ebx,eax
c0021f8a:	58                   	pop    eax
c0021f8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f8f:	50                   	push   eax
c0021f90:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f93:	50                   	push   eax
c0021f94:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f98:	50                   	push   eax
c0021f99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f9d:	50                   	push   eax
c0021f9e:	56                   	push   esi
c0021f9f:	e8 0d ff ff ff       	call   c0021eb1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fa4:	83 c4 20             	add    esp,0x20
c0021fa7:	84 c0                	test   al,al
c0021fa9:	74 07                	je     c0021fb2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021fab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fb0:	74 0b                	je     c0021fbd <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fb2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fb6:	b8 01 00 00 00       	mov    eax,0x1
c0021fbb:	eb 3b                	jmp    c0021ff8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fc1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fc5:	89 03                	mov    DWORD PTR [ebx],eax
c0021fc7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fd9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fe0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fe3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fea:	8a 06                	mov    al,BYTE PTR [esi]
c0021fec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fef:	31 c0                	xor    eax,eax
c0021ff1:	eb 05                	jmp    c0021ff8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff3:	b8 04 00 00 00       	mov    eax,0x4
c0021ff8:	83 c4 10             	add    esp,0x10
c0021ffb:	5b                   	pop    ebx
c0021ffc:	5e                   	pop    esi
c0021ffd:	5f                   	pop    edi
c0021ffe:	c3                   	ret    
c0021fff:	90                   	nop

c0022000 <ISO9660::exists(char const*)>:
c0022000:	83 ec 28             	sub    esp,0x28
c0022003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022007:	8d 54 24 18          	lea    edx,[esp+0x18]
c002200b:	52                   	push   edx
c002200c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002200f:	52                   	push   edx
c0022010:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022014:	52                   	push   edx
c0022015:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022019:	52                   	push   edx
c002201a:	50                   	push   eax
c002201b:	e8 91 fe ff ff       	call   c0021eb1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022020:	83 c4 3c             	add    esp,0x3c
c0022023:	c3                   	ret    

c0022024 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022024:	56                   	push   esi
c0022025:	53                   	push   ebx
c0022026:	83 ec 14             	sub    esp,0x14
c0022029:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002202d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022031:	85 db                	test   ebx,ebx
c0022033:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022037:	0f 94 c2             	sete   dl
c002203a:	85 f6                	test   esi,esi
c002203c:	0f 94 c0             	sete   al
c002203f:	08 c2                	or     dl,al
c0022041:	75 68                	jne    c00220ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022043:	85 c9                	test   ecx,ecx
c0022045:	74 64                	je     c00220ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022047:	83 ec 0c             	sub    esp,0xc
c002204a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002204d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022051:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022057:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002205e:	50                   	push   eax
c002205f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022062:	50                   	push   eax
c0022063:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022067:	50                   	push   eax
c0022068:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002206c:	50                   	push   eax
c002206d:	51                   	push   ecx
c002206e:	e8 3e fe ff ff       	call   c0021eb1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022073:	83 c4 20             	add    esp,0x20
c0022076:	ba 01 00 00 00       	mov    edx,0x1
c002207b:	84 c0                	test   al,al
c002207d:	74 31                	je     c00220b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002207f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022083:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002208a:	89 03                	mov    DWORD PTR [ebx],eax
c002208c:	ba 00 00 00 00       	mov    edx,0x0
c0022091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022095:	85 c0                	test   eax,eax
c0022097:	0f 95 06             	setne  BYTE PTR [esi]
c002209a:	74 14                	je     c00220b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002209c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220a2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220a9:	eb 05                	jmp    c00220b0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ab:	ba 04 00 00 00       	mov    edx,0x4
c00220b0:	83 c4 14             	add    esp,0x14
c00220b3:	89 d0                	mov    eax,edx
c00220b5:	5b                   	pop    ebx
c00220b6:	5e                   	pop    esi
c00220b7:	c3                   	ret    

c00220b8 <ISO9660::openDir(char const*, void**)>:
c00220b8:	57                   	push   edi
c00220b9:	56                   	push   esi
c00220ba:	53                   	push   ebx
c00220bb:	83 ec 10             	sub    esp,0x10
c00220be:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220c2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220c6:	85 ff                	test   edi,edi
c00220c8:	0f 84 95 00 00 00    	je     c0022163 <ISO9660::openDir(char const*, void**)+0xab>
c00220ce:	85 f6                	test   esi,esi
c00220d0:	0f 84 8d 00 00 00    	je     c0022163 <ISO9660::openDir(char const*, void**)+0xab>
c00220d6:	83 ec 0c             	sub    esp,0xc
c00220d9:	6a 1c                	push   0x1c
c00220db:	e8 63 d7 fe ff       	call   c000f843 <malloc>
c00220e0:	89 07                	mov    DWORD PTR [edi],eax
c00220e2:	89 c3                	mov    ebx,eax
c00220e4:	59                   	pop    ecx
c00220e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220e9:	50                   	push   eax
c00220ea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220ed:	50                   	push   eax
c00220ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220f2:	50                   	push   eax
c00220f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220f7:	50                   	push   eax
c00220f8:	56                   	push   esi
c00220f9:	e8 b3 fd ff ff       	call   c0021eb1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220fe:	83 c4 20             	add    esp,0x20
c0022101:	84 c0                	test   al,al
c0022103:	74 07                	je     c002210c <ISO9660::openDir(char const*, void**)+0x54>
c0022105:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002210a:	75 21                	jne    c002212d <ISO9660::openDir(char const*, void**)+0x75>
c002210c:	0f b6 c0             	movzx  eax,al
c002210f:	52                   	push   edx
c0022110:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022114:	50                   	push   eax
c0022115:	68 85 c8 02 c0       	push   0xc002c885
c002211a:	e8 b9 0d ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c002211f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022123:	83 c4 10             	add    esp,0x10
c0022126:	b8 01 00 00 00       	mov    eax,0x1
c002212b:	eb 3b                	jmp    c0022168 <ISO9660::openDir(char const*, void**)+0xb0>
c002212d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022131:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022135:	89 03                	mov    DWORD PTR [ebx],eax
c0022137:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002213e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022149:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022150:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022153:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002215a:	8a 06                	mov    al,BYTE PTR [esi]
c002215c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002215f:	31 c0                	xor    eax,eax
c0022161:	eb 05                	jmp    c0022168 <ISO9660::openDir(char const*, void**)+0xb0>
c0022163:	b8 04 00 00 00       	mov    eax,0x4
c0022168:	83 c4 10             	add    esp,0x10
c002216b:	5b                   	pop    ebx
c002216c:	5e                   	pop    esi
c002216d:	5f                   	pop    edi
c002216e:	c3                   	ret    
c002216f:	90                   	nop

c0022170 <ISO9660::ISO9660()>:
c0022170:	83 ec 0c             	sub    esp,0xc
c0022173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022177:	83 ec 0c             	sub    esp,0xc
c002217a:	50                   	push   eax
c002217b:	e8 5c 10 ff ff       	call   c00131dc <Filesystem::Filesystem()>
c0022180:	83 c4 10             	add    esp,0x10
c0022183:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c0022188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218c:	89 10                	mov    DWORD PTR [eax],edx
c002218e:	90                   	nop
c002218f:	83 c4 0c             	add    esp,0xc
c0022192:	c3                   	ret    
c0022193:	90                   	nop

c0022194 <SoundChannel::~SoundChannel()>:
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002219e:	83 ec 0c             	sub    esp,0xc
c00221a1:	50                   	push   eax
c00221a2:	e8 ac d6 fe ff       	call   c000f853 <free>
c00221a7:	83 c4 10             	add    esp,0x10
c00221aa:	90                   	nop
c00221ab:	83 c4 0c             	add    esp,0xc
c00221ae:	c3                   	ret    
c00221af:	90                   	nop

c00221b0 <SoundChannel::setSpeed(float)>:
c00221b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221b8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221bb:	c3                   	ret    

c00221bc <SoundChannel::getSpeed()>:
c00221bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221c3:	c3                   	ret    

c00221c4 <SoundChannel::setVolume(int)>:
c00221c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221c8:	83 f8 64             	cmp    eax,0x64
c00221cb:	7e 05                	jle    c00221d2 <SoundChannel::setVolume(int)+0xe>
c00221cd:	b8 64 00 00 00       	mov    eax,0x64
c00221d2:	85 c0                	test   eax,eax
c00221d4:	79 02                	jns    c00221d8 <SoundChannel::setVolume(int)+0x14>
c00221d6:	31 c0                	xor    eax,eax
c00221d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221dc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221df:	c3                   	ret    

c00221e0 <SoundChannel::getVolume()>:
c00221e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221e7:	c3                   	ret    

c00221e8 <SoundChannel::pause()>:
c00221e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ec:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221f0:	c3                   	ret    
c00221f1:	90                   	nop

c00221f2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221f2:	83 ec 1c             	sub    esp,0x1c
c00221f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221f9:	e8 ea ff ff ff       	call   c00221e8 <SoundChannel::pause()>
c00221fe:	83 c4 04             	add    esp,0x4
c0022201:	6a 50                	push   0x50
c0022203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022207:	e8 b8 ff ff ff       	call   c00221c4 <SoundChannel::setVolume(int)>
c002220c:	83 c4 08             	add    esp,0x8
c002220f:	a1 20 c9 02 c0       	mov    eax,ds:0xc002c920
c0022214:	50                   	push   eax
c0022215:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022219:	e8 92 ff ff ff       	call   c00221b0 <SoundChannel::setSpeed(float)>
c002221e:	83 c4 08             	add    esp,0x8
c0022221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022225:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022229:	89 10                	mov    DWORD PTR [eax],edx
c002222b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002222f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022233:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002223a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002223e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022241:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022246:	75 23                	jne    c002226b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002224c:	8b 10                	mov    edx,DWORD PTR [eax]
c002224e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022255:	0f af c2             	imul   eax,edx
c0022258:	85 c0                	test   eax,eax
c002225a:	79 03                	jns    c002225f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002225c:	83 c0 03             	add    eax,0x3
c002225f:	c1 f8 02             	sar    eax,0x2
c0022262:	05 a0 0f 00 00       	add    eax,0xfa0
c0022267:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002226b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022273:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022285:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002228c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022290:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022293:	c1 e0 02             	shl    eax,0x2
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	50                   	push   eax
c002229a:	e8 a4 d5 fe ff       	call   c000f843 <malloc>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	89 c2                	mov    edx,eax
c00222a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00222ab:	83 ec 04             	sub    esp,0x4
c00222ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222b2:	50                   	push   eax
c00222b3:	6a 01                	push   0x1
c00222b5:	6a 04                	push   0x4
c00222b7:	e8 e3 68 fe ff       	call   c0008b9f <src_new>
c00222bc:	83 c4 10             	add    esp,0x10
c00222bf:	89 c2                	mov    edx,eax
c00222c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222cc:	85 c0                	test   eax,eax
c00222ce:	74 10                	je     c00222e0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222d0:	83 ec 0c             	sub    esp,0xc
c00222d3:	68 04 c9 02 c0       	push   0xc002c904
c00222d8:	e8 a0 82 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00222dd:	83 c4 10             	add    esp,0x10
c00222e0:	a0 e0 26 03 c0       	mov    al,ds:0xc00326e0
c00222e5:	83 f0 01             	xor    eax,0x1
c00222e8:	84 c0                	test   al,al
c00222ea:	74 57                	je     c0022343 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222ec:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c00222f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222fd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022305:	7f 35                	jg     c002233c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022307:	83 ec 0c             	sub    esp,0xc
c002230a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002230e:	e8 94 4f 00 00       	call   c00272a7 <__floatsisf>
c0022313:	83 c4 10             	add    esp,0x10
c0022316:	8b 15 24 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c924
c002231c:	83 ec 08             	sub    esp,0x8
c002231f:	52                   	push   edx
c0022320:	50                   	push   eax
c0022321:	e8 93 4b 00 00       	call   c0026eb9 <__mulsf3>
c0022326:	83 c4 10             	add    esp,0x10
c0022329:	89 c2                	mov    edx,eax
c002232b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002232f:	89 14 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],edx
c0022336:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002233a:	eb c1                	jmp    c00222fd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002233c:	c6 05 e0 26 03 c0 01 	mov    BYTE PTR ds:0xc00326e0,0x1
c0022343:	90                   	nop
c0022344:	83 c4 1c             	add    esp,0x1c
c0022347:	c3                   	ret    

c0022348 <SoundChannel::play()>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022350:	c3                   	ret    
c0022351:	90                   	nop

c0022352 <SoundChannel::paused()>:
c0022352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022356:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022359:	c3                   	ret    

c002235a <SoundChannel::getSampleRate()>:
c002235a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022360:	c3                   	ret    
c0022361:	90                   	nop

c0022362 <SoundChannel::getBits()>:
c0022362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022369:	c3                   	ret    

c002236a <SoundChannel::getBufferUsed()>:
c002236a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022371:	c3                   	ret    

c0022372 <SoundChannel::getBufferSize()>:
c0022372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022376:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022379:	c3                   	ret    

c002237a <SoundChannel::unbuffer(float*, int, int)>:
c002237a:	56                   	push   esi
c002237b:	53                   	push   ebx
c002237c:	83 ec 40             	sub    esp,0x40
c002237f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022383:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002238a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002238d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022391:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022395:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022399:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002239d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223a5:	e8 fd 4e 00 00       	call   c00272a7 <__floatsisf>
c00223aa:	5a                   	pop    edx
c00223ab:	89 c6                	mov    esi,eax
c00223ad:	ff 33                	push   DWORD PTR [ebx]
c00223af:	e8 f3 4e 00 00       	call   c00272a7 <__floatsisf>
c00223b4:	59                   	pop    ecx
c00223b5:	5a                   	pop    edx
c00223b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223b9:	50                   	push   eax
c00223ba:	e8 fa 4a 00 00       	call   c0026eb9 <__mulsf3>
c00223bf:	59                   	pop    ecx
c00223c0:	5a                   	pop    edx
c00223c1:	50                   	push   eax
c00223c2:	56                   	push   esi
c00223c3:	e8 b4 4c 00 00       	call   c002707c <__divsf3>
c00223c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00223cb:	e8 a7 61 00 00       	call   c0028577 <__extendsfdf2>
c00223d0:	59                   	pop    ecx
c00223d1:	5e                   	pop    esi
c00223d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223d6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223da:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223e6:	50                   	push   eax
c00223e7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223ea:	e8 a5 63 fe ff       	call   c0008794 <src_process>
c00223ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223f3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223f6:	83 c4 0c             	add    esp,0xc
c00223f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223fc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223ff:	29 d0                	sub    eax,edx
c0022401:	c1 e0 02             	shl    eax,0x2
c0022404:	50                   	push   eax
c0022405:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022408:	50                   	push   eax
c0022409:	51                   	push   ecx
c002240a:	e8 6d e2 fd ff       	call   c000067c <memmove>
c002240f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022413:	83 c4 44             	add    esp,0x44
c0022416:	5b                   	pop    ebx
c0022417:	5e                   	pop    esi
c0022418:	c3                   	ret    
c0022419:	90                   	nop

c002241a <SoundChannel::buffer8(unsigned char*, int)>:
c002241a:	55                   	push   ebp
c002241b:	57                   	push   edi
c002241c:	56                   	push   esi
c002241d:	53                   	push   ebx
c002241e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022422:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022426:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022429:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002242d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022430:	74 7a                	je     c00224ac <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022432:	85 ff                	test   edi,edi
c0022434:	7e 76                	jle    c00224ac <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022436:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002243a:	8d 70 01             	lea    esi,[eax+0x1]
c002243d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022440:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022443:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c002244a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002244d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022450:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022453:	74 5e                	je     c00224b3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022455:	83 ff 01             	cmp    edi,0x1
c0022458:	74 4b                	je     c00224a5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002245a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002245e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022461:	8d 70 01             	lea    esi,[eax+0x1]
c0022464:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022467:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c002246e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022471:	b8 02 00 00 00       	mov    eax,0x2
c0022476:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022479:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002247c:	75 23                	jne    c00224a1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002247e:	eb 27                	jmp    c00224a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022480:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022485:	8d 71 01             	lea    esi,[ecx+0x1]
c0022488:	40                   	inc    eax
c0022489:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002248c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002248f:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c0022496:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022499:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002249c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002249f:	74 06                	je     c00224a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224a1:	39 c7                	cmp    edi,eax
c00224a3:	75 db                	jne    c0022480 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224a5:	89 f8                	mov    eax,edi
c00224a7:	5b                   	pop    ebx
c00224a8:	5e                   	pop    esi
c00224a9:	5f                   	pop    edi
c00224aa:	5d                   	pop    ebp
c00224ab:	c3                   	ret    
c00224ac:	5b                   	pop    ebx
c00224ad:	31 c0                	xor    eax,eax
c00224af:	5e                   	pop    esi
c00224b0:	5f                   	pop    edi
c00224b1:	5d                   	pop    ebp
c00224b2:	c3                   	ret    
c00224b3:	b8 01 00 00 00       	mov    eax,0x1
c00224b8:	eb ed                	jmp    c00224a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224ba <SoundDevice::SoundDevice(char const*)>:
c00224ba:	83 ec 1c             	sub    esp,0x1c
c00224bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c1:	83 ec 08             	sub    esp,0x8
c00224c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224c8:	50                   	push   eax
c00224c9:	e8 20 20 ff ff       	call   c00144ee <Device::Device(char const*)>
c00224ce:	83 c4 10             	add    esp,0x10
c00224d1:	ba 30 c9 02 c0       	mov    edx,0xc002c930
c00224d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224da:	89 10                	mov    DWORD PTR [eax],edx
c00224dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022500:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022505:	7f 19                	jg     c0022520 <SoundDevice::SoundDevice(char const*)+0x66>
c0022507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002250b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002250f:	83 c2 54             	add    edx,0x54
c0022512:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002251a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002251e:	eb e0                	jmp    c0022500 <SoundDevice::SoundDevice(char const*)+0x46>
c0022520:	90                   	nop
c0022521:	83 c4 1c             	add    esp,0x1c
c0022524:	c3                   	ret    
c0022525:	90                   	nop

c0022526 <SoundDevice::~SoundDevice()>:
c0022526:	53                   	push   ebx
c0022527:	83 ec 18             	sub    esp,0x18
c002252a:	ba 30 c9 02 c0       	mov    edx,0xc002c930
c002252f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022533:	89 10                	mov    DWORD PTR [eax],edx
c0022535:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002253d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022542:	7f 46                	jg     c002258a <SoundDevice::~SoundDevice()+0x64>
c0022544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022548:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002254c:	83 c2 54             	add    edx,0x54
c002254f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022553:	85 c0                	test   eax,eax
c0022555:	74 2d                	je     c0022584 <SoundDevice::~SoundDevice()+0x5e>
c0022557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002255f:	83 c2 54             	add    edx,0x54
c0022562:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022566:	85 db                	test   ebx,ebx
c0022568:	74 1a                	je     c0022584 <SoundDevice::~SoundDevice()+0x5e>
c002256a:	83 ec 0c             	sub    esp,0xc
c002256d:	53                   	push   ebx
c002256e:	e8 21 fc ff ff       	call   c0022194 <SoundChannel::~SoundChannel()>
c0022573:	83 c4 10             	add    esp,0x10
c0022576:	83 ec 08             	sub    esp,0x8
c0022579:	6a 2c                	push   0x2c
c002257b:	53                   	push   ebx
c002257c:	e8 77 08 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0022581:	83 c4 10             	add    esp,0x10
c0022584:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022588:	eb b3                	jmp    c002253d <SoundDevice::~SoundDevice()+0x17>
c002258a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258e:	83 ec 0c             	sub    esp,0xc
c0022591:	50                   	push   eax
c0022592:	e8 39 1c ff ff       	call   c00141d0 <Device::~Device()>
c0022597:	83 c4 10             	add    esp,0x10
c002259a:	90                   	nop
c002259b:	83 c4 18             	add    esp,0x18
c002259e:	5b                   	pop    ebx
c002259f:	c3                   	ret    

c00225a0 <SoundDevice::~SoundDevice()>:
c00225a0:	83 ec 0c             	sub    esp,0xc
c00225a3:	83 ec 0c             	sub    esp,0xc
c00225a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225aa:	e8 77 ff ff ff       	call   c0022526 <SoundDevice::~SoundDevice()>
c00225af:	83 c4 10             	add    esp,0x10
c00225b2:	83 ec 08             	sub    esp,0x8
c00225b5:	68 e4 01 00 00       	push   0x1e4
c00225ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225be:	e8 35 08 ff ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	83 c4 0c             	add    esp,0xc
c00225c9:	c3                   	ret    

c00225ca <SoundDevice::getFreeChannelNum()>:
c00225ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225ce:	31 c0                	xor    eax,eax
c00225d0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225d8:	74 09                	je     c00225e3 <SoundDevice::getFreeChannelNum()+0x19>
c00225da:	40                   	inc    eax
c00225db:	83 f8 20             	cmp    eax,0x20
c00225de:	75 f0                	jne    c00225d0 <SoundDevice::getFreeChannelNum()+0x6>
c00225e0:	83 c8 ff             	or     eax,0xffffffff
c00225e3:	c3                   	ret    

c00225e4 <SoundDevice::addChannel(SoundChannel*)>:
c00225e4:	56                   	push   esi
c00225e5:	53                   	push   ebx
c00225e6:	51                   	push   ecx
c00225e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225ef:	53                   	push   ebx
c00225f0:	e8 d5 ff ff ff       	call   c00225ca <SoundDevice::getFreeChannelNum()>
c00225f5:	5a                   	pop    edx
c00225f6:	83 f8 ff             	cmp    eax,0xffffffff
c00225f9:	74 51                	je     c002264c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225fb:	85 f6                	test   esi,esi
c00225fd:	74 4d                	je     c002264c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225ff:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022606:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002260d:	75 30                	jne    c002263f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002260f:	83 ec 0c             	sub    esp,0xc
c0022612:	56                   	push   esi
c0022613:	e8 42 fd ff ff       	call   c002235a <SoundChannel::getSampleRate()>
c0022618:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002261e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022621:	e8 3c fd ff ff       	call   c0022362 <SoundChannel::getBits()>
c0022626:	83 c4 0c             	add    esp,0xc
c0022629:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002262f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022631:	50                   	push   eax
c0022632:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022638:	53                   	push   ebx
c0022639:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002263c:	83 c4 10             	add    esp,0x10
c002263f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022645:	b8 01 00 00 00       	mov    eax,0x1
c002264a:	eb 03                	jmp    c002264f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002264c:	83 c8 ff             	or     eax,0xffffffff
c002264f:	5a                   	pop    edx
c0022650:	5b                   	pop    ebx
c0022651:	5e                   	pop    esi
c0022652:	c3                   	ret    
c0022653:	90                   	nop

c0022654 <SoundDevice::removeChannel(int)>:
c0022654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002265c:	83 fa 1f             	cmp    edx,0x1f
c002265f:	77 23                	ja     c0022684 <SoundDevice::removeChannel(int)+0x30>
c0022661:	8d 14 90             	lea    edx,[eax+edx*4]
c0022664:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002266b:	74 17                	je     c0022684 <SoundDevice::removeChannel(int)+0x30>
c002266d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022677:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002267d:	75 05                	jne    c0022684 <SoundDevice::removeChannel(int)+0x30>
c002267f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022681:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022684:	c3                   	ret    
c0022685:	90                   	nop

c0022686 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022686:	57                   	push   edi
c0022687:	56                   	push   esi
c0022688:	53                   	push   ebx
c0022689:	31 db                	xor    ebx,ebx
c002268b:	83 ec 10             	sub    esp,0x10
c002268e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022692:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022696:	0f 8d cb 00 00 00    	jge    c0022767 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002269c:	83 ec 0c             	sub    esp,0xc
c002269f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226a3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226a6:	e8 cc 5e 00 00       	call   c0028577 <__extendsfdf2>
c00226ab:	83 c4 10             	add    esp,0x10
c00226ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226b6:	68 00 00 f0 3f       	push   0x3ff00000
c00226bb:	6a 00                	push   0x0
c00226bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c5:	e8 39 4e 00 00       	call   c0027503 <__adddf3>
c00226ca:	83 c4 10             	add    esp,0x10
c00226cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226d5:	68 00 00 e0 3f       	push   0x3fe00000
c00226da:	6a 00                	push   0x0
c00226dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e4:	e8 97 54 00 00       	call   c0027b80 <__muldf3>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226f4:	68 00 00 60 40       	push   0x40600000
c00226f9:	6a 00                	push   0x0
c00226fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022703:	e8 78 54 00 00       	call   c0027b80 <__muldf3>
c0022708:	59                   	pop    ecx
c0022709:	5f                   	pop    edi
c002270a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002270e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271a:	e8 34 5d 00 00       	call   c0028453 <__truncdfsf2>
c002271f:	5a                   	pop    edx
c0022720:	89 c7                	mov    edi,eax
c0022722:	59                   	pop    ecx
c0022723:	68 00 00 fe 42       	push   0x42fe0000
c0022728:	50                   	push   eax
c0022729:	e8 cf 4d 00 00       	call   c00274fd <__gesf2>
c002272e:	83 c4 10             	add    esp,0x10
c0022731:	85 c0                	test   eax,eax
c0022733:	78 06                	js     c002273b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022735:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022739:	eb 26                	jmp    c0022761 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002273b:	50                   	push   eax
c002273c:	50                   	push   eax
c002273d:	6a 00                	push   0x0
c002273f:	57                   	push   edi
c0022740:	e8 bc 4d 00 00       	call   c0027501 <__lesf2>
c0022745:	83 c4 10             	add    esp,0x10
c0022748:	85 c0                	test   eax,eax
c002274a:	7f 06                	jg     c0022752 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002274c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022750:	eb 0f                	jmp    c0022761 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022752:	83 ec 0c             	sub    esp,0xc
c0022755:	57                   	push   edi
c0022756:	e8 b1 5e 00 00       	call   c002860c <lrintf>
c002275b:	83 c4 10             	add    esp,0x10
c002275e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022761:	43                   	inc    ebx
c0022762:	e9 2b ff ff ff       	jmp    c0022692 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022767:	83 c4 10             	add    esp,0x10
c002276a:	5b                   	pop    ebx
c002276b:	5e                   	pop    esi
c002276c:	5f                   	pop    edi
c002276d:	c3                   	ret    

c002276e <SoundDevice::getAudio(int, float*, float*)>:
c002276e:	55                   	push   ebp
c002276f:	57                   	push   edi
c0022770:	56                   	push   esi
c0022771:	53                   	push   ebx
c0022772:	31 db                	xor    ebx,ebx
c0022774:	83 ec 20             	sub    esp,0x20
c0022777:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002277b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002277f:	c1 e0 02             	shl    eax,0x2
c0022782:	50                   	push   eax
c0022783:	6a 00                	push   0x0
c0022785:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022789:	e8 ea df fd ff       	call   c0000778 <memset>
c002278e:	83 c4 10             	add    esp,0x10
c0022791:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022795:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002279c:	85 c0                	test   eax,eax
c002279e:	0f 84 d7 00 00 00    	je     c002287b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227a4:	83 ec 0c             	sub    esp,0xc
c00227a7:	50                   	push   eax
c00227a8:	e8 a5 fb ff ff       	call   c0022352 <SoundChannel::paused()>
c00227ad:	83 c4 10             	add    esp,0x10
c00227b0:	84 c0                	test   al,al
c00227b2:	0f 85 c3 00 00 00    	jne    c002287b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227b8:	83 ec 0c             	sub    esp,0xc
c00227bb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227c2:	e8 19 fa ff ff       	call   c00221e0 <SoundChannel::getVolume()>
c00227c7:	83 c4 10             	add    esp,0x10
c00227ca:	85 c0                	test   eax,eax
c00227cc:	0f 84 a9 00 00 00    	je     c002287b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227d2:	83 ec 0c             	sub    esp,0xc
c00227d5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227dc:	e8 ff f9 ff ff       	call   c00221e0 <SoundChannel::getVolume()>
c00227e1:	83 ec 0c             	sub    esp,0xc
c00227e4:	50                   	push   eax
c00227e5:	e8 bd 4a 00 00       	call   c00272a7 <__floatsisf>
c00227ea:	59                   	pop    ecx
c00227eb:	5d                   	pop    ebp
c00227ec:	31 ed                	xor    ebp,ebp
c00227ee:	68 00 00 c8 42       	push   0x42c80000
c00227f3:	50                   	push   eax
c00227f4:	e8 83 48 00 00       	call   c002707c <__divsf3>
c00227f9:	83 c4 10             	add    esp,0x10
c00227fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022800:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022804:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002280a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002280e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022815:	e8 60 fb ff ff       	call   c002237a <SoundChannel::unbuffer(float*, int, int)>
c002281a:	83 c4 20             	add    esp,0x20
c002281d:	89 c1                	mov    ecx,eax
c002281f:	39 cd                	cmp    ebp,ecx
c0022821:	7d 52                	jge    c0022875 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022823:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022827:	50                   	push   eax
c0022828:	50                   	push   eax
c0022829:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002282d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022830:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022834:	e8 80 46 00 00       	call   c0026eb9 <__mulsf3>
c0022839:	5a                   	pop    edx
c002283a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002283e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022844:	e8 5e 4a 00 00       	call   c00272a7 <__floatsisf>
c0022849:	59                   	pop    ecx
c002284a:	5a                   	pop    edx
c002284b:	50                   	push   eax
c002284c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022850:	e8 27 48 00 00       	call   c002707c <__divsf3>
c0022855:	59                   	pop    ecx
c0022856:	5a                   	pop    edx
c0022857:	50                   	push   eax
c0022858:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002285c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002285f:	e8 32 43 00 00       	call   c0026b96 <__addsf3>
c0022864:	83 c4 10             	add    esp,0x10
c0022867:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002286b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002286f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022872:	45                   	inc    ebp
c0022873:	eb aa                	jmp    c002281f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022875:	39 cf                	cmp    edi,ecx
c0022877:	7e 02                	jle    c002287b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022879:	89 cf                	mov    edi,ecx
c002287b:	43                   	inc    ebx
c002287c:	83 fb 20             	cmp    ebx,0x20
c002287f:	0f 85 10 ff ff ff    	jne    c0022795 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022885:	83 c4 1c             	add    esp,0x1c
c0022888:	89 f8                	mov    eax,edi
c002288a:	5b                   	pop    ebx
c002288b:	5e                   	pop    esi
c002288c:	5f                   	pop    edi
c002288d:	5d                   	pop    ebp
c002288e:	c3                   	ret    
c002288f:	90                   	nop

c0022890 <PCI::open(int, int, void*)>:
c0022890:	83 ec 18             	sub    esp,0x18
c0022893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022897:	8b 10                	mov    edx,DWORD PTR [eax]
c0022899:	50                   	push   eax
c002289a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002289d:	31 c0                	xor    eax,eax
c002289f:	83 c4 1c             	add    esp,0x1c
c00228a2:	c3                   	ret    
c00228a3:	90                   	nop

c00228a4 <PCI::close(int, int, void*)>:
c00228a4:	31 c0                	xor    eax,eax
c00228a6:	c3                   	ret    
c00228a7:	90                   	nop

c00228a8 <PCI::PCI()>:
c00228a8:	83 ec 0c             	sub    esp,0xc
c00228ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228af:	83 ec 08             	sub    esp,0x8
c00228b2:	68 60 c9 02 c0       	push   0xc002c960
c00228b7:	50                   	push   eax
c00228b8:	e8 b5 12 ff ff       	call   c0013b72 <Bus::Bus(char const*)>
c00228bd:	83 c4 10             	add    esp,0x10
c00228c0:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c00228c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c9:	89 10                	mov    DWORD PTR [eax],edx
c00228cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d5:	0f b6 d0             	movzx  edx,al
c00228d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ed:	0f b6 d0             	movzx  edx,al
c00228f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022903:	8d 50 01             	lea    edx,[eax+0x1]
c0022906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002290a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022910:	0f b6 d0             	movzx  edx,al
c0022913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022917:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002291b:	83 c9 c0             	or     ecx,0xffffffc0
c002291e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022922:	90                   	nop
c0022923:	83 c4 0c             	add    esp,0xc
c0022926:	c3                   	ret    
c0022927:	90                   	nop

c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022928:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002292c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022931:	89 ca                	mov    edx,ecx
c0022933:	c1 e0 10             	shl    eax,0x10
c0022936:	81 e2 fc 00 00 00    	and    edx,0xfc
c002293c:	09 d0                	or     eax,edx
c002293e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022943:	c1 e2 08             	shl    edx,0x8
c0022946:	09 d0                	or     eax,edx
c0022948:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002294d:	c1 e2 0b             	shl    edx,0xb
c0022950:	09 d0                	or     eax,edx
c0022952:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022957:	0d 00 00 00 80       	or     eax,0x80000000
c002295c:	ef                   	out    dx,eax
c002295d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022962:	ed                   	in     eax,dx
c0022963:	83 e1 02             	and    ecx,0x2
c0022966:	0f b6 c9             	movzx  ecx,cl
c0022969:	c1 e1 03             	shl    ecx,0x3
c002296c:	d3 e8                	shr    eax,cl
c002296e:	c3                   	ret    
c002296f:	90                   	nop

c0022970 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022970:	6a 00                	push   0x0
c0022972:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022977:	50                   	push   eax
c0022978:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002297d:	50                   	push   eax
c002297e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022983:	50                   	push   eax
c0022984:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022988:	e8 9b ff ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002298d:	83 c4 14             	add    esp,0x14
c0022990:	c3                   	ret    
c0022991:	90                   	nop

c0022992 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022992:	6a 0e                	push   0xe
c0022994:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022999:	50                   	push   eax
c002299a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002299f:	50                   	push   eax
c00229a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229a5:	50                   	push   eax
c00229a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229aa:	e8 79 ff ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229af:	83 c4 14             	add    esp,0x14
c00229b2:	0f b6 c0             	movzx  eax,al
c00229b5:	c3                   	ret    

c00229b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229b6:	55                   	push   ebp
c00229b7:	57                   	push   edi
c00229b8:	56                   	push   esi
c00229b9:	53                   	push   ebx
c00229ba:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229bf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229c4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229c9:	6a 0a                	push   0xa
c00229cb:	56                   	push   esi
c00229cc:	55                   	push   ebp
c00229cd:	57                   	push   edi
c00229ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229d2:	e8 51 ff ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d7:	6a 0a                	push   0xa
c00229d9:	89 c3                	mov    ebx,eax
c00229db:	56                   	push   esi
c00229dc:	0f b6 db             	movzx  ebx,bl
c00229df:	55                   	push   ebp
c00229e0:	57                   	push   edi
c00229e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229e5:	e8 3e ff ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ea:	83 c4 28             	add    esp,0x28
c00229ed:	25 00 ff 00 00       	and    eax,0xff00
c00229f2:	09 d8                	or     eax,ebx
c00229f4:	5b                   	pop    ebx
c00229f5:	5e                   	pop    esi
c00229f6:	5f                   	pop    edi
c00229f7:	5d                   	pop    ebp
c00229f8:	c3                   	ret    
c00229f9:	90                   	nop

c00229fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229fa:	6a 08                	push   0x8
c00229fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a01:	50                   	push   eax
c0022a02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a07:	50                   	push   eax
c0022a08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a0d:	50                   	push   eax
c0022a0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a12:	e8 11 ff ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a17:	83 c4 14             	add    esp,0x14
c0022a1a:	0f b6 c4             	movzx  eax,ah
c0022a1d:	c3                   	ret    

c0022a1e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a1e:	6a 08                	push   0x8
c0022a20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a25:	50                   	push   eax
c0022a26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2b:	50                   	push   eax
c0022a2c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a31:	50                   	push   eax
c0022a32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a36:	e8 ed fe ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3b:	83 c4 14             	add    esp,0x14
c0022a3e:	c3                   	ret    
c0022a3f:	90                   	nop

c0022a40 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a40:	6a 3c                	push   0x3c
c0022a42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a47:	50                   	push   eax
c0022a48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4d:	50                   	push   eax
c0022a4e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a53:	50                   	push   eax
c0022a54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a58:	e8 cb fe ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5d:	83 c4 14             	add    esp,0x14
c0022a60:	c3                   	ret    
c0022a61:	90                   	nop

c0022a62 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a62:	6a 18                	push   0x18
c0022a64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a69:	50                   	push   eax
c0022a6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6f:	50                   	push   eax
c0022a70:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a75:	50                   	push   eax
c0022a76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a7a:	e8 a9 fe ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7f:	83 c4 14             	add    esp,0x14
c0022a82:	0f b6 c4             	movzx  eax,ah
c0022a85:	c3                   	ret    

c0022a86 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a86:	55                   	push   ebp
c0022a87:	57                   	push   edi
c0022a88:	56                   	push   esi
c0022a89:	53                   	push   ebx
c0022a8a:	50                   	push   eax
c0022a8b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a8f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a94:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a99:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a9e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022aa5:	8d 43 12             	lea    eax,[ebx+0x12]
c0022aa8:	83 c3 10             	add    ebx,0x10
c0022aab:	0f b6 c0             	movzx  eax,al
c0022aae:	0f b6 db             	movzx  ebx,bl
c0022ab1:	50                   	push   eax
c0022ab2:	51                   	push   ecx
c0022ab3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ab7:	57                   	push   edi
c0022ab8:	55                   	push   ebp
c0022ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022abd:	e8 66 fe ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac2:	53                   	push   ebx
c0022ac3:	89 c6                	mov    esi,eax
c0022ac5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ac9:	c1 e6 10             	shl    esi,0x10
c0022acc:	51                   	push   ecx
c0022acd:	57                   	push   edi
c0022ace:	55                   	push   ebp
c0022acf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ad3:	e8 50 fe ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad8:	83 c4 2c             	add    esp,0x2c
c0022adb:	0f b7 c0             	movzx  eax,ax
c0022ade:	5b                   	pop    ebx
c0022adf:	09 f0                	or     eax,esi
c0022ae1:	5e                   	pop    esi
c0022ae2:	5f                   	pop    edi
c0022ae3:	5d                   	pop    ebp
c0022ae4:	c3                   	ret    
c0022ae5:	90                   	nop

c0022ae6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022ae6:	53                   	push   ebx
c0022ae7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022aec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022af1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022af5:	c1 e1 10             	shl    ecx,0x10
c0022af8:	25 fc 00 00 00       	and    eax,0xfc
c0022afd:	09 c1                	or     ecx,eax
c0022aff:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b04:	c1 e0 08             	shl    eax,0x8
c0022b07:	09 c1                	or     ecx,eax
c0022b09:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b0e:	c1 e0 0b             	shl    eax,0xb
c0022b11:	09 c1                	or     ecx,eax
c0022b13:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b19:	89 c8                	mov    eax,ecx
c0022b1b:	ef                   	out    dx,eax
c0022b1c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b21:	ed                   	in     eax,dx
c0022b22:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b27:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b2c:	74 0a                	je     c0022b38 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b2e:	0f b7 d8             	movzx  ebx,ax
c0022b31:	89 d0                	mov    eax,edx
c0022b33:	c1 e0 10             	shl    eax,0x10
c0022b36:	eb 05                	jmp    c0022b3d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b38:	66 31 c0             	xor    ax,ax
c0022b3b:	89 d3                	mov    ebx,edx
c0022b3d:	09 c3                	or     ebx,eax
c0022b3f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b44:	89 c8                	mov    eax,ecx
c0022b46:	ef                   	out    dx,eax
c0022b47:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b4c:	89 d8                	mov    eax,ebx
c0022b4e:	ef                   	out    dx,eax
c0022b4f:	5b                   	pop    ebx
c0022b50:	c3                   	ret    
c0022b51:	90                   	nop

c0022b52 <PCI::checkBus(unsigned char)>:
c0022b52:	56                   	push   esi
c0022b53:	53                   	push   ebx
c0022b54:	31 db                	xor    ebx,ebx
c0022b56:	51                   	push   ecx
c0022b57:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b5c:	52                   	push   edx
c0022b5d:	53                   	push   ebx
c0022b5e:	43                   	inc    ebx
c0022b5f:	56                   	push   esi
c0022b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b64:	e8 2b 03 00 00       	call   c0022e94 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	83 fb 20             	cmp    ebx,0x20
c0022b6f:	75 eb                	jne    c0022b5c <PCI::checkBus(unsigned char)+0xa>
c0022b71:	58                   	pop    eax
c0022b72:	5b                   	pop    ebx
c0022b73:	5e                   	pop    esi
c0022b74:	c3                   	ret    
c0022b75:	90                   	nop

c0022b76 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b76:	55                   	push   ebp
c0022b77:	57                   	push   edi
c0022b78:	56                   	push   esi
c0022b79:	53                   	push   ebx
c0022b7a:	83 ec 1c             	sub    esp,0x1c
c0022b7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b81:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b87:	0f 84 52 01 00 00    	je     c0022cdf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b8d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b91:	66 81 f9 06 04       	cmp    cx,0x406
c0022b96:	75 2c                	jne    c0022bc4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b98:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b9d:	50                   	push   eax
c0022b9e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022ba3:	50                   	push   eax
c0022ba4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022ba9:	50                   	push   eax
c0022baa:	56                   	push   esi
c0022bab:	e8 b2 fe ff ff       	call   c0022a62 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bb0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bb4:	0f b6 c0             	movzx  eax,al
c0022bb7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bbb:	83 c4 2c             	add    esp,0x2c
c0022bbe:	5b                   	pop    ebx
c0022bbf:	5e                   	pop    esi
c0022bc0:	5f                   	pop    edi
c0022bc1:	5d                   	pop    ebp
c0022bc2:	eb 8e                	jmp    c0022b52 <PCI::checkBus(unsigned char)>
c0022bc4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bc8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bd2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bd6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bda:	88 d3                	mov    bl,dl
c0022bdc:	85 c0                	test   eax,eax
c0022bde:	74 33                	je     c0022c13 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022be0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022be3:	85 d2                	test   edx,edx
c0022be5:	74 28                	je     c0022c0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022be7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bed:	31 ef                	xor    edi,ebp
c0022bef:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022bf5:	75 18                	jne    c0022c0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bf7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bfb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c01:	75 0c                	jne    c0022c0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c03:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c09:	0f 84 d0 00 00 00    	je     c0022cdf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c11:	eb c9                	jmp    c0022bdc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c13:	66 81 f9 01 06       	cmp    cx,0x601
c0022c18:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c1c:	75 19                	jne    c0022c37 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c1e:	83 ec 0c             	sub    esp,0xc
c0022c21:	68 64 01 00 00       	push   0x164
c0022c26:	e8 18 cc fe ff       	call   c000f843 <malloc>
c0022c2b:	89 c5                	mov    ebp,eax
c0022c2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c30:	e8 95 0f 00 00       	call   c0023bca <SATABus::SATABus()>
c0022c35:	eb 1e                	jmp    c0022c55 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c37:	66 81 f9 01 01       	cmp    cx,0x101
c0022c3c:	75 60                	jne    c0022c9e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c3e:	83 ec 0c             	sub    esp,0xc
c0022c41:	68 70 02 00 00       	push   0x270
c0022c46:	e8 f8 cb fe ff       	call   c000f843 <malloc>
c0022c4b:	89 c5                	mov    ebp,eax
c0022c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c50:	e8 03 03 00 00       	call   c0022f58 <IDE::IDE()>
c0022c55:	58                   	pop    eax
c0022c56:	5a                   	pop    edx
c0022c57:	55                   	push   ebp
c0022c58:	56                   	push   esi
c0022c59:	e8 a0 16 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0022c5e:	83 ec 1c             	sub    esp,0x1c
c0022c61:	b9 09 00 00 00       	mov    ecx,0x9
c0022c66:	fc                   	cld    
c0022c67:	89 e7                	mov    edi,esp
c0022c69:	89 de                	mov    esi,ebx
c0022c6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c6d:	55                   	push   ebp
c0022c6e:	e8 95 15 ff ff       	call   c0014208 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c76:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c7a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c82:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c8a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c95:	83 c4 4c             	add    esp,0x4c
c0022c98:	5b                   	pop    ebx
c0022c99:	5e                   	pop    esi
c0022c9a:	5f                   	pop    edi
c0022c9b:	5d                   	pop    ebp
c0022c9c:	ff e0                	jmp    eax
c0022c9e:	83 ec 0c             	sub    esp,0xc
c0022ca1:	68 58 01 00 00       	push   0x158
c0022ca6:	e8 98 cb fe ff       	call   c000f843 <malloc>
c0022cab:	89 c5                	mov    ebp,eax
c0022cad:	58                   	pop    eax
c0022cae:	5a                   	pop    edx
c0022caf:	68 68 c9 02 c0       	push   0xc002c968
c0022cb4:	55                   	push   ebp
c0022cb5:	e8 3a 19 ff ff       	call   c00145f4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cba:	59                   	pop    ecx
c0022cbb:	5f                   	pop    edi
c0022cbc:	55                   	push   ebp
c0022cbd:	56                   	push   esi
c0022cbe:	e8 3b 16 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0022cc3:	b9 09 00 00 00       	mov    ecx,0x9
c0022cc8:	fc                   	cld    
c0022cc9:	89 df                	mov    edi,ebx
c0022ccb:	89 de                	mov    esi,ebx
c0022ccd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ccf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cd3:	83 c4 2c             	add    esp,0x2c
c0022cd6:	5b                   	pop    ebx
c0022cd7:	5e                   	pop    esi
c0022cd8:	5f                   	pop    edi
c0022cd9:	5d                   	pop    ebp
c0022cda:	e9 29 15 ff ff       	jmp    c0014208 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cdf:	83 c4 1c             	add    esp,0x1c
c0022ce2:	5b                   	pop    ebx
c0022ce3:	5e                   	pop    esi
c0022ce4:	5f                   	pop    edi
c0022ce5:	5d                   	pop    ebp
c0022ce6:	c3                   	ret    
c0022ce7:	90                   	nop

c0022ce8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ce8:	55                   	push   ebp
c0022ce9:	57                   	push   edi
c0022cea:	56                   	push   esi
c0022ceb:	53                   	push   ebx
c0022cec:	83 ec 5c             	sub    esp,0x5c
c0022cef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022cf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022cf7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022cfb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d04:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d08:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d11:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d16:	6a 0c                	push   0xc
c0022d18:	55                   	push   ebp
c0022d19:	53                   	push   ebx
c0022d1a:	57                   	push   edi
c0022d1b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d22:	e8 01 fc ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d27:	55                   	push   ebp
c0022d28:	53                   	push   ebx
c0022d29:	57                   	push   edi
c0022d2a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d31:	e8 80 fc ff ff       	call   c00229b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d36:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d3b:	83 c4 24             	add    esp,0x24
c0022d3e:	55                   	push   ebp
c0022d3f:	53                   	push   ebx
c0022d40:	57                   	push   edi
c0022d41:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d45:	e8 f6 fc ff ff       	call   c0022a40 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d4a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d4e:	6a 3c                	push   0x3c
c0022d50:	55                   	push   ebp
c0022d51:	53                   	push   ebx
c0022d52:	57                   	push   edi
c0022d53:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d5a:	e8 c9 fb ff ff       	call   c0022928 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5f:	0f b6 c4             	movzx  eax,ah
c0022d62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d66:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d6a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d6e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0022d73:	83 c4 24             	add    esp,0x24
c0022d76:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d7c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d83:	74 6c                	je     c0022df1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d85:	31 f6                	xor    esi,esi
c0022d87:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022d8d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d93:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d99:	7e 56                	jle    c0022df1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d9b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d9e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022da5:	39 cb                	cmp    ebx,ecx
c0022da7:	75 45                	jne    c0022dee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022da9:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022db0:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022db4:	75 38                	jne    c0022dee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022db6:	83 ec 0c             	sub    esp,0xc
c0022db9:	68 82 c9 02 c0       	push   0xc002c982
c0022dbe:	e8 15 01 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0022dc3:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022dc9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dcf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022dd7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ddb:	52                   	push   edx
c0022ddc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022de0:	53                   	push   ebx
c0022de1:	68 a7 c9 02 c0       	push   0xc002c9a7
c0022de6:	e8 ed 00 ff ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0022deb:	83 c4 20             	add    esp,0x20
c0022dee:	46                   	inc    esi
c0022def:	eb 96                	jmp    c0022d87 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022df1:	31 d2                	xor    edx,edx
c0022df3:	83 ec 0c             	sub    esp,0xc
c0022df6:	55                   	push   ebp
c0022df7:	53                   	push   ebx
c0022df8:	57                   	push   edi
c0022df9:	52                   	push   edx
c0022dfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022dfe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e05:	e8 7c fc ff ff       	call   c0022a86 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e0a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e0e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e12:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e16:	42                   	inc    edx
c0022e17:	83 c4 20             	add    esp,0x20
c0022e1a:	83 fa 06             	cmp    edx,0x6
c0022e1d:	75 d4                	jne    c0022df3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e1f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e23:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e27:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e2b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e2f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e33:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e37:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e3c:	86 e0                	xchg   al,ah
c0022e3e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e43:	55                   	push   ebp
c0022e44:	53                   	push   ebx
c0022e45:	57                   	push   edi
c0022e46:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e4a:	e8 ab fb ff ff       	call   c00229fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e4f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e53:	55                   	push   ebp
c0022e54:	53                   	push   ebx
c0022e55:	57                   	push   edi
c0022e56:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e5d:	e8 0e fb ff ff       	call   c0022970 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e62:	83 ec 0c             	sub    esp,0xc
c0022e65:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e6a:	b9 09 00 00 00       	mov    ecx,0x9
c0022e6f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e73:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e77:	fc                   	cld    
c0022e78:	89 e7                	mov    edi,esp
c0022e7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e7c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e83:	e8 ee fc ff ff       	call   c0022b76 <PCI::foundDevice(PCIDeviceInfo)>
c0022e88:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e8e:	5b                   	pop    ebx
c0022e8f:	5e                   	pop    esi
c0022e90:	5f                   	pop    edi
c0022e91:	5d                   	pop    ebp
c0022e92:	c3                   	ret    
c0022e93:	90                   	nop

c0022e94 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e94:	55                   	push   ebp
c0022e95:	57                   	push   edi
c0022e96:	56                   	push   esi
c0022e97:	53                   	push   ebx
c0022e98:	83 ec 0c             	sub    esp,0xc
c0022e9b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e9f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ea4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ea9:	6a 00                	push   0x0
c0022eab:	56                   	push   esi
c0022eac:	57                   	push   edi
c0022ead:	55                   	push   ebp
c0022eae:	e8 bd fa ff ff       	call   c0022970 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb3:	6a 00                	push   0x0
c0022eb5:	56                   	push   esi
c0022eb6:	57                   	push   edi
c0022eb7:	55                   	push   ebp
c0022eb8:	e8 2b fe ff ff       	call   c0022ce8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ebd:	83 c4 20             	add    esp,0x20
c0022ec0:	6a 00                	push   0x0
c0022ec2:	56                   	push   esi
c0022ec3:	57                   	push   edi
c0022ec4:	55                   	push   ebp
c0022ec5:	e8 c8 fa ff ff       	call   c0022992 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eca:	83 c4 10             	add    esp,0x10
c0022ecd:	84 c0                	test   al,al
c0022ecf:	79 27                	jns    c0022ef8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ed1:	bb 01 00 00 00       	mov    ebx,0x1
c0022ed6:	53                   	push   ebx
c0022ed7:	56                   	push   esi
c0022ed8:	57                   	push   edi
c0022ed9:	55                   	push   ebp
c0022eda:	e8 91 fa ff ff       	call   c0022970 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022edf:	83 c4 10             	add    esp,0x10
c0022ee2:	66 40                	inc    ax
c0022ee4:	74 0c                	je     c0022ef2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ee6:	53                   	push   ebx
c0022ee7:	56                   	push   esi
c0022ee8:	57                   	push   edi
c0022ee9:	55                   	push   ebp
c0022eea:	e8 f9 fd ff ff       	call   c0022ce8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eef:	83 c4 10             	add    esp,0x10
c0022ef2:	43                   	inc    ebx
c0022ef3:	83 fb 08             	cmp    ebx,0x8
c0022ef6:	75 de                	jne    c0022ed6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022ef8:	83 c4 0c             	add    esp,0xc
c0022efb:	5b                   	pop    ebx
c0022efc:	5e                   	pop    esi
c0022efd:	5f                   	pop    edi
c0022efe:	5d                   	pop    ebp
c0022eff:	c3                   	ret    

c0022f00 <PCI::detect()>:
c0022f00:	56                   	push   esi
c0022f01:	53                   	push   ebx
c0022f02:	53                   	push   ebx
c0022f03:	31 db                	xor    ebx,ebx
c0022f05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f09:	6a 00                	push   0x0
c0022f0b:	6a 00                	push   0x0
c0022f0d:	6a 00                	push   0x0
c0022f0f:	56                   	push   esi
c0022f10:	e8 7d fa ff ff       	call   c0022992 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f15:	83 c4 10             	add    esp,0x10
c0022f18:	a8 80                	test   al,0x80
c0022f1a:	75 21                	jne    c0022f3d <PCI::detect()+0x3d>
c0022f1c:	51                   	push   ecx
c0022f1d:	51                   	push   ecx
c0022f1e:	6a 00                	push   0x0
c0022f20:	56                   	push   esi
c0022f21:	e8 2c fc ff ff       	call   c0022b52 <PCI::checkBus(unsigned char)>
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	eb 24                	jmp    c0022f4f <PCI::detect()+0x4f>
c0022f2b:	52                   	push   edx
c0022f2c:	52                   	push   edx
c0022f2d:	53                   	push   ebx
c0022f2e:	43                   	inc    ebx
c0022f2f:	56                   	push   esi
c0022f30:	e8 1d fc ff ff       	call   c0022b52 <PCI::checkBus(unsigned char)>
c0022f35:	83 c4 10             	add    esp,0x10
c0022f38:	83 fb 08             	cmp    ebx,0x8
c0022f3b:	74 12                	je     c0022f4f <PCI::detect()+0x4f>
c0022f3d:	53                   	push   ebx
c0022f3e:	6a 00                	push   0x0
c0022f40:	6a 00                	push   0x0
c0022f42:	56                   	push   esi
c0022f43:	e8 28 fa ff ff       	call   c0022970 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f48:	83 c4 10             	add    esp,0x10
c0022f4b:	66 40                	inc    ax
c0022f4d:	74 dc                	je     c0022f2b <PCI::detect()+0x2b>
c0022f4f:	58                   	pop    eax
c0022f50:	5b                   	pop    ebx
c0022f51:	5e                   	pop    esi
c0022f52:	c3                   	ret    
c0022f53:	90                   	nop

c0022f54 <IDE::close(int, int, void*)>:
c0022f54:	83 c8 ff             	or     eax,0xffffffff
c0022f57:	c3                   	ret    

c0022f58 <IDE::IDE()>:
c0022f58:	83 ec 0c             	sub    esp,0xc
c0022f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5f:	83 ec 08             	sub    esp,0x8
c0022f62:	68 f0 c9 02 c0       	push   0xc002c9f0
c0022f67:	50                   	push   eax
c0022f68:	e8 1d 17 ff ff       	call   c001468a <HardDiskController::HardDiskController(char const*)>
c0022f6d:	83 c4 10             	add    esp,0x10
c0022f70:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0022f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f79:	89 10                	mov    DWORD PTR [eax],edx
c0022f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f86:	90                   	nop
c0022f87:	83 c4 0c             	add    esp,0xc
c0022f8a:	c3                   	ret    
c0022f8b:	90                   	nop

c0022f8c <IDE::prepareInterrupt(unsigned char)>:
c0022f8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f95:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f9d:	c3                   	ret    

c0022f9e <selectDrive(unsigned char, unsigned char)>:
c0022f9e:	c3                   	ret    
c0022f9f:	90                   	nop

c0022fa0 <IDE::getBase(unsigned char)>:
c0022fa0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fb1:	c3                   	ret    

c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fb2:	55                   	push   ebp
c0022fb3:	57                   	push   edi
c0022fb4:	56                   	push   esi
c0022fb5:	53                   	push   ebx
c0022fb6:	83 ec 1c             	sub    esp,0x1c
c0022fb9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fbd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fc1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fc4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fc8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fcc:	80 f9 03             	cmp    cl,0x3
c0022fcf:	77 51                	ja     c0023022 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fd5:	0f b6 f2             	movzx  esi,dl
c0022fd8:	0f b6 db             	movzx  ebx,bl
c0022fdb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fde:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fe2:	83 ca 80             	or     edx,0xffffff80
c0022fe5:	0f b6 d2             	movzx  edx,dl
c0022fe8:	52                   	push   edx
c0022fe9:	6a 0c                	push   0xc
c0022feb:	56                   	push   esi
c0022fec:	57                   	push   edi
c0022fed:	e8 c0 ff ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ff2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ff7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ffb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fff:	ee                   	out    dx,al
c0023000:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023005:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023009:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002300d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023011:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023019:	83 c4 2c             	add    esp,0x2c
c002301c:	5b                   	pop    ebx
c002301d:	5e                   	pop    esi
c002301e:	5f                   	pop    edi
c002301f:	5d                   	pop    ebp
c0023020:	eb 90                	jmp    c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023022:	80 fb 07             	cmp    bl,0x7
c0023025:	77 12                	ja     c0023039 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023027:	0f b6 d2             	movzx  edx,dl
c002302a:	0f b6 db             	movzx  ebx,bl
c002302d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023035:	89 da                	mov    edx,ebx
c0023037:	eb 2f                	jmp    c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023039:	80 fb 0d             	cmp    bl,0xd
c002303c:	77 13                	ja     c0023051 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002303e:	0f b6 d2             	movzx  edx,dl
c0023041:	0f b6 db             	movzx  ebx,bl
c0023044:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002304b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002304f:	eb 17                	jmp    c0023068 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023051:	80 fb 15             	cmp    bl,0x15
c0023054:	77 13                	ja     c0023069 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023056:	0f b6 d2             	movzx  edx,dl
c0023059:	0f b6 db             	movzx  ebx,bl
c002305c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023064:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023068:	ee                   	out    dx,al
c0023069:	83 c4 1c             	add    esp,0x1c
c002306c:	5b                   	pop    ebx
c002306d:	5e                   	pop    esi
c002306e:	5f                   	pop    edi
c002306f:	5d                   	pop    ebp
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <IDE::read(unsigned char, unsigned char)>:
c0023072:	55                   	push   ebp
c0023073:	57                   	push   edi
c0023074:	56                   	push   esi
c0023075:	53                   	push   ebx
c0023076:	83 ec 1c             	sub    esp,0x1c
c0023079:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002307d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023081:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023084:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023088:	3c 03                	cmp    al,0x3
c002308a:	77 43                	ja     c00230cf <IDE::read(unsigned char, unsigned char)+0x5d>
c002308c:	0f b6 f2             	movzx  esi,dl
c002308f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023092:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023096:	83 c8 80             	or     eax,0xffffff80
c0023099:	0f b6 c0             	movzx  eax,al
c002309c:	50                   	push   eax
c002309d:	6a 0c                	push   0xc
c002309f:	56                   	push   esi
c00230a0:	57                   	push   edi
c00230a1:	e8 0c ff ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230ab:	0f b6 c3             	movzx  eax,bl
c00230ae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230b2:	ec                   	in     al,dx
c00230b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230b7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230bc:	52                   	push   edx
c00230bd:	6a 0c                	push   0xc
c00230bf:	56                   	push   esi
c00230c0:	57                   	push   edi
c00230c1:	e8 ec fe ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c6:	83 c4 20             	add    esp,0x20
c00230c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230cd:	eb 49                	jmp    c0023118 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230cf:	80 fb 07             	cmp    bl,0x7
c00230d2:	77 12                	ja     c00230e6 <IDE::read(unsigned char, unsigned char)+0x74>
c00230d4:	0f b6 d2             	movzx  edx,dl
c00230d7:	0f b6 c3             	movzx  eax,bl
c00230da:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230e2:	89 c2                	mov    edx,eax
c00230e4:	eb 31                	jmp    c0023117 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230e6:	80 fb 0d             	cmp    bl,0xd
c00230e9:	77 13                	ja     c00230fe <IDE::read(unsigned char, unsigned char)+0x8c>
c00230eb:	0f b6 d2             	movzx  edx,dl
c00230ee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230f5:	0f b6 d3             	movzx  edx,bl
c00230f8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230fc:	eb 19                	jmp    c0023117 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230fe:	31 c0                	xor    eax,eax
c0023100:	80 fb 15             	cmp    bl,0x15
c0023103:	77 13                	ja     c0023118 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023105:	0f b6 d2             	movzx  edx,dl
c0023108:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023110:	0f b6 d3             	movzx  edx,bl
c0023113:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023117:	ec                   	in     al,dx
c0023118:	83 c4 1c             	add    esp,0x1c
c002311b:	5b                   	pop    ebx
c002311c:	5e                   	pop    esi
c002311d:	5f                   	pop    edi
c002311e:	5d                   	pop    ebp
c002311f:	c3                   	ret    

c0023120 <IDE::waitInterrupt(unsigned char)>:
c0023120:	55                   	push   ebp
c0023121:	57                   	push   edi
c0023122:	56                   	push   esi
c0023123:	53                   	push   ebx
c0023124:	31 db                	xor    ebx,ebx
c0023126:	83 ec 0c             	sub    esp,0xc
c0023129:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002312d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023132:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002313a:	89 e8                	mov    eax,ebp
c002313c:	84 c0                	test   al,al
c002313e:	75 34                	jne    c0023174 <IDE::waitInterrupt(unsigned char)+0x54>
c0023140:	52                   	push   edx
c0023141:	6a 0c                	push   0xc
c0023143:	56                   	push   esi
c0023144:	57                   	push   edi
c0023145:	e8 28 ff ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002314a:	83 c4 10             	add    esp,0x10
c002314d:	a8 01                	test   al,0x1
c002314f:	75 2b                	jne    c002317c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023151:	f6 c3 04             	test   bl,0x4
c0023154:	75 16                	jne    c002316c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023156:	83 fb 32             	cmp    ebx,0x32
c0023159:	7e 11                	jle    c002316c <IDE::waitInterrupt(unsigned char)+0x4c>
c002315b:	50                   	push   eax
c002315c:	50                   	push   eax
c002315d:	6a 00                	push   0x0
c002315f:	68 80 96 98 00       	push   0x989680
c0023164:	e8 5d b1 ff ff       	call   c001e2c6 <nanoSleep(unsigned long long)>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	83 fb 3c             	cmp    ebx,0x3c
c002316f:	74 0b                	je     c002317c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023171:	43                   	inc    ebx
c0023172:	eb be                	jmp    c0023132 <IDE::waitInterrupt(unsigned char)+0x12>
c0023174:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002317c:	83 c4 0c             	add    esp,0xc
c002317f:	89 e8                	mov    eax,ebp
c0023181:	5b                   	pop    ebx
c0023182:	5e                   	pop    esi
c0023183:	5f                   	pop    edi
c0023184:	5d                   	pop    ebp
c0023185:	c3                   	ret    

c0023186 <ideChannel0IRQHandler(regs*, void*)>:
c0023186:	83 ec 10             	sub    esp,0x10
c0023189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002318d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023194:	6a 07                	push   0x7
c0023196:	6a 00                	push   0x0
c0023198:	50                   	push   eax
c0023199:	e8 d4 fe ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002319e:	83 c4 1c             	add    esp,0x1c
c00231a1:	c3                   	ret    

c00231a2 <ideChannel1IRQHandler(regs*, void*)>:
c00231a2:	83 ec 10             	sub    esp,0x10
c00231a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231a9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231b0:	6a 07                	push   0x7
c00231b2:	6a 01                	push   0x1
c00231b4:	50                   	push   eax
c00231b5:	e8 b8 fe ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00231ba:	83 c4 1c             	add    esp,0x1c
c00231bd:	c3                   	ret    

c00231be <IDE::enableIRQs(unsigned char, bool)>:
c00231be:	57                   	push   edi
c00231bf:	56                   	push   esi
c00231c0:	be 04 00 00 00       	mov    esi,0x4
c00231c5:	53                   	push   ebx
c00231c6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231cf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231d4:	0f 94 c0             	sete   al
c00231d7:	d1 e0                	shl    eax,1
c00231d9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231e0:	0f b6 c0             	movzx  eax,al
c00231e3:	50                   	push   eax
c00231e4:	6a 0c                	push   0xc
c00231e6:	57                   	push   edi
c00231e7:	53                   	push   ebx
c00231e8:	e8 c5 fd ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ed:	83 c4 10             	add    esp,0x10
c00231f0:	50                   	push   eax
c00231f1:	6a 0c                	push   0xc
c00231f3:	57                   	push   edi
c00231f4:	53                   	push   ebx
c00231f5:	e8 78 fe ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00231fa:	83 c4 10             	add    esp,0x10
c00231fd:	4e                   	dec    esi
c00231fe:	75 f0                	jne    c00231f0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023200:	5b                   	pop    ebx
c0023201:	5e                   	pop    esi
c0023202:	5f                   	pop    edi
c0023203:	c3                   	ret    

c0023204 <IDE::open(int, int, void*)>:
c0023204:	55                   	push   ebp
c0023205:	57                   	push   edi
c0023206:	56                   	push   esi
c0023207:	53                   	push   ebx
c0023208:	83 ec 1c             	sub    esp,0x1c
c002320b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002320f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023218:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023221:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023228:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002322f:	0f 85 b0 02 00 00    	jne    c00234e5 <IDE::open(int, int, void*)+0x2e1>
c0023235:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002323b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002323f:	83 e0 7f             	and    eax,0x7f
c0023242:	3c 05                	cmp    al,0x5
c0023244:	74 04                	je     c002324a <IDE::open(int, int, void*)+0x46>
c0023246:	3c 0f                	cmp    al,0xf
c0023248:	75 32                	jne    c002327c <IDE::open(int, int, void*)+0x78>
c002324a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023250:	83 e0 fc             	and    eax,0xfffffffc
c0023253:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002325a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023260:	83 e0 fc             	and    eax,0xfffffffc
c0023263:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002326a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023270:	83 e0 fc             	and    eax,0xfffffffc
c0023273:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002327a:	eb 14                	jmp    c0023290 <IDE::open(int, int, void*)+0x8c>
c002327c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023286:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023290:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023297:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002329e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232a2:	89 c6                	mov    esi,eax
c00232a4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232a9:	c1 e6 10             	shl    esi,0x10
c00232ac:	89 e8                	mov    eax,ebp
c00232ae:	89 fa                	mov    edx,edi
c00232b0:	c1 e0 0b             	shl    eax,0xb
c00232b3:	09 f0                	or     eax,esi
c00232b5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232bc:	c1 e6 08             	shl    esi,0x8
c00232bf:	09 c6                	or     esi,eax
c00232c1:	89 f0                	mov    eax,esi
c00232c3:	0d 08 00 00 80       	or     eax,0x80000008
c00232c8:	ef                   	out    dx,eax
c00232c9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232ce:	89 ca                	mov    edx,ecx
c00232d0:	ed                   	in     eax,dx
c00232d1:	c1 e8 10             	shr    eax,0x10
c00232d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00232d9:	0f 84 f5 00 00 00    	je     c00233d4 <IDE::open(int, int, void*)+0x1d0>
c00232df:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232e5:	89 fa                	mov    edx,edi
c00232e7:	89 f0                	mov    eax,esi
c00232e9:	ef                   	out    dx,eax
c00232ea:	b0 fe                	mov    al,0xfe
c00232ec:	89 ca                	mov    edx,ecx
c00232ee:	ee                   	out    dx,al
c00232ef:	89 f0                	mov    eax,esi
c00232f1:	89 fa                	mov    edx,edi
c00232f3:	ef                   	out    dx,eax
c00232f4:	89 ca                	mov    edx,ecx
c00232f6:	ed                   	in     eax,dx
c00232f7:	3c fe                	cmp    al,0xfe
c00232f9:	0f 85 a9 00 00 00    	jne    c00233a8 <IDE::open(int, int, void*)+0x1a4>
c00232ff:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0023305:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002330c:	74 33                	je     c0023341 <IDE::open(int, int, void*)+0x13d>
c002330e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023314:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023318:	40                   	inc    eax
c0023319:	83 ec 0c             	sub    esp,0xc
c002331c:	0f b6 c0             	movzx  eax,al
c002331f:	50                   	push   eax
c0023320:	55                   	push   ebp
c0023321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023325:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002332b:	51                   	push   ecx
c002332c:	e8 a1 4e ff ff       	call   c00181d2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023331:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023336:	83 c4 1c             	add    esp,0x1c
c0023339:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002333f:	eb 0a                	jmp    c002334b <IDE::open(int, int, void*)+0x147>
c0023341:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002334b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023352:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023359:	c1 e1 10             	shl    ecx,0x10
c002335c:	c1 e0 08             	shl    eax,0x8
c002335f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023364:	09 c1                	or     ecx,eax
c0023366:	89 fa                	mov    edx,edi
c0023368:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002336f:	c1 e0 0b             	shl    eax,0xb
c0023372:	09 c1                	or     ecx,eax
c0023374:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002337a:	89 c8                	mov    eax,ecx
c002337c:	ef                   	out    dx,eax
c002337d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023382:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023388:	89 f2                	mov    edx,esi
c002338a:	ee                   	out    dx,al
c002338b:	89 c8                	mov    eax,ecx
c002338d:	89 fa                	mov    edx,edi
c002338f:	ef                   	out    dx,eax
c0023390:	89 f2                	mov    edx,esi
c0023392:	ed                   	in     eax,dx
c0023393:	0f b6 c0             	movzx  eax,al
c0023396:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002339c:	74 46                	je     c00233e4 <IDE::open(int, int, void*)+0x1e0>
c002339e:	83 ec 0c             	sub    esp,0xc
c00233a1:	68 08 ca 02 c0       	push   0xc002ca08
c00233a6:	eb 34                	jmp    c00233dc <IDE::open(int, int, void*)+0x1d8>
c00233a8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233b1:	75 17                	jne    c00233ca <IDE::open(int, int, void*)+0x1c6>
c00233b3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233b8:	74 07                	je     c00233c1 <IDE::open(int, int, void*)+0x1bd>
c00233ba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233bf:	75 09                	jne    c00233ca <IDE::open(int, int, void*)+0x1c6>
c00233c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233c8:	eb 1a                	jmp    c00233e4 <IDE::open(int, int, void*)+0x1e0>
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	68 10 ca 02 c0       	push   0xc002ca10
c00233d2:	eb 08                	jmp    c00233dc <IDE::open(int, int, void*)+0x1d8>
c00233d4:	83 ec 0c             	sub    esp,0xc
c00233d7:	68 41 ca 02 c0       	push   0xc002ca41
c00233dc:	e8 9c 71 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00233e1:	83 c4 10             	add    esp,0x10
c00233e4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233eb:	79 1a                	jns    c0023407 <IDE::open(int, int, void*)+0x203>
c00233ed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233f3:	83 e0 fc             	and    eax,0xfffffffc
c00233f6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233fd:	83 c0 08             	add    eax,0x8
c0023400:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023407:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002340d:	89 c2                	mov    edx,eax
c002340f:	83 e2 0f             	and    edx,0xf
c0023412:	66 83 fa 08          	cmp    dx,0x8
c0023416:	75 0a                	jne    c0023422 <IDE::open(int, int, void*)+0x21e>
c0023418:	83 e8 02             	sub    eax,0x2
c002341b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023422:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023428:	89 c2                	mov    edx,eax
c002342a:	83 e2 0f             	and    edx,0xf
c002342d:	66 83 fa 08          	cmp    dx,0x8
c0023431:	75 0a                	jne    c002343d <IDE::open(int, int, void*)+0x239>
c0023433:	83 e8 02             	sub    eax,0x2
c0023436:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002343d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023444:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002344b:	89 d0                	mov    eax,edx
c002344d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023450:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023454:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023458:	8d 4a 01             	lea    ecx,[edx+0x1]
c002345b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023460:	0f b6 c9             	movzx  ecx,cl
c0023463:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002346a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002346d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023471:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023475:	8d 50 02             	lea    edx,[eax+0x2]
c0023478:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002347d:	0f b6 d2             	movzx  edx,dl
c0023480:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023486:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023489:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002348d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023491:	8d 48 03             	lea    ecx,[eax+0x3]
c0023494:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023499:	0f b6 c9             	movzx  ecx,cl
c002349c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234ad:	8d 50 04             	lea    edx,[eax+0x4]
c00234b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234c2:	66 85 f6             	test   si,si
c00234c5:	74 3e                	je     c0023505 <IDE::open(int, int, void*)+0x301>
c00234c7:	0f b6 d2             	movzx  edx,dl
c00234ca:	83 c0 05             	add    eax,0x5
c00234cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234e3:	eb 20                	jmp    c0023505 <IDE::open(int, int, void*)+0x301>
c00234e5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234ef:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023500:	e9 02 ff ff ff       	jmp    c0023407 <IDE::open(int, int, void*)+0x203>
c0023505:	52                   	push   edx
c0023506:	52                   	push   edx
c0023507:	6a 00                	push   0x0
c0023509:	53                   	push   ebx
c002350a:	e8 7d fa ff ff       	call   c0022f8c <IDE::prepareInterrupt(unsigned char)>
c002350f:	59                   	pop    ecx
c0023510:	5e                   	pop    esi
c0023511:	6a 01                	push   0x1
c0023513:	53                   	push   ebx
c0023514:	e8 73 fa ff ff       	call   c0022f8c <IDE::prepareInterrupt(unsigned char)>
c0023519:	83 c4 0c             	add    esp,0xc
c002351c:	6a 00                	push   0x0
c002351e:	6a 00                	push   0x0
c0023520:	53                   	push   ebx
c0023521:	e8 98 fc ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c0023526:	83 c4 0c             	add    esp,0xc
c0023529:	6a 00                	push   0x0
c002352b:	6a 01                	push   0x1
c002352d:	53                   	push   ebx
c002352e:	e8 8b fc ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c0023533:	83 c4 10             	add    esp,0x10
c0023536:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002353d:	74 40                	je     c002357f <IDE::open(int, int, void*)+0x37b>
c002353f:	83 ec 0c             	sub    esp,0xc
c0023542:	68 6b ca 02 c0       	push   0xc002ca6b
c0023547:	e8 8c f9 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c002354c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002354f:	6a 01                	push   0x1
c0023551:	68 86 31 02 c0       	push   0xc0023186
c0023556:	6a 0e                	push   0xe
c0023558:	53                   	push   ebx
c0023559:	e8 24 0d ff ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002355e:	83 c4 14             	add    esp,0x14
c0023561:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023567:	53                   	push   ebx
c0023568:	6a 01                	push   0x1
c002356a:	68 a2 31 02 c0       	push   0xc00231a2
c002356f:	6a 0f                	push   0xf
c0023571:	53                   	push   ebx
c0023572:	e8 0b 0d ff ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023577:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002357d:	eb 4a                	jmp    c00235c9 <IDE::open(int, int, void*)+0x3c5>
c002357f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023589:	50                   	push   eax
c002358a:	6a 0f                	push   0xf
c002358c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023592:	68 87 ca 02 c0       	push   0xc002ca87
c0023597:	e8 3c f9 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c002359c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002359f:	6a 00                	push   0x0
c00235a1:	68 86 31 02 c0       	push   0xc0023186
c00235a6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235ac:	53                   	push   ebx
c00235ad:	e8 d0 0c ff ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b2:	83 c4 14             	add    esp,0x14
c00235b5:	53                   	push   ebx
c00235b6:	6a 00                	push   0x0
c00235b8:	68 a2 31 02 c0       	push   0xc00231a2
c00235bd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235c3:	53                   	push   ebx
c00235c4:	e8 b9 0c ff ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235cb:	83 c4 20             	add    esp,0x20
c00235ce:	83 ec 0c             	sub    esp,0xc
c00235d1:	53                   	push   ebx
c00235d2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235d5:	83 c4 0c             	add    esp,0xc
c00235d8:	6a 07                	push   0x7
c00235da:	6a 00                	push   0x0
c00235dc:	53                   	push   ebx
c00235dd:	e8 90 fa ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00235e2:	83 c4 0c             	add    esp,0xc
c00235e5:	6a 07                	push   0x7
c00235e7:	6a 01                	push   0x1
c00235e9:	53                   	push   ebx
c00235ea:	e8 83 fa ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00235ef:	83 c4 0c             	add    esp,0xc
c00235f2:	6a 01                	push   0x1
c00235f4:	6a 00                	push   0x0
c00235f6:	53                   	push   ebx
c00235f7:	e8 c2 fb ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c00235fc:	83 c4 0c             	add    esp,0xc
c00235ff:	6a 01                	push   0x1
c0023601:	6a 01                	push   0x1
c0023603:	53                   	push   ebx
c0023604:	e8 b5 fb ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c0023609:	83 c4 2c             	add    esp,0x2c
c002360c:	31 c0                	xor    eax,eax
c002360e:	5b                   	pop    ebx
c002360f:	5e                   	pop    esi
c0023610:	5f                   	pop    edi
c0023611:	5d                   	pop    ebp
c0023612:	c3                   	ret    
c0023613:	90                   	nop

c0023614 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023614:	55                   	push   ebp
c0023615:	57                   	push   edi
c0023616:	56                   	push   esi
c0023617:	53                   	push   ebx
c0023618:	83 ec 1c             	sub    esp,0x1c
c002361b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002361f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023623:	8d 50 f8             	lea    edx,[eax-0x8]
c0023626:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002362a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002362e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023632:	80 fa 03             	cmp    dl,0x3
c0023635:	77 5d                	ja     c0023694 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023637:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002363b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002363f:	0f b6 db             	movzx  ebx,bl
c0023642:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023645:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023649:	83 ca 80             	or     edx,0xffffff80
c002364c:	0f b6 d2             	movzx  edx,dl
c002364f:	52                   	push   edx
c0023650:	6a 0c                	push   0xc
c0023652:	53                   	push   ebx
c0023653:	56                   	push   esi
c0023654:	e8 59 f9 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023659:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002365e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023662:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023666:	0f b6 c0             	movzx  eax,al
c0023669:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002366d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002366f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023674:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023678:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002367c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023680:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023688:	83 c4 2c             	add    esp,0x2c
c002368b:	5b                   	pop    ebx
c002368c:	5e                   	pop    esi
c002368d:	5f                   	pop    edi
c002368e:	5d                   	pop    ebp
c002368f:	e9 1e f9 ff ff       	jmp    c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023694:	3c 07                	cmp    al,0x7
c0023696:	77 10                	ja     c00236a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023698:	0f b6 db             	movzx  ebx,bl
c002369b:	0f b6 d0             	movzx  edx,al
c002369e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236a6:	eb 2d                	jmp    c00236d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236a8:	3c 0d                	cmp    al,0xd
c00236aa:	77 13                	ja     c00236bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236ac:	0f b6 db             	movzx  ebx,bl
c00236af:	0f b6 c0             	movzx  eax,al
c00236b2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236b9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236bd:	eb 16                	jmp    c00236d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236bf:	3c 15                	cmp    al,0x15
c00236c1:	77 14                	ja     c00236d7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236c3:	0f b6 db             	movzx  ebx,bl
c00236c6:	0f b6 c0             	movzx  eax,al
c00236c9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236d1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236d5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236d7:	83 c4 1c             	add    esp,0x1c
c00236da:	5b                   	pop    ebx
c00236db:	5e                   	pop    esi
c00236dc:	5f                   	pop    edi
c00236dd:	5d                   	pop    ebp
c00236de:	c3                   	ret    
c00236df:	90                   	nop

c00236e0 <IDE::detect()>:
c00236e0:	55                   	push   ebp
c00236e1:	57                   	push   edi
c00236e2:	56                   	push   esi
c00236e3:	53                   	push   ebx
c00236e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236ea:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236f1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236f8:	0f 85 be 02 00 00    	jne    c00239bc <IDE::detect()+0x2dc>
c00236fe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023705:	31 f6                	xor    esi,esi
c0023707:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002370f:	31 ed                	xor    ebp,ebp
c0023711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023715:	c1 e0 06             	shl    eax,0x6
c0023718:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023720:	89 e8                	mov    eax,ebp
c0023722:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023726:	c1 e0 04             	shl    eax,0x4
c0023729:	83 c8 a0             	or     eax,0xffffffa0
c002372c:	0f b6 c0             	movzx  eax,al
c002372f:	50                   	push   eax
c0023730:	6a 06                	push   0x6
c0023732:	56                   	push   esi
c0023733:	53                   	push   ebx
c0023734:	e8 79 f8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023739:	83 c4 0c             	add    esp,0xc
c002373c:	6a 0c                	push   0xc
c002373e:	56                   	push   esi
c002373f:	53                   	push   ebx
c0023740:	e8 2d f9 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023745:	83 c4 0c             	add    esp,0xc
c0023748:	6a 0c                	push   0xc
c002374a:	56                   	push   esi
c002374b:	53                   	push   ebx
c002374c:	e8 21 f9 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023751:	83 c4 0c             	add    esp,0xc
c0023754:	6a 0c                	push   0xc
c0023756:	56                   	push   esi
c0023757:	53                   	push   ebx
c0023758:	e8 15 f9 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002375d:	83 c4 0c             	add    esp,0xc
c0023760:	6a 0c                	push   0xc
c0023762:	56                   	push   esi
c0023763:	53                   	push   ebx
c0023764:	e8 09 f9 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023769:	68 ec 00 00 00       	push   0xec
c002376e:	6a 07                	push   0x7
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	e8 3b f8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023777:	83 c4 1c             	add    esp,0x1c
c002377a:	6a 0c                	push   0xc
c002377c:	56                   	push   esi
c002377d:	53                   	push   ebx
c002377e:	e8 ef f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023783:	83 c4 0c             	add    esp,0xc
c0023786:	6a 0c                	push   0xc
c0023788:	56                   	push   esi
c0023789:	53                   	push   ebx
c002378a:	e8 e3 f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002378f:	83 c4 0c             	add    esp,0xc
c0023792:	6a 0c                	push   0xc
c0023794:	56                   	push   esi
c0023795:	53                   	push   ebx
c0023796:	e8 d7 f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002379b:	83 c4 0c             	add    esp,0xc
c002379e:	6a 0c                	push   0xc
c00237a0:	56                   	push   esi
c00237a1:	53                   	push   ebx
c00237a2:	e8 cb f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00237a7:	83 c4 0c             	add    esp,0xc
c00237aa:	6a 0c                	push   0xc
c00237ac:	56                   	push   esi
c00237ad:	53                   	push   ebx
c00237ae:	e8 bf f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00237b3:	83 c4 10             	add    esp,0x10
c00237b6:	84 c0                	test   al,al
c00237b8:	0f 84 8b 01 00 00    	je     c0023949 <IDE::detect()+0x269>
c00237be:	31 ff                	xor    edi,edi
c00237c0:	50                   	push   eax
c00237c1:	6a 0c                	push   0xc
c00237c3:	56                   	push   esi
c00237c4:	53                   	push   ebx
c00237c5:	e8 a8 f8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00237ca:	83 c4 10             	add    esp,0x10
c00237cd:	a8 01                	test   al,0x1
c00237cf:	0f 85 8e 01 00 00    	jne    c0023963 <IDE::detect()+0x283>
c00237d5:	84 c0                	test   al,al
c00237d7:	78 04                	js     c00237dd <IDE::detect()+0xfd>
c00237d9:	a8 08                	test   al,0x8
c00237db:	75 27                	jne    c0023804 <IDE::detect()+0x124>
c00237dd:	47                   	inc    edi
c00237de:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237e4:	7e da                	jle    c00237c0 <IDE::detect()+0xe0>
c00237e6:	50                   	push   eax
c00237e7:	50                   	push   eax
c00237e8:	6a 00                	push   0x0
c00237ea:	68 40 4b 4c 00       	push   0x4c4b40
c00237ef:	e8 d2 aa ff ff       	call   c001e2c6 <nanoSleep(unsigned long long)>
c00237f4:	83 c4 10             	add    esp,0x10
c00237f7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237fd:	75 c1                	jne    c00237c0 <IDE::detect()+0xe0>
c00237ff:	e9 5f 01 00 00       	jmp    c0023963 <IDE::detect()+0x283>
c0023804:	31 c9                	xor    ecx,ecx
c0023806:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002380a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002380e:	83 ec 0c             	sub    esp,0xc
c0023811:	68 80 00 00 00       	push   0x80
c0023816:	57                   	push   edi
c0023817:	6a 00                	push   0x0
c0023819:	56                   	push   esi
c002381a:	53                   	push   ebx
c002381b:	e8 f4 fd ff ff       	call   c0023614 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023820:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023825:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023829:	89 d1                	mov    ecx,edx
c002382b:	c1 e0 06             	shl    eax,0x6
c002382e:	01 d8                	add    eax,ebx
c0023830:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023837:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002383e:	89 f2                	mov    edx,esi
c0023840:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023846:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002384a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023850:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023854:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002385b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023863:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002386a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023872:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023878:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002387f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023885:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023889:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002388d:	83 c4 20             	add    esp,0x20
c0023890:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023893:	83 c0 02             	add    eax,0x2
c0023896:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002389c:	83 c7 02             	add    edi,0x2
c002389f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238a2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238ac:	75 e2                	jne    c0023890 <IDE::detect()+0x1b0>
c00238ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238b2:	c1 e0 06             	shl    eax,0x6
c00238b5:	01 d8                	add    eax,ebx
c00238b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238c4:	66 c1 ea 09          	shr    dx,0x9
c00238c8:	83 e2 01             	and    edx,0x1
c00238cb:	84 c9                	test   cl,cl
c00238cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238d3:	75 2f                	jne    c0023904 <IDE::detect()+0x224>
c00238d5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238db:	85 c0                	test   eax,eax
c00238dd:	74 66                	je     c0023945 <IDE::detect()+0x265>
c00238df:	50                   	push   eax
c00238e0:	55                   	push   ebp
c00238e1:	56                   	push   esi
c00238e2:	68 a3 ca 02 c0       	push   0xc002caa3
c00238e7:	e8 ec f5 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00238ec:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238f3:	e8 4b bf fe ff       	call   c000f843 <malloc>
c00238f8:	89 c7                	mov    edi,eax
c00238fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00238fd:	e8 78 06 00 00       	call   c0023f7a <ATA::ATA()>
c0023902:	eb 28                	jmp    c002392c <IDE::detect()+0x24c>
c0023904:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002390a:	55                   	push   ebp
c002390b:	56                   	push   esi
c002390c:	68 d2 ca 02 c0       	push   0xc002cad2
c0023911:	e8 c2 f5 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023916:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002391d:	e8 21 bf fe ff       	call   c000f843 <malloc>
c0023922:	89 c7                	mov    edi,eax
c0023924:	89 04 24             	mov    DWORD PTR [esp],eax
c0023927:	e8 8e 0c 00 00       	call   c00245ba <ATAPI::ATAPI()>
c002392c:	5a                   	pop    edx
c002392d:	59                   	pop    ecx
c002392e:	57                   	push   edi
c002392f:	53                   	push   ebx
c0023930:	e8 c9 09 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0023935:	8b 07                	mov    eax,DWORD PTR [edi]
c0023937:	53                   	push   ebx
c0023938:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002393c:	6a 00                	push   0x0
c002393e:	57                   	push   edi
c002393f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023942:	83 c4 20             	add    esp,0x20
c0023945:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023949:	4d                   	dec    ebp
c002394a:	74 0a                	je     c0023956 <IDE::detect()+0x276>
c002394c:	bd 01 00 00 00       	mov    ebp,0x1
c0023951:	e9 bb fd ff ff       	jmp    c0023711 <IDE::detect()+0x31>
c0023956:	4e                   	dec    esi
c0023957:	74 63                	je     c00239bc <IDE::detect()+0x2dc>
c0023959:	be 01 00 00 00       	mov    esi,0x1
c002395e:	e9 ac fd ff ff       	jmp    c002370f <IDE::detect()+0x2f>
c0023963:	50                   	push   eax
c0023964:	6a 04                	push   0x4
c0023966:	56                   	push   esi
c0023967:	53                   	push   ebx
c0023968:	e8 05 f7 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002396d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023971:	83 c4 0c             	add    esp,0xc
c0023974:	6a 05                	push   0x5
c0023976:	56                   	push   esi
c0023977:	53                   	push   ebx
c0023978:	e8 f5 f6 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c002397d:	83 c4 10             	add    esp,0x10
c0023980:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023984:	80 fa 14             	cmp    dl,0x14
c0023987:	75 04                	jne    c002398d <IDE::detect()+0x2ad>
c0023989:	3c eb                	cmp    al,0xeb
c002398b:	eb 07                	jmp    c0023994 <IDE::detect()+0x2b4>
c002398d:	3c 96                	cmp    al,0x96
c002398f:	75 b8                	jne    c0023949 <IDE::detect()+0x269>
c0023991:	80 fa 69             	cmp    dl,0x69
c0023994:	75 b3                	jne    c0023949 <IDE::detect()+0x269>
c0023996:	68 a1 00 00 00       	push   0xa1
c002399b:	6a 07                	push   0x7
c002399d:	56                   	push   esi
c002399e:	53                   	push   ebx
c002399f:	e8 0e f6 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a4:	5f                   	pop    edi
c00239a5:	58                   	pop    eax
c00239a6:	6a 00                	push   0x0
c00239a8:	68 40 42 0f 00       	push   0xf4240
c00239ad:	e8 14 a9 ff ff       	call   c001e2c6 <nanoSleep(unsigned long long)>
c00239b2:	83 c4 10             	add    esp,0x10
c00239b5:	b1 01                	mov    cl,0x1
c00239b7:	e9 4a fe ff ff       	jmp    c0023806 <IDE::detect()+0x126>
c00239bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239c2:	5b                   	pop    ebx
c00239c3:	5e                   	pop    esi
c00239c4:	5f                   	pop    edi
c00239c5:	5d                   	pop    ebp
c00239c6:	c3                   	ret    
c00239c7:	90                   	nop

c00239c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239c8:	55                   	push   ebp
c00239c9:	57                   	push   edi
c00239ca:	56                   	push   esi
c00239cb:	53                   	push   ebx
c00239cc:	83 ec 1c             	sub    esp,0x1c
c00239cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239df:	88 c3                	mov    bl,al
c00239e1:	84 c0                	test   al,al
c00239e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239e7:	0f 84 67 01 00 00    	je     c0023b54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239ed:	83 ec 0c             	sub    esp,0xc
c00239f0:	68 03 cb 02 c0       	push   0xc002cb03
c00239f5:	e8 de f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00239fa:	83 c4 10             	add    esp,0x10
c00239fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a01:	3c 01                	cmp    al,0x1
c0023a03:	75 17                	jne    c0023a1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a05:	83 ec 0c             	sub    esp,0xc
c0023a08:	b3 13                	mov    bl,0x13
c0023a0a:	68 0f cb 02 c0       	push   0xc002cb0f
c0023a0f:	e8 c4 f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	e9 25 01 00 00       	jmp    c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a1c:	3c 02                	cmp    al,0x2
c0023a1e:	0f 85 ef 00 00 00    	jne    c0023b13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a24:	d1 e6                	shl    esi,1
c0023a26:	09 ee                	or     esi,ebp
c0023a28:	52                   	push   edx
c0023a29:	89 f0                	mov    eax,esi
c0023a2b:	6a 01                	push   0x1
c0023a2d:	0f b6 f0             	movzx  esi,al
c0023a30:	c1 e6 06             	shl    esi,0x6
c0023a33:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a3b:	50                   	push   eax
c0023a3c:	57                   	push   edi
c0023a3d:	e8 30 f6 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023a42:	83 c4 10             	add    esp,0x10
c0023a45:	89 c6                	mov    esi,eax
c0023a47:	a8 01                	test   al,0x1
c0023a49:	74 12                	je     c0023a5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a4b:	83 ec 0c             	sub    esp,0xc
c0023a4e:	b3 07                	mov    bl,0x7
c0023a50:	68 24 cb 02 c0       	push   0xc002cb24
c0023a55:	e8 7e f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023a5a:	83 c4 10             	add    esp,0x10
c0023a5d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a63:	74 12                	je     c0023a77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a65:	83 ec 0c             	sub    esp,0xc
c0023a68:	b3 03                	mov    bl,0x3
c0023a6a:	68 42 cb 02 c0       	push   0xc002cb42
c0023a6f:	e8 64 f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023a74:	83 c4 10             	add    esp,0x10
c0023a77:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a7d:	74 12                	je     c0023a91 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a7f:	83 ec 0c             	sub    esp,0xc
c0023a82:	b3 14                	mov    bl,0x14
c0023a84:	68 62 cb 02 c0       	push   0xc002cb62
c0023a89:	e8 4a f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023a8e:	83 c4 10             	add    esp,0x10
c0023a91:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a97:	74 12                	je     c0023aab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	b3 03                	mov    bl,0x3
c0023a9e:	68 42 cb 02 c0       	push   0xc002cb42
c0023aa3:	e8 30 f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023aa8:	83 c4 10             	add    esp,0x10
c0023aab:	f7 c6 10 00 00 00    	test   esi,0x10
c0023ab1:	74 12                	je     c0023ac5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ab3:	83 ec 0c             	sub    esp,0xc
c0023ab6:	b3 15                	mov    bl,0x15
c0023ab8:	68 7a cb 02 c0       	push   0xc002cb7a
c0023abd:	e8 16 f4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	f7 c6 20 00 00 00    	test   esi,0x20
c0023acb:	74 12                	je     c0023adf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	b3 03                	mov    bl,0x3
c0023ad2:	68 42 cb 02 c0       	push   0xc002cb42
c0023ad7:	e8 fc f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023adc:	83 c4 10             	add    esp,0x10
c0023adf:	f7 c6 40 00 00 00    	test   esi,0x40
c0023ae5:	74 12                	je     c0023af9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023ae7:	83 ec 0c             	sub    esp,0xc
c0023aea:	b3 16                	mov    bl,0x16
c0023aec:	68 94 cb 02 c0       	push   0xc002cb94
c0023af1:	e8 e2 f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023af6:	83 c4 10             	add    esp,0x10
c0023af9:	89 f0                	mov    eax,esi
c0023afb:	84 c0                	test   al,al
c0023afd:	79 42                	jns    c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aff:	83 ec 0c             	sub    esp,0xc
c0023b02:	b3 0d                	mov    bl,0xd
c0023b04:	68 b5 cb 02 c0       	push   0xc002cbb5
c0023b09:	e8 ca f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023b0e:	83 c4 10             	add    esp,0x10
c0023b11:	eb 2e                	jmp    c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b13:	3c 03                	cmp    al,0x3
c0023b15:	75 14                	jne    c0023b2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b17:	83 ec 0c             	sub    esp,0xc
c0023b1a:	b3 17                	mov    bl,0x17
c0023b1c:	68 c9 cb 02 c0       	push   0xc002cbc9
c0023b21:	e8 b2 f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023b26:	83 c4 10             	add    esp,0x10
c0023b29:	eb 16                	jmp    c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b2b:	3c 04                	cmp    al,0x4
c0023b2d:	75 12                	jne    c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	b3 08                	mov    bl,0x8
c0023b34:	68 df cb 02 c0       	push   0xc002cbdf
c0023b39:	e8 9a f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023b3e:	83 c4 10             	add    esp,0x10
c0023b41:	50                   	push   eax
c0023b42:	50                   	push   eax
c0023b43:	0f b6 c3             	movzx  eax,bl
c0023b46:	50                   	push   eax
c0023b47:	68 f7 cb 02 c0       	push   0xc002cbf7
c0023b4c:	e8 87 f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023b51:	83 c4 10             	add    esp,0x10
c0023b54:	83 c4 1c             	add    esp,0x1c
c0023b57:	88 d8                	mov    al,bl
c0023b59:	5b                   	pop    ebx
c0023b5a:	5e                   	pop    esi
c0023b5b:	5f                   	pop    edi
c0023b5c:	5d                   	pop    ebp
c0023b5d:	c3                   	ret    

c0023b5e <IDE::polling(unsigned char, unsigned int)>:
c0023b5e:	57                   	push   edi
c0023b5f:	56                   	push   esi
c0023b60:	53                   	push   ebx
c0023b61:	bb 04 00 00 00       	mov    ebx,0x4
c0023b66:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b6a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b6f:	52                   	push   edx
c0023b70:	6a 0c                	push   0xc
c0023b72:	56                   	push   esi
c0023b73:	57                   	push   edi
c0023b74:	e8 f9 f4 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023b79:	83 c4 10             	add    esp,0x10
c0023b7c:	4b                   	dec    ebx
c0023b7d:	75 f0                	jne    c0023b6f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b7f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b84:	50                   	push   eax
c0023b85:	6a 0c                	push   0xc
c0023b87:	56                   	push   esi
c0023b88:	57                   	push   edi
c0023b89:	e8 e4 f4 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0023b8e:	83 c4 10             	add    esp,0x10
c0023b91:	a8 01                	test   al,0x1
c0023b93:	74 12                	je     c0023ba7 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b95:	83 ec 0c             	sub    esp,0xc
c0023b98:	68 11 cc 02 c0       	push   0xc002cc11
c0023b9d:	e8 36 f3 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	eb 17                	jmp    c0023bbe <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ba7:	a8 20                	test   al,0x20
c0023ba9:	75 0f                	jne    c0023bba <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023bab:	4b                   	dec    ebx
c0023bac:	74 10                	je     c0023bbe <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bae:	84 c0                	test   al,al
c0023bb0:	78 d2                	js     c0023b84 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bb2:	a8 08                	test   al,0x8
c0023bb4:	74 ce                	je     c0023b84 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bb6:	31 c0                	xor    eax,eax
c0023bb8:	eb 06                	jmp    c0023bc0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bba:	b0 01                	mov    al,0x1
c0023bbc:	eb 02                	jmp    c0023bc0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bbe:	b0 02                	mov    al,0x2
c0023bc0:	5b                   	pop    ebx
c0023bc1:	5e                   	pop    esi
c0023bc2:	5f                   	pop    edi
c0023bc3:	c3                   	ret    

c0023bc4 <SATABus::close(int, int, void*)>:
c0023bc4:	31 c0                	xor    eax,eax
c0023bc6:	c3                   	ret    
c0023bc7:	90                   	nop

c0023bc8 <SATABus::detect()>:
c0023bc8:	c3                   	ret    
c0023bc9:	90                   	nop

c0023bca <SATABus::SATABus()>:
c0023bca:	83 ec 0c             	sub    esp,0xc
c0023bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd1:	83 ec 08             	sub    esp,0x8
c0023bd4:	68 54 cc 02 c0       	push   0xc002cc54
c0023bd9:	50                   	push   eax
c0023bda:	e8 ab 0a ff ff       	call   c001468a <HardDiskController::HardDiskController(char const*)>
c0023bdf:	83 c4 10             	add    esp,0x10
c0023be2:	ba 10 cd 02 c0       	mov    edx,0xc002cd10
c0023be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023beb:	89 10                	mov    DWORD PTR [eax],edx
c0023bed:	83 ec 0c             	sub    esp,0xc
c0023bf0:	6a 50                	push   0x50
c0023bf2:	e8 0a c4 fe ff       	call   c0010001 <Phys::allocateContiguousPages(int)>
c0023bf7:	83 c4 10             	add    esp,0x10
c0023bfa:	89 c2                	mov    edx,eax
c0023bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c00:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c06:	83 ec 0c             	sub    esp,0xc
c0023c09:	6a 50                	push   0x50
c0023c0b:	e8 6b df fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0023c10:	83 c4 10             	add    esp,0x10
c0023c13:	89 c2                	mov    edx,eax
c0023c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c1f:	e8 f2 e1 fe ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0023c24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c28:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c38:	83 ec 0c             	sub    esp,0xc
c0023c3b:	6a 03                	push   0x3
c0023c3d:	6a 50                	push   0x50
c0023c3f:	51                   	push   ecx
c0023c40:	52                   	push   edx
c0023c41:	50                   	push   eax
c0023c42:	e8 15 ea fe ff       	call   c001265c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c47:	83 c4 20             	add    esp,0x20
c0023c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c5e:	83 ec 04             	sub    esp,0x4
c0023c61:	52                   	push   edx
c0023c62:	50                   	push   eax
c0023c63:	68 78 cc 02 c0       	push   0xc002cc78
c0023c68:	e8 6b f2 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023c6d:	83 c4 10             	add    esp,0x10
c0023c70:	90                   	nop
c0023c71:	83 c4 0c             	add    esp,0xc
c0023c74:	c3                   	ret    
c0023c75:	90                   	nop

c0023c76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c76:	83 ec 0c             	sub    esp,0xc
c0023c79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c7d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c80:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c83:	09 c2                	or     edx,eax
c0023c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c91:	31 c0                	xor    eax,eax
c0023c93:	c1 e9 08             	shr    ecx,0x8
c0023c96:	83 e1 0f             	and    ecx,0xf
c0023c99:	39 c8                	cmp    eax,ecx
c0023c9b:	74 0a                	je     c0023ca7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c9d:	f6 c2 01             	test   dl,0x1
c0023ca0:	74 18                	je     c0023cba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ca2:	d1 ea                	shr    edx,1
c0023ca4:	40                   	inc    eax
c0023ca5:	eb f2                	jmp    c0023c99 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ca7:	83 ec 0c             	sub    esp,0xc
c0023caa:	68 9c cc 02 c0       	push   0xc002cc9c
c0023caf:	e8 c9 68 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0023cb4:	83 c4 10             	add    esp,0x10
c0023cb7:	83 c8 ff             	or     eax,0xffffffff
c0023cba:	83 c4 0c             	add    esp,0xc
c0023cbd:	c3                   	ret    

c0023cbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cc2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cc5:	89 c2                	mov    edx,eax
c0023cc7:	c1 ea 08             	shr    edx,0x8
c0023cca:	83 e2 0f             	and    edx,0xf
c0023ccd:	fe ca                	dec    dl
c0023ccf:	75 31                	jne    c0023d02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd1:	83 e0 0f             	and    eax,0xf
c0023cd4:	3c 03                	cmp    al,0x3
c0023cd6:	75 2a                	jne    c0023d02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cd8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cdb:	b8 02 00 00 00       	mov    eax,0x2
c0023ce0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023ce6:	74 1c                	je     c0023d04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ce8:	b8 04 00 00 00       	mov    eax,0x4
c0023ced:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023cf3:	74 0f                	je     c0023d04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cf5:	31 c0                	xor    eax,eax
c0023cf7:	83 fa 03             	cmp    edx,0x3
c0023cfa:	0f 94 c0             	sete   al
c0023cfd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d01:	c3                   	ret    
c0023d02:	31 c0                	xor    eax,eax
c0023d04:	c3                   	ret    
c0023d05:	90                   	nop

c0023d06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0d:	0f ba e2 0f          	bt     edx,0xf
c0023d11:	72 f7                	jb     c0023d0a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d16:	83 ca 10             	or     edx,0x10
c0023d19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d1f:	83 ca 01             	or     edx,0x1
c0023d22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d25:	c3                   	ret    

c0023d26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2d:	83 e2 fe             	and    edx,0xfffffffe
c0023d30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d36:	83 e2 ef             	and    edx,0xffffffef
c0023d39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d3f:	0f ba e2 0e          	bt     edx,0xe
c0023d43:	72 f7                	jb     c0023d3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d48:	0f ba e2 0f          	bt     edx,0xf
c0023d4c:	72 ee                	jb     c0023d3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d4e:	c3                   	ret    
c0023d4f:	90                   	nop

c0023d50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d50:	55                   	push   ebp
c0023d51:	57                   	push   edi
c0023d52:	56                   	push   esi
c0023d53:	53                   	push   ebx
c0023d54:	83 ec 1c             	sub    esp,0x1c
c0023d57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d63:	53                   	push   ebx
c0023d64:	89 fd                	mov    ebp,edi
c0023d66:	56                   	push   esi
c0023d67:	c1 e5 0a             	shl    ebp,0xa
c0023d6a:	e8 b7 ff ff ff       	call   c0023d26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d6f:	83 ec 0c             	sub    esp,0xc
c0023d72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d78:	01 e8                	add    eax,ebp
c0023d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0023d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d7e:	68 00 04 00 00       	push   0x400
c0023d83:	6a 00                	push   0x0
c0023d85:	50                   	push   eax
c0023d86:	e8 ed c9 fd ff       	call   c0000778 <memset>
c0023d8b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d91:	89 fa                	mov    edx,edi
c0023d93:	01 e8                	add    eax,ebp
c0023d95:	c1 e7 0d             	shl    edi,0xd
c0023d98:	89 03                	mov    DWORD PTR [ebx],eax
c0023d9a:	c1 e2 08             	shl    edx,0x8
c0023d9d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023da4:	81 c2 00 80 00 00    	add    edx,0x8000
c0023daa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023dae:	89 d0                	mov    eax,edx
c0023db0:	83 c4 1c             	add    esp,0x1c
c0023db3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023db9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023dbf:	68 00 01 00 00       	push   0x100
c0023dc4:	6a 00                	push   0x0
c0023dc6:	50                   	push   eax
c0023dc7:	e8 ac c9 fd ff       	call   c0000778 <memset>
c0023dcc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dd0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dd6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ddc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023de0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023de3:	83 c4 10             	add    esp,0x10
c0023de6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ded:	31 ff                	xor    edi,edi
c0023def:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023df5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023dfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023dff:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e05:	83 c5 20             	add    ebp,0x20
c0023e08:	01 f8                	add    eax,edi
c0023e0a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e0d:	52                   	push   edx
c0023e0e:	68 00 01 00 00       	push   0x100
c0023e13:	6a 00                	push   0x0
c0023e15:	50                   	push   eax
c0023e16:	e8 5d c9 fd ff       	call   c0000778 <memset>
c0023e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e28:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e2f:	01 f8                	add    eax,edi
c0023e31:	81 c7 00 01 00 00    	add    edi,0x100
c0023e37:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e3a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e40:	75 b3                	jne    c0023df5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e42:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e46:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e4a:	83 c4 1c             	add    esp,0x1c
c0023e4d:	5b                   	pop    ebx
c0023e4e:	5e                   	pop    esi
c0023e4f:	5f                   	pop    edi
c0023e50:	5d                   	pop    ebp
c0023e51:	e9 b0 fe ff ff       	jmp    c0023d06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e56:	55                   	push   ebp
c0023e57:	57                   	push   edi
c0023e58:	56                   	push   esi
c0023e59:	53                   	push   ebx
c0023e5a:	31 db                	xor    ebx,ebx
c0023e5c:	83 ec 0c             	sub    esp,0xc
c0023e5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e67:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e6a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e70:	0f 84 aa 00 00 00    	je     c0023f20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e7a:	89 d8                	mov    eax,ebx
c0023e7c:	c1 e0 07             	shl    eax,0x7
c0023e7f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e86:	55                   	push   ebp
c0023e87:	56                   	push   esi
c0023e88:	e8 31 fe ff ff       	call   c0023cbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e8d:	5a                   	pop    edx
c0023e8e:	83 f8 01             	cmp    eax,0x1
c0023e91:	59                   	pop    ecx
c0023e92:	75 30                	jne    c0023ec4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e94:	50                   	push   eax
c0023e95:	50                   	push   eax
c0023e96:	53                   	push   ebx
c0023e97:	68 c1 cc 02 c0       	push   0xc002ccc1
c0023e9c:	e8 37 f0 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023ea1:	83 c4 0c             	add    esp,0xc
c0023ea4:	53                   	push   ebx
c0023ea5:	55                   	push   ebp
c0023ea6:	56                   	push   esi
c0023ea7:	e8 a4 fe ff ff       	call   c0023d50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023eac:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023eb3:	e8 8b b9 fe ff       	call   c000f843 <malloc>
c0023eb8:	89 c5                	mov    ebp,eax
c0023eba:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ebd:	e8 60 0d 00 00       	call   c0024c22 <SATA::SATA()>
c0023ec2:	eb 33                	jmp    c0023ef7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ec4:	83 f8 04             	cmp    eax,0x4
c0023ec7:	75 47                	jne    c0023f10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023ec9:	50                   	push   eax
c0023eca:	50                   	push   eax
c0023ecb:	53                   	push   ebx
c0023ecc:	68 d8 cc 02 c0       	push   0xc002ccd8
c0023ed1:	e8 02 f0 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023ed6:	83 c4 0c             	add    esp,0xc
c0023ed9:	53                   	push   ebx
c0023eda:	55                   	push   ebp
c0023edb:	56                   	push   esi
c0023edc:	e8 6f fe ff ff       	call   c0023d50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ee1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ee8:	e8 56 b9 fe ff       	call   c000f843 <malloc>
c0023eed:	89 c5                	mov    ebp,eax
c0023eef:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ef2:	e8 d7 10 00 00       	call   c0024fce <SATAPI::SATAPI()>
c0023ef7:	5a                   	pop    edx
c0023ef8:	59                   	pop    ecx
c0023ef9:	55                   	push   ebp
c0023efa:	56                   	push   esi
c0023efb:	e8 fe 03 ff ff       	call   c00142fe <Device::addChild(Device*)>
c0023f00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f03:	56                   	push   esi
c0023f04:	6a 00                	push   0x0
c0023f06:	53                   	push   ebx
c0023f07:	55                   	push   ebp
c0023f08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f0b:	83 c4 20             	add    esp,0x20
c0023f0e:	eb 10                	jmp    c0023f20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f10:	50                   	push   eax
c0023f11:	50                   	push   eax
c0023f12:	53                   	push   ebx
c0023f13:	68 f1 cc 02 c0       	push   0xc002ccf1
c0023f18:	e8 bb ef fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0023f1d:	83 c4 10             	add    esp,0x10
c0023f20:	d1 ef                	shr    edi,1
c0023f22:	43                   	inc    ebx
c0023f23:	83 fb 20             	cmp    ebx,0x20
c0023f26:	0f 85 3e ff ff ff    	jne    c0023e6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f2c:	83 c4 0c             	add    esp,0xc
c0023f2f:	5b                   	pop    ebx
c0023f30:	5e                   	pop    esi
c0023f31:	5f                   	pop    edi
c0023f32:	5d                   	pop    ebp
c0023f33:	c3                   	ret    

c0023f34 <SATABus::open(int, int, void*)>:
c0023f34:	83 ec 14             	sub    esp,0x14
c0023f37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f3b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f41:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f47:	52                   	push   edx
c0023f48:	50                   	push   eax
c0023f49:	e8 08 ff ff ff       	call   c0023e56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f4e:	31 c0                	xor    eax,eax
c0023f50:	83 c4 1c             	add    esp,0x1c
c0023f53:	c3                   	ret    

c0023f54 <ATA::close(int, int, void*)>:
c0023f54:	83 ec 0c             	sub    esp,0xc
c0023f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f61:	85 c0                	test   eax,eax
c0023f63:	74 0c                	je     c0023f71 <ATA::close(int, int, void*)+0x1d>
c0023f65:	83 ec 0c             	sub    esp,0xc
c0023f68:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f6a:	50                   	push   eax
c0023f6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f6e:	83 c4 10             	add    esp,0x10
c0023f71:	31 c0                	xor    eax,eax
c0023f73:	83 c4 0c             	add    esp,0xc
c0023f76:	c3                   	ret    
c0023f77:	90                   	nop

c0023f78 <ATA::powerSaving(PowerSavingLevel)>:
c0023f78:	c3                   	ret    
c0023f79:	90                   	nop

c0023f7a <ATA::ATA()>:
c0023f7a:	83 ec 0c             	sub    esp,0xc
c0023f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f81:	83 ec 04             	sub    esp,0x4
c0023f84:	68 00 02 00 00       	push   0x200
c0023f89:	68 d9 cd 02 c0       	push   0xc002cdd9
c0023f8e:	50                   	push   eax
c0023f8f:	e8 8e 07 ff ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f94:	83 c4 10             	add    esp,0x10
c0023f97:	ba 5c cd 02 c0       	mov    edx,0xc002cd5c
c0023f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa0:	89 10                	mov    DWORD PTR [eax],edx
c0023fa2:	90                   	nop
c0023fa3:	83 c4 0c             	add    esp,0xc
c0023fa6:	c3                   	ret    
c0023fa7:	90                   	nop

c0023fa8 <ATA::flush(bool)>:
c0023fa8:	53                   	push   ebx
c0023fa9:	83 ec 08             	sub    esp,0x8
c0023fac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fb5:	19 c0                	sbb    eax,eax
c0023fb7:	83 e0 fd             	and    eax,0xfffffffd
c0023fba:	05 ea 00 00 00       	add    eax,0xea
c0023fbf:	50                   	push   eax
c0023fc0:	6a 07                	push   0x7
c0023fc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc9:	50                   	push   eax
c0023fca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd0:	e8 dd ef ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd5:	83 c4 0c             	add    esp,0xc
c0023fd8:	6a 00                	push   0x0
c0023fda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe1:	50                   	push   eax
c0023fe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe8:	e8 71 fb ff ff       	call   c0023b5e <IDE::polling(unsigned char, unsigned int)>
c0023fed:	83 c4 18             	add    esp,0x18
c0023ff0:	5b                   	pop    ebx
c0023ff1:	c3                   	ret    

c0023ff2 <ATA::readyForCommand()>:
c0023ff2:	56                   	push   esi
c0023ff3:	53                   	push   ebx
c0023ff4:	31 db                	xor    ebx,ebx
c0023ff6:	50                   	push   eax
c0023ff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ffb:	50                   	push   eax
c0023ffc:	6a 0c                	push   0xc
c0023ffe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024005:	50                   	push   eax
c0024006:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002400c:	e8 61 f0 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0024011:	83 c4 10             	add    esp,0x10
c0024014:	a8 88                	test   al,0x88
c0024016:	74 23                	je     c002403b <ATA::readyForCommand()+0x49>
c0024018:	43                   	inc    ebx
c0024019:	83 fb 63             	cmp    ebx,0x63
c002401c:	7e dd                	jle    c0023ffb <ATA::readyForCommand()+0x9>
c002401e:	51                   	push   ecx
c002401f:	51                   	push   ecx
c0024020:	6a 00                	push   0x0
c0024022:	68 40 42 0f 00       	push   0xf4240
c0024027:	e8 9a a2 ff ff       	call   c001e2c6 <nanoSleep(unsigned long long)>
c002402c:	83 c4 10             	add    esp,0x10
c002402f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024035:	75 c4                	jne    c0023ffb <ATA::readyForCommand()+0x9>
c0024037:	31 c0                	xor    eax,eax
c0024039:	eb 02                	jmp    c002403d <ATA::readyForCommand()+0x4b>
c002403b:	b0 01                	mov    al,0x1
c002403d:	5a                   	pop    edx
c002403e:	5b                   	pop    ebx
c002403f:	5e                   	pop    esi
c0024040:	c3                   	ret    
c0024041:	90                   	nop

c0024042 <ATA::access(unsigned long long, int, void*, bool)>:
c0024042:	55                   	push   ebp
c0024043:	57                   	push   edi
c0024044:	56                   	push   esi
c0024045:	53                   	push   ebx
c0024046:	83 ec 2c             	sub    esp,0x2c
c0024049:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002404d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024051:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024055:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024059:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002405d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024061:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024065:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002406b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002406f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024075:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024079:	c1 e0 06             	shl    eax,0x6
c002407c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024084:	74 5d                	je     c00240e3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024086:	89 fa                	mov    edx,edi
c0024088:	89 f0                	mov    eax,esi
c002408a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002408e:	c1 ea 1c             	shr    edx,0x1c
c0024091:	89 d1                	mov    ecx,edx
c0024093:	09 c1                	or     ecx,eax
c0024095:	74 25                	je     c00240bc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024097:	31 ed                	xor    ebp,ebp
c0024099:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240a0:	89 fa                	mov    edx,edi
c00240a2:	89 f0                	mov    eax,esi
c00240a4:	0f ad d0             	shrd   eax,edx,cl
c00240a7:	d3 ea                	shr    edx,cl
c00240a9:	f6 c1 20             	test   cl,0x20
c00240ac:	74 02                	je     c00240b0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00240ae:	89 d0                	mov    eax,edx
c00240b0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240b4:	45                   	inc    ebp
c00240b5:	83 fd 06             	cmp    ebp,0x6
c00240b8:	75 df                	jne    c0024099 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240ba:	eb 76                	jmp    c0024132 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240bc:	89 f0                	mov    eax,esi
c00240be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240c3:	89 fa                	mov    edx,edi
c00240c5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240cc:	0f ac d0 10          	shrd   eax,edx,0x10
c00240d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240d9:	c1 ee 18             	shr    esi,0x18
c00240dc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240e1:	eb 56                	jmp    c0024139 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240e3:	6a 00                	push   0x0
c00240e5:	6a 3f                	push   0x3f
c00240e7:	57                   	push   edi
c00240e8:	56                   	push   esi
c00240e9:	e8 8e 29 00 00       	call   c0026a7c <__umoddi3>
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	40                   	inc    eax
c00240f2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240f6:	6a 00                	push   0x0
c00240f8:	68 f0 03 00 00       	push   0x3f0
c00240fd:	57                   	push   edi
c00240fe:	56                   	push   esi
c00240ff:	e8 78 28 00 00       	call   c002697c <__udivdi3>
c0024104:	83 c4 10             	add    esp,0x10
c0024107:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002410c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024113:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024118:	6a 00                	push   0x0
c002411a:	6a 3f                	push   0x3f
c002411c:	57                   	push   edi
c002411d:	56                   	push   esi
c002411e:	e8 59 28 00 00       	call   c002697c <__udivdi3>
c0024123:	83 c4 10             	add    esp,0x10
c0024126:	89 c6                	mov    esi,eax
c0024128:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002412d:	83 e6 0f             	and    esi,0xf
c0024130:	eb 07                	jmp    c0024139 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024132:	31 f6                	xor    esi,esi
c0024134:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024139:	bf 01 00 00 00       	mov    edi,0x1
c002413e:	50                   	push   eax
c002413f:	6a 00                	push   0x0
c0024141:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024148:	50                   	push   eax
c0024149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002414d:	e8 6c f0 ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c0024152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024155:	e8 98 fe ff ff       	call   c0023ff2 <ATA::readyForCommand()>
c002415a:	83 c4 10             	add    esp,0x10
c002415d:	84 c0                	test   al,al
c002415f:	0f 84 5a 02 00 00    	je     c00243bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024165:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002416b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024171:	c1 e0 04             	shl    eax,0x4
c0024174:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002417b:	09 c6                	or     esi,eax
c002417d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024182:	75 05                	jne    c0024189 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024184:	83 ce a0             	or     esi,0xffffffa0
c0024187:	eb 03                	jmp    c002418c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024189:	83 ce e0             	or     esi,0xffffffe0
c002418c:	89 f0                	mov    eax,esi
c002418e:	0f b6 f0             	movzx  esi,al
c0024191:	56                   	push   esi
c0024192:	6a 06                	push   0x6
c0024194:	51                   	push   ecx
c0024195:	52                   	push   edx
c0024196:	e8 17 ee ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002419b:	83 c4 10             	add    esp,0x10
c002419e:	6a 00                	push   0x0
c00241a0:	6a 01                	push   0x1
c00241a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a9:	50                   	push   eax
c00241aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241b0:	e8 fd ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b5:	83 c4 10             	add    esp,0x10
c00241b8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241bd:	75 6e                	jne    c002422d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241bf:	6a 00                	push   0x0
c00241c1:	6a 08                	push   0x8
c00241c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ca:	50                   	push   eax
c00241cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241d1:	e8 dc ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241db:	50                   	push   eax
c00241dc:	6a 09                	push   0x9
c00241de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e5:	50                   	push   eax
c00241e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ec:	e8 c1 ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f1:	83 c4 20             	add    esp,0x20
c00241f4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241f9:	50                   	push   eax
c00241fa:	6a 0a                	push   0xa
c00241fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024203:	50                   	push   eax
c0024204:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420a:	e8 a3 ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024214:	50                   	push   eax
c0024215:	6a 0b                	push   0xb
c0024217:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002421e:	50                   	push   eax
c002421f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024225:	e8 88 ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422a:	83 c4 20             	add    esp,0x20
c002422d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024232:	50                   	push   eax
c0024233:	6a 02                	push   0x2
c0024235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423c:	50                   	push   eax
c002423d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024243:	e8 6a ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024248:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002424d:	50                   	push   eax
c002424e:	6a 03                	push   0x3
c0024250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024257:	50                   	push   eax
c0024258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002425e:	e8 4f ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024263:	83 c4 20             	add    esp,0x20
c0024266:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002426b:	50                   	push   eax
c002426c:	6a 04                	push   0x4
c002426e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024275:	50                   	push   eax
c0024276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427c:	e8 31 ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024281:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024286:	50                   	push   eax
c0024287:	6a 05                	push   0x5
c0024289:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024290:	50                   	push   eax
c0024291:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024297:	e8 16 ed ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429c:	83 c4 20             	add    esp,0x20
c002429f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242a4:	0f 94 c0             	sete   al
c00242a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242ac:	74 09                	je     c00242b7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00242ae:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242b5:	eb 07                	jmp    c00242be <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242b7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242be:	0f b6 c0             	movzx  eax,al
c00242c1:	50                   	push   eax
c00242c2:	6a 07                	push   0x7
c00242c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242cb:	50                   	push   eax
c00242cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d2:	e8 db ec ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242db:	83 c4 10             	add    esp,0x10
c00242de:	85 f6                	test   esi,esi
c00242e0:	0f 84 ba 00 00 00    	je     c00243a0 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242e6:	50                   	push   eax
c00242e7:	6a 01                	push   0x1
c00242e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f0:	50                   	push   eax
c00242f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f7:	e8 62 f8 ff ff       	call   c0023b5e <IDE::polling(unsigned char, unsigned int)>
c00242fc:	83 c4 10             	add    esp,0x10
c00242ff:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024305:	84 c0                	test   al,al
c0024307:	74 2c                	je     c0024335 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024309:	0f b6 f8             	movzx  edi,al
c002430c:	0f b6 d2             	movzx  edx,dl
c002430f:	57                   	push   edi
c0024310:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024317:	50                   	push   eax
c0024318:	52                   	push   edx
c0024319:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002431f:	e8 a4 f6 ff ff       	call   c00239c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024324:	c7 04 24 34 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd34
c002432b:	e8 a8 eb fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0024330:	e9 87 00 00 00       	jmp    c00243bc <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024335:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002433a:	74 33                	je     c002436f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002433c:	31 ed                	xor    ebp,ebp
c002433e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024342:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024346:	50                   	push   eax
c0024347:	50                   	push   eax
c0024348:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434f:	50                   	push   eax
c0024350:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024356:	e8 45 ec ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c002435b:	89 c2                	mov    edx,eax
c002435d:	89 f8                	mov    eax,edi
c002435f:	66 ef                	out    dx,ax
c0024361:	45                   	inc    ebp
c0024362:	83 c4 10             	add    esp,0x10
c0024365:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002436b:	75 d1                	jne    c002433e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002436d:	eb 23                	jmp    c0024392 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002436f:	0f b6 d2             	movzx  edx,dl
c0024372:	51                   	push   ecx
c0024373:	51                   	push   ecx
c0024374:	52                   	push   edx
c0024375:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437b:	e8 20 ec ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c0024380:	b9 00 01 00 00       	mov    ecx,0x100
c0024385:	89 c2                	mov    edx,eax
c0024387:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002438b:	fc                   	cld    
c002438c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002438f:	83 c4 10             	add    esp,0x10
c0024392:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002439a:	4e                   	dec    esi
c002439b:	e9 3e ff ff ff       	jmp    c00242de <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243a0:	31 ff                	xor    edi,edi
c00243a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243a7:	74 16                	je     c00243bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243a9:	50                   	push   eax
c00243aa:	50                   	push   eax
c00243ab:	31 c0                	xor    eax,eax
c00243ad:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243b2:	0f 94 c0             	sete   al
c00243b5:	50                   	push   eax
c00243b6:	53                   	push   ebx
c00243b7:	e8 ec fb ff ff       	call   c0023fa8 <ATA::flush(bool)>
c00243bc:	83 c4 10             	add    esp,0x10
c00243bf:	83 c4 2c             	add    esp,0x2c
c00243c2:	89 f8                	mov    eax,edi
c00243c4:	5b                   	pop    ebx
c00243c5:	5e                   	pop    esi
c00243c6:	5f                   	pop    edi
c00243c7:	5d                   	pop    ebp
c00243c8:	c3                   	ret    
c00243c9:	90                   	nop

c00243ca <ATA::read(unsigned long long, int, void*)>:
c00243ca:	57                   	push   edi
c00243cb:	b8 04 00 00 00       	mov    eax,0x4
c00243d0:	56                   	push   esi
c00243d1:	53                   	push   ebx
c00243d2:	83 ec 10             	sub    esp,0x10
c00243d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243dd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243e8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243ee:	77 3b                	ja     c002442b <ATA::read(unsigned long long, int, void*)+0x61>
c00243f0:	b8 06 00 00 00       	mov    eax,0x6
c00243f5:	85 d2                	test   edx,edx
c00243f7:	74 32                	je     c002442b <ATA::read(unsigned long long, int, void*)+0x61>
c00243f9:	50                   	push   eax
c00243fa:	50                   	push   eax
c00243fb:	6a 00                	push   0x0
c00243fd:	52                   	push   edx
c00243fe:	53                   	push   ebx
c00243ff:	57                   	push   edi
c0024400:	56                   	push   esi
c0024401:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024405:	e8 38 fc ff ff       	call   c0024042 <ATA::access(unsigned long long, int, void*, bool)>
c002440a:	83 c4 20             	add    esp,0x20
c002440d:	85 c0                	test   eax,eax
c002440f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024413:	75 11                	jne    c0024426 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024415:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c002441b:	e8 b0 c5 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024424:	eb 05                	jmp    c002442b <ATA::read(unsigned long long, int, void*)+0x61>
c0024426:	b8 01 00 00 00       	mov    eax,0x1
c002442b:	83 c4 10             	add    esp,0x10
c002442e:	5b                   	pop    ebx
c002442f:	5e                   	pop    esi
c0024430:	5f                   	pop    edi
c0024431:	c3                   	ret    

c0024432 <ATA::write(unsigned long long, int, void*)>:
c0024432:	57                   	push   edi
c0024433:	b8 04 00 00 00       	mov    eax,0x4
c0024438:	56                   	push   esi
c0024439:	53                   	push   ebx
c002443a:	83 ec 10             	sub    esp,0x10
c002443d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024441:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024445:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024448:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002444c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024450:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024456:	77 3b                	ja     c0024493 <ATA::write(unsigned long long, int, void*)+0x61>
c0024458:	b8 06 00 00 00       	mov    eax,0x6
c002445d:	85 d2                	test   edx,edx
c002445f:	74 32                	je     c0024493 <ATA::write(unsigned long long, int, void*)+0x61>
c0024461:	50                   	push   eax
c0024462:	50                   	push   eax
c0024463:	6a 01                	push   0x1
c0024465:	52                   	push   edx
c0024466:	53                   	push   ebx
c0024467:	57                   	push   edi
c0024468:	56                   	push   esi
c0024469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002446d:	e8 d0 fb ff ff       	call   c0024042 <ATA::access(unsigned long long, int, void*, bool)>
c0024472:	83 c4 20             	add    esp,0x20
c0024475:	85 c0                	test   eax,eax
c0024477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002447b:	75 11                	jne    c002448e <ATA::write(unsigned long long, int, void*)+0x5c>
c002447d:	01 1d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebx
c0024483:	e8 48 c5 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002448c:	eb 05                	jmp    c0024493 <ATA::write(unsigned long long, int, void*)+0x61>
c002448e:	b8 01 00 00 00       	mov    eax,0x1
c0024493:	83 c4 10             	add    esp,0x10
c0024496:	5b                   	pop    ebx
c0024497:	5e                   	pop    esi
c0024498:	5f                   	pop    edi
c0024499:	c3                   	ret    

c002449a <ATA::detectCHS()>:
c002449a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002449e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244a4:	c1 e0 06             	shl    eax,0x6
c00244a7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244ad:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244b7:	c7 44 24 04 3f cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd3f
c00244bf:	e9 b9 60 ff ff       	jmp    c001a57d <Krnl::panic(char const*)>

c00244c4 <ATA::open(int, int, void*)>:
c00244c4:	53                   	push   ebx
c00244c5:	83 ec 08             	sub    esp,0x8
c00244c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244d4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244e0:	c1 e0 06             	shl    eax,0x6
c00244e3:	01 d0                	add    eax,edx
c00244e5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244ec:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244f2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244f9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024503:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024509:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024510:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024517:	75 0c                	jne    c0024525 <ATA::open(int, int, void*)+0x61>
c0024519:	83 ec 0c             	sub    esp,0xc
c002451c:	53                   	push   ebx
c002451d:	e8 78 ff ff ff       	call   c002449a <ATA::detectCHS()>
c0024522:	83 c4 10             	add    esp,0x10
c0024525:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002452b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024531:	c1 e0 06             	shl    eax,0x6
c0024534:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002453b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024545:	d1 e8                	shr    eax,1
c0024547:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002454d:	6a 04                	push   0x4
c002454f:	6a 0c                	push   0xc
c0024551:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024558:	50                   	push   eax
c0024559:	52                   	push   edx
c002455a:	e8 53 ea ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002455f:	90                   	nop
c0024560:	90                   	nop
c0024561:	6a 00                	push   0x0
c0024563:	6a 0c                	push   0xc
c0024565:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002456c:	50                   	push   eax
c002456d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024573:	e8 3a ea ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024578:	83 c4 14             	add    esp,0x14
c002457b:	53                   	push   ebx
c002457c:	e8 09 02 ff ff       	call   c001478a <PhysicalDisk::startCache()>
c0024581:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024584:	e8 77 23 ff ff       	call   c0016900 <createPartitionsForDisk(PhysicalDisk*)>
c0024589:	31 c0                	xor    eax,eax
c002458b:	83 c4 18             	add    esp,0x18
c002458e:	5b                   	pop    ebx
c002458f:	c3                   	ret    

c0024590 <ATAPI::write(unsigned long long, int, void*)>:
c0024590:	b8 03 00 00 00       	mov    eax,0x3
c0024595:	c3                   	ret    

c0024596 <ATAPI::close(int, int, void*)>:
c0024596:	83 ec 0c             	sub    esp,0xc
c0024599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002459d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245a3:	85 c0                	test   eax,eax
c00245a5:	74 0c                	je     c00245b3 <ATAPI::close(int, int, void*)+0x1d>
c00245a7:	83 ec 0c             	sub    esp,0xc
c00245aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00245ac:	50                   	push   eax
c00245ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	31 c0                	xor    eax,eax
c00245b5:	83 c4 0c             	add    esp,0xc
c00245b8:	c3                   	ret    
c00245b9:	90                   	nop

c00245ba <ATAPI::ATAPI()>:
c00245ba:	83 ec 0c             	sub    esp,0xc
c00245bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245c1:	83 ec 04             	sub    esp,0x4
c00245c4:	68 00 08 00 00       	push   0x800
c00245c9:	68 79 ce 02 c0       	push   0xc002ce79
c00245ce:	50                   	push   eax
c00245cf:	e8 4e 01 ff ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245d4:	83 c4 10             	add    esp,0x10
c00245d7:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c00245dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245e0:	89 10                	mov    DWORD PTR [eax],edx
c00245e2:	90                   	nop
c00245e3:	83 c4 0c             	add    esp,0xc
c00245e6:	c3                   	ret    
c00245e7:	90                   	nop

c00245e8 <ATAPI::readyForCommand()>:
c00245e8:	56                   	push   esi
c00245e9:	53                   	push   ebx
c00245ea:	31 db                	xor    ebx,ebx
c00245ec:	50                   	push   eax
c00245ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245f1:	50                   	push   eax
c00245f2:	6a 0c                	push   0xc
c00245f4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245fb:	50                   	push   eax
c00245fc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024602:	e8 6b ea ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c0024607:	83 c4 10             	add    esp,0x10
c002460a:	a8 88                	test   al,0x88
c002460c:	74 23                	je     c0024631 <ATAPI::readyForCommand()+0x49>
c002460e:	43                   	inc    ebx
c002460f:	83 fb 63             	cmp    ebx,0x63
c0024612:	7e dd                	jle    c00245f1 <ATAPI::readyForCommand()+0x9>
c0024614:	51                   	push   ecx
c0024615:	51                   	push   ecx
c0024616:	6a 00                	push   0x0
c0024618:	68 40 42 0f 00       	push   0xf4240
c002461d:	e8 a4 9c ff ff       	call   c001e2c6 <nanoSleep(unsigned long long)>
c0024622:	83 c4 10             	add    esp,0x10
c0024625:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002462b:	75 c4                	jne    c00245f1 <ATAPI::readyForCommand()+0x9>
c002462d:	31 c0                	xor    eax,eax
c002462f:	eb 02                	jmp    c0024633 <ATAPI::readyForCommand()+0x4b>
c0024631:	b0 01                	mov    al,0x1
c0024633:	5a                   	pop    edx
c0024634:	5b                   	pop    ebx
c0024635:	5e                   	pop    esi
c0024636:	c3                   	ret    
c0024637:	90                   	nop

c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024638:	55                   	push   ebp
c0024639:	57                   	push   edi
c002463a:	56                   	push   esi
c002463b:	53                   	push   ebx
c002463c:	83 ec 20             	sub    esp,0x20
c002463f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024643:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024647:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002464b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002464f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024653:	6a 01                	push   0x1
c0024655:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465c:	50                   	push   eax
c002465d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024663:	e8 56 eb ff ff       	call   c00231be <IDE::enableIRQs(unsigned char, bool)>
c0024668:	5e                   	pop    esi
c0024669:	58                   	pop    eax
c002466a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024671:	50                   	push   eax
c0024672:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024678:	e8 0f e9 ff ff       	call   c0022f8c <IDE::prepareInterrupt(unsigned char)>
c002467d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024680:	e8 63 ff ff ff       	call   c00245e8 <ATAPI::readyForCommand()>
c0024685:	83 c4 10             	add    esp,0x10
c0024688:	84 c0                	test   al,al
c002468a:	75 0a                	jne    c0024696 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002468c:	bb 01 00 00 00       	mov    ebx,0x1
c0024691:	e9 57 02 00 00       	jmp    c00248ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024696:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002469c:	c1 e0 04             	shl    eax,0x4
c002469f:	0f b6 c0             	movzx  eax,al
c00246a2:	50                   	push   eax
c00246a3:	6a 06                	push   0x6
c00246a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ac:	50                   	push   eax
c00246ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b3:	e8 fa e8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b8:	6a 00                	push   0x0
c00246ba:	6a 01                	push   0x1
c00246bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c3:	50                   	push   eax
c00246c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ca:	e8 e3 e8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246cf:	83 c4 20             	add    esp,0x20
c00246d2:	0f b6 c3             	movzx  eax,bl
c00246d5:	0f b6 df             	movzx  ebx,bh
c00246d8:	50                   	push   eax
c00246d9:	6a 04                	push   0x4
c00246db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e2:	50                   	push   eax
c00246e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e9:	e8 c4 e8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ee:	53                   	push   ebx
c00246ef:	6a 05                	push   0x5
c00246f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f8:	50                   	push   eax
c00246f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ff:	e8 ae e8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024704:	83 c4 20             	add    esp,0x20
c0024707:	68 a0 00 00 00       	push   0xa0
c002470c:	6a 07                	push   0x7
c002470e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024715:	50                   	push   eax
c0024716:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471c:	e8 91 e8 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024721:	83 c4 0c             	add    esp,0xc
c0024724:	6a 01                	push   0x1
c0024726:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472d:	50                   	push   eax
c002472e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024734:	e8 25 f4 ff ff       	call   c0023b5e <IDE::polling(unsigned char, unsigned int)>
c0024739:	83 c4 10             	add    esp,0x10
c002473c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024742:	84 c0                	test   al,al
c0024744:	74 23                	je     c0024769 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024746:	0f b6 d8             	movzx  ebx,al
c0024749:	0f b6 d2             	movzx  edx,dl
c002474c:	53                   	push   ebx
c002474d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024754:	50                   	push   eax
c0024755:	52                   	push   edx
c0024756:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475c:	e8 67 f2 ff ff       	call   c00239c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024761:	83 c4 10             	add    esp,0x10
c0024764:	e9 84 01 00 00       	jmp    c00248ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024769:	0f b6 d2             	movzx  edx,dl
c002476c:	53                   	push   ebx
c002476d:	53                   	push   ebx
c002476e:	52                   	push   edx
c002476f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024775:	e8 26 e8 ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c002477a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002477e:	b9 06 00 00 00       	mov    ecx,0x6
c0024783:	89 c2                	mov    edx,eax
c0024785:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024788:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024795:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002479c:	85 db                	test   ebx,ebx
c002479e:	0f 84 ec 00 00 00    	je     c0024890 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247a4:	51                   	push   ecx
c00247a5:	51                   	push   ecx
c00247a6:	52                   	push   edx
c00247a7:	50                   	push   eax
c00247a8:	e8 73 e9 ff ff       	call   c0023120 <IDE::waitInterrupt(unsigned char)>
c00247ad:	83 c4 10             	add    esp,0x10
c00247b0:	84 c0                	test   al,al
c00247b2:	0f 84 d4 fe ff ff    	je     c002468c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247b8:	56                   	push   esi
c00247b9:	56                   	push   esi
c00247ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c1:	50                   	push   eax
c00247c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c8:	e8 bf e7 ff ff       	call   c0022f8c <IDE::prepareInterrupt(unsigned char)>
c00247cd:	83 c4 0c             	add    esp,0xc
c00247d0:	6a 04                	push   0x4
c00247d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d9:	50                   	push   eax
c00247da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e0:	e8 8d e8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00247e5:	83 c4 0c             	add    esp,0xc
c00247e8:	89 c6                	mov    esi,eax
c00247ea:	6a 05                	push   0x5
c00247ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f3:	50                   	push   eax
c00247f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247fa:	e8 73 e8 ff ff       	call   c0023072 <IDE::read(unsigned char, unsigned char)>
c00247ff:	89 f1                	mov    ecx,esi
c0024801:	0f b6 c0             	movzx  eax,al
c0024804:	0f b6 f1             	movzx  esi,cl
c0024807:	c1 e0 08             	shl    eax,0x8
c002480a:	09 c6                	or     esi,eax
c002480c:	d1 fe                	sar    esi,1
c002480e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024812:	83 c4 10             	add    esp,0x10
c0024815:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002481a:	74 41                	je     c002485d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002481c:	31 c9                	xor    ecx,ecx
c002481e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024824:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002482b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002482f:	75 0a                	jne    c002483b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024831:	01 c9                	add    ecx,ecx
c0024833:	01 cd                	add    ebp,ecx
c0024835:	4b                   	dec    ebx
c0024836:	e9 54 ff ff ff       	jmp    c002478f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002483b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024840:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024844:	51                   	push   ecx
c0024845:	51                   	push   ecx
c0024846:	52                   	push   edx
c0024847:	50                   	push   eax
c0024848:	e8 53 e7 ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c002484d:	89 c2                	mov    edx,eax
c002484f:	89 f0                	mov    eax,esi
c0024851:	66 ef                	out    dx,ax
c0024853:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024857:	83 c4 10             	add    esp,0x10
c002485a:	41                   	inc    ecx
c002485b:	eb c1                	jmp    c002481e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002485d:	31 f6                	xor    esi,esi
c002485f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024865:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002486c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024870:	75 06                	jne    c0024878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024872:	01 f6                	add    esi,esi
c0024874:	01 f5                	add    ebp,esi
c0024876:	eb bd                	jmp    c0024835 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024878:	51                   	push   ecx
c0024879:	51                   	push   ecx
c002487a:	52                   	push   edx
c002487b:	50                   	push   eax
c002487c:	e8 1f e7 ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c0024881:	89 c2                	mov    edx,eax
c0024883:	66 ed                	in     ax,dx
c0024885:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002488a:	83 c4 10             	add    esp,0x10
c002488d:	46                   	inc    esi
c002488e:	eb cf                	jmp    c002485f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024890:	51                   	push   ecx
c0024891:	51                   	push   ecx
c0024892:	52                   	push   edx
c0024893:	50                   	push   eax
c0024894:	e8 87 e8 ff ff       	call   c0023120 <IDE::waitInterrupt(unsigned char)>
c0024899:	83 c4 10             	add    esp,0x10
c002489c:	84 c0                	test   al,al
c002489e:	0f 84 e8 fd ff ff    	je     c002468c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248a4:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248a9:	52                   	push   edx
c00248aa:	52                   	push   edx
c00248ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b2:	50                   	push   eax
c00248b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b9:	e8 ce e6 ff ff       	call   c0022f8c <IDE::prepareInterrupt(unsigned char)>
c00248be:	83 c4 10             	add    esp,0x10
c00248c1:	50                   	push   eax
c00248c2:	50                   	push   eax
c00248c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ca:	50                   	push   eax
c00248cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248d1:	e8 ca e6 ff ff       	call   c0022fa0 <IDE::getBase(unsigned char)>
c00248d6:	8d 50 07             	lea    edx,[eax+0x7]
c00248d9:	ec                   	in     al,dx
c00248da:	83 c4 10             	add    esp,0x10
c00248dd:	a8 88                	test   al,0x88
c00248df:	74 0a                	je     c00248eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248e1:	4b                   	dec    ebx
c00248e2:	75 dd                	jne    c00248c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248e4:	bb 02 00 00 00       	mov    ebx,0x2
c00248e9:	eb 02                	jmp    c00248ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248eb:	31 db                	xor    ebx,ebx
c00248ed:	83 c4 1c             	add    esp,0x1c
c00248f0:	89 d8                	mov    eax,ebx
c00248f2:	5b                   	pop    ebx
c00248f3:	5e                   	pop    esi
c00248f4:	5f                   	pop    edi
c00248f5:	5d                   	pop    ebp
c00248f6:	c3                   	ret    
c00248f7:	90                   	nop

c00248f8 <ATAPI::diskRemoved()>:
c00248f8:	83 ec 18             	sub    esp,0x18
c00248fb:	68 85 ce 02 c0       	push   0xc002ce85
c0024900:	e8 d3 e5 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0024905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024909:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024910:	83 c4 1c             	add    esp,0x1c
c0024913:	c3                   	ret    

c0024914 <ATAPI::eject()>:
c0024914:	57                   	push   edi
c0024915:	b9 03 00 00 00       	mov    ecx,0x3
c002491a:	53                   	push   ebx
c002491b:	83 ec 14             	sub    esp,0x14
c002491e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024922:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024926:	fc                   	cld    
c0024927:	31 c0                	xor    eax,eax
c0024929:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002492b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024930:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024935:	50                   	push   eax
c0024936:	50                   	push   eax
c0024937:	6a 00                	push   0x0
c0024939:	6a 00                	push   0x0
c002493b:	6a 00                	push   0x0
c002493d:	6a 02                	push   0x2
c002493f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024943:	50                   	push   eax
c0024944:	53                   	push   ebx
c0024945:	e8 ee fc ff ff       	call   c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002494a:	83 c4 14             	add    esp,0x14
c002494d:	53                   	push   ebx
c002494e:	e8 a5 ff ff ff       	call   c00248f8 <ATAPI::diskRemoved()>
c0024953:	83 c4 24             	add    esp,0x24
c0024956:	31 c0                	xor    eax,eax
c0024958:	5b                   	pop    ebx
c0024959:	5f                   	pop    edi
c002495a:	c3                   	ret    
c002495b:	90                   	nop

c002495c <ATAPI::diskInserted()>:
c002495c:	53                   	push   ebx
c002495d:	83 ec 14             	sub    esp,0x14
c0024960:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024964:	68 9c ce 02 c0       	push   0xc002ce9c
c0024969:	e8 6a e5 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c002496e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024975:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024978:	e8 0d fe fe ff       	call   c001478a <PhysicalDisk::startCache()>
c002497d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024981:	83 c4 18             	add    esp,0x18
c0024984:	5b                   	pop    ebx
c0024985:	e9 76 1f ff ff       	jmp    c0016900 <createPartitionsForDisk(PhysicalDisk*)>

c002498a <ATAPI::detectMedia()>:
c002498a:	56                   	push   esi
c002498b:	53                   	push   ebx
c002498c:	83 ec 28             	sub    esp,0x28
c002498f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024993:	6a 0c                	push   0xc
c0024995:	6a 00                	push   0x0
c0024997:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002499b:	56                   	push   esi
c002499c:	e8 d7 bd fd ff       	call   c0000778 <memset>
c00249a1:	58                   	pop    eax
c00249a2:	5a                   	pop    edx
c00249a3:	6a 00                	push   0x0
c00249a5:	6a 00                	push   0x0
c00249a7:	6a 00                	push   0x0
c00249a9:	6a 00                	push   0x0
c00249ab:	56                   	push   esi
c00249ac:	53                   	push   ebx
c00249ad:	e8 86 fc ff ff       	call   c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249b2:	83 c4 1c             	add    esp,0x1c
c00249b5:	6a 0c                	push   0xc
c00249b7:	6a 00                	push   0x0
c00249b9:	56                   	push   esi
c00249ba:	e8 b9 bd fd ff       	call   c0000778 <memset>
c00249bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249c9:	59                   	pop    ecx
c00249ca:	58                   	pop    eax
c00249cb:	6a 01                	push   0x1
c00249cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249d1:	50                   	push   eax
c00249d2:	6a 00                	push   0x0
c00249d4:	6a 12                	push   0x12
c00249d6:	56                   	push   esi
c00249d7:	53                   	push   ebx
c00249d8:	e8 5b fc ff ff       	call   c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249e1:	83 c4 20             	add    esp,0x20
c00249e4:	83 e0 7f             	and    eax,0x7f
c00249e7:	3c 70                	cmp    al,0x70
c00249e9:	74 15                	je     c0024a00 <ATAPI::detectMedia()+0x76>
c00249eb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249f2:	75 0c                	jne    c0024a00 <ATAPI::detectMedia()+0x76>
c00249f4:	83 ec 0c             	sub    esp,0xc
c00249f7:	53                   	push   ebx
c00249f8:	e8 5f ff ff ff       	call   c002495c <ATAPI::diskInserted()>
c00249fd:	83 c4 10             	add    esp,0x10
c0024a00:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a04:	83 e0 0f             	and    eax,0xf
c0024a07:	3c 02                	cmp    al,0x2
c0024a09:	75 1b                	jne    c0024a26 <ATAPI::detectMedia()+0x9c>
c0024a0b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a10:	75 2d                	jne    c0024a3f <ATAPI::detectMedia()+0xb5>
c0024a12:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a19:	74 24                	je     c0024a3f <ATAPI::detectMedia()+0xb5>
c0024a1b:	83 ec 0c             	sub    esp,0xc
c0024a1e:	53                   	push   ebx
c0024a1f:	e8 d4 fe ff ff       	call   c00248f8 <ATAPI::diskRemoved()>
c0024a24:	eb 16                	jmp    c0024a3c <ATAPI::detectMedia()+0xb2>
c0024a26:	84 c0                	test   al,al
c0024a28:	75 15                	jne    c0024a3f <ATAPI::detectMedia()+0xb5>
c0024a2a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a31:	75 0c                	jne    c0024a3f <ATAPI::detectMedia()+0xb5>
c0024a33:	83 ec 0c             	sub    esp,0xc
c0024a36:	53                   	push   ebx
c0024a37:	e8 20 ff ff ff       	call   c002495c <ATAPI::diskInserted()>
c0024a3c:	83 c4 10             	add    esp,0x10
c0024a3f:	83 c4 24             	add    esp,0x24
c0024a42:	5b                   	pop    ebx
c0024a43:	5e                   	pop    esi
c0024a44:	c3                   	ret    
c0024a45:	90                   	nop

c0024a46 <ATAPI::open(int, int, void*)>:
c0024a46:	53                   	push   ebx
c0024a47:	83 ec 08             	sub    esp,0x8
c0024a4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a56:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a5c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a62:	c1 e0 06             	shl    eax,0x6
c0024a65:	01 d0                	add    eax,edx
c0024a67:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a6e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a74:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a7b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a85:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a8b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a92:	6a 04                	push   0x4
c0024a94:	6a 0c                	push   0xc
c0024a96:	51                   	push   ecx
c0024a97:	52                   	push   edx
c0024a98:	e8 15 e5 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9d:	90                   	nop
c0024a9e:	90                   	nop
c0024a9f:	6a 00                	push   0x0
c0024aa1:	6a 0c                	push   0xc
c0024aa3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aaa:	50                   	push   eax
c0024aab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab1:	e8 fc e4 ff ff       	call   c0022fb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024abd:	83 c4 14             	add    esp,0x14
c0024ac0:	53                   	push   ebx
c0024ac1:	e8 c4 fe ff ff       	call   c002498a <ATAPI::detectMedia()>
c0024ac6:	31 c0                	xor    eax,eax
c0024ac8:	83 c4 18             	add    esp,0x18
c0024acb:	5b                   	pop    ebx
c0024acc:	c3                   	ret    
c0024acd:	90                   	nop

c0024ace <ATAPI::read(unsigned long long, int, void*)>:
c0024ace:	55                   	push   ebp
c0024acf:	57                   	push   edi
c0024ad0:	56                   	push   esi
c0024ad1:	53                   	push   ebx
c0024ad2:	83 ec 1c             	sub    esp,0x1c
c0024ad5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024ad9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024add:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024ae1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ae8:	74 41                	je     c0024b2b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024aea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024aee:	b9 03 00 00 00       	mov    ecx,0x3
c0024af3:	fc                   	cld    
c0024af4:	31 c0                	xor    eax,eax
c0024af6:	86 fb                	xchg   bl,bh
c0024af8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024afa:	c1 c3 10             	rol    ebx,0x10
c0024afd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b02:	89 e8                	mov    eax,ebp
c0024b04:	86 fb                	xchg   bl,bh
c0024b06:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b0a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b0e:	50                   	push   eax
c0024b0f:	50                   	push   eax
c0024b10:	55                   	push   ebp
c0024b11:	c1 e5 0b             	shl    ebp,0xb
c0024b14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b18:	6a 00                	push   0x0
c0024b1a:	55                   	push   ebp
c0024b1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b1f:	50                   	push   eax
c0024b20:	56                   	push   esi
c0024b21:	e8 12 fb ff ff       	call   c0024638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b26:	83 c4 20             	add    esp,0x20
c0024b29:	eb 1a                	jmp    c0024b45 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b2b:	83 ec 0c             	sub    esp,0xc
c0024b2e:	56                   	push   esi
c0024b2f:	e8 56 fe ff ff       	call   c002498a <ATAPI::detectMedia()>
c0024b34:	83 c4 10             	add    esp,0x10
c0024b37:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b3e:	75 aa                	jne    c0024aea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b40:	b8 02 00 00 00       	mov    eax,0x2
c0024b45:	83 c4 1c             	add    esp,0x1c
c0024b48:	5b                   	pop    ebx
c0024b49:	5e                   	pop    esi
c0024b4a:	5f                   	pop    edi
c0024b4b:	5d                   	pop    ebp
c0024b4c:	c3                   	ret    
c0024b4d:	90                   	nop

c0024b4e <SATA::close(int, int, void*)>:
c0024b4e:	83 ec 0c             	sub    esp,0xc
c0024b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b5b:	85 c0                	test   eax,eax
c0024b5d:	74 0c                	je     c0024b6b <SATA::close(int, int, void*)+0x1d>
c0024b5f:	83 ec 0c             	sub    esp,0xc
c0024b62:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b64:	50                   	push   eax
c0024b65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b68:	83 c4 10             	add    esp,0x10
c0024b6b:	31 c0                	xor    eax,eax
c0024b6d:	83 c4 0c             	add    esp,0xc
c0024b70:	c3                   	ret    
c0024b71:	90                   	nop

c0024b72 <SATA::powerSaving(PowerSavingLevel)>:
c0024b72:	c3                   	ret    
c0024b73:	90                   	nop

c0024b74 <SATA::open(int, int, void*)>:
c0024b74:	56                   	push   esi
c0024b75:	53                   	push   ebx
c0024b76:	50                   	push   eax
c0024b77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b7f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b89:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b8f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ba7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024bad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024bb4:	e8 27 b3 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024bb9:	89 c6                	mov    esi,eax
c0024bbb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bc1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bc7:	e8 14 b3 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024bcc:	39 c6                	cmp    esi,eax
c0024bce:	74 10                	je     c0024be0 <SATA::open(int, int, void*)+0x6c>
c0024bd0:	83 ec 0c             	sub    esp,0xc
c0024bd3:	68 c4 cd 02 c0       	push   0xc002cdc4
c0024bd8:	e8 a0 59 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0024bdd:	83 c4 10             	add    esp,0x10
c0024be0:	83 ec 0c             	sub    esp,0xc
c0024be3:	6a 02                	push   0x2
c0024be5:	e8 91 cf fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0024bea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bf0:	e8 21 d2 fe ff       	call   c0011e16 <Virt::getAKernelVAS()>
c0024bf5:	6a 03                	push   0x3
c0024bf7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bfd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c03:	50                   	push   eax
c0024c04:	e8 5f d7 fe ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c09:	83 c4 14             	add    esp,0x14
c0024c0c:	53                   	push   ebx
c0024c0d:	e8 78 fb fe ff       	call   c001478a <PhysicalDisk::startCache()>
c0024c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c15:	e8 e6 1c ff ff       	call   c0016900 <createPartitionsForDisk(PhysicalDisk*)>
c0024c1a:	83 c4 14             	add    esp,0x14
c0024c1d:	31 c0                	xor    eax,eax
c0024c1f:	5b                   	pop    ebx
c0024c20:	5e                   	pop    esi
c0024c21:	c3                   	ret    

c0024c22 <SATA::SATA()>:
c0024c22:	83 ec 0c             	sub    esp,0xc
c0024c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c29:	83 ec 04             	sub    esp,0x4
c0024c2c:	68 00 02 00 00       	push   0x200
c0024c31:	68 d8 cd 02 c0       	push   0xc002cdd8
c0024c36:	50                   	push   eax
c0024c37:	e8 e6 fa fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c3c:	83 c4 10             	add    esp,0x10
c0024c3f:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0024c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c48:	89 10                	mov    DWORD PTR [eax],edx
c0024c4a:	90                   	nop
c0024c4b:	83 c4 0c             	add    esp,0xc
c0024c4e:	c3                   	ret    
c0024c4f:	90                   	nop

c0024c50 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c50:	55                   	push   ebp
c0024c51:	57                   	push   edi
c0024c52:	56                   	push   esi
c0024c53:	53                   	push   ebx
c0024c54:	83 ec 2c             	sub    esp,0x2c
c0024c57:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c5b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c63:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c67:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c6b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c74:	7e 10                	jle    c0024c86 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c76:	83 ec 0c             	sub    esp,0xc
c0024c79:	68 e8 cd 02 c0       	push   0xc002cde8
c0024c7e:	e8 fa 58 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0024c83:	83 c4 10             	add    esp,0x10
c0024c86:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c8c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c9c:	89 f0                	mov    eax,esi
c0024c9e:	c1 e0 07             	shl    eax,0x7
c0024ca1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ca5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024caf:	53                   	push   ebx
c0024cb0:	8d 46 02             	lea    eax,[esi+0x2]
c0024cb3:	53                   	push   ebx
c0024cb4:	c1 e0 07             	shl    eax,0x7
c0024cb7:	bb 01 00 00 00       	mov    ebx,0x1
c0024cbc:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cc0:	50                   	push   eax
c0024cc1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cc7:	e8 aa ef ff ff       	call   c0023c76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ccc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cd0:	83 c4 10             	add    esp,0x10
c0024cd3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cd8:	0f 84 ce 01 00 00    	je     c0024eac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ce2:	c1 e0 09             	shl    eax,0x9
c0024ce5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024cea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024cee:	74 17                	je     c0024d07 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024cf0:	51                   	push   ecx
c0024cf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024cf5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024cf9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024cff:	e8 40 ba fd ff       	call   c0000744 <memcpy>
c0024d04:	83 c4 10             	add    esp,0x10
c0024d07:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d0d:	8d 46 02             	lea    eax,[esi+0x2]
c0024d10:	c1 e0 07             	shl    eax,0x7
c0024d13:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d19:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d1f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d29:	c1 e1 05             	shl    ecx,0x5
c0024d2c:	01 c8                	add    eax,ecx
c0024d2e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d32:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d34:	83 e1 01             	and    ecx,0x1
c0024d37:	83 e3 bf             	and    ebx,0xffffffbf
c0024d3a:	c1 e1 06             	shl    ecx,0x6
c0024d3d:	09 d9                	or     ecx,ebx
c0024d3f:	88 08                	mov    BYTE PTR [eax],cl
c0024d41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d43:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d49:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d4f:	89 08                	mov    DWORD PTR [eax],ecx
c0024d51:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d57:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d5d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d63:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d66:	52                   	push   edx
c0024d67:	68 90 00 00 00       	push   0x90
c0024d6c:	6a 00                	push   0x0
c0024d6e:	53                   	push   ebx
c0024d6f:	e8 04 ba fd ff       	call   c0000778 <memset>
c0024d74:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d7a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d7e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d84:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d8c:	83 c4 10             	add    esp,0x10
c0024d8f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d92:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d98:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d9e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024da3:	09 c8                	or     eax,ecx
c0024da5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dae:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024db5:	66 25 00 7f          	and    ax,0x7f00
c0024db9:	66 0d 27 80          	or     ax,0x8027
c0024dbd:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024dc2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024dc5:	19 c0                	sbb    eax,eax
c0024dc7:	83 e0 f0             	and    eax,0xfffffff0
c0024dca:	83 c0 35             	add    eax,0x35
c0024dcd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024dd0:	89 f8                	mov    eax,edi
c0024dd2:	c1 e8 10             	shr    eax,0x10
c0024dd5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dd8:	89 f8                	mov    eax,edi
c0024dda:	c1 e8 18             	shr    eax,0x18
c0024ddd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024de0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024de4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024deb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024dee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024df2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024df6:	89 f3                	mov    ebx,esi
c0024df8:	31 c0                	xor    eax,eax
c0024dfa:	c1 e3 07             	shl    ebx,0x7
c0024dfd:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e01:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e07:	80 e1 88             	and    cl,0x88
c0024e0a:	74 0a                	je     c0024e16 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e11:	74 0a                	je     c0024e1d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e13:	40                   	inc    eax
c0024e14:	eb eb                	jmp    c0024e01 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e16:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e1b:	75 0a                	jne    c0024e27 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e1d:	83 ec 0c             	sub    esp,0xc
c0024e20:	68 21 ce 02 c0       	push   0xc002ce21
c0024e25:	eb 56                	jmp    c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e27:	b8 01 00 00 00       	mov    eax,0x1
c0024e2c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e30:	c1 e6 07             	shl    esi,0x7
c0024e33:	d3 e0                	shl    eax,cl
c0024e35:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e39:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e3f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e45:	85 c8                	test   eax,ecx
c0024e47:	74 20                	je     c0024e69 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e49:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e4f:	0f ba e1 1e          	bt     ecx,0x1e
c0024e53:	73 ea                	jae    c0024e3f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e55:	83 ec 0c             	sub    esp,0xc
c0024e58:	31 db                	xor    ebx,ebx
c0024e5a:	68 2f ce 02 c0       	push   0xc002ce2f
c0024e5f:	e8 19 57 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0024e64:	83 c4 10             	add    esp,0x10
c0024e67:	eb 43                	jmp    c0024eac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e69:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e6f:	0f ba e0 1e          	bt     eax,0x1e
c0024e73:	73 17                	jae    c0024e8c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e75:	83 ec 0c             	sub    esp,0xc
c0024e78:	68 2f ce 02 c0       	push   0xc002ce2f
c0024e7d:	e8 fb 56 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0024e82:	bb 01 00 00 00       	mov    ebx,0x1
c0024e87:	83 c4 10             	add    esp,0x10
c0024e8a:	eb 20                	jmp    c0024eac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e8c:	31 db                	xor    ebx,ebx
c0024e8e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e93:	75 17                	jne    c0024eac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e95:	50                   	push   eax
c0024e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e9a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ea0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024ea4:	e8 9b b8 fd ff       	call   c0000744 <memcpy>
c0024ea9:	83 c4 10             	add    esp,0x10
c0024eac:	83 c4 2c             	add    esp,0x2c
c0024eaf:	89 d8                	mov    eax,ebx
c0024eb1:	5b                   	pop    ebx
c0024eb2:	5e                   	pop    esi
c0024eb3:	5f                   	pop    edi
c0024eb4:	5d                   	pop    ebp
c0024eb5:	c3                   	ret    

c0024eb6 <SATA::read(unsigned long long, int, void*)>:
c0024eb6:	57                   	push   edi
c0024eb7:	b8 04 00 00 00       	mov    eax,0x4
c0024ebc:	56                   	push   esi
c0024ebd:	53                   	push   ebx
c0024ebe:	83 ec 10             	sub    esp,0x10
c0024ec1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ec5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ec9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ecc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ed0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ed4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024eda:	77 3b                	ja     c0024f17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024edc:	b8 06 00 00 00       	mov    eax,0x6
c0024ee1:	85 d2                	test   edx,edx
c0024ee3:	74 32                	je     c0024f17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ee5:	50                   	push   eax
c0024ee6:	50                   	push   eax
c0024ee7:	6a 00                	push   0x0
c0024ee9:	52                   	push   edx
c0024eea:	53                   	push   ebx
c0024eeb:	57                   	push   edi
c0024eec:	56                   	push   esi
c0024eed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ef1:	e8 5a fd ff ff       	call   c0024c50 <SATA::access(unsigned long long, int, void*, bool)>
c0024ef6:	83 c4 20             	add    esp,0x20
c0024ef9:	85 c0                	test   eax,eax
c0024efb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024eff:	75 11                	jne    c0024f12 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f01:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c0024f07:	e8 c4 ba fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f10:	eb 05                	jmp    c0024f17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f12:	b8 01 00 00 00       	mov    eax,0x1
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	5b                   	pop    ebx
c0024f1b:	5e                   	pop    esi
c0024f1c:	5f                   	pop    edi
c0024f1d:	c3                   	ret    

c0024f1e <SATA::write(unsigned long long, int, void*)>:
c0024f1e:	55                   	push   ebp
c0024f1f:	b8 04 00 00 00       	mov    eax,0x4
c0024f24:	57                   	push   edi
c0024f25:	56                   	push   esi
c0024f26:	53                   	push   ebx
c0024f27:	83 ec 1c             	sub    esp,0x1c
c0024f2a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f2e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f32:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f39:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f3d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f43:	77 56                	ja     c0024f9b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f45:	b8 06 00 00 00       	mov    eax,0x6
c0024f4a:	85 ff                	test   edi,edi
c0024f4c:	74 4d                	je     c0024f9b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f4e:	89 ee                	mov    esi,ebp
c0024f50:	c1 e6 09             	shl    esi,0x9
c0024f53:	01 fe                	add    esi,edi
c0024f55:	89 c8                	mov    eax,ecx
c0024f57:	89 da                	mov    edx,ebx
c0024f59:	83 c0 01             	add    eax,0x1
c0024f5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f60:	83 d2 00             	adc    edx,0x0
c0024f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f67:	50                   	push   eax
c0024f68:	50                   	push   eax
c0024f69:	6a 01                	push   0x1
c0024f6b:	57                   	push   edi
c0024f6c:	81 c7 00 02 00 00    	add    edi,0x200
c0024f72:	6a 01                	push   0x1
c0024f74:	53                   	push   ebx
c0024f75:	51                   	push   ecx
c0024f76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f7a:	e8 d1 fc ff ff       	call   c0024c50 <SATA::access(unsigned long long, int, void*, bool)>
c0024f7f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f83:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f87:	83 c4 20             	add    esp,0x20
c0024f8a:	39 f7                	cmp    edi,esi
c0024f8c:	75 c7                	jne    c0024f55 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f8e:	01 2d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebp
c0024f94:	e8 37 ba fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024f99:	31 c0                	xor    eax,eax
c0024f9b:	83 c4 1c             	add    esp,0x1c
c0024f9e:	5b                   	pop    ebx
c0024f9f:	5e                   	pop    esi
c0024fa0:	5f                   	pop    edi
c0024fa1:	5d                   	pop    ebp
c0024fa2:	c3                   	ret    
c0024fa3:	90                   	nop

c0024fa4 <SATAPI::write(unsigned long long, int, void*)>:
c0024fa4:	b8 03 00 00 00       	mov    eax,0x3
c0024fa9:	c3                   	ret    

c0024faa <SATAPI::close(int, int, void*)>:
c0024faa:	83 ec 0c             	sub    esp,0xc
c0024fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fb7:	85 c0                	test   eax,eax
c0024fb9:	74 0c                	je     c0024fc7 <SATAPI::close(int, int, void*)+0x1d>
c0024fbb:	83 ec 0c             	sub    esp,0xc
c0024fbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fc0:	50                   	push   eax
c0024fc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fc4:	83 c4 10             	add    esp,0x10
c0024fc7:	31 c0                	xor    eax,eax
c0024fc9:	83 c4 0c             	add    esp,0xc
c0024fcc:	c3                   	ret    
c0024fcd:	90                   	nop

c0024fce <SATAPI::SATAPI()>:
c0024fce:	83 ec 0c             	sub    esp,0xc
c0024fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd5:	83 ec 04             	sub    esp,0x4
c0024fd8:	68 00 08 00 00       	push   0x800
c0024fdd:	68 78 ce 02 c0       	push   0xc002ce78
c0024fe2:	50                   	push   eax
c0024fe3:	e8 3a f7 fe ff       	call   c0014722 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fe8:	83 c4 10             	add    esp,0x10
c0024feb:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c0024ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff4:	89 10                	mov    DWORD PTR [eax],edx
c0024ff6:	90                   	nop
c0024ff7:	83 c4 0c             	add    esp,0xc
c0024ffa:	c3                   	ret    
c0024ffb:	90                   	nop

c0024ffc <SATAPI::diskRemoved()>:
c0024ffc:	83 ec 18             	sub    esp,0x18
c0024fff:	68 84 ce 02 c0       	push   0xc002ce84
c0025004:	e8 cf de fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0025009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002500d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025014:	83 c4 1c             	add    esp,0x1c
c0025017:	c3                   	ret    

c0025018 <SATAPI::diskInserted()>:
c0025018:	53                   	push   ebx
c0025019:	83 ec 14             	sub    esp,0x14
c002501c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025020:	68 9b ce 02 c0       	push   0xc002ce9b
c0025025:	e8 ae de fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c002502a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025031:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025034:	e8 51 f7 fe ff       	call   c001478a <PhysicalDisk::startCache()>
c0025039:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002503d:	83 c4 18             	add    esp,0x18
c0025040:	5b                   	pop    ebx
c0025041:	e9 ba 18 ff ff       	jmp    c0016900 <createPartitionsForDisk(PhysicalDisk*)>

c0025046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025046:	55                   	push   ebp
c0025047:	57                   	push   edi
c0025048:	56                   	push   esi
c0025049:	53                   	push   ebx
c002504a:	83 ec 24             	sub    esp,0x24
c002504d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025051:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025055:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002505b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002505f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025063:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025069:	8d 5f 02             	lea    ebx,[edi+0x2]
c002506c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025072:	c1 e3 07             	shl    ebx,0x7
c0025075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025079:	89 f8                	mov    eax,edi
c002507b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002507f:	c1 e0 07             	shl    eax,0x7
c0025082:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025086:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002508a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025094:	53                   	push   ebx
c0025095:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002509b:	e8 d6 eb ff ff       	call   c0023c76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250a4:	83 c4 10             	add    esp,0x10
c00250a7:	b8 01 00 00 00       	mov    eax,0x1
c00250ac:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250b1:	0f 84 8a 01 00 00    	je     c0025241 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250b7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250bf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250c5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250cf:	c1 e1 05             	shl    ecx,0x5
c00250d2:	01 c8                	add    eax,ecx
c00250d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250d6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250dc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250e2:	89 08                	mov    DWORD PTR [eax],ecx
c00250e4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250ea:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250f0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250f6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250f9:	52                   	push   edx
c00250fa:	68 90 00 00 00       	push   0x90
c00250ff:	6a 00                	push   0x0
c0025101:	53                   	push   ebx
c0025102:	e8 71 b6 fd ff       	call   c0000778 <memset>
c0025107:	83 c4 0c             	add    esp,0xc
c002510a:	8d 43 40             	lea    eax,[ebx+0x40]
c002510d:	6a 0c                	push   0xc
c002510f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025113:	50                   	push   eax
c0025114:	e8 2b b6 fd ff       	call   c0000744 <memcpy>
c0025119:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002511f:	89 ea                	mov    edx,ebp
c0025121:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025127:	c1 ea 18             	shr    edx,0x18
c002512a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002512e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025131:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025134:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025138:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002513e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025144:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025149:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002514d:	09 c8                	or     eax,ecx
c002514f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025153:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025159:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002515c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025163:	66 25 00 7f          	and    ax,0x7f00
c0025167:	66 0d 27 80          	or     ax,0x8027
c002516b:	66 89 03             	mov    WORD PTR [ebx],ax
c002516e:	89 e8                	mov    eax,ebp
c0025170:	c1 e8 10             	shr    eax,0x10
c0025173:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025176:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002517a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002517d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025181:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025184:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025188:	83 c4 10             	add    esp,0x10
c002518b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002518f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025193:	31 c0                	xor    eax,eax
c0025195:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002519b:	80 e1 88             	and    cl,0x88
c002519e:	74 0a                	je     c00251aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251a5:	74 0a                	je     c00251b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251a7:	40                   	inc    eax
c00251a8:	eb eb                	jmp    c0025195 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00251aa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251af:	75 0f                	jne    c00251c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251b1:	83 ec 0c             	sub    esp,0xc
c00251b4:	68 21 ce 02 c0       	push   0xc002ce21
c00251b9:	e8 bf 53 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00251be:	eb 3a                	jmp    c00251fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251c0:	b8 01 00 00 00       	mov    eax,0x1
c00251c5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251c9:	c1 e7 07             	shl    edi,0x7
c00251cc:	d3 e0                	shl    eax,cl
c00251ce:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251d1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251d7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251dd:	85 d0                	test   eax,edx
c00251df:	74 23                	je     c0025204 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251e1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251e7:	0f ba e2 1e          	bt     edx,0x1e
c00251eb:	73 ea                	jae    c00251d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251ed:	83 ec 0c             	sub    esp,0xc
c00251f0:	68 b3 ce 02 c0       	push   0xc002ceb3
c00251f5:	e8 de dc fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00251fa:	83 c4 10             	add    esp,0x10
c00251fd:	b8 01 00 00 00       	mov    eax,0x1
c0025202:	eb 3d                	jmp    c0025241 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025204:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002520a:	0f ba e0 1e          	bt     eax,0x1e
c002520e:	73 0a                	jae    c002521a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	68 c6 ce 02 c0       	push   0xc002cec6
c0025218:	eb db                	jmp    c00251f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002521a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002521f:	74 1e                	je     c002523f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025221:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025226:	74 17                	je     c002523f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025228:	50                   	push   eax
c0025229:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002522d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025233:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025237:	e8 08 b5 fd ff       	call   c0000744 <memcpy>
c002523c:	83 c4 10             	add    esp,0x10
c002523f:	31 c0                	xor    eax,eax
c0025241:	83 c4 1c             	add    esp,0x1c
c0025244:	5b                   	pop    ebx
c0025245:	5e                   	pop    esi
c0025246:	5f                   	pop    edi
c0025247:	5d                   	pop    ebp
c0025248:	c3                   	ret    
c0025249:	90                   	nop

c002524a <SATAPI::eject()>:
c002524a:	57                   	push   edi
c002524b:	b9 03 00 00 00       	mov    ecx,0x3
c0025250:	53                   	push   ebx
c0025251:	83 ec 14             	sub    esp,0x14
c0025254:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025258:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002525c:	fc                   	cld    
c002525d:	31 c0                	xor    eax,eax
c002525f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025261:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025266:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002526b:	50                   	push   eax
c002526c:	6a 00                	push   0x0
c002526e:	6a 00                	push   0x0
c0025270:	6a 00                	push   0x0
c0025272:	6a 00                	push   0x0
c0025274:	6a 02                	push   0x2
c0025276:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002527a:	50                   	push   eax
c002527b:	53                   	push   ebx
c002527c:	e8 c5 fd ff ff       	call   c0025046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025281:	83 c4 14             	add    esp,0x14
c0025284:	53                   	push   ebx
c0025285:	e8 72 fd ff ff       	call   c0024ffc <SATAPI::diskRemoved()>
c002528a:	83 c4 24             	add    esp,0x24
c002528d:	31 c0                	xor    eax,eax
c002528f:	5b                   	pop    ebx
c0025290:	5f                   	pop    edi
c0025291:	c3                   	ret    

c0025292 <SATAPI::detectMedia()>:
c0025292:	56                   	push   esi
c0025293:	53                   	push   ebx
c0025294:	83 ec 28             	sub    esp,0x28
c0025297:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002529b:	6a 0c                	push   0xc
c002529d:	6a 00                	push   0x0
c002529f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252a3:	56                   	push   esi
c00252a4:	e8 cf b4 fd ff       	call   c0000778 <memset>
c00252a9:	83 c4 0c             	add    esp,0xc
c00252ac:	6a 00                	push   0x0
c00252ae:	6a 00                	push   0x0
c00252b0:	6a 00                	push   0x0
c00252b2:	6a 00                	push   0x0
c00252b4:	6a 00                	push   0x0
c00252b6:	56                   	push   esi
c00252b7:	53                   	push   ebx
c00252b8:	e8 89 fd ff ff       	call   c0025046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252bd:	83 c4 1c             	add    esp,0x1c
c00252c0:	6a 0c                	push   0xc
c00252c2:	6a 00                	push   0x0
c00252c4:	56                   	push   esi
c00252c5:	e8 ae b4 fd ff       	call   c0000778 <memset>
c00252ca:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252cf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252d4:	83 c4 0c             	add    esp,0xc
c00252d7:	6a 01                	push   0x1
c00252d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252dd:	50                   	push   eax
c00252de:	6a 00                	push   0x0
c00252e0:	6a 00                	push   0x0
c00252e2:	6a 12                	push   0x12
c00252e4:	56                   	push   esi
c00252e5:	53                   	push   ebx
c00252e6:	e8 5b fd ff ff       	call   c0025046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252eb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252ef:	83 c4 20             	add    esp,0x20
c00252f2:	83 e0 7f             	and    eax,0x7f
c00252f5:	3c 70                	cmp    al,0x70
c00252f7:	74 15                	je     c002530e <SATAPI::detectMedia()+0x7c>
c00252f9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025300:	75 0c                	jne    c002530e <SATAPI::detectMedia()+0x7c>
c0025302:	83 ec 0c             	sub    esp,0xc
c0025305:	53                   	push   ebx
c0025306:	e8 0d fd ff ff       	call   c0025018 <SATAPI::diskInserted()>
c002530b:	83 c4 10             	add    esp,0x10
c002530e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025312:	83 e0 0f             	and    eax,0xf
c0025315:	3c 02                	cmp    al,0x2
c0025317:	75 1b                	jne    c0025334 <SATAPI::detectMedia()+0xa2>
c0025319:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002531e:	75 2d                	jne    c002534d <SATAPI::detectMedia()+0xbb>
c0025320:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025327:	74 24                	je     c002534d <SATAPI::detectMedia()+0xbb>
c0025329:	83 ec 0c             	sub    esp,0xc
c002532c:	53                   	push   ebx
c002532d:	e8 ca fc ff ff       	call   c0024ffc <SATAPI::diskRemoved()>
c0025332:	eb 16                	jmp    c002534a <SATAPI::detectMedia()+0xb8>
c0025334:	84 c0                	test   al,al
c0025336:	75 15                	jne    c002534d <SATAPI::detectMedia()+0xbb>
c0025338:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002533f:	75 0c                	jne    c002534d <SATAPI::detectMedia()+0xbb>
c0025341:	83 ec 0c             	sub    esp,0xc
c0025344:	53                   	push   ebx
c0025345:	e8 ce fc ff ff       	call   c0025018 <SATAPI::diskInserted()>
c002534a:	83 c4 10             	add    esp,0x10
c002534d:	83 c4 24             	add    esp,0x24
c0025350:	5b                   	pop    ebx
c0025351:	5e                   	pop    esi
c0025352:	c3                   	ret    
c0025353:	90                   	nop

c0025354 <SATAPI::open(int, int, void*)>:
c0025354:	56                   	push   esi
c0025355:	53                   	push   ebx
c0025356:	50                   	push   eax
c0025357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002535b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002535f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025369:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002536f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002537d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025387:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002538d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025394:	e8 47 ab fe ff       	call   c000fee0 <Phys::allocatePage()>
c0025399:	89 c6                	mov    esi,eax
c002539b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253a1:	81 c6 00 10 00 00    	add    esi,0x1000
c00253a7:	e8 34 ab fe ff       	call   c000fee0 <Phys::allocatePage()>
c00253ac:	39 c6                	cmp    esi,eax
c00253ae:	74 10                	je     c00253c0 <SATAPI::open(int, int, void*)+0x6c>
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	68 db ce 02 c0       	push   0xc002cedb
c00253b8:	e8 c0 51 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00253bd:	83 c4 10             	add    esp,0x10
c00253c0:	83 ec 0c             	sub    esp,0xc
c00253c3:	6a 02                	push   0x2
c00253c5:	e8 b1 c7 fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c00253ca:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253d0:	e8 41 ca fe ff       	call   c0011e16 <Virt::getAKernelVAS()>
c00253d5:	6a 03                	push   0x3
c00253d7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253dd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253e3:	50                   	push   eax
c00253e4:	e8 7f cf fe ff       	call   c0012368 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253f0:	83 c4 14             	add    esp,0x14
c00253f3:	53                   	push   ebx
c00253f4:	e8 99 fe ff ff       	call   c0025292 <SATAPI::detectMedia()>
c00253f9:	83 c4 14             	add    esp,0x14
c00253fc:	31 c0                	xor    eax,eax
c00253fe:	5b                   	pop    ebx
c00253ff:	5e                   	pop    esi
c0025400:	c3                   	ret    
c0025401:	90                   	nop

c0025402 <SATAPI::read(unsigned long long, int, void*)>:
c0025402:	55                   	push   ebp
c0025403:	57                   	push   edi
c0025404:	56                   	push   esi
c0025405:	53                   	push   ebx
c0025406:	83 ec 1c             	sub    esp,0x1c
c0025409:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002540d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025411:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025415:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002541c:	74 19                	je     c0025437 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002541e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025423:	7e 2e                	jle    c0025453 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025425:	83 ec 0c             	sub    esp,0xc
c0025428:	68 f1 ce 02 c0       	push   0xc002cef1
c002542d:	e8 4b 51 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0025432:	83 c4 10             	add    esp,0x10
c0025435:	eb 1c                	jmp    c0025453 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025437:	83 ec 0c             	sub    esp,0xc
c002543a:	55                   	push   ebp
c002543b:	e8 52 fe ff ff       	call   c0025292 <SATAPI::detectMedia()>
c0025440:	83 c4 10             	add    esp,0x10
c0025443:	b8 02 00 00 00       	mov    eax,0x2
c0025448:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002544f:	75 cd                	jne    c002541e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025451:	eb 49                	jmp    c002549c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025453:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025457:	b9 03 00 00 00       	mov    ecx,0x3
c002545c:	fc                   	cld    
c002545d:	31 c0                	xor    eax,eax
c002545f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025461:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025466:	89 d8                	mov    eax,ebx
c0025468:	86 e0                	xchg   al,ah
c002546a:	c1 c0 10             	rol    eax,0x10
c002546d:	86 e0                	xchg   al,ah
c002546f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025473:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025477:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002547b:	50                   	push   eax
c002547c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025480:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025484:	56                   	push   esi
c0025485:	53                   	push   ebx
c0025486:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002548a:	c1 e0 0b             	shl    eax,0xb
c002548d:	50                   	push   eax
c002548e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025492:	50                   	push   eax
c0025493:	55                   	push   ebp
c0025494:	e8 ad fb ff ff       	call   c0025046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025499:	83 c4 20             	add    esp,0x20
c002549c:	83 c4 1c             	add    esp,0x1c
c002549f:	5b                   	pop    ebx
c00254a0:	5e                   	pop    esi
c00254a1:	5f                   	pop    edi
c00254a2:	5d                   	pop    ebp
c00254a3:	c3                   	ret    

c00254a4 <AVX::open(int, int, void*)>:
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	e8 3c 11 00 00       	call   c00265e8 <avxInit>
c00254ac:	b8 00 00 00 00       	mov    eax,0x0
c00254b1:	83 c4 0c             	add    esp,0xc
c00254b4:	c3                   	ret    
c00254b5:	90                   	nop

c00254b6 <AVX::close(int, int, void*)>:
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	e8 2b 11 00 00       	call   c00265e9 <avxClose>
c00254be:	b8 00 00 00 00       	mov    eax,0x0
c00254c3:	83 c4 0c             	add    esp,0xc
c00254c6:	c3                   	ret    
c00254c7:	90                   	nop

c00254c8 <AVX::available()>:
c00254c8:	83 ec 0c             	sub    esp,0xc
c00254cb:	e8 10 11 00 00       	call   c00265e0 <avxDetect>
c00254d0:	85 c0                	test   eax,eax
c00254d2:	0f 95 c0             	setne  al
c00254d5:	83 c4 0c             	add    esp,0xc
c00254d8:	c3                   	ret    
c00254d9:	90                   	nop

c00254da <AVX::save(void*)>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e1:	83 ec 0c             	sub    esp,0xc
c00254e4:	50                   	push   eax
c00254e5:	e8 fc 10 00 00       	call   c00265e6 <avxSave>
c00254ea:	83 c4 10             	add    esp,0x10
c00254ed:	90                   	nop
c00254ee:	83 c4 0c             	add    esp,0xc
c00254f1:	c3                   	ret    

c00254f2 <AVX::load(void*)>:
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254f9:	83 ec 0c             	sub    esp,0xc
c00254fc:	50                   	push   eax
c00254fd:	e8 e5 10 00 00       	call   c00265e7 <avxLoad>
c0025502:	83 c4 10             	add    esp,0x10
c0025505:	90                   	nop
c0025506:	83 c4 0c             	add    esp,0xc
c0025509:	c3                   	ret    

c002550a <AVX::AVX()>:
c002550a:	83 ec 0c             	sub    esp,0xc
c002550d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025511:	83 ec 08             	sub    esp,0x8
c0025514:	68 54 cf 02 c0       	push   0xc002cf54
c0025519:	50                   	push   eax
c002551a:	e8 e1 f2 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c002551f:	83 c4 10             	add    esp,0x10
c0025522:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	90                   	nop
c002552e:	83 c4 0c             	add    esp,0xc
c0025531:	c3                   	ret    

c0025532 <MMX::available()>:
c0025532:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025537:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002553d:	83 e0 20             	and    eax,0x20
c0025540:	84 c0                	test   al,al
c0025542:	0f 95 c0             	setne  al
c0025545:	c3                   	ret    

c0025546 <MMX::open(int, int, void*)>:
c0025546:	83 ec 0c             	sub    esp,0xc
c0025549:	e8 1e 11 00 00       	call   c002666c <x87Init>
c002554e:	b8 00 00 00 00       	mov    eax,0x0
c0025553:	83 c4 0c             	add    esp,0xc
c0025556:	c3                   	ret    
c0025557:	90                   	nop

c0025558 <MMX::close(int, int, void*)>:
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	e8 26 11 00 00       	call   c0026686 <x87Close>
c0025560:	b8 00 00 00 00       	mov    eax,0x0
c0025565:	83 c4 0c             	add    esp,0xc
c0025568:	c3                   	ret    
c0025569:	90                   	nop

c002556a <MMX::save(void*)>:
c002556a:	83 ec 0c             	sub    esp,0xc
c002556d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025571:	83 ec 0c             	sub    esp,0xc
c0025574:	50                   	push   eax
c0025575:	e8 e7 10 00 00       	call   c0026661 <x87Save>
c002557a:	83 c4 10             	add    esp,0x10
c002557d:	90                   	nop
c002557e:	83 c4 0c             	add    esp,0xc
c0025581:	c3                   	ret    

c0025582 <MMX::load(void*)>:
c0025582:	83 ec 0c             	sub    esp,0xc
c0025585:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025589:	83 ec 0c             	sub    esp,0xc
c002558c:	50                   	push   eax
c002558d:	e8 d5 10 00 00       	call   c0026667 <x87Load>
c0025592:	83 c4 10             	add    esp,0x10
c0025595:	90                   	nop
c0025596:	83 c4 0c             	add    esp,0xc
c0025599:	c3                   	ret    

c002559a <MMX::MMX()>:
c002559a:	83 ec 0c             	sub    esp,0xc
c002559d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a1:	83 ec 08             	sub    esp,0x8
c00255a4:	68 94 cf 02 c0       	push   0xc002cf94
c00255a9:	50                   	push   eax
c00255aa:	e8 51 f2 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c00255af:	83 c4 10             	add    esp,0x10
c00255b2:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c00255b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bb:	89 10                	mov    DWORD PTR [eax],edx
c00255bd:	90                   	nop
c00255be:	83 c4 0c             	add    esp,0xc
c00255c1:	c3                   	ret    

c00255c2 <SSE::open(int, int, void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	e8 5a 10 00 00       	call   c0026624 <sseInit>
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	83 c4 0c             	add    esp,0xc
c00255d2:	c3                   	ret    
c00255d3:	90                   	nop

c00255d4 <SSE::close(int, int, void*)>:
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	e8 58 10 00 00       	call   c0026634 <sseClose>
c00255dc:	b8 00 00 00 00       	mov    eax,0x0
c00255e1:	83 c4 0c             	add    esp,0xc
c00255e4:	c3                   	ret    
c00255e5:	90                   	nop

c00255e6 <SSE::available()>:
c00255e6:	83 ec 1c             	sub    esp,0x1c
c00255e9:	e8 12 10 00 00       	call   c0026600 <absolutelyNoChanceInHell>
c00255ee:	85 c0                	test   eax,eax
c00255f0:	0f 95 c0             	setne  al
c00255f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255fb:	83 c4 1c             	add    esp,0x1c
c00255fe:	c3                   	ret    
c00255ff:	90                   	nop

c0025600 <SSE::save(void*)>:
c0025600:	83 ec 0c             	sub    esp,0xc
c0025603:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025607:	83 ec 0c             	sub    esp,0xc
c002560a:	50                   	push   eax
c002560b:	e8 08 10 00 00       	call   c0026618 <sseSave>
c0025610:	83 c4 10             	add    esp,0x10
c0025613:	90                   	nop
c0025614:	83 c4 0c             	add    esp,0xc
c0025617:	c3                   	ret    

c0025618 <SSE::load(void*)>:
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002561f:	83 ec 0c             	sub    esp,0xc
c0025622:	50                   	push   eax
c0025623:	e8 f6 0f 00 00       	call   c002661e <sseLoad>
c0025628:	83 c4 10             	add    esp,0x10
c002562b:	90                   	nop
c002562c:	83 c4 0c             	add    esp,0xc
c002562f:	c3                   	ret    

c0025630 <SSE::SSE()>:
c0025630:	83 ec 0c             	sub    esp,0xc
c0025633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025637:	83 ec 08             	sub    esp,0x8
c002563a:	68 d4 cf 02 c0       	push   0xc002cfd4
c002563f:	50                   	push   eax
c0025640:	e8 bb f1 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c0025645:	83 c4 10             	add    esp,0x10
c0025648:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c002564d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025651:	89 10                	mov    DWORD PTR [eax],edx
c0025653:	90                   	nop
c0025654:	83 c4 0c             	add    esp,0xc
c0025657:	c3                   	ret    

c0025658 <x87::open(int, int, void*)>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	e8 0c 10 00 00       	call   c002666c <x87Init>
c0025660:	b8 00 00 00 00       	mov    eax,0x0
c0025665:	83 c4 0c             	add    esp,0xc
c0025668:	c3                   	ret    
c0025669:	90                   	nop

c002566a <x87::close(int, int, void*)>:
c002566a:	83 ec 0c             	sub    esp,0xc
c002566d:	e8 14 10 00 00       	call   c0026686 <x87Close>
c0025672:	b8 00 00 00 00       	mov    eax,0x0
c0025677:	83 c4 0c             	add    esp,0xc
c002567a:	c3                   	ret    
c002567b:	90                   	nop

c002567c <x87::available()>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	e8 c2 0f 00 00       	call   c0026646 <x87Detect>
c0025684:	85 c0                	test   eax,eax
c0025686:	0f 95 c0             	setne  al
c0025689:	83 c4 0c             	add    esp,0xc
c002568c:	c3                   	ret    
c002568d:	90                   	nop

c002568e <x87::save(void*)>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025695:	83 ec 0c             	sub    esp,0xc
c0025698:	50                   	push   eax
c0025699:	e8 c3 0f 00 00       	call   c0026661 <x87Save>
c002569e:	83 c4 10             	add    esp,0x10
c00256a1:	90                   	nop
c00256a2:	83 c4 0c             	add    esp,0xc
c00256a5:	c3                   	ret    

c00256a6 <x87::load(void*)>:
c00256a6:	83 ec 0c             	sub    esp,0xc
c00256a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ad:	83 ec 0c             	sub    esp,0xc
c00256b0:	50                   	push   eax
c00256b1:	e8 b1 0f 00 00       	call   c0026667 <x87Load>
c00256b6:	83 c4 10             	add    esp,0x10
c00256b9:	90                   	nop
c00256ba:	83 c4 0c             	add    esp,0xc
c00256bd:	c3                   	ret    

c00256be <x87::x87()>:
c00256be:	83 ec 0c             	sub    esp,0xc
c00256c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c5:	83 ec 08             	sub    esp,0x8
c00256c8:	68 14 d0 02 c0       	push   0xc002d014
c00256cd:	50                   	push   eax
c00256ce:	e8 2d f1 fe ff       	call   c0014800 <FPU::FPU(char const*)>
c00256d3:	83 c4 10             	add    esp,0x10
c00256d6:	ba 24 d0 02 c0       	mov    edx,0xc002d024
c00256db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256df:	89 10                	mov    DWORD PTR [eax],edx
c00256e1:	90                   	nop
c00256e2:	83 c4 0c             	add    esp,0xc
c00256e5:	c3                   	ret    

c00256e6 <APIC::disable()>:
c00256e6:	90                   	nop
c00256e7:	c3                   	ret    

c00256e8 <APIC::close(int, int, void*)>:
c00256e8:	55                   	push   ebp
c00256e9:	89 e5                	mov    ebp,esp
c00256eb:	83 ec 08             	sub    esp,0x8
c00256ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00256f3:	83 c0 3c             	add    eax,0x3c
c00256f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256fe:	ff d0                	call   eax
c0025700:	83 c4 10             	add    esp,0x10
c0025703:	b8 00 00 00 00       	mov    eax,0x0
c0025708:	c9                   	leave  
c0025709:	c3                   	ret    

c002570a <IOAPIC::close(int, int, void*)>:
c002570a:	b8 00 00 00 00       	mov    eax,0x0
c002570f:	c3                   	ret    

c0025710 <APIC::io_wait()>:
c0025710:	eb 00                	jmp    c0025712 <APIC::io_wait()+0x2>
c0025712:	eb 00                	jmp    c0025714 <APIC::io_wait()+0x4>
c0025714:	90                   	nop
c0025715:	c3                   	ret    

c0025716 <APIC::getBase()>:
c0025716:	55                   	push   ebp
c0025717:	89 e5                	mov    ebp,esp
c0025719:	83 ec 18             	sub    esp,0x18
c002571c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025721:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025727:	83 e0 08             	and    eax,0x8
c002572a:	84 c0                	test   al,al
c002572c:	75 07                	jne    c0025735 <APIC::getBase()+0x1f>
c002572e:	b8 00 00 00 00       	mov    eax,0x0
c0025733:	eb 21                	jmp    c0025756 <APIC::getBase()+0x40>
c0025735:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002573a:	83 ec 08             	sub    esp,0x8
c002573d:	6a 1b                	push   0x1b
c002573f:	50                   	push   eax
c0025740:	e8 a3 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025745:	83 c4 10             	add    esp,0x10
c0025748:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002574b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002574e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025751:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025756:	c9                   	leave  
c0025757:	c3                   	ret    

c0025758 <APIC::eoi(unsigned char)>:
c0025758:	55                   	push   ebp
c0025759:	89 e5                	mov    ebp,esp
c002575b:	83 ec 28             	sub    esp,0x28
c002575e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025761:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025764:	83 ec 0c             	sub    esp,0xc
c0025767:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002576a:	e8 a7 ff ff ff       	call   c0025716 <APIC::getBase()>
c002576f:	83 c4 10             	add    esp,0x10
c0025772:	05 b0 00 00 00       	add    eax,0xb0
c0025777:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002577a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002577d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025783:	90                   	nop
c0025784:	c9                   	leave  
c0025785:	c3                   	ret    

c0025786 <APIC::open(int, int, void*)>:
c0025786:	55                   	push   ebp
c0025787:	89 e5                	mov    ebp,esp
c0025789:	57                   	push   edi
c002578a:	56                   	push   esi
c002578b:	53                   	push   ebx
c002578c:	83 ec 2c             	sub    esp,0x2c
c002578f:	83 ec 0c             	sub    esp,0xc
c0025792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025795:	e8 7c ff ff ff       	call   c0025716 <APIC::getBase()>
c002579a:	83 c4 10             	add    esp,0x10
c002579d:	89 c2                	mov    edx,eax
c002579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257a8:	0f b6 f8             	movzx  edi,al
c00257ab:	89 d0                	mov    eax,edx
c00257ad:	ba 00 00 00 00       	mov    edx,0x0
c00257b2:	89 c1                	mov    ecx,eax
c00257b4:	80 e5 ff             	and    ch,0xff
c00257b7:	89 cb                	mov    ebx,ecx
c00257b9:	0f b6 f2             	movzx  esi,dl
c00257bc:	89 d8                	mov    eax,ebx
c00257be:	89 f2                	mov    edx,esi
c00257c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257c3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257c6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257ca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257ce:	83 e0 00             	and    eax,0x0
c00257d1:	09 d0                	or     eax,edx
c00257d3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257e0:	8d 50 01             	lea    edx,[eax+0x1]
c00257e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257e6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257ec:	0f b6 d0             	movzx  edx,al
c00257ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f2:	83 c2 08             	add    edx,0x8
c00257f5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257f9:	0f b6 c9             	movzx  ecx,cl
c00257fc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025802:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025806:	83 ec 0c             	sub    esp,0xc
c0025809:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002580c:	e8 05 ff ff ff       	call   c0025716 <APIC::getBase()>
c0025811:	83 c4 10             	add    esp,0x10
c0025814:	05 f0 00 00 00       	add    eax,0xf0
c0025819:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002581c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002581f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025821:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025824:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002582b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025832:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025835:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025838:	89 10                	mov    DWORD PTR [eax],edx
c002583a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025841:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0025846:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025849:	7d 7c                	jge    c00258c7 <APIC::open(int, int, void*)+0x141>
c002584b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002584e:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025855:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025858:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002585b:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025862:	c1 e8 08             	shr    eax,0x8
c0025865:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025869:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002586c:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025873:	c1 e8 18             	shr    eax,0x18
c0025876:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025879:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002587d:	75 40                	jne    c00258bf <APIC::open(int, int, void*)+0x139>
c002587f:	83 ec 0c             	sub    esp,0xc
c0025882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025885:	e8 8c fe ff ff       	call   c0025716 <APIC::getBase()>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025891:	75 07                	jne    c002589a <APIC::open(int, int, void*)+0x114>
c0025893:	ba 60 03 00 00       	mov    edx,0x360
c0025898:	eb 05                	jmp    c002589f <APIC::open(int, int, void*)+0x119>
c002589a:	ba 50 03 00 00       	mov    edx,0x350
c002589f:	01 d0                	add    eax,edx
c00258a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00258ac:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258b3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258b7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258ba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258bd:	89 10                	mov    DWORD PTR [eax],edx
c00258bf:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258c2:	e9 7a ff ff ff       	jmp    c0025841 <APIC::open(int, int, void*)+0xbb>
c00258c7:	b8 00 00 00 00       	mov    eax,0x0
c00258cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258cf:	5b                   	pop    ebx
c00258d0:	5e                   	pop    esi
c00258d1:	5f                   	pop    edi
c00258d2:	5d                   	pop    ebp
c00258d3:	c3                   	ret    

c00258d4 <IOAPIC::IOAPIC()>:
c00258d4:	83 ec 0c             	sub    esp,0xc
c00258d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258db:	83 ec 08             	sub    esp,0x8
c00258de:	68 54 d0 02 c0       	push   0xc002d054
c00258e3:	50                   	push   eax
c00258e4:	e8 05 ec fe ff       	call   c00144ee <Device::Device(char const*)>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c00258f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258f5:	89 10                	mov    DWORD PTR [eax],edx
c00258f7:	90                   	nop
c00258f8:	83 c4 0c             	add    esp,0xc
c00258fb:	c3                   	ret    

c00258fc <APIC::APIC()>:
c00258fc:	53                   	push   ebx
c00258fd:	83 ec 18             	sub    esp,0x18
c0025900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025904:	83 ec 08             	sub    esp,0x8
c0025907:	68 5c d0 02 c0       	push   0xc002d05c
c002590c:	50                   	push   eax
c002590d:	e8 48 f3 fe ff       	call   c0014c5a <InterruptController::InterruptController(char const*)>
c0025912:	83 c4 10             	add    esp,0x10
c0025915:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c002591a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002591e:	89 10                	mov    DWORD PTR [eax],edx
c0025920:	a0 40 27 03 c0       	mov    al,ds:0xc0032740
c0025925:	83 f0 01             	xor    eax,0x1
c0025928:	84 c0                	test   al,al
c002592a:	0f 84 a1 00 00 00    	je     c00259d1 <APIC::APIC()+0xd5>
c0025930:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025935:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c002593a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002593e:	0f 83 86 00 00 00    	jae    c00259ca <APIC::APIC()+0xce>
c0025944:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002594c:	83 ec 0c             	sub    esp,0xc
c002594f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025953:	e8 eb 9e fe ff       	call   c000f843 <malloc>
c0025958:	83 c4 10             	add    esp,0x10
c002595b:	89 c3                	mov    ebx,eax
c002595d:	83 ec 0c             	sub    esp,0xc
c0025960:	53                   	push   ebx
c0025961:	e8 6e ff ff ff       	call   c00258d4 <IOAPIC::IOAPIC()>
c0025966:	83 c4 10             	add    esp,0x10
c0025969:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002596d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025972:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025976:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c002597d:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025982:	40                   	inc    eax
c0025983:	a3 00 27 03 c0       	mov    ds:0xc0032700,eax
c0025988:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002598d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025993:	83 ec 08             	sub    esp,0x8
c0025996:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002599a:	50                   	push   eax
c002599b:	e8 5e e9 fe ff       	call   c00142fe <Device::addChild(Device*)>
c00259a0:	83 c4 10             	add    esp,0x10
c00259a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00259a9:	83 c0 08             	add    eax,0x8
c00259ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259b3:	6a 00                	push   0x0
c00259b5:	6a 00                	push   0x0
c00259b7:	52                   	push   edx
c00259b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259bc:	ff d0                	call   eax
c00259be:	83 c4 10             	add    esp,0x10
c00259c1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259c5:	e9 6b ff ff ff       	jmp    c0025935 <APIC::APIC()+0x39>
c00259ca:	c6 05 40 27 03 c0 01 	mov    BYTE PTR ds:0xc0032740,0x1
c00259d1:	90                   	nop
c00259d2:	83 c4 18             	add    esp,0x18
c00259d5:	5b                   	pop    ebx
c00259d6:	c3                   	ret    
c00259d7:	90                   	nop

c00259d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259d8:	55                   	push   ebp
c00259d9:	89 e5                	mov    ebp,esp
c00259db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259e4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259e7:	72 1d                	jb     c0025a06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259fb:	01 d0                	add    eax,edx
c00259fd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a00:	73 04                	jae    c0025a06 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a02:	b0 01                	mov    al,0x1
c0025a04:	eb 02                	jmp    c0025a08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a06:	b0 00                	mov    al,0x0
c0025a08:	5d                   	pop    ebp
c0025a09:	c3                   	ret    

c0025a0a <IOAPIC::read(int)>:
c0025a0a:	55                   	push   ebp
c0025a0b:	89 e5                	mov    ebp,esp
c0025a0d:	83 ec 10             	sub    esp,0x10
c0025a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a13:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a1f:	0f b6 d0             	movzx  edx,al
c0025a22:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a25:	89 10                	mov    DWORD PTR [eax],edx
c0025a27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a2a:	83 c0 10             	add    eax,0x10
c0025a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a2f:	c9                   	leave  
c0025a30:	c3                   	ret    
c0025a31:	90                   	nop

c0025a32 <IOAPIC::open(int, int, void*)>:
c0025a32:	55                   	push   ebp
c0025a33:	89 e5                	mov    ebp,esp
c0025a35:	57                   	push   edi
c0025a36:	56                   	push   esi
c0025a37:	53                   	push   ebx
c0025a38:	83 ec 0c             	sub    esp,0xc
c0025a3b:	83 ec 0c             	sub    esp,0xc
c0025a3e:	68 87 d0 02 c0       	push   0xc002d087
c0025a43:	e8 90 d4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0025a48:	83 c4 10             	add    esp,0x10
c0025a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a51:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a60:	8b 14 85 60 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf2a0]
c0025a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a79:	8b 14 85 e0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf220]
c0025a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a83:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a95:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a9b:	0f b6 f8             	movzx  edi,al
c0025a9e:	89 d0                	mov    eax,edx
c0025aa0:	ba 00 00 00 00       	mov    edx,0x0
c0025aa5:	89 c1                	mov    ecx,eax
c0025aa7:	80 e5 ff             	and    ch,0xff
c0025aaa:	89 cb                	mov    ebx,ecx
c0025aac:	0f b6 f2             	movzx  esi,dl
c0025aaf:	89 d8                	mov    eax,ebx
c0025ab1:	89 f2                	mov    edx,esi
c0025ab3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ab6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ab9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025abd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ac1:	83 e0 00             	and    eax,0x0
c0025ac4:	09 d0                	or     eax,edx
c0025ac6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ad3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ad6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ad9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025adf:	0f b6 d0             	movzx  edx,al
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	83 c2 08             	add    edx,0x8
c0025ae8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025aec:	0f b6 c9             	movzx  ecx,cl
c0025aef:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025af5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025af9:	83 ec 08             	sub    esp,0x8
c0025afc:	6a 01                	push   0x1
c0025afe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b01:	e8 04 ff ff ff       	call   c0025a0a <IOAPIC::read(int)>
c0025b06:	83 c4 10             	add    esp,0x10
c0025b09:	c1 f8 10             	sar    eax,0x10
c0025b0c:	0f b6 c0             	movzx  eax,al
c0025b0f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b15:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b1b:	b8 00 00 00 00       	mov    eax,0x0
c0025b20:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b23:	5b                   	pop    ebx
c0025b24:	5e                   	pop    esi
c0025b25:	5f                   	pop    edi
c0025b26:	5d                   	pop    ebp
c0025b27:	c3                   	ret    

c0025b28 <IOAPIC::write(int, int)>:
c0025b28:	55                   	push   ebp
c0025b29:	89 e5                	mov    ebp,esp
c0025b2b:	83 ec 10             	sub    esp,0x10
c0025b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b3d:	0f b6 d0             	movzx  edx,al
c0025b40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b43:	89 10                	mov    DWORD PTR [eax],edx
c0025b45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b48:	8d 50 10             	lea    edx,[eax+0x10]
c0025b4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b4e:	89 02                	mov    DWORD PTR [edx],eax
c0025b50:	90                   	nop
c0025b51:	c9                   	leave  
c0025b52:	c3                   	ret    
c0025b53:	90                   	nop

c0025b54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b54:	55                   	push   ebp
c0025b55:	89 e5                	mov    ebp,esp
c0025b57:	53                   	push   ebx
c0025b58:	83 ec 2c             	sub    esp,0x2c
c0025b5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b61:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b64:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b76:	88 d8                	mov    al,bl
c0025b78:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b7b:	88 c8                	mov    al,cl
c0025b7d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b80:	88 d0                	mov    al,dl
c0025b82:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b85:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b89:	83 c0 08             	add    eax,0x8
c0025b8c:	01 c0                	add    eax,eax
c0025b8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b91:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b95:	83 c0 08             	add    eax,0x8
c0025b98:	01 c0                	add    eax,eax
c0025b9a:	40                   	inc    eax
c0025b9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ba1:	50                   	push   eax
c0025ba2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ba5:	e8 60 fe ff ff       	call   c0025a0a <IOAPIC::read(int)>
c0025baa:	83 c4 08             	add    esp,0x8
c0025bad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025bb0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025bb7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025bba:	c1 e0 18             	shl    eax,0x18
c0025bbd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bc0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bc6:	52                   	push   edx
c0025bc7:	50                   	push   eax
c0025bc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcb:	e8 58 ff ff ff       	call   c0025b28 <IOAPIC::write(int, int)>
c0025bd0:	83 c4 0c             	add    esp,0xc
c0025bd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bd6:	50                   	push   eax
c0025bd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bda:	e8 2b fe ff ff       	call   c0025a0a <IOAPIC::read(int)>
c0025bdf:	83 c4 08             	add    esp,0x8
c0025be2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025be5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025bec:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025bf3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bfa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bfe:	74 09                	je     c0025c09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c00:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c07:	eb 07                	jmp    c0025c10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c09:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c10:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c14:	74 09                	je     c0025c1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c16:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c1d:	eb 07                	jmp    c0025c26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c1f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c26:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c2d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c31:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c3a:	52                   	push   edx
c0025c3b:	50                   	push   eax
c0025c3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c3f:	e8 e4 fe ff ff       	call   c0025b28 <IOAPIC::write(int, int)>
c0025c44:	83 c4 0c             	add    esp,0xc
c0025c47:	90                   	nop
c0025c48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c4b:	c9                   	leave  
c0025c4c:	c3                   	ret    
c0025c4d:	90                   	nop

c0025c4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c4e:	55                   	push   ebp
c0025c4f:	89 e5                	mov    ebp,esp
c0025c51:	57                   	push   edi
c0025c52:	56                   	push   esi
c0025c53:	53                   	push   ebx
c0025c54:	83 ec 2c             	sub    esp,0x2c
c0025c57:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c5a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c5d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c61:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c65:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c69:	74 5a                	je     c0025cc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c6b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c6f:	7f 44                	jg     c0025cb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c74:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025c79:	8a 00                	mov    al,BYTE PTR [eax]
c0025c7b:	0f b6 c0             	movzx  eax,al
c0025c7e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c84:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025c8c:	0f b7 c0             	movzx  eax,ax
c0025c8f:	83 e0 02             	and    eax,0x2
c0025c92:	85 c0                	test   eax,eax
c0025c94:	74 04                	je     c0025c9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c96:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c9d:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025ca5:	0f b7 c0             	movzx  eax,ax
c0025ca8:	83 e0 08             	and    eax,0x8
c0025cab:	85 c0                	test   eax,eax
c0025cad:	74 16                	je     c0025cc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025caf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cb3:	eb 10                	jmp    c0025cc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cb5:	83 ec 0c             	sub    esp,0xc
c0025cb8:	68 98 d0 02 c0       	push   0xc002d098
c0025cbd:	e8 bb 48 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0025cc2:	83 c4 10             	add    esp,0x10
c0025cc5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cc9:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025cce:	83 ec 08             	sub    esp,0x8
c0025cd1:	50                   	push   eax
c0025cd2:	68 d0 d0 02 c0       	push   0xc002d0d0
c0025cd7:	e8 fc d1 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0025cdc:	83 c4 10             	add    esp,0x10
c0025cdf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ce6:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025ceb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025cee:	7d 67                	jge    c0025d57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cf0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cf3:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0025cfa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cfd:	83 ec 08             	sub    esp,0x8
c0025d00:	52                   	push   edx
c0025d01:	50                   	push   eax
c0025d02:	e8 d1 fc ff ff       	call   c00259d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d07:	83 c4 10             	add    esp,0x10
c0025d0a:	84 c0                	test   al,al
c0025d0c:	74 44                	je     c0025d52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d11:	8b 1c 85 20 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd8e0]
c0025d18:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d1c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d1f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d26:	83 c0 20             	add    eax,0x20
c0025d29:	0f b6 f0             	movzx  esi,al
c0025d2c:	b8 00 00 00 00       	mov    eax,0x0
c0025d31:	99                   	cdq    
c0025d32:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d35:	0f b6 c9             	movzx  ecx,cl
c0025d38:	83 ec 04             	sub    esp,0x4
c0025d3b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d3e:	57                   	push   edi
c0025d3f:	56                   	push   esi
c0025d40:	52                   	push   edx
c0025d41:	50                   	push   eax
c0025d42:	51                   	push   ecx
c0025d43:	53                   	push   ebx
c0025d44:	e8 0b fe ff ff       	call   c0025b54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d49:	83 c4 20             	add    esp,0x20
c0025d4c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d50:	eb 05                	jmp    c0025d57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d52:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d55:	eb 8f                	jmp    c0025ce6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d57:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d5a:	83 f0 01             	xor    eax,0x1
c0025d5d:	84 c0                	test   al,al
c0025d5f:	74 10                	je     c0025d71 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d61:	83 ec 0c             	sub    esp,0xc
c0025d64:	68 e7 d0 02 c0       	push   0xc002d0e7
c0025d69:	e8 0f 48 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0025d6e:	83 c4 10             	add    esp,0x10
c0025d71:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d75:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d7c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d80:	7f 65                	jg     c0025de7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d88:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d8f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d92:	01 ca                	add    edx,ecx
c0025d94:	83 c2 54             	add    edx,0x54
c0025d97:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d9b:	85 c0                	test   eax,eax
c0025d9d:	75 43                	jne    c0025de2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025da2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025da5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025daf:	01 ca                	add    edx,ecx
c0025db1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025db4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025db7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dbe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025dc8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dcb:	01 ca                	add    edx,ecx
c0025dcd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025dd3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dd6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ddd:	83 e8 20             	sub    eax,0x20
c0025de0:	eb 1a                	jmp    c0025dfc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025de2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025de5:	eb 95                	jmp    c0025d7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025de7:	83 ec 0c             	sub    esp,0xc
c0025dea:	68 f4 d0 02 c0       	push   0xc002d0f4
c0025def:	e8 89 47 ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0025df4:	83 c4 10             	add    esp,0x10
c0025df7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025dfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dff:	5b                   	pop    ebx
c0025e00:	5e                   	pop    esi
c0025e01:	5f                   	pop    edi
c0025e02:	5d                   	pop    ebp
c0025e03:	c3                   	ret    

c0025e04 <PIC::disable()>:
c0025e04:	55                   	push   ebp
c0025e05:	89 e5                	mov    ebp,esp
c0025e07:	83 ec 10             	sub    esp,0x10
c0025e0a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e10:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e14:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e17:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e1b:	ee                   	out    dx,al
c0025e1c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e22:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e26:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e29:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e2d:	ee                   	out    dx,al
c0025e2e:	90                   	nop
c0025e2f:	c9                   	leave  
c0025e30:	c3                   	ret    
c0025e31:	90                   	nop

c0025e32 <PIC::close(int, int, void*)>:
c0025e32:	55                   	push   ebp
c0025e33:	89 e5                	mov    ebp,esp
c0025e35:	83 ec 08             	sub    esp,0x8
c0025e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e3d:	83 c0 3c             	add    eax,0x3c
c0025e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e42:	83 ec 0c             	sub    esp,0xc
c0025e45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e48:	ff d0                	call   eax
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	b8 00 00 00 00       	mov    eax,0x0
c0025e52:	c9                   	leave  
c0025e53:	c3                   	ret    

c0025e54 <PIC::PIC()>:
c0025e54:	83 ec 0c             	sub    esp,0xc
c0025e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5b:	83 ec 08             	sub    esp,0x8
c0025e5e:	68 a0 d1 02 c0       	push   0xc002d1a0
c0025e63:	50                   	push   eax
c0025e64:	e8 f1 ed fe ff       	call   c0014c5a <InterruptController::InterruptController(char const*)>
c0025e69:	83 c4 10             	add    esp,0x10
c0025e6c:	ba cc d1 02 c0       	mov    edx,0xc002d1cc
c0025e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e75:	89 10                	mov    DWORD PTR [eax],edx
c0025e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e81:	0f b6 d0             	movzx  edx,al
c0025e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e88:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e99:	0f b6 d0             	movzx  edx,al
c0025e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eaf:	8d 50 01             	lea    edx,[eax+0x1]
c0025eb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025eb6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ebc:	0f b6 d0             	movzx  edx,al
c0025ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ec7:	83 e1 3f             	and    ecx,0x3f
c0025eca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed8:	0f b6 d0             	movzx  edx,al
c0025edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef0:	0f b6 d0             	movzx  edx,al
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f06:	8d 50 01             	lea    edx,[eax+0x1]
c0025f09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f0d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f13:	0f b6 d0             	movzx  edx,al
c0025f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f1e:	83 e1 3f             	and    ecx,0x3f
c0025f21:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f25:	90                   	nop
c0025f26:	83 c4 0c             	add    esp,0xc
c0025f29:	c3                   	ret    

c0025f2a <PIC::ioWait()>:
c0025f2a:	eb 00                	jmp    c0025f2c <PIC::ioWait()+0x2>
c0025f2c:	eb 00                	jmp    c0025f2e <PIC::ioWait()+0x4>
c0025f2e:	90                   	nop
c0025f2f:	c3                   	ret    

c0025f30 <PIC::getIRQReg(int)>:
c0025f30:	55                   	push   ebp
c0025f31:	89 e5                	mov    ebp,esp
c0025f33:	83 ec 10             	sub    esp,0x10
c0025f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f39:	0f b6 c0             	movzx  eax,al
c0025f3c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f42:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f45:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f48:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f4c:	ee                   	out    dx,al
c0025f4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f50:	0f b6 c0             	movzx  eax,al
c0025f53:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f59:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f5c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f5f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f63:	ee                   	out    dx,al
c0025f64:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f6a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f6e:	89 c2                	mov    edx,eax
c0025f70:	ec                   	in     al,dx
c0025f71:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f77:	0f b6 c0             	movzx  eax,al
c0025f7a:	c1 e0 08             	shl    eax,0x8
c0025f7d:	89 c1                	mov    ecx,eax
c0025f7f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f85:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f89:	89 c2                	mov    edx,eax
c0025f8b:	ec                   	in     al,dx
c0025f8c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f8f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f92:	0f b6 c0             	movzx  eax,al
c0025f95:	09 c8                	or     eax,ecx
c0025f97:	c9                   	leave  
c0025f98:	c3                   	ret    
c0025f99:	90                   	nop

c0025f9a <PIC::eoi(unsigned char)>:
c0025f9a:	55                   	push   ebp
c0025f9b:	89 e5                	mov    ebp,esp
c0025f9d:	83 ec 14             	sub    esp,0x14
c0025fa0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fa3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025fa6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025faa:	75 1e                	jne    c0025fca <PIC::eoi(unsigned char)+0x30>
c0025fac:	6a 0b                	push   0xb
c0025fae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb1:	e8 7a ff ff ff       	call   c0025f30 <PIC::getIRQReg(int)>
c0025fb6:	83 c4 08             	add    esp,0x8
c0025fb9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fbd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fc1:	25 80 00 00 00       	and    eax,0x80
c0025fc6:	85 c0                	test   eax,eax
c0025fc8:	74 5f                	je     c0026029 <PIC::eoi(unsigned char)+0x8f>
c0025fca:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fce:	75 2d                	jne    c0025ffd <PIC::eoi(unsigned char)+0x63>
c0025fd0:	6a 0b                	push   0xb
c0025fd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd5:	e8 56 ff ff ff       	call   c0025f30 <PIC::getIRQReg(int)>
c0025fda:	83 c4 08             	add    esp,0x8
c0025fdd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fe1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fe4:	66 85 c0             	test   ax,ax
c0025fe7:	78 14                	js     c0025ffd <PIC::eoi(unsigned char)+0x63>
c0025fe9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fef:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025ff3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ff6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ffa:	ee                   	out    dx,al
c0025ffb:	eb 2d                	jmp    c002602a <PIC::eoi(unsigned char)+0x90>
c0025ffd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026001:	76 12                	jbe    c0026015 <PIC::eoi(unsigned char)+0x7b>
c0026003:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026009:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002600d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026010:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026014:	ee                   	out    dx,al
c0026015:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002601b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002601f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026022:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026026:	ee                   	out    dx,al
c0026027:	eb 01                	jmp    c002602a <PIC::eoi(unsigned char)+0x90>
c0026029:	90                   	nop
c002602a:	c9                   	leave  
c002602b:	c3                   	ret    

c002602c <PIC::remap()>:
c002602c:	55                   	push   ebp
c002602d:	89 e5                	mov    ebp,esp
c002602f:	83 ec 48             	sub    esp,0x48
c0026032:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026039:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026040:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026046:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026049:	89 c2                	mov    edx,eax
c002604b:	ec                   	in     al,dx
c002604c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002604f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026052:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026055:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002605b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002605e:	89 c2                	mov    edx,eax
c0026060:	ec                   	in     al,dx
c0026061:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026064:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026067:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002606a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026070:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026074:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026077:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002607a:	ee                   	out    dx,al
c002607b:	83 ec 0c             	sub    esp,0xc
c002607e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026081:	e8 a4 fe ff ff       	call   c0025f2a <PIC::ioWait()>
c0026086:	83 c4 10             	add    esp,0x10
c0026089:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002608f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026093:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026096:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026099:	ee                   	out    dx,al
c002609a:	83 ec 0c             	sub    esp,0xc
c002609d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a0:	e8 85 fe ff ff       	call   c0025f2a <PIC::ioWait()>
c00260a5:	83 c4 10             	add    esp,0x10
c00260a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260ab:	0f b6 c0             	movzx  eax,al
c00260ae:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260b4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260b7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260ba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260bd:	ee                   	out    dx,al
c00260be:	83 ec 0c             	sub    esp,0xc
c00260c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c4:	e8 61 fe ff ff       	call   c0025f2a <PIC::ioWait()>
c00260c9:	83 c4 10             	add    esp,0x10
c00260cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260cf:	0f b6 c0             	movzx  eax,al
c00260d2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260d8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260db:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260de:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260e1:	ee                   	out    dx,al
c00260e2:	83 ec 0c             	sub    esp,0xc
c00260e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e8:	e8 3d fe ff ff       	call   c0025f2a <PIC::ioWait()>
c00260ed:	83 c4 10             	add    esp,0x10
c00260f0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260f6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260fa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260fd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026100:	ee                   	out    dx,al
c0026101:	83 ec 0c             	sub    esp,0xc
c0026104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026107:	e8 1e fe ff ff       	call   c0025f2a <PIC::ioWait()>
c002610c:	83 c4 10             	add    esp,0x10
c002610f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026115:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026119:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002611c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002611f:	ee                   	out    dx,al
c0026120:	83 ec 0c             	sub    esp,0xc
c0026123:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026126:	e8 ff fd ff ff       	call   c0025f2a <PIC::ioWait()>
c002612b:	83 c4 10             	add    esp,0x10
c002612e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026134:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026138:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002613b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002613e:	ee                   	out    dx,al
c002613f:	83 ec 0c             	sub    esp,0xc
c0026142:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026145:	e8 e0 fd ff ff       	call   c0025f2a <PIC::ioWait()>
c002614a:	83 c4 10             	add    esp,0x10
c002614d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026153:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026157:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002615a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002615d:	ee                   	out    dx,al
c002615e:	83 ec 0c             	sub    esp,0xc
c0026161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026164:	e8 c1 fd ff ff       	call   c0025f2a <PIC::ioWait()>
c0026169:	83 c4 10             	add    esp,0x10
c002616c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026170:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026176:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026179:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002617c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002617f:	ee                   	out    dx,al
c0026180:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026184:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002618a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002618d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026190:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026193:	ee                   	out    dx,al
c0026194:	90                   	nop
c0026195:	c9                   	leave  
c0026196:	c3                   	ret    
c0026197:	90                   	nop

c0026198 <PIC::open(int, int, void*)>:
c0026198:	55                   	push   ebp
c0026199:	89 e5                	mov    ebp,esp
c002619b:	83 ec 18             	sub    esp,0x18
c002619e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261a4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261a8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261ab:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261af:	ee                   	out    dx,al
c00261b0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261b6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261ba:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261bd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261c1:	ee                   	out    dx,al
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c8:	e8 5f fe ff ff       	call   c002602c <PIC::remap()>
c00261cd:	83 c4 10             	add    esp,0x10
c00261d0:	b8 00 00 00 00       	mov    eax,0x0
c00261d5:	c9                   	leave  
c00261d6:	c3                   	ret    
c00261d7:	90                   	nop

c00261d8 <APICTimer::close(int, int, void*)>:
c00261d8:	b8 00 00 00 00       	mov    eax,0x0
c00261dd:	c3                   	ret    

c00261de <apicTimerHandler(regs*, void*)>:
c00261de:	83 ec 0c             	sub    esp,0xc
c00261e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261e7:	99                   	cdq    
c00261e8:	52                   	push   edx
c00261e9:	50                   	push   eax
c00261ea:	6a 00                	push   0x0
c00261ec:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261f1:	e8 86 07 00 00       	call   c002697c <__udivdi3>
c00261f6:	83 c4 10             	add    esp,0x10
c00261f9:	83 ec 08             	sub    esp,0x8
c00261fc:	52                   	push   edx
c00261fd:	50                   	push   eax
c00261fe:	e8 a2 0a ff ff       	call   c0016ca5 <timerHandler(unsigned long long)>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	90                   	nop
c0026207:	83 c4 0c             	add    esp,0xc
c002620a:	c3                   	ret    
c002620b:	90                   	nop

c002620c <APICTimer::write(int)>:
c002620c:	53                   	push   ebx
c002620d:	83 ec 28             	sub    esp,0x28
c0026210:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026214:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026218:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002621e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026223:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026229:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002622f:	83 ec 0c             	sub    esp,0xc
c0026232:	50                   	push   eax
c0026233:	e8 de f4 ff ff       	call   c0025716 <APIC::getBase()>
c0026238:	83 c4 10             	add    esp,0x10
c002623b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002623f:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c0026244:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c002624a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002624e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026256:	05 e0 03 00 00       	add    eax,0x3e0
c002625b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026265:	05 80 03 00 00       	add    eax,0x380
c002626a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026270:	fb                   	sti    
c0026271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026279:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002627e:	83 d2 00             	adc    edx,0x0
c0026281:	89 c1                	mov    ecx,eax
c0026283:	89 d3                	mov    ebx,edx
c0026285:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c002628a:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c0026290:	39 c8                	cmp    eax,ecx
c0026292:	89 d0                	mov    eax,edx
c0026294:	19 d8                	sbb    eax,ebx
c0026296:	73 02                	jae    c002629a <APICTimer::write(int)+0x8e>
c0026298:	eb d7                	jmp    c0026271 <APICTimer::write(int)+0x65>
c002629a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002629e:	05 20 03 00 00       	add    eax,0x320
c00262a3:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ad:	05 90 03 00 00       	add    eax,0x390
c00262b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00262b4:	f7 d0                	not    eax
c00262b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262c2:	ba 00 00 00 00       	mov    edx,0x0
c00262c7:	f7 f3                	div    ebx
c00262c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262d7:	0d 00 00 02 00       	or     eax,0x20000
c00262dc:	89 c2                	mov    edx,eax
c00262de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e2:	05 20 03 00 00       	add    eax,0x320
c00262e7:	89 10                	mov    DWORD PTR [eax],edx
c00262e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ed:	05 e0 03 00 00       	add    eax,0x3e0
c00262f2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262fc:	05 80 03 00 00       	add    eax,0x380
c0026301:	89 c2                	mov    edx,eax
c0026303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026307:	89 02                	mov    DWORD PTR [edx],eax
c0026309:	90                   	nop
c002630a:	83 c4 28             	add    esp,0x28
c002630d:	5b                   	pop    ebx
c002630e:	c3                   	ret    
c002630f:	90                   	nop

c0026310 <APICTimer::open(int, int, void*)>:
c0026310:	57                   	push   edi
c0026311:	56                   	push   esi
c0026312:	53                   	push   ebx
c0026313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026317:	8b 00                	mov    eax,DWORD PTR [eax]
c0026319:	83 c0 24             	add    eax,0x24
c002631c:	8b 00                	mov    eax,DWORD PTR [eax]
c002631e:	83 ec 08             	sub    esp,0x8
c0026321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026329:	ff d0                	call   eax
c002632b:	83 c4 10             	add    esp,0x10
c002632e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026333:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026339:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002633f:	83 ec 0c             	sub    esp,0xc
c0026342:	50                   	push   eax
c0026343:	e8 ce f3 ff ff       	call   c0025716 <APIC::getBase()>
c0026348:	83 c4 10             	add    esp,0x10
c002634b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026355:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002635b:	0f b6 f8             	movzx  edi,al
c002635e:	89 d0                	mov    eax,edx
c0026360:	ba 00 00 00 00       	mov    edx,0x0
c0026365:	89 c1                	mov    ecx,eax
c0026367:	80 e5 ff             	and    ch,0xff
c002636a:	89 cb                	mov    ebx,ecx
c002636c:	0f b6 f2             	movzx  esi,dl
c002636f:	89 d8                	mov    eax,ebx
c0026371:	89 f2                	mov    edx,esi
c0026373:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026377:	8d 5f 08             	lea    ebx,[edi+0x8]
c002637a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002637e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026382:	83 e0 00             	and    eax,0x0
c0026385:	09 d0                	or     eax,edx
c0026387:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002638b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026395:	8d 50 01             	lea    edx,[eax+0x1]
c0026398:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002639c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263a2:	0f b6 d0             	movzx  edx,al
c00263a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a9:	83 c2 08             	add    edx,0x8
c00263ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263b0:	0f b6 c9             	movzx  ecx,cl
c00263b3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263c5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263d3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263dd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263e3:	83 ec 0c             	sub    esp,0xc
c00263e6:	51                   	push   ecx
c00263e7:	6a 01                	push   0x1
c00263e9:	68 de 61 02 c0       	push   0xc00261de
c00263ee:	52                   	push   edx
c00263ef:	50                   	push   eax
c00263f0:	e8 8d de fe ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263f5:	83 c4 20             	add    esp,0x20
c00263f8:	89 c2                	mov    edx,eax
c00263fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263fe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026404:	b8 00 00 00 00       	mov    eax,0x0
c0026409:	5b                   	pop    ebx
c002640a:	5e                   	pop    esi
c002640b:	5f                   	pop    edi
c002640c:	c3                   	ret    
c002640d:	90                   	nop

c002640e <APICTimer::APICTimer()>:
c002640e:	83 ec 0c             	sub    esp,0xc
c0026411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026415:	83 ec 08             	sub    esp,0x8
c0026418:	68 0c d2 02 c0       	push   0xc002d20c
c002641d:	50                   	push   eax
c002641e:	e8 f3 07 ff ff       	call   c0016c16 <Timer::Timer(char const*)>
c0026423:	83 c4 10             	add    esp,0x10
c0026426:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c002642b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002642f:	89 10                	mov    DWORD PTR [eax],edx
c0026431:	90                   	nop
c0026432:	83 c4 0c             	add    esp,0xc
c0026435:	c3                   	ret    

c0026436 <PIT::write(int)>:
c0026436:	83 ec 10             	sub    esp,0x10
c0026439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002643d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026441:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002644b:	a3 44 27 03 c0       	mov    ds:0xc0032744,eax
c0026450:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026455:	99                   	cdq    
c0026456:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002645a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002645e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026465:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002646a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002646e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026473:	ee                   	out    dx,al
c0026474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026478:	0f b6 c0             	movzx  eax,al
c002647b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026482:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026486:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002648a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002648f:	ee                   	out    dx,al
c0026490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026494:	c1 f8 08             	sar    eax,0x8
c0026497:	0f b6 c0             	movzx  eax,al
c002649a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264a1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264a5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264a9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00264ae:	ee                   	out    dx,al
c00264af:	90                   	nop
c00264b0:	83 c4 10             	add    esp,0x10
c00264b3:	c3                   	ret    

c00264b4 <pitHandler(regs*, void*)>:
c00264b4:	83 ec 0c             	sub    esp,0xc
c00264b7:	a1 44 27 03 c0       	mov    eax,ds:0xc0032744
c00264bc:	99                   	cdq    
c00264bd:	52                   	push   edx
c00264be:	50                   	push   eax
c00264bf:	6a 00                	push   0x0
c00264c1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264c6:	e8 b1 04 00 00       	call   c002697c <__udivdi3>
c00264cb:	83 c4 10             	add    esp,0x10
c00264ce:	83 ec 08             	sub    esp,0x8
c00264d1:	52                   	push   edx
c00264d2:	50                   	push   eax
c00264d3:	e8 cd 07 ff ff       	call   c0016ca5 <timerHandler(unsigned long long)>
c00264d8:	83 c4 10             	add    esp,0x10
c00264db:	90                   	nop
c00264dc:	83 c4 0c             	add    esp,0xc
c00264df:	c3                   	ret    

c00264e0 <PIT::open(int, int, void*)>:
c00264e0:	83 ec 0c             	sub    esp,0xc
c00264e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00264e9:	83 c0 24             	add    eax,0x24
c00264ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00264ee:	83 ec 08             	sub    esp,0x8
c00264f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264f9:	ff d0                	call   eax
c00264fb:	83 c4 10             	add    esp,0x10
c00264fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026502:	83 ec 0c             	sub    esp,0xc
c0026505:	6a 00                	push   0x0
c0026507:	6a 01                	push   0x1
c0026509:	68 b4 64 02 c0       	push   0xc00264b4
c002650e:	6a 00                	push   0x0
c0026510:	50                   	push   eax
c0026511:	e8 6c dd fe ff       	call   c0014282 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026516:	83 c4 20             	add    esp,0x20
c0026519:	89 c2                	mov    edx,eax
c002651b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026525:	b8 00 00 00 00       	mov    eax,0x0
c002652a:	83 c4 0c             	add    esp,0xc
c002652d:	c3                   	ret    

c002652e <PIT::close(int, int, void*)>:
c002652e:	83 ec 0c             	sub    esp,0xc
c0026531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026535:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002653f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026543:	6a 01                	push   0x1
c0026545:	68 b4 64 02 c0       	push   0xc00264b4
c002654a:	6a 00                	push   0x0
c002654c:	50                   	push   eax
c002654d:	e8 6e dd fe ff       	call   c00142c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026552:	83 c4 10             	add    esp,0x10
c0026555:	b8 00 00 00 00       	mov    eax,0x0
c002655a:	83 c4 0c             	add    esp,0xc
c002655d:	c3                   	ret    

c002655e <PIT::PIT()>:
c002655e:	83 ec 0c             	sub    esp,0xc
c0026561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026565:	83 ec 08             	sub    esp,0x8
c0026568:	68 48 d2 02 c0       	push   0xc002d248
c002656d:	50                   	push   eax
c002656e:	e8 a3 06 ff ff       	call   c0016c16 <Timer::Timer(char const*)>
c0026573:	83 c4 10             	add    esp,0x10
c0026576:	ba 70 d2 02 c0       	mov    edx,0xc002d270
c002657b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657f:	89 10                	mov    DWORD PTR [eax],edx
c0026581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026585:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002658b:	0f b6 d0             	movzx  edx,al
c002658e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026592:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265a3:	0f b6 d0             	movzx  edx,al
c00265a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265aa:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00265af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265b9:	8d 50 01             	lea    edx,[eax+0x1]
c00265bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265c6:	0f b6 d0             	movzx  edx,al
c00265c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265d1:	83 e1 3f             	and    ecx,0x3f
c00265d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265d8:	90                   	nop
c00265d9:	83 c4 0c             	add    esp,0xc
c00265dc:	c3                   	ret    
c00265dd:	66 90                	xchg   ax,ax
c00265df:	90                   	nop

c00265e0 <avxDetect>:
c00265e0:	b8 00 00 00 00       	mov    eax,0x0
c00265e5:	c3                   	ret    

c00265e6 <avxSave>:
c00265e6:	c3                   	ret    

c00265e7 <avxLoad>:
c00265e7:	c3                   	ret    

c00265e8 <avxInit>:
c00265e8:	c3                   	ret    

c00265e9 <avxClose>:
c00265e9:	c3                   	ret    

c00265ea <wouldSheSayYes>:
c00265ea:	c3                   	ret    
c00265eb:	49                   	dec    ecx
c00265ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265f4:	75 20                	jne    c0026616 <sseDetect.noSSE+0x1>
c00265f6:	4e                   	dec    esi
c00265f7:	79 61                	jns    c002665a <x87Detect+0x14>
c00265f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265fe:	66 90                	xchg   ax,ax

c0026600 <absolutelyNoChanceInHell>:
c0026600:	b8 01 00 00 00       	mov    eax,0x1
c0026605:	0f a2                	cpuid  
c0026607:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002660d:	74 06                	je     c0026615 <sseDetect.noSSE>
c002660f:	b8 01 00 00 00       	mov    eax,0x1
c0026614:	c3                   	ret    

c0026615 <sseDetect.noSSE>:
c0026615:	31 c0                	xor    eax,eax
c0026617:	c3                   	ret    

c0026618 <sseSave>:
c0026618:	0f ae 44 24 08       	fxsave [esp+0x8]
c002661d:	c3                   	ret    

c002661e <sseLoad>:
c002661e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026623:	c3                   	ret    

c0026624 <sseInit>:
c0026624:	e8 43 00 00 00       	call   c002666c <x87Init>
c0026629:	0f 20 e0             	mov    eax,cr4
c002662c:	66 0d 00 06          	or     ax,0x600
c0026630:	0f 22 e0             	mov    cr4,eax
c0026633:	c3                   	ret    

c0026634 <sseClose>:
c0026634:	c3                   	ret    
c0026635:	66 90                	xchg   ax,ax
c0026637:	66 90                	xchg   ax,ax
c0026639:	66 90                	xchg   ax,ax
c002663b:	66 90                	xchg   ax,ax
c002663d:	66 90                	xchg   ax,ax
c002663f:	90                   	nop

c0026640 <value_37F>:
c0026640:	7f 03                	jg     c0026645 <value_37A+0x1>

c0026642 <value_37E>:
c0026642:	7e 03                	jle    c0026647 <x87Detect+0x1>

c0026644 <value_37A>:
c0026644:	7a 03                	jp     c0026649 <x87Detect+0x3>

c0026646 <x87Detect>:
c0026646:	b8 01 00 00 00       	mov    eax,0x1
c002664b:	0f a2                	cpuid  
c002664d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026653:	74 06                	je     c002665b <x87Detect.nox87>
c0026655:	b8 01 00 00 00       	mov    eax,0x1
c002665a:	c3                   	ret    

c002665b <x87Detect.nox87>:
c002665b:	b8 00 00 00 00       	mov    eax,0x0
c0026660:	c3                   	ret    

c0026661 <x87Save>:
c0026661:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026666:	c3                   	ret    

c0026667 <x87Load>:
c0026667:	dd 64 24 08          	frstor [esp+0x8]
c002666b:	c3                   	ret    

c002666c <x87Init>:
c002666c:	9b db e3             	finit  
c002666f:	0f 20 c0             	mov    eax,cr0
c0026672:	66 25 fb ff          	and    ax,0xfffb
c0026676:	66 0d 22 00          	or     ax,0x22
c002667a:	0f 22 c0             	mov    cr0,eax
c002667d:	0f 06                	clts   
c002667f:	d9 2d 44 66 02 c0    	fldcw  WORD PTR ds:0xc0026644
c0026685:	c3                   	ret    

c0026686 <x87Close>:
c0026686:	c3                   	ret    
c0026687:	90                   	nop

c0026688 <__do_global_ctors_aux>:
c0026688:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c002668d:	83 f8 ff             	cmp    eax,0xffffffff
c0026690:	74 1a                	je     c00266ac <__do_global_ctors_aux+0x24>
c0026692:	55                   	push   ebp
c0026693:	89 e5                	mov    ebp,esp
c0026695:	53                   	push   ebx
c0026696:	52                   	push   edx
c0026697:	bb cc 91 02 c0       	mov    ebx,0xc00291cc
c002669c:	ff d0                	call   eax
c002669e:	83 eb 04             	sub    ebx,0x4
c00266a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00266a3:	83 f8 ff             	cmp    eax,0xffffffff
c00266a6:	75 f4                	jne    c002669c <__do_global_ctors_aux+0x14>
c00266a8:	58                   	pop    eax
c00266a9:	5b                   	pop    ebx
c00266aa:	5d                   	pop    ebp
c00266ab:	c3                   	ret    
c00266ac:	c3                   	ret    
c00266ad:	66 90                	xchg   ax,ax
c00266af:	90                   	nop

c00266b0 <__divdi3>:
c00266b0:	55                   	push   ebp
c00266b1:	57                   	push   edi
c00266b2:	56                   	push   esi
c00266b3:	53                   	push   ebx
c00266b4:	83 ec 1c             	sub    esp,0x1c
c00266b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266ce:	85 db                	test   ebx,ebx
c00266d0:	0f 88 8e 00 00 00    	js     c0026764 <__divdi3+0xb4>
c00266d6:	89 dd                	mov    ebp,ebx
c00266d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266e0:	89 d3                	mov    ebx,edx
c00266e2:	85 d2                	test   edx,edx
c00266e4:	79 0d                	jns    c00266f3 <__divdi3+0x43>
c00266e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266ea:	f7 d8                	neg    eax
c00266ec:	83 d2 00             	adc    edx,0x0
c00266ef:	f7 da                	neg    edx
c00266f1:	89 d3                	mov    ebx,edx
c00266f3:	89 c7                	mov    edi,eax
c00266f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266f8:	85 db                	test   ebx,ebx
c00266fa:	75 48                	jne    c0026744 <__divdi3+0x94>
c00266fc:	39 ef                	cmp    edi,ebp
c00266fe:	76 24                	jbe    c0026724 <__divdi3+0x74>
c0026700:	89 ea                	mov    edx,ebp
c0026702:	f7 f7                	div    edi
c0026704:	89 c1                	mov    ecx,eax
c0026706:	31 f6                	xor    esi,esi
c0026708:	89 c8                	mov    eax,ecx
c002670a:	89 f2                	mov    edx,esi
c002670c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026710:	85 c9                	test   ecx,ecx
c0026712:	74 07                	je     c002671b <__divdi3+0x6b>
c0026714:	f7 d8                	neg    eax
c0026716:	83 d2 00             	adc    edx,0x0
c0026719:	f7 da                	neg    edx
c002671b:	83 c4 1c             	add    esp,0x1c
c002671e:	5b                   	pop    ebx
c002671f:	5e                   	pop    esi
c0026720:	5f                   	pop    edi
c0026721:	5d                   	pop    ebp
c0026722:	c3                   	ret    
c0026723:	90                   	nop
c0026724:	85 ff                	test   edi,edi
c0026726:	75 0b                	jne    c0026733 <__divdi3+0x83>
c0026728:	b8 01 00 00 00       	mov    eax,0x1
c002672d:	31 d2                	xor    edx,edx
c002672f:	f7 f3                	div    ebx
c0026731:	89 c7                	mov    edi,eax
c0026733:	31 d2                	xor    edx,edx
c0026735:	89 e8                	mov    eax,ebp
c0026737:	f7 f7                	div    edi
c0026739:	89 c6                	mov    esi,eax
c002673b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002673e:	f7 f7                	div    edi
c0026740:	89 c1                	mov    ecx,eax
c0026742:	eb c4                	jmp    c0026708 <__divdi3+0x58>
c0026744:	39 eb                	cmp    ebx,ebp
c0026746:	77 3c                	ja     c0026784 <__divdi3+0xd4>
c0026748:	0f bd f3             	bsr    esi,ebx
c002674b:	83 f6 1f             	xor    esi,0x1f
c002674e:	75 40                	jne    c0026790 <__divdi3+0xe0>
c0026750:	39 eb                	cmp    ebx,ebp
c0026752:	72 09                	jb     c002675d <__divdi3+0xad>
c0026754:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026757:	0f 87 97 00 00 00    	ja     c00267f4 <__divdi3+0x144>
c002675d:	b9 01 00 00 00       	mov    ecx,0x1
c0026762:	eb a4                	jmp    c0026708 <__divdi3+0x58>
c0026764:	f7 d9                	neg    ecx
c0026766:	83 d3 00             	adc    ebx,0x0
c0026769:	f7 db                	neg    ebx
c002676b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002676e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026772:	89 dd                	mov    ebp,ebx
c0026774:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002677c:	e9 5f ff ff ff       	jmp    c00266e0 <__divdi3+0x30>
c0026781:	8d 76 00             	lea    esi,[esi+0x0]
c0026784:	31 f6                	xor    esi,esi
c0026786:	31 c9                	xor    ecx,ecx
c0026788:	e9 7b ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c002678d:	8d 76 00             	lea    esi,[esi+0x0]
c0026790:	b8 20 00 00 00       	mov    eax,0x20
c0026795:	29 f0                	sub    eax,esi
c0026797:	89 f1                	mov    ecx,esi
c0026799:	d3 e3                	shl    ebx,cl
c002679b:	89 fa                	mov    edx,edi
c002679d:	88 c1                	mov    cl,al
c002679f:	d3 ea                	shr    edx,cl
c00267a1:	09 da                	or     edx,ebx
c00267a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00267a7:	89 f1                	mov    ecx,esi
c00267a9:	d3 e7                	shl    edi,cl
c00267ab:	89 eb                	mov    ebx,ebp
c00267ad:	88 c1                	mov    cl,al
c00267af:	d3 eb                	shr    ebx,cl
c00267b1:	89 f1                	mov    ecx,esi
c00267b3:	d3 e5                	shl    ebp,cl
c00267b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267b8:	88 c1                	mov    cl,al
c00267ba:	d3 ea                	shr    edx,cl
c00267bc:	09 d5                	or     ebp,edx
c00267be:	89 e8                	mov    eax,ebp
c00267c0:	89 da                	mov    edx,ebx
c00267c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267c6:	89 d3                	mov    ebx,edx
c00267c8:	89 c5                	mov    ebp,eax
c00267ca:	f7 e7                	mul    edi
c00267cc:	39 d3                	cmp    ebx,edx
c00267ce:	72 18                	jb     c00267e8 <__divdi3+0x138>
c00267d0:	74 0a                	je     c00267dc <__divdi3+0x12c>
c00267d2:	89 e9                	mov    ecx,ebp
c00267d4:	31 f6                	xor    esi,esi
c00267d6:	e9 2d ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267db:	90                   	nop
c00267dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267df:	89 f1                	mov    ecx,esi
c00267e1:	d3 e7                	shl    edi,cl
c00267e3:	39 c7                	cmp    edi,eax
c00267e5:	73 eb                	jae    c00267d2 <__divdi3+0x122>
c00267e7:	90                   	nop
c00267e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267eb:	31 f6                	xor    esi,esi
c00267ed:	e9 16 ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267f2:	66 90                	xchg   ax,ax
c00267f4:	31 c9                	xor    ecx,ecx
c00267f6:	e9 0d ff ff ff       	jmp    c0026708 <__divdi3+0x58>
c00267fb:	90                   	nop

c00267fc <__moddi3>:
c00267fc:	55                   	push   ebp
c00267fd:	57                   	push   edi
c00267fe:	56                   	push   esi
c00267ff:	53                   	push   ebx
c0026800:	83 ec 2c             	sub    esp,0x2c
c0026803:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026807:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002680b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002680f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026813:	85 db                	test   ebx,ebx
c0026815:	0f 88 85 00 00 00    	js     c00268a0 <__moddi3+0xa4>
c002681b:	89 de                	mov    esi,ebx
c002681d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026825:	89 d7                	mov    edi,edx
c0026827:	85 d2                	test   edx,edx
c0026829:	79 09                	jns    c0026834 <__moddi3+0x38>
c002682b:	f7 d8                	neg    eax
c002682d:	83 d2 00             	adc    edx,0x0
c0026830:	f7 da                	neg    edx
c0026832:	89 d7                	mov    edi,edx
c0026834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026838:	89 cd                	mov    ebp,ecx
c002683a:	85 ff                	test   edi,edi
c002683c:	75 52                	jne    c0026890 <__moddi3+0x94>
c002683e:	89 c3                	mov    ebx,eax
c0026840:	39 f0                	cmp    eax,esi
c0026842:	76 24                	jbe    c0026868 <__moddi3+0x6c>
c0026844:	89 c8                	mov    eax,ecx
c0026846:	89 f2                	mov    edx,esi
c0026848:	f7 f3                	div    ebx
c002684a:	89 d6                	mov    esi,edx
c002684c:	89 f0                	mov    eax,esi
c002684e:	31 d2                	xor    edx,edx
c0026850:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026854:	85 c9                	test   ecx,ecx
c0026856:	74 07                	je     c002685f <__moddi3+0x63>
c0026858:	f7 d8                	neg    eax
c002685a:	83 d2 00             	adc    edx,0x0
c002685d:	f7 da                	neg    edx
c002685f:	83 c4 2c             	add    esp,0x2c
c0026862:	5b                   	pop    ebx
c0026863:	5e                   	pop    esi
c0026864:	5f                   	pop    edi
c0026865:	5d                   	pop    ebp
c0026866:	c3                   	ret    
c0026867:	90                   	nop
c0026868:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002686c:	85 db                	test   ebx,ebx
c002686e:	75 0d                	jne    c002687d <__moddi3+0x81>
c0026870:	b8 01 00 00 00       	mov    eax,0x1
c0026875:	31 d2                	xor    edx,edx
c0026877:	f7 f7                	div    edi
c0026879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002687d:	89 f0                	mov    eax,esi
c002687f:	31 d2                	xor    edx,edx
c0026881:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026885:	f7 f7                	div    edi
c0026887:	89 e8                	mov    eax,ebp
c0026889:	f7 f7                	div    edi
c002688b:	89 d6                	mov    esi,edx
c002688d:	eb bd                	jmp    c002684c <__moddi3+0x50>
c002688f:	90                   	nop
c0026890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026894:	39 f7                	cmp    edi,esi
c0026896:	76 20                	jbe    c00268b8 <__moddi3+0xbc>
c0026898:	89 c8                	mov    eax,ecx
c002689a:	89 f2                	mov    edx,esi
c002689c:	eb b2                	jmp    c0026850 <__moddi3+0x54>
c002689e:	66 90                	xchg   ax,ax
c00268a0:	f7 d9                	neg    ecx
c00268a2:	83 d3 00             	adc    ebx,0x0
c00268a5:	f7 db                	neg    ebx
c00268a7:	89 de                	mov    esi,ebx
c00268a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268b1:	e9 6f ff ff ff       	jmp    c0026825 <__moddi3+0x29>
c00268b6:	66 90                	xchg   ax,ax
c00268b8:	0f bd c7             	bsr    eax,edi
c00268bb:	83 f0 1f             	xor    eax,0x1f
c00268be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268c2:	75 24                	jne    c00268e8 <__moddi3+0xec>
c00268c4:	39 f7                	cmp    edi,esi
c00268c6:	72 06                	jb     c00268ce <__moddi3+0xd2>
c00268c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268cc:	77 0c                	ja     c00268da <__moddi3+0xde>
c00268ce:	89 e9                	mov    ecx,ebp
c00268d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268d4:	19 fe                	sbb    esi,edi
c00268d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268de:	89 f2                	mov    edx,esi
c00268e0:	e9 6b ff ff ff       	jmp    c0026850 <__moddi3+0x54>
c00268e5:	8d 76 00             	lea    esi,[esi+0x0]
c00268e8:	b8 20 00 00 00       	mov    eax,0x20
c00268ed:	89 c2                	mov    edx,eax
c00268ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268f3:	29 da                	sub    edx,ebx
c00268f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268f9:	88 d9                	mov    cl,bl
c00268fb:	d3 e7                	shl    edi,cl
c00268fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026901:	88 d1                	mov    cl,dl
c0026903:	d3 e8                	shr    eax,cl
c0026905:	09 c7                	or     edi,eax
c0026907:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002690b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002690f:	89 d8                	mov    eax,ebx
c0026911:	88 d9                	mov    cl,bl
c0026913:	d3 e7                	shl    edi,cl
c0026915:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026919:	89 f3                	mov    ebx,esi
c002691b:	88 d1                	mov    cl,dl
c002691d:	d3 eb                	shr    ebx,cl
c002691f:	89 c7                	mov    edi,eax
c0026921:	88 c1                	mov    cl,al
c0026923:	d3 e6                	shl    esi,cl
c0026925:	89 e8                	mov    eax,ebp
c0026927:	88 d1                	mov    cl,dl
c0026929:	d3 e8                	shr    eax,cl
c002692b:	09 f0                	or     eax,esi
c002692d:	89 f9                	mov    ecx,edi
c002692f:	d3 e5                	shl    ebp,cl
c0026931:	89 da                	mov    edx,ebx
c0026933:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026937:	89 d3                	mov    ebx,edx
c0026939:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002693d:	89 c6                	mov    esi,eax
c002693f:	89 d1                	mov    ecx,edx
c0026941:	39 d3                	cmp    ebx,edx
c0026943:	72 27                	jb     c002696c <__moddi3+0x170>
c0026945:	74 21                	je     c0026968 <__moddi3+0x16c>
c0026947:	29 f5                	sub    ebp,esi
c0026949:	19 cb                	sbb    ebx,ecx
c002694b:	89 de                	mov    esi,ebx
c002694d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026951:	d3 e6                	shl    esi,cl
c0026953:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026957:	89 f9                	mov    ecx,edi
c0026959:	d3 ed                	shr    ebp,cl
c002695b:	09 ee                	or     esi,ebp
c002695d:	89 f0                	mov    eax,esi
c002695f:	d3 eb                	shr    ebx,cl
c0026961:	89 da                	mov    edx,ebx
c0026963:	e9 e8 fe ff ff       	jmp    c0026850 <__moddi3+0x54>
c0026968:	39 c5                	cmp    ebp,eax
c002696a:	73 db                	jae    c0026947 <__moddi3+0x14b>
c002696c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026970:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026974:	89 d1                	mov    ecx,edx
c0026976:	89 c6                	mov    esi,eax
c0026978:	eb cd                	jmp    c0026947 <__moddi3+0x14b>
c002697a:	66 90                	xchg   ax,ax

c002697c <__udivdi3>:
c002697c:	55                   	push   ebp
c002697d:	57                   	push   edi
c002697e:	56                   	push   esi
c002697f:	53                   	push   ebx
c0026980:	83 ec 1c             	sub    esp,0x1c
c0026983:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026987:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002698b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002698f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026993:	85 d2                	test   edx,edx
c0026995:	75 41                	jne    c00269d8 <__udivdi3+0x5c>
c0026997:	39 f7                	cmp    edi,esi
c0026999:	76 15                	jbe    c00269b0 <__udivdi3+0x34>
c002699b:	89 e8                	mov    eax,ebp
c002699d:	89 f2                	mov    edx,esi
c002699f:	f7 f7                	div    edi
c00269a1:	31 db                	xor    ebx,ebx
c00269a3:	89 da                	mov    edx,ebx
c00269a5:	83 c4 1c             	add    esp,0x1c
c00269a8:	5b                   	pop    ebx
c00269a9:	5e                   	pop    esi
c00269aa:	5f                   	pop    edi
c00269ab:	5d                   	pop    ebp
c00269ac:	c3                   	ret    
c00269ad:	8d 76 00             	lea    esi,[esi+0x0]
c00269b0:	89 f9                	mov    ecx,edi
c00269b2:	85 ff                	test   edi,edi
c00269b4:	75 0b                	jne    c00269c1 <__udivdi3+0x45>
c00269b6:	b8 01 00 00 00       	mov    eax,0x1
c00269bb:	31 d2                	xor    edx,edx
c00269bd:	f7 f7                	div    edi
c00269bf:	89 c1                	mov    ecx,eax
c00269c1:	31 d2                	xor    edx,edx
c00269c3:	89 f0                	mov    eax,esi
c00269c5:	f7 f1                	div    ecx
c00269c7:	89 c3                	mov    ebx,eax
c00269c9:	89 e8                	mov    eax,ebp
c00269cb:	f7 f1                	div    ecx
c00269cd:	89 da                	mov    edx,ebx
c00269cf:	83 c4 1c             	add    esp,0x1c
c00269d2:	5b                   	pop    ebx
c00269d3:	5e                   	pop    esi
c00269d4:	5f                   	pop    edi
c00269d5:	5d                   	pop    ebp
c00269d6:	c3                   	ret    
c00269d7:	90                   	nop
c00269d8:	39 f2                	cmp    edx,esi
c00269da:	77 1c                	ja     c00269f8 <__udivdi3+0x7c>
c00269dc:	0f bd da             	bsr    ebx,edx
c00269df:	83 f3 1f             	xor    ebx,0x1f
c00269e2:	75 24                	jne    c0026a08 <__udivdi3+0x8c>
c00269e4:	39 f2                	cmp    edx,esi
c00269e6:	72 08                	jb     c00269f0 <__udivdi3+0x74>
c00269e8:	39 ef                	cmp    edi,ebp
c00269ea:	0f 87 84 00 00 00    	ja     c0026a74 <__udivdi3+0xf8>
c00269f0:	b8 01 00 00 00       	mov    eax,0x1
c00269f5:	eb ac                	jmp    c00269a3 <__udivdi3+0x27>
c00269f7:	90                   	nop
c00269f8:	31 db                	xor    ebx,ebx
c00269fa:	31 c0                	xor    eax,eax
c00269fc:	89 da                	mov    edx,ebx
c00269fe:	83 c4 1c             	add    esp,0x1c
c0026a01:	5b                   	pop    ebx
c0026a02:	5e                   	pop    esi
c0026a03:	5f                   	pop    edi
c0026a04:	5d                   	pop    ebp
c0026a05:	c3                   	ret    
c0026a06:	66 90                	xchg   ax,ax
c0026a08:	b8 20 00 00 00       	mov    eax,0x20
c0026a0d:	29 d8                	sub    eax,ebx
c0026a0f:	88 d9                	mov    cl,bl
c0026a11:	d3 e2                	shl    edx,cl
c0026a13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a17:	89 fa                	mov    edx,edi
c0026a19:	88 c1                	mov    cl,al
c0026a1b:	d3 ea                	shr    edx,cl
c0026a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a21:	09 d1                	or     ecx,edx
c0026a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a27:	88 d9                	mov    cl,bl
c0026a29:	d3 e7                	shl    edi,cl
c0026a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a2f:	89 f7                	mov    edi,esi
c0026a31:	88 c1                	mov    cl,al
c0026a33:	d3 ef                	shr    edi,cl
c0026a35:	88 d9                	mov    cl,bl
c0026a37:	d3 e6                	shl    esi,cl
c0026a39:	89 ea                	mov    edx,ebp
c0026a3b:	88 c1                	mov    cl,al
c0026a3d:	d3 ea                	shr    edx,cl
c0026a3f:	09 d6                	or     esi,edx
c0026a41:	89 f0                	mov    eax,esi
c0026a43:	89 fa                	mov    edx,edi
c0026a45:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a49:	89 d7                	mov    edi,edx
c0026a4b:	89 c6                	mov    esi,eax
c0026a4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a51:	39 d7                	cmp    edi,edx
c0026a53:	72 13                	jb     c0026a68 <__udivdi3+0xec>
c0026a55:	74 09                	je     c0026a60 <__udivdi3+0xe4>
c0026a57:	89 f0                	mov    eax,esi
c0026a59:	31 db                	xor    ebx,ebx
c0026a5b:	e9 43 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a60:	88 d9                	mov    cl,bl
c0026a62:	d3 e5                	shl    ebp,cl
c0026a64:	39 c5                	cmp    ebp,eax
c0026a66:	73 ef                	jae    c0026a57 <__udivdi3+0xdb>
c0026a68:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a6b:	31 db                	xor    ebx,ebx
c0026a6d:	e9 31 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a72:	66 90                	xchg   ax,ax
c0026a74:	31 c0                	xor    eax,eax
c0026a76:	e9 28 ff ff ff       	jmp    c00269a3 <__udivdi3+0x27>
c0026a7b:	90                   	nop

c0026a7c <__umoddi3>:
c0026a7c:	55                   	push   ebp
c0026a7d:	57                   	push   edi
c0026a7e:	56                   	push   esi
c0026a7f:	53                   	push   ebx
c0026a80:	83 ec 1c             	sub    esp,0x1c
c0026a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a93:	89 da                	mov    edx,ebx
c0026a95:	85 c0                	test   eax,eax
c0026a97:	75 37                	jne    c0026ad0 <__umoddi3+0x54>
c0026a99:	39 df                	cmp    edi,ebx
c0026a9b:	76 13                	jbe    c0026ab0 <__umoddi3+0x34>
c0026a9d:	89 f0                	mov    eax,esi
c0026a9f:	f7 f7                	div    edi
c0026aa1:	89 d0                	mov    eax,edx
c0026aa3:	31 d2                	xor    edx,edx
c0026aa5:	83 c4 1c             	add    esp,0x1c
c0026aa8:	5b                   	pop    ebx
c0026aa9:	5e                   	pop    esi
c0026aaa:	5f                   	pop    edi
c0026aab:	5d                   	pop    ebp
c0026aac:	c3                   	ret    
c0026aad:	8d 76 00             	lea    esi,[esi+0x0]
c0026ab0:	89 fd                	mov    ebp,edi
c0026ab2:	85 ff                	test   edi,edi
c0026ab4:	75 0b                	jne    c0026ac1 <__umoddi3+0x45>
c0026ab6:	b8 01 00 00 00       	mov    eax,0x1
c0026abb:	31 d2                	xor    edx,edx
c0026abd:	f7 f7                	div    edi
c0026abf:	89 c5                	mov    ebp,eax
c0026ac1:	89 d8                	mov    eax,ebx
c0026ac3:	31 d2                	xor    edx,edx
c0026ac5:	f7 f5                	div    ebp
c0026ac7:	89 f0                	mov    eax,esi
c0026ac9:	f7 f5                	div    ebp
c0026acb:	89 d0                	mov    eax,edx
c0026acd:	eb d4                	jmp    c0026aa3 <__umoddi3+0x27>
c0026acf:	90                   	nop
c0026ad0:	89 f1                	mov    ecx,esi
c0026ad2:	39 d8                	cmp    eax,ebx
c0026ad4:	76 0a                	jbe    c0026ae0 <__umoddi3+0x64>
c0026ad6:	89 f0                	mov    eax,esi
c0026ad8:	83 c4 1c             	add    esp,0x1c
c0026adb:	5b                   	pop    ebx
c0026adc:	5e                   	pop    esi
c0026add:	5f                   	pop    edi
c0026ade:	5d                   	pop    ebp
c0026adf:	c3                   	ret    
c0026ae0:	0f bd e8             	bsr    ebp,eax
c0026ae3:	83 f5 1f             	xor    ebp,0x1f
c0026ae6:	75 1c                	jne    c0026b04 <__umoddi3+0x88>
c0026ae8:	39 d8                	cmp    eax,ebx
c0026aea:	72 04                	jb     c0026af0 <__umoddi3+0x74>
c0026aec:	39 f7                	cmp    edi,esi
c0026aee:	77 08                	ja     c0026af8 <__umoddi3+0x7c>
c0026af0:	89 da                	mov    edx,ebx
c0026af2:	29 fe                	sub    esi,edi
c0026af4:	19 c2                	sbb    edx,eax
c0026af6:	89 f1                	mov    ecx,esi
c0026af8:	89 c8                	mov    eax,ecx
c0026afa:	83 c4 1c             	add    esp,0x1c
c0026afd:	5b                   	pop    ebx
c0026afe:	5e                   	pop    esi
c0026aff:	5f                   	pop    edi
c0026b00:	5d                   	pop    ebp
c0026b01:	c3                   	ret    
c0026b02:	66 90                	xchg   ax,ax
c0026b04:	ba 20 00 00 00       	mov    edx,0x20
c0026b09:	29 ea                	sub    edx,ebp
c0026b0b:	89 e9                	mov    ecx,ebp
c0026b0d:	d3 e0                	shl    eax,cl
c0026b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b13:	89 f8                	mov    eax,edi
c0026b15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b19:	88 d1                	mov    cl,dl
c0026b1b:	d3 e8                	shr    eax,cl
c0026b1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b21:	09 c1                	or     ecx,eax
c0026b23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b27:	89 e9                	mov    ecx,ebp
c0026b29:	d3 e7                	shl    edi,cl
c0026b2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b2f:	89 d8                	mov    eax,ebx
c0026b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b35:	88 d1                	mov    cl,dl
c0026b37:	d3 e8                	shr    eax,cl
c0026b39:	89 c7                	mov    edi,eax
c0026b3b:	89 e9                	mov    ecx,ebp
c0026b3d:	d3 e3                	shl    ebx,cl
c0026b3f:	89 f0                	mov    eax,esi
c0026b41:	88 d1                	mov    cl,dl
c0026b43:	d3 e8                	shr    eax,cl
c0026b45:	09 d8                	or     eax,ebx
c0026b47:	89 e9                	mov    ecx,ebp
c0026b49:	d3 e6                	shl    esi,cl
c0026b4b:	89 f3                	mov    ebx,esi
c0026b4d:	89 fa                	mov    edx,edi
c0026b4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b53:	89 d1                	mov    ecx,edx
c0026b55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b59:	89 c6                	mov    esi,eax
c0026b5b:	89 d7                	mov    edi,edx
c0026b5d:	39 d1                	cmp    ecx,edx
c0026b5f:	72 27                	jb     c0026b88 <__umoddi3+0x10c>
c0026b61:	74 21                	je     c0026b84 <__umoddi3+0x108>
c0026b63:	89 ca                	mov    edx,ecx
c0026b65:	29 f3                	sub    ebx,esi
c0026b67:	19 fa                	sbb    edx,edi
c0026b69:	89 d0                	mov    eax,edx
c0026b6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b6f:	d3 e0                	shl    eax,cl
c0026b71:	89 e9                	mov    ecx,ebp
c0026b73:	d3 eb                	shr    ebx,cl
c0026b75:	09 d8                	or     eax,ebx
c0026b77:	d3 ea                	shr    edx,cl
c0026b79:	83 c4 1c             	add    esp,0x1c
c0026b7c:	5b                   	pop    ebx
c0026b7d:	5e                   	pop    esi
c0026b7e:	5f                   	pop    edi
c0026b7f:	5d                   	pop    ebp
c0026b80:	c3                   	ret    
c0026b81:	8d 76 00             	lea    esi,[esi+0x0]
c0026b84:	39 c3                	cmp    ebx,eax
c0026b86:	73 db                	jae    c0026b63 <__umoddi3+0xe7>
c0026b88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b90:	89 d7                	mov    edi,edx
c0026b92:	89 c6                	mov    esi,eax
c0026b94:	eb cd                	jmp    c0026b63 <__umoddi3+0xe7>

c0026b96 <__addsf3>:
c0026b96:	55                   	push   ebp
c0026b97:	89 e5                	mov    ebp,esp
c0026b99:	57                   	push   edi
c0026b9a:	56                   	push   esi
c0026b9b:	53                   	push   ebx
c0026b9c:	83 ec 08             	sub    esp,0x8
c0026b9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ba2:	89 fa                	mov    edx,edi
c0026ba4:	89 f8                	mov    eax,edi
c0026ba6:	c1 f8 17             	sar    eax,0x17
c0026ba9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026bac:	c1 e2 08             	shl    edx,0x8
c0026baf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026bb5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bb8:	89 de                	mov    esi,ebx
c0026bba:	c1 fe 17             	sar    esi,0x17
c0026bbd:	c1 e3 08             	shl    ebx,0x8
c0026bc0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bc6:	31 f0                	xor    eax,esi
c0026bc8:	0f 88 3b 01 00 00    	js     c0026d09 <__addsf3+0x173>
c0026bce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bd1:	29 f1                	sub    ecx,esi
c0026bd3:	85 c9                	test   ecx,ecx
c0026bd5:	7e 54                	jle    c0026c2b <__addsf3+0x95>
c0026bd7:	89 f0                	mov    eax,esi
c0026bd9:	84 c0                	test   al,al
c0026bdb:	75 10                	jne    c0026bed <__addsf3+0x57>
c0026bdd:	85 db                	test   ebx,ebx
c0026bdf:	0f 84 aa 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026be5:	49                   	dec    ecx
c0026be6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026be9:	74 38                	je     c0026c23 <__addsf3+0x8d>
c0026beb:	eb 13                	jmp    c0026c00 <__addsf3+0x6a>
c0026bed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bf0:	f7 d0                	not    eax
c0026bf2:	84 c0                	test   al,al
c0026bf4:	0f 84 95 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026bfa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c00:	83 f9 1f             	cmp    ecx,0x1f
c0026c03:	0f 8f 86 02 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026c09:	89 de                	mov    esi,ebx
c0026c0b:	d3 ee                	shr    esi,cl
c0026c0d:	b8 20 00 00 00       	mov    eax,0x20
c0026c12:	29 c8                	sub    eax,ecx
c0026c14:	89 c1                	mov    ecx,eax
c0026c16:	d3 e3                	shl    ebx,cl
c0026c18:	31 c0                	xor    eax,eax
c0026c1a:	85 db                	test   ebx,ebx
c0026c1c:	0f 95 c0             	setne  al
c0026c1f:	09 f0                	or     eax,esi
c0026c21:	01 d0                	add    eax,edx
c0026c23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c26:	e9 b6 00 00 00       	jmp    c0026ce1 <__addsf3+0x14b>
c0026c2b:	74 5c                	je     c0026c89 <__addsf3+0xf3>
c0026c2d:	89 f1                	mov    ecx,esi
c0026c2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c39:	75 14                	jne    c0026c4f <__addsf3+0xb9>
c0026c3b:	85 d2                	test   edx,edx
c0026c3d:	0f 84 4c 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026c43:	49                   	dec    ecx
c0026c44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c47:	0f 84 94 00 00 00    	je     c0026ce1 <__addsf3+0x14b>
c0026c4d:	eb 12                	jmp    c0026c61 <__addsf3+0xcb>
c0026c4f:	89 f0                	mov    eax,esi
c0026c51:	f7 d0                	not    eax
c0026c53:	84 c0                	test   al,al
c0026c55:	0f 84 34 02 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026c5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c64:	83 f9 1f             	cmp    ecx,0x1f
c0026c67:	0f 8f 22 02 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026c6d:	89 d7                	mov    edi,edx
c0026c6f:	d3 ef                	shr    edi,cl
c0026c71:	b8 20 00 00 00       	mov    eax,0x20
c0026c76:	29 c8                	sub    eax,ecx
c0026c78:	89 c1                	mov    ecx,eax
c0026c7a:	d3 e2                	shl    edx,cl
c0026c7c:	31 c0                	xor    eax,eax
c0026c7e:	85 d2                	test   edx,edx
c0026c80:	0f 95 c0             	setne  al
c0026c83:	09 f8                	or     eax,edi
c0026c85:	01 d8                	add    eax,ebx
c0026c87:	eb 58                	jmp    c0026ce1 <__addsf3+0x14b>
c0026c89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c95:	75 32                	jne    c0026cc9 <__addsf3+0x133>
c0026c97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c9b:	75 1f                	jne    c0026cbc <__addsf3+0x126>
c0026c9d:	85 d2                	test   edx,edx
c0026c9f:	0f 84 e0 01 00 00    	je     c0026e85 <__addsf3+0x2ef>
c0026ca5:	85 db                	test   ebx,ebx
c0026ca7:	0f 84 e2 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026cad:	89 d0                	mov    eax,edx
c0026caf:	01 d8                	add    eax,ebx
c0026cb1:	0f 89 a9 01 00 00    	jns    c0026e60 <__addsf3+0x2ca>
c0026cb7:	e9 9d 01 00 00       	jmp    c0026e59 <__addsf3+0x2c3>
c0026cbc:	85 d2                	test   edx,edx
c0026cbe:	0f 85 cb 01 00 00    	jne    c0026e8f <__addsf3+0x2f9>
c0026cc4:	e9 bc 01 00 00       	jmp    c0026e85 <__addsf3+0x2ef>
c0026cc9:	31 c0                	xor    eax,eax
c0026ccb:	89 f1                	mov    ecx,esi
c0026ccd:	f7 d1                	not    ecx
c0026ccf:	84 c9                	test   cl,cl
c0026cd1:	0f 84 90 01 00 00    	je     c0026e67 <__addsf3+0x2d1>
c0026cd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cda:	d1 e8                	shr    eax,1
c0026cdc:	e9 86 01 00 00       	jmp    c0026e67 <__addsf3+0x2d1>
c0026ce1:	85 c0                	test   eax,eax
c0026ce3:	0f 89 7e 01 00 00    	jns    c0026e67 <__addsf3+0x2d1>
c0026ce9:	46                   	inc    esi
c0026cea:	89 f2                	mov    edx,esi
c0026cec:	f7 d2                	not    edx
c0026cee:	84 d2                	test   dl,dl
c0026cf0:	0f 84 6f 01 00 00    	je     c0026e65 <__addsf3+0x2cf>
c0026cf6:	89 c2                	mov    edx,eax
c0026cf8:	83 e2 01             	and    edx,0x1
c0026cfb:	d1 e8                	shr    eax,1
c0026cfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d02:	09 d0                	or     eax,edx
c0026d04:	e9 5e 01 00 00       	jmp    c0026e67 <__addsf3+0x2d1>
c0026d09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d10:	89 f0                	mov    eax,esi
c0026d12:	0f b6 c0             	movzx  eax,al
c0026d15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d18:	29 c1                	sub    ecx,eax
c0026d1a:	85 c9                	test   ecx,ecx
c0026d1c:	7e 55                	jle    c0026d73 <__addsf3+0x1dd>
c0026d1e:	85 c0                	test   eax,eax
c0026d20:	75 11                	jne    c0026d33 <__addsf3+0x19d>
c0026d22:	85 db                	test   ebx,ebx
c0026d24:	0f 84 65 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d2a:	49                   	dec    ecx
c0026d2b:	75 19                	jne    c0026d46 <__addsf3+0x1b0>
c0026d2d:	89 d0                	mov    eax,edx
c0026d2f:	29 d8                	sub    eax,ebx
c0026d31:	eb 38                	jmp    c0026d6b <__addsf3+0x1d5>
c0026d33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d36:	f7 d0                	not    eax
c0026d38:	84 c0                	test   al,al
c0026d3a:	0f 84 4f 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d46:	83 f9 1f             	cmp    ecx,0x1f
c0026d49:	0f 8f 40 01 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026d4f:	89 de                	mov    esi,ebx
c0026d51:	d3 ee                	shr    esi,cl
c0026d53:	b8 20 00 00 00       	mov    eax,0x20
c0026d58:	29 c8                	sub    eax,ecx
c0026d5a:	89 c1                	mov    ecx,eax
c0026d5c:	d3 e3                	shl    ebx,cl
c0026d5e:	31 c0                	xor    eax,eax
c0026d60:	85 db                	test   ebx,ebx
c0026d62:	0f 95 c0             	setne  al
c0026d65:	09 f0                	or     eax,esi
c0026d67:	29 c2                	sub    edx,eax
c0026d69:	89 d0                	mov    eax,edx
c0026d6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d6e:	e9 af 00 00 00       	jmp    c0026e22 <__addsf3+0x28c>
c0026d73:	74 5c                	je     c0026dd1 <__addsf3+0x23b>
c0026d75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d7f:	75 14                	jne    c0026d95 <__addsf3+0x1ff>
c0026d81:	85 d2                	test   edx,edx
c0026d83:	0f 84 06 01 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026d89:	48                   	dec    eax
c0026d8a:	75 1b                	jne    c0026da7 <__addsf3+0x211>
c0026d8c:	89 d8                	mov    eax,ebx
c0026d8e:	29 d0                	sub    eax,edx
c0026d90:	e9 8d 00 00 00       	jmp    c0026e22 <__addsf3+0x28c>
c0026d95:	89 f1                	mov    ecx,esi
c0026d97:	f7 d1                	not    ecx
c0026d99:	84 c9                	test   cl,cl
c0026d9b:	0f 84 ee 00 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026da1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026daa:	83 f8 1f             	cmp    eax,0x1f
c0026dad:	0f 8f dc 00 00 00    	jg     c0026e8f <__addsf3+0x2f9>
c0026db3:	89 d7                	mov    edi,edx
c0026db5:	88 c1                	mov    cl,al
c0026db7:	d3 ef                	shr    edi,cl
c0026db9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dbe:	29 c1                	sub    ecx,eax
c0026dc0:	d3 e2                	shl    edx,cl
c0026dc2:	31 c0                	xor    eax,eax
c0026dc4:	85 d2                	test   edx,edx
c0026dc6:	0f 95 c0             	setne  al
c0026dc9:	09 f8                	or     eax,edi
c0026dcb:	29 c3                	sub    ebx,eax
c0026dcd:	89 d8                	mov    eax,ebx
c0026dcf:	eb 51                	jmp    c0026e22 <__addsf3+0x28c>
c0026dd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dd4:	40                   	inc    eax
c0026dd5:	a8 fe                	test   al,0xfe
c0026dd7:	75 3d                	jne    c0026e16 <__addsf3+0x280>
c0026dd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ddd:	0f 85 a7 00 00 00    	jne    c0026e8a <__addsf3+0x2f4>
c0026de3:	85 d2                	test   edx,edx
c0026de5:	75 12                	jne    c0026df9 <__addsf3+0x263>
c0026de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dea:	85 db                	test   ebx,ebx
c0026dec:	0f 85 9d 00 00 00    	jne    c0026e8f <__addsf3+0x2f9>
c0026df2:	31 ff                	xor    edi,edi
c0026df4:	e9 96 00 00 00       	jmp    c0026e8f <__addsf3+0x2f9>
c0026df9:	85 db                	test   ebx,ebx
c0026dfb:	0f 84 8e 00 00 00    	je     c0026e8f <__addsf3+0x2f9>
c0026e01:	89 d0                	mov    eax,edx
c0026e03:	29 d8                	sub    eax,ebx
c0026e05:	79 06                	jns    c0026e0d <__addsf3+0x277>
c0026e07:	89 d8                	mov    eax,ebx
c0026e09:	29 d0                	sub    eax,edx
c0026e0b:	eb 5a                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e0d:	bf 00 00 00 00       	mov    edi,0x0
c0026e12:	74 7b                	je     c0026e8f <__addsf3+0x2f9>
c0026e14:	eb 4a                	jmp    c0026e60 <__addsf3+0x2ca>
c0026e16:	89 d0                	mov    eax,edx
c0026e18:	29 d8                	sub    eax,ebx
c0026e1a:	79 12                	jns    c0026e2e <__addsf3+0x298>
c0026e1c:	89 d8                	mov    eax,ebx
c0026e1e:	29 d0                	sub    eax,edx
c0026e20:	eb 09                	jmp    c0026e2b <__addsf3+0x295>
c0026e22:	85 c0                	test   eax,eax
c0026e24:	79 41                	jns    c0026e67 <__addsf3+0x2d1>
c0026e26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e2e:	31 f6                	xor    esi,esi
c0026e30:	85 c0                	test   eax,eax
c0026e32:	74 33                	je     c0026e67 <__addsf3+0x2d1>
c0026e34:	0f bd c8             	bsr    ecx,eax
c0026e37:	83 f1 1f             	xor    ecx,0x1f
c0026e3a:	d3 e0                	shl    eax,cl
c0026e3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e40:	39 ca                	cmp    edx,ecx
c0026e42:	7f 10                	jg     c0026e54 <__addsf3+0x2be>
c0026e44:	29 d1                	sub    ecx,edx
c0026e46:	41                   	inc    ecx
c0026e47:	d3 e8                	shr    eax,cl
c0026e49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e52:	eb 13                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e57:	29 ce                	sub    esi,ecx
c0026e59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e5e:	eb 07                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e63:	eb 02                	jmp    c0026e67 <__addsf3+0x2d1>
c0026e65:	31 c0                	xor    eax,eax
c0026e67:	89 c2                	mov    edx,eax
c0026e69:	c1 ea 08             	shr    edx,0x8
c0026e6c:	a8 7f                	test   al,0x7f
c0026e6e:	0f 95 c1             	setne  cl
c0026e71:	09 d1                	or     ecx,edx
c0026e73:	83 e1 01             	and    ecx,0x1
c0026e76:	c1 e8 07             	shr    eax,0x7
c0026e79:	21 c8                	and    eax,ecx
c0026e7b:	c1 e6 17             	shl    esi,0x17
c0026e7e:	09 d6                	or     esi,edx
c0026e80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e83:	eb 0a                	jmp    c0026e8f <__addsf3+0x2f9>
c0026e85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e88:	eb 05                	jmp    c0026e8f <__addsf3+0x2f9>
c0026e8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e8f:	89 f8                	mov    eax,edi
c0026e91:	5a                   	pop    edx
c0026e92:	59                   	pop    ecx
c0026e93:	5b                   	pop    ebx
c0026e94:	5e                   	pop    esi
c0026e95:	5f                   	pop    edi
c0026e96:	5d                   	pop    ebp
c0026e97:	c3                   	ret    

c0026e98 <__subsf3>:
c0026e98:	55                   	push   ebp
c0026e99:	89 e5                	mov    ebp,esp
c0026e9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e9e:	05 00 00 00 80       	add    eax,0x80000000
c0026ea3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026ea6:	5d                   	pop    ebp
c0026ea7:	e9 ea fc ff ff       	jmp    c0026b96 <__addsf3>

c0026eac <__negsf2>:
c0026eac:	55                   	push   ebp
c0026ead:	89 e5                	mov    ebp,esp
c0026eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026eb2:	05 00 00 00 80       	add    eax,0x80000000
c0026eb7:	5d                   	pop    ebp
c0026eb8:	c3                   	ret    

c0026eb9 <__mulsf3>:
c0026eb9:	55                   	push   ebp
c0026eba:	89 e5                	mov    ebp,esp
c0026ebc:	57                   	push   edi
c0026ebd:	56                   	push   esi
c0026ebe:	53                   	push   ebx
c0026ebf:	83 ec 1c             	sub    esp,0x1c
c0026ec2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ec5:	89 f0                	mov    eax,esi
c0026ec7:	89 f1                	mov    ecx,esi
c0026ec9:	c1 f9 17             	sar    ecx,0x17
c0026ecc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ecf:	c1 e0 08             	shl    eax,0x8
c0026ed2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ed7:	89 c1                	mov    ecx,eax
c0026ed9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026edc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026edf:	89 c7                	mov    edi,eax
c0026ee1:	c1 ff 17             	sar    edi,0x17
c0026ee4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ee8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026eeb:	89 f8                	mov    eax,edi
c0026eed:	0f b6 c0             	movzx  eax,al
c0026ef0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ef3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ef7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026efa:	42                   	inc    edx
c0026efb:	80 e2 fe             	and    dl,0xfe
c0026efe:	75 7b                	jne    c0026f7b <__mulsf3+0xc2>
c0026f00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f04:	74 54                	je     c0026f5a <__mulsf3+0xa1>
c0026f06:	85 c9                	test   ecx,ecx
c0026f08:	0f 85 64 01 00 00    	jne    c0027072 <__mulsf3+0x1b9>
c0026f0e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f11:	80 e2 fe             	and    dl,0xfe
c0026f14:	75 1f                	jne    c0026f35 <__mulsf3+0x7c>
c0026f16:	85 c0                	test   eax,eax
c0026f18:	b8 00 00 00 00       	mov    eax,0x0
c0026f1d:	74 29                	je     c0026f48 <__mulsf3+0x8f>
c0026f1f:	53                   	push   ebx
c0026f20:	53                   	push   ebx
c0026f21:	50                   	push   eax
c0026f22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f25:	e8 96 05 00 00       	call   c00274c0 <__nesf2>
c0026f2a:	83 c4 10             	add    esp,0x10
c0026f2d:	85 c0                	test   eax,eax
c0026f2f:	0f 85 3a 01 00 00    	jne    c002706f <__mulsf3+0x1b6>
c0026f35:	85 ff                	test   edi,edi
c0026f37:	0f 89 35 01 00 00    	jns    c0027072 <__mulsf3+0x1b9>
c0026f3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f43:	e9 2a 01 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026f48:	51                   	push   ecx
c0026f49:	51                   	push   ecx
c0026f4a:	50                   	push   eax
c0026f4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f4e:	e8 6d 05 00 00       	call   c00274c0 <__nesf2>
c0026f53:	83 c4 10             	add    esp,0x10
c0026f56:	85 c0                	test   eax,eax
c0026f58:	eb 15                	jmp    c0026f6f <__mulsf3+0xb6>
c0026f5a:	85 c9                	test   ecx,ecx
c0026f5c:	74 0b                	je     c0026f69 <__mulsf3+0xb0>
c0026f5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f61:	01 c9                	add    ecx,ecx
c0026f63:	78 16                	js     c0026f7b <__mulsf3+0xc2>
c0026f65:	89 d3                	mov    ebx,edx
c0026f67:	eb f5                	jmp    c0026f5e <__mulsf3+0xa5>
c0026f69:	89 f8                	mov    eax,edi
c0026f6b:	f7 d0                	not    eax
c0026f6d:	84 c0                	test   al,al
c0026f6f:	75 c4                	jne    c0026f35 <__mulsf3+0x7c>
c0026f71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f76:	e9 f7 00 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026f7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f7e:	c1 e6 08             	shl    esi,0x8
c0026f81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f87:	8d 57 01             	lea    edx,[edi+0x1]
c0026f8a:	80 e2 fe             	and    dl,0xfe
c0026f8d:	75 63                	jne    c0026ff2 <__mulsf3+0x139>
c0026f8f:	85 c0                	test   eax,eax
c0026f91:	74 2f                	je     c0026fc2 <__mulsf3+0x109>
c0026f93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f97:	0f 89 d2 00 00 00    	jns    c002706f <__mulsf3+0x1b6>
c0026f9d:	52                   	push   edx
c0026f9e:	52                   	push   edx
c0026f9f:	6a 00                	push   0x0
c0026fa1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa4:	e8 dc 04 00 00       	call   c0027485 <__eqsf2>
c0026fa9:	83 c4 10             	add    esp,0x10
c0026fac:	85 c0                	test   eax,eax
c0026fae:	0f 85 bb 00 00 00    	jne    c002706f <__mulsf3+0x1b6>
c0026fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fbd:	e9 b0 00 00 00       	jmp    c0027072 <__mulsf3+0x1b9>
c0026fc2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fc5:	50                   	push   eax
c0026fc6:	50                   	push   eax
c0026fc7:	6a 00                	push   0x0
c0026fc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fcc:	e8 b4 04 00 00       	call   c0027485 <__eqsf2>
c0026fd1:	83 c4 10             	add    esp,0x10
c0026fd4:	85 c0                	test   eax,eax
c0026fd6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fd9:	75 0c                	jne    c0026fe7 <__mulsf3+0x12e>
c0026fdb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fdf:	0f 89 8a 00 00 00    	jns    c002706f <__mulsf3+0x1b6>
c0026fe5:	eb cd                	jmp    c0026fb4 <__mulsf3+0xfb>
c0026fe7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fea:	01 f6                	add    esi,esi
c0026fec:	78 04                	js     c0026ff2 <__mulsf3+0x139>
c0026fee:	89 c3                	mov    ebx,eax
c0026ff0:	eb f5                	jmp    c0026fe7 <__mulsf3+0x12e>
c0026ff2:	89 c8                	mov    eax,ecx
c0026ff4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ff9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fff:	f7 e6                	mul    esi
c0027001:	85 c0                	test   eax,eax
c0027003:	0f 95 c0             	setne  al
c0027006:	0f b6 c0             	movzx  eax,al
c0027009:	09 c2                	or     edx,eax
c002700b:	78 03                	js     c0027010 <__mulsf3+0x157>
c002700d:	01 d2                	add    edx,edx
c002700f:	4b                   	dec    ebx
c0027010:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027016:	7f 22                	jg     c002703a <__mulsf3+0x181>
c0027018:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002701e:	85 db                	test   ebx,ebx
c0027020:	7f 23                	jg     c0027045 <__mulsf3+0x18c>
c0027022:	83 fb e9             	cmp    ebx,0xffffffe9
c0027025:	7c 1a                	jl     c0027041 <__mulsf3+0x188>
c0027027:	81 ca 00 00 00 80    	or     edx,0x80000000
c002702d:	b9 01 00 00 00       	mov    ecx,0x1
c0027032:	29 d9                	sub    ecx,ebx
c0027034:	d3 ea                	shr    edx,cl
c0027036:	31 db                	xor    ebx,ebx
c0027038:	eb 0b                	jmp    c0027045 <__mulsf3+0x18c>
c002703a:	bb ff 00 00 00       	mov    ebx,0xff
c002703f:	eb 02                	jmp    c0027043 <__mulsf3+0x18a>
c0027041:	31 db                	xor    ebx,ebx
c0027043:	31 d2                	xor    edx,edx
c0027045:	89 d0                	mov    eax,edx
c0027047:	c1 e8 08             	shr    eax,0x8
c002704a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002704d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027053:	09 fb                	or     ebx,edi
c0027055:	c1 e3 17             	shl    ebx,0x17
c0027058:	09 c3                	or     ebx,eax
c002705a:	f6 c2 7f             	test   dl,0x7f
c002705d:	0f 95 c1             	setne  cl
c0027060:	09 c8                	or     eax,ecx
c0027062:	83 e0 01             	and    eax,0x1
c0027065:	c1 ea 07             	shr    edx,0x7
c0027068:	21 c2                	and    edx,eax
c002706a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002706d:	eb 03                	jmp    c0027072 <__mulsf3+0x1b9>
c002706f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027072:	89 f0                	mov    eax,esi
c0027074:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027077:	5b                   	pop    ebx
c0027078:	5e                   	pop    esi
c0027079:	5f                   	pop    edi
c002707a:	5d                   	pop    ebp
c002707b:	c3                   	ret    

c002707c <__divsf3>:
c002707c:	55                   	push   ebp
c002707d:	89 e5                	mov    ebp,esp
c002707f:	57                   	push   edi
c0027080:	56                   	push   esi
c0027081:	53                   	push   ebx
c0027082:	83 ec 1c             	sub    esp,0x1c
c0027085:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027088:	89 d8                	mov    eax,ebx
c002708a:	89 d9                	mov    ecx,ebx
c002708c:	c1 f9 17             	sar    ecx,0x17
c002708f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027092:	c1 e0 08             	shl    eax,0x8
c0027095:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002709a:	89 c1                	mov    ecx,eax
c002709c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002709f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270a2:	89 c7                	mov    edi,eax
c00270a4:	c1 ff 17             	sar    edi,0x17
c00270a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270ae:	89 f8                	mov    eax,edi
c00270b0:	0f b6 c0             	movzx  eax,al
c00270b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270b6:	29 c6                	sub    esi,eax
c00270b8:	83 c6 7f             	add    esi,0x7f
c00270bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270be:	42                   	inc    edx
c00270bf:	80 e2 fe             	and    dl,0xfe
c00270c2:	0f 85 9c 00 00 00    	jne    c0027164 <__divsf3+0xe8>
c00270c8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270cc:	74 33                	je     c0027101 <__divsf3+0x85>
c00270ce:	85 c9                	test   ecx,ecx
c00270d0:	0f 85 c7 01 00 00    	jne    c002729d <__divsf3+0x221>
c00270d6:	8d 57 01             	lea    edx,[edi+0x1]
c00270d9:	80 e2 fe             	and    dl,0xfe
c00270dc:	75 2f                	jne    c002710d <__divsf3+0x91>
c00270de:	85 c0                	test   eax,eax
c00270e0:	74 2b                	je     c002710d <__divsf3+0x91>
c00270e2:	51                   	push   ecx
c00270e3:	51                   	push   ecx
c00270e4:	6a 00                	push   0x0
c00270e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270e9:	e8 d2 03 00 00       	call   c00274c0 <__nesf2>
c00270ee:	83 c4 10             	add    esp,0x10
c00270f1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 85 a1 01 00 00    	jne    c002729d <__divsf3+0x221>
c00270fc:	e9 92 01 00 00       	jmp    c0027293 <__divsf3+0x217>
c0027101:	85 c9                	test   ecx,ecx
c0027103:	75 1b                	jne    c0027120 <__divsf3+0xa4>
c0027105:	8d 57 01             	lea    edx,[edi+0x1]
c0027108:	80 e2 fe             	and    dl,0xfe
c002710b:	74 1e                	je     c002712b <__divsf3+0xaf>
c002710d:	85 ff                	test   edi,edi
c002710f:	0f 89 88 01 00 00    	jns    c002729d <__divsf3+0x221>
c0027115:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002711b:	e9 7d 01 00 00       	jmp    c002729d <__divsf3+0x221>
c0027120:	8d 56 ff             	lea    edx,[esi-0x1]
c0027123:	01 c9                	add    ecx,ecx
c0027125:	78 3d                	js     c0027164 <__divsf3+0xe8>
c0027127:	89 d6                	mov    esi,edx
c0027129:	eb f5                	jmp    c0027120 <__divsf3+0xa4>
c002712b:	85 c0                	test   eax,eax
c002712d:	b8 00 00 00 00       	mov    eax,0x0
c0027132:	74 18                	je     c002714c <__divsf3+0xd0>
c0027134:	52                   	push   edx
c0027135:	52                   	push   edx
c0027136:	50                   	push   eax
c0027137:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002713a:	e8 81 03 00 00       	call   c00274c0 <__nesf2>
c002713f:	83 c4 10             	add    esp,0x10
c0027142:	85 c0                	test   eax,eax
c0027144:	0f 85 50 01 00 00    	jne    c002729a <__divsf3+0x21e>
c002714a:	eb c1                	jmp    c002710d <__divsf3+0x91>
c002714c:	56                   	push   esi
c002714d:	56                   	push   esi
c002714e:	50                   	push   eax
c002714f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027152:	e8 69 03 00 00       	call   c00274c0 <__nesf2>
c0027157:	83 c4 10             	add    esp,0x10
c002715a:	85 c0                	test   eax,eax
c002715c:	0f 84 31 01 00 00    	je     c0027293 <__divsf3+0x217>
c0027162:	eb a9                	jmp    c002710d <__divsf3+0x91>
c0027164:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027167:	c1 e3 08             	shl    ebx,0x8
c002716a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027170:	8d 57 01             	lea    edx,[edi+0x1]
c0027173:	80 e2 fe             	and    dl,0xfe
c0027176:	75 71                	jne    c00271e9 <__divsf3+0x16d>
c0027178:	85 c0                	test   eax,eax
c002717a:	ba 00 00 00 00       	mov    edx,0x0
c002717f:	74 2f                	je     c00271b0 <__divsf3+0x134>
c0027181:	51                   	push   ecx
c0027182:	51                   	push   ecx
c0027183:	52                   	push   edx
c0027184:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027187:	e8 f9 02 00 00       	call   c0027485 <__eqsf2>
c002718c:	83 c4 10             	add    esp,0x10
c002718f:	85 c0                	test   eax,eax
c0027191:	0f 85 03 01 00 00    	jne    c002729a <__divsf3+0x21e>
c0027197:	31 d2                	xor    edx,edx
c0027199:	89 d3                	mov    ebx,edx
c002719b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002719e:	31 f8                	xor    eax,edi
c00271a0:	0f 89 f7 00 00 00    	jns    c002729d <__divsf3+0x221>
c00271a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00271ab:	e9 ed 00 00 00       	jmp    c002729d <__divsf3+0x221>
c00271b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271b3:	50                   	push   eax
c00271b4:	50                   	push   eax
c00271b5:	52                   	push   edx
c00271b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b9:	e8 c7 02 00 00       	call   c0027485 <__eqsf2>
c00271be:	83 c4 10             	add    esp,0x10
c00271c1:	85 c0                	test   eax,eax
c00271c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271c6:	75 16                	jne    c00271de <__divsf3+0x162>
c00271c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271cb:	31 fb                	xor    ebx,edi
c00271cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271d9:	e9 bf 00 00 00       	jmp    c002729d <__divsf3+0x221>
c00271de:	8d 46 01             	lea    eax,[esi+0x1]
c00271e1:	01 db                	add    ebx,ebx
c00271e3:	78 04                	js     c00271e9 <__divsf3+0x16d>
c00271e5:	89 c6                	mov    esi,eax
c00271e7:	eb f5                	jmp    c00271de <__divsf3+0x162>
c00271e9:	89 c8                	mov    eax,ecx
c00271eb:	0d 00 00 00 80       	or     eax,0x80000000
c00271f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271f6:	31 d2                	xor    edx,edx
c00271f8:	39 d8                	cmp    eax,ebx
c00271fa:	72 07                	jb     c0027203 <__divsf3+0x187>
c00271fc:	29 d8                	sub    eax,ebx
c00271fe:	ba 01 00 00 00       	mov    edx,0x1
c0027203:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002720a:	01 d2                	add    edx,edx
c002720c:	89 c1                	mov    ecx,eax
c002720e:	01 c0                	add    eax,eax
c0027210:	85 c9                	test   ecx,ecx
c0027212:	78 04                	js     c0027218 <__divsf3+0x19c>
c0027214:	39 c3                	cmp    ebx,eax
c0027216:	77 05                	ja     c002721d <__divsf3+0x1a1>
c0027218:	29 d8                	sub    eax,ebx
c002721a:	83 ca 01             	or     edx,0x1
c002721d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027220:	75 e8                	jne    c002720a <__divsf3+0x18e>
c0027222:	85 c0                	test   eax,eax
c0027224:	0f 95 c0             	setne  al
c0027227:	0f b6 c0             	movzx  eax,al
c002722a:	c1 e2 06             	shl    edx,0x6
c002722d:	09 c2                	or     edx,eax
c002722f:	78 03                	js     c0027234 <__divsf3+0x1b8>
c0027231:	01 d2                	add    edx,edx
c0027233:	4e                   	dec    esi
c0027234:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002723a:	7f 22                	jg     c002725e <__divsf3+0x1e2>
c002723c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027242:	85 f6                	test   esi,esi
c0027244:	7f 23                	jg     c0027269 <__divsf3+0x1ed>
c0027246:	83 fe e9             	cmp    esi,0xffffffe9
c0027249:	7c 1a                	jl     c0027265 <__divsf3+0x1e9>
c002724b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027251:	b9 01 00 00 00       	mov    ecx,0x1
c0027256:	29 f1                	sub    ecx,esi
c0027258:	d3 ea                	shr    edx,cl
c002725a:	31 f6                	xor    esi,esi
c002725c:	eb 0b                	jmp    c0027269 <__divsf3+0x1ed>
c002725e:	be ff 00 00 00       	mov    esi,0xff
c0027263:	eb 02                	jmp    c0027267 <__divsf3+0x1eb>
c0027265:	31 f6                	xor    esi,esi
c0027267:	31 d2                	xor    edx,edx
c0027269:	89 d0                	mov    eax,edx
c002726b:	c1 e8 08             	shr    eax,0x8
c002726e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027271:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027277:	09 fe                	or     esi,edi
c0027279:	c1 e6 17             	shl    esi,0x17
c002727c:	09 c6                	or     esi,eax
c002727e:	f6 c2 7f             	test   dl,0x7f
c0027281:	0f 95 c1             	setne  cl
c0027284:	09 c8                	or     eax,ecx
c0027286:	83 e0 01             	and    eax,0x1
c0027289:	c1 ea 07             	shr    edx,0x7
c002728c:	21 c2                	and    edx,eax
c002728e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027291:	eb 0a                	jmp    c002729d <__divsf3+0x221>
c0027293:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027298:	eb 03                	jmp    c002729d <__divsf3+0x221>
c002729a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002729d:	89 d8                	mov    eax,ebx
c002729f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272a2:	5b                   	pop    ebx
c00272a3:	5e                   	pop    esi
c00272a4:	5f                   	pop    edi
c00272a5:	5d                   	pop    ebp
c00272a6:	c3                   	ret    

c00272a7 <__floatsisf>:
c00272a7:	55                   	push   ebp
c00272a8:	89 e5                	mov    ebp,esp
c00272aa:	53                   	push   ebx
c00272ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ae:	85 d2                	test   edx,edx
c00272b0:	7e 2b                	jle    c00272dd <__floatsisf+0x36>
c00272b2:	0f bd ca             	bsr    ecx,edx
c00272b5:	83 f1 1f             	xor    ecx,0x1f
c00272b8:	d3 e2                	shl    edx,cl
c00272ba:	89 d0                	mov    eax,edx
c00272bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c1:	89 c3                	mov    ebx,eax
c00272c3:	c1 eb 08             	shr    ebx,0x8
c00272c6:	80 e2 7f             	and    dl,0x7f
c00272c9:	0f 95 c2             	setne  dl
c00272cc:	09 da                	or     edx,ebx
c00272ce:	83 e2 01             	and    edx,0x1
c00272d1:	c1 e8 07             	shr    eax,0x7
c00272d4:	21 c2                	and    edx,eax
c00272d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272db:	eb 32                	jmp    c002730f <__floatsisf+0x68>
c00272dd:	b8 00 00 00 00       	mov    eax,0x0
c00272e2:	74 34                	je     c0027318 <__floatsisf+0x71>
c00272e4:	f7 da                	neg    edx
c00272e6:	0f bd ca             	bsr    ecx,edx
c00272e9:	83 f1 1f             	xor    ecx,0x1f
c00272ec:	d3 e2                	shl    edx,cl
c00272ee:	89 d0                	mov    eax,edx
c00272f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f5:	89 c3                	mov    ebx,eax
c00272f7:	c1 eb 08             	shr    ebx,0x8
c00272fa:	80 e2 7f             	and    dl,0x7f
c00272fd:	0f 95 c2             	setne  dl
c0027300:	09 da                	or     edx,ebx
c0027302:	83 e2 01             	and    edx,0x1
c0027305:	c1 e8 07             	shr    eax,0x7
c0027308:	21 c2                	and    edx,eax
c002730a:	b8 9e 01 00 00       	mov    eax,0x19e
c002730f:	29 c8                	sub    eax,ecx
c0027311:	c1 e0 17             	shl    eax,0x17
c0027314:	09 d8                	or     eax,ebx
c0027316:	01 d0                	add    eax,edx
c0027318:	5b                   	pop    ebx
c0027319:	5d                   	pop    ebp
c002731a:	c3                   	ret    

c002731b <__floatunsisf>:
c002731b:	55                   	push   ebp
c002731c:	89 e5                	mov    ebp,esp
c002731e:	53                   	push   ebx
c002731f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027322:	31 c0                	xor    eax,eax
c0027324:	85 d2                	test   edx,edx
c0027326:	74 32                	je     c002735a <__floatunsisf+0x3f>
c0027328:	0f bd ca             	bsr    ecx,edx
c002732b:	83 f1 1f             	xor    ecx,0x1f
c002732e:	d3 e2                	shl    edx,cl
c0027330:	89 d0                	mov    eax,edx
c0027332:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027337:	89 c3                	mov    ebx,eax
c0027339:	c1 eb 08             	shr    ebx,0x8
c002733c:	80 e2 7f             	and    dl,0x7f
c002733f:	0f 95 c2             	setne  dl
c0027342:	09 da                	or     edx,ebx
c0027344:	83 e2 01             	and    edx,0x1
c0027347:	c1 e8 07             	shr    eax,0x7
c002734a:	21 c2                	and    edx,eax
c002734c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027351:	29 c8                	sub    eax,ecx
c0027353:	c1 e0 17             	shl    eax,0x17
c0027356:	09 d8                	or     eax,ebx
c0027358:	01 d0                	add    eax,edx
c002735a:	5b                   	pop    ebx
c002735b:	5d                   	pop    ebp
c002735c:	c3                   	ret    

c002735d <__fixsfsi>:
c002735d:	55                   	push   ebp
c002735e:	89 e5                	mov    ebp,esp
c0027360:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027363:	89 d1                	mov    ecx,edx
c0027365:	c1 e1 08             	shl    ecx,0x8
c0027368:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002736e:	c1 fa 17             	sar    edx,0x17
c0027371:	78 1c                	js     c002738f <__fixsfsi+0x32>
c0027373:	83 ea 7f             	sub    edx,0x7f
c0027376:	31 c0                	xor    eax,eax
c0027378:	83 fa 1e             	cmp    edx,0x1e
c002737b:	77 40                	ja     c00273bd <__fixsfsi+0x60>
c002737d:	89 c8                	mov    eax,ecx
c002737f:	0d 00 00 00 80       	or     eax,0x80000000
c0027384:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027389:	29 d1                	sub    ecx,edx
c002738b:	d3 e8                	shr    eax,cl
c002738d:	eb 2e                	jmp    c00273bd <__fixsfsi+0x60>
c002738f:	31 c0                	xor    eax,eax
c0027391:	81 c2 81 00 00 00    	add    edx,0x81
c0027397:	78 24                	js     c00273bd <__fixsfsi+0x60>
c0027399:	83 fa 1e             	cmp    edx,0x1e
c002739c:	7e 09                	jle    c00273a7 <__fixsfsi+0x4a>
c002739e:	83 fa 1f             	cmp    edx,0x1f
c00273a1:	75 18                	jne    c00273bb <__fixsfsi+0x5e>
c00273a3:	85 c9                	test   ecx,ecx
c00273a5:	75 14                	jne    c00273bb <__fixsfsi+0x5e>
c00273a7:	89 c8                	mov    eax,ecx
c00273a9:	0d 00 00 00 80       	or     eax,0x80000000
c00273ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b3:	29 d1                	sub    ecx,edx
c00273b5:	d3 e8                	shr    eax,cl
c00273b7:	f7 d8                	neg    eax
c00273b9:	eb 02                	jmp    c00273bd <__fixsfsi+0x60>
c00273bb:	31 c0                	xor    eax,eax
c00273bd:	5d                   	pop    ebp
c00273be:	c3                   	ret    

c00273bf <__fixunssfsi>:
c00273bf:	55                   	push   ebp
c00273c0:	89 e5                	mov    ebp,esp
c00273c2:	53                   	push   ebx
c00273c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273c6:	89 d3                	mov    ebx,edx
c00273c8:	c1 fb 17             	sar    ebx,0x17
c00273cb:	83 eb 7f             	sub    ebx,0x7f
c00273ce:	31 c0                	xor    eax,eax
c00273d0:	83 fb 1f             	cmp    ebx,0x1f
c00273d3:	77 18                	ja     c00273ed <__fixunssfsi+0x2e>
c00273d5:	89 d0                	mov    eax,edx
c00273d7:	c1 e0 08             	shl    eax,0x8
c00273da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273df:	0d 00 00 00 80       	or     eax,0x80000000
c00273e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e9:	29 d9                	sub    ecx,ebx
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	5b                   	pop    ebx
c00273ee:	5d                   	pop    ebp
c00273ef:	c3                   	ret    

c00273f0 <__cmpsf2>:
c00273f0:	55                   	push   ebp
c00273f1:	89 e5                	mov    ebp,esp
c00273f3:	57                   	push   edi
c00273f4:	56                   	push   esi
c00273f5:	53                   	push   ebx
c00273f6:	83 ec 24             	sub    esp,0x24
c00273f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273ff:	e8 4f 10 00 00       	call   c0028453 <__truncdfsf2>
c0027404:	5a                   	pop    edx
c0027405:	59                   	pop    ecx
c0027406:	89 c3                	mov    ebx,eax
c0027408:	c1 e8 17             	shr    eax,0x17
c002740b:	0f b6 f0             	movzx  esi,al
c002740e:	89 d8                	mov    eax,ebx
c0027410:	c1 e8 1f             	shr    eax,0x1f
c0027413:	31 c6                	xor    esi,eax
c0027415:	c1 e3 08             	shl    ebx,0x8
c0027418:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002741b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002741e:	e8 30 10 00 00       	call   c0028453 <__truncdfsf2>
c0027423:	83 c4 10             	add    esp,0x10
c0027426:	89 c1                	mov    ecx,eax
c0027428:	c1 e9 17             	shr    ecx,0x17
c002742b:	0f b6 c9             	movzx  ecx,cl
c002742e:	89 c7                	mov    edi,eax
c0027430:	c1 ef 1f             	shr    edi,0x1f
c0027433:	89 ca                	mov    edx,ecx
c0027435:	31 fa                	xor    edx,edi
c0027437:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002743a:	c1 e0 08             	shl    eax,0x8
c002743d:	89 c2                	mov    edx,eax
c002743f:	89 d8                	mov    eax,ebx
c0027441:	09 d0                	or     eax,edx
c0027443:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027448:	09 f0                	or     eax,esi
c002744a:	75 08                	jne    c0027454 <__cmpsf2+0x64>
c002744c:	31 c0                	xor    eax,eax
c002744e:	39 f9                	cmp    ecx,edi
c0027450:	75 0c                	jne    c002745e <__cmpsf2+0x6e>
c0027452:	eb 29                	jmp    c002747d <__cmpsf2+0x8d>
c0027454:	b8 01 00 00 00       	mov    eax,0x1
c0027459:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002745c:	7f 1f                	jg     c002747d <__cmpsf2+0x8d>
c002745e:	83 c8 ff             	or     eax,0xffffffff
c0027461:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027464:	7c 17                	jl     c002747d <__cmpsf2+0x8d>
c0027466:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002746c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027472:	b8 01 00 00 00       	mov    eax,0x1
c0027477:	39 d3                	cmp    ebx,edx
c0027479:	77 02                	ja     c002747d <__cmpsf2+0x8d>
c002747b:	19 c0                	sbb    eax,eax
c002747d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027480:	5b                   	pop    ebx
c0027481:	5e                   	pop    esi
c0027482:	5f                   	pop    edi
c0027483:	5d                   	pop    ebp
c0027484:	c3                   	ret    

c0027485 <__eqsf2>:
c0027485:	55                   	push   ebp
c0027486:	89 e5                	mov    ebp,esp
c0027488:	83 ec 24             	sub    esp,0x24
c002748b:	6a 01                	push   0x1
c002748d:	83 ec 0c             	sub    esp,0xc
c0027490:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027493:	e8 df 10 00 00       	call   c0028577 <__extendsfdf2>
c0027498:	83 c4 10             	add    esp,0x10
c002749b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002749e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274a1:	52                   	push   edx
c00274a2:	50                   	push   eax
c00274a3:	50                   	push   eax
c00274a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274a7:	e8 cb 10 00 00       	call   c0028577 <__extendsfdf2>
c00274ac:	59                   	pop    ecx
c00274ad:	59                   	pop    ecx
c00274ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274b4:	52                   	push   edx
c00274b5:	50                   	push   eax
c00274b6:	e8 35 ff ff ff       	call   c00273f0 <__cmpsf2>
c00274bb:	83 c4 20             	add    esp,0x20
c00274be:	c9                   	leave  
c00274bf:	c3                   	ret    

c00274c0 <__nesf2>:
c00274c0:	eb c3                	jmp    c0027485 <__eqsf2>

c00274c2 <__gtsf2>:
c00274c2:	55                   	push   ebp
c00274c3:	89 e5                	mov    ebp,esp
c00274c5:	83 ec 24             	sub    esp,0x24
c00274c8:	6a ff                	push   0xffffffff
c00274ca:	83 ec 0c             	sub    esp,0xc
c00274cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274d0:	e8 a2 10 00 00       	call   c0028577 <__extendsfdf2>
c00274d5:	83 c4 10             	add    esp,0x10
c00274d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274de:	52                   	push   edx
c00274df:	50                   	push   eax
c00274e0:	50                   	push   eax
c00274e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274e4:	e8 8e 10 00 00       	call   c0028577 <__extendsfdf2>
c00274e9:	59                   	pop    ecx
c00274ea:	59                   	pop    ecx
c00274eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274f1:	52                   	push   edx
c00274f2:	50                   	push   eax
c00274f3:	e8 f8 fe ff ff       	call   c00273f0 <__cmpsf2>
c00274f8:	83 c4 20             	add    esp,0x20
c00274fb:	c9                   	leave  
c00274fc:	c3                   	ret    

c00274fd <__gesf2>:
c00274fd:	eb c3                	jmp    c00274c2 <__gtsf2>

c00274ff <__ltsf2>:
c00274ff:	eb 84                	jmp    c0027485 <__eqsf2>

c0027501 <__lesf2>:
c0027501:	eb 82                	jmp    c0027485 <__eqsf2>

c0027503 <__adddf3>:
c0027503:	55                   	push   ebp
c0027504:	89 e5                	mov    ebp,esp
c0027506:	57                   	push   edi
c0027507:	56                   	push   esi
c0027508:	53                   	push   ebx
c0027509:	83 ec 24             	sub    esp,0x24
c002750c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002750f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027512:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027515:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027518:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002751b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002751e:	89 c8                	mov    eax,ecx
c0027520:	89 ce                	mov    esi,ecx
c0027522:	c1 fe 14             	sar    esi,0x14
c0027525:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027528:	89 fb                	mov    ebx,edi
c002752a:	89 fa                	mov    edx,edi
c002752c:	c1 e2 0b             	shl    edx,0xb
c002752f:	c1 e0 0b             	shl    eax,0xb
c0027532:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027537:	c1 eb 15             	shr    ebx,0x15
c002753a:	09 d8                	or     eax,ebx
c002753c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002753f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027542:	c1 fe 14             	sar    esi,0x14
c0027545:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027548:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002754b:	89 f3                	mov    ebx,esi
c002754d:	c1 e3 0b             	shl    ebx,0xb
c0027550:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027553:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027556:	c1 e3 0b             	shl    ebx,0xb
c0027559:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002755f:	c1 ee 15             	shr    esi,0x15
c0027562:	09 f3                	or     ebx,esi
c0027564:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027567:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002756d:	0f 88 5f 02 00 00    	js     c00277d2 <__adddf3+0x2cf>
c0027573:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027576:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027579:	85 db                	test   ebx,ebx
c002757b:	0f 8e c7 00 00 00    	jle    c0027648 <__adddf3+0x145>
c0027581:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027588:	75 1a                	jne    c00275a4 <__adddf3+0xa1>
c002758a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002758d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027590:	0f 84 b2 05 00 00    	je     c0027b48 <__adddf3+0x645>
c0027596:	4b                   	dec    ebx
c0027597:	75 23                	jne    c00275bc <__adddf3+0xb9>
c0027599:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002759c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002759f:	e9 99 00 00 00       	jmp    c002763d <__adddf3+0x13a>
c00275a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275a7:	f7 d6                	not    esi
c00275a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275af:	0f 84 93 05 00 00    	je     c0027b48 <__adddf3+0x645>
c00275b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275bc:	83 fb 1f             	cmp    ebx,0x1f
c00275bf:	7e 42                	jle    c0027603 <__adddf3+0x100>
c00275c1:	83 fb 3f             	cmp    ebx,0x3f
c00275c4:	0f 8f 7e 05 00 00    	jg     c0027b48 <__adddf3+0x645>
c00275ca:	83 e3 1f             	and    ebx,0x1f
c00275cd:	89 d9                	mov    ecx,ebx
c00275cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275d2:	d3 ef                	shr    edi,cl
c00275d4:	31 db                	xor    ebx,ebx
c00275d6:	85 c9                	test   ecx,ecx
c00275d8:	74 15                	je     c00275ef <__adddf3+0xec>
c00275da:	be 20 00 00 00       	mov    esi,0x20
c00275df:	29 ce                	sub    esi,ecx
c00275e1:	89 f1                	mov    ecx,esi
c00275e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e6:	d3 e6                	shl    esi,cl
c00275e8:	31 db                	xor    ebx,ebx
c00275ea:	85 f6                	test   esi,esi
c00275ec:	0f 95 c3             	setne  bl
c00275ef:	31 c9                	xor    ecx,ecx
c00275f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275f5:	0f 95 c1             	setne  cl
c00275f8:	09 cf                	or     edi,ecx
c00275fa:	09 fb                	or     ebx,edi
c00275fc:	01 da                	add    edx,ebx
c00275fe:	83 d0 00             	adc    eax,0x0
c0027601:	eb 3a                	jmp    c002763d <__adddf3+0x13a>
c0027603:	bf 20 00 00 00       	mov    edi,0x20
c0027608:	29 df                	sub    edi,ebx
c002760a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002760d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027610:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027613:	d3 e6                	shl    esi,cl
c0027615:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027618:	88 d9                	mov    cl,bl
c002761a:	d3 ef                	shr    edi,cl
c002761c:	09 fe                	or     esi,edi
c002761e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027621:	88 d9                	mov    cl,bl
c0027623:	d3 ef                	shr    edi,cl
c0027625:	89 fb                	mov    ebx,edi
c0027627:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002762a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002762d:	d3 e7                	shl    edi,cl
c002762f:	85 ff                	test   edi,edi
c0027631:	0f 95 c1             	setne  cl
c0027634:	0f b6 c9             	movzx  ecx,cl
c0027637:	09 ce                	or     esi,ecx
c0027639:	01 f2                	add    edx,esi
c002763b:	11 d8                	adc    eax,ebx
c002763d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027640:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027643:	e9 52 01 00 00       	jmp    c002779a <__adddf3+0x297>
c0027648:	0f 84 d5 00 00 00    	je     c0027723 <__adddf3+0x220>
c002764e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027651:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027654:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027657:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002765a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027661:	75 20                	jne    c0027683 <__adddf3+0x180>
c0027663:	89 d6                	mov    esi,edx
c0027665:	09 c6                	or     esi,eax
c0027667:	0f 84 db 04 00 00    	je     c0027b48 <__adddf3+0x645>
c002766d:	4b                   	dec    ebx
c002766e:	75 29                	jne    c0027699 <__adddf3+0x196>
c0027670:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027673:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027676:	01 d1                	add    ecx,edx
c0027678:	11 c6                	adc    esi,eax
c002767a:	89 f0                	mov    eax,esi
c002767c:	89 ca                	mov    edx,ecx
c002767e:	e9 17 01 00 00       	jmp    c002779a <__adddf3+0x297>
c0027683:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027686:	f7 d6                	not    esi
c0027688:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002768e:	0f 84 b4 04 00 00    	je     c0027b48 <__adddf3+0x645>
c0027694:	0d 00 00 00 80       	or     eax,0x80000000
c0027699:	83 fb 1f             	cmp    ebx,0x1f
c002769c:	7e 48                	jle    c00276e6 <__adddf3+0x1e3>
c002769e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276a4:	83 fb 3f             	cmp    ebx,0x3f
c00276a7:	0f 8f 9b 04 00 00    	jg     c0027b48 <__adddf3+0x645>
c00276ad:	83 e3 1f             	and    ebx,0x1f
c00276b0:	89 d9                	mov    ecx,ebx
c00276b2:	89 c7                	mov    edi,eax
c00276b4:	d3 ef                	shr    edi,cl
c00276b6:	31 db                	xor    ebx,ebx
c00276b8:	85 c9                	test   ecx,ecx
c00276ba:	74 12                	je     c00276ce <__adddf3+0x1cb>
c00276bc:	be 20 00 00 00       	mov    esi,0x20
c00276c1:	29 ce                	sub    esi,ecx
c00276c3:	89 f1                	mov    ecx,esi
c00276c5:	d3 e0                	shl    eax,cl
c00276c7:	31 db                	xor    ebx,ebx
c00276c9:	85 c0                	test   eax,eax
c00276cb:	0f 95 c3             	setne  bl
c00276ce:	31 c0                	xor    eax,eax
c00276d0:	85 d2                	test   edx,edx
c00276d2:	0f 95 c0             	setne  al
c00276d5:	09 c7                	or     edi,eax
c00276d7:	09 fb                	or     ebx,edi
c00276d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276df:	01 da                	add    edx,ebx
c00276e1:	83 d6 00             	adc    esi,0x0
c00276e4:	eb 39                	jmp    c002771f <__adddf3+0x21c>
c00276e6:	be 20 00 00 00       	mov    esi,0x20
c00276eb:	29 de                	sub    esi,ebx
c00276ed:	89 c7                	mov    edi,eax
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	d3 e7                	shl    edi,cl
c00276f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276f6:	89 d7                	mov    edi,edx
c00276f8:	88 d9                	mov    cl,bl
c00276fa:	d3 ef                	shr    edi,cl
c00276fc:	89 f9                	mov    ecx,edi
c00276fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027701:	09 cf                	or     edi,ecx
c0027703:	88 d9                	mov    cl,bl
c0027705:	d3 e8                	shr    eax,cl
c0027707:	89 f1                	mov    ecx,esi
c0027709:	d3 e2                	shl    edx,cl
c002770b:	85 d2                	test   edx,edx
c002770d:	0f 95 c2             	setne  dl
c0027710:	0f b6 d2             	movzx  edx,dl
c0027713:	09 d7                	or     edi,edx
c0027715:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027718:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002771b:	01 fa                	add    edx,edi
c002771d:	11 c6                	adc    esi,eax
c002771f:	89 f0                	mov    eax,esi
c0027721:	eb 77                	jmp    c002779a <__adddf3+0x297>
c0027723:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027726:	46                   	inc    esi
c0027727:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002772a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027730:	75 41                	jne    c0027773 <__adddf3+0x270>
c0027732:	89 d3                	mov    ebx,edx
c0027734:	09 c3                	or     ebx,eax
c0027736:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002773d:	75 27                	jne    c0027766 <__adddf3+0x263>
c002773f:	85 db                	test   ebx,ebx
c0027741:	0f 84 fb 03 00 00    	je     c0027b42 <__adddf3+0x63f>
c0027747:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002774a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002774d:	0f 84 f5 03 00 00    	je     c0027b48 <__adddf3+0x645>
c0027753:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027756:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027759:	85 c0                	test   eax,eax
c002775b:	0f 89 91 03 00 00    	jns    c0027af2 <__adddf3+0x5ef>
c0027761:	e9 85 03 00 00       	jmp    c0027aeb <__adddf3+0x5e8>
c0027766:	85 db                	test   ebx,ebx
c0027768:	0f 85 da 03 00 00    	jne    c0027b48 <__adddf3+0x645>
c002776e:	e9 cf 03 00 00       	jmp    c0027b42 <__adddf3+0x63f>
c0027773:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027776:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027779:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002777c:	f7 d1                	not    ecx
c002777e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027784:	0f 84 70 03 00 00    	je     c0027afa <__adddf3+0x5f7>
c002778a:	d1 ea                	shr    edx,1
c002778c:	89 c1                	mov    ecx,eax
c002778e:	c1 e1 1f             	shl    ecx,0x1f
c0027791:	09 ca                	or     edx,ecx
c0027793:	d1 e8                	shr    eax,1
c0027795:	e9 6f 03 00 00       	jmp    c0027b09 <__adddf3+0x606>
c002779a:	85 c0                	test   eax,eax
c002779c:	0f 89 67 03 00 00    	jns    c0027b09 <__adddf3+0x606>
c00277a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00277a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277a8:	f7 d1                	not    ecx
c00277aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277b0:	0f 84 44 03 00 00    	je     c0027afa <__adddf3+0x5f7>
c00277b6:	89 d1                	mov    ecx,edx
c00277b8:	d1 e9                	shr    ecx,1
c00277ba:	83 e2 01             	and    edx,0x1
c00277bd:	09 ca                	or     edx,ecx
c00277bf:	89 c1                	mov    ecx,eax
c00277c1:	c1 e1 1f             	shl    ecx,0x1f
c00277c4:	09 ca                	or     edx,ecx
c00277c6:	d1 e8                	shr    eax,1
c00277c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277cd:	e9 37 03 00 00       	jmp    c0027b09 <__adddf3+0x606>
c00277d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277e7:	29 de                	sub    esi,ebx
c00277e9:	85 f6                	test   esi,esi
c00277eb:	0f 8e bd 00 00 00    	jle    c00278ae <__adddf3+0x3ab>
c00277f1:	85 db                	test   ebx,ebx
c00277f3:	75 17                	jne    c002780c <__adddf3+0x309>
c00277f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277fb:	0f 84 47 03 00 00    	je     c0027b48 <__adddf3+0x645>
c0027801:	4e                   	dec    esi
c0027802:	75 20                	jne    c0027824 <__adddf3+0x321>
c0027804:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027807:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002780a:	eb 5b                	jmp    c0027867 <__adddf3+0x364>
c002780c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002780f:	f7 d3                	not    ebx
c0027811:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027817:	0f 84 2b 03 00 00    	je     c0027b48 <__adddf3+0x645>
c002781d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027824:	83 fe 1f             	cmp    esi,0x1f
c0027827:	7e 49                	jle    c0027872 <__adddf3+0x36f>
c0027829:	83 fe 3f             	cmp    esi,0x3f
c002782c:	0f 8f 16 03 00 00    	jg     c0027b48 <__adddf3+0x645>
c0027832:	83 e6 1f             	and    esi,0x1f
c0027835:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027838:	89 f1                	mov    ecx,esi
c002783a:	d3 ef                	shr    edi,cl
c002783c:	31 db                	xor    ebx,ebx
c002783e:	85 f6                	test   esi,esi
c0027840:	74 13                	je     c0027855 <__adddf3+0x352>
c0027842:	b9 20 00 00 00       	mov    ecx,0x20
c0027847:	29 f1                	sub    ecx,esi
c0027849:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002784c:	d3 e6                	shl    esi,cl
c002784e:	31 db                	xor    ebx,ebx
c0027850:	85 f6                	test   esi,esi
c0027852:	0f 95 c3             	setne  bl
c0027855:	31 c9                	xor    ecx,ecx
c0027857:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002785b:	0f 95 c1             	setne  cl
c002785e:	09 cf                	or     edi,ecx
c0027860:	09 fb                	or     ebx,edi
c0027862:	29 da                	sub    edx,ebx
c0027864:	83 d8 00             	sbb    eax,0x0
c0027867:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002786a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002786d:	e9 aa 01 00 00       	jmp    c0027a1c <__adddf3+0x519>
c0027872:	bf 20 00 00 00       	mov    edi,0x20
c0027877:	29 f7                	sub    edi,esi
c0027879:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002787c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002787f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027882:	d3 e3                	shl    ebx,cl
c0027884:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027887:	89 f1                	mov    ecx,esi
c0027889:	d3 ef                	shr    edi,cl
c002788b:	09 fb                	or     ebx,edi
c002788d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027890:	89 f1                	mov    ecx,esi
c0027892:	d3 ef                	shr    edi,cl
c0027894:	89 fe                	mov    esi,edi
c0027896:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027899:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002789c:	d3 e7                	shl    edi,cl
c002789e:	85 ff                	test   edi,edi
c00278a0:	0f 95 c1             	setne  cl
c00278a3:	0f b6 c9             	movzx  ecx,cl
c00278a6:	09 cb                	or     ebx,ecx
c00278a8:	29 da                	sub    edx,ebx
c00278aa:	19 f0                	sbb    eax,esi
c00278ac:	eb b9                	jmp    c0027867 <__adddf3+0x364>
c00278ae:	0f 84 cd 00 00 00    	je     c0027981 <__adddf3+0x47e>
c00278b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278c1:	75 1b                	jne    c00278de <__adddf3+0x3db>
c00278c3:	89 d6                	mov    esi,edx
c00278c5:	09 c6                	or     esi,eax
c00278c7:	0f 84 7b 02 00 00    	je     c0027b48 <__adddf3+0x645>
c00278cd:	4b                   	dec    ebx
c00278ce:	75 24                	jne    c00278f4 <__adddf3+0x3f1>
c00278d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278d6:	29 d1                	sub    ecx,edx
c00278d8:	19 c6                	sbb    esi,eax
c00278da:	89 ca                	mov    edx,ecx
c00278dc:	eb 61                	jmp    c002793f <__adddf3+0x43c>
c00278de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278e1:	f7 d6                	not    esi
c00278e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278e9:	0f 84 59 02 00 00    	je     c0027b48 <__adddf3+0x645>
c00278ef:	0d 00 00 00 80       	or     eax,0x80000000
c00278f4:	83 fb 1f             	cmp    ebx,0x1f
c00278f7:	7e 4d                	jle    c0027946 <__adddf3+0x443>
c00278f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ff:	83 fb 3f             	cmp    ebx,0x3f
c0027902:	0f 8f 40 02 00 00    	jg     c0027b48 <__adddf3+0x645>
c0027908:	83 e3 1f             	and    ebx,0x1f
c002790b:	89 d9                	mov    ecx,ebx
c002790d:	89 c7                	mov    edi,eax
c002790f:	d3 ef                	shr    edi,cl
c0027911:	31 db                	xor    ebx,ebx
c0027913:	85 c9                	test   ecx,ecx
c0027915:	74 12                	je     c0027929 <__adddf3+0x426>
c0027917:	be 20 00 00 00       	mov    esi,0x20
c002791c:	29 ce                	sub    esi,ecx
c002791e:	89 f1                	mov    ecx,esi
c0027920:	d3 e0                	shl    eax,cl
c0027922:	31 db                	xor    ebx,ebx
c0027924:	85 c0                	test   eax,eax
c0027926:	0f 95 c3             	setne  bl
c0027929:	31 c0                	xor    eax,eax
c002792b:	85 d2                	test   edx,edx
c002792d:	0f 95 c0             	setne  al
c0027930:	09 c7                	or     edi,eax
c0027932:	09 fb                	or     ebx,edi
c0027934:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027937:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002793a:	29 da                	sub    edx,ebx
c002793c:	83 de 00             	sbb    esi,0x0
c002793f:	89 f0                	mov    eax,esi
c0027941:	e9 d6 00 00 00       	jmp    c0027a1c <__adddf3+0x519>
c0027946:	be 20 00 00 00       	mov    esi,0x20
c002794b:	29 de                	sub    esi,ebx
c002794d:	89 c7                	mov    edi,eax
c002794f:	89 f1                	mov    ecx,esi
c0027951:	d3 e7                	shl    edi,cl
c0027953:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027956:	89 d7                	mov    edi,edx
c0027958:	88 d9                	mov    cl,bl
c002795a:	d3 ef                	shr    edi,cl
c002795c:	89 f9                	mov    ecx,edi
c002795e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027961:	09 cf                	or     edi,ecx
c0027963:	88 d9                	mov    cl,bl
c0027965:	d3 e8                	shr    eax,cl
c0027967:	89 f1                	mov    ecx,esi
c0027969:	d3 e2                	shl    edx,cl
c002796b:	85 d2                	test   edx,edx
c002796d:	0f 95 c2             	setne  dl
c0027970:	0f b6 d2             	movzx  edx,dl
c0027973:	09 d7                	or     edi,edx
c0027975:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027978:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002797b:	29 fa                	sub    edx,edi
c002797d:	19 c6                	sbb    esi,eax
c002797f:	eb be                	jmp    c002793f <__adddf3+0x43c>
c0027981:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027984:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027987:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002798d:	75 6a                	jne    c00279f9 <__adddf3+0x4f6>
c002798f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027993:	75 58                	jne    c00279ed <__adddf3+0x4ea>
c0027995:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027998:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002799b:	89 d6                	mov    esi,edx
c002799d:	09 c6                	or     esi,eax
c002799f:	75 17                	jne    c00279b8 <__adddf3+0x4b5>
c00279a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279a7:	85 db                	test   ebx,ebx
c00279a9:	0f 85 99 01 00 00    	jne    c0027b48 <__adddf3+0x645>
c00279af:	31 ff                	xor    edi,edi
c00279b1:	31 c9                	xor    ecx,ecx
c00279b3:	e9 90 01 00 00       	jmp    c0027b48 <__adddf3+0x645>
c00279b8:	85 db                	test   ebx,ebx
c00279ba:	0f 84 88 01 00 00    	je     c0027b48 <__adddf3+0x645>
c00279c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279c6:	85 c0                	test   eax,eax
c00279c8:	79 10                	jns    c00279da <__adddf3+0x4d7>
c00279ca:	31 c9                	xor    ecx,ecx
c00279cc:	f7 da                	neg    edx
c00279ce:	0f 95 c1             	setne  cl
c00279d1:	01 c8                	add    eax,ecx
c00279d3:	f7 d8                	neg    eax
c00279d5:	e9 2f 01 00 00       	jmp    c0027b09 <__adddf3+0x606>
c00279da:	31 ff                	xor    edi,edi
c00279dc:	31 c9                	xor    ecx,ecx
c00279de:	89 c3                	mov    ebx,eax
c00279e0:	09 d3                	or     ebx,edx
c00279e2:	0f 84 60 01 00 00    	je     c0027b48 <__adddf3+0x645>
c00279e8:	e9 05 01 00 00       	jmp    c0027af2 <__adddf3+0x5ef>
c00279ed:	31 ff                	xor    edi,edi
c00279ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279f4:	e9 4f 01 00 00       	jmp    c0027b48 <__adddf3+0x645>
c00279f9:	89 c1                	mov    ecx,eax
c00279fb:	89 d0                	mov    eax,edx
c00279fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a00:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a03:	89 ca                	mov    edx,ecx
c0027a05:	85 c9                	test   ecx,ecx
c0027a07:	79 2c                	jns    c0027a35 <__adddf3+0x532>
c0027a09:	31 c9                	xor    ecx,ecx
c0027a0b:	f7 d8                	neg    eax
c0027a0d:	0f 95 c1             	setne  cl
c0027a10:	01 ca                	add    edx,ecx
c0027a12:	f7 da                	neg    edx
c0027a14:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a17:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a1a:	eb 19                	jmp    c0027a35 <__adddf3+0x532>
c0027a1c:	85 c0                	test   eax,eax
c0027a1e:	0f 89 e5 00 00 00    	jns    c0027b09 <__adddf3+0x606>
c0027a24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a29:	89 c1                	mov    ecx,eax
c0027a2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a31:	89 d0                	mov    eax,edx
c0027a33:	89 ca                	mov    edx,ecx
c0027a35:	85 d2                	test   edx,edx
c0027a37:	74 59                	je     c0027a92 <__adddf3+0x58f>
c0027a39:	0f bd da             	bsr    ebx,edx
c0027a3c:	83 f3 1f             	xor    ebx,0x1f
c0027a3f:	88 d9                	mov    cl,bl
c0027a41:	d3 e2                	shl    edx,cl
c0027a43:	bf 20 00 00 00       	mov    edi,0x20
c0027a48:	89 f9                	mov    ecx,edi
c0027a4a:	29 d9                	sub    ecx,ebx
c0027a4c:	89 c6                	mov    esi,eax
c0027a4e:	d3 ee                	shr    esi,cl
c0027a50:	09 d6                	or     esi,edx
c0027a52:	88 d9                	mov    cl,bl
c0027a54:	d3 e0                	shl    eax,cl
c0027a56:	89 c2                	mov    edx,eax
c0027a58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a5b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a60:	39 d8                	cmp    eax,ebx
c0027a62:	7f 22                	jg     c0027a86 <__adddf3+0x583>
c0027a64:	29 c3                	sub    ebx,eax
c0027a66:	43                   	inc    ebx
c0027a67:	88 d9                	mov    cl,bl
c0027a69:	d3 ea                	shr    edx,cl
c0027a6b:	29 df                	sub    edi,ebx
c0027a6d:	89 f9                	mov    ecx,edi
c0027a6f:	89 f0                	mov    eax,esi
c0027a71:	d3 e0                	shl    eax,cl
c0027a73:	09 c2                	or     edx,eax
c0027a75:	89 f0                	mov    eax,esi
c0027a77:	88 d9                	mov    cl,bl
c0027a79:	d3 e8                	shr    eax,cl
c0027a7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a7e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a84:	eb 6f                	jmp    c0027af5 <__adddf3+0x5f2>
c0027a86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a89:	29 d8                	sub    eax,ebx
c0027a8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a8e:	89 f0                	mov    eax,esi
c0027a90:	eb 59                	jmp    c0027aeb <__adddf3+0x5e8>
c0027a92:	85 c0                	test   eax,eax
c0027a94:	74 6a                	je     c0027b00 <__adddf3+0x5fd>
c0027a96:	0f bd c8             	bsr    ecx,eax
c0027a99:	83 f1 1f             	xor    ecx,0x1f
c0027a9c:	d3 e0                	shl    eax,cl
c0027a9e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027aa1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027aa7:	83 c1 20             	add    ecx,0x20
c0027aaa:	39 cb                	cmp    ebx,ecx
c0027aac:	7f 35                	jg     c0027ae3 <__adddf3+0x5e0>
c0027aae:	29 d9                	sub    ecx,ebx
c0027ab0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ab3:	83 fe 1f             	cmp    esi,0x1f
c0027ab6:	7e 09                	jle    c0027ac1 <__adddf3+0x5be>
c0027ab8:	83 e9 1f             	sub    ecx,0x1f
c0027abb:	d3 e8                	shr    eax,cl
c0027abd:	89 c3                	mov    ebx,eax
c0027abf:	eb 11                	jmp    c0027ad2 <__adddf3+0x5cf>
c0027ac1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ac6:	29 f1                	sub    ecx,esi
c0027ac8:	89 c3                	mov    ebx,eax
c0027aca:	d3 e3                	shl    ebx,cl
c0027acc:	89 f1                	mov    ecx,esi
c0027ace:	d3 e8                	shr    eax,cl
c0027ad0:	89 c2                	mov    edx,eax
c0027ad2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ada:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027add:	89 d0                	mov    eax,edx
c0027adf:	89 da                	mov    edx,ebx
c0027ae1:	eb 26                	jmp    c0027b09 <__adddf3+0x606>
c0027ae3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ae6:	29 cf                	sub    edi,ecx
c0027ae8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aeb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027af0:	eb 17                	jmp    c0027b09 <__adddf3+0x606>
c0027af2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027af5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027af8:	eb 0f                	jmp    c0027b09 <__adddf3+0x606>
c0027afa:	31 d2                	xor    edx,edx
c0027afc:	31 c0                	xor    eax,eax
c0027afe:	eb 09                	jmp    c0027b09 <__adddf3+0x606>
c0027b00:	89 c2                	mov    edx,eax
c0027b02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b0c:	c1 e1 14             	shl    ecx,0x14
c0027b0f:	89 c3                	mov    ebx,eax
c0027b11:	c1 eb 0b             	shr    ebx,0xb
c0027b14:	09 d9                	or     ecx,ebx
c0027b16:	89 d3                	mov    ebx,edx
c0027b18:	c1 eb 0b             	shr    ebx,0xb
c0027b1b:	c1 e0 15             	shl    eax,0x15
c0027b1e:	09 d8                	or     eax,ebx
c0027b20:	89 c7                	mov    edi,eax
c0027b22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b28:	0f 95 c0             	setne  al
c0027b2b:	89 c6                	mov    esi,eax
c0027b2d:	09 f3                	or     ebx,esi
c0027b2f:	83 e3 01             	and    ebx,0x1
c0027b32:	c1 ea 0a             	shr    edx,0xa
c0027b35:	21 da                	and    edx,ebx
c0027b37:	89 f8                	mov    eax,edi
c0027b39:	01 d0                	add    eax,edx
c0027b3b:	83 d1 00             	adc    ecx,0x0
c0027b3e:	89 c7                	mov    edi,eax
c0027b40:	eb 06                	jmp    c0027b48 <__adddf3+0x645>
c0027b42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b48:	89 f8                	mov    eax,edi
c0027b4a:	89 ca                	mov    edx,ecx
c0027b4c:	83 c4 24             	add    esp,0x24
c0027b4f:	5b                   	pop    ebx
c0027b50:	5e                   	pop    esi
c0027b51:	5f                   	pop    edi
c0027b52:	5d                   	pop    ebp
c0027b53:	c3                   	ret    

c0027b54 <__subdf3>:
c0027b54:	55                   	push   ebp
c0027b55:	89 e5                	mov    ebp,esp
c0027b57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b69:	5d                   	pop    ebp
c0027b6a:	e9 94 f9 ff ff       	jmp    c0027503 <__adddf3>

c0027b6f <__negdf2>:
c0027b6f:	55                   	push   ebp
c0027b70:	89 e5                	mov    ebp,esp
c0027b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b7e:	5d                   	pop    ebp
c0027b7f:	c3                   	ret    

c0027b80 <__muldf3>:
c0027b80:	55                   	push   ebp
c0027b81:	89 e5                	mov    ebp,esp
c0027b83:	57                   	push   edi
c0027b84:	56                   	push   esi
c0027b85:	53                   	push   ebx
c0027b86:	83 ec 24             	sub    esp,0x24
c0027b89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b9e:	89 c8                	mov    eax,ecx
c0027ba0:	c1 f8 14             	sar    eax,0x14
c0027ba3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ba6:	89 f8                	mov    eax,edi
c0027ba8:	89 fb                	mov    ebx,edi
c0027baa:	c1 e3 0b             	shl    ebx,0xb
c0027bad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027bb0:	c1 e1 0b             	shl    ecx,0xb
c0027bb3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bb9:	c1 e8 15             	shr    eax,0x15
c0027bbc:	09 c1                	or     ecx,eax
c0027bbe:	89 d6                	mov    esi,edx
c0027bc0:	89 d0                	mov    eax,edx
c0027bc2:	c1 f8 14             	sar    eax,0x14
c0027bc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bc8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bcb:	89 c3                	mov    ebx,eax
c0027bcd:	c1 e3 0b             	shl    ebx,0xb
c0027bd0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bd3:	c1 e6 0b             	shl    esi,0xb
c0027bd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bdc:	c1 e8 15             	shr    eax,0x15
c0027bdf:	09 c6                	or     esi,eax
c0027be1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027be4:	25 ff 07 00 00       	and    eax,0x7ff
c0027be9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bef:	25 ff 07 00 00       	and    eax,0x7ff
c0027bf4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bf7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bfa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bfd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c07:	40                   	inc    eax
c0027c08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c0d:	0f 85 8d 00 00 00    	jne    c0027ca0 <__muldf3+0x120>
c0027c13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c16:	09 c8                	or     eax,ecx
c0027c18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c1c:	74 44                	je     c0027c62 <__muldf3+0xe2>
c0027c1e:	85 c0                	test   eax,eax
c0027c20:	0f 85 31 02 00 00    	jne    c0027e57 <__muldf3+0x2d7>
c0027c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c29:	40                   	inc    eax
c0027c2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c2f:	75 13                	jne    c0027c44 <__muldf3+0xc4>
c0027c31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c34:	09 f1                	or     ecx,esi
c0027c36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c3a:	74 22                	je     c0027c5e <__muldf3+0xde>
c0027c3c:	85 c9                	test   ecx,ecx
c0027c3e:	0f 85 0d 02 00 00    	jne    c0027e51 <__muldf3+0x2d1>
c0027c44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c48:	0f 89 09 02 00 00    	jns    c0027e57 <__muldf3+0x2d7>
c0027c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c51:	05 00 00 00 80       	add    eax,0x80000000
c0027c56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c59:	e9 f9 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027c5e:	85 c9                	test   ecx,ecx
c0027c60:	eb 2e                	jmp    c0027c90 <__muldf3+0x110>
c0027c62:	85 c0                	test   eax,eax
c0027c64:	74 20                	je     c0027c86 <__muldf3+0x106>
c0027c66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c6f:	c1 ef 1f             	shr    edi,0x1f
c0027c72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c7e:	09 f9                	or     ecx,edi
c0027c80:	78 1e                	js     c0027ca0 <__muldf3+0x120>
c0027c82:	89 c3                	mov    ebx,eax
c0027c84:	eb e0                	jmp    c0027c66 <__muldf3+0xe6>
c0027c86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c89:	f7 d0                	not    eax
c0027c8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c90:	75 b2                	jne    c0027c44 <__muldf3+0xc4>
c0027c92:	31 ff                	xor    edi,edi
c0027c94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c9b:	e9 b7 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027ca0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ca3:	40                   	inc    eax
c0027ca4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ca9:	75 57                	jne    c0027d02 <__muldf3+0x182>
c0027cab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027cae:	09 f0                	or     eax,esi
c0027cb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cb4:	74 23                	je     c0027cd9 <__muldf3+0x159>
c0027cb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cba:	0f 89 91 01 00 00    	jns    c0027e51 <__muldf3+0x2d1>
c0027cc0:	85 c0                	test   eax,eax
c0027cc2:	0f 85 89 01 00 00    	jne    c0027e51 <__muldf3+0x2d1>
c0027cc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ccb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd4:	e9 7e 01 00 00       	jmp    c0027e57 <__muldf3+0x2d7>
c0027cd9:	85 c0                	test   eax,eax
c0027cdb:	75 0c                	jne    c0027ce9 <__muldf3+0x169>
c0027cdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ce1:	0f 89 6a 01 00 00    	jns    c0027e51 <__muldf3+0x2d1>
c0027ce7:	eb df                	jmp    c0027cc8 <__muldf3+0x148>
c0027ce9:	01 f6                	add    esi,esi
c0027ceb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cee:	c1 ea 1f             	shr    edx,0x1f
c0027cf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027cf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cfa:	09 d6                	or     esi,edx
c0027cfc:	78 04                	js     c0027d02 <__muldf3+0x182>
c0027cfe:	89 c3                	mov    ebx,eax
c0027d00:	eb e7                	jmp    c0027ce9 <__muldf3+0x169>
c0027d02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d0e:	89 c8                	mov    eax,ecx
c0027d10:	f7 e6                	mul    esi
c0027d12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d15:	89 c7                	mov    edi,eax
c0027d17:	89 c8                	mov    eax,ecx
c0027d19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d1f:	89 c1                	mov    ecx,eax
c0027d21:	89 f0                	mov    eax,esi
c0027d23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d29:	89 c6                	mov    esi,eax
c0027d2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d34:	31 c0                	xor    eax,eax
c0027d36:	01 f1                	add    ecx,esi
c0027d38:	0f 92 c0             	setb   al
c0027d3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d41:	83 d6 00             	adc    esi,0x0
c0027d44:	01 c7                	add    edi,eax
c0027d46:	83 d6 00             	adc    esi,0x0
c0027d49:	01 ca                	add    edx,ecx
c0027d4b:	0f 92 c1             	setb   cl
c0027d4e:	0f b6 c9             	movzx  ecx,cl
c0027d51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d54:	83 d6 00             	adc    esi,0x0
c0027d57:	01 cf                	add    edi,ecx
c0027d59:	83 d6 00             	adc    esi,0x0
c0027d5c:	31 c9                	xor    ecx,ecx
c0027d5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d61:	0f 95 c1             	setne  cl
c0027d64:	09 cf                	or     edi,ecx
c0027d66:	85 f6                	test   esi,esi
c0027d68:	78 0c                	js     c0027d76 <__muldf3+0x1f6>
c0027d6a:	01 f6                	add    esi,esi
c0027d6c:	89 f8                	mov    eax,edi
c0027d6e:	c1 e8 1f             	shr    eax,0x1f
c0027d71:	09 c6                	or     esi,eax
c0027d73:	01 ff                	add    edi,edi
c0027d75:	4b                   	dec    ebx
c0027d76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d7c:	0f 8f 85 00 00 00    	jg     c0027e07 <__muldf3+0x287>
c0027d82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d88:	85 db                	test   ebx,ebx
c0027d8a:	0f 8f 84 00 00 00    	jg     c0027e14 <__muldf3+0x294>
c0027d90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d93:	7c 79                	jl     c0027e0e <__muldf3+0x28e>
c0027d95:	ba 01 00 00 00       	mov    edx,0x1
c0027d9a:	29 da                	sub    edx,ebx
c0027d9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027da2:	83 fa 1f             	cmp    edx,0x1f
c0027da5:	7e 30                	jle    c0027dd7 <__muldf3+0x257>
c0027da7:	83 fa 20             	cmp    edx,0x20
c0027daa:	75 0b                	jne    c0027db7 <__muldf3+0x237>
c0027dac:	31 c0                	xor    eax,eax
c0027dae:	85 ff                	test   edi,edi
c0027db0:	0f 95 c0             	setne  al
c0027db3:	89 c7                	mov    edi,eax
c0027db5:	eb 1a                	jmp    c0027dd1 <__muldf3+0x251>
c0027db7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027dba:	89 f0                	mov    eax,esi
c0027dbc:	d3 e0                	shl    eax,cl
c0027dbe:	09 f8                	or     eax,edi
c0027dc0:	0f 95 c0             	setne  al
c0027dc3:	0f b6 c0             	movzx  eax,al
c0027dc6:	89 c7                	mov    edi,eax
c0027dc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dcd:	29 d9                	sub    ecx,ebx
c0027dcf:	d3 ee                	shr    esi,cl
c0027dd1:	09 f7                	or     edi,esi
c0027dd3:	31 db                	xor    ebx,ebx
c0027dd5:	eb 3b                	jmp    c0027e12 <__muldf3+0x292>
c0027dd7:	83 c3 1f             	add    ebx,0x1f
c0027dda:	89 f0                	mov    eax,esi
c0027ddc:	88 d9                	mov    cl,bl
c0027dde:	d3 e0                	shl    eax,cl
c0027de0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027de3:	89 f8                	mov    eax,edi
c0027de5:	88 d1                	mov    cl,dl
c0027de7:	d3 e8                	shr    eax,cl
c0027de9:	89 c1                	mov    ecx,eax
c0027deb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dee:	09 c8                	or     eax,ecx
c0027df0:	88 d9                	mov    cl,bl
c0027df2:	d3 e7                	shl    edi,cl
c0027df4:	31 db                	xor    ebx,ebx
c0027df6:	85 ff                	test   edi,edi
c0027df8:	0f 95 c3             	setne  bl
c0027dfb:	89 df                	mov    edi,ebx
c0027dfd:	09 c7                	or     edi,eax
c0027dff:	88 d1                	mov    cl,dl
c0027e01:	d3 ee                	shr    esi,cl
c0027e03:	31 db                	xor    ebx,ebx
c0027e05:	eb 0d                	jmp    c0027e14 <__muldf3+0x294>
c0027e07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e0c:	eb 02                	jmp    c0027e10 <__muldf3+0x290>
c0027e0e:	31 db                	xor    ebx,ebx
c0027e10:	31 ff                	xor    edi,edi
c0027e12:	31 f6                	xor    esi,esi
c0027e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e1f:	09 c3                	or     ebx,eax
c0027e21:	c1 e3 14             	shl    ebx,0x14
c0027e24:	89 f0                	mov    eax,esi
c0027e26:	c1 e8 0b             	shr    eax,0xb
c0027e29:	09 c3                	or     ebx,eax
c0027e2b:	89 f8                	mov    eax,edi
c0027e2d:	c1 e8 0b             	shr    eax,0xb
c0027e30:	c1 e6 15             	shl    esi,0x15
c0027e33:	09 c6                	or     esi,eax
c0027e35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e3b:	0f 95 c1             	setne  cl
c0027e3e:	09 c8                	or     eax,ecx
c0027e40:	83 e0 01             	and    eax,0x1
c0027e43:	c1 ef 0a             	shr    edi,0xa
c0027e46:	21 c7                	and    edi,eax
c0027e48:	01 f7                	add    edi,esi
c0027e4a:	83 d3 00             	adc    ebx,0x0
c0027e4d:	89 da                	mov    edx,ebx
c0027e4f:	eb 03                	jmp    c0027e54 <__muldf3+0x2d4>
c0027e51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e57:	89 f8                	mov    eax,edi
c0027e59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e5c:	83 c4 24             	add    esp,0x24
c0027e5f:	5b                   	pop    ebx
c0027e60:	5e                   	pop    esi
c0027e61:	5f                   	pop    edi
c0027e62:	5d                   	pop    ebp
c0027e63:	c3                   	ret    

c0027e64 <__divdf3>:
c0027e64:	55                   	push   ebp
c0027e65:	89 e5                	mov    ebp,esp
c0027e67:	57                   	push   edi
c0027e68:	56                   	push   esi
c0027e69:	53                   	push   ebx
c0027e6a:	83 ec 2c             	sub    esp,0x2c
c0027e6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e7f:	89 ce                	mov    esi,ecx
c0027e81:	89 c8                	mov    eax,ecx
c0027e83:	c1 f8 14             	sar    eax,0x14
c0027e86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e89:	89 f8                	mov    eax,edi
c0027e8b:	89 fb                	mov    ebx,edi
c0027e8d:	c1 e3 0b             	shl    ebx,0xb
c0027e90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e93:	c1 e6 0b             	shl    esi,0xb
c0027e96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e9c:	c1 e8 15             	shr    eax,0x15
c0027e9f:	09 c6                	or     esi,eax
c0027ea1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ea4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ea7:	89 c2                	mov    edx,eax
c0027ea9:	c1 fa 14             	sar    edx,0x14
c0027eac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027eaf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027eb2:	89 de                	mov    esi,ebx
c0027eb4:	c1 e6 0b             	shl    esi,0xb
c0027eb7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eba:	c1 e0 0b             	shl    eax,0xb
c0027ebd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ec2:	c1 eb 15             	shr    ebx,0x15
c0027ec5:	09 d8                	or     eax,ebx
c0027ec7:	89 c2                	mov    edx,eax
c0027ec9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ecc:	25 ff 07 00 00       	and    eax,0x7ff
c0027ed1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ed4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ed7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027edd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ee0:	29 d8                	sub    eax,ebx
c0027ee2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ee7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eea:	46                   	inc    esi
c0027eeb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ef1:	0f 85 a5 00 00 00    	jne    c0027f9c <__divdf3+0x138>
c0027ef7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027efa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027efd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f01:	74 2a                	je     c0027f2d <__divdf3+0xc9>
c0027f03:	85 f6                	test   esi,esi
c0027f05:	0f 85 cc 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027f0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f0e:	40                   	inc    eax
c0027f0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f14:	75 26                	jne    c0027f3c <__divdf3+0xd8>
c0027f16:	85 db                	test   ebx,ebx
c0027f18:	74 22                	je     c0027f3c <__divdf3+0xd8>
c0027f1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f23:	09 d0                	or     eax,edx
c0027f25:	0f 85 ac 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027f2b:	eb 63                	jmp    c0027f90 <__divdf3+0x12c>
c0027f2d:	85 f6                	test   esi,esi
c0027f2f:	75 22                	jne    c0027f53 <__divdf3+0xef>
c0027f31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f34:	40                   	inc    eax
c0027f35:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f3a:	74 36                	je     c0027f72 <__divdf3+0x10e>
c0027f3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f40:	0f 89 91 02 00 00    	jns    c00281d7 <__divdf3+0x373>
c0027f46:	89 f8                	mov    eax,edi
c0027f48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f4e:	e9 80 02 00 00       	jmp    c00281d3 <__divdf3+0x36f>
c0027f53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f56:	01 f6                	add    esi,esi
c0027f58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f5b:	c1 ef 1f             	shr    edi,0x1f
c0027f5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f67:	09 f7                	or     edi,esi
c0027f69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f6c:	78 2e                	js     c0027f9c <__divdf3+0x138>
c0027f6e:	89 c8                	mov    eax,ecx
c0027f70:	eb e1                	jmp    c0027f53 <__divdf3+0xef>
c0027f72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f75:	09 d0                	or     eax,edx
c0027f77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f7b:	74 0f                	je     c0027f8c <__divdf3+0x128>
c0027f7d:	85 c0                	test   eax,eax
c0027f7f:	74 bb                	je     c0027f3c <__divdf3+0xd8>
c0027f81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f87:	e9 4b 02 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027f8c:	85 c0                	test   eax,eax
c0027f8e:	75 ac                	jne    c0027f3c <__divdf3+0xd8>
c0027f90:	31 ff                	xor    edi,edi
c0027f92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f97:	e9 3b 02 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027f9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027fa2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027fa8:	75 6b                	jne    c0028015 <__divdf3+0x1b1>
c0027faa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fad:	09 d6                	or     esi,edx
c0027faf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fb3:	74 28                	je     c0027fdd <__divdf3+0x179>
c0027fb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fbb:	85 f6                	test   esi,esi
c0027fbd:	0f 85 14 02 00 00    	jne    c00281d7 <__divdf3+0x373>
c0027fc3:	31 ff                	xor    edi,edi
c0027fc5:	31 c9                	xor    ecx,ecx
c0027fc7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fcd:	0f 89 04 02 00 00    	jns    c00281d7 <__divdf3+0x373>
c0027fd3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fd8:	e9 fa 01 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027fdd:	85 f6                	test   esi,esi
c0027fdf:	75 1b                	jne    c0027ffc <__divdf3+0x198>
c0027fe1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fe4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fe7:	25 00 00 00 80       	and    eax,0x80000000
c0027fec:	31 c9                	xor    ecx,ecx
c0027fee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ff3:	89 cf                	mov    edi,ecx
c0027ff5:	89 c1                	mov    ecx,eax
c0027ff7:	e9 db 01 00 00       	jmp    c00281d7 <__divdf3+0x373>
c0027ffc:	01 d2                	add    edx,edx
c0027ffe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028001:	c1 eb 1f             	shr    ebx,0x1f
c0028004:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028007:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002800a:	8d 48 01             	lea    ecx,[eax+0x1]
c002800d:	09 da                	or     edx,ebx
c002800f:	78 04                	js     c0028015 <__divdf3+0x1b1>
c0028011:	89 c8                	mov    eax,ecx
c0028013:	eb e7                	jmp    c0027ffc <__divdf3+0x198>
c0028015:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028018:	81 ce 00 00 00 80    	or     esi,0x80000000
c002801e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028024:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028027:	39 d6                	cmp    esi,edx
c0028029:	77 0d                	ja     c0028038 <__divdf3+0x1d4>
c002802b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002802e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028031:	72 1b                	jb     c002804e <__divdf3+0x1ea>
c0028033:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028036:	75 16                	jne    c002804e <__divdf3+0x1ea>
c0028038:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002803b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002803e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028041:	83 de 00             	sbb    esi,0x0
c0028044:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028047:	ba 01 00 00 00       	mov    edx,0x1
c002804c:	eb 02                	jmp    c0028050 <__divdf3+0x1ec>
c002804e:	31 d2                	xor    edx,edx
c0028050:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028057:	31 ff                	xor    edi,edi
c0028059:	01 ff                	add    edi,edi
c002805b:	89 d1                	mov    ecx,edx
c002805d:	c1 e9 1f             	shr    ecx,0x1f
c0028060:	09 cf                	or     edi,ecx
c0028062:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028065:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028068:	89 da                	mov    edx,ebx
c002806a:	89 f3                	mov    ebx,esi
c002806c:	8d 34 36             	lea    esi,[esi+esi*1]
c002806f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028072:	c1 e9 1f             	shr    ecx,0x1f
c0028075:	09 ce                	or     esi,ecx
c0028077:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002807a:	01 c9                	add    ecx,ecx
c002807c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002807f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028082:	85 db                	test   ebx,ebx
c0028084:	78 29                	js     c00280af <__divdf3+0x24b>
c0028086:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028089:	72 07                	jb     c0028092 <__divdf3+0x22e>
c002808b:	75 3c                	jne    c00280c9 <__divdf3+0x265>
c002808d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028090:	77 37                	ja     c00280c9 <__divdf3+0x265>
c0028092:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028095:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028098:	31 d2                	xor    edx,edx
c002809a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002809d:	0f 97 c2             	seta   dl
c00280a0:	29 d6                	sub    esi,edx
c00280a2:	89 d9                	mov    ecx,ebx
c00280a4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00280a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00280ad:	eb 17                	jmp    c00280c6 <__divdf3+0x262>
c00280af:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280b2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280b8:	0f 97 c1             	seta   cl
c00280bb:	0f b6 c9             	movzx  ecx,cl
c00280be:	29 ce                	sub    esi,ecx
c00280c0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280c3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280c6:	83 ca 01             	or     edx,0x1
c00280c9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280cc:	75 8b                	jne    c0028059 <__divdf3+0x1f5>
c00280ce:	c1 e7 09             	shl    edi,0x9
c00280d1:	89 d1                	mov    ecx,edx
c00280d3:	c1 e9 17             	shr    ecx,0x17
c00280d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280d9:	09 f3                	or     ebx,esi
c00280db:	0f 95 c3             	setne  bl
c00280de:	0f b6 db             	movzx  ebx,bl
c00280e1:	c1 e2 09             	shl    edx,0x9
c00280e4:	09 d3                	or     ebx,edx
c00280e6:	89 ca                	mov    edx,ecx
c00280e8:	09 fa                	or     edx,edi
c00280ea:	78 0c                	js     c00280f8 <__divdf3+0x294>
c00280ec:	01 d2                	add    edx,edx
c00280ee:	89 d9                	mov    ecx,ebx
c00280f0:	c1 e9 1f             	shr    ecx,0x1f
c00280f3:	09 ca                	or     edx,ecx
c00280f5:	01 db                	add    ebx,ebx
c00280f7:	48                   	dec    eax
c00280f8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280fd:	0f 8f 83 00 00 00    	jg     c0028186 <__divdf3+0x322>
c0028103:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028109:	85 c0                	test   eax,eax
c002810b:	0f 8f 82 00 00 00    	jg     c0028193 <__divdf3+0x32f>
c0028111:	83 f8 cc             	cmp    eax,0xffffffcc
c0028114:	7c 77                	jl     c002818d <__divdf3+0x329>
c0028116:	be 01 00 00 00       	mov    esi,0x1
c002811b:	29 c6                	sub    esi,eax
c002811d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028123:	83 fe 1f             	cmp    esi,0x1f
c0028126:	7e 2f                	jle    c0028157 <__divdf3+0x2f3>
c0028128:	83 fe 20             	cmp    esi,0x20
c002812b:	75 0a                	jne    c0028137 <__divdf3+0x2d3>
c002812d:	85 db                	test   ebx,ebx
c002812f:	0f 95 c3             	setne  bl
c0028132:	0f b6 db             	movzx  ebx,bl
c0028135:	eb 1a                	jmp    c0028151 <__divdf3+0x2ed>
c0028137:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002813a:	89 d7                	mov    edi,edx
c002813c:	d3 e7                	shl    edi,cl
c002813e:	89 f9                	mov    ecx,edi
c0028140:	09 d9                	or     ecx,ebx
c0028142:	0f 95 c3             	setne  bl
c0028145:	0f b6 db             	movzx  ebx,bl
c0028148:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002814d:	29 c1                	sub    ecx,eax
c002814f:	d3 ea                	shr    edx,cl
c0028151:	09 d3                	or     ebx,edx
c0028153:	31 c0                	xor    eax,eax
c0028155:	eb 3a                	jmp    c0028191 <__divdf3+0x32d>
c0028157:	83 c0 1f             	add    eax,0x1f
c002815a:	89 d7                	mov    edi,edx
c002815c:	88 c1                	mov    cl,al
c002815e:	d3 e7                	shl    edi,cl
c0028160:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028163:	89 df                	mov    edi,ebx
c0028165:	89 f1                	mov    ecx,esi
c0028167:	d3 ef                	shr    edi,cl
c0028169:	89 f9                	mov    ecx,edi
c002816b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002816e:	09 cf                	or     edi,ecx
c0028170:	88 c1                	mov    cl,al
c0028172:	d3 e3                	shl    ebx,cl
c0028174:	85 db                	test   ebx,ebx
c0028176:	0f 95 c3             	setne  bl
c0028179:	0f b6 db             	movzx  ebx,bl
c002817c:	09 fb                	or     ebx,edi
c002817e:	89 f1                	mov    ecx,esi
c0028180:	d3 ea                	shr    edx,cl
c0028182:	31 c0                	xor    eax,eax
c0028184:	eb 0d                	jmp    c0028193 <__divdf3+0x32f>
c0028186:	b8 ff 07 00 00       	mov    eax,0x7ff
c002818b:	eb 02                	jmp    c002818f <__divdf3+0x32b>
c002818d:	31 c0                	xor    eax,eax
c002818f:	31 db                	xor    ebx,ebx
c0028191:	31 d2                	xor    edx,edx
c0028193:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028196:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028199:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002819f:	09 c8                	or     eax,ecx
c00281a1:	c1 e0 14             	shl    eax,0x14
c00281a4:	89 d1                	mov    ecx,edx
c00281a6:	c1 e9 0b             	shr    ecx,0xb
c00281a9:	09 c8                	or     eax,ecx
c00281ab:	89 c6                	mov    esi,eax
c00281ad:	89 d9                	mov    ecx,ebx
c00281af:	c1 e9 0b             	shr    ecx,0xb
c00281b2:	c1 e2 15             	shl    edx,0x15
c00281b5:	09 ca                	or     edx,ecx
c00281b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281bd:	0f 95 c0             	setne  al
c00281c0:	09 c1                	or     ecx,eax
c00281c2:	83 e1 01             	and    ecx,0x1
c00281c5:	c1 eb 0a             	shr    ebx,0xa
c00281c8:	21 cb                	and    ebx,ecx
c00281ca:	01 d3                	add    ebx,edx
c00281cc:	89 d8                	mov    eax,ebx
c00281ce:	83 d6 00             	adc    esi,0x0
c00281d1:	89 f2                	mov    edx,esi
c00281d3:	89 c7                	mov    edi,eax
c00281d5:	89 d1                	mov    ecx,edx
c00281d7:	89 f8                	mov    eax,edi
c00281d9:	89 ca                	mov    edx,ecx
c00281db:	83 c4 2c             	add    esp,0x2c
c00281de:	5b                   	pop    ebx
c00281df:	5e                   	pop    esi
c00281e0:	5f                   	pop    edi
c00281e1:	5d                   	pop    ebp
c00281e2:	c3                   	ret    

c00281e3 <__floatsidf>:
c00281e3:	55                   	push   ebp
c00281e4:	89 e5                	mov    ebp,esp
c00281e6:	56                   	push   esi
c00281e7:	53                   	push   ebx
c00281e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281eb:	85 db                	test   ebx,ebx
c00281ed:	7e 15                	jle    c0028204 <__floatsidf+0x21>
c00281ef:	0f bd cb             	bsr    ecx,ebx
c00281f2:	83 f1 1f             	xor    ecx,0x1f
c00281f5:	d3 e3                	shl    ebx,cl
c00281f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028202:	eb 21                	jmp    c0028225 <__floatsidf+0x42>
c0028204:	b8 00 00 00 00       	mov    eax,0x0
c0028209:	ba 00 00 00 00       	mov    edx,0x0
c002820e:	74 2a                	je     c002823a <__floatsidf+0x57>
c0028210:	f7 db                	neg    ebx
c0028212:	0f bd cb             	bsr    ecx,ebx
c0028215:	83 f1 1f             	xor    ecx,0x1f
c0028218:	d3 e3                	shl    ebx,cl
c002821a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028220:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028225:	29 c8                	sub    eax,ecx
c0028227:	c1 e0 14             	shl    eax,0x14
c002822a:	89 c1                	mov    ecx,eax
c002822c:	89 de                	mov    esi,ebx
c002822e:	c1 ee 0b             	shr    esi,0xb
c0028231:	09 f1                	or     ecx,esi
c0028233:	89 ca                	mov    edx,ecx
c0028235:	c1 e3 15             	shl    ebx,0x15
c0028238:	89 d8                	mov    eax,ebx
c002823a:	5b                   	pop    ebx
c002823b:	5e                   	pop    esi
c002823c:	5d                   	pop    ebp
c002823d:	c3                   	ret    

c002823e <__floatunsidf>:
c002823e:	55                   	push   ebp
c002823f:	89 e5                	mov    ebp,esp
c0028241:	56                   	push   esi
c0028242:	53                   	push   ebx
c0028243:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028246:	85 db                	test   ebx,ebx
c0028248:	74 2a                	je     c0028274 <__floatunsidf+0x36>
c002824a:	0f bd cb             	bsr    ecx,ebx
c002824d:	83 f1 1f             	xor    ecx,0x1f
c0028250:	d3 e3                	shl    ebx,cl
c0028252:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028258:	b8 1e 04 00 00       	mov    eax,0x41e
c002825d:	29 c8                	sub    eax,ecx
c002825f:	c1 e0 14             	shl    eax,0x14
c0028262:	89 c1                	mov    ecx,eax
c0028264:	89 de                	mov    esi,ebx
c0028266:	c1 ee 0b             	shr    esi,0xb
c0028269:	09 f1                	or     ecx,esi
c002826b:	89 ca                	mov    edx,ecx
c002826d:	c1 e3 15             	shl    ebx,0x15
c0028270:	89 d8                	mov    eax,ebx
c0028272:	eb 04                	jmp    c0028278 <__floatunsidf+0x3a>
c0028274:	31 c0                	xor    eax,eax
c0028276:	31 d2                	xor    edx,edx
c0028278:	5b                   	pop    ebx
c0028279:	5e                   	pop    esi
c002827a:	5d                   	pop    ebp
c002827b:	c3                   	ret    

c002827c <__fixdfsi>:
c002827c:	55                   	push   ebp
c002827d:	89 e5                	mov    ebp,esp
c002827f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028282:	89 d1                	mov    ecx,edx
c0028284:	c1 e1 0b             	shl    ecx,0xb
c0028287:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002828d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028290:	c1 e8 15             	shr    eax,0x15
c0028293:	09 c1                	or     ecx,eax
c0028295:	c1 fa 14             	sar    edx,0x14
c0028298:	78 1f                	js     c00282b9 <__fixdfsi+0x3d>
c002829a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00282a0:	31 c0                	xor    eax,eax
c00282a2:	83 fa 1e             	cmp    edx,0x1e
c00282a5:	77 40                	ja     c00282e7 <__fixdfsi+0x6b>
c00282a7:	89 c8                	mov    eax,ecx
c00282a9:	0d 00 00 00 80       	or     eax,0x80000000
c00282ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282b3:	29 d1                	sub    ecx,edx
c00282b5:	d3 e8                	shr    eax,cl
c00282b7:	eb 2e                	jmp    c00282e7 <__fixdfsi+0x6b>
c00282b9:	31 c0                	xor    eax,eax
c00282bb:	81 c2 01 04 00 00    	add    edx,0x401
c00282c1:	78 24                	js     c00282e7 <__fixdfsi+0x6b>
c00282c3:	83 fa 1e             	cmp    edx,0x1e
c00282c6:	7e 09                	jle    c00282d1 <__fixdfsi+0x55>
c00282c8:	83 fa 1f             	cmp    edx,0x1f
c00282cb:	75 18                	jne    c00282e5 <__fixdfsi+0x69>
c00282cd:	85 c9                	test   ecx,ecx
c00282cf:	75 14                	jne    c00282e5 <__fixdfsi+0x69>
c00282d1:	89 c8                	mov    eax,ecx
c00282d3:	0d 00 00 00 80       	or     eax,0x80000000
c00282d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282dd:	29 d1                	sub    ecx,edx
c00282df:	d3 e8                	shr    eax,cl
c00282e1:	f7 d8                	neg    eax
c00282e3:	eb 02                	jmp    c00282e7 <__fixdfsi+0x6b>
c00282e5:	31 c0                	xor    eax,eax
c00282e7:	5d                   	pop    ebp
c00282e8:	c3                   	ret    

c00282e9 <__fixunsdfsi>:
c00282e9:	55                   	push   ebp
c00282ea:	89 e5                	mov    ebp,esp
c00282ec:	53                   	push   ebx
c00282ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282f3:	89 d3                	mov    ebx,edx
c00282f5:	c1 fb 14             	sar    ebx,0x14
c00282f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282fe:	31 c0                	xor    eax,eax
c0028300:	83 fb 1f             	cmp    ebx,0x1f
c0028303:	77 1d                	ja     c0028322 <__fixunsdfsi+0x39>
c0028305:	89 d0                	mov    eax,edx
c0028307:	c1 e0 0b             	shl    eax,0xb
c002830a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002830f:	c1 e9 15             	shr    ecx,0x15
c0028312:	09 c8                	or     eax,ecx
c0028314:	0d 00 00 00 80       	or     eax,0x80000000
c0028319:	b9 1f 00 00 00       	mov    ecx,0x1f
c002831e:	29 d9                	sub    ecx,ebx
c0028320:	d3 e8                	shr    eax,cl
c0028322:	5b                   	pop    ebx
c0028323:	5d                   	pop    ebp
c0028324:	c3                   	ret    

c0028325 <__cmpdf2>:
c0028325:	55                   	push   ebp
c0028326:	89 e5                	mov    ebp,esp
c0028328:	57                   	push   edi
c0028329:	56                   	push   esi
c002832a:	53                   	push   ebx
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028331:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028334:	89 ca                	mov    edx,ecx
c0028336:	c1 ea 14             	shr    edx,0x14
c0028339:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002833f:	89 cb                	mov    ebx,ecx
c0028341:	c1 fb 1f             	sar    ebx,0x1f
c0028344:	31 da                	xor    edx,ebx
c0028346:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028349:	89 df                	mov    edi,ebx
c002834b:	c1 e7 0b             	shl    edi,0xb
c002834e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028351:	c1 e1 0b             	shl    ecx,0xb
c0028354:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002835a:	c1 eb 15             	shr    ebx,0x15
c002835d:	09 d9                	or     ecx,ebx
c002835f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028362:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028365:	89 ce                	mov    esi,ecx
c0028367:	c1 ee 14             	shr    esi,0x14
c002836a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028370:	89 cb                	mov    ebx,ecx
c0028372:	c1 fb 1f             	sar    ebx,0x1f
c0028375:	31 de                	xor    esi,ebx
c0028377:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002837a:	89 df                	mov    edi,ebx
c002837c:	c1 e7 0b             	shl    edi,0xb
c002837f:	c1 e1 0b             	shl    ecx,0xb
c0028382:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028388:	c1 eb 15             	shr    ebx,0x15
c002838b:	09 d9                	or     ecx,ebx
c002838d:	89 d3                	mov    ebx,edx
c002838f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028395:	43                   	inc    ebx
c0028396:	83 fb 01             	cmp    ebx,0x1
c0028399:	77 08                	ja     c00283a3 <__cmpdf2+0x7e>
c002839b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002839e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283a1:	75 68                	jne    c002840b <__cmpdf2+0xe6>
c00283a3:	89 f3                	mov    ebx,esi
c00283a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283ab:	43                   	inc    ebx
c00283ac:	83 fb 01             	cmp    ebx,0x1
c00283af:	77 06                	ja     c00283b7 <__cmpdf2+0x92>
c00283b1:	89 fb                	mov    ebx,edi
c00283b3:	09 cb                	or     ebx,ecx
c00283b5:	75 54                	jne    c002840b <__cmpdf2+0xe6>
c00283b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283ba:	09 f8                	or     eax,edi
c00283bc:	09 c8                	or     eax,ecx
c00283be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283c1:	75 12                	jne    c00283d5 <__cmpdf2+0xb0>
c00283c3:	8d 42 01             	lea    eax,[edx+0x1]
c00283c6:	83 f8 01             	cmp    eax,0x1
c00283c9:	77 0a                	ja     c00283d5 <__cmpdf2+0xb0>
c00283cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283ce:	31 c0                	xor    eax,eax
c00283d0:	83 fb 01             	cmp    ebx,0x1
c00283d3:	76 36                	jbe    c002840b <__cmpdf2+0xe6>
c00283d5:	b8 01 00 00 00       	mov    eax,0x1
c00283da:	39 f2                	cmp    edx,esi
c00283dc:	7f 2d                	jg     c002840b <__cmpdf2+0xe6>
c00283de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283e3:	7c 26                	jl     c002840b <__cmpdf2+0xe6>
c00283e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283e8:	77 07                	ja     c00283f1 <__cmpdf2+0xcc>
c00283ea:	72 16                	jb     c0028402 <__cmpdf2+0xdd>
c00283ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283ef:	76 0a                	jbe    c00283fb <__cmpdf2+0xd6>
c00283f1:	89 d0                	mov    eax,edx
c00283f3:	c1 f8 1f             	sar    eax,0x1f
c00283f6:	83 c8 01             	or     eax,0x1
c00283f9:	eb 10                	jmp    c002840b <__cmpdf2+0xe6>
c00283fb:	b8 00 00 00 00       	mov    eax,0x0
c0028400:	73 09                	jae    c002840b <__cmpdf2+0xe6>
c0028402:	89 d0                	mov    eax,edx
c0028404:	c1 f8 1f             	sar    eax,0x1f
c0028407:	83 e0 02             	and    eax,0x2
c002840a:	48                   	dec    eax
c002840b:	83 c4 0c             	add    esp,0xc
c002840e:	5b                   	pop    ebx
c002840f:	5e                   	pop    esi
c0028410:	5f                   	pop    edi
c0028411:	5d                   	pop    ebp
c0028412:	c3                   	ret    

c0028413 <__eqdf2>:
c0028413:	55                   	push   ebp
c0028414:	89 e5                	mov    ebp,esp
c0028416:	50                   	push   eax
c0028417:	6a 01                	push   0x1
c0028419:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002841c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002841f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028425:	e8 fb fe ff ff       	call   c0028325 <__cmpdf2>
c002842a:	83 c4 18             	add    esp,0x18
c002842d:	c9                   	leave  
c002842e:	c3                   	ret    

c002842f <__nedf2>:
c002842f:	eb e2                	jmp    c0028413 <__eqdf2>

c0028431 <__gtdf2>:
c0028431:	55                   	push   ebp
c0028432:	89 e5                	mov    ebp,esp
c0028434:	50                   	push   eax
c0028435:	6a ff                	push   0xffffffff
c0028437:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002843a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002843d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028440:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028443:	e8 dd fe ff ff       	call   c0028325 <__cmpdf2>
c0028448:	83 c4 18             	add    esp,0x18
c002844b:	c9                   	leave  
c002844c:	c3                   	ret    

c002844d <__gedf2>:
c002844d:	eb e2                	jmp    c0028431 <__gtdf2>

c002844f <__ltdf2>:
c002844f:	eb c2                	jmp    c0028413 <__eqdf2>

c0028451 <__ledf2>:
c0028451:	eb c0                	jmp    c0028413 <__eqdf2>

c0028453 <__truncdfsf2>:
c0028453:	55                   	push   ebp
c0028454:	89 e5                	mov    ebp,esp
c0028456:	57                   	push   edi
c0028457:	56                   	push   esi
c0028458:	53                   	push   ebx
c0028459:	83 ec 0c             	sub    esp,0xc
c002845c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002845f:	89 d1                	mov    ecx,edx
c0028461:	c1 f9 14             	sar    ecx,0x14
c0028464:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028467:	89 df                	mov    edi,ebx
c0028469:	c1 e7 0b             	shl    edi,0xb
c002846c:	89 d0                	mov    eax,edx
c002846e:	c1 e0 0b             	shl    eax,0xb
c0028471:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028476:	c1 eb 15             	shr    ebx,0x15
c0028479:	09 d8                	or     eax,ebx
c002847b:	89 cb                	mov    ebx,ecx
c002847d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028483:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028489:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002848f:	0f 86 9e 00 00 00    	jbe    c0028533 <__truncdfsf2+0xe0>
c0028495:	85 db                	test   ebx,ebx
c0028497:	75 0a                	jne    c00284a3 <__truncdfsf2+0x50>
c0028499:	c1 fa 17             	sar    edx,0x17
c002849c:	30 d2                	xor    dl,dl
c002849e:	e9 84 00 00 00       	jmp    c0028527 <__truncdfsf2+0xd4>
c00284a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00284a9:	83 fe 83             	cmp    esi,0xffffff83
c00284ac:	7d 4b                	jge    c00284f9 <__truncdfsf2+0xa6>
c00284ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284b3:	29 f1                	sub    ecx,esi
c00284b5:	83 f9 1f             	cmp    ecx,0x1f
c00284b8:	7f 6b                	jg     c0028525 <__truncdfsf2+0xd2>
c00284ba:	0d 00 00 00 80       	or     eax,0x80000000
c00284bf:	89 c3                	mov    ebx,eax
c00284c1:	d3 eb                	shr    ebx,cl
c00284c3:	be 01 00 00 00       	mov    esi,0x1
c00284c8:	d3 e6                	shl    esi,cl
c00284ca:	4e                   	dec    esi
c00284cb:	21 f0                	and    eax,esi
c00284cd:	09 f8                	or     eax,edi
c00284cf:	0f 95 c0             	setne  al
c00284d2:	0f b6 c0             	movzx  eax,al
c00284d5:	09 c3                	or     ebx,eax
c00284d7:	89 d9                	mov    ecx,ebx
c00284d9:	c1 e9 08             	shr    ecx,0x8
c00284dc:	f6 c3 7f             	test   bl,0x7f
c00284df:	0f 95 c0             	setne  al
c00284e2:	09 c8                	or     eax,ecx
c00284e4:	83 e0 01             	and    eax,0x1
c00284e7:	c1 eb 07             	shr    ebx,0x7
c00284ea:	21 c3                	and    ebx,eax
c00284ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284f2:	09 d1                	or     ecx,edx
c00284f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284f7:	eb 76                	jmp    c002856f <__truncdfsf2+0x11c>
c00284f9:	83 c6 80             	add    esi,0xffffff80
c00284fc:	7e 1d                	jle    c002851b <__truncdfsf2+0xc8>
c00284fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028504:	75 0b                	jne    c0028511 <__truncdfsf2+0xbe>
c0028506:	09 f8                	or     eax,edi
c0028508:	74 09                	je     c0028513 <__truncdfsf2+0xc0>
c002850a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002850f:	eb 02                	jmp    c0028513 <__truncdfsf2+0xc0>
c0028511:	31 c0                	xor    eax,eax
c0028513:	c1 fa 17             	sar    edx,0x17
c0028516:	80 ca ff             	or     dl,0xff
c0028519:	eb 0e                	jmp    c0028529 <__truncdfsf2+0xd6>
c002851b:	c1 fa 1f             	sar    edx,0x1f
c002851e:	c1 e2 08             	shl    edx,0x8
c0028521:	09 ca                	or     edx,ecx
c0028523:	eb 04                	jmp    c0028529 <__truncdfsf2+0xd6>
c0028525:	31 d2                	xor    edx,edx
c0028527:	31 c0                	xor    eax,eax
c0028529:	c1 e2 17             	shl    edx,0x17
c002852c:	c1 e8 08             	shr    eax,0x8
c002852f:	09 d0                	or     eax,edx
c0028531:	eb 3c                	jmp    c002856f <__truncdfsf2+0x11c>
c0028533:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028539:	89 ca                	mov    edx,ecx
c002853b:	c1 fa 0b             	sar    edx,0xb
c002853e:	c1 e2 08             	shl    edx,0x8
c0028541:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028544:	31 db                	xor    ebx,ebx
c0028546:	85 ff                	test   edi,edi
c0028548:	0f 95 c3             	setne  bl
c002854b:	09 d8                	or     eax,ebx
c002854d:	89 c3                	mov    ebx,eax
c002854f:	c1 eb 08             	shr    ebx,0x8
c0028552:	a8 7f                	test   al,0x7f
c0028554:	0f 95 c2             	setne  dl
c0028557:	89 d6                	mov    esi,edx
c0028559:	09 de                	or     esi,ebx
c002855b:	83 e6 01             	and    esi,0x1
c002855e:	c1 e8 07             	shr    eax,0x7
c0028561:	21 f0                	and    eax,esi
c0028563:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028566:	09 ca                	or     edx,ecx
c0028568:	c1 e2 17             	shl    edx,0x17
c002856b:	09 da                	or     edx,ebx
c002856d:	01 d0                	add    eax,edx
c002856f:	83 c4 0c             	add    esp,0xc
c0028572:	5b                   	pop    ebx
c0028573:	5e                   	pop    esi
c0028574:	5f                   	pop    edi
c0028575:	5d                   	pop    ebp
c0028576:	c3                   	ret    

c0028577 <__extendsfdf2>:
c0028577:	55                   	push   ebp
c0028578:	89 e5                	mov    ebp,esp
c002857a:	57                   	push   edi
c002857b:	56                   	push   esi
c002857c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002857f:	89 d1                	mov    ecx,edx
c0028581:	c1 f9 17             	sar    ecx,0x17
c0028584:	c1 e2 08             	shl    edx,0x8
c0028587:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002858d:	89 c8                	mov    eax,ecx
c002858f:	80 e4 f8             	and    ah,0xf8
c0028592:	8d 71 01             	lea    esi,[ecx+0x1]
c0028595:	81 e6 fe 00 00 00    	and    esi,0xfe
c002859b:	75 27                	jne    c00285c4 <__extendsfdf2+0x4d>
c002859d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00285a3:	75 18                	jne    c00285bd <__extendsfdf2+0x46>
c00285a5:	85 d2                	test   edx,edx
c00285a7:	74 20                	je     c00285c9 <__extendsfdf2+0x52>
c00285a9:	41                   	inc    ecx
c00285aa:	01 d2                	add    edx,edx
c00285ac:	79 fb                	jns    c00285a9 <__extendsfdf2+0x32>
c00285ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285b4:	29 c8                	sub    eax,ecx
c00285b6:	05 81 03 00 00       	add    eax,0x381
c00285bb:	eb 0c                	jmp    c00285c9 <__extendsfdf2+0x52>
c00285bd:	05 00 07 00 00       	add    eax,0x700
c00285c2:	eb 05                	jmp    c00285c9 <__extendsfdf2+0x52>
c00285c4:	05 80 03 00 00       	add    eax,0x380
c00285c9:	c1 e0 14             	shl    eax,0x14
c00285cc:	89 c1                	mov    ecx,eax
c00285ce:	89 d0                	mov    eax,edx
c00285d0:	c1 e8 0b             	shr    eax,0xb
c00285d3:	09 c1                	or     ecx,eax
c00285d5:	c1 e2 15             	shl    edx,0x15
c00285d8:	89 d0                	mov    eax,edx
c00285da:	89 ca                	mov    edx,ecx
c00285dc:	5e                   	pop    esi
c00285dd:	5f                   	pop    edi
c00285de:	5d                   	pop    ebp
c00285df:	c3                   	ret    

c00285e0 <fabs>:
c00285e0:	83 ec 0c             	sub    esp,0xc
c00285e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285f7:	dd 04 24             	fld    QWORD PTR [esp]
c00285fa:	83 c4 0c             	add    esp,0xc
c00285fd:	c3                   	ret    
c00285fe:	66 90                	xchg   ax,ax

c0028600 <lrint>:
c0028600:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028604:	83 ec 04             	sub    esp,0x4
c0028607:	db 1c 24             	fistp  DWORD PTR [esp]
c002860a:	58                   	pop    eax
c002860b:	c3                   	ret    

c002860c <lrintf>:
c002860c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028610:	83 ec 04             	sub    esp,0x4
c0028613:	db 1c 24             	fistp  DWORD PTR [esp]
c0028616:	58                   	pop    eax
c0028617:	c3                   	ret    

Disassembly of section .init:

c0028618 <_init>:
c0028618:	55                   	push   ebp
c0028619:	89 e5                	mov    ebp,esp
c002861b:	e8 f8 7a fd ff       	call   c0000118 <frame_dummy>
c0028620:	e8 63 e0 ff ff       	call   c0026688 <__do_global_ctors_aux>
c0028625:	5d                   	pop    ebp
c0028626:	c3                   	ret    

Disassembly of section .fini:

c0028627 <_fini>:
c0028627:	55                   	push   ebp
c0028628:	89 e5                	mov    ebp,esp
c002862a:	e8 79 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002862f:	5d                   	pop    ebp
c0028630:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028632 <Computer::~Computer()>:
c0028632:	83 ec 0c             	sub    esp,0xc
c0028635:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c002863a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863e:	89 10                	mov    DWORD PTR [eax],edx
c0028640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028644:	83 ec 0c             	sub    esp,0xc
c0028647:	50                   	push   eax
c0028648:	e8 83 bb fe ff       	call   c00141d0 <Device::~Device()>
c002864d:	83 c4 10             	add    esp,0x10
c0028650:	90                   	nop
c0028651:	83 c4 0c             	add    esp,0xc
c0028654:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028656 <Computer::~Computer()>:
c0028656:	83 ec 0c             	sub    esp,0xc
c0028659:	83 ec 0c             	sub    esp,0xc
c002865c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028660:	e8 cd ff ff ff       	call   c0028632 <Computer::~Computer()>
c0028665:	83 c4 10             	add    esp,0x10
c0028668:	83 ec 08             	sub    esp,0x8
c002866b:	68 ec 01 00 00       	push   0x1ec
c0028670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028674:	e8 7f a7 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028679:	83 c4 10             	add    esp,0x10
c002867c:	83 c4 0c             	add    esp,0xc
c002867f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028680 <idleCommon()>:
c0028680:	83 ec 0c             	sub    esp,0xc
c0028683:	e8 ef 56 ff ff       	call   c001dd77 <lockScheduler()>
c0028688:	e8 25 5a ff ff       	call   c001e0b2 <schedule()>
c002868d:	83 c4 0c             	add    esp,0xc
c0028690:	e9 e4 56 ff ff       	jmp    c001dd79 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028696 <LinkedList<UnixFile>::~LinkedList()>:
c0028696:	90                   	nop
c0028697:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028698 <LinkedList<UnixFile>::LinkedList()>:
c0028698:	83 ec 0c             	sub    esp,0xc
c002869b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286db:	83 ec 0c             	sub    esp,0xc
c00286de:	68 32 a4 02 c0       	push   0xc002a432
c00286e3:	e8 f0 a7 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00286e8:	83 c4 10             	add    esp,0x10
c00286eb:	90                   	nop
c00286ec:	83 c4 0c             	add    esp,0xc
c00286ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286f0:	83 ec 0c             	sub    esp,0xc
c00286f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286f8:	75 10                	jne    c002870a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	68 4c a4 02 c0       	push   0xc002a44c
c0028702:	e8 76 1e ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028710:	85 c0                	test   eax,eax
c0028712:	74 34                	je     c0028748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002871b:	85 c0                	test   eax,eax
c002871d:	74 29                	je     c0028748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002871f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002872a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028746:	eb 65                	jmp    c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874c:	8b 00                	mov    eax,DWORD PTR [eax]
c002874e:	85 c0                	test   eax,eax
c0028750:	75 4b                	jne    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028759:	85 c0                	test   eax,eax
c002875b:	75 40                	jne    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 10                	mov    DWORD PTR [eax],edx
c0028767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028779:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028787:	85 c0                	test   eax,eax
c0028789:	74 22                	je     c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	68 6e a4 02 c0       	push   0xc002a46e
c0028793:	e8 e5 1d ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028798:	83 c4 10             	add    esp,0x10
c002879b:	eb 10                	jmp    c00287ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002879d:	83 ec 0c             	sub    esp,0xc
c00287a0:	68 78 a4 02 c0       	push   0xc002a478
c00287a5:	e8 d3 1d ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00287aa:	83 c4 10             	add    esp,0x10
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b4:	8d 50 01             	lea    edx,[eax+0x1]
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287be:	90                   	nop
c00287bf:	83 c4 0c             	add    esp,0xc
c00287c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287c4 <LinkedList<UnixFile>::getFirstElement()>:
c00287c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287cc <LinkedList<UnixFile>::removeFirst()>:
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d5:	85 c0                	test   eax,eax
c00287d7:	75 12                	jne    c00287eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287d9:	83 ec 0c             	sub    esp,0xc
c00287dc:	68 84 a4 02 c0       	push   0xc002a484
c00287e1:	e8 97 1d ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00287e6:	83 c4 10             	add    esp,0x10
c00287e9:	eb 7e                	jmp    c0028869 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f5:	85 c0                	test   eax,eax
c00287f7:	74 10                	je     c0028809 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287f9:	83 ec 0c             	sub    esp,0xc
c00287fc:	68 cf a4 02 c0       	push   0xc002a4cf
c0028801:	e8 77 1d ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028806:	83 c4 10             	add    esp,0x10
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	8b 00                	mov    eax,DWORD PTR [eax]
c002880f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028812:	85 c0                	test   eax,eax
c0028814:	75 33                	jne    c0028849 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028832:	83 f8 01             	cmp    eax,0x1
c0028835:	74 21                	je     c0028858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028837:	83 ec 0c             	sub    esp,0xc
c002883a:	68 a8 a4 02 c0       	push   0xc002a4a8
c002883f:	e8 39 1d ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028844:	83 c4 10             	add    esp,0x10
c0028847:	eb 0f                	jmp    c0028858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884d:	8b 00                	mov    eax,DWORD PTR [eax]
c002884f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	89 10                	mov    DWORD PTR [eax],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002885f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028869:	83 c4 0c             	add    esp,0xc
c002886c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002886e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002886e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028875:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028876 <DriverlessDevice::~DriverlessDevice()>:
c0028876:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c002887b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002887f:	89 10                	mov    DWORD PTR [eax],edx
c0028881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028885:	50                   	push   eax
c0028886:	e8 45 b9 fe ff       	call   c00141d0 <Device::~Device()>
c002888b:	83 c4 04             	add    esp,0x4
c002888e:	90                   	nop
c002888f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028890 <DriverlessDevice::~DriverlessDevice()>:
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	83 ec 0c             	sub    esp,0xc
c0028896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889a:	e8 d7 ff ff ff       	call   c0028876 <DriverlessDevice::~DriverlessDevice()>
c002889f:	83 c4 10             	add    esp,0x10
c00288a2:	83 ec 08             	sub    esp,0x8
c00288a5:	68 58 01 00 00       	push   0x158
c00288aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ae:	e8 45 a5 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00288b3:	83 c4 10             	add    esp,0x10
c00288b6:	83 c4 0c             	add    esp,0xc
c00288b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288ba <LinkedList<Device>::addElement(Device*)>:
c00288ba:	83 ec 0c             	sub    esp,0xc
c00288bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288c2:	75 10                	jne    c00288d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288c4:	83 ec 0c             	sub    esp,0xc
c00288c7:	68 4c a4 02 c0       	push   0xc002a44c
c00288cc:	e8 ac 1c ff ff       	call   c001a57d <Krnl::panic(char const*)>
c00288d1:	83 c4 10             	add    esp,0x10
c00288d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288da:	85 c0                	test   eax,eax
c00288dc:	74 3a                	je     c0028918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 2f                	je     c0028918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028902:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028909:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002890c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028916:	eb 68                	jmp    c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	8b 00                	mov    eax,DWORD PTR [eax]
c002891e:	85 c0                	test   eax,eax
c0028920:	75 4e                	jne    c0028970 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028929:	85 c0                	test   eax,eax
c002892b:	75 43                	jne    c0028970 <LinkedList<Device>::addElement(Device*)+0xb6>
c002892d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028931:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028935:	89 10                	mov    DWORD PTR [eax],edx
c0028937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028949:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002895a:	85 c0                	test   eax,eax
c002895c:	74 22                	je     c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c002895e:	83 ec 0c             	sub    esp,0xc
c0028961:	68 6e a4 02 c0       	push   0xc002a46e
c0028966:	e8 12 1c ff ff       	call   c001a57d <Krnl::panic(char const*)>
c002896b:	83 c4 10             	add    esp,0x10
c002896e:	eb 10                	jmp    c0028980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028970:	83 ec 0c             	sub    esp,0xc
c0028973:	68 78 a4 02 c0       	push   0xc002a478
c0028978:	e8 00 1c ff ff       	call   c001a57d <Krnl::panic(char const*)>
c002897d:	83 c4 10             	add    esp,0x10
c0028980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028987:	8d 50 01             	lea    edx,[eax+0x1]
c002898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028991:	90                   	nop
c0028992:	83 c4 0c             	add    esp,0xc
c0028995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028996 <LinkedList<Device>::LinkedList()>:
c0028996:	83 ec 0c             	sub    esp,0xc
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289d9:	83 ec 0c             	sub    esp,0xc
c00289dc:	68 32 a4 02 c0       	push   0xc002a432
c00289e1:	e8 f2 a4 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c00289e6:	83 c4 10             	add    esp,0x10
c00289e9:	90                   	nop
c00289ea:	83 c4 0c             	add    esp,0xc
c00289ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fc:	85 c0                	test   eax,eax
c00289fe:	75 0e                	jne    c0028a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a07:	85 c0                	test   eax,eax
c0028a09:	75 03                	jne    c0028a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a0b:	b0 01                	mov    al,0x1
c0028a0d:	c3                   	ret    
c0028a0e:	b0 00                	mov    al,0x0
c0028a10:	90                   	nop
c0028a11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a12:	83 ec 0c             	sub    esp,0xc
c0028a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a19:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1b:	85 c0                	test   eax,eax
c0028a1d:	75 15                	jne    c0028a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a1f:	83 ec 0c             	sub    esp,0xc
c0028a22:	68 84 a4 02 c0       	push   0xc002a484
c0028a27:	e8 51 1b ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028a2c:	83 c4 10             	add    esp,0x10
c0028a2f:	e9 88 00 00 00       	jmp    c0028abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	0f 95 c0             	setne  al
c0028a43:	84 c0                	test   al,al
c0028a45:	74 10                	je     c0028a57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a47:	83 ec 0c             	sub    esp,0xc
c0028a4a:	68 cf a4 02 c0       	push   0xc002a4cf
c0028a4f:	e8 29 1b ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028a54:	83 c4 10             	add    esp,0x10
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a60:	85 c0                	test   eax,eax
c0028a62:	0f 94 c0             	sete   al
c0028a65:	84 c0                	test   al,al
c0028a67:	74 33                	je     c0028a9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a85:	83 f8 01             	cmp    eax,0x1
c0028a88:	74 21                	je     c0028aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	68 a8 a4 02 c0       	push   0xc002a4a8
c0028a92:	e8 e6 1a ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028a97:	83 c4 10             	add    esp,0x10
c0028a9a:	eb 0f                	jmp    c0028aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	89 10                	mov    DWORD PTR [eax],edx
c0028aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028abc:	83 c4 0c             	add    esp,0xc
c0028abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ac0:	83 ec 0c             	sub    esp,0xc
c0028ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ac8:	75 10                	jne    c0028ada <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	68 4c a4 02 c0       	push   0xc002a44c
c0028ad2:	e8 a6 1a ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae0:	85 c0                	test   eax,eax
c0028ae2:	74 34                	je     c0028b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aeb:	85 c0                	test   eax,eax
c0028aed:	74 29                	je     c0028b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028af6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028afa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b16:	eb 65                	jmp    c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1e:	85 c0                	test   eax,eax
c0028b20:	75 4b                	jne    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b29:	85 c0                	test   eax,eax
c0028b2b:	75 40                	jne    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b35:	89 10                	mov    DWORD PTR [eax],edx
c0028b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b57:	85 c0                	test   eax,eax
c0028b59:	74 22                	je     c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b5b:	83 ec 0c             	sub    esp,0xc
c0028b5e:	68 6e a4 02 c0       	push   0xc002a46e
c0028b63:	e8 15 1a ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028b68:	83 c4 10             	add    esp,0x10
c0028b6b:	eb 10                	jmp    c0028b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b6d:	83 ec 0c             	sub    esp,0xc
c0028b70:	68 78 a4 02 c0       	push   0xc002a478
c0028b75:	e8 03 1a ff ff       	call   c001a57d <Krnl::panic(char const*)>
c0028b7a:	83 c4 10             	add    esp,0x10
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b84:	8d 50 01             	lea    edx,[eax+0x1]
c0028b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b8e:	90                   	nop
c0028b8f:	83 c4 0c             	add    esp,0xc
c0028b92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b94 <ACPI::~ACPI()>:
c0028b94:	83 ec 0c             	sub    esp,0xc
c0028b97:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0028b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba0:	89 10                	mov    DWORD PTR [eax],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	83 ec 0c             	sub    esp,0xc
c0028ba9:	50                   	push   eax
c0028baa:	e8 21 b6 fe ff       	call   c00141d0 <Device::~Device()>
c0028baf:	83 c4 10             	add    esp,0x10
c0028bb2:	90                   	nop
c0028bb3:	83 c4 0c             	add    esp,0xc
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028bb8 <ACPI::~ACPI()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc2:	e8 cd ff ff ff       	call   c0028b94 <ACPI::~ACPI()>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	83 ec 08             	sub    esp,0x8
c0028bcd:	68 68 12 00 00       	push   0x1268
c0028bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd6:	e8 1d a2 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	83 c4 0c             	add    esp,0xc
c0028be1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028be2 <CPU::~CPU()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0028bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bee:	89 10                	mov    DWORD PTR [eax],edx
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	50                   	push   eax
c0028bf8:	e8 d3 b5 fe ff       	call   c00141d0 <Device::~Device()>
c0028bfd:	83 c4 10             	add    esp,0x10
c0028c00:	90                   	nop
c0028c01:	83 c4 0c             	add    esp,0xc
c0028c04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c06 <CPU::~CPU()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	83 ec 0c             	sub    esp,0xc
c0028c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c10:	e8 cd ff ff ff       	call   c0028be2 <CPU::~CPU()>
c0028c15:	83 c4 10             	add    esp,0x10
c0028c18:	83 ec 08             	sub    esp,0x8
c0028c1b:	68 98 11 00 00       	push   0x1198
c0028c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c24:	e8 cf a1 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	83 c4 0c             	add    esp,0xc
c0028c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c30:	90                   	nop
c0028c31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c32 <ThreadControlBlock::ThreadControlBlock()>:
c0028c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c6e:	90                   	nop
c0028c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c70:	83 ec 0c             	sub    esp,0xc
c0028c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cb3:	83 ec 0c             	sub    esp,0xc
c0028cb6:	68 32 a4 02 c0       	push   0xc002a432
c0028cbb:	e8 18 a2 fe ff       	call   c0012ed8 <Dbg::kprintf(char const*, ...)>
c0028cc0:	83 c4 10             	add    esp,0x10
c0028cc3:	90                   	nop
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ccc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cd0 <Vm::_FPUState::_FPUState()>:
c0028cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028cdb:	90                   	nop
c0028cdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cde <PCI::~PCI()>:
c0028cde:	83 ec 0c             	sub    esp,0xc
c0028ce1:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c0028ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cea:	89 10                	mov    DWORD PTR [eax],edx
c0028cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	50                   	push   eax
c0028cf4:	e8 af ae fe ff       	call   c0013ba8 <Bus::~Bus()>
c0028cf9:	83 c4 10             	add    esp,0x10
c0028cfc:	90                   	nop
c0028cfd:	83 c4 0c             	add    esp,0xc
c0028d00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d02 <PCI::~PCI()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	83 ec 0c             	sub    esp,0xc
c0028d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0c:	e8 cd ff ff ff       	call   c0028cde <PCI::~PCI()>
c0028d11:	83 c4 10             	add    esp,0x10
c0028d14:	83 ec 08             	sub    esp,0x8
c0028d17:	68 58 01 00 00       	push   0x158
c0028d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d20:	e8 d3 a0 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028d25:	83 c4 10             	add    esp,0x10
c0028d28:	83 c4 0c             	add    esp,0xc
c0028d2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d2c <IDE::~IDE()>:
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0028d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d38:	89 10                	mov    DWORD PTR [eax],edx
c0028d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	50                   	push   eax
c0028d42:	e8 79 b9 fe ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c0028d47:	83 c4 10             	add    esp,0x10
c0028d4a:	90                   	nop
c0028d4b:	83 c4 0c             	add    esp,0xc
c0028d4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d50 <IDE::~IDE()>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	83 ec 0c             	sub    esp,0xc
c0028d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5a:	e8 cd ff ff ff       	call   c0028d2c <IDE::~IDE()>
c0028d5f:	83 c4 10             	add    esp,0x10
c0028d62:	83 ec 08             	sub    esp,0x8
c0028d65:	68 70 02 00 00       	push   0x270
c0028d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6e:	e8 85 a0 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028d73:	83 c4 10             	add    esp,0x10
c0028d76:	83 c4 0c             	add    esp,0xc
c0028d79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d7a <SATABus::~SATABus()>:
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	ba 10 cd 02 c0       	mov    edx,0xc002cd10
c0028d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d86:	89 10                	mov    DWORD PTR [eax],edx
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	50                   	push   eax
c0028d90:	e8 2b b9 fe ff       	call   c00146c0 <HardDiskController::~HardDiskController()>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	90                   	nop
c0028d99:	83 c4 0c             	add    esp,0xc
c0028d9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d9e <SATABus::~SATABus()>:
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	83 ec 0c             	sub    esp,0xc
c0028da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da8:	e8 cd ff ff ff       	call   c0028d7a <SATABus::~SATABus()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	83 ec 08             	sub    esp,0x8
c0028db3:	68 64 01 00 00       	push   0x164
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 37 a0 fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 c4 0c             	add    esp,0xc
c0028dc7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028dc8 <ATA::~ATA()>:
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	ba 5c cd 02 c0       	mov    edx,0xc002cd5c
c0028dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd4:	89 10                	mov    DWORD PTR [eax],edx
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	50                   	push   eax
c0028dde:	e8 cf b9 fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	90                   	nop
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028dec <ATA::~ATA()>:
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	83 ec 0c             	sub    esp,0xc
c0028df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df6:	e8 cd ff ff ff       	call   c0028dc8 <ATA::~ATA()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	83 ec 08             	sub    esp,0x8
c0028e01:	68 7c 01 00 00       	push   0x17c
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 e9 9f fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 c4 0c             	add    esp,0xc
c0028e15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e16 <ATAPI::~ATAPI()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c0028e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e22:	89 10                	mov    DWORD PTR [eax],edx
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	50                   	push   eax
c0028e2c:	e8 81 b9 fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	90                   	nop
c0028e35:	83 c4 0c             	add    esp,0xc
c0028e38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e3a <ATAPI::~ATAPI()>:
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	83 ec 0c             	sub    esp,0xc
c0028e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e44:	e8 cd ff ff ff       	call   c0028e16 <ATAPI::~ATAPI()>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	68 80 01 00 00       	push   0x180
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 9b 9f fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 c4 0c             	add    esp,0xc
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e64 <SATA::~SATA()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0028e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e70:	89 10                	mov    DWORD PTR [eax],edx
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	50                   	push   eax
c0028e7a:	e8 33 b9 fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	90                   	nop
c0028e83:	83 c4 0c             	add    esp,0xc
c0028e86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e88 <SATA::~SATA()>:
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	83 ec 0c             	sub    esp,0xc
c0028e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e92:	e8 cd ff ff ff       	call   c0028e64 <SATA::~SATA()>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	83 ec 08             	sub    esp,0x8
c0028e9d:	68 7c 01 00 00       	push   0x17c
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 4d 9f fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 c4 0c             	add    esp,0xc
c0028eb1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028eb2 <SATAPI::~SATAPI()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 e5 b8 fe ff       	call   c00147b2 <PhysicalDisk::~PhysicalDisk()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ed6 <SATAPI::~SATAPI()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <SATAPI::~SATAPI()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 80 01 00 00       	push   0x180
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 ff 9e fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f00 <AVX::~AVX()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	89 10                	mov    DWORD PTR [eax],edx
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	50                   	push   eax
c0028f16:	e8 1b b9 fe ff       	call   c0014836 <FPU::~FPU()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	90                   	nop
c0028f1f:	83 c4 0c             	add    esp,0xc
c0028f22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f24 <AVX::~AVX()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	83 ec 0c             	sub    esp,0xc
c0028f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2e:	e8 cd ff ff ff       	call   c0028f00 <AVX::~AVX()>
c0028f33:	83 c4 10             	add    esp,0x10
c0028f36:	83 ec 08             	sub    esp,0x8
c0028f39:	68 58 01 00 00       	push   0x158
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 b1 9e fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 c4 0c             	add    esp,0xc
c0028f4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f4e <MMX::~MMX()>:
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c0028f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5a:	89 10                	mov    DWORD PTR [eax],edx
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	50                   	push   eax
c0028f64:	e8 cd b8 fe ff       	call   c0014836 <FPU::~FPU()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	90                   	nop
c0028f6d:	83 c4 0c             	add    esp,0xc
c0028f70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f72 <MMX::~MMX()>:
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	83 ec 0c             	sub    esp,0xc
c0028f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7c:	e8 cd ff ff ff       	call   c0028f4e <MMX::~MMX()>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	83 ec 08             	sub    esp,0x8
c0028f87:	68 58 01 00 00       	push   0x158
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 63 9e fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 c4 0c             	add    esp,0xc
c0028f9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f9c <SSE::~SSE()>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	89 10                	mov    DWORD PTR [eax],edx
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	50                   	push   eax
c0028fb2:	e8 7f b8 fe ff       	call   c0014836 <FPU::~FPU()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	90                   	nop
c0028fbb:	83 c4 0c             	add    esp,0xc
c0028fbe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fc0 <SSE::~SSE()>:
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	83 ec 0c             	sub    esp,0xc
c0028fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fca:	e8 cd ff ff ff       	call   c0028f9c <SSE::~SSE()>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	83 ec 08             	sub    esp,0x8
c0028fd5:	68 58 01 00 00       	push   0x158
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 15 9e fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 c4 0c             	add    esp,0xc
c0028fe9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028fea <x87::~x87()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	ba 24 d0 02 c0       	mov    edx,0xc002d024
c0028ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff6:	89 10                	mov    DWORD PTR [eax],edx
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	50                   	push   eax
c0029000:	e8 31 b8 fe ff       	call   c0014836 <FPU::~FPU()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	90                   	nop
c0029009:	83 c4 0c             	add    esp,0xc
c002900c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002900e <x87::~x87()>:
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	83 ec 0c             	sub    esp,0xc
c0029014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029018:	e8 cd ff ff ff       	call   c0028fea <x87::~x87()>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	83 ec 08             	sub    esp,0x8
c0029023:	68 58 01 00 00       	push   0x158
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 c7 9d fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 c4 0c             	add    esp,0xc
c0029037:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029038 <IOAPIC::~IOAPIC()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	89 10                	mov    DWORD PTR [eax],edx
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	50                   	push   eax
c002904e:	e8 7d b1 fe ff       	call   c00141d0 <Device::~Device()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	90                   	nop
c0029057:	83 c4 0c             	add    esp,0xc
c002905a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002905c <IOAPIC::~IOAPIC()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 ec 0c             	sub    esp,0xc
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 cd ff ff ff       	call   c0029038 <IOAPIC::~IOAPIC()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	68 68 01 00 00       	push   0x168
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 79 9d fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 c4 0c             	add    esp,0xc
c0029085:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029086 <APIC::~APIC()>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	50                   	push   eax
c002909c:	e8 5f bc fe ff       	call   c0014d00 <InterruptController::~InterruptController()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	90                   	nop
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00290aa <APIC::~APIC()>:
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	83 ec 0c             	sub    esp,0xc
c00290b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b4:	e8 cd ff ff ff       	call   c0029086 <APIC::~APIC()>
c00290b9:	83 c4 10             	add    esp,0x10
c00290bc:	83 ec 08             	sub    esp,0x8
c00290bf:	68 58 21 00 00       	push   0x2158
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 2b 9d fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 c4 0c             	add    esp,0xc
c00290d3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290d4 <PIC::~PIC()>:
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	ba cc d1 02 c0       	mov    edx,0xc002d1cc
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	89 10                	mov    DWORD PTR [eax],edx
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	50                   	push   eax
c00290ea:	e8 11 bc fe ff       	call   c0014d00 <InterruptController::~InterruptController()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	90                   	nop
c00290f3:	83 c4 0c             	add    esp,0xc
c00290f6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290f8 <PIC::~PIC()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	83 ec 0c             	sub    esp,0xc
c00290fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029102:	e8 cd ff ff ff       	call   c00290d4 <PIC::~PIC()>
c0029107:	83 c4 10             	add    esp,0x10
c002910a:	83 ec 08             	sub    esp,0x8
c002910d:	68 58 21 00 00       	push   0x2158
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 dd 9c fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 c4 0c             	add    esp,0xc
c0029121:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029122 <APICTimer::~APICTimer()>:
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	89 10                	mov    DWORD PTR [eax],edx
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	50                   	push   eax
c0029138:	e8 0f db fe ff       	call   c0016c4c <Timer::~Timer()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	90                   	nop
c0029141:	83 c4 0c             	add    esp,0xc
c0029144:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029146 <APICTimer::~APICTimer()>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 ec 0c             	sub    esp,0xc
c002914c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029150:	e8 cd ff ff ff       	call   c0029122 <APICTimer::~APICTimer()>
c0029155:	83 c4 10             	add    esp,0x10
c0029158:	83 ec 08             	sub    esp,0x8
c002915b:	68 60 01 00 00       	push   0x160
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 8f 9c fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 c4 0c             	add    esp,0xc
c002916f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029170 <PIT::~PIT()>:
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	ba 70 d2 02 c0       	mov    edx,0xc002d270
c0029178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917c:	89 10                	mov    DWORD PTR [eax],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	50                   	push   eax
c0029186:	e8 c1 da fe ff       	call   c0016c4c <Timer::~Timer()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	90                   	nop
c002918f:	83 c4 0c             	add    esp,0xc
c0029192:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029194 <PIT::~PIT()>:
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919e:	e8 cd ff ff ff       	call   c0029170 <PIT::~PIT()>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 ec 08             	sub    esp,0x8
c00291a9:	68 5c 01 00 00       	push   0x15c
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 41 9c fe ff       	call   c0012df8 <operator delete(void*, unsigned long)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 c4 0c             	add    esp,0xc
c00291bd:	c3                   	ret    
