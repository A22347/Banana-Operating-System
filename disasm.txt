
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 85 02 00       	call   c00285e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3c 92 02 c0       	mov    ebx,0xc002923c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 48 92 02 c0    	cmp    ebx,0xc0029248
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d2 02 c0       	mov    eax,0xc002d2f8
c0000049:	3d f8 d2 02 c0       	cmp    eax,0xc002d2f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d2 02 c0       	push   0xc002d2f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d2 02 c0       	mov    eax,0xc002d2f8
c0000075:	2d f8 d2 02 c0       	sub    eax,0xc002d2f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d2 02 c0       	push   0xc002d2f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d928,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 50 92 02 c0       	mov    ebx,0xc0029250
c00000bb:	81 eb 4c 92 02 c0    	sub    ebx,0xc002924c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 4c 92 02 c0       	mov    esi,0xc002924c
c00000ca:	a1 2c d9 02 c0       	mov    eax,ds:0xc002d92c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c d9 02 c0       	mov    ds:0xc002d92c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c d9 02 c0       	mov    eax,ds:0xc002d92c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d2 02 c0       	push   0xc002d2f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d928,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 d9 02 c0       	push   0xc002d930
c000012c:	68 f8 d2 02 c0       	push   0xc002d2f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 9d d0 01 00       	call   c001d440 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f4 21 01 00       	call   c00125af <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 7b d0 01 00       	call   c001d440 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 23 d5 01 00       	call   c001d907 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 39 db 01 00       	call   c001df26 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 dd 02 c0 	lgdtd  ds:0xc002dd70
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 5d 3f 01 00       	call   c001453f <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 d9 02 c0       	mov    ds:0xc002d948,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 d9 02 c0    	mov    DWORD PTR ds:0xc002d948,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d948
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6da0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6da0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6da0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d960
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 d9 02 c0    	mov    DWORD PTR ds:0xc002d960,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 d9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd269c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd269c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 d9 02 c0    	mov    DWORD PTR ds:0xc002d960,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c d9 02 c0    	cmp    DWORD PTR ds:0xc002d98c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d99c
c0000e38:	c7 42 0c 94 d9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d994
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c d9 02 c0    	mov    DWORD PTR ds:0xc002d99c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c d9 02 c0    	mov    DWORD PTR ds:0xc002d98c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 d9 02 c0 02 	test   BYTE PTR ds:0xc002d960,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d960
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd269c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd269c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 d9 02 c0 	lea    edx,[eax*8-0x3ffd266c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a0
c00011ba:	81 fb 94 d9 02 c0    	cmp    ebx,0xc002d994
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 d9 02 c0       	cmp    eax,0xc002d994
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 d9 02 c0    	cmp    DWORD PTR ds:0xc002d990,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c d9 02 c0       	mov    ds:0xc002d99c,eax
c00011f6:	a3 a0 d9 02 c0       	mov    ds:0xc002d9a0,eax
c00011fb:	a3 90 d9 02 c0       	mov    ds:0xc002d990,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d994
c0001209:	c7 40 0c 94 d9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d994
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 d9 02 c0       	mov    ds:0xc002d9a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d994
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 d9 02 c0 	lea    ebp,[edx*4-0x3ffd26a8]
c000125a:	8b 14 95 60 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd26a0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 d9 02 c0 	lea    ecx,[edx*4-0x3ffd26a0]
c0001275:	8b 14 95 60 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd26a0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 dc 02 c0 	or     DWORD PTR [edi*4-0x3ffd236c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 d9 02 c0 	lea    eax,[eax*8-0x3ffd266c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c d9 02 c0    	mov    DWORD PTR ds:0xc002d99c,ecx
c000132f:	89 0d a0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a0,ecx
c0001335:	c7 41 08 94 d9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d994
c000133c:	c7 41 0c 94 d9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d994
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c d9 02 c0 	lea    edx,[ecx*8-0x3ffd2674]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd236c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd236c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c d9 02 c0 	lea    edx,[eax*4-0x3ffd2674]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 dc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd236c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c d9 02 c0    	mov    DWORD PTR ds:0xc002d99c,edi
c0001402:	89 3d a0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a0,edi
c0001408:	c7 47 08 94 d9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d994
c000140f:	c7 47 0c 94 d9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d994
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c d9 02 c0       	mov    eax,ds:0xc002d98c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c d9 02 c0    	mov    DWORD PTR ds:0xc002d98c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 d9 02 c0       	mov    edx,0xc002d960
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d960,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dcb4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcb4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 dc 02 c0    	mov    DWORD PTR ds:0xc002dcb4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c d9 02 c0    	cmp    DWORD PTR ds:0xc002d98c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c d9 02 c0    	mov    DWORD PTR ds:0xc002d98c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d960,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc dc 02 c0    	push   DWORD PTR ds:0xc002dcbc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d960,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc dc 02 c0       	mov    eax,ds:0xc002dcbc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d98c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c d9 02 c0       	mov    eax,ds:0xc002d98c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd269c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 d9 02 c0       	mov    eax,0xc002d994
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c dc 02 c0       	cmp    eax,0xc002dc8c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 dc 02 c0       	mov    eax,ds:0xc002dcc8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcb0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcc4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcd4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 d9 02 c0       	mov    eax,ds:0xc002d960
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 d9 02 c0       	mov    ds:0xc002d960,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 dc 02 c0    	mov    DWORD PTR ds:0xc002dca4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 dc 02 c0    	mov    DWORD PTR ds:0xc002dca8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac dc 02 c0    	mov    DWORD PTR ds:0xc002dcac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcb4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 14 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcebe0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 64 ed 01 00       	jmp    c0020956 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 14 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcebe0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 95 ed 01 00       	jmp    c002099d <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 14 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcebe0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 bd ed 01 00       	jmp    c00209e4 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 3a 4a 02 00       	call   c0026944 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 93 02 c0       	mov    edx,0xc0029380
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba f0 c1 02 c0       	mov    edx,0xc002c1f0
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 94 02 c0       	mov    edx,0xc0029490
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 dd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2300]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 dc 02 c0    	mov    ax,ds:0xc002dce0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 dc 02 c0    	mov    ds:0xc002dce0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 37 38 02 00       	call   c0026944 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 94 02 c0       	mov    eax,0xc00294bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 02 22 02 00       	call   c0026944 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 94 02 c0       	mov    edx,0xc0029490
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2300],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 c9 0b 02 00       	call   c0026944 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 af 0b 02 00       	call   c0026944 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 93 02 c0       	mov    eax,0xc00293d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 93 02 c0       	mov    eax,0xc00293d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2300]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 93 02 c0       	mov    esi,0xc00293c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 f2 f2 01 00       	call   c0026944 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 94 02 c0       	mov    edx,0xc00294ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029800
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029800
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 46 fc 01 00       	call   c0028417 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 09 fc 01 00       	call   c00283f9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 dd fb 01 00       	call   c0028417 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 90 f2 01 00       	call   c0027b1c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 12 fd 01 00       	call   c00285b0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 57 fb 01 00       	call   c0028417 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 99 fa 01 00       	call   c0028417 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 66 fa 01 00       	call   c00283f9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 53 f9 01 00       	call   c0028417 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 1b f9 01 00       	call   c00283f9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 27 f7 01 00       	call   c0028417 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ec f6 01 00       	call   c00283f9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 fc f3 01 00       	call   c00281ab <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 7a ed 01 00       	call   c0027b48 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 36 f6 01 00       	call   c002841b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 24 f7 01 00       	call   c002853f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 0e ed 01 00       	call   c0027b48 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 b9 f5 01 00       	call   c0028415 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 9a f5 01 00       	call   c0028419 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 30 f7 01 00       	call   c00285d0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 da f2 01 00       	call   c00281ab <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 58 ec 01 00       	call   c0027b48 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 14 f5 01 00       	call   c002841b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 02 f6 01 00       	call   c002853f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ec eb 01 00       	call   c0027b48 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 97 f4 01 00       	call   c0028415 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 77 f4 01 00       	call   c0028419 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 0c f6 01 00       	call   c00285d0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 b2 f3 01 00       	call   c0028417 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 70 f3 01 00       	call   c00283f9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 58 f3 01 00       	call   c0028417 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ca f0 01 00       	call   c00281ab <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 cc e3 01 00       	call   c00274cb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 2f ea 01 00       	call   c0027b48 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 81 f0 01 00       	call   c00281ab <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 87 e3 01 00       	call   c00274cb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 56 f0 01 00       	call   c00281ab <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 a6 f2 01 00       	call   c0028415 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 83 e9 01 00       	call   c0027b1c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 05 f4 01 00       	call   c00285b0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 2c f2 01 00       	call   c00283f9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 27 e9 01 00       	call   c0027b1c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 a5 ef 01 00       	call   c00281ab <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 28 e9 01 00       	call   c0027b48 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 7a ef 01 00       	call   c00281ab <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 e1 eb 01 00       	call   c0027e2c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 60 e2 01 00       	call   c00274cb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 c0 db 01 00       	call   c0026e60 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 97 f2 01 00       	call   c002853f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 80 e8 01 00       	call   c0027b48 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 67 f2 01 00       	call   c002853f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 d9 e1 01 00       	call   c00274cb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 12 f1 01 00       	call   c002841b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 fa ea 01 00       	call   c0027e2c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 80 e1 01 00       	call   c00274cb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 6e f2 01 00       	call   c00285d0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 40 ee 01 00       	call   c00281ab <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 97 e7 01 00       	call   c0027b1c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 76 f0 01 00       	call   c0028417 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 0f e1 01 00       	call   c00274cb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 3b e7 01 00       	call   c0027b1c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 dd f1 01 00       	call   c00285d0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 8e ed 01 00       	call   c00281ab <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 0b e7 01 00       	call   c0027b48 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 5e ed 01 00       	call   c00281ab <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 64 e0 01 00       	call   c00274cb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 34 ed 01 00       	call   c00281ab <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 86 ef 01 00       	call   c0028417 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 5d e6 01 00       	call   c0027b1c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 df f0 01 00       	call   c00285b0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 06 ef 01 00       	call   c00283f9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 00 e6 01 00       	call   c0027b1c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 7e ec 01 00       	call   c00281ab <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 01 e6 01 00       	call   c0027b48 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 53 ec 01 00       	call   c00281ab <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ba e8 01 00       	call   c0027e2c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 39 df 01 00       	call   c00274cb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 89 d8 01 00       	call   c0026e60 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 60 ef 01 00       	call   c002853f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 49 e5 01 00       	call   c0027b48 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 30 ef 01 00       	call   c002853f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 a2 de 01 00       	call   c00274cb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 db ed 01 00       	call   c002841b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 c2 e7 01 00       	call   c0027e2c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 41 de 01 00       	call   c00274cb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 2f ef 01 00       	call   c00285d0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 01 eb 01 00       	call   c00281ab <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 58 e4 01 00       	call   c0027b1c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 37 ed 01 00       	call   c0028417 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 d0 dd 01 00       	call   c00274cb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 fc e3 01 00       	call   c0027b1c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 71 ea 01 00       	call   c00281ab <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 77 dd 01 00       	call   c00274cb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 9d 02 c0       	mov    eax,0xc0029dd4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ec e8 01 00       	call   c00281ab <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 6a e2 01 00       	call   c0027b48 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 fc d4 01 00       	call   c0026e60 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 d3 eb 01 00       	call   c002853f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 bc e1 01 00       	call   c0027b48 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 9f eb 01 00       	call   c002853f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 11 db 01 00       	call   c00274cb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 71 eb 01 00       	call   c002853f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 60 e1 01 00       	call   c0027b48 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 c9 da 01 00       	call   c00274cb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ea d3 01 00       	call   c0026e60 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 c1 ea 01 00       	call   c002853f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 aa e0 01 00       	call   c0027b48 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 8d ea 01 00       	call   c002853f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ff d9 01 00       	call   c00274cb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 5f ea 01 00       	call   c002853f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 4e e0 01 00       	call   c0027b48 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 b7 d9 01 00       	call   c00274cb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 95 d9 01 00       	call   c00274cb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 71 d2 01 00       	call   c0026e60 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 48 e9 01 00       	call   c002853f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 31 df 01 00       	call   c0027b48 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 14 e9 01 00       	call   c002853f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 86 d8 01 00       	call   c00274cb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 e6 e8 01 00       	call   c002853f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 cf de 01 00       	call   c0027b48 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 38 d8 01 00       	call   c00274cb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 98 e8 01 00       	call   c002853f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 81 de 01 00       	call   c0027b48 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ea d7 01 00       	call   c00274cb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ff d0 01 00       	call   c0026e60 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 d6 e7 01 00       	call   c002853f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 bf dd 01 00       	call   c0027b48 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 a6 e7 01 00       	call   c002853f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 18 d7 01 00       	call   c00274cb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 78 e7 01 00       	call   c002853f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 61 dd 01 00       	call   c0027b48 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ca d6 01 00       	call   c00274cb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 2a e7 01 00       	call   c002853f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 13 dd 01 00       	call   c0027b48 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 7c d6 01 00       	call   c00274cb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 50 d6 01 00       	call   c00274cb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 ad dc 01 00       	call   c0027b48 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 69 e5 01 00       	call   c002841b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 f8 d5 01 00       	call   c00274cb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 55 dc 01 00       	call   c0027b48 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 11 e5 01 00       	call   c002841b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 8b ce 01 00       	call   c0026e60 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 62 e5 01 00       	call   c002853f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 4b db 01 00       	call   c0027b48 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 2e e5 01 00       	call   c002853f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 a0 d4 01 00       	call   c00274cb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 00 e5 01 00       	call   c002853f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 e9 da 01 00       	call   c0027b48 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 52 d4 01 00       	call   c00274cb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 b2 e4 01 00       	call   c002853f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 9b da 01 00       	call   c0027b48 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 04 d4 01 00       	call   c00274cb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 64 e4 01 00       	call   c002853f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 4d da 01 00       	call   c0027b48 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 b6 d3 01 00       	call   c00274cb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 16 e4 01 00       	call   c002853f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ff d9 01 00       	call   c0027b48 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 68 d3 01 00       	call   c00274cb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 6a cc 01 00       	call   c0026e60 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 41 e3 01 00       	call   c002853f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 2a d9 01 00       	call   c0027b48 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 11 e3 01 00       	call   c002853f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 83 d2 01 00       	call   c00274cb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 e3 e2 01 00       	call   c002853f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 cc d8 01 00       	call   c0027b48 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 35 d2 01 00       	call   c00274cb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 95 e2 01 00       	call   c002853f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 7e d8 01 00       	call   c0027b48 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 e7 d1 01 00       	call   c00274cb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 47 e2 01 00       	call   c002853f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 30 d8 01 00       	call   c0027b48 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 99 d1 01 00       	call   c00274cb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 f9 e1 01 00       	call   c002853f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 e2 d7 01 00       	call   c0027b48 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 4b d1 01 00       	call   c00274cb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 1f d1 01 00       	call   c00274cb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 7c d7 01 00       	call   c0027b48 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 38 e0 01 00       	call   c002841b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 c7 d0 01 00       	call   c00274cb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 24 d7 01 00       	call   c0027b48 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 e0 df 01 00       	call   c002841b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 6e d0 01 00       	call   c00274cb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 cb d6 01 00       	call   c0027b48 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 87 df 01 00       	call   c002841b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 15 d0 01 00       	call   c00274cb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 72 d6 01 00       	call   c0027b48 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 2e df 01 00       	call   c002841b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 8c c8 01 00       	call   c0026e60 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 63 df 01 00       	call   c002853f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 4c d5 01 00       	call   c0027b48 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 2f df 01 00       	call   c002853f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 a1 ce 01 00       	call   c00274cb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 01 df 01 00       	call   c002853f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ea d4 01 00       	call   c0027b48 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 53 ce 01 00       	call   c00274cb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 b3 de 01 00       	call   c002853f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 9c d4 01 00       	call   c0027b48 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 05 ce 01 00       	call   c00274cb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 65 de 01 00       	call   c002853f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 4e d4 01 00       	call   c0027b48 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 b7 cd 01 00       	call   c00274cb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 17 de 01 00       	call   c002853f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 00 d4 01 00       	call   c0027b48 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 69 cd 01 00       	call   c00274cb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 c9 dd 01 00       	call   c002853f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 b2 d3 01 00       	call   c0027b48 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 18 cd 01 00       	call   c00274cb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 78 dd 01 00       	call   c002853f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 61 d3 01 00       	call   c0027b48 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ca cc 01 00       	call   c00274cb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 c4 c5 01 00       	call   c0026e60 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 9b dc 01 00       	call   c002853f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 84 d2 01 00       	call   c0027b48 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 64 dc 01 00       	call   c002853f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 d6 cb 01 00       	call   c00274cb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 36 dc 01 00       	call   c002853f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 1f d2 01 00       	call   c0027b48 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 88 cb 01 00       	call   c00274cb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 e8 db 01 00       	call   c002853f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 d1 d1 01 00       	call   c0027b48 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 3a cb 01 00       	call   c00274cb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 9a db 01 00       	call   c002853f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 83 d1 01 00       	call   c0027b48 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ec ca 01 00       	call   c00274cb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 4c db 01 00       	call   c002853f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 35 d1 01 00       	call   c0027b48 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 9e ca 01 00       	call   c00274cb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 fe da 01 00       	call   c002853f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 e7 d0 01 00       	call   c0027b48 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 4d ca 01 00       	call   c00274cb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 ad da 01 00       	call   c002853f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 96 d0 01 00       	call   c0027b48 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 05 ca 01 00       	call   c00274cb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 de c9 01 00       	call   c00274cb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 3c d0 01 00       	call   c0027b48 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 f8 d8 01 00       	call   c002841b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 87 c9 01 00       	call   c00274cb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 e5 cf 01 00       	call   c0027b48 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 a1 d8 01 00       	call   c002841b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 2f c9 01 00       	call   c00274cb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 8d cf 01 00       	call   c0027b48 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 49 d8 01 00       	call   c002841b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 d7 c8 01 00       	call   c00274cb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 35 cf 01 00       	call   c0027b48 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 f1 d7 01 00       	call   c002841b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 7f c8 01 00       	call   c00274cb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 dd ce 01 00       	call   c0027b48 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 99 d7 01 00       	call   c002841b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 2d c8 01 00       	call   c00274cb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 8b ce 01 00       	call   c0027b48 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 47 d7 01 00       	call   c002841b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 5b c0 01 00       	call   c0026e60 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 32 d7 01 00       	call   c002853f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 1b cd 01 00       	call   c0027b48 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 02 d7 01 00       	call   c002853f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 74 c6 01 00       	call   c00274cb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 a8 d6 01 00       	call   c002853f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 91 cc 01 00       	call   c0027b48 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 fc c5 01 00       	call   c00274cb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 49 d6 01 00       	call   c002853f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 32 cc 01 00       	call   c0027b48 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 9d c5 01 00       	call   c00274cb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ea d5 01 00       	call   c002853f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 d3 cb 01 00       	call   c0027b48 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 3e c5 01 00       	call   c00274cb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 8b d5 01 00       	call   c002853f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 74 cb 01 00       	call   c0027b48 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 df c4 01 00       	call   c00274cb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 2c d5 01 00       	call   c002853f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 15 cb 01 00       	call   c0027b48 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 80 c4 01 00       	call   c00274cb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 cd d4 01 00       	call   c002853f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 b6 ca 01 00       	call   c0027b48 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 21 c4 01 00       	call   c00274cb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 6e d4 01 00       	call   c002853f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 57 ca 01 00       	call   c0027b48 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 c2 c3 01 00       	call   c00274cb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 0f d4 01 00       	call   c002853f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 f8 c9 01 00       	call   c0027b48 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 63 c3 01 00       	call   c00274cb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 6d bc 01 00       	call   c0026e60 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 44 d3 01 00       	call   c002853f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 2d c9 01 00       	call   c0027b48 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 14 d3 01 00       	call   c002853f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 86 c2 01 00       	call   c00274cb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 b9 d2 01 00       	call   c002853f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 a2 c8 01 00       	call   c0027b48 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 0d c2 01 00       	call   c00274cb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 59 d2 01 00       	call   c002853f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 42 c8 01 00       	call   c0027b48 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 ad c1 01 00       	call   c00274cb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 f9 d1 01 00       	call   c002853f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 e2 c7 01 00       	call   c0027b48 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 4d c1 01 00       	call   c00274cb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 99 d1 01 00       	call   c002853f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 82 c7 01 00       	call   c0027b48 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ed c0 01 00       	call   c00274cb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 39 d1 01 00       	call   c002853f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 22 c7 01 00       	call   c0027b48 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 8d c0 01 00       	call   c00274cb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 d9 d0 01 00       	call   c002853f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 c2 c6 01 00       	call   c0027b48 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 2d c0 01 00       	call   c00274cb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 79 d0 01 00       	call   c002853f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 62 c6 01 00       	call   c0027b48 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 cd bf 01 00       	call   c00274cb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 19 d0 01 00       	call   c002853f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 02 c6 01 00       	call   c0027b48 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 6d bf 01 00       	call   c00274cb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 12 bf 01 00       	call   c00274cb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 6f c5 01 00       	call   c0027b48 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 2b ce 01 00       	call   c002841b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 b5 be 01 00       	call   c00274cb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 12 c5 01 00       	call   c0027b48 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ce cd 01 00       	call   c002841b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 58 be 01 00       	call   c00274cb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 b5 c4 01 00       	call   c0027b48 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 71 cd 01 00       	call   c002841b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 fb bd 01 00       	call   c00274cb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 58 c4 01 00       	call   c0027b48 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 14 cd 01 00       	call   c002841b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 9e bd 01 00       	call   c00274cb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 fb c3 01 00       	call   c0027b48 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 b7 cc 01 00       	call   c002841b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 41 bd 01 00       	call   c00274cb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 9e c3 01 00       	call   c0027b48 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 5a cc 01 00       	call   c002841b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 e4 bc 01 00       	call   c00274cb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 41 c3 01 00       	call   c0027b48 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 fd cb 01 00       	call   c002841b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 87 bc 01 00       	call   c00274cb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 e4 c2 01 00       	call   c0027b48 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 a0 cb 01 00       	call   c002841b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 9c c2 01 00       	call   c0027b48 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 14 cd 01 00       	jmp    c00285d0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 7e c9 01 00       	call   c0028417 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 3c c9 01 00       	call   c00283f9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 d3 c6 01 00       	call   c00281ab <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 d4 b9 01 00       	call   c00274cb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 a3 c6 01 00       	call   c00281ab <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 0a c3 01 00       	call   c0027e2c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 a9 c8 01 00       	call   c00283f9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 ac c8 01 00       	call   c0028417 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 7f c8 01 00       	call   c0028417 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 78 c2 01 00       	call   c0027e2c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 02 ca 01 00       	call   c00285d0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 dd c9 01 00       	call   c00285d0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 af c5 01 00       	call   c00281ab <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 06 bf 01 00       	call   c0027b1c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 e5 c7 01 00       	call   c0028417 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 7e b8 01 00       	call   c00274cb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 a2 be 01 00       	call   c0027b1c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 44 c9 01 00       	call   c00285d0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 7c c1 01 00       	call   c0027e2c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 f9 b7 01 00       	call   c00274cb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 25 c4 01 00       	call   c00281ab <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 25 b7 01 00       	call   c00274cb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 05 b7 01 00       	call   c00274cb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 d5 c3 01 00       	call   c00281ab <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 25 c6 01 00       	call   c0028415 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 04 bd 01 00       	call   c0027b1c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 86 c7 01 00       	call   c00285b0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 ad c5 01 00       	call   c00283f9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 ab bc 01 00       	call   c0027b1c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 29 c3 01 00       	call   c00281ab <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 ac bc 01 00       	call   c0027b48 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 fe c2 01 00       	call   c00281ab <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 65 bf 01 00       	call   c0027e2c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 e4 b5 01 00       	call   c00274cb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ae c2 01 00       	call   c00281ab <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 fa c4 01 00       	call   c0028417 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 ef bb 01 00       	call   c0027b48 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 c1 bb 01 00       	call   c0027b48 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 fa c1 01 00       	call   c00281ab <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 5e be 01 00       	call   c0027e2c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 26 be 01 00       	call   c0027e2c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 a5 b4 01 00       	call   c00274cb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 92 c5 01 00       	call   c00285d0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 64 c1 01 00       	call   c00281ab <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 bb ba 01 00       	call   c0027b1c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 9a c3 01 00       	call   c0028417 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 32 b4 01 00       	call   c00274cb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 56 ba 01 00       	call   c0027b1c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 f8 c4 01 00       	call   c00285d0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 b9 c2 01 00       	call   c0028417 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 77 c2 01 00       	call   c00283f9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 0e c0 01 00       	call   c00281ab <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 0f b3 01 00       	call   c00274cb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 de bf 01 00       	call   c00281ab <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 45 bc 01 00       	call   c0027e2c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 e4 c1 01 00       	call   c00283f9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 e7 c1 01 00       	call   c0028417 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ba c1 01 00       	call   c0028417 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 b3 bb 01 00       	call   c0027e2c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 3d c3 01 00       	call   c00285d0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 18 c3 01 00       	call   c00285d0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ea be 01 00       	call   c00281ab <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 41 b8 01 00       	call   c0027b1c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 20 c1 01 00       	call   c0028417 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 b9 b1 01 00       	call   c00274cb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 dd b7 01 00       	call   c0027b1c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 7f c2 01 00       	call   c00285d0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 b7 ba 01 00       	call   c0027e2c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 34 b1 01 00       	call   c00274cb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 5f bd 01 00       	call   c00281ab <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 5f b0 01 00       	call   c00274cb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 3f b0 01 00       	call   c00274cb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 0f bd 01 00       	call   c00281ab <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 5f bf 01 00       	call   c0028415 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 3d b6 01 00       	call   c0027b1c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 bf c0 01 00       	call   c00285b0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 e6 be 01 00       	call   c00283f9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 e3 b5 01 00       	call   c0027b1c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 61 bc 01 00       	call   c00281ab <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 e4 b5 01 00       	call   c0027b48 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 36 bc 01 00       	call   c00281ab <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 9d b8 01 00       	call   c0027e2c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 1c af 01 00       	call   c00274cb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 e6 bb 01 00       	call   c00281ab <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 32 be 01 00       	call   c0028417 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 27 b5 01 00       	call   c0027b48 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 f9 b4 01 00       	call   c0027b48 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 30 bb 01 00       	call   c00281ab <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 94 b7 01 00       	call   c0027e2c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 61 b7 01 00       	call   c0027e2c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 e0 ad 01 00       	call   c00274cb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 cd be 01 00       	call   c00285d0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 9f ba 01 00       	call   c00281ab <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 f6 b3 01 00       	call   c0027b1c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 d5 bc 01 00       	call   c0028417 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 6d ad 01 00       	call   c00274cb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 91 b3 01 00       	call   c0027b1c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 33 be 01 00       	call   c00285d0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 f4 bb 01 00       	call   c0028417 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 b2 bb 01 00       	call   c00283f9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 49 b9 01 00       	call   c00281ab <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 4a ac 01 00       	call   c00274cb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 19 b9 01 00       	call   c00281ab <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 80 b5 01 00       	call   c0027e2c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 1f bb 01 00       	call   c00283f9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 22 bb 01 00       	call   c0028417 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 f5 ba 01 00       	call   c0028417 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ee b4 01 00       	call   c0027e2c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 78 bc 01 00       	call   c00285d0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 53 bc 01 00       	call   c00285d0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 25 b8 01 00       	call   c00281ab <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 7c b1 01 00       	call   c0027b1c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 5b ba 01 00       	call   c0028417 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 f4 aa 01 00       	call   c00274cb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 18 b1 01 00       	call   c0027b1c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ba bb 01 00       	call   c00285d0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 f2 b3 01 00       	call   c0027e2c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 6f aa 01 00       	call   c00274cb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 9a b6 01 00       	call   c00281ab <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 9a a9 01 00       	call   c00274cb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 7a a9 01 00       	call   c00274cb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 4a b6 01 00       	call   c00281ab <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 9a b8 01 00       	call   c0028415 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 78 af 01 00       	call   c0027b1c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 fa b9 01 00       	call   c00285b0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 21 b8 01 00       	call   c00283f9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 1e af 01 00       	call   c0027b1c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 9c b5 01 00       	call   c00281ab <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 1f af 01 00       	call   c0027b48 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 71 b5 01 00       	call   c00281ab <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 d8 b1 01 00       	call   c0027e2c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 57 a8 01 00       	call   c00274cb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 21 b5 01 00       	call   c00281ab <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 6d b7 01 00       	call   c0028417 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 62 ae 01 00       	call   c0027b48 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 34 ae 01 00       	call   c0027b48 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 6b b4 01 00       	call   c00281ab <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 cf b0 01 00       	call   c0027e2c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 9c b0 01 00       	call   c0027e2c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 1b a7 01 00       	call   c00274cb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 08 b8 01 00       	call   c00285d0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 da b3 01 00       	call   c00281ab <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 31 ad 01 00       	call   c0027b1c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 10 b6 01 00       	call   c0028417 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 a8 a6 01 00       	call   c00274cb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 cc ac 01 00       	call   c0027b1c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 6e b7 01 00       	call   c00285d0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 2f b5 01 00       	call   c0028417 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ed b4 01 00       	call   c00283f9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 84 b2 01 00       	call   c00281ab <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 85 a5 01 00       	call   c00274cb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 54 b2 01 00       	call   c00281ab <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 bb ae 01 00       	call   c0027e2c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 5a b4 01 00       	call   c00283f9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 5d b4 01 00       	call   c0028417 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 30 b4 01 00       	call   c0028417 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 29 ae 01 00       	call   c0027e2c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 b3 b5 01 00       	call   c00285d0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 8e b5 01 00       	call   c00285d0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 60 b1 01 00       	call   c00281ab <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 b7 aa 01 00       	call   c0027b1c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 96 b3 01 00       	call   c0028417 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 2f a4 01 00       	call   c00274cb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 53 aa 01 00       	call   c0027b1c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 f5 b4 01 00       	call   c00285d0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 2d ad 01 00       	call   c0027e2c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 aa a3 01 00       	call   c00274cb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 d5 af 01 00       	call   c00281ab <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 d5 a2 01 00       	call   c00274cb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 b5 a2 01 00       	call   c00274cb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 85 af 01 00       	call   c00281ab <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 d5 b1 01 00       	call   c0028415 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 b3 a8 01 00       	call   c0027b1c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 35 b3 01 00       	call   c00285b0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 5c b1 01 00       	call   c00283f9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 59 a8 01 00       	call   c0027b1c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 d7 ae 01 00       	call   c00281ab <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 5a a8 01 00       	call   c0027b48 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 ac ae 01 00       	call   c00281ab <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 13 ab 01 00       	call   c0027e2c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 92 a1 01 00       	call   c00274cb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 5c ae 01 00       	call   c00281ab <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 a8 b0 01 00       	call   c0028417 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 9d a7 01 00       	call   c0027b48 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 6f a7 01 00       	call   c0027b48 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 a6 ad 01 00       	call   c00281ab <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 0a aa 01 00       	call   c0027e2c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 d7 a9 01 00       	call   c0027e2c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 56 a0 01 00       	call   c00274cb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 43 b1 01 00       	call   c00285d0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 15 ad 01 00       	call   c00281ab <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 6c a6 01 00       	call   c0027b1c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 4b af 01 00       	call   c0028417 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 e3 9f 01 00       	call   c00274cb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 07 a6 01 00       	call   c0027b1c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 a9 b0 01 00       	call   c00285d0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 67 ae 01 00       	call   c0028417 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 25 ae 01 00       	call   c00283f9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 bc ab 01 00       	call   c00281ab <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 bd 9e 01 00       	call   c00274cb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 8c ab 01 00       	call   c00281ab <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 f3 a7 01 00       	call   c0027e2c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 92 ad 01 00       	call   c00283f9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 95 ad 01 00       	call   c0028417 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 68 ad 01 00       	call   c0028417 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 61 a7 01 00       	call   c0027e2c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 eb ae 01 00       	call   c00285d0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 c2 ae 01 00       	call   c00285d0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 94 aa 01 00       	call   c00281ab <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 eb a3 01 00       	call   c0027b1c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ca ac 01 00       	call   c0028417 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 63 9d 01 00       	call   c00274cb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 8b a3 01 00       	call   c0027b1c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 2d ae 01 00       	call   c00285d0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 66 a6 01 00       	call   c0027e2c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 e3 9c 01 00       	call   c00274cb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 0f a9 01 00       	call   c00281ab <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 0f 9c 01 00       	call   c00274cb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 ef 9b 01 00       	call   c00274cb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 bf a8 01 00       	call   c00281ab <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 f3 aa 01 00       	call   c00283f9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ea a1 01 00       	call   c0027b1c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 6c ac 01 00       	call   c00285b0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 93 aa 01 00       	call   c00283f9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 8d a1 01 00       	call   c0027b1c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 0b a8 01 00       	call   c00281ab <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 8e a1 01 00       	call   c0027b48 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 e0 a7 01 00       	call   c00281ab <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 47 a4 01 00       	call   c0027e2c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 c6 9a 01 00       	call   c00274cb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 90 a7 01 00       	call   c00281ab <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 dc a9 01 00       	call   c0028417 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 d1 a0 01 00       	call   c0027b48 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 a3 a0 01 00       	call   c0027b48 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 e7 a6 01 00       	call   c00281ab <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 4e a3 01 00       	call   c0027e2c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 37 a0 01 00       	call   c0027b48 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 f3 a8 01 00       	call   c002841b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 e6 a2 01 00       	call   c0027e2c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 65 99 01 00       	call   c00274cb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 52 aa 01 00       	call   c00285d0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 24 a6 01 00       	call   c00281ab <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 7b 9f 01 00       	call   c0027b1c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 5a a8 01 00       	call   c0028417 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 f2 98 01 00       	call   c00274cb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 1a 9f 01 00       	call   c0027b1c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 bc a9 01 00       	call   c00285d0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd619c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 6f a6 01 00       	call   c0028417 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 2d a6 01 00       	call   c00283f9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 19 a6 01 00       	call   c0028417 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 8b a3 01 00       	call   c00281ab <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 09 9d 01 00       	call   c0027b48 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 5b a3 01 00       	call   c00281ab <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 61 96 01 00       	call   c00274cb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 30 a3 01 00       	call   c00281ab <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 80 a5 01 00       	call   c0028415 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 61 9c 01 00       	call   c0027b1c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 e3 a6 01 00       	call   c00285b0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 0a a5 01 00       	call   c00283f9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 09 9c 01 00       	call   c0027b1c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 87 a2 01 00       	call   c00281ab <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 0a 9c 01 00       	call   c0027b48 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 5c a2 01 00       	call   c00281ab <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 c3 9e 01 00       	call   c0027e2c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 42 95 01 00       	call   c00274cb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 6a 9e 01 00       	call   c0027e2c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 f0 94 01 00       	call   c00274cb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 de a5 01 00       	call   c00285d0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 b0 a1 01 00       	call   c00281ab <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 07 9b 01 00       	call   c0027b1c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 e6 a3 01 00       	call   c0028417 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 7f 94 01 00       	call   c00274cb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 ab 9a 01 00       	call   c0027b1c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 4d a5 01 00       	call   c00285d0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 fa a0 01 00       	call   c00281ab <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 77 9a 01 00       	call   c0027b48 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 c8 a0 01 00       	call   c00281ab <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ce 93 01 00       	call   c00274cb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 9e a0 01 00       	call   c00281ab <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 f2 a2 01 00       	call   c0028419 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 cb 99 01 00       	call   c0027b1c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 4d a4 01 00       	call   c00285b0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 74 a2 01 00       	call   c00283f9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 72 99 01 00       	call   c0027b1c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 f0 9f 01 00       	call   c00281ab <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 73 99 01 00       	call   c0027b48 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 c5 9f 01 00       	call   c00281ab <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 2c 9c 01 00       	call   c0027e2c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 ab 92 01 00       	call   c00274cb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 c7 9b 01 00       	call   c0027e2c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 46 92 01 00       	call   c00274cb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 34 a3 01 00       	call   c00285d0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 06 9f 01 00       	call   c00281ab <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 5d 98 01 00       	call   c0027b1c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 3c a1 01 00       	call   c0028417 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 d5 91 01 00       	call   c00274cb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 01 98 01 00       	call   c0027b1c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 72 9e 01 00       	call   c00281ab <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 78 91 01 00       	call   c00274cb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9f 02 c0       	mov    eax,0xc0029f8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000e4e3:	ff 05 84 12 03 c0    	inc    DWORD PTR ds:0xc0031284
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 12 03 c0 00 	cmp    DWORD PTR ds:0xc0031280,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c000e50d:	e8 63 f6 00 00       	call   c001db75 <schedule()>
c000e512:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000e517:	48                   	dec    eax
c000e518:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 d0 de 02 c0       	mov    eax,ds:0xc002ded0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9f 02 c0       	push   0xc0029fc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 dd 02 c0       	mov    eax,0xc002dd68
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 44 69 02 c0       	mov    eax,0xc0026944
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9f 02 c0       	push   0xc0029fd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 78 66 02 c0       	mov    eax,0xc0026678
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 44 6a 02 c0       	mov    eax,0xc0026a44
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9f 02 c0       	push   0xc0029fec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 c4 67 02 c0       	mov    eax,0xc00267c4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9f 02 c0       	push   0xc0029ff5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c dd 02 c0       	mov    eax,0xc002dd6c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 a0 02 c0       	push   0xc002a002
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d dd 02 c0       	mov    eax,0xc002dd6d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 8f 57 00 00       	call   c0013dfc <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f a0 02 c0       	push   0xc002a00f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c000e6be:	68 28 a0 02 c0       	push   0xc002a028
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 8d f0 00 00       	call   c001d758 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 70 f2 00 00       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 34 e3 01 c0       	push   0xc001e334
c000e6e9:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c000e6ef:	e8 5c f2 00 00       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 12 03 c0       	mov    ds:0xc0031268,eax
c000e6fc:	68 0c a1 02 c0       	push   0xc002a10c
c000e701:	c6 05 6d dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd6d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 cd ff 00 00       	call   c001e6df <Vm::initialise8086()>
c000e712:	e8 ad 44 00 00       	call   c0012bc4 <Fs::initVFS()>
c000e717:	c7 04 24 35 a0 02 c0 	mov    DWORD PTR [esp],0xc002a035
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c a1 02 c0       	push   0xc002a10c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 94 d8 00 00       	call   c001bfe0 <Sys::loadSyscalls()>
c000e74c:	e8 89 b7 00 00       	call   c0019eda <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f a0 02 c0       	push   0xc002a04f
c000e75b:	68 58 a0 02 c0       	push   0xc002a058
c000e760:	e8 3a c6 00 00       	call   c001ad9f <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 47 4f 00 00       	call   c00136b4 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 a1 02 c0 	mov    DWORD PTR [esp],0xc002a130
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 32 56 00 00       	call   c0013dbc <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 a0 02 c0 	mov    DWORD PTR [esp],0xc002a060
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 a7 b2 00 00       	call   c0019a42 <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a a0 02 c0 	mov    DWORD PTR [esp],0xc002a07a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b a0 02 c0       	push   0xc002a08b
c000e7b6:	e8 f5 e9 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 1d ec 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 7a f5 00 00       	call   c001dd4b <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 a0 02 c0       	push   0xc002a0a7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 8b 56 00 00       	call   c0013e76 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c a1 02 c0       	mov    edx,0xc002a17c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 81 dd 02 c0 04 	test   BYTE PTR ds:0xc002dd81,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 87 7c 01 00       	call   c0026606 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 1a a0 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 f3 9f 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 d1 9f 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 af 9f 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 80 dd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dd80,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 bd 9e 00 00       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 98 9e 00 00       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 f1 7a 01 00       	call   c00265c0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ae 7a 01 00       	call   c00265a0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 b4 9e 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 a0 02 c0       	push   0xc002a0b0
c000eb62:	e8 7c b4 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 a0 02 c0       	push   0xc002a0b6
c000eb9a:	e8 44 b4 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 a1 02 c0       	push   0xc002a150
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 80 dd 02 c0 04 	test   BYTE PTR ds:0xc002dd80,0x4
c000ec03:	0f 94 05 a0 cc 02 c0 	sete   BYTE PTR ds:0xc002cca0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 2f 90 00 00       	call   c0017c48 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 4a 50 00 00       	call   c0013c72 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 a0 02 c0 	mov    DWORD PTR [esp],0xc002a060
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 30 9e 00 00       	call   c0018a8c <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 07 50 00 00       	call   c0013c72 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 83 55 00 00       	call   c001420a <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 d7 4f 00 00       	call   c0013c72 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc a0 02 c0       	push   0xc002a0bc
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 a9 ed 00 00       	call   c001da72 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 a0 02 c0       	push   0xc002a0d7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 22 3b 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 a0 02 c0       	push   0xc002a0e8
c000ed34:	e8 aa b2 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 a0 02 c0       	push   0xc002a0f5
c000ed49:	e8 95 b2 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0ff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 7e b2 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 72 dd 02 c0       	mov    ds:0xc002dd72,eax
c000ee21:	66 89 15 70 dd 02 c0 	mov    WORD PTR ds:0xc002dd70,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000ef38:	48                   	dec    eax
c000ef39:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 c1 96 01 00       	call   c0028650 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 b8 96 01 00       	call   c0028650 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 78 dd 02 c0 ff 07 	mov    WORD PTR ds:0xc002dd78,0x7ff
c000f085:	a3 7a dd 02 c0       	mov    ds:0xc002dd7a,eax
c000f08a:	0f 01 1d 78 dd 02 c0 	lidtd  ds:0xc002dd78
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c000f37c:	e8 f3 27 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 24 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb24
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 24 cb 02 c0       	mov    eax,ds:0xc002cb24
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 a1 02 c0       	push   0xc002a1a0
c000f455:	e8 df 33 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 24 cb 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cb24,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c000f481:	8b 2d 24 cb 02 c0    	mov    ebp,DWORD PTR ds:0xc002cb24
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 d9 25 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 24 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb24
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 a1 02 c0       	push   0xc002a1d0
c000f50d:	e8 d1 aa 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 a1 02 c0       	push   0xc002a1d5
c000f523:	e8 bb aa 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000f543:	48                   	dec    eax
c000f544:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c000f561:	e8 0e 26 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c000f577:	e8 a2 22 00 00       	call   c001181e <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 dc a1 02 c0       	push   0xc002a1dc
c000f6a4:	e8 90 31 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 40 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cb40
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 40 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd34c0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 76 cb 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd348a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 75 cb 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd348b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 40 cb 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd34c0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 f4 a1 02 c0       	push   0xc002a1f4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 80 dd 02 c0       	mov    ds:0xc002dd80,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 e0 1e 00 00       	call   c0011646 <VAS::VAS()>
c000f766:	89 1d d0 de 02 c0    	mov    DWORD PTR ds:0xc002ded0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 68 dd 02 c0    	mov    DWORD PTR ds:0xc002dd68,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 54 21 00 00       	call   c00118f6 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 13 a2 02 c0       	push   0xc002a213
c000f7b9:	e8 7b 30 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba c0 dd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2240],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be c0 dd 02 c0       	mov    esi,0xc002ddc0
c000f826:	8d 93 c0 dd 02 c0    	lea    edx,[ebx-0x3ffd2240]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 2c a2 02 c0       	push   0xc002a22c
c000f843:	e8 f1 2f 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 43 a2 02 c0       	push   0xc002a243
c000f87f:	e8 b5 2f 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 c0 dd 02 c0    	lea    eax,[edx-0x3ffd2240]
c000f8b8:	8d 94 11 c0 dd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2240]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 84 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc84
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 84 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cc84
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 84 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc84
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 59 a2 02 c0       	push   0xc002a259
c000f932:	e8 02 2f 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d b0 dd 02 c0    	dec    DWORD PTR ds:0xc002ddb0
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 6c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a26c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 64 a6 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 a4 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dda4
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d a4 dd 02 c0    	mov    DWORD PTR ds:0xc002dda4,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 a4 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dda4,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 a0 a2 02 c0       	push   0xc002a2a0
c000f9da:	e8 5a 2e 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 d5 2a 00 00       	call   c00124c8 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 b8 a2 02 c0       	push   0xc002a2b8
c000fa16:	e8 c8 a5 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d a4 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dda4
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 b0 dd 02 c0       	mov    eax,ds:0xc002ddb0
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 a4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dda4
c000fa45:	a3 b0 dd 02 c0       	mov    ds:0xc002ddb0,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 b4 dd 02 c0    	push   DWORD PTR ds:0xc002ddb4
c000fa54:	50                   	push   eax
c000fa55:	68 82 a2 02 c0       	push   0xc002a282
c000fa5a:	e8 da 2d 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 a4 dd 02 c0       	mov    eax,ds:0xc002dda4
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000fad3:	48                   	dec    eax
c000fad4:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d a8 dd 02 c0    	cmp    DWORD PTR ds:0xc002dda8,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d a8 dd 02 c0    	mov    DWORD PTR ds:0xc002dda8,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 c0 dd 02 c0       	push   0xc002ddc0
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 c6 a2 02 c0       	push   0xc002a2c6
c000fb52:	e8 e2 2c 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 08 a3 02 c0       	push   0xc002a308
c000fbe6:	e8 4e 2c 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 2c a3 02 c0       	push   0xc002a32c
c000fc72:	e8 c2 2b 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 b4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddb4
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 b4 dd 02 c0       	mov    ds:0xc002ddb4,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 ec a2 02 c0       	push   0xc002a2ec
c000fca8:	e8 8c 2b 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 de a2 02 c0       	push   0xc002a2de
c000fd17:	e8 c7 a2 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 b4 dd 02 c0    	inc    DWORD PTR ds:0xc002ddb4
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 bb 29 00 00       	call   c0012761 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c000fddc:	e8 94 dd 00 00       	call   c001db75 <schedule()>
c000fde1:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c000fde6:	48                   	dec    eax
c000fde7:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 cb 6b 01 00       	call   c0026a44 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 55 a3 02 c0       	push   0xc002a355
c000fe8e:	e8 50 a1 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 71 a3 02 c0       	push   0xc002a371
c000ff4f:	e8 8f a0 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 98 a3 02 c0       	mov    edx,0xc002a398
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 20 a4 02 c0       	mov    edx,0xc002a420
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 44 27 00 00       	call   c0012761 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 c8 5c 00 00       	call   c0015d00 <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 20 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de20
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 20 de 02 c0       	mov    ds:0xc002de20,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 00 de 02 c0       	push   0xc002de00
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 24 de 02 c0    	cmp    DWORD PTR ds:0xc002de24,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d c0 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3340]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d c0 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3340]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 78 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3488]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 50 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd34b0]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 24 de 02 c0    	cmp    DWORD PTR ds:0xc002de24,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 24 de 02 c0    	cmp    DWORD PTR ds:0xc002de24,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 ac a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3ac
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 73 9c 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c0010370:	a1 24 de 02 c0       	mov    eax,ds:0xc002de24
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 24 de 02 c0    	mov    DWORD PTR ds:0xc002de24,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 20 de 02 c0       	mov    ds:0xc002de20,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 d8 de 02 c0       	mov    eax,ds:0xc002ded8
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 8e 31 00 00       	jmp    c0013646 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 24 de 02 c0    	cmp    DWORD PTR ds:0xc002de24,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be ba a3 02 c0       	mov    esi,0xc002a3ba
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 20 a4 02 c0       	mov    edx,0xc002a420
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 00 de 02 c0       	mov    ebx,0xc002de00
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 05 11 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 cb a3 02 c0       	push   0xc002a3cb
c0010ab4:	e8 2a 95 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba e8 a4 02 c0       	mov    edx,0xc002a4e8
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 00 cd 02 c0       	mov    eax,ds:0xc002cd00
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 00 cd 02 c0    	mov    DWORD PTR ds:0xc002cd00,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 b8 de 02 c0       	push   0xc002deb8
c0010e1a:	e8 97 78 01 00       	call   c00286b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 b4 de 02 c0       	mov    al,ds:0xc002deb4
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 b4 de 02 c0 01 	mov    BYTE PTR ds:0xc002deb4,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d b0 de 02 c0    	mov    DWORD PTR ds:0xc002deb0,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d a4 de 02 c0    	mov    DWORD PTR ds:0xc002dea4,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d a8 de 02 c0    	mov    DWORD PTR ds:0xc002dea8,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 40 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21c0],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba 04 a5 02 c0       	mov    edx,0xc002a504
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba e8 a4 02 c0       	mov    edx,0xc002a4e8
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 b8 de 02 c0       	push   0xc002deb8
c0010fea:	e8 9b 77 01 00       	call   c002878a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 b8 de 02 c0       	push   0xc002deb8
c0010ffe:	e8 8f 77 01 00       	call   c0028792 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 b8 de 02 c0       	push   0xc002deb8
c001101c:	e8 95 76 01 00       	call   c00286b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 c0 a4 02 c0       	push   0xc002a4c0
c0011043:	e8 9b 8f 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 eb 16 00 00       	call   c0012761 <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba 04 a5 02 c0       	mov    edx,0xc002a504
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 9f 16 00 00       	call   c0012761 <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 b8 de 02 c0       	push   0xc002deb8
c00110e7:	e8 9e 76 01 00       	call   c002878a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 b8 de 02 c0       	push   0xc002deb8
c0011104:	e8 2b 77 01 00       	call   c0028834 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 b0 de 02 c0       	mov    eax,ds:0xc002deb0
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 a8 de 02 c0       	mov    eax,ds:0xc002dea8
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d 40 de 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd21c0]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 b8 de 02 c0       	push   0xc002deb8
c0011186:	e8 e9 74 01 00       	call   c0028674 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 20 cb 02 c0       	push   0xc002cb20
c0011196:	68 b8 de 02 c0       	push   0xc002deb8
c001119b:	68 72 86 02 c0       	push   0xc0028672
c00111a0:	e8 36 15 00 00       	call   c00126db <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 08 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd08
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d 08 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd08
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d 04 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd04
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 04 cd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cd04,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d 04 cd 02 c0    	mov    DWORD PTR ds:0xc002cd04,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 18 a5 02 c0       	push   0xc002a518
c0011299:	e8 45 8d 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c001129e:	8b 3d 04 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd04
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d 04 cd 02 c0    	mov    DWORD PTR ds:0xc002cd04,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 04 cd 02 c0       	mov    eax,ds:0xc002cd04
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 04 cd 02 c0    	mov    DWORD PTR ds:0xc002cd04,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 04 cd 02 c0       	mov    ds:0xc002cd04,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 cc de 02 c0    	mov    edx,DWORD PTR ds:0xc002decc
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 0c cd 02 c0 	imul   eax,DWORD PTR ds:0xc002cd0c
c0011359:	03 05 14 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd14
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d 0c cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd0c
c001136f:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d 10 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd10,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 cc de 02 c0    	mov    esi,DWORD PTR ds:0xc002decc
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 3c a7 02 c0       	push   0xc002a73c
c00113b3:	e8 2b 8c 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	55                   	push   ebp
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 28             	sub    esp,0x28
c0011430:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0011434:	68 14 01 00 00       	push   0x114
c0011439:	e8 5b e1 ff ff       	call   c000f599 <malloc>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	89 c3                	mov    ebx,eax
c0011443:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c0011449:	68 53 a7 02 c0       	push   0xc002a753
c001144e:	50                   	push   eax
c001144f:	e8 44 19 00 00       	call   c0012d98 <File::File(char const*, Process*)>
c0011454:	59                   	pop    ecx
c0011455:	5e                   	pop    esi
c0011456:	6a 01                	push   0x1
c0011458:	53                   	push   ebx
c0011459:	e8 9e 19 00 00       	call   c0012dfc <File::open(FileOpenMode)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 c0                	test   eax,eax
c0011463:	0f 85 88 01 00 00    	jne    c00115f1 <Virt::setupPageSwapping(int)+0x1c8>
c0011469:	51                   	push   ecx
c001146a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001146e:	50                   	push   eax
c001146f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011473:	50                   	push   eax
c0011474:	53                   	push   ebx
c0011475:	e8 2e 1c 00 00       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001147a:	5e                   	pop    esi
c001147b:	5d                   	pop    ebp
c001147c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011480:	68 58 a5 02 c0       	push   0xc002a558
c0011485:	e8 af 13 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	89 f9                	mov    ecx,edi
c001148f:	c1 e1 14             	shl    ecx,0x14
c0011492:	89 c8                	mov    eax,ecx
c0011494:	33 4c 24 08          	xor    ecx,DWORD PTR [esp+0x8]
c0011498:	99                   	cdq    
c0011499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149d:	31 d0                	xor    eax,edx
c001149f:	09 c8                	or     eax,ecx
c00114a1:	0f 85 8a 00 00 00    	jne    c0011531 <Virt::setupPageSwapping(int)+0x108>
c00114a7:	83 ec 0c             	sub    esp,0xc
c00114aa:	53                   	push   ebx
c00114ab:	e8 aa 19 00 00       	call   c0012e5a <File::close()>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	85 db                	test   ebx,ebx
c00114b5:	74 0c                	je     c00114c3 <Virt::setupPageSwapping(int)+0x9a>
c00114b7:	83 ec 0c             	sub    esp,0xc
c00114ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bc:	53                   	push   ebx
c00114bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	83 ec 08             	sub    esp,0x8
c00114c6:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00114cb:	c1 e7 0b             	shl    edi,0xb
c00114ce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d6:	68 53 a7 02 c0       	push   0xc002a753
c00114db:	50                   	push   eax
c00114dc:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114df:	89 3d 10 cd 02 c0    	mov    DWORD PTR ds:0xc002cd10,edi
c00114e5:	c6 05 18 cd 02 c0 43 	mov    BYTE PTR ds:0xc002cd18,0x43
c00114ec:	c1 ef 08             	shr    edi,0x8
c00114ef:	a3 14 cd 02 c0       	mov    ds:0xc002cd14,eax
c00114f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f7:	c7 05 0c cd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cd0c,0x8
c0011501:	e8 93 e0 ff ff       	call   c000f599 <malloc>
c0011506:	83 c4 0c             	add    esp,0xc
c0011509:	89 c1                	mov    ecx,eax
c001150b:	a3 cc de 02 c0       	mov    ds:0xc002decc,eax
c0011510:	31 d2                	xor    edx,edx
c0011512:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c0011517:	f7 35 0c cd 02 c0    	div    DWORD PTR ds:0xc002cd0c
c001151d:	c1 e8 05             	shr    eax,0x5
c0011520:	50                   	push   eax
c0011521:	6a 00                	push   0x0
c0011523:	51                   	push   ecx
c0011524:	e8 27 f2 fe ff       	call   c0000750 <memset>
c0011529:	83 c4 2c             	add    esp,0x2c
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	5f                   	pop    edi
c001152f:	5d                   	pop    ebp
c0011530:	c3                   	ret    
c0011531:	83 ec 0c             	sub    esp,0xc
c0011534:	53                   	push   ebx
c0011535:	e8 20 19 00 00       	call   c0012e5a <File::close()>
c001153a:	58                   	pop    eax
c001153b:	5a                   	pop    edx
c001153c:	6a 12                	push   0x12
c001153e:	53                   	push   ebx
c001153f:	e8 b8 18 00 00       	call   c0012dfc <File::open(FileOpenMode)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	85 c0                	test   eax,eax
c0011549:	0f 85 e1 00 00 00    	jne    c0011630 <Virt::setupPageSwapping(int)+0x207>
c001154f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011557:	89 fe                	mov    esi,edi
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	c1 e6 08             	shl    esi,0x8
c001155f:	68 00 00 01 00       	push   0x10000
c0011564:	e8 30 e0 ff ff       	call   c000f599 <malloc>
c0011569:	83 c4 0c             	add    esp,0xc
c001156c:	89 c5                	mov    ebp,eax
c001156e:	68 00 00 01 00       	push   0x10000
c0011573:	68 ee 00 00 00       	push   0xee
c0011578:	50                   	push   eax
c0011579:	e8 d2 f1 fe ff       	call   c0000750 <memset>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	85 f6                	test   esi,esi
c0011583:	79 03                	jns    c0011588 <Virt::setupPageSwapping(int)+0x15f>
c0011585:	83 c6 0f             	add    esi,0xf
c0011588:	c1 fe 04             	sar    esi,0x4
c001158b:	4e                   	dec    esi
c001158c:	83 fe ff             	cmp    esi,0xffffffff
c001158f:	74 3d                	je     c00115ce <Virt::setupPageSwapping(int)+0x1a5>
c0011591:	83 ec 0c             	sub    esp,0xc
c0011594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011596:	8d 54 24 10          	lea    edx,[esp+0x10]
c001159a:	52                   	push   edx
c001159b:	55                   	push   ebp
c001159c:	6a 00                	push   0x0
c001159e:	68 00 00 01 00       	push   0x10000
c00115a3:	53                   	push   ebx
c00115a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00115a7:	83 c4 20             	add    esp,0x20
c00115aa:	85 c0                	test   eax,eax
c00115ac:	75 31                	jne    c00115df <Virt::setupPageSwapping(int)+0x1b6>
c00115ae:	81 7c 24 04 00 00 01 00 	cmp    DWORD PTR [esp+0x4],0x10000
c00115b6:	74 d3                	je     c001158b <Virt::setupPageSwapping(int)+0x162>
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	4e                   	dec    esi
c00115bc:	68 85 a7 02 c0       	push   0xc002a785
c00115c1:	e8 1d 8a 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	83 fe ff             	cmp    esi,0xffffffff
c00115cc:	75 c3                	jne    c0011591 <Virt::setupPageSwapping(int)+0x168>
c00115ce:	83 ec 0c             	sub    esp,0xc
c00115d1:	55                   	push   ebp
c00115d2:	e8 e2 df ff ff       	call   c000f5b9 <rfree>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	e9 c8 fe ff ff       	jmp    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	68 85 a7 02 c0       	push   0xc002a785
c00115e7:	e8 f7 89 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	eb bd                	jmp    c00115ae <Virt::setupPageSwapping(int)+0x185>
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	68 38 a5 02 c0       	push   0xc002a538
c00115f9:	e8 3b 12 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00115fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011601:	e8 6e 19 00 00       	call   c0012f74 <File::unlink()>
c0011606:	58                   	pop    eax
c0011607:	5a                   	pop    edx
c0011608:	6a 12                	push   0x12
c001160a:	53                   	push   ebx
c001160b:	e8 ec 17 00 00       	call   c0012dfc <File::open(FileOpenMode)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 c0                	test   eax,eax
c0011615:	0f 84 4e fe ff ff    	je     c0011469 <Virt::setupPageSwapping(int)+0x40>
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	68 6a a7 02 c0       	push   0xc002a76a
c0011623:	e8 bb 89 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	e9 39 fe ff ff       	jmp    c0011469 <Virt::setupPageSwapping(int)+0x40>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	68 6a a7 02 c0       	push   0xc002a76a
c0011638:	e8 a6 89 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	e9 0a ff ff ff       	jmp    c001154f <Virt::setupPageSwapping(int)+0x126>
c0011645:	90                   	nop

c0011646 <VAS::VAS()>:
c0011646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001164a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	a3 d0 de 02 c0       	mov    ds:0xc002ded0,eax
c0011665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011669:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001166d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011671:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011678:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001167f:	90                   	nop
c0011680:	c3                   	ret    
c0011681:	90                   	nop

c0011682 <VAS::VAS(VAS*)>:
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	68 7c a5 02 c0       	push   0xc002a57c
c00116a3:	e8 3b 89 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	90                   	nop
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	c3                   	ret    

c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00116b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b4:	89 c2                	mov    edx,eax
c00116b6:	c1 e8 0a             	shr    eax,0xa
c00116b9:	c1 ea 16             	shr    edx,0x16
c00116bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00116c1:	19 c9                	sbb    ecx,ecx
c00116c3:	c1 e2 0c             	shl    edx,0xc
c00116c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00116cc:	25 fc 0f 00 00       	and    eax,0xffc
c00116d1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00116d8:	01 d0                	add    eax,edx
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <VAS::getPageTableEntry(unsigned long)>:
c00116dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116e0:	89 ca                	mov    edx,ecx
c00116e2:	c1 e9 0a             	shr    ecx,0xa
c00116e5:	c1 ea 16             	shr    edx,0x16
c00116e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00116ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00116f4:	c1 e0 0c             	shl    eax,0xc
c00116f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00116fa:	c3                   	ret    

c00116fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00116fb:	57                   	push   edi
c00116fc:	56                   	push   esi
c00116fd:	be 01 00 00 00       	mov    esi,0x1
c0011702:	53                   	push   ebx
c0011703:	83 ec 10             	sub    esp,0x10
c0011706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001170a:	c1 eb 0c             	shr    ebx,0xc
c001170d:	eb 3f                	jmp    c001174e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001170f:	83 ec 08             	sub    esp,0x8
c0011712:	57                   	push   edi
c0011713:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c0011719:	e8 be ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 00                	mov    eax,DWORD PTR [eax]
c0011723:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011727:	f6 c4 04             	test   ah,0x4
c001172a:	75 5f                	jne    c001178b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001172c:	80 fa 04             	cmp    dl,0x4
c001172f:	74 78                	je     c00117a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011731:	80 fa 02             	cmp    dl,0x2
c0011734:	0f 84 88 00 00 00    	je     c00117c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001173a:	80 fa 03             	cmp    dl,0x3
c001173d:	0f 84 ad 00 00 00    	je     c00117f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011743:	fe ca                	dec    dl
c0011745:	0f 84 92 00 00 00    	je     c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001174b:	43                   	inc    ebx
c001174c:	31 f6                	xor    esi,esi
c001174e:	53                   	push   ebx
c001174f:	89 df                	mov    edi,ebx
c0011751:	e8 a5 fa ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011756:	c1 e7 0c             	shl    edi,0xc
c0011759:	59                   	pop    ecx
c001175a:	84 c0                	test   al,al
c001175c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011760:	75 ad                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	68 8b a7 02 c0       	push   0xc002a78b
c001176a:	e8 74 88 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c001176f:	58                   	pop    eax
c0011770:	5a                   	pop    edx
c0011771:	57                   	push   edi
c0011772:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c0011778:	e8 5f ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	8b 00                	mov    eax,DWORD PTR [eax]
c0011782:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011786:	f6 c4 04             	test   ah,0x4
c0011789:	74 c0                	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001178b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001178f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	50                   	push   eax
c0011798:	e8 87 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117a4:	80 fa 04             	cmp    dl,0x4
c00117a7:	75 88                	jne    c0011731 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00117a9:	89 f0                	mov    eax,esi
c00117ab:	84 c0                	test   al,al
c00117ad:	75 47                	jne    c00117f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00117af:	c7 44 24 20 a0 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5a0
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	5f                   	pop    edi
c00117bd:	e9 21 88 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c00117c2:	89 f0                	mov    eax,esi
c00117c4:	84 c0                	test   al,al
c00117c6:	75 15                	jne    c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00117c8:	83 ec 0c             	sub    esp,0xc
c00117cb:	68 a7 a7 02 c0       	push   0xc002a7a7
c00117d0:	e8 0e 88 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	e9 6e ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117dd:	83 ec 08             	sub    esp,0x8
c00117e0:	6a 00                	push   0x0
c00117e2:	53                   	push   ebx
c00117e3:	e8 de f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	e9 5b ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117f0:	89 f0                	mov    eax,esi
c00117f2:	84 c0                	test   al,al
c00117f4:	75 15                	jne    c001180b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00117f6:	83 ec 08             	sub    esp,0x8
c00117f9:	6a 00                	push   0x0
c00117fb:	53                   	push   ebx
c00117fc:	e8 c5 f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	5b                   	pop    ebx
c0011808:	5e                   	pop    esi
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    
c001180b:	c7 44 24 20 c3 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7c3
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	5b                   	pop    ebx
c0011817:	5e                   	pop    esi
c0011818:	5f                   	pop    edi
c0011819:	e9 c5 87 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>

c001181e <VAS::freeAllocatedPages(unsigned long)>:
c001181e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011826:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001182a:	74 09                	je     c0011835 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001182c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011830:	e9 c6 fe ff ff       	jmp    c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011835:	c7 44 24 04 c4 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a5c4
c001183d:	e9 f7 0f 00 00       	jmp    c0012839 <Dbg::kprintf(char const*, ...)>

c0011842 <VAS::virtualToPhysical(unsigned long)>:
c0011842:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011846:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001184a:	e8 8d fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001184f:	5a                   	pop    edx
c0011850:	8b 00                	mov    eax,DWORD PTR [eax]
c0011852:	59                   	pop    ecx
c0011853:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011858:	c3                   	ret    
c0011859:	90                   	nop

c001185a <VAS::reflagRange(unsigned long, int, int, int)>:
c001185a:	55                   	push   ebp
c001185b:	57                   	push   edi
c001185c:	56                   	push   esi
c001185d:	53                   	push   ebx
c001185e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011862:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011866:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001186a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001186e:	85 db                	test   ebx,ebx
c0011870:	7e 22                	jle    c0011894 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011872:	c1 e3 0c             	shl    ebx,0xc
c0011875:	01 f3                	add    ebx,esi
c0011877:	56                   	push   esi
c0011878:	81 c6 00 10 00 00    	add    esi,0x1000
c001187e:	55                   	push   ebp
c001187f:	e8 58 fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0011884:	5a                   	pop    edx
c0011885:	59                   	pop    ecx
c0011886:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011888:	21 f9                	and    ecx,edi
c001188a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001188e:	39 f3                	cmp    ebx,esi
c0011890:	89 08                	mov    DWORD PTR [eax],ecx
c0011892:	75 e3                	jne    c0011877 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	5f                   	pop    edi
c0011897:	5d                   	pop    ebp
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <VAS::setToWriteCombining(unsigned long, int)>:
c001189a:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001189f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00118a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00118ac:	75 01                	jne    c00118af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00118ae:	c3                   	ret    
c00118af:	68 80 00 00 00       	push   0x80
c00118b4:	6a ff                	push   0xffffffff
c00118b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c2:	e8 93 ff ff ff       	call   c001185a <VAS::reflagRange(unsigned long, int, int, int)>
c00118c7:	83 c4 14             	add    esp,0x14
c00118ca:	c3                   	ret    
c00118cb:	90                   	nop

c00118cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00118cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00118df:	19 c0                	sbb    eax,eax
c00118e1:	83 ca 03             	or     edx,0x3
c00118e4:	83 e0 fc             	and    eax,0xfffffffc
c00118e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118ee:	0f 20 d8             	mov    eax,cr3
c00118f1:	0f 22 d8             	mov    cr3,eax
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <VAS::~VAS()>:
c00118f6:	83 ec 2c             	sub    esp,0x2c
c00118f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011901:	fa                   	cli    
c0011902:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0011907:	40                   	inc    eax
c0011908:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001190d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011912:	8b 00                	mov    eax,DWORD PTR [eax]
c0011914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011917:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001191d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011921:	6a 01                	push   0x1
c0011923:	50                   	push   eax
c0011924:	e8 a3 ff ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c0011929:	83 c4 0c             	add    esp,0xc
c001192c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011934:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001193c:	0f 8f d4 00 00 00    	jg     c0011a16 <VAS::~VAS()+0x120>
c0011942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011946:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001194d:	c1 e2 02             	shl    edx,0x2
c0011950:	01 d0                	add    eax,edx
c0011952:	8b 00                	mov    eax,DWORD PTR [eax]
c0011954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195c:	83 e0 01             	and    eax,0x1
c001195f:	0f 84 a8 00 00 00    	je     c0011a0d <VAS::~VAS()+0x117>
c0011965:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001196d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011975:	7f 72                	jg     c00119e9 <VAS::~VAS()+0xf3>
c0011977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197b:	c1 e0 0a             	shl    eax,0xa
c001197e:	89 c2                	mov    edx,eax
c0011980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011984:	01 d0                	add    eax,edx
c0011986:	c1 e0 0c             	shl    eax,0xc
c0011989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001198d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011992:	8b 00                	mov    eax,DWORD PTR [eax]
c0011994:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011997:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001199d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00119a1:	6a 01                	push   0x1
c00119a3:	50                   	push   eax
c00119a4:	e8 07 fd ff ff       	call   c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00119a9:	83 c4 0c             	add    esp,0xc
c00119ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119be:	25 01 04 00 00       	and    eax,0x401
c00119c3:	3d 01 04 00 00       	cmp    eax,0x401
c00119c8:	75 19                	jne    c00119e3 <VAS::~VAS()+0xed>
c00119ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	50                   	push   eax
c00119d7:	e8 48 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119e7:	eb 84                	jmp    c001196d <VAS::~VAS()+0x77>
c00119e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ed:	25 00 04 00 00       	and    eax,0x400
c00119f2:	74 19                	je     c0011a0d <VAS::~VAS()+0x117>
c00119f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	50                   	push   eax
c0011a01:	e8 1e df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a0d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a11:	e9 1e ff ff ff       	jmp    c0011934 <VAS::~VAS()+0x3e>
c0011a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	50                   	push   eax
c0011a21:	e8 d5 fc ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	50                   	push   eax
c0011a34:	e8 eb de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a44:	c1 e0 02             	shl    eax,0x2
c0011a47:	83 ec 08             	sub    esp,0x8
c0011a4a:	50                   	push   eax
c0011a4b:	68 e8 a5 02 c0       	push   0xc002a5e8
c0011a50:	e8 e4 0d 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0011a5d:	48                   	dec    eax
c0011a5e:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0011a63:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	75 01                	jne    c0011a6d <VAS::~VAS()+0x177>
c0011a6c:	fb                   	sti    
c0011a6d:	90                   	nop
c0011a6e:	83 c4 2c             	add    esp,0x2c
c0011a71:	c3                   	ret    

c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a72:	55                   	push   ebp
c0011a73:	57                   	push   edi
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	83 ec 1c             	sub    esp,0x1c
c0011a79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a81:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a87:	77 08                	ja     c0011a91 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a89:	0f 20 d8             	mov    eax,cr3
c0011a8c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a8f:	75 47                	jne    c0011ad8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a95:	09 d8                	or     eax,ebx
c0011a97:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a9c:	75 57                	jne    c0011af5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a9e:	89 de                	mov    esi,ebx
c0011aa0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aa3:	c1 ee 16             	shr    esi,0x16
c0011aa6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011aad:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ab1:	74 54                	je     c0011b07 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ab3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ab7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011abd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ac1:	c1 e6 0c             	shl    esi,0xc
c0011ac4:	c1 eb 0a             	shr    ebx,0xa
c0011ac7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011acd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ad0:	83 c4 1c             	add    esp,0x1c
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	5f                   	pop    edi
c0011ad6:	5d                   	pop    ebp
c0011ad7:	c3                   	ret    
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	68 08 a6 02 c0       	push   0xc002a608
c0011ae0:	e8 54 0d 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aec:	09 d8                	or     eax,ebx
c0011aee:	a9 ff 0f 00 00       	test   eax,0xfff
c0011af3:	74 a9                	je     c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	68 70 a6 02 c0       	push   0xc002a670
c0011afd:	e8 e1 84 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	eb 97                	jmp    c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b0b:	e8 85 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	89 c5                	mov    ebp,eax
c0011b15:	8b 0d d0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002ded0
c0011b1b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011b1f:	6a 01                	push   0x1
c0011b21:	e8 f9 f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011b26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011b2d:	6a 01                	push   0x1
c0011b2f:	50                   	push   eax
c0011b30:	55                   	push   ebp
c0011b31:	81 cd 07 04 00 00    	or     ebp,0x407
c0011b37:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b3b:	51                   	push   ecx
c0011b3c:	e8 27 02 00 00       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b41:	83 c4 1c             	add    esp,0x1c
c0011b44:	68 00 10 00 00       	push   0x1000
c0011b49:	6a 00                	push   0x0
c0011b4b:	50                   	push   eax
c0011b4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b50:	e8 fb eb fe ff       	call   c0000750 <memset>
c0011b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b5c:	e8 9a fb ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011b61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b65:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b6e:	e9 40 ff ff ff       	jmp    c0011ab3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b73:	90                   	nop

c0011b74 <VAS::allocatePages(int, int)>:
c0011b74:	55                   	push   ebp
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 1c             	sub    esp,0x1c
c0011b7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b7f:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0011b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b8a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b90:	83 e0 01             	and    eax,0x1
c0011b93:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b97:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b9b:	0f 85 cc 00 00 00    	jne    c0011c6d <VAS::allocatePages(int, int)+0xf9>
c0011ba1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba8:	85 c0                	test   eax,eax
c0011baa:	0f 84 a1 00 00 00    	je     c0011c51 <VAS::allocatePages(int, int)+0xdd>
c0011bb0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bb8:	c1 e6 0c             	shl    esi,0xc
c0011bbb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011bc4:	7e 33                	jle    c0011bf9 <VAS::allocatePages(int, int)+0x85>
c0011bc6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011bca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bce:	81 cd 00 04 00 00    	or     ebp,0x400
c0011bd4:	e8 bc dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011bd9:	55                   	push   ebp
c0011bda:	53                   	push   ebx
c0011bdb:	50                   	push   eax
c0011bdc:	57                   	push   edi
c0011bdd:	e8 90 fe ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bea:	74 03                	je     c0011bef <VAS::allocatePages(int, int)+0x7b>
c0011bec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf5:	39 de                	cmp    esi,ebx
c0011bf7:	75 db                	jne    c0011bd4 <VAS::allocatePages(int, int)+0x60>
c0011bf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bfe:	75 12                	jne    c0011c12 <VAS::allocatePages(int, int)+0x9e>
c0011c00:	0f 20 d8             	mov    eax,cr3
c0011c03:	0f 22 d8             	mov    cr3,eax
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	c1 ee 0a             	shr    esi,0xa
c0011c15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c19:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011c1f:	c1 eb 0a             	shr    ebx,0xa
c0011c22:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011c28:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c2e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c34:	39 c3                	cmp    ebx,eax
c0011c36:	77 ce                	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011c38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c41:	39 d8                	cmp    eax,ebx
c0011c43:	73 f3                	jae    c0011c38 <VAS::allocatePages(int, int)+0xc4>
c0011c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c49:	83 c4 1c             	add    esp,0x1c
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	5d                   	pop    ebp
c0011c50:	c3                   	ret    
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	68 94 a6 02 c0       	push   0xc002a694
c0011c59:	e8 85 83 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0011c5e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	e9 43 ff ff ff       	jmp    c0011bb0 <VAS::allocatePages(int, int)+0x3c>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c74:	e8 a6 f5 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c85:	0f 87 9b 00 00 00    	ja     c0011d26 <VAS::allocatePages(int, int)+0x1b2>
c0011c8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c8f:	85 d2                	test   edx,edx
c0011c91:	7e 3c                	jle    c0011ccf <VAS::allocatePages(int, int)+0x15b>
c0011c93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c97:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c9f:	c1 e5 0c             	shl    ebp,0xc
c0011ca2:	81 ce 00 04 00 00    	or     esi,0x400
c0011ca8:	01 dd                	add    ebp,ebx
c0011caa:	e8 e6 dc ff ff       	call   c000f995 <Phys::allocatePage()>
c0011caf:	56                   	push   esi
c0011cb0:	53                   	push   ebx
c0011cb1:	50                   	push   eax
c0011cb2:	57                   	push   edi
c0011cb3:	e8 ba fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc0:	74 03                	je     c0011cc5 <VAS::allocatePages(int, int)+0x151>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 dd                	cmp    ebp,ebx
c0011ccd:	75 db                	jne    c0011caa <VAS::allocatePages(int, int)+0x136>
c0011ccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd4:	0f 84 26 ff ff ff    	je     c0011c00 <VAS::allocatePages(int, int)+0x8c>
c0011cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ce2:	89 d3                	mov    ebx,edx
c0011ce4:	c1 e0 0c             	shl    eax,0xc
c0011ce7:	c1 eb 0a             	shr    ebx,0xa
c0011cea:	01 d0                	add    eax,edx
c0011cec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cf2:	c1 e8 0a             	shr    eax,0xa
c0011cf5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	2d 00 00 40 00       	sub    eax,0x400000
c0011d05:	39 c3                	cmp    ebx,eax
c0011d07:	0f 87 f9 fe ff ff    	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011d0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d10:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d16:	39 d8                	cmp    eax,ebx
c0011d18:	73 f3                	jae    c0011d0d <VAS::allocatePages(int, int)+0x199>
c0011d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1e:	83 c4 1c             	add    esp,0x1c
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	5f                   	pop    edi
c0011d24:	5d                   	pop    ebp
c0011d25:	c3                   	ret    
c0011d26:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0011d2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d31:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011d38:	0f 84 4d ff ff ff    	je     c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d3e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d46:	e9 40 ff ff ff       	jmp    c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d4b:	90                   	nop

c0011d4c <VAS::setCPUSpecific(unsigned long)>:
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	6a 05                	push   0x5
c0011d51:	68 00 00 40 c2       	push   0xc2400000
c0011d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5e:	e8 0f fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d63:	83 c4 1c             	add    esp,0x1c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0011d74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d7e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d82:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d88:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d8c:	83 e0 01             	and    eax,0x1
c0011d8f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d97:	85 c0                	test   eax,eax
c0011d99:	7e 39                	jle    c0011dd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d9f:	89 f3                	mov    ebx,esi
c0011da1:	c1 e0 0c             	shl    eax,0xc
c0011da4:	01 f0                	add    eax,esi
c0011da6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011daa:	55                   	push   ebp
c0011dab:	53                   	push   ebx
c0011dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011db0:	29 f0                	sub    eax,esi
c0011db2:	01 d8                	add    eax,ebx
c0011db4:	50                   	push   eax
c0011db5:	57                   	push   edi
c0011db6:	e8 b7 fc ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dc3:	74 03                	je     c0011dc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011dc5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011dd2:	75 d6                	jne    c0011daa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011dd4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd9:	75 10                	jne    c0011deb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ddb:	0f 20 d8             	mov    eax,cr3
c0011dde:	0f 22 d8             	mov    cr3,eax
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	89 f0                	mov    eax,esi
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	5d                   	pop    ebp
c0011dea:	c3                   	ret    
c0011deb:	89 f3                	mov    ebx,esi
c0011ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df1:	c1 eb 0a             	shr    ebx,0xa
c0011df4:	c1 e0 0c             	shl    eax,0xc
c0011df7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dfd:	01 f0                	add    eax,esi
c0011dff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e05:	c1 e8 0a             	shr    eax,0xa
c0011e08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0d:	2d 00 00 40 00       	sub    eax,0x400000
c0011e12:	39 c3                	cmp    ebx,eax
c0011e14:	77 cb                	ja     c0011de1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011e16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e1f:	39 d8                	cmp    eax,ebx
c0011e21:	73 f3                	jae    c0011e16 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	5d                   	pop    ebp
c0011e2c:	c3                   	ret    
c0011e2d:	90                   	nop

c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011e3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011e41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e4a:	75 4a                	jne    c0011e96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e50:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e53:	c1 eb 16             	shr    ebx,0x16
c0011e56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e61:	74 4d                	je     c0011eb0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e6b:	c1 e8 0a             	shr    eax,0xa
c0011e6e:	80 fa 01             	cmp    dl,0x1
c0011e71:	19 d2                	sbb    edx,edx
c0011e73:	c1 e3 0c             	shl    ebx,0xc
c0011e76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e80:	25 fc 0f 00 00       	and    eax,0xffc
c0011e85:	01 d8                	add    eax,ebx
c0011e87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e8e:	83 c4 1c             	add    esp,0x1c
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	5d                   	pop    ebp
c0011e95:	c3                   	ret    
c0011e96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	68 c0 a6 02 c0       	push   0xc002a6c0
c0011ea2:	e8 3c 81 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011eae:	eb 9c                	jmp    c0011e4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011eb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eb4:	e8 dc da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	89 c5                	mov    ebp,eax
c0011ebe:	8b 0d d0 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002ded0
c0011ec4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 50 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ed6:	6a 01                	push   0x1
c0011ed8:	50                   	push   eax
c0011ed9:	55                   	push   ebp
c0011eda:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ee0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ee4:	51                   	push   ecx
c0011ee5:	e8 7e fe ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 1c             	add    esp,0x1c
c0011eed:	68 00 10 00 00       	push   0x1000
c0011ef2:	6a 00                	push   0x0
c0011ef4:	50                   	push   eax
c0011ef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ef9:	e8 52 e8 fe ff       	call   c0000750 <memset>
c0011efe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f02:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f05:	e8 f1 f7 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011f0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f17:	e9 47 ff ff ff       	jmp    c0011e63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011f1c <VAS::VAS(bool)>:
c0011f1c:	53                   	push   ebx
c0011f1d:	83 ec 28             	sub    esp,0x28
c0011f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f42:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f46:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f49:	e8 47 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f54:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f57:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	6a 01                	push   0x1
c0011f62:	e8 b8 f2 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	89 c2                	mov    edx,eax
c0011f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	6a 03                	push   0x3
c0011f78:	6a 01                	push   0x1
c0011f7a:	52                   	push   edx
c0011f7b:	50                   	push   eax
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 e6 fd ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	89 c2                	mov    edx,eax
c0011f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f8e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f96:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f9e:	7f 1c                	jg     c0011fbc <VAS::VAS(bool)+0xa0>
c0011fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fa7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fab:	c1 e2 02             	shl    edx,0x2
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fba:	eb da                	jmp    c0011f96 <VAS::VAS(bool)+0x7a>
c0011fbc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011fc4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011fcc:	7f 7a                	jg     c0012048 <VAS::VAS(bool)+0x12c>
c0011fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd2:	2d 00 02 00 00       	sub    eax,0x200
c0011fd7:	c1 e0 0c             	shl    eax,0xc
c0011fda:	83 c8 03             	or     eax,0x3
c0011fdd:	89 c2                	mov    edx,eax
c0011fdf:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0011fe4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ff0:	83 e0 10             	and    eax,0x10
c0011ff3:	84 c0                	test   al,al
c0011ff5:	74 07                	je     c0011ffe <VAS::VAS(bool)+0xe2>
c0011ff7:	b8 00 01 00 00       	mov    eax,0x100
c0011ffc:	eb 05                	jmp    c0012003 <VAS::VAS(bool)+0xe7>
c0011ffe:	b8 00 00 00 00       	mov    eax,0x0
c0012003:	09 d0                	or     eax,edx
c0012005:	89 c1                	mov    ecx,eax
c0012007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001200e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012012:	c1 e2 02             	shl    edx,0x2
c0012015:	01 d0                	add    eax,edx
c0012017:	89 ca                	mov    edx,ecx
c0012019:	89 10                	mov    DWORD PTR [eax],edx
c001201b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201f:	2d 40 03 00 00       	sub    eax,0x340
c0012024:	83 f8 7f             	cmp    eax,0x7f
c0012027:	77 16                	ja     c001203f <VAS::VAS(bool)+0x123>
c0012029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012034:	c1 e2 02             	shl    edx,0x2
c0012037:	01 d0                	add    eax,edx
c0012039:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001203f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012043:	e9 7c ff ff ff       	jmp    c0011fc4 <VAS::VAS(bool)+0xa8>
c0012048:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001204d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012053:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012059:	83 e0 10             	and    eax,0x10
c001205c:	84 c0                	test   al,al
c001205e:	74 07                	je     c0012067 <VAS::VAS(bool)+0x14b>
c0012060:	b8 03 41 00 00       	mov    eax,0x4103
c0012065:	eb 05                	jmp    c001206c <VAS::VAS(bool)+0x150>
c0012067:	b8 03 40 00 00       	mov    eax,0x4003
c001206c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012070:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012073:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012079:	89 02                	mov    DWORD PTR [edx],eax
c001207b:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0012080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	50                   	push   eax
c0012090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012094:	e8 b3 fc ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120a3:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00120a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120b4:	83 e0 10             	and    eax,0x10
c00120b7:	84 c0                	test   al,al
c00120b9:	74 07                	je     c00120c2 <VAS::VAS(bool)+0x1a6>
c00120bb:	b8 00 01 00 00       	mov    eax,0x100
c00120c0:	eb 05                	jmp    c00120c7 <VAS::VAS(bool)+0x1ab>
c00120c2:	b8 00 00 00 00       	mov    eax,0x0
c00120c7:	09 c2                	or     edx,eax
c00120c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120d0:	05 fc 0f 00 00       	add    eax,0xffc
c00120d5:	83 ca 03             	or     edx,0x3
c00120d8:	89 10                	mov    DWORD PTR [eax],edx
c00120da:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00120df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	50                   	push   eax
c00120e9:	e8 84 1e 00 00       	call   c0013f72 <Device::getName()>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	68 dd a7 02 c0       	push   0xc002a7dd
c00120f9:	50                   	push   eax
c00120fa:	e8 99 e7 fe ff       	call   c0000898 <strcmp>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 94 c0             	sete   al
c0012107:	84 c0                	test   al,al
c0012109:	0f 84 87 00 00 00    	je     c0012196 <VAS::VAS(bool)+0x27a>
c001210f:	fa                   	cli    
c0012110:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0012115:	40                   	inc    eax
c0012116:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001211b:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0012120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012126:	05 7c 09 00 00       	add    eax,0x97c
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	50                   	push   eax
c001212f:	e8 ea ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	25 00 f0 ff ff       	and    eax,0xfffff000
c001213c:	89 c3                	mov    ebx,eax
c001213e:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0012143:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012149:	05 7c 09 00 00       	add    eax,0x97c
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	50                   	push   eax
c0012152:	e8 c7 ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	83 ec 08             	sub    esp,0x8
c001215d:	50                   	push   eax
c001215e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012162:	e8 75 f5 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012171:	6a 11                	push   0x11
c0012173:	53                   	push   ebx
c0012174:	50                   	push   eax
c0012175:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012179:	e8 f4 f8 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0012186:	48                   	dec    eax
c0012187:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001218c:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0012191:	85 c0                	test   eax,eax
c0012193:	75 01                	jne    c0012196 <VAS::VAS(bool)+0x27a>
c0012195:	fb                   	sti    
c0012196:	90                   	nop
c0012197:	83 c4 28             	add    esp,0x28
c001219a:	5b                   	pop    ebx
c001219b:	c3                   	ret    

c001219c <VAS::evict(unsigned long)>:
c001219c:	55                   	push   ebp
c001219d:	57                   	push   edi
c001219e:	56                   	push   esi
c001219f:	53                   	push   ebx
c00121a0:	83 ec 28             	sub    esp,0x28
c00121a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00121ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121af:	68 eb a7 02 c0       	push   0xc002a7eb
c00121b4:	e8 80 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00121b9:	e8 a2 f1 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c00121be:	5a                   	pop    edx
c00121bf:	89 c7                	mov    edi,eax
c00121c1:	59                   	pop    ecx
c00121c2:	50                   	push   eax
c00121c3:	68 08 a8 02 c0       	push   0xc002a808
c00121c8:	e8 6c 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	8b 1d 0c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd0c
c00121d6:	85 db                	test   ebx,ebx
c00121d8:	0f 8e d5 00 00 00    	jle    c00122b3 <VAS::evict(unsigned long)+0x117>
c00121de:	89 ee                	mov    esi,ebp
c00121e0:	31 db                	xor    ebx,ebx
c00121e2:	83 ec 0c             	sub    esp,0xc
c00121e5:	57                   	push   edi
c00121e6:	e8 63 f1 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00121eb:	5a                   	pop    edx
c00121ec:	01 d8                	add    eax,ebx
c00121ee:	59                   	pop    ecx
c00121ef:	50                   	push   eax
c00121f0:	68 18 a8 02 c0       	push   0xc002a818
c00121f5:	e8 3f 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00121fa:	58                   	pop    eax
c00121fb:	0f be 05 18 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd18
c0012202:	5a                   	pop    edx
c0012203:	ff 34 85 5c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da4]
c001220a:	68 2d a8 02 c0       	push   0xc002a82d
c001220f:	e8 25 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012214:	59                   	pop    ecx
c0012215:	58                   	pop    eax
c0012216:	56                   	push   esi
c0012217:	68 3b a8 02 c0       	push   0xc002a83b
c001221c:	e8 18 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012221:	58                   	pop    eax
c0012222:	0f be 05 18 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd18
c0012229:	5a                   	pop    edx
c001222a:	83 e8 41             	sub    eax,0x41
c001222d:	50                   	push   eax
c001222e:	68 4a a8 02 c0       	push   0xc002a84a
c0012233:	e8 01 06 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012238:	59                   	pop    ecx
c0012239:	58                   	pop    eax
c001223a:	0f be 05 18 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd18
c0012241:	ff 34 85 5c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da4]
c0012248:	68 56 a8 02 c0       	push   0xc002a856
c001224d:	e8 e7 05 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012252:	c7 44 24 10 fa 61 01 c0 	mov    DWORD PTR [esp+0x10],0xc00161fa
c001225a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012262:	83 c4 0c             	add    esp,0xc
c0012265:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001226d:	68 63 a8 02 c0       	push   0xc002a863
c0012272:	e8 c2 05 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012277:	89 3c 24             	mov    DWORD PTR [esp],edi
c001227a:	e8 cf f0 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c001227f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012282:	01 d8                	add    eax,ebx
c0012284:	6a 01                	push   0x1
c0012286:	31 d2                	xor    edx,edx
c0012288:	43                   	inc    ebx
c0012289:	52                   	push   edx
c001228a:	81 c6 00 02 00 00    	add    esi,0x200
c0012290:	50                   	push   eax
c0012291:	0f be 05 18 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd18
c0012298:	ff 34 85 5c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da4]
c001229f:	e8 56 3f 00 00       	call   c00161fa <LogicalDisk::write(unsigned long long, int, void*)>
c00122a4:	83 c4 20             	add    esp,0x20
c00122a7:	39 1d 0c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd0c,ebx
c00122ad:	0f 8f 2f ff ff ff    	jg     c00121e2 <VAS::evict(unsigned long)+0x46>
c00122b3:	83 ec 08             	sub    esp,0x8
c00122b6:	c1 e7 0b             	shl    edi,0xb
c00122b9:	55                   	push   ebp
c00122ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122be:	e8 19 f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00122c3:	5a                   	pop    edx
c00122c4:	89 c6                	mov    esi,eax
c00122c6:	59                   	pop    ecx
c00122c7:	ff 30                	push   DWORD PTR [eax]
c00122c9:	68 71 a8 02 c0       	push   0xc002a871
c00122ce:	e8 66 05 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00122d3:	8b 16                	mov    edx,DWORD PTR [esi]
c00122d5:	89 d3                	mov    ebx,edx
c00122d7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00122dd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122e3:	09 d7                	or     edi,edx
c00122e5:	89 3e                	mov    DWORD PTR [esi],edi
c00122e7:	5e                   	pop    esi
c00122e8:	58                   	pop    eax
c00122e9:	57                   	push   edi
c00122ea:	68 8a a8 02 c0       	push   0xc002a88a
c00122ef:	e8 45 05 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00122f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122f7:	ff 05 c8 de 02 c0    	inc    DWORD PTR ds:0xc002dec8
c00122fd:	e8 22 d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012302:	0f 20 d8             	mov    eax,cr3
c0012305:	0f 22 d8             	mov    cr3,eax
c0012308:	ff 35 c8 de 02 c0    	push   DWORD PTR ds:0xc002dec8
c001230e:	55                   	push   ebp
c001230f:	53                   	push   ebx
c0012310:	68 e4 a6 02 c0       	push   0xc002a6e4
c0012315:	e8 1f 05 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001231a:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c001231f:	c7 44 24 50 a3 a8 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a8a3
c0012327:	8d 50 01             	lea    edx,[eax+0x1]
c001232a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001232e:	89 15 c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,edx
c0012334:	83 c4 3c             	add    esp,0x3c
c0012337:	5b                   	pop    ebx
c0012338:	5e                   	pop    esi
c0012339:	5f                   	pop    edi
c001233a:	5d                   	pop    ebp
c001233b:	e9 f9 04 00 00       	jmp    c0012839 <Dbg::kprintf(char const*, ...)>

c0012340 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012340:	55                   	push   ebp
c0012341:	57                   	push   edi
c0012342:	56                   	push   esi
c0012343:	53                   	push   ebx
c0012344:	83 ec 24             	sub    esp,0x24
c0012347:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001234b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001234f:	68 b4 a8 02 c0       	push   0xc002a8b4
c0012354:	e8 e0 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012359:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001235d:	58                   	pop    eax
c001235e:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012364:	5a                   	pop    edx
c0012365:	57                   	push   edi
c0012366:	53                   	push   ebx
c0012367:	e8 70 f3 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001236c:	59                   	pop    ecx
c001236d:	5e                   	pop    esi
c001236e:	89 c6                	mov    esi,eax
c0012370:	ff 30                	push   DWORD PTR [eax]
c0012372:	68 c7 a8 02 c0       	push   0xc002a8c7
c0012377:	e8 bd 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001237c:	83 c4 10             	add    esp,0x10
c001237f:	85 ff                	test   edi,edi
c0012381:	74 0a                	je     c001238d <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c0012383:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0012385:	f7 c5 01 00 00 00    	test   ebp,0x1
c001238b:	74 0a                	je     c0012397 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c001238d:	83 c4 1c             	add    esp,0x1c
c0012390:	31 c0                	xor    eax,eax
c0012392:	5b                   	pop    ebx
c0012393:	5e                   	pop    esi
c0012394:	5f                   	pop    edi
c0012395:	5d                   	pop    ebp
c0012396:	c3                   	ret    
c0012397:	83 ec 08             	sub    esp,0x8
c001239a:	c1 ed 0b             	shr    ebp,0xb
c001239d:	55                   	push   ebp
c001239e:	68 d5 a8 02 c0       	push   0xc002a8d5
c00123a3:	e8 91 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00123a8:	e8 e8 d5 ff ff       	call   c000f995 <Phys::allocatePage()>
c00123ad:	59                   	pop    ecx
c00123ae:	5a                   	pop    edx
c00123af:	50                   	push   eax
c00123b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123b4:	68 e0 a8 02 c0       	push   0xc002a8e0
c00123b9:	e8 7b 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00123be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123c2:	8b 16                	mov    edx,DWORD PTR [esi]
c00123c4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00123ca:	09 d0                	or     eax,edx
c00123cc:	0d 01 08 00 00       	or     eax,0x801
c00123d1:	89 06                	mov    DWORD PTR [esi],eax
c00123d3:	59                   	pop    ecx
c00123d4:	5e                   	pop    esi
c00123d5:	50                   	push   eax
c00123d6:	68 f5 a8 02 c0       	push   0xc002a8f5
c00123db:	e8 59 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00123e0:	0f 20 d8             	mov    eax,cr3
c00123e3:	83 c4 0c             	add    esp,0xc
c00123e6:	53                   	push   ebx
c00123e7:	50                   	push   eax
c00123e8:	68 0d a9 02 c0       	push   0xc002a90d
c00123ed:	e8 47 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00123f2:	c7 04 24 25 a9 02 c0 	mov    DWORD PTR [esp],0xc002a925
c00123f9:	e8 3b 04 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	a1 0c cd 02 c0       	mov    eax,ds:0xc002cd0c
c0012406:	85 c0                	test   eax,eax
c0012408:	7e 3d                	jle    c0012447 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c001240a:	89 fe                	mov    esi,edi
c001240c:	31 db                	xor    ebx,ebx
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	55                   	push   ebp
c0012412:	e8 37 ef ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c0012417:	89 34 24             	mov    DWORD PTR [esp],esi
c001241a:	01 d8                	add    eax,ebx
c001241c:	6a 01                	push   0x1
c001241e:	31 d2                	xor    edx,edx
c0012420:	43                   	inc    ebx
c0012421:	52                   	push   edx
c0012422:	81 c6 00 02 00 00    	add    esi,0x200
c0012428:	50                   	push   eax
c0012429:	0f be 05 18 cd 02 c0 	movsx  eax,BYTE PTR ds:0xc002cd18
c0012430:	ff 34 85 5c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da4]
c0012437:	e8 52 3d 00 00       	call   c001618e <LogicalDisk::read(unsigned long long, int, void*)>
c001243c:	83 c4 20             	add    esp,0x20
c001243f:	39 1d 0c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd0c,ebx
c0012445:	7f c7                	jg     c001240e <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012447:	a1 c8 de 02 c0       	mov    eax,ds:0xc002dec8
c001244c:	48                   	dec    eax
c001244d:	52                   	push   edx
c001244e:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c0012453:	50                   	push   eax
c0012454:	57                   	push   edi
c0012455:	68 35 a9 02 c0       	push   0xc002a935
c001245a:	e8 da 03 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001245f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012462:	e8 c9 ee ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c0012467:	c7 04 24 4a a9 02 c0 	mov    DWORD PTR [esp],0xc002a94a
c001246e:	e8 c6 03 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012473:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0012478:	83 c4 10             	add    esp,0x10
c001247b:	48                   	dec    eax
c001247c:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0012481:	85 c0                	test   eax,eax
c0012483:	75 01                	jne    c0012486 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c0012485:	fb                   	sti    
c0012486:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001248a:	25 ff 0f 00 00       	and    eax,0xfff
c001248f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012494:	77 20                	ja     c00124b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c0012496:	0f 20 d8             	mov    eax,cr3
c0012499:	0f 22 d8             	mov    cr3,eax
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	68 70 a9 02 c0       	push   0xc002a970
c00124a4:	e8 90 03 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00124a9:	83 c4 10             	add    esp,0x10
c00124ac:	b0 01                	mov    al,0x1
c00124ae:	83 c4 1c             	add    esp,0x1c
c00124b1:	5b                   	pop    ebx
c00124b2:	5e                   	pop    esi
c00124b3:	5f                   	pop    edi
c00124b4:	5d                   	pop    ebp
c00124b5:	c3                   	ret    
c00124b6:	83 ec 0c             	sub    esp,0xc
c00124b9:	68 60 a9 02 c0       	push   0xc002a960
c00124be:	e8 76 03 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	eb ce                	jmp    c0012496 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c00124c8 <VAS::scanForEviction()>:
c00124c8:	55                   	push   ebp
c00124c9:	31 ed                	xor    ebp,ebp
c00124cb:	57                   	push   edi
c00124cc:	56                   	push   esi
c00124cd:	53                   	push   ebx
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00124d5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124d8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00124de:	75 0e                	jne    c00124ee <VAS::scanForEviction()+0x26>
c00124e0:	89 da                	mov    edx,ebx
c00124e2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00124e5:	c1 ea 16             	shr    edx,0x16
c00124e8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00124ec:	74 4e                	je     c001253c <VAS::scanForEviction()+0x74>
c00124ee:	53                   	push   ebx
c00124ef:	56                   	push   esi
c00124f0:	e8 e7 f1 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00124f5:	5f                   	pop    edi
c00124f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00124f8:	5a                   	pop    edx
c00124f9:	89 fa                	mov    edx,edi
c00124fb:	81 e2 01 08 00 00    	and    edx,0x801
c0012501:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012507:	74 3e                	je     c0012547 <VAS::scanForEviction()+0x7f>
c0012509:	81 c3 00 10 00 00    	add    ebx,0x1000
c001250f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012515:	76 2b                	jbe    c0012542 <VAS::scanForEviction()+0x7a>
c0012517:	45                   	inc    ebp
c0012518:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001251f:	83 fd 04             	cmp    ebp,0x4
c0012522:	74 35                	je     c0012559 <VAS::scanForEviction()+0x91>
c0012524:	31 db                	xor    ebx,ebx
c0012526:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001252c:	75 c0                	jne    c00124ee <VAS::scanForEviction()+0x26>
c001252e:	89 da                	mov    edx,ebx
c0012530:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012533:	c1 ea 16             	shr    edx,0x16
c0012536:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001253a:	75 b2                	jne    c00124ee <VAS::scanForEviction()+0x26>
c001253c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012542:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012545:	eb 91                	jmp    c00124d8 <VAS::scanForEviction()+0x10>
c0012547:	f7 c7 20 00 00 00    	test   edi,0x20
c001254d:	74 22                	je     c0012571 <VAS::scanForEviction()+0xa9>
c001254f:	83 e7 df             	and    edi,0xffffffdf
c0012552:	89 38                	mov    DWORD PTR [eax],edi
c0012554:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012557:	eb b0                	jmp    c0012509 <VAS::scanForEviction()+0x41>
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 14 a7 02 c0       	push   0xc002a714
c0012561:	e8 7d 7a 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0012566:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	e9 67 ff ff ff       	jmp    c00124d8 <VAS::scanForEviction()+0x10>
c0012571:	83 ec 08             	sub    esp,0x8
c0012574:	53                   	push   ebx
c0012575:	68 7e a9 02 c0       	push   0xc002a97e
c001257a:	e8 ba 02 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001257f:	58                   	pop    eax
c0012580:	5a                   	pop    edx
c0012581:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012584:	56                   	push   esi
c0012585:	e8 12 fc ff ff       	call   c001219c <VAS::evict(unsigned long)>
c001258a:	59                   	pop    ecx
c001258b:	5b                   	pop    ebx
c001258c:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001258f:	68 92 a9 02 c0       	push   0xc002a992
c0012594:	e8 a0 02 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012599:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00125a0:	89 f8                	mov    eax,edi
c00125a2:	83 c4 1c             	add    esp,0x1c
c00125a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125aa:	5b                   	pop    ebx
c00125ab:	5e                   	pop    esi
c00125ac:	5f                   	pop    edi
c00125ad:	5d                   	pop    ebp
c00125ae:	c3                   	ret    

c00125af <mapVASFirstTime>:
c00125af:	55                   	push   ebp
c00125b0:	57                   	push   edi
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125be:	4a                   	dec    edx
c00125bf:	0f 84 fe 00 00 00    	je     c00126c3 <mapVASFirstTime+0x114>
c00125c5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00125c8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00125cb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00125d0:	c1 e5 15             	shl    ebp,0x15
c00125d3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00125d8:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c00125de:	29 eb                	sub    ebx,ebp
c00125e0:	29 ef                	sub    edi,ebp
c00125e2:	83 ec 08             	sub    esp,0x8
c00125e5:	53                   	push   ebx
c00125e6:	68 be a9 02 c0       	push   0xc002a9be
c00125eb:	e8 49 02 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00125f0:	e8 a0 d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c00125f5:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c00125fc:	6a 01                	push   0x1
c00125fe:	53                   	push   ebx
c00125ff:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012605:	50                   	push   eax
c0012606:	56                   	push   esi
c0012607:	e8 5c f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001260c:	83 c4 20             	add    esp,0x20
c001260f:	39 fb                	cmp    ebx,edi
c0012611:	75 cf                	jne    c00125e2 <mapVASFirstTime+0x33>
c0012613:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012618:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001261d:	29 eb                	sub    ebx,ebp
c001261f:	29 ef                	sub    edi,ebp
c0012621:	83 ec 08             	sub    esp,0x8
c0012624:	53                   	push   ebx
c0012625:	68 da a9 02 c0       	push   0xc002a9da
c001262a:	e8 0a 02 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001262f:	58                   	pop    eax
c0012630:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012634:	5a                   	pop    edx
c0012635:	19 c0                	sbb    eax,eax
c0012637:	83 e0 04             	and    eax,0x4
c001263a:	05 03 04 00 00       	add    eax,0x403
c001263f:	50                   	push   eax
c0012640:	68 ff a8 02 c0       	push   0xc002a8ff
c0012645:	e8 ef 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001264a:	e8 46 d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c001264f:	59                   	pop    ecx
c0012650:	89 c5                	mov    ebp,eax
c0012652:	58                   	pop    eax
c0012653:	55                   	push   ebp
c0012654:	68 ee a9 02 c0       	push   0xc002a9ee
c0012659:	e8 db 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001265e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012662:	19 d2                	sbb    edx,edx
c0012664:	83 e2 04             	and    edx,0x4
c0012667:	81 c2 03 04 00 00    	add    edx,0x403
c001266d:	89 14 24             	mov    DWORD PTR [esp],edx
c0012670:	6a 01                	push   0x1
c0012672:	53                   	push   ebx
c0012673:	55                   	push   ebp
c0012674:	56                   	push   esi
c0012675:	e8 ee f6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001267a:	83 c4 18             	add    esp,0x18
c001267d:	53                   	push   ebx
c001267e:	56                   	push   esi
c001267f:	e8 58 f0 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012684:	5a                   	pop    edx
c0012685:	59                   	pop    ecx
c0012686:	ff 30                	push   DWORD PTR [eax]
c0012688:	68 0a aa 02 c0       	push   0xc002aa0a
c001268d:	e8 a7 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012692:	0f 20 d8             	mov    eax,cr3
c0012695:	83 c4 0c             	add    esp,0xc
c0012698:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001269e:	56                   	push   esi
c001269f:	50                   	push   eax
c00126a0:	68 0d a9 02 c0       	push   0xc002a90d
c00126a5:	e8 8f 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	39 df                	cmp    edi,ebx
c00126af:	0f 85 6c ff ff ff    	jne    c0012621 <mapVASFirstTime+0x72>
c00126b5:	0f 20 d8             	mov    eax,cr3
c00126b8:	0f 22 d8             	mov    cr3,eax
c00126bb:	83 c4 0c             	add    esp,0xc
c00126be:	5b                   	pop    ebx
c00126bf:	5e                   	pop    esi
c00126c0:	5f                   	pop    edi
c00126c1:	5d                   	pop    ebp
c00126c2:	c3                   	ret    
c00126c3:	83 ec 0c             	sub    esp,0xc
c00126c6:	68 a5 a9 02 c0       	push   0xc002a9a5
c00126cb:	e8 69 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00126d0:	83 c4 10             	add    esp,0x10
c00126d3:	83 c4 0c             	add    esp,0xc
c00126d6:	5b                   	pop    ebx
c00126d7:	5e                   	pop    esi
c00126d8:	5f                   	pop    edi
c00126d9:	5d                   	pop    ebp
c00126da:	c3                   	ret    

c00126db <__cxa_atexit>:
c00126db:	31 c0                	xor    eax,eax
c00126dd:	c3                   	ret    

c00126de <__cxa_finalize>:
c00126de:	c3                   	ret    

c00126df <__stack_chk_fail>:
c00126df:	55                   	push   ebp
c00126e0:	89 e5                	mov    ebp,esp
c00126e2:	83 ec 14             	sub    esp,0x14
c00126e5:	68 15 aa 02 c0       	push   0xc002aa15
c00126ea:	e8 4a 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00126ef:	58                   	pop    eax
c00126f0:	5a                   	pop    edx
c00126f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00126f4:	68 65 aa 02 c0       	push   0xc002aa65
c00126f9:	e8 3b 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00126fe:	59                   	pop    ecx
c00126ff:	58                   	pop    eax
c0012700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012703:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012706:	68 65 aa 02 c0       	push   0xc002aa65
c001270b:	e8 29 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012710:	5a                   	pop    edx
c0012711:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012714:	59                   	pop    ecx
c0012715:	8b 00                	mov    eax,DWORD PTR [eax]
c0012717:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001271a:	68 65 aa 02 c0       	push   0xc002aa65
c001271f:	e8 15 01 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0012724:	5a                   	pop    edx
c0012725:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012728:	59                   	pop    ecx
c0012729:	8b 00                	mov    eax,DWORD PTR [eax]
c001272b:	8b 00                	mov    eax,DWORD PTR [eax]
c001272d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012730:	68 65 aa 02 c0       	push   0xc002aa65
c0012735:	e8 ff 00 00 00       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001273a:	c7 04 24 6d aa 02 c0 	mov    DWORD PTR [esp],0xc002aa6d
c0012741:	e8 9d 78 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	c9                   	leave  
c001274a:	c3                   	ret    

c001274b <__cxa_pure_virtual>:
c001274b:	83 ec 18             	sub    esp,0x18
c001274e:	68 85 aa 02 c0       	push   0xc002aa85
c0012753:	e8 8b 78 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0012758:	83 c4 1c             	add    esp,0x1c
c001275b:	c3                   	ret    

c001275c <operator new[](unsigned long)>:
c001275c:	e9 38 ce ff ff       	jmp    c000f599 <malloc>

c0012761 <operator delete(void*, unsigned long)>:
c0012761:	e9 53 ce ff ff       	jmp    c000f5b9 <rfree>

c0012766 <operator delete[](void*)>:
c0012766:	e9 4e ce ff ff       	jmp    c000f5b9 <rfree>

c001276b <operator delete[](void*, unsigned long)>:
c001276b:	e9 49 ce ff ff       	jmp    c000f5b9 <rfree>

c0012770 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012770:	55                   	push   ebp
c0012771:	b9 11 00 00 00       	mov    ecx,0x11
c0012776:	57                   	push   edi
c0012777:	56                   	push   esi
c0012778:	be ba a3 02 c0       	mov    esi,0xc002a3ba
c001277d:	53                   	push   ebx
c001277e:	83 ec 20             	sub    esp,0x20
c0012781:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012785:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012789:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001278d:	fc                   	cld    
c001278e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012790:	89 ee                	mov    esi,ebp
c0012792:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012796:	eb 02                	jmp    c001279a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012798:	89 c6                	mov    esi,eax
c001279a:	31 d2                	xor    edx,edx
c001279c:	41                   	inc    ecx
c001279d:	89 f0                	mov    eax,esi
c001279f:	f7 f3                	div    ebx
c00127a1:	39 de                	cmp    esi,ebx
c00127a3:	73 f3                	jae    c0012798 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00127a5:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00127a8:	eb 02                	jmp    c00127ac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00127aa:	89 c5                	mov    ebp,eax
c00127ac:	31 d2                	xor    edx,edx
c00127ae:	49                   	dec    ecx
c00127af:	89 e8                	mov    eax,ebp
c00127b1:	f7 f3                	div    ebx
c00127b3:	39 dd                	cmp    ebp,ebx
c00127b5:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00127b9:	88 11                	mov    BYTE PTR [ecx],dl
c00127bb:	73 ed                	jae    c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00127bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127c1:	83 c4 20             	add    esp,0x20
c00127c4:	5b                   	pop    ebx
c00127c5:	5e                   	pop    esi
c00127c6:	5f                   	pop    edi
c00127c7:	5d                   	pop    ebp
c00127c8:	c3                   	ret    

c00127c9 <Dbg::logc(char)>:
c00127c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127cd:	ba fd 03 00 00       	mov    edx,0x3fd
c00127d2:	ec                   	in     al,dx
c00127d3:	a8 20                	test   al,0x20
c00127d5:	74 fb                	je     c00127d2 <Dbg::logc(char)+0x9>
c00127d7:	ba f8 03 00 00       	mov    edx,0x3f8
c00127dc:	88 c8                	mov    al,cl
c00127de:	ee                   	out    dx,al
c00127df:	c3                   	ret    

c00127e0 <Dbg::logs(char*)>:
c00127e0:	53                   	push   ebx
c00127e1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00127e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127e8:	84 c0                	test   al,al
c00127ea:	74 0f                	je     c00127fb <Dbg::logs(char*)+0x1b>
c00127ec:	50                   	push   eax
c00127ed:	43                   	inc    ebx
c00127ee:	e8 d6 ff ff ff       	call   c00127c9 <Dbg::logc(char)>
c00127f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00127f6:	5a                   	pop    edx
c00127f7:	84 c0                	test   al,al
c00127f9:	75 f1                	jne    c00127ec <Dbg::logs(char*)+0xc>
c00127fb:	5b                   	pop    ebx
c00127fc:	c3                   	ret    

c00127fd <Dbg::logWriteInt(unsigned int)>:
c00127fd:	83 ec 10             	sub    esp,0x10
c0012800:	6a 0a                	push   0xa
c0012802:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012806:	50                   	push   eax
c0012807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001280b:	e8 60 ff ff ff       	call   c0012770 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012810:	50                   	push   eax
c0012811:	e8 ca ff ff ff       	call   c00127e0 <Dbg::logs(char*)>
c0012816:	83 c4 20             	add    esp,0x20
c0012819:	c3                   	ret    

c001281a <Dbg::logWriteIntBase(unsigned int, int)>:
c001281a:	83 ec 10             	sub    esp,0x10
c001281d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012821:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012825:	50                   	push   eax
c0012826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001282a:	e8 41 ff ff ff       	call   c0012770 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001282f:	50                   	push   eax
c0012830:	e8 ab ff ff ff       	call   c00127e0 <Dbg::logs(char*)>
c0012835:	83 c4 20             	add    esp,0x20
c0012838:	c3                   	ret    

c0012839 <Dbg::kprintf(char const*, ...)>:
c0012839:	55                   	push   ebp
c001283a:	57                   	push   edi
c001283b:	56                   	push   esi
c001283c:	53                   	push   ebx
c001283d:	83 ec 0c             	sub    esp,0xc
c0012840:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012844:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001284c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001284f:	84 c0                	test   al,al
c0012851:	74 4a                	je     c001289d <Dbg::kprintf(char const*, ...)+0x64>
c0012853:	31 db                	xor    ebx,ebx
c0012855:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012858:	3c 25                	cmp    al,0x25
c001285a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001285d:	0f 85 e4 00 00 00    	jne    c0012947 <Dbg::kprintf(char const*, ...)+0x10e>
c0012863:	83 c3 02             	add    ebx,0x2
c0012866:	8a 07                	mov    al,BYTE PTR [edi]
c0012868:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001286b:	83 e8 25             	sub    eax,0x25
c001286e:	3c 53                	cmp    al,0x53
c0012870:	0f 87 ba 00 00 00    	ja     c0012930 <Dbg::kprintf(char const*, ...)+0xf7>
c0012876:	0f b6 c0             	movzx  eax,al
c0012879:	ff 24 85 98 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5568]
c0012880:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012884:	89 c8                	mov    eax,ecx
c0012886:	83 c1 04             	add    ecx,0x4
c0012889:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001288d:	ff 30                	push   DWORD PTR [eax]
c001288f:	e8 69 ff ff ff       	call   c00127fd <Dbg::logWriteInt(unsigned int)>
c0012894:	5f                   	pop    edi
c0012895:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012899:	84 c0                	test   al,al
c001289b:	75 b8                	jne    c0012855 <Dbg::kprintf(char const*, ...)+0x1c>
c001289d:	83 c4 0c             	add    esp,0xc
c00128a0:	5b                   	pop    ebx
c00128a1:	5e                   	pop    esi
c00128a2:	5f                   	pop    edi
c00128a3:	5d                   	pop    ebp
c00128a4:	c3                   	ret    
c00128a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128a9:	89 c8                	mov    eax,ecx
c00128ab:	83 c1 04             	add    ecx,0x4
c00128ae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128b2:	ff 30                	push   DWORD PTR [eax]
c00128b4:	e8 27 ff ff ff       	call   c00127e0 <Dbg::logs(char*)>
c00128b9:	58                   	pop    eax
c00128ba:	eb d9                	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c00128bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128c0:	89 d0                	mov    eax,edx
c00128c2:	83 c2 04             	add    edx,0x4
c00128c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128c9:	ff 30                	push   DWORD PTR [eax]
c00128cb:	e8 2d ff ff ff       	call   c00127fd <Dbg::logWriteInt(unsigned int)>
c00128d0:	58                   	pop    eax
c00128d1:	eb c2                	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c00128d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128d7:	89 d0                	mov    eax,edx
c00128d9:	83 c2 04             	add    edx,0x4
c00128dc:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00128df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128e3:	50                   	push   eax
c00128e4:	e8 e0 fe ff ff       	call   c00127c9 <Dbg::logc(char)>
c00128e9:	58                   	pop    eax
c00128ea:	eb a9                	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c00128ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128f0:	89 c8                	mov    eax,ecx
c00128f2:	83 c1 04             	add    ecx,0x4
c00128f5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128f9:	6a 10                	push   0x10
c00128fb:	ff 30                	push   DWORD PTR [eax]
c00128fd:	e8 18 ff ff ff       	call   c001281a <Dbg::logWriteIntBase(unsigned int, int)>
c0012902:	59                   	pop    ecx
c0012903:	5f                   	pop    edi
c0012904:	eb 8f                	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c0012906:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001290a:	89 d0                	mov    eax,edx
c001290c:	83 c2 08             	add    edx,0x8
c001290f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012913:	6a 10                	push   0x10
c0012915:	ff 30                	push   DWORD PTR [eax]
c0012917:	e8 fe fe ff ff       	call   c001281a <Dbg::logWriteIntBase(unsigned int, int)>
c001291c:	58                   	pop    eax
c001291d:	5a                   	pop    edx
c001291e:	e9 72 ff ff ff       	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c0012923:	6a 25                	push   0x25
c0012925:	e8 9f fe ff ff       	call   c00127c9 <Dbg::logc(char)>
c001292a:	58                   	pop    eax
c001292b:	e9 65 ff ff ff       	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c0012930:	6a 25                	push   0x25
c0012932:	e8 92 fe ff ff       	call   c00127c9 <Dbg::logc(char)>
c0012937:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001293a:	50                   	push   eax
c001293b:	e8 89 fe ff ff       	call   c00127c9 <Dbg::logc(char)>
c0012940:	5a                   	pop    edx
c0012941:	59                   	pop    ecx
c0012942:	e9 4e ff ff ff       	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c0012947:	50                   	push   eax
c0012948:	89 eb                	mov    ebx,ebp
c001294a:	e8 7a fe ff ff       	call   c00127c9 <Dbg::logc(char)>
c001294f:	89 fd                	mov    ebp,edi
c0012951:	58                   	pop    eax
c0012952:	e9 3e ff ff ff       	jmp    c0012895 <Dbg::kprintf(char const*, ...)+0x5c>
c0012957:	90                   	nop

c0012958 <File::read(unsigned long long, void*, int*)>:
c0012958:	53                   	push   ebx
c0012959:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001295d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012961:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012968:	3c 19                	cmp    al,0x19
c001296a:	77 35                	ja     c00129a1 <File::read(unsigned long long, void*, int*)+0x49>
c001296c:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c0012973:	85 c0                	test   eax,eax
c0012975:	74 2a                	je     c00129a1 <File::read(unsigned long long, void*, int*)+0x49>
c0012977:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001297d:	85 c0                	test   eax,eax
c001297f:	74 20                	je     c00129a1 <File::read(unsigned long long, void*, int*)+0x49>
c0012981:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012985:	74 21                	je     c00129a8 <File::read(unsigned long long, void*, int*)+0x50>
c0012987:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012989:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001298d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001299b:	5b                   	pop    ebx
c001299c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001299f:	ff e0                	jmp    eax
c00129a1:	b8 0b 00 00 00       	mov    eax,0xb
c00129a6:	eb 05                	jmp    c00129ad <File::read(unsigned long long, void*, int*)+0x55>
c00129a8:	b8 05 00 00 00       	mov    eax,0x5
c00129ad:	5b                   	pop    ebx
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <File::write(unsigned long long, void*, int*)>:
c00129b0:	53                   	push   ebx
c00129b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129c0:	3c 19                	cmp    al,0x19
c00129c2:	77 35                	ja     c00129f9 <File::write(unsigned long long, void*, int*)+0x49>
c00129c4:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c00129cb:	85 c0                	test   eax,eax
c00129cd:	74 2a                	je     c00129f9 <File::write(unsigned long long, void*, int*)+0x49>
c00129cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129d5:	85 c0                	test   eax,eax
c00129d7:	74 20                	je     c00129f9 <File::write(unsigned long long, void*, int*)+0x49>
c00129d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129dd:	74 21                	je     c0012a00 <File::write(unsigned long long, void*, int*)+0x50>
c00129df:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129e5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129f3:	5b                   	pop    ebx
c00129f4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00129f7:	ff e0                	jmp    eax
c00129f9:	b8 0b 00 00 00       	mov    eax,0xb
c00129fe:	eb 05                	jmp    c0012a05 <File::write(unsigned long long, void*, int*)+0x55>
c0012a00:	b8 05 00 00 00       	mov    eax,0x5
c0012a05:	5b                   	pop    ebx
c0012a06:	c3                   	ret    
c0012a07:	90                   	nop

c0012a08 <Directory::read(unsigned long long, void*, int*)>:
c0012a08:	53                   	push   ebx
c0012a09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a11:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a18:	3c 19                	cmp    al,0x19
c0012a1a:	77 35                	ja     c0012a51 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a1c:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c0012a23:	85 c0                	test   eax,eax
c0012a25:	74 2a                	je     c0012a51 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a27:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a2d:	85 c0                	test   eax,eax
c0012a2f:	74 20                	je     c0012a51 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a31:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a35:	74 21                	je     c0012a58 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a37:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a39:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a3d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a4b:	5b                   	pop    ebx
c0012a4c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a4f:	ff e0                	jmp    eax
c0012a51:	b8 0b 00 00 00       	mov    eax,0xb
c0012a56:	eb 05                	jmp    c0012a5d <Directory::read(unsigned long long, void*, int*)+0x55>
c0012a58:	b8 05 00 00 00       	mov    eax,0x5
c0012a5d:	5b                   	pop    ebx
c0012a5e:	c3                   	ret    
c0012a5f:	90                   	nop

c0012a60 <Directory::write(unsigned long long, void*, int*)>:
c0012a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a64:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012a6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a70:	80 fa 19             	cmp    dl,0x19
c0012a73:	77 18                	ja     c0012a8d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a75:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c0012a7c:	85 d2                	test   edx,edx
c0012a7e:	74 0d                	je     c0012a8d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a80:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012a87:	19 c0                	sbb    eax,eax
c0012a89:	83 e0 0a             	and    eax,0xa
c0012a8c:	40                   	inc    eax
c0012a8d:	c3                   	ret    

c0012a8e <File::isAtty()>:
c0012a8e:	31 c0                	xor    eax,eax
c0012a90:	c3                   	ret    
c0012a91:	90                   	nop

c0012a92 <Directory::isAtty()>:
c0012a92:	31 c0                	xor    eax,eax
c0012a94:	c3                   	ret    
c0012a95:	90                   	nop

c0012a96 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012a96:	b8 0a 00 00 00       	mov    eax,0xa
c0012a9b:	c3                   	ret    

c0012a9c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a9c:	b8 0a 00 00 00       	mov    eax,0xa
c0012aa1:	c3                   	ret    

c0012aa2 <Filesystem::getFileFirstSector(char const*)>:
c0012aa2:	31 c0                	xor    eax,eax
c0012aa4:	31 d2                	xor    edx,edx
c0012aa6:	c3                   	ret    
c0012aa7:	90                   	nop

c0012aa8 <File::~File()>:
c0012aa8:	83 ec 0c             	sub    esp,0xc
c0012aab:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c0012ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab4:	89 10                	mov    DWORD PTR [eax],edx
c0012ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aba:	83 ec 0c             	sub    esp,0xc
c0012abd:	50                   	push   eax
c0012abe:	e8 fb e4 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012ac3:	83 c4 10             	add    esp,0x10
c0012ac6:	90                   	nop
c0012ac7:	83 c4 0c             	add    esp,0xc
c0012aca:	c3                   	ret    
c0012acb:	90                   	nop

c0012acc <File::~File()>:
c0012acc:	83 ec 0c             	sub    esp,0xc
c0012acf:	83 ec 0c             	sub    esp,0xc
c0012ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad6:	e8 cd ff ff ff       	call   c0012aa8 <File::~File()>
c0012adb:	83 c4 10             	add    esp,0x10
c0012ade:	83 ec 08             	sub    esp,0x8
c0012ae1:	68 14 01 00 00       	push   0x114
c0012ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aea:	e8 72 fc ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	83 c4 0c             	add    esp,0xc
c0012af5:	c3                   	ret    

c0012af6 <Directory::~Directory()>:
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c0012afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b02:	89 10                	mov    DWORD PTR [eax],edx
c0012b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	50                   	push   eax
c0012b0c:	e8 ad e4 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	90                   	nop
c0012b15:	83 c4 0c             	add    esp,0xc
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <Directory::~Directory()>:
c0012b1a:	83 ec 0c             	sub    esp,0xc
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b24:	e8 cd ff ff ff       	call   c0012af6 <Directory::~Directory()>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	83 ec 08             	sub    esp,0x8
c0012b2f:	68 14 01 00 00       	push   0x114
c0012b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b38:	e8 24 fc ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	83 c4 0c             	add    esp,0xc
c0012b43:	c3                   	ret    

c0012b44 <Filesystem::Filesystem()>:
c0012b44:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c0012b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4d:	89 10                	mov    DWORD PTR [eax],edx
c0012b4f:	8b 15 d4 de 02 c0    	mov    edx,DWORD PTR ds:0xc002ded4
c0012b55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b60:	a3 d4 de 02 c0       	mov    ds:0xc002ded4,eax
c0012b65:	90                   	nop
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <Filesystem::~Filesystem()>:
c0012b68:	ba f0 ab 02 c0       	mov    edx,0xc002abf0
c0012b6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b71:	89 10                	mov    DWORD PTR [eax],edx
c0012b73:	90                   	nop
c0012b74:	c3                   	ret    
c0012b75:	90                   	nop

c0012b76 <Filesystem::~Filesystem()>:
c0012b76:	83 ec 0c             	sub    esp,0xc
c0012b79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b7d:	e8 e6 ff ff ff       	call   c0012b68 <Filesystem::~Filesystem()>
c0012b82:	83 c4 04             	add    esp,0x4
c0012b85:	83 ec 08             	sub    esp,0x8
c0012b88:	6a 08                	push   0x8
c0012b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b8e:	e8 ce fb ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	83 c4 0c             	add    esp,0xc
c0012b99:	c3                   	ret    

c0012b9a <Fs::getcwd(Process*, char*, int)>:
c0012b9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b9e:	31 c0                	xor    eax,eax
c0012ba0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ba3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ba7:	7d 15                	jge    c0012bbe <Fs::getcwd(Process*, char*, int)+0x24>
c0012ba9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bad:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bb4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012bb7:	84 c9                	test   cl,cl
c0012bb9:	74 06                	je     c0012bc1 <Fs::getcwd(Process*, char*, int)+0x27>
c0012bbb:	40                   	inc    eax
c0012bbc:	eb e2                	jmp    c0012ba0 <Fs::getcwd(Process*, char*, int)+0x6>
c0012bbe:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012bc1:	31 c0                	xor    eax,eax
c0012bc3:	c3                   	ret    

c0012bc4 <Fs::initVFS()>:
c0012bc4:	83 ec 18             	sub    esp,0x18
c0012bc7:	6a 08                	push   0x8
c0012bc9:	e8 cb c9 ff ff       	call   c000f599 <malloc>
c0012bce:	89 04 24             	mov    DWORD PTR [esp],eax
c0012bd1:	e8 12 df 00 00       	call   c0020ae8 <FAT::FAT()>
c0012bd6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012bdd:	e8 b7 c9 ff ff       	call   c000f599 <malloc>
c0012be2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012be5:	e8 0a f1 00 00       	call   c0021cf4 <ISO9660::ISO9660()>
c0012bea:	83 c4 1c             	add    esp,0x1c
c0012bed:	c3                   	ret    

c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012bee:	55                   	push   ebp
c0012bef:	57                   	push   edi
c0012bf0:	56                   	push   esi
c0012bf1:	53                   	push   ebx
c0012bf2:	81 ec 10 04 00 00    	sub    esp,0x410
c0012bf8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012bff:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c06:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c0d:	68 00 04 00 00       	push   0x400
c0012c12:	6a 00                	push   0x0
c0012c14:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c18:	56                   	push   esi
c0012c19:	e8 32 db fe ff       	call   c0000750 <memset>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c25:	75 0b                	jne    c0012c32 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c27:	50                   	push   eax
c0012c28:	50                   	push   eax
c0012c29:	57                   	push   edi
c0012c2a:	56                   	push   esi
c0012c2b:	e8 dc db fe ff       	call   c000080c <strcpy>
c0012c30:	eb 41                	jmp    c0012c73 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c32:	8a 07                	mov    al,BYTE PTR [edi]
c0012c34:	3c 5c                	cmp    al,0x5c
c0012c36:	74 04                	je     c0012c3c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c38:	3c 2f                	cmp    al,0x2f
c0012c3a:	75 18                	jne    c0012c54 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c3c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c3f:	3c 60                	cmp    al,0x60
c0012c41:	7e 03                	jle    c0012c46 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c43:	83 e8 20             	sub    eax,0x20
c0012c46:	88 04 24             	mov    BYTE PTR [esp],al
c0012c49:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c50:	50                   	push   eax
c0012c51:	50                   	push   eax
c0012c52:	eb 18                	jmp    c0012c6c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c54:	50                   	push   eax
c0012c55:	50                   	push   eax
c0012c56:	55                   	push   ebp
c0012c57:	56                   	push   esi
c0012c58:	e8 af db fe ff       	call   c000080c <strcpy>
c0012c5d:	5a                   	pop    edx
c0012c5e:	59                   	pop    ecx
c0012c5f:	68 26 bf 02 c0       	push   0xc002bf26
c0012c64:	56                   	push   esi
c0012c65:	e8 e2 dc fe ff       	call   c000094c <strcat>
c0012c6a:	5d                   	pop    ebp
c0012c6b:	58                   	pop    eax
c0012c6c:	57                   	push   edi
c0012c6d:	56                   	push   esi
c0012c6e:	e8 d9 dc fe ff       	call   c000094c <strcat>
c0012c73:	83 c4 10             	add    esp,0x10
c0012c76:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012c79:	3c 60                	cmp    al,0x60
c0012c7b:	7e 03                	jle    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012c7d:	83 e8 20             	sub    eax,0x20
c0012c80:	88 04 24             	mov    BYTE PTR [esp],al
c0012c83:	88 03                	mov    BYTE PTR [ebx],al
c0012c85:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c8c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012c92:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012c96:	bf 03 00 00 00       	mov    edi,0x3
c0012c9b:	b8 03 00 00 00       	mov    eax,0x3
c0012ca0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ca3:	84 d2                	test   dl,dl
c0012ca5:	0f 84 91 00 00 00    	je     c0012d3c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012cab:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012cae:	80 fa 5c             	cmp    dl,0x5c
c0012cb1:	74 05                	je     c0012cb8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012cb3:	80 fa 2f             	cmp    dl,0x2f
c0012cb6:	75 12                	jne    c0012cca <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012cb8:	89 c5                	mov    ebp,eax
c0012cba:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cbf:	74 09                	je     c0012cca <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012cc1:	40                   	inc    eax
c0012cc2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012cc6:	89 cf                	mov    edi,ecx
c0012cc8:	eb d6                	jmp    c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012cca:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012ccf:	75 5b                	jne    c0012d2c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012cd1:	80 fa 2e             	cmp    dl,0x2e
c0012cd4:	75 56                	jne    c0012d2c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012cd6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012cda:	74 19                	je     c0012cf5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012cdc:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ce1:	74 53                	je     c0012d36 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ce3:	89 f9                	mov    ecx,edi
c0012ce5:	41                   	inc    ecx
c0012ce6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ce9:	80 fa 2f             	cmp    dl,0x2f
c0012cec:	74 f7                	je     c0012ce5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012cee:	80 fa 5c             	cmp    dl,0x5c
c0012cf1:	74 f2                	je     c0012ce5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012cf3:	eb d1                	jmp    c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012cf5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012cfa:	74 3a                	je     c0012d36 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012cfc:	83 f8 03             	cmp    eax,0x3
c0012cff:	74 c5                	je     c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d01:	41                   	inc    ecx
c0012d02:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d05:	80 fa 2f             	cmp    dl,0x2f
c0012d08:	74 f7                	je     c0012d01 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d0a:	80 fa 5c             	cmp    dl,0x5c
c0012d0d:	74 f2                	je     c0012d01 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d0f:	48                   	dec    eax
c0012d10:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d14:	75 06                	jne    c0012d1c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d16:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d1a:	eb f3                	jmp    c0012d0f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d1c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d20:	74 07                	je     c0012d29 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d22:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d26:	48                   	dec    eax
c0012d27:	eb f3                	jmp    c0012d1c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d29:	40                   	inc    eax
c0012d2a:	eb 9a                	jmp    c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d2c:	80 fa 2f             	cmp    dl,0x2f
c0012d2f:	74 95                	je     c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d31:	80 fa 5c             	cmp    dl,0x5c
c0012d34:	74 90                	je     c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d36:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d39:	40                   	inc    eax
c0012d3a:	eb 8a                	jmp    c0012cc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d3c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	53                   	push   ebx
c0012d44:	e8 23 da fe ff       	call   c000076c <strlen>
c0012d49:	83 c4 10             	add    esp,0x10
c0012d4c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d51:	75 26                	jne    c0012d79 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	53                   	push   ebx
c0012d57:	e8 10 da fe ff       	call   c000076c <strlen>
c0012d5c:	83 c4 10             	add    esp,0x10
c0012d5f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012d64:	74 26                	je     c0012d8c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	53                   	push   ebx
c0012d6a:	e8 fd d9 fe ff       	call   c000076c <strlen>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012d77:	eb c7                	jmp    c0012d40 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012d79:	83 ec 0c             	sub    esp,0xc
c0012d7c:	53                   	push   ebx
c0012d7d:	e8 ea d9 fe ff       	call   c000076c <strlen>
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d8a:	74 c7                	je     c0012d53 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012d8c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012d92:	5b                   	pop    ebx
c0012d93:	5e                   	pop    esi
c0012d94:	5f                   	pop    edi
c0012d95:	5d                   	pop    ebp
c0012d96:	c3                   	ret    
c0012d97:	90                   	nop

c0012d98 <File::File(char const*, Process*)>:
c0012d98:	83 ec 0c             	sub    esp,0xc
c0012d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d9f:	83 ec 08             	sub    esp,0x8
c0012da2:	6a 00                	push   0x0
c0012da4:	50                   	push   eax
c0012da5:	e8 32 e0 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012daa:	83 c4 10             	add    esp,0x10
c0012dad:	ba 58 ac 02 c0       	mov    edx,0xc002ac58
c0012db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db6:	89 10                	mov    DWORD PTR [eax],edx
c0012db8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dbc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc6:	83 c0 0d             	add    eax,0xd
c0012dc9:	83 ec 04             	sub    esp,0x4
c0012dcc:	52                   	push   edx
c0012dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd1:	50                   	push   eax
c0012dd2:	e8 17 fe ff ff       	call   c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>
c0012dd7:	83 c4 10             	add    esp,0x10
c0012dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dde:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012de1:	8d 50 bf             	lea    edx,[eax-0x41]
c0012de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012df6:	90                   	nop
c0012df7:	83 c4 0c             	add    esp,0xc
c0012dfa:	c3                   	ret    
c0012dfb:	90                   	nop

c0012dfc <File::open(FileOpenMode)>:
c0012dfc:	53                   	push   ebx
c0012dfd:	b8 0b 00 00 00       	mov    eax,0xb
c0012e02:	83 ec 08             	sub    esp,0x8
c0012e05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e09:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e10:	80 fa 19             	cmp    dl,0x19
c0012e13:	77 40                	ja     c0012e55 <File::open(FileOpenMode)+0x59>
c0012e15:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c0012e1c:	85 d2                	test   edx,edx
c0012e1e:	74 35                	je     c0012e55 <File::open(FileOpenMode)+0x59>
c0012e20:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e26:	85 d2                	test   edx,edx
c0012e28:	74 2b                	je     c0012e55 <File::open(FileOpenMode)+0x59>
c0012e2a:	b8 06 00 00 00       	mov    eax,0x6
c0012e2f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e33:	75 20                	jne    c0012e55 <File::open(FileOpenMode)+0x59>
c0012e35:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e37:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e41:	51                   	push   ecx
c0012e42:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e45:	51                   	push   ecx
c0012e46:	52                   	push   edx
c0012e47:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	85 c0                	test   eax,eax
c0012e4f:	75 04                	jne    c0012e55 <File::open(FileOpenMode)+0x59>
c0012e51:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e55:	83 c4 08             	add    esp,0x8
c0012e58:	5b                   	pop    ebx
c0012e59:	c3                   	ret    

c0012e5a <File::close()>:
c0012e5a:	53                   	push   ebx
c0012e5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e60:	83 ec 08             	sub    esp,0x8
c0012e63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e67:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e6e:	80 fa 19             	cmp    dl,0x19
c0012e71:	77 41                	ja     c0012eb4 <File::close()+0x5a>
c0012e73:	8b 1c 95 60 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ca0]
c0012e7a:	85 db                	test   ebx,ebx
c0012e7c:	74 36                	je     c0012eb4 <File::close()+0x5a>
c0012e7e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e85:	74 2d                	je     c0012eb4 <File::close()+0x5a>
c0012e87:	b8 05 00 00 00       	mov    eax,0x5
c0012e8c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e90:	74 22                	je     c0012eb4 <File::close()+0x5a>
c0012e92:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e96:	8b 04 95 60 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ca0]
c0012e9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ea3:	53                   	push   ebx
c0012ea4:	53                   	push   ebx
c0012ea5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ea7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ead:	50                   	push   eax
c0012eae:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	83 c4 08             	add    esp,0x8
c0012eb7:	5b                   	pop    ebx
c0012eb8:	c3                   	ret    
c0012eb9:	90                   	nop

c0012eba <File::seek(unsigned long long)>:
c0012eba:	56                   	push   esi
c0012ebb:	53                   	push   ebx
c0012ebc:	b8 0b 00 00 00       	mov    eax,0xb
c0012ec1:	51                   	push   ecx
c0012ec2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ec6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012eca:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ed1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ed5:	80 fa 19             	cmp    dl,0x19
c0012ed8:	77 31                	ja     c0012f0b <File::seek(unsigned long long)+0x51>
c0012eda:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c0012ee1:	85 d2                	test   edx,edx
c0012ee3:	74 26                	je     c0012f0b <File::seek(unsigned long long)+0x51>
c0012ee5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012eeb:	85 d2                	test   edx,edx
c0012eed:	74 1c                	je     c0012f0b <File::seek(unsigned long long)+0x51>
c0012eef:	b8 05 00 00 00       	mov    eax,0x5
c0012ef4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012ef8:	74 11                	je     c0012f0b <File::seek(unsigned long long)+0x51>
c0012efa:	8b 02                	mov    eax,DWORD PTR [edx]
c0012efc:	53                   	push   ebx
c0012efd:	51                   	push   ecx
c0012efe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f04:	52                   	push   edx
c0012f05:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	5a                   	pop    edx
c0012f0c:	5b                   	pop    ebx
c0012f0d:	5e                   	pop    esi
c0012f0e:	c3                   	ret    
c0012f0f:	90                   	nop

c0012f10 <File::tell(unsigned long long*)>:
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	b8 0b 00 00 00       	mov    eax,0xb
c0012f18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f1c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f23:	80 fa 19             	cmp    dl,0x19
c0012f26:	77 34                	ja     c0012f5c <File::tell(unsigned long long*)+0x4c>
c0012f28:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c0012f2f:	85 d2                	test   edx,edx
c0012f31:	74 29                	je     c0012f5c <File::tell(unsigned long long*)+0x4c>
c0012f33:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f39:	85 d2                	test   edx,edx
c0012f3b:	74 1f                	je     c0012f5c <File::tell(unsigned long long*)+0x4c>
c0012f3d:	b8 05 00 00 00       	mov    eax,0x5
c0012f42:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f46:	74 14                	je     c0012f5c <File::tell(unsigned long long*)+0x4c>
c0012f48:	50                   	push   eax
c0012f49:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f4f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f55:	52                   	push   edx
c0012f56:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012f59:	83 c4 10             	add    esp,0x10
c0012f5c:	83 c4 0c             	add    esp,0xc
c0012f5f:	c3                   	ret    

c0012f60 <File::rewind()>:
c0012f60:	83 ec 10             	sub    esp,0x10
c0012f63:	6a 00                	push   0x0
c0012f65:	6a 00                	push   0x0
c0012f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6b:	e8 4a ff ff ff       	call   c0012eba <File::seek(unsigned long long)>
c0012f70:	83 c4 1c             	add    esp,0x1c
c0012f73:	c3                   	ret    

c0012f74 <File::unlink()>:
c0012f74:	83 ec 0c             	sub    esp,0xc
c0012f77:	b8 0b 00 00 00       	mov    eax,0xb
c0012f7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f87:	80 f9 19             	cmp    cl,0x19
c0012f8a:	77 2f                	ja     c0012fbb <File::unlink()+0x47>
c0012f8c:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0012f93:	85 c9                	test   ecx,ecx
c0012f95:	74 24                	je     c0012fbb <File::unlink()+0x47>
c0012f97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f9d:	85 c9                	test   ecx,ecx
c0012f9f:	74 1a                	je     c0012fbb <File::unlink()+0x47>
c0012fa1:	b8 06 00 00 00       	mov    eax,0x6
c0012fa6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012faa:	75 0f                	jne    c0012fbb <File::unlink()+0x47>
c0012fac:	83 c2 0d             	add    edx,0xd
c0012faf:	50                   	push   eax
c0012fb0:	50                   	push   eax
c0012fb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fb3:	52                   	push   edx
c0012fb4:	51                   	push   ecx
c0012fb5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	83 c4 0c             	add    esp,0xc
c0012fbe:	c3                   	ret    
c0012fbf:	90                   	nop

c0012fc0 <File::rename(char const*)>:
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fcc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd3:	80 f9 19             	cmp    cl,0x19
c0012fd6:	77 32                	ja     c001300a <File::rename(char const*)+0x4a>
c0012fd8:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0012fdf:	85 c9                	test   ecx,ecx
c0012fe1:	74 27                	je     c001300a <File::rename(char const*)+0x4a>
c0012fe3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fe9:	85 c9                	test   ecx,ecx
c0012feb:	74 1d                	je     c001300a <File::rename(char const*)+0x4a>
c0012fed:	b8 06 00 00 00       	mov    eax,0x6
c0012ff2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff6:	75 12                	jne    c001300a <File::rename(char const*)+0x4a>
c0012ff8:	83 c2 0d             	add    edx,0xd
c0012ffb:	50                   	push   eax
c0012ffc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ffe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013002:	52                   	push   edx
c0013003:	51                   	push   ecx
c0013004:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013007:	83 c4 10             	add    esp,0x10
c001300a:	83 c4 0c             	add    esp,0xc
c001300d:	c3                   	ret    

c001300e <File::chfatattr(unsigned char, unsigned char)>:
c001300e:	57                   	push   edi
c001300f:	b8 0b 00 00 00       	mov    eax,0xb
c0013014:	56                   	push   esi
c0013015:	53                   	push   ebx
c0013016:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001301a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001301e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013025:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013029:	80 f9 19             	cmp    cl,0x19
c001302c:	77 37                	ja     c0013065 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001302e:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0013035:	85 c9                	test   ecx,ecx
c0013037:	74 2c                	je     c0013065 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013039:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001303f:	85 c9                	test   ecx,ecx
c0013041:	74 22                	je     c0013065 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013043:	b8 06 00 00 00       	mov    eax,0x6
c0013048:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001304c:	75 17                	jne    c0013065 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001304e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013050:	89 f0                	mov    eax,esi
c0013052:	83 c2 0d             	add    edx,0xd
c0013055:	0f b6 f0             	movzx  esi,al
c0013058:	0f b6 db             	movzx  ebx,bl
c001305b:	56                   	push   esi
c001305c:	53                   	push   ebx
c001305d:	52                   	push   edx
c001305e:	51                   	push   ecx
c001305f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	5b                   	pop    ebx
c0013066:	5e                   	pop    esi
c0013067:	5f                   	pop    edi
c0013068:	c3                   	ret    
c0013069:	90                   	nop

c001306a <File::exists()>:
c001306a:	83 ec 0c             	sub    esp,0xc
c001306d:	31 c0                	xor    eax,eax
c001306f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013073:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001307a:	80 f9 19             	cmp    cl,0x19
c001307d:	77 24                	ja     c00130a3 <File::exists()+0x39>
c001307f:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0013086:	85 c9                	test   ecx,ecx
c0013088:	74 19                	je     c00130a3 <File::exists()+0x39>
c001308a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013090:	85 c9                	test   ecx,ecx
c0013092:	74 0f                	je     c00130a3 <File::exists()+0x39>
c0013094:	83 c2 0d             	add    edx,0xd
c0013097:	50                   	push   eax
c0013098:	50                   	push   eax
c0013099:	8b 01                	mov    eax,DWORD PTR [ecx]
c001309b:	52                   	push   edx
c001309c:	51                   	push   ecx
c001309d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	83 c4 0c             	add    esp,0xc
c00130a6:	c3                   	ret    
c00130a7:	90                   	nop

c00130a8 <File::stat(unsigned long long*, bool*)>:
c00130a8:	56                   	push   esi
c00130a9:	53                   	push   ebx
c00130aa:	50                   	push   eax
c00130ab:	b8 0b 00 00 00       	mov    eax,0xb
c00130b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00130c3:	80 f9 19             	cmp    cl,0x19
c00130c6:	77 3d                	ja     c0013105 <File::stat(unsigned long long*, bool*)+0x5d>
c00130c8:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c00130cf:	85 c9                	test   ecx,ecx
c00130d1:	74 32                	je     c0013105 <File::stat(unsigned long long*, bool*)+0x5d>
c00130d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d9:	85 c9                	test   ecx,ecx
c00130db:	74 28                	je     c0013105 <File::stat(unsigned long long*, bool*)+0x5d>
c00130dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130df:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e3:	74 13                	je     c00130f8 <File::stat(unsigned long long*, bool*)+0x50>
c00130e5:	83 ec 04             	sub    esp,0x4
c00130e8:	56                   	push   esi
c00130e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00130ef:	51                   	push   ecx
c00130f0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00130f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00130f6:	eb 0a                	jmp    c0013102 <File::stat(unsigned long long*, bool*)+0x5a>
c00130f8:	53                   	push   ebx
c00130f9:	83 c2 0d             	add    edx,0xd
c00130fc:	56                   	push   esi
c00130fd:	52                   	push   edx
c00130fe:	51                   	push   ecx
c00130ff:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	5a                   	pop    edx
c0013106:	5b                   	pop    ebx
c0013107:	5e                   	pop    esi
c0013108:	c3                   	ret    

c0013109 <Fs::setcwd(Process*, char*)>:
c0013109:	55                   	push   ebp
c001310a:	57                   	push   edi
c001310b:	56                   	push   esi
c001310c:	53                   	push   ebx
c001310d:	81 ec 20 02 00 00    	sub    esp,0x220
c0013113:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001311a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013120:	57                   	push   edi
c0013121:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013128:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001312c:	56                   	push   esi
c001312d:	e8 bc fa ff ff       	call   c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>
c0013132:	89 34 24             	mov    DWORD PTR [esp],esi
c0013135:	e8 32 d6 fe ff       	call   c000076c <strlen>
c001313a:	83 c4 10             	add    esp,0x10
c001313d:	83 f8 02             	cmp    eax,0x2
c0013140:	77 17                	ja     c0013159 <Fs::setcwd(Process*, char*)+0x50>
c0013142:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013147:	83 e8 41             	sub    eax,0x41
c001314a:	83 f8 19             	cmp    eax,0x19
c001314d:	76 24                	jbe    c0013173 <Fs::setcwd(Process*, char*)+0x6a>
c001314f:	b8 03 00 00 00       	mov    eax,0x3
c0013154:	e9 e0 00 00 00       	jmp    c0013239 <Fs::setcwd(Process*, char*)+0x130>
c0013159:	83 ec 0c             	sub    esp,0xc
c001315c:	56                   	push   esi
c001315d:	e8 0a d6 fe ff       	call   c000076c <strlen>
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	83 f8 03             	cmp    eax,0x3
c0013168:	75 34                	jne    c001319e <Fs::setcwd(Process*, char*)+0x95>
c001316a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001316f:	75 2d                	jne    c001319e <Fs::setcwd(Process*, char*)+0x95>
c0013171:	eb cf                	jmp    c0013142 <Fs::setcwd(Process*, char*)+0x39>
c0013173:	8b 14 85 60 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ca0]
c001317a:	b8 05 00 00 00       	mov    eax,0x5
c001317f:	85 d2                	test   edx,edx
c0013181:	0f 84 b2 00 00 00    	je     c0013239 <Fs::setcwd(Process*, char*)+0x130>
c0013187:	b8 06 00 00 00       	mov    eax,0x6
c001318c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013193:	0f 85 92 00 00 00    	jne    c001322b <Fs::setcwd(Process*, char*)+0x122>
c0013199:	e9 9b 00 00 00       	jmp    c0013239 <Fs::setcwd(Process*, char*)+0x130>
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	68 14 01 00 00       	push   0x114
c00131a6:	e8 ee c3 ff ff       	call   c000f599 <malloc>
c00131ab:	83 c4 0c             	add    esp,0xc
c00131ae:	89 c3                	mov    ebx,eax
c00131b0:	55                   	push   ebp
c00131b1:	56                   	push   esi
c00131b2:	50                   	push   eax
c00131b3:	e8 e0 fb ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c00131b8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131bd:	83 c4 0c             	add    esp,0xc
c00131c0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00131c4:	50                   	push   eax
c00131c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00131c9:	50                   	push   eax
c00131ca:	53                   	push   ebx
c00131cb:	e8 d8 fe ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	83 f8 02             	cmp    eax,0x2
c00131d6:	74 04                	je     c00131dc <Fs::setcwd(Process*, char*)+0xd3>
c00131d8:	85 c0                	test   eax,eax
c00131da:	74 1c                	je     c00131f8 <Fs::setcwd(Process*, char*)+0xef>
c00131dc:	b8 01 00 00 00       	mov    eax,0x1
c00131e1:	85 db                	test   ebx,ebx
c00131e3:	74 54                	je     c0013239 <Fs::setcwd(Process*, char*)+0x130>
c00131e5:	83 ec 0c             	sub    esp,0xc
c00131e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131ea:	53                   	push   ebx
c00131eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	b8 01 00 00 00       	mov    eax,0x1
c00131f6:	eb 41                	jmp    c0013239 <Fs::setcwd(Process*, char*)+0x130>
c00131f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00131fd:	75 1c                	jne    c001321b <Fs::setcwd(Process*, char*)+0x112>
c00131ff:	b8 02 00 00 00       	mov    eax,0x2
c0013204:	85 db                	test   ebx,ebx
c0013206:	74 31                	je     c0013239 <Fs::setcwd(Process*, char*)+0x130>
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001320d:	53                   	push   ebx
c001320e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	b8 02 00 00 00       	mov    eax,0x2
c0013219:	eb 1e                	jmp    c0013239 <Fs::setcwd(Process*, char*)+0x130>
c001321b:	85 db                	test   ebx,ebx
c001321d:	74 0c                	je     c001322b <Fs::setcwd(Process*, char*)+0x122>
c001321f:	83 ec 0c             	sub    esp,0xc
c0013222:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013224:	53                   	push   ebx
c0013225:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	50                   	push   eax
c001322c:	50                   	push   eax
c001322d:	56                   	push   esi
c001322e:	57                   	push   edi
c001322f:	e8 d8 d5 fe ff       	call   c000080c <strcpy>
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	31 c0                	xor    eax,eax
c0013239:	81 c4 1c 02 00 00    	add    esp,0x21c
c001323f:	5b                   	pop    ebx
c0013240:	5e                   	pop    esi
c0013241:	5f                   	pop    edi
c0013242:	5d                   	pop    ebp
c0013243:	c3                   	ret    

c0013244 <Directory::Directory(char const*, Process*)>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324b:	83 ec 08             	sub    esp,0x8
c001324e:	6a 00                	push   0x0
c0013250:	50                   	push   eax
c0013251:	e8 86 db ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0013256:	83 c4 10             	add    esp,0x10
c0013259:	ba 74 ac 02 c0       	mov    edx,0xc002ac74
c001325e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013262:	89 10                	mov    DWORD PTR [eax],edx
c0013264:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013268:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001326e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013272:	83 c0 0d             	add    eax,0xd
c0013275:	83 ec 04             	sub    esp,0x4
c0013278:	52                   	push   edx
c0013279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327d:	50                   	push   eax
c001327e:	e8 6b f9 ff ff       	call   c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001328d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013294:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001329a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132a2:	90                   	nop
c00132a3:	83 c4 0c             	add    esp,0xc
c00132a6:	c3                   	ret    
c00132a7:	90                   	nop

c00132a8 <Directory::open()>:
c00132a8:	53                   	push   ebx
c00132a9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ae:	83 ec 08             	sub    esp,0x8
c00132b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00132bc:	80 fa 19             	cmp    dl,0x19
c00132bf:	77 3d                	ja     c00132fe <Directory::open()+0x56>
c00132c1:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c00132c8:	85 d2                	test   edx,edx
c00132ca:	74 32                	je     c00132fe <Directory::open()+0x56>
c00132cc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00132d2:	85 d2                	test   edx,edx
c00132d4:	74 28                	je     c00132fe <Directory::open()+0x56>
c00132d6:	b8 06 00 00 00       	mov    eax,0x6
c00132db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00132df:	75 1d                	jne    c00132fe <Directory::open()+0x56>
c00132e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00132e7:	50                   	push   eax
c00132e8:	8b 02                	mov    eax,DWORD PTR [edx]
c00132ea:	51                   	push   ecx
c00132eb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00132ee:	51                   	push   ecx
c00132ef:	52                   	push   edx
c00132f0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00132f3:	83 c4 10             	add    esp,0x10
c00132f6:	85 c0                	test   eax,eax
c00132f8:	75 04                	jne    c00132fe <Directory::open()+0x56>
c00132fa:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00132fe:	83 c4 08             	add    esp,0x8
c0013301:	5b                   	pop    ebx
c0013302:	c3                   	ret    
c0013303:	90                   	nop

c0013304 <Directory::close()>:
c0013304:	53                   	push   ebx
c0013305:	b8 0b 00 00 00       	mov    eax,0xb
c001330a:	83 ec 08             	sub    esp,0x8
c001330d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013311:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013318:	80 fa 19             	cmp    dl,0x19
c001331b:	77 41                	ja     c001335e <Directory::close()+0x5a>
c001331d:	8b 1c 95 60 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ca0]
c0013324:	85 db                	test   ebx,ebx
c0013326:	74 36                	je     c001335e <Directory::close()+0x5a>
c0013328:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001332f:	74 2d                	je     c001335e <Directory::close()+0x5a>
c0013331:	b8 05 00 00 00       	mov    eax,0x5
c0013336:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001333a:	74 22                	je     c001335e <Directory::close()+0x5a>
c001333c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013340:	8b 04 95 60 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ca0]
c0013347:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001334d:	53                   	push   ebx
c001334e:	53                   	push   ebx
c001334f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013357:	50                   	push   eax
c0013358:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001335b:	83 c4 10             	add    esp,0x10
c001335e:	83 c4 08             	add    esp,0x8
c0013361:	5b                   	pop    ebx
c0013362:	c3                   	ret    
c0013363:	90                   	nop

c0013364 <Directory::unlink()>:
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	b8 0b 00 00 00       	mov    eax,0xb
c001336c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013377:	80 f9 19             	cmp    cl,0x19
c001337a:	77 2f                	ja     c00133ab <Directory::unlink()+0x47>
c001337c:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0013383:	85 c9                	test   ecx,ecx
c0013385:	74 24                	je     c00133ab <Directory::unlink()+0x47>
c0013387:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001338d:	85 c9                	test   ecx,ecx
c001338f:	74 1a                	je     c00133ab <Directory::unlink()+0x47>
c0013391:	b8 06 00 00 00       	mov    eax,0x6
c0013396:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001339a:	75 0f                	jne    c00133ab <Directory::unlink()+0x47>
c001339c:	83 c2 0d             	add    edx,0xd
c001339f:	50                   	push   eax
c00133a0:	50                   	push   eax
c00133a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133a3:	52                   	push   edx
c00133a4:	51                   	push   ecx
c00133a5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	83 c4 0c             	add    esp,0xc
c00133ae:	c3                   	ret    
c00133af:	90                   	nop

c00133b0 <Directory::rename(char const*)>:
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	b8 0b 00 00 00       	mov    eax,0xb
c00133b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133c3:	80 f9 19             	cmp    cl,0x19
c00133c6:	77 32                	ja     c00133fa <Directory::rename(char const*)+0x4a>
c00133c8:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c00133cf:	85 c9                	test   ecx,ecx
c00133d1:	74 27                	je     c00133fa <Directory::rename(char const*)+0x4a>
c00133d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133d9:	85 c9                	test   ecx,ecx
c00133db:	74 1d                	je     c00133fa <Directory::rename(char const*)+0x4a>
c00133dd:	b8 06 00 00 00       	mov    eax,0x6
c00133e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133e6:	75 12                	jne    c00133fa <Directory::rename(char const*)+0x4a>
c00133e8:	83 c2 0d             	add    edx,0xd
c00133eb:	50                   	push   eax
c00133ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133f2:	52                   	push   edx
c00133f3:	51                   	push   ecx
c00133f4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	83 c4 0c             	add    esp,0xc
c00133fd:	c3                   	ret    

c00133fe <Directory::exists()>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	31 c0                	xor    eax,eax
c0013403:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013407:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001340e:	80 f9 19             	cmp    cl,0x19
c0013411:	77 24                	ja     c0013437 <Directory::exists()+0x39>
c0013413:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c001341a:	85 c9                	test   ecx,ecx
c001341c:	74 19                	je     c0013437 <Directory::exists()+0x39>
c001341e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013424:	85 c9                	test   ecx,ecx
c0013426:	74 0f                	je     c0013437 <Directory::exists()+0x39>
c0013428:	83 c2 0d             	add    edx,0xd
c001342b:	50                   	push   eax
c001342c:	50                   	push   eax
c001342d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001342f:	52                   	push   edx
c0013430:	51                   	push   ecx
c0013431:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	83 c4 0c             	add    esp,0xc
c001343a:	c3                   	ret    
c001343b:	90                   	nop

c001343c <Directory::read(dirent*)>:
c001343c:	83 ec 1c             	sub    esp,0x1c
c001343f:	b8 0b 00 00 00       	mov    eax,0xb
c0013444:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013448:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001344f:	80 fa 19             	cmp    dl,0x19
c0013452:	77 30                	ja     c0013484 <Directory::read(dirent*)+0x48>
c0013454:	8b 14 95 60 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ca0]
c001345b:	85 d2                	test   edx,edx
c001345d:	74 25                	je     c0013484 <Directory::read(dirent*)+0x48>
c001345f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013466:	74 1c                	je     c0013484 <Directory::read(dirent*)+0x48>
c0013468:	83 ec 0c             	sub    esp,0xc
c001346b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001346d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013471:	52                   	push   edx
c0013472:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013476:	6a 00                	push   0x0
c0013478:	68 10 01 00 00       	push   0x110
c001347d:	51                   	push   ecx
c001347e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013481:	83 c4 20             	add    esp,0x20
c0013484:	83 c4 1c             	add    esp,0x1c
c0013487:	c3                   	ret    

c0013488 <Directory::create()>:
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	b8 0b 00 00 00       	mov    eax,0xb
c0013490:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013494:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001349b:	80 f9 19             	cmp    cl,0x19
c001349e:	77 2f                	ja     c00134cf <Directory::create()+0x47>
c00134a0:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c00134a7:	85 c9                	test   ecx,ecx
c00134a9:	74 24                	je     c00134cf <Directory::create()+0x47>
c00134ab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134b1:	85 c9                	test   ecx,ecx
c00134b3:	74 1a                	je     c00134cf <Directory::create()+0x47>
c00134b5:	b8 06 00 00 00       	mov    eax,0x6
c00134ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134be:	75 0f                	jne    c00134cf <Directory::create()+0x47>
c00134c0:	83 c2 0d             	add    edx,0xd
c00134c3:	50                   	push   eax
c00134c4:	50                   	push   eax
c00134c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134c7:	52                   	push   edx
c00134c8:	51                   	push   ecx
c00134c9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	83 c4 0c             	add    esp,0xc
c00134d2:	c3                   	ret    
c00134d3:	90                   	nop

c00134d4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00134d4:	b8 0a 00 00 00       	mov    eax,0xa
c00134d9:	c3                   	ret    

c00134da <Bus::Bus(char const*)>:
c00134da:	83 ec 0c             	sub    esp,0xc
c00134dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e1:	83 ec 08             	sub    esp,0x8
c00134e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e8:	50                   	push   eax
c00134e9:	e8 88 09 00 00       	call   c0013e76 <Device::Device(char const*)>
c00134ee:	83 c4 10             	add    esp,0x10
c00134f1:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c00134f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fa:	89 10                	mov    DWORD PTR [eax],edx
c00134fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013500:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001350a:	90                   	nop
c001350b:	83 c4 0c             	add    esp,0xc
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <Bus::~Bus()>:
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c0013518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351c:	89 10                	mov    DWORD PTR [eax],edx
c001351e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013522:	83 ec 0c             	sub    esp,0xc
c0013525:	50                   	push   eax
c0013526:	e8 15 06 00 00       	call   c0013b40 <Device::~Device()>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	90                   	nop
c001352f:	83 c4 0c             	add    esp,0xc
c0013532:	c3                   	ret    
c0013533:	90                   	nop

c0013534 <Bus::~Bus()>:
c0013534:	83 ec 0c             	sub    esp,0xc
c0013537:	83 ec 0c             	sub    esp,0xc
c001353a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353e:	e8 cd ff ff ff       	call   c0013510 <Bus::~Bus()>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	83 ec 08             	sub    esp,0x8
c0013549:	68 58 01 00 00       	push   0x158
c001354e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013552:	e8 0a f2 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	83 c4 0c             	add    esp,0xc
c001355d:	c3                   	ret    

c001355e <Buzzer::Buzzer(char const*)>:
c001355e:	83 ec 0c             	sub    esp,0xc
c0013561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013565:	83 ec 08             	sub    esp,0x8
c0013568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001356c:	50                   	push   eax
c001356d:	e8 04 09 00 00       	call   c0013e76 <Device::Device(char const*)>
c0013572:	83 c4 10             	add    esp,0x10
c0013575:	ba bc ac 02 c0       	mov    edx,0xc002acbc
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	89 10                	mov    DWORD PTR [eax],edx
c0013580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013584:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013592:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001359c:	90                   	nop
c001359d:	83 c4 0c             	add    esp,0xc
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <Buzzer::~Buzzer()>:
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	ba bc ac 02 c0       	mov    edx,0xc002acbc
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	89 10                	mov    DWORD PTR [eax],edx
c00135b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	50                   	push   eax
c00135b8:	e8 83 05 00 00       	call   c0013b40 <Device::~Device()>
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	90                   	nop
c00135c1:	83 c4 0c             	add    esp,0xc
c00135c4:	c3                   	ret    
c00135c5:	90                   	nop

c00135c6 <Buzzer::~Buzzer()>:
c00135c6:	83 ec 0c             	sub    esp,0xc
c00135c9:	83 ec 0c             	sub    esp,0xc
c00135cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d0:	e8 cd ff ff ff       	call   c00135a2 <Buzzer::~Buzzer()>
c00135d5:	83 c4 10             	add    esp,0x10
c00135d8:	83 ec 08             	sub    esp,0x8
c00135db:	68 5c 01 00 00       	push   0x15c
c00135e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e4:	e8 78 f1 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00135e9:	83 c4 10             	add    esp,0x10
c00135ec:	83 c4 0c             	add    esp,0xc
c00135ef:	c3                   	ret    

c00135f0 <Buzzer::stop()>:
c00135f0:	83 ec 14             	sub    esp,0x14
c00135f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00135f9:	6a 00                	push   0x0
c00135fb:	50                   	push   eax
c00135fc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135ff:	83 c4 1c             	add    esp,0x1c
c0013602:	c3                   	ret    

c0013603 <beepThread(void*)>:
c0013603:	53                   	push   ebx
c0013604:	83 ec 08             	sub    esp,0x8
c0013607:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001360c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013610:	48                   	dec    eax
c0013611:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0013616:	75 01                	jne    c0013619 <beepThread(void*)+0x16>
c0013618:	fb                   	sti    
c0013619:	50                   	push   eax
c001361a:	50                   	push   eax
c001361b:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013620:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013626:	52                   	push   edx
c0013627:	50                   	push   eax
c0013628:	e8 22 a8 00 00       	call   c001de4f <nanoSleep(unsigned long long)>
c001362d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013630:	e8 bb ff ff ff       	call   c00135f0 <Buzzer::stop()>
c0013635:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001363d:	83 c4 18             	add    esp,0x18
c0013640:	5b                   	pop    ebx
c0013641:	e9 05 a7 00 00       	jmp    c001dd4b <blockTask(TaskState)>

c0013646 <Buzzer::beep(int, int, bool)>:
c0013646:	57                   	push   edi
c0013647:	56                   	push   esi
c0013648:	53                   	push   ebx
c0013649:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001364d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013651:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013655:	52                   	push   edx
c0013656:	52                   	push   edx
c0013657:	8b 06                	mov    eax,DWORD PTR [esi]
c0013659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001365d:	56                   	push   esi
c001365e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	89 f8                	mov    eax,edi
c0013666:	84 c0                	test   al,al
c0013668:	74 1f                	je     c0013689 <Buzzer::beep(int, int, bool)+0x43>
c001366a:	50                   	push   eax
c001366b:	50                   	push   eax
c001366c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013672:	99                   	cdq    
c0013673:	52                   	push   edx
c0013674:	50                   	push   eax
c0013675:	e8 d5 a7 00 00       	call   c001de4f <nanoSleep(unsigned long long)>
c001367a:	83 c4 10             	add    esp,0x10
c001367d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013681:	5b                   	pop    ebx
c0013682:	5e                   	pop    esi
c0013683:	5f                   	pop    edi
c0013684:	e9 67 ff ff ff       	jmp    c00135f0 <Buzzer::stop()>
c0013689:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001368f:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0013694:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001369c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136a0:	c7 44 24 14 03 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013603
c00136a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136ac:	5b                   	pop    ebx
c00136ad:	5e                   	pop    esi
c00136ae:	5f                   	pop    edi
c00136af:	e9 9c a2 00 00       	jmp    c001d950 <Process::createThread(void (*)(void*), void*, int)>

c00136b4 <User::loadClockSettings(int)>:
c00136b4:	53                   	push   ebx
c00136b5:	83 ec 14             	sub    esp,0x14
c00136b8:	68 14 01 00 00       	push   0x114
c00136bd:	e8 d7 be ff ff       	call   c000f599 <malloc>
c00136c2:	83 c4 0c             	add    esp,0xc
c00136c5:	89 c3                	mov    ebx,eax
c00136c7:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c00136cd:	68 e4 ac 02 c0       	push   0xc002ace4
c00136d2:	50                   	push   eax
c00136d3:	e8 c0 f6 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c00136d8:	58                   	pop    eax
c00136d9:	5a                   	pop    edx
c00136da:	6a 01                	push   0x1
c00136dc:	53                   	push   ebx
c00136dd:	e8 1a f7 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c00136e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136e5:	e8 70 f7 ff ff       	call   c0012e5a <File::close()>
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	85 db                	test   ebx,ebx
c00136ef:	74 0f                	je     c0013700 <User::loadClockSettings(int)+0x4c>
c00136f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00136f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00136fa:	83 c4 08             	add    esp,0x8
c00136fd:	5b                   	pop    ebx
c00136fe:	ff e0                	jmp    eax
c0013700:	83 c4 08             	add    esp,0x8
c0013703:	5b                   	pop    ebx
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <Clock::Clock(char const*)>:
c0013706:	83 ec 0c             	sub    esp,0xc
c0013709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370d:	83 ec 08             	sub    esp,0x8
c0013710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013714:	50                   	push   eax
c0013715:	e8 5c 07 00 00       	call   c0013e76 <Device::Device(char const*)>
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013726:	89 10                	mov    DWORD PTR [eax],edx
c0013728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013736:	90                   	nop
c0013737:	83 c4 0c             	add    esp,0xc
c001373a:	c3                   	ret    
c001373b:	90                   	nop

c001373c <Clock::~Clock()>:
c001373c:	83 ec 0c             	sub    esp,0xc
c001373f:	ba 0c ad 02 c0       	mov    edx,0xc002ad0c
c0013744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013748:	89 10                	mov    DWORD PTR [eax],edx
c001374a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	50                   	push   eax
c0013752:	e8 e9 03 00 00       	call   c0013b40 <Device::~Device()>
c0013757:	83 c4 10             	add    esp,0x10
c001375a:	90                   	nop
c001375b:	83 c4 0c             	add    esp,0xc
c001375e:	c3                   	ret    
c001375f:	90                   	nop

c0013760 <Clock::~Clock()>:
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	83 ec 0c             	sub    esp,0xc
c0013766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001376a:	e8 cd ff ff ff       	call   c001373c <Clock::~Clock()>
c001376f:	83 c4 10             	add    esp,0x10
c0013772:	83 ec 08             	sub    esp,0x8
c0013775:	68 58 01 00 00       	push   0x158
c001377a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001377e:	e8 de ef ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	83 c4 0c             	add    esp,0xc
c0013789:	c3                   	ret    

c001378a <Clock::timeInSecondsLocal()>:
c001378a:	53                   	push   ebx
c001378b:	83 ec 14             	sub    esp,0x14
c001378e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013792:	8b 10                	mov    edx,DWORD PTR [eax]
c0013794:	50                   	push   eax
c0013795:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013798:	0f b6 0d dc de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dedc
c001379f:	03 0d e0 de 02 c0    	add    ecx,DWORD PTR ds:0xc002dee0
c00137a5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137ab:	89 cb                	mov    ebx,ecx
c00137ad:	c1 fb 1f             	sar    ebx,0x1f
c00137b0:	01 c8                	add    eax,ecx
c00137b2:	11 da                	adc    edx,ebx
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	31 c9                	xor    ecx,ecx
c00137b9:	80 3d dd de 02 c0 00 	cmp    BYTE PTR ds:0xc002dedd,0x0
c00137c0:	74 05                	je     c00137c7 <Clock::timeInSecondsLocal()+0x3d>
c00137c2:	b9 08 07 00 00       	mov    ecx,0x708
c00137c7:	31 db                	xor    ebx,ebx
c00137c9:	01 c8                	add    eax,ecx
c00137cb:	11 da                	adc    edx,ebx
c00137cd:	83 c4 08             	add    esp,0x8
c00137d0:	5b                   	pop    ebx
c00137d1:	c3                   	ret    

c00137d2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00137d2:	57                   	push   edi
c00137d3:	56                   	push   esi
c00137d4:	53                   	push   ebx
c00137d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00137d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137e3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00137e6:	0f b6 05 dc de 02 c0 	movzx  eax,BYTE PTR ds:0xc002dedc
c00137ed:	03 05 e0 de 02 c0    	add    eax,DWORD PTR ds:0xc002dee0
c00137f3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00137f9:	99                   	cdq    
c00137fa:	29 c6                	sub    esi,eax
c00137fc:	19 d7                	sbb    edi,edx
c00137fe:	89 f0                	mov    eax,esi
c0013800:	89 fa                	mov    edx,edi
c0013802:	31 f6                	xor    esi,esi
c0013804:	80 3d dd de 02 c0 00 	cmp    BYTE PTR ds:0xc002dedd,0x0
c001380b:	74 05                	je     c0013812 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001380d:	be 08 07 00 00       	mov    esi,0x708
c0013812:	31 ff                	xor    edi,edi
c0013814:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013818:	29 f0                	sub    eax,esi
c001381a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001381e:	19 fa                	sbb    edx,edi
c0013820:	89 d8                	mov    eax,ebx
c0013822:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013826:	5b                   	pop    ebx
c0013827:	5e                   	pop    esi
c0013828:	5f                   	pop    edi
c0013829:	ff e0                	jmp    eax

c001382b <datetimeToSeconds(datetime_t)>:
c001382b:	55                   	push   ebp
c001382c:	57                   	push   edi
c001382d:	56                   	push   esi
c001382e:	53                   	push   ebx
c001382f:	83 ec 14             	sub    esp,0x14
c0013832:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013836:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001383a:	89 d3                	mov    ebx,edx
c001383c:	0f b6 c6             	movzx  eax,dh
c001383f:	c1 eb 10             	shr    ebx,0x10
c0013842:	48                   	dec    eax
c0013843:	66 81 eb 6c 07       	sub    bx,0x76c
c0013848:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001384c:	0f b6 f5             	movzx  esi,ch
c001384f:	89 cf                	mov    edi,ecx
c0013851:	6b f6 3c             	imul   esi,esi,0x3c
c0013854:	c1 ef 10             	shr    edi,0x10
c0013857:	0f b6 c9             	movzx  ecx,cl
c001385a:	89 f8                	mov    eax,edi
c001385c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013862:	0f b6 f8             	movzx  edi,al
c0013865:	0f b6 d2             	movzx  edx,dl
c0013868:	01 fe                	add    esi,edi
c001386a:	01 f1                	add    ecx,esi
c001386c:	0f b7 f3             	movzx  esi,bx
c001386f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013873:	c1 f9 1f             	sar    ecx,0x1f
c0013876:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001387b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001387f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013884:	8b 0c 8d 40 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52c0]
c001388b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001388f:	76 29                	jbe    c00138ba <datetimeToSeconds(datetime_t)+0x8f>
c0013891:	f6 c3 03             	test   bl,0x3
c0013894:	75 24                	jne    c00138ba <datetimeToSeconds(datetime_t)+0x8f>
c0013896:	31 d2                	xor    edx,edx
c0013898:	bf 64 00 00 00       	mov    edi,0x64
c001389d:	89 d8                	mov    eax,ebx
c001389f:	66 f7 f7             	div    di
c00138a2:	66 85 d2             	test   dx,dx
c00138a5:	75 12                	jne    c00138b9 <datetimeToSeconds(datetime_t)+0x8e>
c00138a7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138ad:	bf 90 01 00 00       	mov    edi,0x190
c00138b2:	99                   	cdq    
c00138b3:	f7 ff                	idiv   edi
c00138b5:	85 d2                	test   edx,edx
c00138b7:	75 01                	jne    c00138ba <datetimeToSeconds(datetime_t)+0x8f>
c00138b9:	41                   	inc    ecx
c00138ba:	66 83 fb 46          	cmp    bx,0x46
c00138be:	76 45                	jbe    c0013905 <datetimeToSeconds(datetime_t)+0xda>
c00138c0:	bb 46 00 00 00       	mov    ebx,0x46
c00138c5:	bf 64 00 00 00       	mov    edi,0x64
c00138ca:	bd 90 01 00 00       	mov    ebp,0x190
c00138cf:	b8 6d 01 00 00       	mov    eax,0x16d
c00138d4:	f6 c3 03             	test   bl,0x3
c00138d7:	75 23                	jne    c00138fc <datetimeToSeconds(datetime_t)+0xd1>
c00138d9:	89 d8                	mov    eax,ebx
c00138db:	99                   	cdq    
c00138dc:	f7 ff                	idiv   edi
c00138de:	b8 6e 01 00 00       	mov    eax,0x16e
c00138e3:	85 d2                	test   edx,edx
c00138e5:	75 15                	jne    c00138fc <datetimeToSeconds(datetime_t)+0xd1>
c00138e7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00138ed:	99                   	cdq    
c00138ee:	f7 fd                	idiv   ebp
c00138f0:	83 fa 01             	cmp    edx,0x1
c00138f3:	19 c0                	sbb    eax,eax
c00138f5:	f7 d0                	not    eax
c00138f7:	05 6e 01 00 00       	add    eax,0x16e
c00138fc:	01 c1                	add    ecx,eax
c00138fe:	43                   	inc    ebx
c00138ff:	39 f3                	cmp    ebx,esi
c0013901:	7c cc                	jl     c00138cf <datetimeToSeconds(datetime_t)+0xa4>
c0013903:	eb 35                	jmp    c001393a <datetimeToSeconds(datetime_t)+0x10f>
c0013905:	74 33                	je     c001393a <datetimeToSeconds(datetime_t)+0x10f>
c0013907:	b8 45 00 00 00       	mov    eax,0x45
c001390c:	89 c2                	mov    edx,eax
c001390e:	83 e2 03             	and    edx,0x3
c0013911:	39 f0                	cmp    eax,esi
c0013913:	7e 0f                	jle    c0013924 <datetimeToSeconds(datetime_t)+0xf9>
c0013915:	83 fa 01             	cmp    edx,0x1
c0013918:	19 d2                	sbb    edx,edx
c001391a:	48                   	dec    eax
c001391b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013922:	eb e8                	jmp    c001390c <datetimeToSeconds(datetime_t)+0xe1>
c0013924:	b8 6d 01 00 00       	mov    eax,0x16d
c0013929:	85 d2                	test   edx,edx
c001392b:	75 0b                	jne    c0013938 <datetimeToSeconds(datetime_t)+0x10d>
c001392d:	66 83 fb 01          	cmp    bx,0x1
c0013931:	19 c0                	sbb    eax,eax
c0013933:	05 6e 01 00 00       	add    eax,0x16e
c0013938:	29 c1                	sub    ecx,eax
c001393a:	b8 80 51 01 00       	mov    eax,0x15180
c001393f:	f7 e9                	imul   ecx
c0013941:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013945:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013949:	83 c4 14             	add    esp,0x14
c001394c:	5b                   	pop    ebx
c001394d:	5e                   	pop    esi
c001394e:	5f                   	pop    edi
c001394f:	5d                   	pop    ebp
c0013950:	c3                   	ret    
c0013951:	90                   	nop

c0013952 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013952:	57                   	push   edi
c0013953:	56                   	push   esi
c0013954:	53                   	push   ebx
c0013955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013959:	8b 06                	mov    eax,DWORD PTR [esi]
c001395b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001395e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013962:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013966:	e8 c0 fe ff ff       	call   c001382b <datetimeToSeconds(datetime_t)>
c001396b:	59                   	pop    ecx
c001396c:	0f b6 0d dc de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dedc
c0013973:	5b                   	pop    ebx
c0013974:	03 0d e0 de 02 c0    	add    ecx,DWORD PTR ds:0xc002dee0
c001397a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013980:	89 cb                	mov    ebx,ecx
c0013982:	c1 fb 1f             	sar    ebx,0x1f
c0013985:	29 c8                	sub    eax,ecx
c0013987:	19 da                	sbb    edx,ebx
c0013989:	31 c9                	xor    ecx,ecx
c001398b:	80 3d dd de 02 c0 00 	cmp    BYTE PTR ds:0xc002dedd,0x0
c0013992:	74 05                	je     c0013999 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013994:	b9 08 07 00 00       	mov    ecx,0x708
c0013999:	31 db                	xor    ebx,ebx
c001399b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001399f:	29 c8                	sub    eax,ecx
c00139a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139a5:	19 da                	sbb    edx,ebx
c00139a7:	89 f8                	mov    eax,edi
c00139a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139ad:	5b                   	pop    ebx
c00139ae:	5e                   	pop    esi
c00139af:	5f                   	pop    edi
c00139b0:	ff e0                	jmp    eax

c00139b2 <secondsToDatetime(unsigned long long)>:
c00139b2:	55                   	push   ebp
c00139b3:	57                   	push   edi
c00139b4:	56                   	push   esi
c00139b5:	53                   	push   ebx
c00139b6:	83 ec 1c             	sub    esp,0x1c
c00139b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00139c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00139c5:	6a 00                	push   0x0
c00139c7:	68 80 51 01 00       	push   0x15180
c00139cc:	55                   	push   ebp
c00139cd:	57                   	push   edi
c00139ce:	e8 71 2f 01 00       	call   c0026944 <__udivdi3>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00139dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139e0:	6a 00                	push   0x0
c00139e2:	68 80 51 01 00       	push   0x15180
c00139e7:	55                   	push   ebp
c00139e8:	57                   	push   edi
c00139e9:	bf 10 0e 00 00       	mov    edi,0xe10
c00139ee:	e8 51 30 01 00       	call   c0026a44 <__umoddi3>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	99                   	cdq    
c00139f7:	f7 ff                	idiv   edi
c00139f9:	bf 3c 00 00 00       	mov    edi,0x3c
c00139fe:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a01:	89 d0                	mov    eax,edx
c0013a03:	99                   	cdq    
c0013a04:	f7 ff                	idiv   edi
c0013a06:	85 db                	test   ebx,ebx
c0013a08:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a0b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a0e:	79 11                	jns    c0013a21 <secondsToDatetime(unsigned long long)+0x6f>
c0013a10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a14:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a1a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a1f:	eb 07                	jmp    c0013a28 <secondsToDatetime(unsigned long long)+0x76>
c0013a21:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a26:	89 d8                	mov    eax,ebx
c0013a28:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a2d:	99                   	cdq    
c0013a2e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a33:	f7 f9                	idiv   ecx
c0013a35:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a3e:	31 d2                	xor    edx,edx
c0013a40:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a48:	01 c3                	add    ebx,eax
c0013a4a:	89 d8                	mov    eax,ebx
c0013a4c:	f7 f1                	div    ecx
c0013a4e:	31 d2                	xor    edx,edx
c0013a50:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a53:	89 d8                	mov    eax,ebx
c0013a55:	f7 f7                	div    edi
c0013a57:	31 d2                	xor    edx,edx
c0013a59:	29 c1                	sub    ecx,eax
c0013a5b:	89 d8                	mov    eax,ebx
c0013a5d:	f7 f5                	div    ebp
c0013a5f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013a64:	29 c1                	sub    ecx,eax
c0013a66:	31 d2                	xor    edx,edx
c0013a68:	89 c8                	mov    eax,ecx
c0013a6a:	f7 f5                	div    ebp
c0013a6c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013a71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a75:	31 d2                	xor    edx,edx
c0013a77:	89 c8                	mov    eax,ecx
c0013a79:	f7 f5                	div    ebp
c0013a7b:	31 d2                	xor    edx,edx
c0013a7d:	01 c3                	add    ebx,eax
c0013a7f:	89 c8                	mov    eax,ecx
c0013a81:	f7 f7                	div    edi
c0013a83:	bf 99 00 00 00       	mov    edi,0x99
c0013a88:	29 c3                	sub    ebx,eax
c0013a8a:	31 d2                	xor    edx,edx
c0013a8c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013a94:	29 c3                	sub    ebx,eax
c0013a96:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a99:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013a9c:	bb 05 00 00 00       	mov    ebx,0x5
c0013aa1:	83 c1 02             	add    ecx,0x2
c0013aa4:	89 c8                	mov    eax,ecx
c0013aa6:	f7 f7                	div    edi
c0013aa8:	31 d2                	xor    edx,edx
c0013aaa:	89 c7                	mov    edi,eax
c0013aac:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013ab2:	83 c0 02             	add    eax,0x2
c0013ab5:	f7 f3                	div    ebx
c0013ab7:	89 eb                	mov    ebx,ebp
c0013ab9:	29 c3                	sub    ebx,eax
c0013abb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013ac1:	88 1e                	mov    BYTE PTR [esi],bl
c0013ac3:	19 c0                	sbb    eax,eax
c0013ac5:	31 d2                	xor    edx,edx
c0013ac7:	83 e0 0c             	and    eax,0xc
c0013aca:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013ace:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013ad6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013ada:	83 f9 01             	cmp    ecx,0x1
c0013add:	0f 96 c2             	setbe  dl
c0013ae0:	41                   	inc    ecx
c0013ae1:	01 d0                	add    eax,edx
c0013ae3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013ae6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013aea:	83 c4 1c             	add    esp,0x1c
c0013aed:	89 f0                	mov    eax,esi
c0013aef:	5b                   	pop    ebx
c0013af0:	5e                   	pop    esi
c0013af1:	5f                   	pop    edi
c0013af2:	5d                   	pop    ebp
c0013af3:	c2 04 00             	ret    0x4

c0013af6 <Clock::timeInDatetimeLocal()>:
c0013af6:	53                   	push   ebx
c0013af7:	83 ec 14             	sub    esp,0x14
c0013afa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013afe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b02:	e8 83 fc ff ff       	call   c001378a <Clock::timeInSecondsLocal()>
c0013b07:	83 c4 0c             	add    esp,0xc
c0013b0a:	52                   	push   edx
c0013b0b:	50                   	push   eax
c0013b0c:	53                   	push   ebx
c0013b0d:	e8 a0 fe ff ff       	call   c00139b2 <secondsToDatetime(unsigned long long)>
c0013b12:	89 d8                	mov    eax,ebx
c0013b14:	83 c4 14             	add    esp,0x14
c0013b17:	5b                   	pop    ebx
c0013b18:	c2 04 00             	ret    0x4
c0013b1b:	90                   	nop

c0013b1c <Device::hibernate()>:
c0013b1c:	c3                   	ret    
c0013b1d:	90                   	nop

c0013b1e <Device::wake()>:
c0013b1e:	c3                   	ret    
c0013b1f:	90                   	nop

c0013b20 <Device::detect()>:
c0013b20:	c3                   	ret    
c0013b21:	90                   	nop

c0013b22 <Device::disableLegacy()>:
c0013b22:	c3                   	ret    
c0013b23:	90                   	nop

c0013b24 <Device::powerSaving(PowerSavingLevel)>:
c0013b24:	c3                   	ret    
c0013b25:	90                   	nop

c0013b26 <DriverlessDevice::close(int, int, void*)>:
c0013b26:	31 c0                	xor    eax,eax
c0013b28:	c3                   	ret    
c0013b29:	90                   	nop

c0013b2a <DriverlessDevice::detect()>:
c0013b2a:	c3                   	ret    
c0013b2b:	90                   	nop

c0013b2c <DriverlessDevice::open(int, int, void*)>:
c0013b2c:	83 ec 18             	sub    esp,0x18
c0013b2f:	68 70 ad 02 c0       	push   0xc002ad70
c0013b34:	e8 aa 64 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0013b39:	83 c8 ff             	or     eax,0xffffffff
c0013b3c:	83 c4 1c             	add    esp,0x1c
c0013b3f:	c3                   	ret    

c0013b40 <Device::~Device()>:
c0013b40:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c0013b45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b49:	89 10                	mov    DWORD PTR [eax],edx
c0013b4b:	90                   	nop
c0013b4c:	c3                   	ret    
c0013b4d:	90                   	nop

c0013b4e <Device::~Device()>:
c0013b4e:	83 ec 0c             	sub    esp,0xc
c0013b51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b55:	e8 e6 ff ff ff       	call   c0013b40 <Device::~Device()>
c0013b5a:	83 c4 04             	add    esp,0x4
c0013b5d:	83 ec 08             	sub    esp,0x8
c0013b60:	68 58 01 00 00       	push   0x158
c0013b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b69:	e8 f3 eb ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0013b6e:	83 c4 10             	add    esp,0x10
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <Device::findAndLoadDriver()>:
c0013b76:	c7 44 24 04 8e ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ad8e
c0013b7e:	e9 b6 ec ff ff       	jmp    c0012839 <Dbg::kprintf(char const*, ...)>
c0013b83:	90                   	nop

c0013b84 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013b84:	57                   	push   edi
c0013b85:	b9 09 00 00 00       	mov    ecx,0x9
c0013b8a:	56                   	push   esi
c0013b8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013b8f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013b93:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013b9d:	81 c7 18 01 00 00    	add    edi,0x118
c0013ba3:	fc                   	cld    
c0013ba4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ba6:	5e                   	pop    esi
c0013ba7:	5f                   	pop    edi
c0013ba8:	c3                   	ret    
c0013ba9:	90                   	nop

c0013baa <Device::preOpenACPI(void*, char*, char*)>:
c0013baa:	57                   	push   edi
c0013bab:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013bb0:	56                   	push   esi
c0013bb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013bc3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013bc9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013bcf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bd5:	b9 0e 00 00 00       	mov    ecx,0xe
c0013bda:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013be0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013be4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013be6:	5e                   	pop    esi
c0013be7:	5f                   	pop    edi
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bee:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013bf3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013bfa:	75 0b                	jne    c0013c07 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bfe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c02:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c05:	eb 1e                	jmp    c0013c25 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c07:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0013c0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c12:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c18:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c1a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c22:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c25:	ff e0                	jmp    eax
c0013c27:	90                   	nop

c0013c28 <Device::getParent()>:
c0013c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c2c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c38:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c3d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c44:	75 0b                	jne    c0013c51 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c48:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c4c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c4f:	eb 1e                	jmp    c0013c6f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c51:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0013c56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c5c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c62:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c6c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013c6f:	ff e0                	jmp    eax
c0013c71:	90                   	nop

c0013c72 <Device::addChild(Device*)>:
c0013c72:	53                   	push   ebx
c0013c73:	83 ec 08             	sub    esp,0x8
c0013c76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c7e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013c84:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013c8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013c8c:	85 d2                	test   edx,edx
c0013c8e:	74 04                	je     c0013c94 <Device::addChild(Device*)+0x22>
c0013c90:	89 d3                	mov    ebx,edx
c0013c92:	eb f6                	jmp    c0013c8a <Device::addChild(Device*)+0x18>
c0013c94:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	6a 08                	push   0x8
c0013c9c:	e8 f8 b8 ff ff       	call   c000f599 <malloc>
c0013ca1:	89 03                	mov    DWORD PTR [ebx],eax
c0013ca3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ca9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cb0:	83 c4 18             	add    esp,0x18
c0013cb3:	5b                   	pop    ebx
c0013cb4:	c3                   	ret    
c0013cb5:	90                   	nop

c0013cb6 <Device::removeAllChildren()>:
c0013cb6:	56                   	push   esi
c0013cb7:	53                   	push   ebx
c0013cb8:	52                   	push   edx
c0013cb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cbd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013cc3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cc6:	74 17                	je     c0013cdf <Device::removeAllChildren()+0x29>
c0013cc8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ccb:	85 c0                	test   eax,eax
c0013ccd:	74 0c                	je     c0013cdb <Device::removeAllChildren()+0x25>
c0013ccf:	83 ec 0c             	sub    esp,0xc
c0013cd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cd4:	50                   	push   eax
c0013cd5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdd:	eb e4                	jmp    c0013cc3 <Device::removeAllChildren()+0xd>
c0013cdf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ceb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf8:	58                   	pop    eax
c0013cf9:	5b                   	pop    ebx
c0013cfa:	5e                   	pop    esi
c0013cfb:	c3                   	ret    

c0013cfc <Device::hibernateAll()>:
c0013cfc:	53                   	push   ebx
c0013cfd:	83 ec 14             	sub    esp,0x14
c0013d00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d06:	53                   	push   ebx
c0013d07:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d10:	83 c4 10             	add    esp,0x10
c0013d13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d16:	74 0f                	je     c0013d27 <Device::hibernateAll()+0x2b>
c0013d18:	83 ec 0c             	sub    esp,0xc
c0013d1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d1e:	e8 d9 ff ff ff       	call   c0013cfc <Device::hibernateAll()>
c0013d23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d25:	eb e9                	jmp    c0013d10 <Device::hibernateAll()+0x14>
c0013d27:	83 c4 08             	add    esp,0x8
c0013d2a:	5b                   	pop    ebx
c0013d2b:	c3                   	ret    

c0013d2c <Device::wakeAll()>:
c0013d2c:	53                   	push   ebx
c0013d2d:	83 ec 14             	sub    esp,0x14
c0013d30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d36:	53                   	push   ebx
c0013d37:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d46:	74 0f                	je     c0013d57 <Device::wakeAll()+0x2b>
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4e:	e8 d9 ff ff ff       	call   c0013d2c <Device::wakeAll()>
c0013d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d55:	eb e9                	jmp    c0013d40 <Device::wakeAll()+0x14>
c0013d57:	83 c4 08             	add    esp,0x8
c0013d5a:	5b                   	pop    ebx
c0013d5b:	c3                   	ret    

c0013d5c <Device::detectAll()>:
c0013d5c:	53                   	push   ebx
c0013d5d:	83 ec 14             	sub    esp,0x14
c0013d60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d66:	53                   	push   ebx
c0013d67:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013d6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d76:	74 0f                	je     c0013d87 <Device::detectAll()+0x2b>
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d7e:	e8 d9 ff ff ff       	call   c0013d5c <Device::detectAll()>
c0013d83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d85:	eb e9                	jmp    c0013d70 <Device::detectAll()+0x14>
c0013d87:	83 c4 08             	add    esp,0x8
c0013d8a:	5b                   	pop    ebx
c0013d8b:	c3                   	ret    

c0013d8c <Device::disableLegacyAll()>:
c0013d8c:	53                   	push   ebx
c0013d8d:	83 ec 14             	sub    esp,0x14
c0013d90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d96:	53                   	push   ebx
c0013d97:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013d9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da6:	74 0f                	je     c0013db7 <Device::disableLegacyAll()+0x2b>
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dae:	e8 d9 ff ff ff       	call   c0013d8c <Device::disableLegacyAll()>
c0013db3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013db5:	eb e9                	jmp    c0013da0 <Device::disableLegacyAll()+0x14>
c0013db7:	83 c4 08             	add    esp,0x8
c0013dba:	5b                   	pop    ebx
c0013dbb:	c3                   	ret    

c0013dbc <Device::loadDriversForAll()>:
c0013dbc:	53                   	push   ebx
c0013dbd:	83 ec 08             	sub    esp,0x8
c0013dc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dc4:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013dcb:	75 0c                	jne    c0013dd9 <Device::loadDriversForAll()+0x1d>
c0013dcd:	83 ec 0c             	sub    esp,0xc
c0013dd0:	53                   	push   ebx
c0013dd1:	e8 a0 fd ff ff       	call   c0013b76 <Device::findAndLoadDriver()>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ddf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de2:	74 12                	je     c0013df6 <Device::loadDriversForAll()+0x3a>
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dea:	e8 cd ff ff ff       	call   c0013dbc <Device::loadDriversForAll()>
c0013def:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df1:	83 c4 10             	add    esp,0x10
c0013df4:	eb e9                	jmp    c0013ddf <Device::loadDriversForAll()+0x23>
c0013df6:	83 c4 08             	add    esp,0x8
c0013df9:	5b                   	pop    ebx
c0013dfa:	c3                   	ret    
c0013dfb:	90                   	nop

c0013dfc <Device::closeAll()>:
c0013dfc:	53                   	push   ebx
c0013dfd:	83 ec 08             	sub    esp,0x8
c0013e00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e06:	6a 00                	push   0x0
c0013e08:	6a 00                	push   0x0
c0013e0a:	6a 00                	push   0x0
c0013e0c:	53                   	push   ebx
c0013e0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1c:	74 0f                	je     c0013e2d <Device::closeAll()+0x31>
c0013e1e:	83 ec 0c             	sub    esp,0xc
c0013e21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e24:	e8 d3 ff ff ff       	call   c0013dfc <Device::closeAll()>
c0013e29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2b:	eb e9                	jmp    c0013e16 <Device::closeAll()+0x1a>
c0013e2d:	83 c4 08             	add    esp,0x8
c0013e30:	5b                   	pop    ebx
c0013e31:	c3                   	ret    

c0013e32 <Device::powerSavingAll(PowerSavingLevel)>:
c0013e32:	56                   	push   esi
c0013e33:	53                   	push   ebx
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e3b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e41:	56                   	push   esi
c0013e42:	53                   	push   ebx
c0013e43:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e46:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e52:	74 0f                	je     c0013e63 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e54:	52                   	push   edx
c0013e55:	52                   	push   edx
c0013e56:	56                   	push   esi
c0013e57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e5a:	e8 d3 ff ff ff       	call   c0013e32 <Device::powerSavingAll(PowerSavingLevel)>
c0013e5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e61:	eb e9                	jmp    c0013e4c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013e63:	58                   	pop    eax
c0013e64:	5b                   	pop    ebx
c0013e65:	5e                   	pop    esi
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <Device::setName(char const*)>:
c0013e68:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013e70:	e9 97 c9 fe ff       	jmp    c000080c <strcpy>
c0013e75:	90                   	nop

c0013e76 <Device::Device(char const*)>:
c0013e76:	83 ec 1c             	sub    esp,0x1c
c0013e79:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c0013e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e82:	89 10                	mov    DWORD PTR [eax],edx
c0013e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e88:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e96:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ebc:	83 ec 08             	sub    esp,0x8
c0013ebf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec7:	e8 9c ff ff ff       	call   c0013e68 <Device::setName(char const*)>
c0013ecc:	83 c4 10             	add    esp,0x10
c0013ecf:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ed7:	83 ec 0c             	sub    esp,0xc
c0013eda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ede:	e8 b6 b6 ff ff       	call   c000f599 <malloc>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013eec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ef3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ef7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f01:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f11:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f22:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f38:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f46:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f54:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f62:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013f6c:	90                   	nop
c0013f6d:	83 c4 1c             	add    esp,0x1c
c0013f70:	c3                   	ret    
c0013f71:	90                   	nop

c0013f72 <Device::getName()>:
c0013f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f76:	05 d0 00 00 00       	add    eax,0xd0
c0013f7b:	c3                   	ret    

c0013f7c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f83:	83 ec 08             	sub    esp,0x8
c0013f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8a:	50                   	push   eax
c0013f8b:	e8 e6 fe ff ff       	call   c0013e76 <Device::Device(char const*)>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	ba fc ad 02 c0       	mov    edx,0xc002adfc
c0013f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9c:	89 10                	mov    DWORD PTR [eax],edx
c0013f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fac:	90                   	nop
c0013fad:	83 c4 0c             	add    esp,0xc
c0013fb0:	c3                   	ret    
c0013fb1:	90                   	nop

c0013fb2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013fb2:	57                   	push   edi
c0013fb3:	56                   	push   esi
c0013fb4:	53                   	push   ebx
c0013fb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fb9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fc1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013fc7:	75 0c                	jne    c0013fd5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013fc9:	52                   	push   edx
c0013fca:	52                   	push   edx
c0013fcb:	53                   	push   ebx
c0013fcc:	56                   	push   esi
c0013fcd:	e8 ae 48 01 00       	call   c0028880 <LinkedList<Device>::addElement(Device*)>
c0013fd2:	83 c4 10             	add    esp,0x10
c0013fd5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fdb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fde:	74 12                	je     c0013ff2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013fe0:	50                   	push   eax
c0013fe1:	57                   	push   edi
c0013fe2:	56                   	push   esi
c0013fe3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe6:	e8 c7 ff ff ff       	call   c0013fb2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013feb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	eb e9                	jmp    c0013fdb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ff2:	5b                   	pop    ebx
c0013ff3:	5e                   	pop    esi
c0013ff4:	5f                   	pop    edi
c0013ff5:	c3                   	ret    

c0013ff6 <getDevicesOfType(DeviceType)>:
c0013ff6:	53                   	push   ebx
c0013ff7:	83 ec 14             	sub    esp,0x14
c0013ffa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ffe:	53                   	push   ebx
c0013fff:	e8 58 49 01 00       	call   c002895c <LinkedList<Device>::LinkedList()>
c0014004:	83 c4 0c             	add    esp,0xc
c0014007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001400b:	53                   	push   ebx
c001400c:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c0014012:	e8 9b ff ff ff       	call   c0013fb2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014017:	89 d8                	mov    eax,ebx
c0014019:	83 c4 18             	add    esp,0x18
c001401c:	5b                   	pop    ebx
c001401d:	c2 04 00             	ret    0x4

c0014020 <HardDiskController::HardDiskController(char const*)>:
c0014020:	83 ec 0c             	sub    esp,0xc
c0014023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014027:	83 ec 08             	sub    esp,0x8
c001402a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001402e:	50                   	push   eax
c001402f:	e8 42 fe ff ff       	call   c0013e76 <Device::Device(char const*)>
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c001403c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014040:	89 10                	mov    DWORD PTR [eax],edx
c0014042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014046:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014050:	90                   	nop
c0014051:	83 c4 0c             	add    esp,0xc
c0014054:	c3                   	ret    
c0014055:	90                   	nop

c0014056 <HardDiskController::~HardDiskController()>:
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	89 10                	mov    DWORD PTR [eax],edx
c0014064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	50                   	push   eax
c001406c:	e8 cf fa ff ff       	call   c0013b40 <Device::~Device()>
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	90                   	nop
c0014075:	83 c4 0c             	add    esp,0xc
c0014078:	c3                   	ret    
c0014079:	90                   	nop

c001407a <HardDiskController::~HardDiskController()>:
c001407a:	83 ec 0c             	sub    esp,0xc
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014084:	e8 cd ff ff ff       	call   c0014056 <HardDiskController::~HardDiskController()>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	83 ec 08             	sub    esp,0x8
c001408f:	68 58 01 00 00       	push   0x158
c0014094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014098:	e8 c4 e6 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	83 c4 0c             	add    esp,0xc
c00140a3:	c3                   	ret    

c00140a4 <PhysicalDisk::eject()>:
c00140a4:	83 c8 ff             	or     eax,0xffffffff
c00140a7:	c3                   	ret    

c00140a8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140af:	83 ec 08             	sub    esp,0x8
c00140b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b6:	50                   	push   eax
c00140b7:	e8 ba fd ff ff       	call   c0013e76 <Device::Device(char const*)>
c00140bc:	83 c4 10             	add    esp,0x10
c00140bf:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c00140c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c8:	89 10                	mov    DWORD PTR [eax],edx
c00140ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ce:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00140d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00140e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00140ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00140fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014100:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001410a:	90                   	nop
c001410b:	83 c4 0c             	add    esp,0xc
c001410e:	c3                   	ret    
c001410f:	90                   	nop

c0014110 <PhysicalDisk::startCache()>:
c0014110:	56                   	push   esi
c0014111:	53                   	push   ebx
c0014112:	83 ec 10             	sub    esp,0x10
c0014115:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014119:	6a 44                	push   0x44
c001411b:	e8 79 b4 ff ff       	call   c000f599 <malloc>
c0014120:	89 c6                	mov    esi,eax
c0014122:	58                   	pop    eax
c0014123:	5a                   	pop    edx
c0014124:	53                   	push   ebx
c0014125:	56                   	push   esi
c0014126:	e8 71 28 00 00       	call   c001699c <VCache::VCache(PhysicalDisk*)>
c001412b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014131:	83 c4 14             	add    esp,0x14
c0014134:	5b                   	pop    ebx
c0014135:	5e                   	pop    esi
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <PhysicalDisk::~PhysicalDisk()>:
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c0014140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014144:	89 10                	mov    DWORD PTR [eax],edx
c0014146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	50                   	push   eax
c001414e:	e8 ed f9 ff ff       	call   c0013b40 <Device::~Device()>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	90                   	nop
c0014157:	83 c4 0c             	add    esp,0xc
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <PhysicalDisk::~PhysicalDisk()>:
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014166:	e8 cd ff ff ff       	call   c0014138 <PhysicalDisk::~PhysicalDisk()>
c001416b:	83 c4 10             	add    esp,0x10
c001416e:	83 ec 08             	sub    esp,0x8
c0014171:	68 6c 01 00 00       	push   0x16c
c0014176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001417a:	e8 e2 e5 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	83 c4 0c             	add    esp,0xc
c0014185:	c3                   	ret    

c0014186 <FPU::FPU(char const*)>:
c0014186:	83 ec 0c             	sub    esp,0xc
c0014189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418d:	83 ec 08             	sub    esp,0x8
c0014190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014194:	50                   	push   eax
c0014195:	e8 dc fc ff ff       	call   c0013e76 <Device::Device(char const*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	ba 98 ae 02 c0       	mov    edx,0xc002ae98
c00141a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a6:	89 10                	mov    DWORD PTR [eax],edx
c00141a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ac:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00141b6:	90                   	nop
c00141b7:	83 c4 0c             	add    esp,0xc
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <FPU::~FPU()>:
c00141bc:	83 ec 0c             	sub    esp,0xc
c00141bf:	ba 98 ae 02 c0       	mov    edx,0xc002ae98
c00141c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c8:	89 10                	mov    DWORD PTR [eax],edx
c00141ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ce:	83 ec 0c             	sub    esp,0xc
c00141d1:	50                   	push   eax
c00141d2:	e8 69 f9 ff ff       	call   c0013b40 <Device::~Device()>
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	90                   	nop
c00141db:	83 c4 0c             	add    esp,0xc
c00141de:	c3                   	ret    
c00141df:	90                   	nop

c00141e0 <FPU::~FPU()>:
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	83 ec 0c             	sub    esp,0xc
c00141e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ea:	e8 cd ff ff ff       	call   c00141bc <FPU::~FPU()>
c00141ef:	83 c4 10             	add    esp,0x10
c00141f2:	83 ec 08             	sub    esp,0x8
c00141f5:	68 58 01 00 00       	push   0x158
c00141fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fe:	e8 5e e5 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0014203:	83 c4 10             	add    esp,0x10
c0014206:	83 c4 0c             	add    esp,0xc
c0014209:	c3                   	ret    

c001420a <setupFPU()>:
c001420a:	53                   	push   ebx
c001420b:	83 ec 08             	sub    esp,0x8
c001420e:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c0014214:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001421b:	74 19                	je     c0014236 <setupFPU()+0x2c>
c001421d:	83 ec 0c             	sub    esp,0xc
c0014220:	68 58 01 00 00       	push   0x158
c0014225:	e8 6f b3 ff ff       	call   c000f599 <malloc>
c001422a:	89 c3                	mov    ebx,eax
c001422c:	89 04 24             	mov    DWORD PTR [esp],eax
c001422f:	e8 90 12 01 00       	call   c00254c4 <AVX::AVX()>
c0014234:	eb 5b                	jmp    c0014291 <setupFPU()+0x87>
c0014236:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001423c:	84 c0                	test   al,al
c001423e:	79 19                	jns    c0014259 <setupFPU()+0x4f>
c0014240:	83 ec 0c             	sub    esp,0xc
c0014243:	68 58 01 00 00       	push   0x158
c0014248:	e8 4c b3 ff ff       	call   c000f599 <malloc>
c001424d:	89 c3                	mov    ebx,eax
c001424f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014252:	e8 93 13 01 00       	call   c00255ea <SSE::SSE()>
c0014257:	eb 38                	jmp    c0014291 <setupFPU()+0x87>
c0014259:	a8 20                	test   al,0x20
c001425b:	74 19                	je     c0014276 <setupFPU()+0x6c>
c001425d:	83 ec 0c             	sub    esp,0xc
c0014260:	68 58 01 00 00       	push   0x158
c0014265:	e8 2f b3 ff ff       	call   c000f599 <malloc>
c001426a:	89 c3                	mov    ebx,eax
c001426c:	89 04 24             	mov    DWORD PTR [esp],eax
c001426f:	e8 e0 12 01 00       	call   c0025554 <MMX::MMX()>
c0014274:	eb 1b                	jmp    c0014291 <setupFPU()+0x87>
c0014276:	a8 10                	test   al,0x10
c0014278:	74 1c                	je     c0014296 <setupFPU()+0x8c>
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	68 58 01 00 00       	push   0x158
c0014282:	e8 12 b3 ff ff       	call   c000f599 <malloc>
c0014287:	89 c3                	mov    ebx,eax
c0014289:	89 04 24             	mov    DWORD PTR [esp],eax
c001428c:	e8 e7 13 01 00       	call   c0025678 <x87::x87()>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	eb 24                	jmp    c00142ba <setupFPU()+0xb0>
c0014296:	83 e0 ef             	and    eax,0xffffffef
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142a2:	68 84 ae 02 c0       	push   0xc002ae84
c00142a7:	e8 8d e5 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00142ac:	0f 20 c0             	mov    eax,cr0
c00142af:	83 c8 04             	or     eax,0x4
c00142b2:	0f 22 c0             	mov    cr0,eax
c00142b5:	31 db                	xor    ebx,ebx
c00142b7:	83 c4 10             	add    esp,0x10
c00142ba:	89 d8                	mov    eax,ebx
c00142bc:	83 c4 08             	add    esp,0x8
c00142bf:	5b                   	pop    ebx
c00142c0:	c3                   	ret    
c00142c1:	90                   	nop

c00142c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00142c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142ca:	c1 e0 04             	shl    eax,0x4
c00142cd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00142d1:	8d 50 10             	lea    edx,[eax+0x10]
c00142d4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00142da:	74 08                	je     c00142e4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00142dc:	83 c0 04             	add    eax,0x4
c00142df:	39 d0                	cmp    eax,edx
c00142e1:	75 f1                	jne    c00142d4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00142e3:	c3                   	ret    
c00142e4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142ee:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142f8:	eb e2                	jmp    c00142dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00142fa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00142fa:	57                   	push   edi
c00142fb:	31 c0                	xor    eax,eax
c00142fd:	56                   	push   esi
c00142fe:	53                   	push   ebx
c00142ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014303:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014307:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001430b:	89 da                	mov    edx,ebx
c001430d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014311:	c1 e2 04             	shl    edx,0x4
c0014314:	01 ca                	add    edx,ecx
c0014316:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001431e:	74 16                	je     c0014336 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014320:	40                   	inc    eax
c0014321:	83 f8 04             	cmp    eax,0x4
c0014324:	75 f0                	jne    c0014316 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014326:	c7 44 24 10 c8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aec8
c001432e:	5b                   	pop    ebx
c001432f:	5e                   	pop    esi
c0014330:	5f                   	pop    edi
c0014331:	e9 ad 5c 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c0014336:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014339:	8d 04 81             	lea    eax,[ecx+eax*4]
c001433c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014342:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014348:	5b                   	pop    ebx
c0014349:	5e                   	pop    esi
c001434a:	5f                   	pop    edi
c001434b:	c3                   	ret    

c001434c <doubleFault(regs*, void*)>:
c001434c:	55                   	push   ebp
c001434d:	89 e5                	mov    ebp,esp
c001434f:	83 ec 08             	sub    esp,0x8
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	68 d5 ae 02 c0       	push   0xc002aed5
c001435a:	e8 84 5c 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c001435f:	83 c4 10             	add    esp,0x10
c0014362:	90                   	nop
c0014363:	c9                   	leave  
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014366:	56                   	push   esi
c0014367:	53                   	push   ebx
c0014368:	50                   	push   eax
c0014369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001436d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014371:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014376:	75 35                	jne    c00143ad <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014378:	8d 43 20             	lea    eax,[ebx+0x20]
c001437b:	31 d2                	xor    edx,edx
c001437d:	89 c1                	mov    ecx,eax
c001437f:	c1 e1 04             	shl    ecx,0x4
c0014382:	01 f1                	add    ecx,esi
c0014384:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001438c:	74 3e                	je     c00143cc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001438e:	42                   	inc    edx
c001438f:	83 fa 04             	cmp    edx,0x4
c0014392:	75 f0                	jne    c0014384 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014394:	83 ec 0c             	sub    esp,0xc
c0014397:	68 ef ae 02 c0       	push   0xc002aeef
c001439c:	e8 42 5c 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00143a1:	83 c4 10             	add    esp,0x10
c00143a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143a9:	5a                   	pop    edx
c00143aa:	5b                   	pop    ebx
c00143ab:	5e                   	pop    esi
c00143ac:	c3                   	ret    
c00143ad:	83 ec 0c             	sub    esp,0xc
c00143b0:	56                   	push   esi
c00143b1:	e8 bc fb ff ff       	call   c0013f72 <Device::getName()>
c00143b6:	83 c4 10             	add    esp,0x10
c00143b9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143bc:	75 ba                	jne    c0014378 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143be:	83 fb 0f             	cmp    ebx,0xf
c00143c1:	7f 29                	jg     c00143ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00143c3:	0f b6 9b c0 cf 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3040]
c00143ca:	eb ac                	jmp    c0014378 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143cc:	8d 04 82             	lea    eax,[edx+eax*4]
c00143cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143d3:	8d 04 86             	lea    eax,[esi+eax*4]
c00143d6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00143dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143e0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00143e6:	89 d8                	mov    eax,ebx
c00143e8:	5a                   	pop    edx
c00143e9:	5b                   	pop    ebx
c00143ea:	5e                   	pop    esi
c00143eb:	c3                   	ret    
c00143ec:	83 ec 0c             	sub    esp,0xc
c00143ef:	68 e2 ae 02 c0       	push   0xc002aee2
c00143f4:	e8 ea 5b 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	e9 77 ff ff ff       	jmp    c0014378 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014401:	90                   	nop

c0014402 <InterruptController::clearAllHandlers(int, bool)>:
c0014402:	56                   	push   esi
c0014403:	53                   	push   ebx
c0014404:	52                   	push   edx
c0014405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014409:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001440d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014412:	75 61                	jne    c0014475 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014414:	8d 46 20             	lea    eax,[esi+0x20]
c0014417:	c1 e6 04             	shl    esi,0x4
c001441a:	c1 e0 04             	shl    eax,0x4
c001441d:	01 de                	add    esi,ebx
c001441f:	01 d8                	add    eax,ebx
c0014421:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001442b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014435:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001443f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014449:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014453:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001445d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014467:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014471:	58                   	pop    eax
c0014472:	5b                   	pop    ebx
c0014473:	5e                   	pop    esi
c0014474:	c3                   	ret    
c0014475:	83 ec 0c             	sub    esp,0xc
c0014478:	53                   	push   ebx
c0014479:	e8 f4 fa ff ff       	call   c0013f72 <Device::getName()>
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014484:	75 8e                	jne    c0014414 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014486:	83 fe 0f             	cmp    esi,0xf
c0014489:	7f 09                	jg     c0014494 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001448b:	0f b6 b6 c0 cf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3040]
c0014492:	eb 80                	jmp    c0014414 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	68 fc ae 02 c0       	push   0xc002aefc
c001449c:	e8 42 5b 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	e9 6b ff ff ff       	jmp    c0014414 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144a9:	90                   	nop

c00144aa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144aa:	56                   	push   esi
c00144ab:	53                   	push   ebx
c00144ac:	52                   	push   edx
c00144ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144b5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144ba:	75 3a                	jne    c00144f6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00144bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144c0:	8d 50 20             	lea    edx,[eax+0x20]
c00144c3:	c1 e2 04             	shl    edx,0x4
c00144c6:	8d 04 16             	lea    eax,[esi+edx*1]
c00144c9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00144cd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00144d3:	74 0b                	je     c00144e0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00144d5:	83 c0 04             	add    eax,0x4
c00144d8:	39 d0                	cmp    eax,edx
c00144da:	75 f1                	jne    c00144cd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00144dc:	58                   	pop    eax
c00144dd:	5b                   	pop    ebx
c00144de:	5e                   	pop    esi
c00144df:	c3                   	ret    
c00144e0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144ea:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144f4:	eb df                	jmp    c00144d5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00144f6:	83 ec 0c             	sub    esp,0xc
c00144f9:	56                   	push   esi
c00144fa:	e8 73 fa ff ff       	call   c0013f72 <Device::getName()>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014505:	75 b5                	jne    c00144bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014507:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001450c:	7f 11                	jg     c001451f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001450e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014512:	0f b6 80 c0 cf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3040]
c0014519:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001451d:	eb 9d                	jmp    c00144bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	68 09 af 02 c0       	push   0xc002af09
c0014527:	e8 b7 5a 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	eb 8b                	jmp    c00144bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014531 <nmiHandler(regs*, void*)>:
c0014531:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0014536:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001453a:	e9 c1 a7 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c001453f <int_handler>:
c001453f:	55                   	push   ebp
c0014540:	57                   	push   edi
c0014541:	56                   	push   esi
c0014542:	53                   	push   ebx
c0014543:	83 ec 0c             	sub    esp,0xc
c0014546:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001454a:	80 3d a4 08 03 c0 00 	cmp    BYTE PTR ds:0xc00308a4,0x0
c0014551:	74 0b                	je     c001455e <int_handler+0x1f>
c0014553:	fa                   	cli    
c0014554:	f4                   	hlt    
c0014555:	80 3d a4 08 03 c0 00 	cmp    BYTE PTR ds:0xc00308a4,0x0
c001455c:	75 f5                	jne    c0014553 <int_handler+0x14>
c001455e:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0014563:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014566:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001456c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014572:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014575:	83 f8 17             	cmp    eax,0x17
c0014578:	77 13                	ja     c001458d <int_handler+0x4e>
c001457a:	83 ec 08             	sub    esp,0x8
c001457d:	8b 17                	mov    edx,DWORD PTR [edi]
c001457f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014582:	0f b6 c0             	movzx  eax,al
c0014585:	50                   	push   eax
c0014586:	57                   	push   edi
c0014587:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	83 c3 15             	add    ebx,0x15
c0014590:	c1 e3 04             	shl    ebx,0x4
c0014593:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014597:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001459e:	31 db                	xor    ebx,ebx
c00145a0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145a4:	85 c0                	test   eax,eax
c00145a6:	74 13                	je     c00145bb <int_handler+0x7c>
c00145a8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145ab:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00145af:	74 1c                	je     c00145cd <int_handler+0x8e>
c00145b1:	83 ec 08             	sub    esp,0x8
c00145b4:	52                   	push   edx
c00145b5:	56                   	push   esi
c00145b6:	ff d0                	call   eax
c00145b8:	83 c4 10             	add    esp,0x10
c00145bb:	43                   	inc    ebx
c00145bc:	83 fb 04             	cmp    ebx,0x4
c00145bf:	75 df                	jne    c00145a0 <int_handler+0x61>
c00145c1:	83 c4 0c             	add    esp,0xc
c00145c4:	31 c0                	xor    eax,eax
c00145c6:	5b                   	pop    ebx
c00145c7:	31 d2                	xor    edx,edx
c00145c9:	5e                   	pop    esi
c00145ca:	5f                   	pop    edi
c00145cb:	5d                   	pop    ebp
c00145cc:	c3                   	ret    
c00145cd:	83 ec 08             	sub    esp,0x8
c00145d0:	52                   	push   edx
c00145d1:	56                   	push   esi
c00145d2:	ff d0                	call   eax
c00145d4:	83 c4 10             	add    esp,0x10
c00145d7:	83 c4 0c             	add    esp,0xc
c00145da:	5b                   	pop    ebx
c00145db:	5e                   	pop    esi
c00145dc:	5f                   	pop    edi
c00145dd:	5d                   	pop    ebp
c00145de:	c3                   	ret    
c00145df:	90                   	nop

c00145e0 <InterruptController::InterruptController(char const*)>:
c00145e0:	83 ec 1c             	sub    esp,0x1c
c00145e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e7:	83 ec 08             	sub    esp,0x8
c00145ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145ee:	50                   	push   eax
c00145ef:	e8 82 f8 ff ff       	call   c0013e76 <Device::Device(char const*)>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c00145fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014600:	89 10                	mov    DWORD PTR [eax],edx
c0014602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014606:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014610:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014618:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014620:	7f 5e                	jg     c0014680 <InterruptController::InterruptController(char const*)+0xa0>
c0014622:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001462a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001462f:	7f 49                	jg     c001467a <InterruptController::InterruptController(char const*)+0x9a>
c0014631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014635:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014639:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014644:	01 ca                	add    edx,ecx
c0014646:	83 c2 54             	add    edx,0x54
c0014649:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014659:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014664:	01 ca                	add    edx,ecx
c0014666:	81 c2 54 04 00 00    	add    edx,0x454
c001466c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014674:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014678:	eb b0                	jmp    c001462a <InterruptController::InterruptController(char const*)+0x4a>
c001467a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001467e:	eb 98                	jmp    c0014618 <InterruptController::InterruptController(char const*)+0x38>
c0014680:	90                   	nop
c0014681:	83 c4 1c             	add    esp,0x1c
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <InterruptController::~InterruptController()>:
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c001468e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014692:	89 10                	mov    DWORD PTR [eax],edx
c0014694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	50                   	push   eax
c001469c:	e8 9f f4 ff ff       	call   c0013b40 <Device::~Device()>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	90                   	nop
c00146a5:	83 c4 0c             	add    esp,0xc
c00146a8:	c3                   	ret    
c00146a9:	90                   	nop

c00146aa <InterruptController::~InterruptController()>:
c00146aa:	83 ec 0c             	sub    esp,0xc
c00146ad:	83 ec 0c             	sub    esp,0xc
c00146b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b4:	e8 cd ff ff ff       	call   c0014686 <InterruptController::~InterruptController()>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	83 ec 08             	sub    esp,0x8
c00146bf:	68 58 21 00 00       	push   0x2158
c00146c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c8:	e8 94 e0 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	83 c4 0c             	add    esp,0xc
c00146d3:	c3                   	ret    

c00146d4 <displayDebugInfo(regs*)>:
c00146d4:	55                   	push   ebp
c00146d5:	57                   	push   edi
c00146d6:	56                   	push   esi
c00146d7:	53                   	push   ebx
c00146d8:	83 ec 24             	sub    esp,0x24
c00146db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00146df:	0f 20 c2             	mov    edx,cr0
c00146e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00146e6:	0f 20 d7             	mov    edi,cr2
c00146e9:	0f 20 de             	mov    esi,cr3
c00146ec:	0f 20 e5             	mov    ebp,cr4
c00146ef:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00146f2:	68 16 af 02 c0       	push   0xc002af16
c00146f7:	e8 3d e1 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00146fc:	59                   	pop    ecx
c00146fd:	58                   	pop    eax
c00146fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014701:	68 21 af 02 c0       	push   0xc002af21
c0014706:	e8 2e e1 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001470b:	58                   	pop    eax
c001470c:	5a                   	pop    edx
c001470d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014710:	68 2c af 02 c0       	push   0xc002af2c
c0014715:	e8 1f e1 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001471a:	59                   	pop    ecx
c001471b:	58                   	pop    eax
c001471c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001471f:	68 37 af 02 c0       	push   0xc002af37
c0014724:	e8 10 e1 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014729:	58                   	pop    eax
c001472a:	5a                   	pop    edx
c001472b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001472e:	68 42 af 02 c0       	push   0xc002af42
c0014733:	e8 01 e1 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014738:	59                   	pop    ecx
c0014739:	58                   	pop    eax
c001473a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001473d:	68 4d af 02 c0       	push   0xc002af4d
c0014742:	e8 f2 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014747:	58                   	pop    eax
c0014748:	5a                   	pop    edx
c0014749:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001474c:	68 58 af 02 c0       	push   0xc002af58
c0014751:	e8 e3 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014756:	59                   	pop    ecx
c0014757:	58                   	pop    eax
c0014758:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001475b:	68 63 af 02 c0       	push   0xc002af63
c0014760:	e8 d4 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014765:	58                   	pop    eax
c0014766:	5a                   	pop    edx
c0014767:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001476a:	68 6e af 02 c0       	push   0xc002af6e
c001476f:	e8 c5 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014774:	59                   	pop    ecx
c0014775:	58                   	pop    eax
c0014776:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014779:	68 7d af 02 c0       	push   0xc002af7d
c001477e:	e8 b6 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014783:	58                   	pop    eax
c0014784:	5a                   	pop    edx
c0014785:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014788:	68 88 af 02 c0       	push   0xc002af88
c001478d:	e8 a7 e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014792:	59                   	pop    ecx
c0014793:	58                   	pop    eax
c0014794:	57                   	push   edi
c0014795:	68 93 af 02 c0       	push   0xc002af93
c001479a:	e8 9a e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001479f:	58                   	pop    eax
c00147a0:	5a                   	pop    edx
c00147a1:	56                   	push   esi
c00147a2:	68 9e af 02 c0       	push   0xc002af9e
c00147a7:	e8 8d e0 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00147ac:	59                   	pop    ecx
c00147ad:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00147b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b8:	e8 96 bb ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00147bd:	58                   	pop    eax
c00147be:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00147c1:	5a                   	pop    edx
c00147c2:	c1 e0 05             	shl    eax,0x5
c00147c5:	05 20 cd 02 c0       	add    eax,0xc002cd20
c00147ca:	50                   	push   eax
c00147cb:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00147d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d6:	e8 85 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147db:	59                   	pop    ecx
c00147dc:	58                   	pop    eax
c00147dd:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00147e2:	68 a9 af 02 c0       	push   0xc002afa9
c00147e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ed:	e8 6e c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147f2:	58                   	pop    eax
c00147f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f8:	5a                   	pop    edx
c00147f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00147fc:	83 c0 0c             	add    eax,0xc
c00147ff:	50                   	push   eax
c0014800:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014805:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480b:	e8 50 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014810:	59                   	pop    ecx
c0014811:	58                   	pop    eax
c0014812:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014817:	68 b2 af 02 c0       	push   0xc002afb2
c001481c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014822:	e8 39 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014827:	58                   	pop    eax
c0014828:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001482d:	5a                   	pop    edx
c001482e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014831:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014837:	e8 de bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001483c:	59                   	pop    ecx
c001483d:	58                   	pop    eax
c001483e:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014843:	68 ba af 02 c0       	push   0xc002afba
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 0d c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014853:	58                   	pop    eax
c0014854:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014859:	5a                   	pop    edx
c001485a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001485d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014863:	e8 b2 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014868:	59                   	pop    ecx
c0014869:	58                   	pop    eax
c001486a:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001486f:	68 c2 af 02 c0       	push   0xc002afc2
c0014874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487a:	e8 e1 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001487f:	58                   	pop    eax
c0014880:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014885:	5a                   	pop    edx
c0014886:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014889:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488f:	e8 86 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014894:	59                   	pop    ecx
c0014895:	58                   	pop    eax
c0014896:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001489b:	68 ca af 02 c0       	push   0xc002afca
c00148a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a6:	e8 b5 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148ab:	58                   	pop    eax
c00148ac:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00148b1:	5a                   	pop    edx
c00148b2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00148b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bb:	e8 5a bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148c0:	59                   	pop    ecx
c00148c1:	58                   	pop    eax
c00148c2:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00148c7:	68 d2 af 02 c0       	push   0xc002afd2
c00148cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d2:	e8 89 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148d7:	58                   	pop    eax
c00148d8:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00148dd:	5a                   	pop    edx
c00148de:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00148e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e7:	e8 2e bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ec:	59                   	pop    ecx
c00148ed:	58                   	pop    eax
c00148ee:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00148f3:	68 da af 02 c0       	push   0xc002afda
c00148f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fe:	e8 5d bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014903:	58                   	pop    eax
c0014904:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014909:	5a                   	pop    edx
c001490a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001490d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014913:	e8 02 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014918:	59                   	pop    ecx
c0014919:	58                   	pop    eax
c001491a:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001491f:	68 e2 af 02 c0       	push   0xc002afe2
c0014924:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492a:	e8 31 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001492f:	58                   	pop    eax
c0014930:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014935:	5a                   	pop    edx
c0014936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001493a:	52                   	push   edx
c001493b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014941:	e8 d4 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014946:	59                   	pop    ecx
c0014947:	58                   	pop    eax
c0014948:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001494d:	68 eb af 02 c0       	push   0xc002afeb
c0014952:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014958:	e8 03 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001495d:	58                   	pop    eax
c001495e:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014963:	5a                   	pop    edx
c0014964:	57                   	push   edi
c0014965:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496b:	e8 aa be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014970:	59                   	pop    ecx
c0014971:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014976:	5f                   	pop    edi
c0014977:	68 f3 af 02 c0       	push   0xc002aff3
c001497c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014982:	e8 d9 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014987:	58                   	pop    eax
c0014988:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001498d:	5a                   	pop    edx
c001498e:	56                   	push   esi
c001498f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014995:	e8 80 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001499a:	59                   	pop    ecx
c001499b:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00149a0:	5e                   	pop    esi
c00149a1:	68 fb af 02 c0       	push   0xc002affb
c00149a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ac:	e8 af be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149b1:	5f                   	pop    edi
c00149b2:	58                   	pop    eax
c00149b3:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00149b8:	55                   	push   ebp
c00149b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bf:	e8 56 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149c4:	58                   	pop    eax
c00149c5:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00149ca:	5a                   	pop    edx
c00149cb:	68 03 b0 02 c0       	push   0xc002b003
c00149d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d6:	e8 85 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149db:	0f 21 c0             	mov    eax,db0
c00149de:	59                   	pop    ecx
c00149df:	5e                   	pop    esi
c00149e0:	50                   	push   eax
c00149e1:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00149e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ec:	e8 29 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149f1:	5f                   	pop    edi
c00149f2:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00149f7:	5d                   	pop    ebp
c00149f8:	68 0c b0 02 c0       	push   0xc002b00c
c00149fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a03:	e8 58 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a08:	0f 21 c8             	mov    eax,db1
c0014a0b:	5a                   	pop    edx
c0014a0c:	59                   	pop    ecx
c0014a0d:	50                   	push   eax
c0014a0e:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a19:	e8 fc bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a1e:	5e                   	pop    esi
c0014a1f:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a24:	5f                   	pop    edi
c0014a25:	68 14 b0 02 c0       	push   0xc002b014
c0014a2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a30:	e8 2b be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a35:	0f 21 d0             	mov    eax,db2
c0014a38:	5d                   	pop    ebp
c0014a39:	5a                   	pop    edx
c0014a3a:	50                   	push   eax
c0014a3b:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a46:	e8 cf bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a4b:	59                   	pop    ecx
c0014a4c:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a51:	5e                   	pop    esi
c0014a52:	68 1c b0 02 c0       	push   0xc002b01c
c0014a57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5d:	e8 fe bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a62:	0f 21 d8             	mov    eax,db3
c0014a65:	5f                   	pop    edi
c0014a66:	5d                   	pop    ebp
c0014a67:	50                   	push   eax
c0014a68:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a73:	e8 a2 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a78:	58                   	pop    eax
c0014a79:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a7e:	5a                   	pop    edx
c0014a7f:	68 24 b0 02 c0       	push   0xc002b024
c0014a84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8a:	e8 d1 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a8f:	0f 21 f0             	mov    eax,db6
c0014a92:	59                   	pop    ecx
c0014a93:	5e                   	pop    esi
c0014a94:	50                   	push   eax
c0014a95:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014a9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa0:	e8 75 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014aa5:	5f                   	pop    edi
c0014aa6:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014aab:	5d                   	pop    ebp
c0014aac:	68 2c b0 02 c0       	push   0xc002b02c
c0014ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab7:	e8 a4 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014abc:	0f 21 f8             	mov    eax,db7
c0014abf:	5a                   	pop    edx
c0014ac0:	59                   	pop    ecx
c0014ac1:	50                   	push   eax
c0014ac2:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014ac7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014acd:	e8 48 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014ad2:	5e                   	pop    esi
c0014ad3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ad6:	e8 84 86 00 00       	call   c001d15f <Thr::getDriverNameFromAddress(unsigned long)>
c0014adb:	83 c4 10             	add    esp,0x10
c0014ade:	85 c0                	test   eax,eax
c0014ae0:	74 7d                	je     c0014b5f <displayDebugInfo(regs*)+0x48b>
c0014ae2:	89 c6                	mov    esi,eax
c0014ae4:	50                   	push   eax
c0014ae5:	50                   	push   eax
c0014ae6:	56                   	push   esi
c0014ae7:	68 34 b0 02 c0       	push   0xc002b034
c0014aec:	e8 48 dd ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014af1:	5a                   	pop    edx
c0014af2:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014af7:	59                   	pop    ecx
c0014af8:	68 42 b0 02 c0       	push   0xc002b042
c0014afd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b03:	e8 58 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014b08:	5f                   	pop    edi
c0014b09:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014b0e:	5d                   	pop    ebp
c0014b0f:	56                   	push   esi
c0014b10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b16:	e8 45 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014b1b:	58                   	pop    eax
c0014b1c:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014b21:	5a                   	pop    edx
c0014b22:	68 4e b0 02 c0       	push   0xc002b04e
c0014b27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2d:	e8 2e bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014b32:	59                   	pop    ecx
c0014b33:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0014b38:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b3e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b41:	e8 50 86 00 00       	call   c001d196 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b46:	5b                   	pop    ebx
c0014b47:	5d                   	pop    ebp
c0014b48:	50                   	push   eax
c0014b49:	57                   	push   edi
c0014b4a:	e8 cb bc ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014b4f:	58                   	pop    eax
c0014b50:	5a                   	pop    edx
c0014b51:	56                   	push   esi
c0014b52:	68 5a b0 02 c0       	push   0xc002b05a
c0014b57:	e8 dd dc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	fa                   	cli    
c0014b60:	f4                   	hlt    
c0014b61:	eb fe                	jmp    c0014b61 <displayDebugInfo(regs*)+0x48d>

c0014b63 <x87EmulHandler(regs*, void*)>:
c0014b63:	83 ec 0c             	sub    esp,0xc
c0014b66:	0f 20 c2             	mov    edx,cr0
c0014b69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b6e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014b72:	75 4b                	jne    c0014bbf <x87EmulHandler(regs*, void*)+0x5c>
c0014b74:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0014b79:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014b7f:	85 c0                	test   eax,eax
c0014b81:	74 05                	je     c0014b88 <x87EmulHandler(regs*, void*)+0x25>
c0014b83:	83 e2 08             	and    edx,0x8
c0014b86:	75 17                	jne    c0014b9f <x87EmulHandler(regs*, void*)+0x3c>
c0014b88:	83 ec 0c             	sub    esp,0xc
c0014b8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b8f:	e8 a1 a9 00 00       	call   c001f535 <Vm::x87Handler(regs*)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	84 c0                	test   al,al
c0014b99:	74 24                	je     c0014bbf <x87EmulHandler(regs*, void*)+0x5c>
c0014b9b:	83 c4 0c             	add    esp,0xc
c0014b9e:	c3                   	ret    
c0014b9f:	83 ec 0c             	sub    esp,0xc
c0014ba2:	68 80 b0 02 c0       	push   0xc002b080
c0014ba7:	e8 8d dc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014bac:	0f 06                	clts   
c0014bae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c0014bbb:	83 c4 0c             	add    esp,0xc
c0014bbe:	c3                   	ret    
c0014bbf:	83 ec 0c             	sub    esp,0xc
c0014bc2:	68 6a b0 02 c0       	push   0xc002b06a
c0014bc7:	e8 6d dc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014bcc:	5a                   	pop    edx
c0014bcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bd1:	e8 fe fa ff ff       	call   c00146d4 <displayDebugInfo(regs*)>

c0014bd6 <gpFault(regs*, void*)>:
c0014bd6:	53                   	push   ebx
c0014bd7:	83 ec 14             	sub    esp,0x14
c0014bda:	c7 05 e4 de 02 c0 0e ea 01 c0 	mov    DWORD PTR ds:0xc002dee4,0xc001ea0e
c0014be4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014be8:	53                   	push   ebx
c0014be9:	e8 20 9e 00 00       	call   c001ea0e <Vm::faultHandler(regs*)>
c0014bee:	83 c4 10             	add    esp,0x10
c0014bf1:	84 c0                	test   al,al
c0014bf3:	74 05                	je     c0014bfa <gpFault(regs*, void*)+0x24>
c0014bf5:	83 c4 08             	add    esp,0x8
c0014bf8:	5b                   	pop    ebx
c0014bf9:	c3                   	ret    
c0014bfa:	83 ec 0c             	sub    esp,0xc
c0014bfd:	68 8d b0 02 c0       	push   0xc002b08d
c0014c02:	e8 32 dc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014c07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c0a:	e8 c5 fa ff ff       	call   c00146d4 <displayDebugInfo(regs*)>

c0014c0f <pgFault(regs*, void*)>:
c0014c0f:	83 ec 18             	sub    esp,0x18
c0014c12:	68 a8 b0 02 c0       	push   0xc002b0a8
c0014c17:	e8 1d dc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014c1c:	0f 20 d0             	mov    eax,cr2
c0014c1f:	5a                   	pop    edx
c0014c20:	59                   	pop    ecx
c0014c21:	50                   	push   eax
c0014c22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014c30:	e8 0b d7 ff ff       	call   c0012340 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	84 c0                	test   al,al
c0014c3a:	74 04                	je     c0014c40 <pgFault(regs*, void*)+0x31>
c0014c3c:	83 c4 0c             	add    esp,0xc
c0014c3f:	c3                   	ret    
c0014c40:	83 ec 0c             	sub    esp,0xc
c0014c43:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014c48:	e8 ec db ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014c4d:	58                   	pop    eax
c0014c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c52:	e8 7d fa ff ff       	call   c00146d4 <displayDebugInfo(regs*)>

c0014c57 <otherISRHandler(regs*, void*)>:
c0014c57:	53                   	push   ebx
c0014c58:	83 ec 0c             	sub    esp,0xc
c0014c5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c5f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c62:	50                   	push   eax
c0014c63:	50                   	push   eax
c0014c64:	68 bf b0 02 c0       	push   0xc002b0bf
c0014c69:	e8 cb db ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014c6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c71:	e8 5e fa ff ff       	call   c00146d4 <displayDebugInfo(regs*)>

c0014c76 <opcodeFault(regs*, void*)>:
c0014c76:	55                   	push   ebp
c0014c77:	89 e5                	mov    ebp,esp
c0014c79:	56                   	push   esi
c0014c7a:	53                   	push   ebx
c0014c7b:	83 ec 40             	sub    esp,0x40
c0014c7e:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0014c83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c89:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014c8f:	84 c0                	test   al,al
c0014c91:	74 24                	je     c0014cb7 <opcodeFault(regs*, void*)+0x41>
c0014c93:	83 ec 0c             	sub    esp,0xc
c0014c96:	68 dc b0 02 c0       	push   0xc002b0dc
c0014c9b:	e8 99 db ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014ca0:	83 c4 10             	add    esp,0x10
c0014ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca9:	8d 50 19             	lea    edx,[eax+0x19]
c0014cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014caf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb2:	e9 d5 05 00 00       	jmp    c001528c <opcodeFault(regs*, void*)+0x616>
c0014cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cbd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cc0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014cc4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cce:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd6:	3c f0                	cmp    al,0xf0
c0014cd8:	75 17                	jne    c0014cf1 <opcodeFault(regs*, void*)+0x7b>
c0014cda:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cec:	e9 da 00 00 00       	jmp    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf6:	3c f2                	cmp    al,0xf2
c0014cf8:	74 09                	je     c0014d03 <opcodeFault(regs*, void*)+0x8d>
c0014cfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfd:	8a 00                	mov    al,BYTE PTR [eax]
c0014cff:	3c f3                	cmp    al,0xf3
c0014d01:	75 1b                	jne    c0014d1e <opcodeFault(regs*, void*)+0xa8>
c0014d03:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d07:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d10:	8d 50 01             	lea    edx,[eax+0x1]
c0014d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d19:	e9 ad 00 00 00       	jmp    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014d1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d21:	8a 00                	mov    al,BYTE PTR [eax]
c0014d23:	3c 66                	cmp    al,0x66
c0014d25:	75 1f                	jne    c0014d46 <opcodeFault(regs*, void*)+0xd0>
c0014d27:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d2b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d2f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d38:	8d 50 01             	lea    edx,[eax+0x1]
c0014d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d41:	e9 85 00 00 00       	jmp    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d49:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4b:	3c 67                	cmp    al,0x67
c0014d4d:	75 18                	jne    c0014d67 <opcodeFault(regs*, void*)+0xf1>
c0014d4f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d53:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d65:	eb 64                	jmp    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014d67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6c:	3c 2e                	cmp    al,0x2e
c0014d6e:	74 09                	je     c0014d79 <opcodeFault(regs*, void*)+0x103>
c0014d70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d73:	8a 00                	mov    al,BYTE PTR [eax]
c0014d75:	3c 3e                	cmp    al,0x3e
c0014d77:	75 18                	jne    c0014d91 <opcodeFault(regs*, void*)+0x11b>
c0014d79:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d7d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d86:	8d 50 01             	lea    edx,[eax+0x1]
c0014d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d8f:	eb 3a                	jmp    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d94:	8a 00                	mov    al,BYTE PTR [eax]
c0014d96:	3c 36                	cmp    al,0x36
c0014d98:	74 1b                	je     c0014db5 <opcodeFault(regs*, void*)+0x13f>
c0014d9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9f:	3c 26                	cmp    al,0x26
c0014da1:	74 12                	je     c0014db5 <opcodeFault(regs*, void*)+0x13f>
c0014da3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da6:	8a 00                	mov    al,BYTE PTR [eax]
c0014da8:	3c 64                	cmp    al,0x64
c0014daa:	74 09                	je     c0014db5 <opcodeFault(regs*, void*)+0x13f>
c0014dac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014daf:	8a 00                	mov    al,BYTE PTR [eax]
c0014db1:	3c 65                	cmp    al,0x65
c0014db3:	75 16                	jne    c0014dcb <opcodeFault(regs*, void*)+0x155>
c0014db5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014db9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dc2:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dce:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd0:	3c 0f                	cmp    al,0xf
c0014dd2:	0f 85 ad 00 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x20f>
c0014dd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ddb:	40                   	inc    eax
c0014ddc:	8a 00                	mov    al,BYTE PTR [eax]
c0014dde:	3c c2                	cmp    al,0xc2
c0014de0:	74 0e                	je     c0014df0 <opcodeFault(regs*, void*)+0x17a>
c0014de2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de5:	40                   	inc    eax
c0014de6:	8a 00                	mov    al,BYTE PTR [eax]
c0014de8:	3c c3                	cmp    al,0xc3
c0014dea:	0f 85 95 00 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x20f>
c0014df0:	83 ec 0c             	sub    esp,0xc
c0014df3:	68 ff b0 02 c0       	push   0xc002b0ff
c0014df8:	e8 3c da ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e06:	8d 50 01             	lea    edx,[eax+0x1]
c0014e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e0f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e15:	8a 00                	mov    al,BYTE PTR [eax]
c0014e17:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1d:	88 10                	mov    BYTE PTR [eax],dl
c0014e1f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e22:	50                   	push   eax
c0014e23:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e26:	50                   	push   eax
c0014e27:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e2a:	50                   	push   eax
c0014e2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e2e:	e8 c9 48 00 00       	call   c00196fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e33:	83 c4 10             	add    esp,0x10
c0014e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e3c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e3f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e42:	01 d0                	add    eax,edx
c0014e44:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e4d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e50:	48                   	dec    eax
c0014e51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e57:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	83 ec 04             	sub    esp,0x4
c0014e63:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e66:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e69:	50                   	push   eax
c0014e6a:	e8 45 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e6f:	83 c4 10             	add    esp,0x10
c0014e72:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e75:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e78:	01 c2                	add    edx,eax
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e80:	e9 07 04 00 00       	jmp    c001528c <opcodeFault(regs*, void*)+0x616>
c0014e85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e88:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8a:	3c 0f                	cmp    al,0xf
c0014e8c:	0f 85 8b 01 00 00    	jne    c001501d <opcodeFault(regs*, void*)+0x3a7>
c0014e92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e95:	40                   	inc    eax
c0014e96:	8a 00                	mov    al,BYTE PTR [eax]
c0014e98:	3c c7                	cmp    al,0xc7
c0014e9a:	0f 86 7d 01 00 00    	jbe    c001501d <opcodeFault(regs*, void*)+0x3a7>
c0014ea0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea3:	40                   	inc    eax
c0014ea4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea6:	3c cf                	cmp    al,0xcf
c0014ea8:	0f 87 6f 01 00 00    	ja     c001501d <opcodeFault(regs*, void*)+0x3a7>
c0014eae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb1:	40                   	inc    eax
c0014eb2:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb4:	83 c0 38             	add    eax,0x38
c0014eb7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014eba:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ebe:	75 0b                	jne    c0014ecb <opcodeFault(regs*, void*)+0x255>
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ec6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ec9:	eb 75                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014ecb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ecf:	75 0b                	jne    c0014edc <opcodeFault(regs*, void*)+0x266>
c0014ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ed7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eda:	eb 64                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014edc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ee0:	75 0b                	jne    c0014eed <opcodeFault(regs*, void*)+0x277>
c0014ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ee8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eeb:	eb 53                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014eed:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ef1:	75 0b                	jne    c0014efe <opcodeFault(regs*, void*)+0x288>
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ef9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014efc:	eb 42                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014efe:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f02:	75 0b                	jne    c0014f0f <opcodeFault(regs*, void*)+0x299>
c0014f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f07:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0d:	eb 31                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014f0f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f13:	75 0b                	jne    c0014f20 <opcodeFault(regs*, void*)+0x2aa>
c0014f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f18:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f1e:	eb 20                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014f20:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f24:	75 0b                	jne    c0014f31 <opcodeFault(regs*, void*)+0x2bb>
c0014f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f29:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f2c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2f:	eb 0f                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014f31:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f35:	75 09                	jne    c0014f40 <opcodeFault(regs*, void*)+0x2ca>
c0014f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f40:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f44:	74 10                	je     c0014f56 <opcodeFault(regs*, void*)+0x2e0>
c0014f46:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f4d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f54:	eb 2d                	jmp    c0014f83 <opcodeFault(regs*, void*)+0x30d>
c0014f56:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f59:	c1 e0 18             	shl    eax,0x18
c0014f5c:	89 c2                	mov    edx,eax
c0014f5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f61:	c1 e0 08             	shl    eax,0x8
c0014f64:	25 00 00 ff 00       	and    eax,0xff0000
c0014f69:	09 c2                	or     edx,eax
c0014f6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f6e:	c1 e8 08             	shr    eax,0x8
c0014f71:	25 00 ff 00 00       	and    eax,0xff00
c0014f76:	09 c2                	or     edx,eax
c0014f78:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f7b:	c1 e8 18             	shr    eax,0x18
c0014f7e:	09 d0                	or     eax,edx
c0014f80:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f83:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f87:	75 0b                	jne    c0014f94 <opcodeFault(regs*, void*)+0x31e>
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f8f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f92:	eb 75                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014f94:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f98:	75 0b                	jne    c0014fa5 <opcodeFault(regs*, void*)+0x32f>
c0014f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fa0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fa3:	eb 64                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014fa5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fa9:	75 0b                	jne    c0014fb6 <opcodeFault(regs*, void*)+0x340>
c0014fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fb4:	eb 53                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014fb6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fba:	75 0b                	jne    c0014fc7 <opcodeFault(regs*, void*)+0x351>
c0014fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fc5:	eb 42                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014fc7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fcb:	75 0b                	jne    c0014fd8 <opcodeFault(regs*, void*)+0x362>
c0014fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014fd6:	eb 31                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014fd8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fdc:	75 0b                	jne    c0014fe9 <opcodeFault(regs*, void*)+0x373>
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014fe7:	eb 20                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014fe9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fed:	75 0b                	jne    c0014ffa <opcodeFault(regs*, void*)+0x384>
c0014fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ff8:	eb 0f                	jmp    c0015009 <opcodeFault(regs*, void*)+0x393>
c0014ffa:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ffe:	75 09                	jne    c0015009 <opcodeFault(regs*, void*)+0x393>
c0015000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015003:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015006:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001500f:	8d 50 02             	lea    edx,[eax+0x2]
c0015012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015015:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015018:	e9 6f 02 00 00       	jmp    c001528c <opcodeFault(regs*, void*)+0x616>
c001501d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015020:	8a 00                	mov    al,BYTE PTR [eax]
c0015022:	3c 0f                	cmp    al,0xf
c0015024:	0f 85 8d 01 00 00    	jne    c00151b7 <opcodeFault(regs*, void*)+0x541>
c001502a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001502d:	40                   	inc    eax
c001502e:	8a 00                	mov    al,BYTE PTR [eax]
c0015030:	3c c7                	cmp    al,0xc7
c0015032:	0f 85 7f 01 00 00    	jne    c00151b7 <opcodeFault(regs*, void*)+0x541>
c0015038:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015041:	8d 50 01             	lea    edx,[eax+0x1]
c0015044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015047:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001504d:	50                   	push   eax
c001504e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015051:	50                   	push   eax
c0015052:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015055:	50                   	push   eax
c0015056:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015059:	e8 9e 46 00 00       	call   c00196fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015064:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015067:	83 f0 01             	xor    eax,0x1
c001506a:	84 c0                	test   al,al
c001506c:	0f 84 45 01 00 00    	je     c00151b7 <opcodeFault(regs*, void*)+0x541>
c0015072:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015075:	3c 01                	cmp    al,0x1
c0015077:	0f 85 3a 01 00 00    	jne    c00151b7 <opcodeFault(regs*, void*)+0x541>
c001507d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015080:	83 f0 01             	xor    eax,0x1
c0015083:	84 c0                	test   al,al
c0015085:	0f 84 2c 01 00 00    	je     c00151b7 <opcodeFault(regs*, void*)+0x541>
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015091:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015094:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001509b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001509e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150a1:	89 c2                	mov    edx,eax
c00150a3:	b8 00 00 00 00       	mov    eax,0x0
c00150a8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150ab:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150b4:	ba 00 00 00 00       	mov    edx,0x0
c00150b9:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150bc:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150c8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150cf:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150d2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150d5:	89 c2                	mov    edx,eax
c00150d7:	b8 00 00 00 00       	mov    eax,0x0
c00150dc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150df:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150e8:	ba 00 00 00 00       	mov    edx,0x0
c00150ed:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00150f0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00150f3:	fa                   	cli    
c00150f4:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c00150f9:	40                   	inc    eax
c00150fa:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c00150ff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015102:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015105:	8b 00                	mov    eax,DWORD PTR [eax]
c0015107:	89 c1                	mov    ecx,eax
c0015109:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001510c:	89 cb                	mov    ebx,ecx
c001510e:	89 d0                	mov    eax,edx
c0015110:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015113:	89 c6                	mov    esi,eax
c0015115:	89 f0                	mov    eax,esi
c0015117:	09 d8                	or     eax,ebx
c0015119:	85 c0                	test   eax,eax
c001511b:	75 21                	jne    c001513e <opcodeFault(regs*, void*)+0x4c8>
c001511d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015120:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015123:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015126:	89 01                	mov    DWORD PTR [ecx],eax
c0015128:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001512b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015131:	83 c8 40             	or     eax,0x40
c0015134:	89 c2                	mov    edx,eax
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001513c:	eb 3e                	jmp    c001517c <opcodeFault(regs*, void*)+0x506>
c001513e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015141:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015144:	8b 00                	mov    eax,DWORD PTR [eax]
c0015146:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015149:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001514c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001514f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015152:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015155:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015158:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001515b:	89 d0                	mov    eax,edx
c001515d:	31 d2                	xor    edx,edx
c001515f:	89 c3                	mov    ebx,eax
c0015161:	89 d6                	mov    esi,edx
c0015163:	89 da                	mov    edx,ebx
c0015165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015168:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015171:	83 e0 bf             	and    eax,0xffffffbf
c0015174:	89 c2                	mov    edx,eax
c0015176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015179:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001517c:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015181:	48                   	dec    eax
c0015182:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015187:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001518c:	85 c0                	test   eax,eax
c001518e:	75 01                	jne    c0015191 <opcodeFault(regs*, void*)+0x51b>
c0015190:	fb                   	sti    
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015197:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001519a:	01 c2                	add    edx,eax
c001519c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a2:	83 ec 0c             	sub    esp,0xc
c00151a5:	68 0e b1 02 c0       	push   0xc002b10e
c00151aa:	e8 8a d6 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00151af:	83 c4 10             	add    esp,0x10
c00151b2:	e9 d5 00 00 00       	jmp    c001528c <opcodeFault(regs*, void*)+0x616>
c00151b7:	83 ec 0c             	sub    esp,0xc
c00151ba:	68 21 b1 02 c0       	push   0xc002b121
c00151bf:	e8 75 d6 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151d3:	c1 e0 04             	shl    eax,0x4
c00151d6:	01 d0                	add    eax,edx
c00151d8:	83 c0 03             	add    eax,0x3
c00151db:	8a 00                	mov    al,BYTE PTR [eax]
c00151dd:	0f b6 d8             	movzx  ebx,al
c00151e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ec:	c1 e0 04             	shl    eax,0x4
c00151ef:	01 d0                	add    eax,edx
c00151f1:	83 c0 02             	add    eax,0x2
c00151f4:	8a 00                	mov    al,BYTE PTR [eax]
c00151f6:	0f b6 c8             	movzx  ecx,al
c00151f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015202:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015205:	c1 e0 04             	shl    eax,0x4
c0015208:	01 d0                	add    eax,edx
c001520a:	40                   	inc    eax
c001520b:	8a 00                	mov    al,BYTE PTR [eax]
c001520d:	0f b6 d0             	movzx  edx,al
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015219:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001521c:	c1 e0 04             	shl    eax,0x4
c001521f:	01 f0                	add    eax,esi
c0015221:	8a 00                	mov    al,BYTE PTR [eax]
c0015223:	0f b6 c0             	movzx  eax,al
c0015226:	83 ec 0c             	sub    esp,0xc
c0015229:	53                   	push   ebx
c001522a:	51                   	push   ecx
c001522b:	52                   	push   edx
c001522c:	50                   	push   eax
c001522d:	68 34 b1 02 c0       	push   0xc002b134
c0015232:	e8 02 d6 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0015237:	83 c4 20             	add    esp,0x20
c001523a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015240:	83 c0 03             	add    eax,0x3
c0015243:	8a 00                	mov    al,BYTE PTR [eax]
c0015245:	0f b6 d8             	movzx  ebx,al
c0015248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524e:	83 c0 02             	add    eax,0x2
c0015251:	8a 00                	mov    al,BYTE PTR [eax]
c0015253:	0f b6 c8             	movzx  ecx,al
c0015256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015259:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525c:	40                   	inc    eax
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	0f b6 d0             	movzx  edx,al
c0015262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015265:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015268:	8a 00                	mov    al,BYTE PTR [eax]
c001526a:	0f b6 c0             	movzx  eax,al
c001526d:	83 ec 0c             	sub    esp,0xc
c0015270:	53                   	push   ebx
c0015271:	51                   	push   ecx
c0015272:	52                   	push   edx
c0015273:	50                   	push   eax
c0015274:	68 5c b1 02 c0       	push   0xc002b15c
c0015279:	e8 bb d5 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001527e:	83 c4 20             	add    esp,0x20
c0015281:	83 ec 0c             	sub    esp,0xc
c0015284:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015287:	e8 48 f4 ff ff       	call   c00146d4 <displayDebugInfo(regs*)>
c001528c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001528f:	5b                   	pop    ebx
c0015290:	5e                   	pop    esi
c0015291:	5d                   	pop    ebp
c0015292:	c3                   	ret    

c0015293 <displayProgramFault(char const*)>:
c0015293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015298:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001529b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152a1:	85 c0                	test   eax,eax
c00152a3:	74 15                	je     c00152ba <displayProgramFault(char const*)+0x27>
c00152a5:	83 ec 0c             	sub    esp,0xc
c00152a8:	6a 04                	push   0x4
c00152aa:	6a 0f                	push   0xf
c00152ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152b0:	50                   	push   eax
c00152b1:	e8 a6 b2 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152b6:	83 c4 1c             	add    esp,0x1c
c00152b9:	c3                   	ret    
c00152ba:	c3                   	ret    

c00152bb <setupInterruptController()>:
c00152bb:	55                   	push   ebp
c00152bc:	89 e5                	mov    ebp,esp
c00152be:	53                   	push   ebx
c00152bf:	83 ec 24             	sub    esp,0x24
c00152c2:	b8 00 00 00 00       	mov    eax,0x0
c00152c7:	85 c0                	test   eax,eax
c00152c9:	0f 95 c0             	setne  al
c00152cc:	84 c0                	test   al,al
c00152ce:	74 5b                	je     c001532b <setupInterruptController()+0x70>
c00152d0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152d7:	83 ec 0c             	sub    esp,0xc
c00152da:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152dd:	e8 b7 a2 ff ff       	call   c000f599 <malloc>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	89 c3                	mov    ebx,eax
c00152e7:	83 ec 0c             	sub    esp,0xc
c00152ea:	53                   	push   ebx
c00152eb:	e8 c6 05 01 00       	call   c00258b6 <APIC::APIC()>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152f6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fe:	83 c0 08             	add    eax,0x8
c0015301:	8b 00                	mov    eax,DWORD PTR [eax]
c0015303:	6a 00                	push   0x0
c0015305:	6a 00                	push   0x0
c0015307:	6a 00                	push   0x0
c0015309:	52                   	push   edx
c001530a:	ff d0                	call   eax
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0015314:	83 ec 08             	sub    esp,0x8
c0015317:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001531a:	50                   	push   eax
c001531b:	e8 52 e9 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015326:	e9 79 03 00 00       	jmp    c00156a4 <setupInterruptController()+0x3e9>
c001532b:	a0 e0 06 03 c0       	mov    al,ds:0xc00306e0
c0015330:	84 c0                	test   al,al
c0015332:	75 14                	jne    c0015348 <setupInterruptController()+0x8d>
c0015334:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0015339:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001533f:	83 e2 fe             	and    edx,0xfffffffe
c0015342:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015348:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001534d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015353:	83 e0 01             	and    eax,0x1
c0015356:	84 c0                	test   al,al
c0015358:	0f 95 c0             	setne  al
c001535b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001535e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015365:	83 ec 0c             	sub    esp,0xc
c0015368:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001536b:	e8 29 a2 ff ff       	call   c000f599 <malloc>
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	89 c3                	mov    ebx,eax
c0015375:	83 ec 0c             	sub    esp,0xc
c0015378:	53                   	push   ebx
c0015379:	e8 90 0a 01 00       	call   c0025e0e <PIC::PIC()>
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015384:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015387:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	83 c0 08             	add    eax,0x8
c001538f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015391:	6a 00                	push   0x0
c0015393:	6a 00                	push   0x0
c0015395:	6a 00                	push   0x0
c0015397:	52                   	push   edx
c0015398:	ff d0                	call   eax
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00153a1:	74 73                	je     c0015416 <setupInterruptController()+0x15b>
c00153a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	83 c0 0c             	add    eax,0xc
c00153ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b0:	6a 00                	push   0x0
c00153b2:	6a 00                	push   0x0
c00153b4:	6a 00                	push   0x0
c00153b6:	52                   	push   edx
c00153b7:	ff d0                	call   eax
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153c0:	74 15                	je     c00153d7 <setupInterruptController()+0x11c>
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c7:	83 c0 04             	add    eax,0x4
c00153ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cc:	83 ec 0c             	sub    esp,0xc
c00153cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d2:	ff d0                	call   eax
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153de:	83 ec 0c             	sub    esp,0xc
c00153e1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153e4:	e8 b0 a1 ff ff       	call   c000f599 <malloc>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	89 c3                	mov    ebx,eax
c00153ee:	83 ec 0c             	sub    esp,0xc
c00153f1:	53                   	push   ebx
c00153f2:	e8 bf 04 01 00       	call   c00258b6 <APIC::APIC()>
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153fd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015403:	8b 00                	mov    eax,DWORD PTR [eax]
c0015405:	83 c0 08             	add    eax,0x8
c0015408:	8b 00                	mov    eax,DWORD PTR [eax]
c001540a:	6a 00                	push   0x0
c001540c:	6a 00                	push   0x0
c001540e:	6a 00                	push   0x0
c0015410:	52                   	push   edx
c0015411:	ff d0                	call   eax
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001541b:	83 ec 08             	sub    esp,0x8
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	50                   	push   eax
c0015422:	e8 4b e8 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	c7 05 e8 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dee8,0x0
c0015434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	83 c0 24             	add    eax,0x24
c001543c:	8b 00                	mov    eax,DWORD PTR [eax]
c001543e:	6a 00                	push   0x0
c0015440:	68 57 4c 01 c0       	push   0xc0014c57
c0015445:	6a 00                	push   0x0
c0015447:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001544a:	ff d0                	call   eax
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	8b 00                	mov    eax,DWORD PTR [eax]
c0015454:	83 c0 24             	add    eax,0x24
c0015457:	8b 00                	mov    eax,DWORD PTR [eax]
c0015459:	6a 00                	push   0x0
c001545b:	68 57 4c 01 c0       	push   0xc0014c57
c0015460:	6a 01                	push   0x1
c0015462:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015465:	ff d0                	call   eax
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	8b 00                	mov    eax,DWORD PTR [eax]
c001546f:	83 c0 24             	add    eax,0x24
c0015472:	8b 00                	mov    eax,DWORD PTR [eax]
c0015474:	6a 00                	push   0x0
c0015476:	68 31 45 01 c0       	push   0xc0014531
c001547b:	6a 02                	push   0x2
c001547d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015480:	ff d0                	call   eax
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015488:	8b 00                	mov    eax,DWORD PTR [eax]
c001548a:	83 c0 24             	add    eax,0x24
c001548d:	8b 00                	mov    eax,DWORD PTR [eax]
c001548f:	6a 00                	push   0x0
c0015491:	68 57 4c 01 c0       	push   0xc0014c57
c0015496:	6a 03                	push   0x3
c0015498:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001549b:	ff d0                	call   eax
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a5:	83 c0 24             	add    eax,0x24
c00154a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154aa:	6a 00                	push   0x0
c00154ac:	68 57 4c 01 c0       	push   0xc0014c57
c00154b1:	6a 04                	push   0x4
c00154b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b6:	ff d0                	call   eax
c00154b8:	83 c4 10             	add    esp,0x10
c00154bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154be:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c0:	83 c0 24             	add    eax,0x24
c00154c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c5:	6a 00                	push   0x0
c00154c7:	68 57 4c 01 c0       	push   0xc0014c57
c00154cc:	6a 05                	push   0x5
c00154ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154d1:	ff d0                	call   eax
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154db:	83 c0 24             	add    eax,0x24
c00154de:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e0:	6a 00                	push   0x0
c00154e2:	68 76 4c 01 c0       	push   0xc0014c76
c00154e7:	6a 06                	push   0x6
c00154e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ec:	ff d0                	call   eax
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f6:	83 c0 24             	add    eax,0x24
c00154f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154fb:	6a 00                	push   0x0
c00154fd:	68 63 4b 01 c0       	push   0xc0014b63
c0015502:	6a 07                	push   0x7
c0015504:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015507:	ff d0                	call   eax
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015511:	83 c0 24             	add    eax,0x24
c0015514:	8b 00                	mov    eax,DWORD PTR [eax]
c0015516:	6a 00                	push   0x0
c0015518:	68 4c 43 01 c0       	push   0xc001434c
c001551d:	6a 08                	push   0x8
c001551f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015522:	ff d0                	call   eax
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552a:	8b 00                	mov    eax,DWORD PTR [eax]
c001552c:	83 c0 24             	add    eax,0x24
c001552f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015531:	6a 00                	push   0x0
c0015533:	68 57 4c 01 c0       	push   0xc0014c57
c0015538:	6a 09                	push   0x9
c001553a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553d:	ff d0                	call   eax
c001553f:	83 c4 10             	add    esp,0x10
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	8b 00                	mov    eax,DWORD PTR [eax]
c0015547:	83 c0 24             	add    eax,0x24
c001554a:	8b 00                	mov    eax,DWORD PTR [eax]
c001554c:	6a 00                	push   0x0
c001554e:	68 57 4c 01 c0       	push   0xc0014c57
c0015553:	6a 0a                	push   0xa
c0015555:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015558:	ff d0                	call   eax
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015560:	8b 00                	mov    eax,DWORD PTR [eax]
c0015562:	83 c0 24             	add    eax,0x24
c0015565:	8b 00                	mov    eax,DWORD PTR [eax]
c0015567:	6a 00                	push   0x0
c0015569:	68 57 4c 01 c0       	push   0xc0014c57
c001556e:	6a 0b                	push   0xb
c0015570:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015573:	ff d0                	call   eax
c0015575:	83 c4 10             	add    esp,0x10
c0015578:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557b:	8b 00                	mov    eax,DWORD PTR [eax]
c001557d:	83 c0 24             	add    eax,0x24
c0015580:	8b 00                	mov    eax,DWORD PTR [eax]
c0015582:	6a 00                	push   0x0
c0015584:	68 57 4c 01 c0       	push   0xc0014c57
c0015589:	6a 0c                	push   0xc
c001558b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558e:	ff d0                	call   eax
c0015590:	83 c4 10             	add    esp,0x10
c0015593:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015596:	8b 00                	mov    eax,DWORD PTR [eax]
c0015598:	83 c0 24             	add    eax,0x24
c001559b:	8b 00                	mov    eax,DWORD PTR [eax]
c001559d:	6a 00                	push   0x0
c001559f:	68 d6 4b 01 c0       	push   0xc0014bd6
c00155a4:	6a 0d                	push   0xd
c00155a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a9:	ff d0                	call   eax
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b3:	83 c0 24             	add    eax,0x24
c00155b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b8:	6a 00                	push   0x0
c00155ba:	68 0f 4c 01 c0       	push   0xc0014c0f
c00155bf:	6a 0e                	push   0xe
c00155c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c4:	ff d0                	call   eax
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ce:	83 c0 24             	add    eax,0x24
c00155d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d3:	6a 00                	push   0x0
c00155d5:	68 57 4c 01 c0       	push   0xc0014c57
c00155da:	6a 0f                	push   0xf
c00155dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155df:	ff d0                	call   eax
c00155e1:	83 c4 10             	add    esp,0x10
c00155e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e9:	83 c0 24             	add    eax,0x24
c00155ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ee:	6a 00                	push   0x0
c00155f0:	68 57 4c 01 c0       	push   0xc0014c57
c00155f5:	6a 10                	push   0x10
c00155f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155fa:	ff d0                	call   eax
c00155fc:	83 c4 10             	add    esp,0x10
c00155ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015602:	8b 00                	mov    eax,DWORD PTR [eax]
c0015604:	83 c0 24             	add    eax,0x24
c0015607:	8b 00                	mov    eax,DWORD PTR [eax]
c0015609:	6a 00                	push   0x0
c001560b:	68 57 4c 01 c0       	push   0xc0014c57
c0015610:	6a 11                	push   0x11
c0015612:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015615:	ff d0                	call   eax
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561d:	8b 00                	mov    eax,DWORD PTR [eax]
c001561f:	83 c0 24             	add    eax,0x24
c0015622:	8b 00                	mov    eax,DWORD PTR [eax]
c0015624:	6a 00                	push   0x0
c0015626:	68 57 4c 01 c0       	push   0xc0014c57
c001562b:	6a 12                	push   0x12
c001562d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015630:	ff d0                	call   eax
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015638:	8b 00                	mov    eax,DWORD PTR [eax]
c001563a:	83 c0 24             	add    eax,0x24
c001563d:	8b 00                	mov    eax,DWORD PTR [eax]
c001563f:	6a 00                	push   0x0
c0015641:	68 57 4c 01 c0       	push   0xc0014c57
c0015646:	6a 13                	push   0x13
c0015648:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564b:	ff d0                	call   eax
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015653:	8b 00                	mov    eax,DWORD PTR [eax]
c0015655:	83 c0 24             	add    eax,0x24
c0015658:	8b 00                	mov    eax,DWORD PTR [eax]
c001565a:	6a 00                	push   0x0
c001565c:	68 57 4c 01 c0       	push   0xc0014c57
c0015661:	6a 14                	push   0x14
c0015663:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015666:	ff d0                	call   eax
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015670:	83 c0 24             	add    eax,0x24
c0015673:	8b 00                	mov    eax,DWORD PTR [eax]
c0015675:	6a 00                	push   0x0
c0015677:	68 57 4c 01 c0       	push   0xc0014c57
c001567c:	6a 1e                	push   0x1e
c001567e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015681:	ff d0                	call   eax
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015689:	8b 00                	mov    eax,DWORD PTR [eax]
c001568b:	83 c0 24             	add    eax,0x24
c001568e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015690:	6a 00                	push   0x0
c0015692:	68 d5 c1 01 c0       	push   0xc001c1d5
c0015697:	6a 60                	push   0x60
c0015699:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569c:	ff d0                	call   eax
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156a7:	c9                   	leave  
c00156a8:	c3                   	ret    
c00156a9:	90                   	nop

c00156aa <InterruptController::convertLegacyIRQNumber(int)>:
c00156aa:	55                   	push   ebp
c00156ab:	89 e5                	mov    ebp,esp
c00156ad:	83 ec 08             	sub    esp,0x8
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	83 ec 0c             	sub    esp,0xc
c00156b6:	50                   	push   eax
c00156b7:	e8 b6 e8 ff ff       	call   c0013f72 <Device::getName()>
c00156bc:	83 c4 10             	add    esp,0x10
c00156bf:	8a 00                	mov    al,BYTE PTR [eax]
c00156c1:	3c 41                	cmp    al,0x41
c00156c3:	0f 94 c0             	sete   al
c00156c6:	84 c0                	test   al,al
c00156c8:	74 28                	je     c00156f2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156ca:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156ce:	7f 12                	jg     c00156e2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156d3:	05 c0 cf 02 c0       	add    eax,0xc002cfc0
c00156d8:	8a 00                	mov    al,BYTE PTR [eax]
c00156da:	0f b6 c0             	movzx  eax,al
c00156dd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156e0:	eb 10                	jmp    c00156f2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156e2:	83 ec 0c             	sub    esp,0xc
c00156e5:	68 84 b1 02 c0       	push   0xc002b184
c00156ea:	e8 f4 48 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156f5:	c9                   	leave  
c00156f6:	c3                   	ret    
c00156f7:	90                   	nop

c00156f8 <startGUI(void*)>:
c00156f8:	55                   	push   ebp
c00156f9:	89 e5                	mov    ebp,esp
c00156fb:	53                   	push   ebx
c00156fc:	83 ec 04             	sub    esp,0x4
c00156ff:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015704:	48                   	dec    eax
c0015705:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001570a:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001570f:	85 c0                	test   eax,eax
c0015711:	75 01                	jne    c0015714 <startGUI(void*)+0x1c>
c0015713:	fb                   	sti    
c0015714:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c001571a:	83 ec 08             	sub    esp,0x8
c001571d:	6a 01                	push   0x1
c001571f:	68 04 b2 02 c0       	push   0xc002b204
c0015724:	e8 87 7a 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	83 ec 08             	sub    esp,0x8
c001572f:	53                   	push   ebx
c0015730:	50                   	push   eax
c0015731:	e8 ab 7c 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c001573f:	83 ec 08             	sub    esp,0x8
c0015742:	6a 01                	push   0x1
c0015744:	68 1e b2 02 c0       	push   0xc002b21e
c0015749:	e8 62 7a 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	83 ec 08             	sub    esp,0x8
c0015754:	53                   	push   ebx
c0015755:	50                   	push   eax
c0015756:	e8 86 7c 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c001575b:	83 c4 10             	add    esp,0x10
c001575e:	90                   	nop
c001575f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015762:	c9                   	leave  
c0015763:	c3                   	ret    

c0015764 <startGUIVESA(void*)>:
c0015764:	55                   	push   ebp
c0015765:	89 e5                	mov    ebp,esp
c0015767:	53                   	push   ebx
c0015768:	83 ec 04             	sub    esp,0x4
c001576b:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015770:	48                   	dec    eax
c0015771:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015776:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001577b:	85 c0                	test   eax,eax
c001577d:	75 01                	jne    c0015780 <startGUIVESA(void*)+0x1c>
c001577f:	fb                   	sti    
c0015780:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c0015786:	83 ec 08             	sub    esp,0x8
c0015789:	6a 01                	push   0x1
c001578b:	68 38 b2 02 c0       	push   0xc002b238
c0015790:	e8 1b 7a 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	83 ec 08             	sub    esp,0x8
c001579b:	53                   	push   ebx
c001579c:	50                   	push   eax
c001579d:	e8 3f 7c 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	6a 01                	push   0x1
c00157b0:	68 1e b2 02 c0       	push   0xc002b21e
c00157b5:	e8 f6 79 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	83 ec 08             	sub    esp,0x8
c00157c0:	53                   	push   ebx
c00157c1:	50                   	push   eax
c00157c2:	e8 1a 7c 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c00157c7:	83 c4 10             	add    esp,0x10
c00157ca:	90                   	nop
c00157cb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157ce:	c9                   	leave  
c00157cf:	c3                   	ret    

c00157d0 <sendKeyToTerminal(unsigned char)>:
c00157d0:	55                   	push   ebp
c00157d1:	89 e5                	mov    ebp,esp
c00157d3:	83 ec 28             	sub    esp,0x28
c00157d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00157dc:	a1 24 de 02 c0       	mov    eax,ds:0xc002de24
c00157e1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00157e5:	83 ec 08             	sub    esp,0x8
c00157e8:	52                   	push   edx
c00157e9:	50                   	push   eax
c00157ea:	e8 15 b2 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c00157ef:	83 c4 10             	add    esp,0x10
c00157f2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157f6:	0f 85 8f 00 00 00    	jne    c001588b <sendKeyToTerminal(unsigned char)+0xbb>
c00157fc:	fa                   	cli    
c00157fd:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015802:	40                   	inc    eax
c0015803:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015808:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001580d:	40                   	inc    eax
c001580e:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c0015813:	a1 00 df 02 c0       	mov    eax,ds:0xc002df00
c0015818:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001581b:	c7 05 00 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df00,0x0
c0015825:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015829:	74 1f                	je     c001584a <sendKeyToTerminal(unsigned char)+0x7a>
c001582b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001582e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015831:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015834:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015837:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015840:	e8 b3 87 00 00       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	eb db                	jmp    c0015825 <sendKeyToTerminal(unsigned char)+0x55>
c001584a:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001584f:	48                   	dec    eax
c0015850:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c0015855:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001585a:	85 c0                	test   eax,eax
c001585c:	75 18                	jne    c0015876 <sendKeyToTerminal(unsigned char)+0xa6>
c001585e:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c0015863:	85 c0                	test   eax,eax
c0015865:	74 0f                	je     c0015876 <sendKeyToTerminal(unsigned char)+0xa6>
c0015867:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c0015871:	e8 ff 82 00 00       	call   c001db75 <schedule()>
c0015876:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001587b:	48                   	dec    eax
c001587c:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015881:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015886:	85 c0                	test   eax,eax
c0015888:	75 01                	jne    c001588b <sendKeyToTerminal(unsigned char)+0xbb>
c001588a:	fb                   	sti    
c001588b:	90                   	nop
c001588c:	c9                   	leave  
c001588d:	c3                   	ret    

c001588e <sendKeyboardToken(KeyboardToken)>:
c001588e:	55                   	push   ebp
c001588f:	89 e5                	mov    ebp,esp
c0015891:	83 ec 18             	sub    esp,0x18
c0015894:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589a:	0f b7 c0             	movzx  eax,ax
c001589d:	83 f2 01             	xor    edx,0x1
c00158a0:	88 90 20 df 02 c0    	mov    BYTE PTR [eax-0x3ffd20e0],dl
c00158a6:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c00158ab:	85 c0                	test   eax,eax
c00158ad:	74 24                	je     c00158d3 <sendKeyboardToken(KeyboardToken)+0x45>
c00158af:	8b 0d 08 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df08
c00158b5:	83 ec 04             	sub    esp,0x4
c00158b8:	68 20 df 02 c0       	push   0xc002df20
c00158bd:	83 ec 08             	sub    esp,0x8
c00158c0:	89 e2                	mov    edx,esp
c00158c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c5:	89 02                	mov    DWORD PTR [edx],eax
c00158c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158ca:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00158ce:	ff d1                	call   ecx
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	66 3d 03 02          	cmp    ax,0x203
c00158da:	75 07                	jne    c00158e3 <sendKeyboardToken(KeyboardToken)+0x55>
c00158dc:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c00158e1:	84 c0                	test   al,al
c00158e3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00158e7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00158ea:	a0 28 e3 02 c0       	mov    al,ds:0xc002e328
c00158ef:	38 c2                	cmp    dl,al
c00158f1:	74 1c                	je     c001590f <sendKeyboardToken(KeyboardToken)+0x81>
c00158f3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00158f6:	a2 28 e3 02 c0       	mov    ds:0xc002e328,al
c00158fb:	a0 28 e3 02 c0       	mov    al,ds:0xc002e328
c0015900:	0f b6 c0             	movzx  eax,al
c0015903:	83 ec 0c             	sub    esp,0xc
c0015906:	50                   	push   eax
c0015907:	e8 38 a7 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c001590c:	83 c4 10             	add    esp,0x10
c001590f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015912:	84 c0                	test   al,al
c0015914:	0f 84 ae 00 00 00    	je     c00159c8 <sendKeyboardToken(KeyboardToken)+0x13a>
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	66 3d 10 03          	cmp    ax,0x310
c0015921:	75 06                	jne    c0015929 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015923:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592c:	66 3d 11 03          	cmp    ax,0x311
c0015930:	75 06                	jne    c0015938 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015932:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593b:	66 3d 12 03          	cmp    ax,0x312
c001593f:	75 06                	jne    c0015947 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015941:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	66 3d 13 03          	cmp    ax,0x313
c001594e:	75 06                	jne    c0015956 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015950:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015959:	66 3d 14 03          	cmp    ax,0x314
c001595d:	75 06                	jne    c0015965 <sendKeyboardToken(KeyboardToken)+0xd7>
c001595f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015968:	66 3d 15 03          	cmp    ax,0x315
c001596c:	75 06                	jne    c0015974 <sendKeyboardToken(KeyboardToken)+0xe6>
c001596e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015977:	66 3d 16 03          	cmp    ax,0x316
c001597b:	75 06                	jne    c0015983 <sendKeyboardToken(KeyboardToken)+0xf5>
c001597d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015986:	66 3d 17 03          	cmp    ax,0x317
c001598a:	75 06                	jne    c0015992 <sendKeyboardToken(KeyboardToken)+0x104>
c001598c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015995:	66 3d 18 03          	cmp    ax,0x318
c0015999:	75 06                	jne    c00159a1 <sendKeyboardToken(KeyboardToken)+0x113>
c001599b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00159a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a4:	66 3d 19 03          	cmp    ax,0x319
c00159a8:	75 06                	jne    c00159b0 <sendKeyboardToken(KeyboardToken)+0x122>
c00159aa:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00159b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b3:	66 3d 1a 03          	cmp    ax,0x31a
c00159b7:	0f 85 c9 00 00 00    	jne    c0015a86 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159bd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00159c3:	e9 be 00 00 00       	jmp    c0015a86 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cb:	66 3d 10 03          	cmp    ax,0x310
c00159cf:	75 0a                	jne    c00159db <sendKeyboardToken(KeyboardToken)+0x14d>
c00159d1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00159d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159de:	66 3d 11 03          	cmp    ax,0x311
c00159e2:	75 0a                	jne    c00159ee <sendKeyboardToken(KeyboardToken)+0x160>
c00159e4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00159ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f1:	66 3d 12 03          	cmp    ax,0x312
c00159f5:	75 0a                	jne    c0015a01 <sendKeyboardToken(KeyboardToken)+0x173>
c00159f7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00159fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a04:	66 3d 13 03          	cmp    ax,0x313
c0015a08:	75 0a                	jne    c0015a14 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a0a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 14 03          	cmp    ax,0x314
c0015a1b:	75 0a                	jne    c0015a27 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a1d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a23:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2a:	66 3d 15 03          	cmp    ax,0x315
c0015a2e:	75 0a                	jne    c0015a3a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a30:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a36:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3d:	66 3d 16 03          	cmp    ax,0x316
c0015a41:	75 0a                	jne    c0015a4d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a43:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a49:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a50:	66 3d 17 03          	cmp    ax,0x317
c0015a54:	75 0a                	jne    c0015a60 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015a56:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015a5c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a63:	66 3d 18 03          	cmp    ax,0x318
c0015a67:	75 0a                	jne    c0015a73 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015a69:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015a6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a76:	66 3d 19 03          	cmp    ax,0x319
c0015a7a:	75 0a                	jne    c0015a86 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a7c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015a82:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a89:	66 3d 00 02          	cmp    ax,0x200
c0015a8d:	75 2c                	jne    c0015abb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a8f:	a0 20 e3 02 c0       	mov    al,ds:0xc002e320
c0015a94:	83 f0 01             	xor    eax,0x1
c0015a97:	84 c0                	test   al,al
c0015a99:	74 20                	je     c0015abb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015a9b:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0015aa0:	6a 01                	push   0x1
c0015aa2:	6a 00                	push   0x0
c0015aa4:	68 f8 56 01 c0       	push   0xc00156f8
c0015aa9:	50                   	push   eax
c0015aaa:	e8 a1 7e 00 00       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	c6 05 20 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e320,0x1
c0015ab9:	eb 33                	jmp    c0015aee <sendKeyboardToken(KeyboardToken)+0x260>
c0015abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abe:	66 3d 01 02          	cmp    ax,0x201
c0015ac2:	75 2a                	jne    c0015aee <sendKeyboardToken(KeyboardToken)+0x260>
c0015ac4:	a0 20 e3 02 c0       	mov    al,ds:0xc002e320
c0015ac9:	83 f0 01             	xor    eax,0x1
c0015acc:	84 c0                	test   al,al
c0015ace:	74 1e                	je     c0015aee <sendKeyboardToken(KeyboardToken)+0x260>
c0015ad0:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0015ad5:	6a 01                	push   0x1
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 64 57 01 c0       	push   0xc0015764
c0015ade:	50                   	push   eax
c0015adf:	e8 6c 7e 00 00       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	c6 05 20 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e320,0x1
c0015aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af1:	66 3d 1d 03          	cmp    ax,0x31d
c0015af5:	75 06                	jne    c0015afd <sendKeyboardToken(KeyboardToken)+0x26f>
c0015af7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b00:	66 3d 1c 03          	cmp    ax,0x31c
c0015b04:	75 06                	jne    c0015b0c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b06:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0f:	66 3d 1b 03          	cmp    ax,0x31b
c0015b13:	75 06                	jne    c0015b1b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b15:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1e:	66 3d 1e 03          	cmp    ax,0x31e
c0015b22:	75 06                	jne    c0015b2a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b24:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2d:	66 3d 1f 03          	cmp    ax,0x31f
c0015b31:	75 06                	jne    c0015b39 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b33:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	66 3d 1a 03          	cmp    ax,0x31a
c0015b40:	75 06                	jne    c0015b48 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b42:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b48:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015b4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b4f:	83 f0 01             	xor    eax,0x1
c0015b52:	84 c0                	test   al,al
c0015b54:	74 77                	je     c0015bcd <sendKeyboardToken(KeyboardToken)+0x33f>
c0015b56:	a0 21 e0 02 c0       	mov    al,ds:0xc002e021
c0015b5b:	84 c0                	test   al,al
c0015b5d:	74 41                	je     c0015ba0 <sendKeyboardToken(KeyboardToken)+0x312>
c0015b5f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b63:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015b67:	74 2b                	je     c0015b94 <sendKeyboardToken(KeyboardToken)+0x306>
c0015b69:	8b 15 24 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e324
c0015b6f:	89 d0                	mov    eax,edx
c0015b71:	c1 e0 02             	shl    eax,0x2
c0015b74:	01 d0                	add    eax,edx
c0015b76:	01 c0                	add    eax,eax
c0015b78:	a3 24 e3 02 c0       	mov    ds:0xc002e324,eax
c0015b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b80:	0f b7 c0             	movzx  eax,ax
c0015b83:	8d 50 d0             	lea    edx,[eax-0x30]
c0015b86:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015b8b:	01 d0                	add    eax,edx
c0015b8d:	a3 24 e3 02 c0       	mov    ds:0xc002e324,eax
c0015b92:	eb 6d                	jmp    c0015c01 <sendKeyboardToken(KeyboardToken)+0x373>
c0015b94:	c7 05 24 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e324,0x0
c0015b9e:	eb 61                	jmp    c0015c01 <sendKeyboardToken(KeyboardToken)+0x373>
c0015ba0:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015ba5:	85 c0                	test   eax,eax
c0015ba7:	74 18                	je     c0015bc1 <sendKeyboardToken(KeyboardToken)+0x333>
c0015ba9:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015bae:	0f b6 c0             	movzx  eax,al
c0015bb1:	83 ec 0c             	sub    esp,0xc
c0015bb4:	50                   	push   eax
c0015bb5:	e8 16 fc ff ff       	call   c00157d0 <sendKeyToTerminal(unsigned char)>
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bc1:	c7 05 24 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e324,0x0
c0015bcb:	eb 34                	jmp    c0015c01 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd0:	66 3d 01 01          	cmp    ax,0x101
c0015bd4:	75 2b                	jne    c0015c01 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bd6:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015bdb:	85 c0                	test   eax,eax
c0015bdd:	74 18                	je     c0015bf7 <sendKeyboardToken(KeyboardToken)+0x369>
c0015bdf:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015be4:	0f b6 c0             	movzx  eax,al
c0015be7:	83 ec 0c             	sub    esp,0xc
c0015bea:	50                   	push   eax
c0015beb:	e8 e0 fb ff ff       	call   c00157d0 <sendKeyToTerminal(unsigned char)>
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bf7:	c7 05 24 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e324,0x0
c0015c01:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c04:	83 f0 01             	xor    eax,0x1
c0015c07:	84 c0                	test   al,al
c0015c09:	74 4c                	je     c0015c57 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c0b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c0e:	83 f0 01             	xor    eax,0x1
c0015c11:	84 c0                	test   al,al
c0015c13:	74 42                	je     c0015c57 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c15:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0015c1a:	83 f0 01             	xor    eax,0x1
c0015c1d:	84 c0                	test   al,al
c0015c1f:	74 36                	je     c0015c57 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c24:	66 83 f8 1f          	cmp    ax,0x1f
c0015c28:	76 09                	jbe    c0015c33 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2d:	66 83 f8 7e          	cmp    ax,0x7e
c0015c31:	76 12                	jbe    c0015c45 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c36:	66 83 f8 0a          	cmp    ax,0xa
c0015c3a:	74 09                	je     c0015c45 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3f:	66 83 f8 08          	cmp    ax,0x8
c0015c43:	75 12                	jne    c0015c57 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c48:	0f b6 c0             	movzx  eax,al
c0015c4b:	83 ec 0c             	sub    esp,0xc
c0015c4e:	50                   	push   eax
c0015c4f:	e8 7c fb ff ff       	call   c00157d0 <sendKeyToTerminal(unsigned char)>
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c5a:	83 f0 01             	xor    eax,0x1
c0015c5d:	84 c0                	test   al,al
c0015c5f:	74 4f                	je     c0015cb0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c61:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c64:	83 f0 01             	xor    eax,0x1
c0015c67:	84 c0                	test   al,al
c0015c69:	74 45                	je     c0015cb0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c6b:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0015c70:	84 c0                	test   al,al
c0015c72:	74 3c                	je     c0015cb0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c77:	66 83 f8 3f          	cmp    ax,0x3f
c0015c7b:	76 33                	jbe    c0015cb0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c80:	66 83 f8 7f          	cmp    ax,0x7f
c0015c84:	77 2a                	ja     c0015cb0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c89:	88 c2                	mov    dl,al
c0015c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8e:	66 83 f8 5f          	cmp    ax,0x5f
c0015c92:	76 04                	jbe    c0015c98 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015c94:	b0 20                	mov    al,0x20
c0015c96:	eb 02                	jmp    c0015c9a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015c98:	b0 00                	mov    al,0x0
c0015c9a:	29 c2                	sub    edx,eax
c0015c9c:	88 d0                	mov    al,dl
c0015c9e:	83 e8 40             	sub    eax,0x40
c0015ca1:	0f b6 c0             	movzx  eax,al
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	50                   	push   eax
c0015ca8:	e8 23 fb ff ff       	call   c00157d0 <sendKeyToTerminal(unsigned char)>
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb3:	66 3d 00 03          	cmp    ax,0x300
c0015cb7:	75 0f                	jne    c0015cc8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cb9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cbc:	83 f0 01             	xor    eax,0x1
c0015cbf:	84 c0                	test   al,al
c0015cc1:	74 05                	je     c0015cc8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cc3:	e8 ed a6 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015cc8:	90                   	nop
c0015cc9:	c9                   	leave  
c0015cca:	c3                   	ret    

c0015ccb <clearInternalKeybuffer(VgaText*)>:
c0015ccb:	55                   	push   ebp
c0015ccc:	89 e5                	mov    ebp,esp
c0015cce:	83 ec 08             	sub    esp,0x8
c0015cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd4:	05 98 01 00 00       	add    eax,0x198
c0015cd9:	83 ec 0c             	sub    esp,0xc
c0015cdc:	50                   	push   eax
c0015cdd:	e8 8a aa fe ff       	call   c000076c <strlen>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ce8:	81 c2 98 01 00 00    	add    edx,0x198
c0015cee:	83 ec 04             	sub    esp,0x4
c0015cf1:	50                   	push   eax
c0015cf2:	6a 00                	push   0x0
c0015cf4:	52                   	push   edx
c0015cf5:	e8 56 aa fe ff       	call   c0000750 <memset>
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	90                   	nop
c0015cfe:	c9                   	leave  
c0015cff:	c3                   	ret    

c0015d00 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d00:	55                   	push   ebp
c0015d01:	89 e5                	mov    ebp,esp
c0015d03:	83 ec 18             	sub    esp,0x18
c0015d06:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c0015d0b:	85 c0                	test   eax,eax
c0015d0d:	74 2a                	je     c0015d39 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d0f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d15:	8b 0d 08 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df08
c0015d1b:	83 ec 04             	sub    esp,0x4
c0015d1e:	68 20 df 02 c0       	push   0xc002df20
c0015d23:	83 ec 08             	sub    esp,0x8
c0015d26:	89 e2                	mov    edx,esp
c0015d28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d2b:	89 02                	mov    DWORD PTR [edx],eax
c0015d2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d30:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d34:	ff d1                	call   ecx
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	fb                   	sti    
c0015d3a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d41:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d45:	0f 84 a1 00 00 00    	je     c0015dec <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d4e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d54:	84 c0                	test   al,al
c0015d56:	75 28                	jne    c0015d80 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015d58:	fa                   	cli    
c0015d59:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015d5e:	40                   	inc    eax
c0015d5f:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015d64:	e8 0c 7e 00 00       	call   c001db75 <schedule()>
c0015d69:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015d6e:	48                   	dec    eax
c0015d6f:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0015d74:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0015d79:	85 c0                	test   eax,eax
c0015d7b:	75 ce                	jne    c0015d4b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015d7d:	fb                   	sti    
c0015d7e:	eb cb                	jmp    c0015d4b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015d80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d83:	8d 50 01             	lea    edx,[eax+0x1]
c0015d86:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015d89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d8c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015d92:	88 10                	mov    BYTE PTR [eax],dl
c0015d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d97:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d9d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da3:	05 98 01 00 00       	add    eax,0x198
c0015da8:	83 ec 0c             	sub    esp,0xc
c0015dab:	50                   	push   eax
c0015dac:	e8 bb a9 fe ff       	call   c000076c <strlen>
c0015db1:	83 c4 10             	add    esp,0x10
c0015db4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015db7:	81 c2 98 01 00 00    	add    edx,0x198
c0015dbd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015dc0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015dc3:	81 c2 98 01 00 00    	add    edx,0x198
c0015dc9:	83 ec 04             	sub    esp,0x4
c0015dcc:	50                   	push   eax
c0015dcd:	51                   	push   ecx
c0015dce:	52                   	push   edx
c0015dcf:	e8 b4 a8 fe ff       	call   c0000688 <memmove>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015dda:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ddd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015de1:	0f 85 5a ff ff ff    	jne    c0015d41 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dea:	eb 03                	jmp    c0015def <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015dec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015def:	c9                   	leave  
c0015df0:	c3                   	ret    
c0015df1:	90                   	nop

c0015df2 <Keyboard::Keyboard(char const*)>:
c0015df2:	83 ec 0c             	sub    esp,0xc
c0015df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e00:	50                   	push   eax
c0015e01:	e8 70 e0 ff ff       	call   c0013e76 <Device::Device(char const*)>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0015e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e12:	89 10                	mov    DWORD PTR [eax],edx
c0015e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e18:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e22:	c6 05 04 df 02 c0 01 	mov    BYTE PTR ds:0xc002df04,0x1
c0015e29:	90                   	nop
c0015e2a:	83 c4 0c             	add    esp,0xc
c0015e2d:	c3                   	ret    

c0015e2e <Keyboard::~Keyboard()>:
c0015e2e:	83 ec 0c             	sub    esp,0xc
c0015e31:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0015e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e3a:	89 10                	mov    DWORD PTR [eax],edx
c0015e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	50                   	push   eax
c0015e44:	e8 f7 dc ff ff       	call   c0013b40 <Device::~Device()>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	90                   	nop
c0015e4d:	83 c4 0c             	add    esp,0xc
c0015e50:	c3                   	ret    
c0015e51:	90                   	nop

c0015e52 <Keyboard::~Keyboard()>:
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	83 ec 0c             	sub    esp,0xc
c0015e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e5c:	e8 cd ff ff ff       	call   c0015e2e <Keyboard::~Keyboard()>
c0015e61:	83 c4 10             	add    esp,0x10
c0015e64:	83 ec 08             	sub    esp,0x8
c0015e67:	68 5c 01 00 00       	push   0x15c
c0015e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e70:	e8 ec c8 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0015e75:	83 c4 10             	add    esp,0x10
c0015e78:	83 c4 0c             	add    esp,0xc
c0015e7b:	c3                   	ret    

c0015e7c <LogicalDisk::close(int, int, void*)>:
c0015e7c:	83 c8 ff             	or     eax,0xffffffff
c0015e7f:	c3                   	ret    

c0015e80 <LogicalDisk::~LogicalDisk()>:
c0015e80:	83 ec 0c             	sub    esp,0xc
c0015e83:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0015e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8c:	89 10                	mov    DWORD PTR [eax],edx
c0015e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e92:	83 ec 0c             	sub    esp,0xc
c0015e95:	50                   	push   eax
c0015e96:	e8 a5 dc ff ff       	call   c0013b40 <Device::~Device()>
c0015e9b:	83 c4 10             	add    esp,0x10
c0015e9e:	90                   	nop
c0015e9f:	83 c4 0c             	add    esp,0xc
c0015ea2:	c3                   	ret    
c0015ea3:	90                   	nop

c0015ea4 <LogicalDisk::~LogicalDisk()>:
c0015ea4:	83 ec 0c             	sub    esp,0xc
c0015ea7:	83 ec 0c             	sub    esp,0xc
c0015eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eae:	e8 cd ff ff ff       	call   c0015e80 <LogicalDisk::~LogicalDisk()>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	83 ec 08             	sub    esp,0x8
c0015eb9:	68 74 01 00 00       	push   0x174
c0015ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ec2:	e8 9a c8 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0015ec7:	83 c4 10             	add    esp,0x10
c0015eca:	83 c4 0c             	add    esp,0xc
c0015ecd:	c3                   	ret    

c0015ece <LogicalDisk::open(int, int, void*)>:
c0015ece:	83 ec 18             	sub    esp,0x18
c0015ed1:	68 88 b2 02 c0       	push   0xc002b288
c0015ed6:	e8 08 41 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0015edb:	83 c8 ff             	or     eax,0xffffffff
c0015ede:	83 c4 1c             	add    esp,0x1c
c0015ee1:	c3                   	ret    

c0015ee2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ee2:	53                   	push   ebx
c0015ee3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015eeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eef:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ef5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015efb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f01:	77 10                	ja     c0015f13 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f03:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f09:	89 d3                	mov    ebx,edx
c0015f0b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f11:	72 05                	jb     c0015f18 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f13:	83 c8 ff             	or     eax,0xffffffff
c0015f16:	89 c2                	mov    edx,eax
c0015f18:	5b                   	pop    ebx
c0015f19:	c3                   	ret    

c0015f1a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f1a:	56                   	push   esi
c0015f1b:	83 c8 ff             	or     eax,0xffffffff
c0015f1e:	53                   	push   ebx
c0015f1f:	89 c2                	mov    edx,eax
c0015f21:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f25:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f2d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f33:	77 27                	ja     c0015f5c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f35:	89 d8                	mov    eax,ebx
c0015f37:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f3d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f48:	89 c2                	mov    edx,eax
c0015f4a:	73 10                	jae    c0015f5c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f4c:	89 c8                	mov    eax,ecx
c0015f4e:	89 da                	mov    edx,ebx
c0015f50:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015f56:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015f5c:	5b                   	pop    ebx
c0015f5d:	5e                   	pop    esi
c0015f5e:	c3                   	ret    
c0015f5f:	90                   	nop

c0015f60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f60:	83 ec 1c             	sub    esp,0x1c
c0015f63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f86:	83 ec 08             	sub    esp,0x8
c0015f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f8d:	50                   	push   eax
c0015f8e:	e8 e3 de ff ff       	call   c0013e76 <Device::Device(char const*)>
c0015f93:	83 c4 10             	add    esp,0x10
c0015f96:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0015f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f9f:	89 10                	mov    DWORD PTR [eax],edx
c0015fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fa5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fb0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fbb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015fc5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015fc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fd1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015fd7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015fdd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015fe1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015fe4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fe8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015fee:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ffc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016006:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016010:	90                   	nop
c0016011:	83 c4 1c             	add    esp,0x1c
c0016014:	c3                   	ret    
c0016015:	90                   	nop

c0016016 <LogicalDisk::assignDriveLetter()>:
c0016016:	55                   	push   ebp
c0016017:	57                   	push   edi
c0016018:	56                   	push   esi
c0016019:	53                   	push   ebx
c001601a:	83 ec 14             	sub    esp,0x14
c001601d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016021:	8b 3d 40 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e340
c0016027:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001602d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016031:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016037:	8b 3d 44 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e344
c001603d:	3c 01                	cmp    al,0x1
c001603f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016043:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016047:	19 c0                	sbb    eax,eax
c0016049:	83 e0 02             	and    eax,0x2
c001604c:	83 c0 41             	add    eax,0x41
c001604f:	0f be e8             	movsx  ebp,al
c0016052:	3c 43                	cmp    al,0x43
c0016054:	75 10                	jne    c0016066 <LogicalDisk::assignDriveLetter()+0x50>
c0016056:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001605d:	75 5d                	jne    c00160bc <LogicalDisk::assignDriveLetter()+0xa6>
c001605f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016064:	75 56                	jne    c00160bc <LogicalDisk::assignDriveLetter()+0xa6>
c0016066:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016069:	ba 01 00 00 00       	mov    edx,0x1
c001606e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016072:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016076:	d3 e2                	shl    edx,cl
c0016078:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001607c:	89 d7                	mov    edi,edx
c001607e:	89 d6                	mov    esi,edx
c0016080:	c1 ff 1f             	sar    edi,0x1f
c0016083:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016087:	21 f9                	and    ecx,edi
c0016089:	09 d1                	or     ecx,edx
c001608b:	75 2f                	jne    c00160bc <LogicalDisk::assignDriveLetter()+0xa6>
c001608d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016095:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001609b:	09 f2                	or     edx,esi
c001609d:	89 15 40 e3 02 c0    	mov    DWORD PTR ds:0xc002e340,edx
c00160a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160a7:	09 fa                	or     edx,edi
c00160a9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00160ad:	89 15 44 e3 02 c0    	mov    DWORD PTR ds:0xc002e344,edx
c00160b3:	89 1c bd 60 e3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1ca0],ebx
c00160ba:	eb 08                	jmp    c00160c4 <LogicalDisk::assignDriveLetter()+0xae>
c00160bc:	45                   	inc    ebp
c00160bd:	40                   	inc    eax
c00160be:	3c 5b                	cmp    al,0x5b
c00160c0:	75 90                	jne    c0016052 <LogicalDisk::assignDriveLetter()+0x3c>
c00160c2:	31 c0                	xor    eax,eax
c00160c4:	83 c4 14             	add    esp,0x14
c00160c7:	5b                   	pop    ebx
c00160c8:	5e                   	pop    esi
c00160c9:	5f                   	pop    edi
c00160ca:	5d                   	pop    ebp
c00160cb:	c3                   	ret    

c00160cc <LogicalDisk::mount()>:
c00160cc:	56                   	push   esi
c00160cd:	53                   	push   ebx
c00160ce:	53                   	push   ebx
c00160cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160d3:	8b 1d d4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded4
c00160d9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00160e3:	85 db                	test   ebx,ebx
c00160e5:	74 27                	je     c001610e <LogicalDisk::mount()+0x42>
c00160e7:	51                   	push   ecx
c00160e8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00160ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160f1:	83 e8 41             	sub    eax,0x41
c00160f4:	50                   	push   eax
c00160f5:	56                   	push   esi
c00160f6:	53                   	push   ebx
c00160f7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00160fa:	83 c4 10             	add    esp,0x10
c00160fd:	84 c0                	test   al,al
c00160ff:	74 08                	je     c0016109 <LogicalDisk::mount()+0x3d>
c0016101:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016107:	eb 07                	jmp    c0016110 <LogicalDisk::mount()+0x44>
c0016109:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001610c:	eb d5                	jmp    c00160e3 <LogicalDisk::mount()+0x17>
c001610e:	31 c0                	xor    eax,eax
c0016110:	5a                   	pop    edx
c0016111:	5b                   	pop    ebx
c0016112:	5e                   	pop    esi
c0016113:	c3                   	ret    

c0016114 <LogicalDisk::unmount()>:
c0016114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016118:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016122:	c3                   	ret    
c0016123:	90                   	nop

c0016124 <LogicalDisk::eject()>:
c0016124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016128:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001612e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016130:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016134:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016137:	90                   	nop

c0016138 <LogicalDisk::unassignDriveLetter()>:
c0016138:	57                   	push   edi
c0016139:	56                   	push   esi
c001613a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001613e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016145:	84 c9                	test   cl,cl
c0016147:	75 0f                	jne    c0016158 <LogicalDisk::unassignDriveLetter()+0x20>
c0016149:	c7 44 24 0c ac b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b2ac
c0016151:	5e                   	pop    esi
c0016152:	5f                   	pop    edi
c0016153:	e9 8b 3e 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c0016158:	83 e9 41             	sub    ecx,0x41
c001615b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016162:	b8 01 00 00 00       	mov    eax,0x1
c0016167:	c7 04 8d 60 e3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1ca0],0x0
c0016172:	d3 e0                	shl    eax,cl
c0016174:	89 c7                	mov    edi,eax
c0016176:	f7 d0                	not    eax
c0016178:	c1 ff 1f             	sar    edi,0x1f
c001617b:	21 05 40 e3 02 c0    	and    DWORD PTR ds:0xc002e340,eax
c0016181:	89 fe                	mov    esi,edi
c0016183:	f7 d6                	not    esi
c0016185:	21 35 44 e3 02 c0    	and    DWORD PTR ds:0xc002e344,esi
c001618b:	5e                   	pop    esi
c001618c:	5f                   	pop    edi
c001618d:	c3                   	ret    

c001618e <LogicalDisk::read(unsigned long long, int, void*)>:
c001618e:	57                   	push   edi
c001618f:	56                   	push   esi
c0016190:	53                   	push   ebx
c0016191:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016195:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016199:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001619d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161a1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00161a7:	77 41                	ja     c00161ea <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00161a9:	99                   	cdq    
c00161aa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00161b0:	01 c8                	add    eax,ecx
c00161b2:	11 da                	adc    edx,ebx
c00161b4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00161ba:	19 d7                	sbb    edi,edx
c00161bc:	72 33                	jb     c00161f1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00161be:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00161c4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00161ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00161ce:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00161d2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00161d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161e2:	5b                   	pop    ebx
c00161e3:	5e                   	pop    esi
c00161e4:	5f                   	pop    edi
c00161e5:	e9 0a 0b 00 00       	jmp    c0016cf4 <VCache::read(unsigned long long, int, void*)>
c00161ea:	b8 05 00 00 00       	mov    eax,0x5
c00161ef:	eb 05                	jmp    c00161f6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00161f1:	b8 07 00 00 00       	mov    eax,0x7
c00161f6:	5b                   	pop    ebx
c00161f7:	5e                   	pop    esi
c00161f8:	5f                   	pop    edi
c00161f9:	c3                   	ret    

c00161fa <LogicalDisk::write(unsigned long long, int, void*)>:
c00161fa:	57                   	push   edi
c00161fb:	56                   	push   esi
c00161fc:	53                   	push   ebx
c00161fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016205:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001620d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016213:	77 41                	ja     c0016256 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016215:	99                   	cdq    
c0016216:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001621c:	01 c8                	add    eax,ecx
c001621e:	11 da                	adc    edx,ebx
c0016220:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016226:	19 d7                	sbb    edi,edx
c0016228:	72 33                	jb     c001625d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001622a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016230:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016236:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001623a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001623e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016244:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001624a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001624e:	5b                   	pop    ebx
c001624f:	5e                   	pop    esi
c0016250:	5f                   	pop    edi
c0016251:	e9 76 09 00 00       	jmp    c0016bcc <VCache::write(unsigned long long, int, void*)>
c0016256:	b8 05 00 00 00       	mov    eax,0x5
c001625b:	eb 05                	jmp    c0016262 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001625d:	b8 07 00 00 00       	mov    eax,0x7
c0016262:	5b                   	pop    ebx
c0016263:	5e                   	pop    esi
c0016264:	5f                   	pop    edi
c0016265:	c3                   	ret    

c0016266 <Mouse::Mouse(char const*)>:
c0016266:	83 ec 0c             	sub    esp,0xc
c0016269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626d:	83 ec 08             	sub    esp,0x8
c0016270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016274:	50                   	push   eax
c0016275:	e8 fc db ff ff       	call   c0013e76 <Device::Device(char const*)>
c001627a:	83 c4 10             	add    esp,0x10
c001627d:	ba 00 b3 02 c0       	mov    edx,0xc002b300
c0016282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016286:	89 10                	mov    DWORD PTR [eax],edx
c0016288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001628c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016296:	90                   	nop
c0016297:	83 c4 0c             	add    esp,0xc
c001629a:	c3                   	ret    
c001629b:	90                   	nop

c001629c <Mouse::~Mouse()>:
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	ba 00 b3 02 c0       	mov    edx,0xc002b300
c00162a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a8:	89 10                	mov    DWORD PTR [eax],edx
c00162aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ae:	83 ec 0c             	sub    esp,0xc
c00162b1:	50                   	push   eax
c00162b2:	e8 89 d8 ff ff       	call   c0013b40 <Device::~Device()>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	90                   	nop
c00162bb:	83 c4 0c             	add    esp,0xc
c00162be:	c3                   	ret    
c00162bf:	90                   	nop

c00162c0 <Mouse::~Mouse()>:
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	83 ec 0c             	sub    esp,0xc
c00162c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ca:	e8 cd ff ff ff       	call   c001629c <Mouse::~Mouse()>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	83 ec 08             	sub    esp,0x8
c00162d5:	68 58 01 00 00       	push   0x158
c00162da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162de:	e8 7e c4 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	83 c4 0c             	add    esp,0xc
c00162e9:	c3                   	ret    

c00162ea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00162ea:	55                   	push   ebp
c00162eb:	57                   	push   edi
c00162ec:	56                   	push   esi
c00162ed:	53                   	push   ebx
c00162ee:	81 ec 28 01 00 00    	sub    esp,0x128
c00162f4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00162fb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016302:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016309:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016310:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016314:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016318:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001631f:	e8 4e dc ff ff       	call   c0013f72 <Device::getName()>
c0016324:	5a                   	pop    edx
c0016325:	59                   	pop    ecx
c0016326:	50                   	push   eax
c0016327:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001632b:	55                   	push   ebp
c001632c:	e8 db a4 fe ff       	call   c000080c <strcpy>
c0016331:	5b                   	pop    ebx
c0016332:	58                   	pop    eax
c0016333:	68 24 b3 02 c0       	push   0xc002b324
c0016338:	55                   	push   ebp
c0016339:	e8 0e a6 fe ff       	call   c000094c <strcat>
c001633e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016345:	e8 4f 92 ff ff       	call   c000f599 <malloc>
c001634a:	83 c4 0c             	add    esp,0xc
c001634d:	89 c3                	mov    ebx,eax
c001634f:	57                   	push   edi
c0016350:	56                   	push   esi
c0016351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016359:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016360:	55                   	push   ebp
c0016361:	50                   	push   eax
c0016362:	e8 f9 fb ff ff       	call   c0015f60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016367:	83 c4 14             	add    esp,0x14
c001636a:	53                   	push   ebx
c001636b:	e8 a6 fc ff ff       	call   c0016016 <LogicalDisk::assignDriveLetter()>
c0016370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016373:	e8 54 fd ff ff       	call   c00160cc <LogicalDisk::mount()>
c0016378:	58                   	pop    eax
c0016379:	5a                   	pop    edx
c001637a:	53                   	push   ebx
c001637b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016382:	e8 eb d8 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0016387:	81 c4 2c 01 00 00    	add    esp,0x12c
c001638d:	5b                   	pop    ebx
c001638e:	5e                   	pop    esi
c001638f:	5f                   	pop    edi
c0016390:	5d                   	pop    ebp
c0016391:	c3                   	ret    

c0016392 <createPartitionsForDisk(PhysicalDisk*)>:
c0016392:	55                   	push   ebp
c0016393:	57                   	push   edi
c0016394:	56                   	push   esi
c0016395:	53                   	push   ebx
c0016396:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001639c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00163a3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00163a9:	3d 00 02 00 00       	cmp    eax,0x200
c00163ae:	74 27                	je     c00163d7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00163b0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00163b6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00163bc:	83 ec 10             	sub    esp,0x10
c00163bf:	0f a4 f7 0a          	shld   edi,esi,0xa
c00163c3:	99                   	cdq    
c00163c4:	c1 e6 0a             	shl    esi,0xa
c00163c7:	52                   	push   edx
c00163c8:	89 fd                	mov    ebp,edi
c00163ca:	50                   	push   eax
c00163cb:	55                   	push   ebp
c00163cc:	56                   	push   esi
c00163cd:	e8 72 05 01 00       	call   c0026944 <__udivdi3>
c00163d2:	e9 b1 00 00 00       	jmp    c0016488 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00163d7:	83 ec 0c             	sub    esp,0xc
c00163da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163dc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00163e0:	56                   	push   esi
c00163e1:	6a 01                	push   0x1
c00163e3:	6a 00                	push   0x0
c00163e5:	6a 00                	push   0x0
c00163e7:	53                   	push   ebx
c00163e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00163eb:	83 c4 20             	add    esp,0x20
c00163ee:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00163f6:	75 0a                	jne    c0016402 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00163f8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016400:	74 2c                	je     c001642e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016402:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016408:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001640e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016414:	83 ec 10             	sub    esp,0x10
c0016417:	0f a4 c2 0a          	shld   edx,eax,0xa
c001641b:	89 f7                	mov    edi,esi
c001641d:	c1 e0 0a             	shl    eax,0xa
c0016420:	c1 ff 1f             	sar    edi,0x1f
c0016423:	57                   	push   edi
c0016424:	56                   	push   esi
c0016425:	52                   	push   edx
c0016426:	50                   	push   eax
c0016427:	e8 18 05 01 00       	call   c0026944 <__udivdi3>
c001642c:	eb 5a                	jmp    c0016488 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001642e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016435:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001643c:	83 e1 7f             	and    ecx,0x7f
c001643f:	83 e0 7f             	and    eax,0x7f
c0016442:	01 c1                	add    ecx,eax
c0016444:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001644b:	83 e0 7f             	and    eax,0x7f
c001644e:	01 c1                	add    ecx,eax
c0016450:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016457:	83 e0 7f             	and    eax,0x7f
c001645a:	00 c1                	add    cl,al
c001645c:	74 41                	je     c001649f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001645e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016464:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001646a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016470:	83 ec 10             	sub    esp,0x10
c0016473:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016477:	89 f7                	mov    edi,esi
c0016479:	c1 e0 0a             	shl    eax,0xa
c001647c:	c1 ff 1f             	sar    edi,0x1f
c001647f:	57                   	push   edi
c0016480:	56                   	push   esi
c0016481:	52                   	push   edx
c0016482:	50                   	push   eax
c0016483:	e8 bc 04 01 00       	call   c0026944 <__udivdi3>
c0016488:	83 c4 14             	add    esp,0x14
c001648b:	52                   	push   edx
c001648c:	50                   	push   eax
c001648d:	6a 00                	push   0x0
c001648f:	6a 00                	push   0x0
c0016491:	53                   	push   ebx
c0016492:	e8 53 fe ff ff       	call   c00162ea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016497:	83 c4 20             	add    esp,0x20
c001649a:	e9 79 01 00 00       	jmp    c0016618 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001649f:	89 f0                	mov    eax,esi
c00164a1:	31 f6                	xor    esi,esi
c00164a3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00164aa:	75 02                	jne    c00164ae <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00164ac:	89 f1                	mov    ecx,esi
c00164ae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00164b5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00164bc:	c1 e2 08             	shl    edx,0x8
c00164bf:	c1 e7 10             	shl    edi,0x10
c00164c2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00164ca:	09 fa                	or     edx,edi
c00164cc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00164d4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00164db:	83 c0 10             	add    eax,0x10
c00164de:	09 fa                	or     edx,edi
c00164e0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00164e7:	c1 e7 18             	shl    edi,0x18
c00164ea:	09 fa                	or     edx,edi
c00164ec:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00164f3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00164f7:	c1 e7 10             	shl    edi,0x10
c00164fa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016501:	c1 e2 08             	shl    edx,0x8
c0016504:	09 fa                	or     edx,edi
c0016506:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001650d:	09 fa                	or     edx,edi
c001650f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016516:	c1 e7 18             	shl    edi,0x18
c0016519:	09 fa                	or     edx,edi
c001651b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001651f:	46                   	inc    esi
c0016520:	83 fe 04             	cmp    esi,0x4
c0016523:	0f 85 7a ff ff ff    	jne    c00164a3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652d:	83 f0 01             	xor    eax,0x1
c0016530:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016534:	75 57                	jne    c001658d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001653a:	83 f0 01             	xor    eax,0x1
c001653d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016541:	75 4a                	jne    c001658d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016543:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016547:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001654f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016557:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001655d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016563:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016569:	0f a4 c2 0a          	shld   edx,eax,0xa
c001656d:	89 f7                	mov    edi,esi
c001656f:	c1 e0 0a             	shl    eax,0xa
c0016572:	c1 ff 1f             	sar    edi,0x1f
c0016575:	57                   	push   edi
c0016576:	56                   	push   esi
c0016577:	52                   	push   edx
c0016578:	50                   	push   eax
c0016579:	e8 c6 03 01 00       	call   c0026944 <__udivdi3>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016585:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016589:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001658d:	84 c9                	test   cl,cl
c001658f:	74 53                	je     c00165e4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016591:	0f b6 c9             	movzx  ecx,cl
c0016594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001659c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00165a0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00165a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00165ac:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00165b0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00165b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00165bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00165c8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00165cc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00165d0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00165d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00165d8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00165dc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00165e0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00165e4:	31 ed                	xor    ebp,ebp
c00165e6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00165ea:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00165ee:	89 f8                	mov    eax,edi
c00165f0:	09 f0                	or     eax,esi
c00165f2:	74 1e                	je     c0016612 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00165f4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00165f8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00165fc:	89 d1                	mov    ecx,edx
c00165fe:	09 c1                	or     ecx,eax
c0016600:	74 10                	je     c0016612 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016602:	83 ec 0c             	sub    esp,0xc
c0016605:	57                   	push   edi
c0016606:	56                   	push   esi
c0016607:	52                   	push   edx
c0016608:	50                   	push   eax
c0016609:	53                   	push   ebx
c001660a:	e8 db fc ff ff       	call   c00162ea <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001660f:	83 c4 20             	add    esp,0x20
c0016612:	45                   	inc    ebp
c0016613:	83 fd 04             	cmp    ebp,0x4
c0016616:	75 ce                	jne    c00165e6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016618:	81 c4 5c 02 00 00    	add    esp,0x25c
c001661e:	5b                   	pop    ebx
c001661f:	5e                   	pop    esi
c0016620:	5f                   	pop    edi
c0016621:	5d                   	pop    ebp
c0016622:	c3                   	ret    
c0016623:	90                   	nop

c0016624 <Serial::Serial(char const*)>:
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662b:	83 ec 08             	sub    esp,0x8
c001662e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016632:	50                   	push   eax
c0016633:	e8 3e d8 ff ff       	call   c0013e76 <Device::Device(char const*)>
c0016638:	83 c4 10             	add    esp,0x10
c001663b:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c0016640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016644:	89 10                	mov    DWORD PTR [eax],edx
c0016646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001664a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016654:	90                   	nop
c0016655:	83 c4 0c             	add    esp,0xc
c0016658:	c3                   	ret    
c0016659:	90                   	nop

c001665a <Serial::~Serial()>:
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c0016662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016666:	89 10                	mov    DWORD PTR [eax],edx
c0016668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001666c:	83 ec 0c             	sub    esp,0xc
c001666f:	50                   	push   eax
c0016670:	e8 cb d4 ff ff       	call   c0013b40 <Device::~Device()>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	90                   	nop
c0016679:	83 c4 0c             	add    esp,0xc
c001667c:	c3                   	ret    
c001667d:	90                   	nop

c001667e <Serial::~Serial()>:
c001667e:	83 ec 0c             	sub    esp,0xc
c0016681:	83 ec 0c             	sub    esp,0xc
c0016684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016688:	e8 cd ff ff ff       	call   c001665a <Serial::~Serial()>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	83 ec 08             	sub    esp,0x8
c0016693:	68 58 01 00 00       	push   0x158
c0016698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001669c:	e8 c0 c0 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00166a1:	83 c4 10             	add    esp,0x10
c00166a4:	83 c4 0c             	add    esp,0xc
c00166a7:	c3                   	ret    

c00166a8 <Timer::Timer(char const*)>:
c00166a8:	83 ec 0c             	sub    esp,0xc
c00166ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166af:	83 ec 08             	sub    esp,0x8
c00166b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166b6:	50                   	push   eax
c00166b7:	e8 ba d7 ff ff       	call   c0013e76 <Device::Device(char const*)>
c00166bc:	83 c4 10             	add    esp,0x10
c00166bf:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c00166c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c8:	89 10                	mov    DWORD PTR [eax],edx
c00166ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00166d8:	90                   	nop
c00166d9:	83 c4 0c             	add    esp,0xc
c00166dc:	c3                   	ret    
c00166dd:	90                   	nop

c00166de <Timer::~Timer()>:
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c00166e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ea:	89 10                	mov    DWORD PTR [eax],edx
c00166ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	50                   	push   eax
c00166f4:	e8 47 d4 ff ff       	call   c0013b40 <Device::~Device()>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	90                   	nop
c00166fd:	83 c4 0c             	add    esp,0xc
c0016700:	c3                   	ret    
c0016701:	90                   	nop

c0016702 <Timer::~Timer()>:
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	83 ec 0c             	sub    esp,0xc
c0016708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001670c:	e8 cd ff ff ff       	call   c00166de <Timer::~Timer()>
c0016711:	83 c4 10             	add    esp,0x10
c0016714:	83 ec 08             	sub    esp,0x8
c0016717:	68 5c 01 00 00       	push   0x15c
c001671c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016720:	e8 3c c0 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0016725:	83 c4 10             	add    esp,0x10
c0016728:	83 c4 0c             	add    esp,0xc
c001672b:	c3                   	ret    

c001672c <Timer::read()>:
c001672c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016730:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016736:	c3                   	ret    

c0016737 <timerHandler(unsigned long long)>:
c0016737:	55                   	push   ebp
c0016738:	57                   	push   edi
c0016739:	56                   	push   esi
c001673a:	53                   	push   ebx
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016742:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016746:	01 35 d0 e3 02 c0    	add    DWORD PTR ds:0xc002e3d0,esi
c001674c:	11 3d d4 e3 02 c0    	adc    DWORD PTR ds:0xc002e3d4,edi
c0016752:	80 3d 6d dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd6d,0x0
c0016759:	0f 84 42 01 00 00    	je     c00168a1 <timerHandler(unsigned long long)+0x16a>
c001675f:	fa                   	cli    
c0016760:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	ff 05 84 12 03 c0    	inc    DWORD PTR ds:0xc0031284
c001676f:	68 98 12 03 c0       	push   0xc0031298
c0016774:	e8 25 22 01 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	84 c0                	test   al,al
c001677e:	0f 85 a2 00 00 00    	jne    c0016826 <timerHandler(unsigned long long)+0xef>
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	68 98 12 03 c0       	push   0xc0031298
c001678c:	e8 29 22 01 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	89 c3                	mov    ebx,eax
c0016796:	83 ec 0c             	sub    esp,0xc
c0016799:	68 98 12 03 c0       	push   0xc0031298
c001679e:	e8 17 22 01 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167a3:	c7 04 24 98 12 03 c0 	mov    DWORD PTR [esp],0xc0031298
c00167aa:	89 c5                	mov    ebp,eax
c00167ac:	e8 11 22 01 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167b1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00167b4:	83 c4 10             	add    esp,0x10
c00167b7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00167ba:	39 15 d0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3d0,edx
c00167c0:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c00167c5:	19 c8                	sbb    eax,ecx
c00167c7:	72 21                	jb     c00167ea <timerHandler(unsigned long long)+0xb3>
c00167c9:	83 ec 0c             	sub    esp,0xc
c00167cc:	55                   	push   ebp
c00167cd:	e8 26 78 00 00       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	39 eb                	cmp    ebx,ebp
c00167d7:	75 21                	jne    c00167fa <timerHandler(unsigned long long)+0xc3>
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	68 98 12 03 c0       	push   0xc0031298
c00167e1:	e8 d4 21 01 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167e6:	89 c3                	mov    ebx,eax
c00167e8:	eb 0d                	jmp    c00167f7 <timerHandler(unsigned long long)+0xc0>
c00167ea:	50                   	push   eax
c00167eb:	50                   	push   eax
c00167ec:	55                   	push   ebp
c00167ed:	68 98 12 03 c0       	push   0xc0031298
c00167f2:	e8 79 22 01 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	68 98 12 03 c0       	push   0xc0031298
c0016802:	e8 97 21 01 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016807:	83 c4 10             	add    esp,0x10
c001680a:	84 c0                	test   al,al
c001680c:	75 18                	jne    c0016826 <timerHandler(unsigned long long)+0xef>
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	68 98 12 03 c0       	push   0xc0031298
c0016816:	e8 9f 21 01 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	39 d8                	cmp    eax,ebx
c0016820:	0f 85 70 ff ff ff    	jne    c0016796 <timerHandler(unsigned long long)+0x5f>
c0016826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001682f:	74 3d                	je     c001686e <timerHandler(unsigned long long)+0x137>
c0016831:	80 3d 6c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd6c,0x0
c0016838:	74 34                	je     c001686e <timerHandler(unsigned long long)+0x137>
c001683a:	fa                   	cli    
c001683b:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c0016841:	31 d2                	xor    edx,edx
c0016843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016848:	89 f9                	mov    ecx,edi
c001684a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001684d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016852:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016855:	39 c6                	cmp    esi,eax
c0016857:	19 d1                	sbb    ecx,edx
c0016859:	72 05                	jb     c0016860 <timerHandler(unsigned long long)+0x129>
c001685b:	e8 15 73 00 00       	call   c001db75 <schedule()>
c0016860:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0016865:	48                   	dec    eax
c0016866:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001686b:	75 01                	jne    c001686e <timerHandler(unsigned long long)+0x137>
c001686d:	fb                   	sti    
c001686e:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c0016873:	48                   	dec    eax
c0016874:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c0016879:	75 18                	jne    c0016893 <timerHandler(unsigned long long)+0x15c>
c001687b:	83 3d 80 12 03 c0 00 	cmp    DWORD PTR ds:0xc0031280,0x0
c0016882:	74 0f                	je     c0016893 <timerHandler(unsigned long long)+0x15c>
c0016884:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001688e:	e8 e2 72 00 00       	call   c001db75 <schedule()>
c0016893:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0016898:	48                   	dec    eax
c0016899:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001689e:	75 01                	jne    c00168a1 <timerHandler(unsigned long long)+0x16a>
c00168a0:	fb                   	sti    
c00168a1:	83 c4 0c             	add    esp,0xc
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	5f                   	pop    edi
c00168a7:	5d                   	pop    ebp
c00168a8:	c3                   	ret    

c00168a9 <setupTimer(int)>:
c00168a9:	57                   	push   edi
c00168aa:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00168af:	56                   	push   esi
c00168b0:	53                   	push   ebx
c00168b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168c4:	e8 a9 d6 ff ff       	call   c0013f72 <Device::getName()>
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00168cf:	0f 85 8d 00 00 00    	jne    c0016962 <setupTimer(int)+0xb9>
c00168d5:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00168da:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00168e1:	74 7f                	je     c0016962 <setupTimer(int)+0xb9>
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	68 5c 01 00 00       	push   0x15c
c00168eb:	e8 a9 8c ff ff       	call   c000f599 <malloc>
c00168f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00168f3:	89 c3                	mov    ebx,eax
c00168f5:	e8 1e fc 00 00       	call   c0026518 <PIT::PIT()>
c00168fa:	59                   	pop    ecx
c00168fb:	5f                   	pop    edi
c00168fc:	53                   	push   ebx
c00168fd:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c0016903:	e8 6a d3 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0016908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001690a:	6a 00                	push   0x0
c001690c:	6a 00                	push   0x0
c001690e:	56                   	push   esi
c001690f:	53                   	push   ebx
c0016910:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016913:	83 c4 14             	add    esp,0x14
c0016916:	68 60 01 00 00       	push   0x160
c001691b:	e8 79 8c ff ff       	call   c000f599 <malloc>
c0016920:	89 04 24             	mov    DWORD PTR [esp],eax
c0016923:	89 c7                	mov    edi,eax
c0016925:	e8 9e fa 00 00       	call   c00263c8 <APICTimer::APICTimer()>
c001692a:	6a 00                	push   0x0
c001692c:	6a 00                	push   0x0
c001692e:	56                   	push   esi
c001692f:	57                   	push   edi
c0016930:	e8 95 f9 00 00       	call   c00262ca <APICTimer::open(int, int, void*)>
c0016935:	83 c4 20             	add    esp,0x20
c0016938:	8b 03                	mov    eax,DWORD PTR [ebx]
c001693a:	6a 00                	push   0x0
c001693c:	6a 00                	push   0x0
c001693e:	6a 00                	push   0x0
c0016940:	53                   	push   ebx
c0016941:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016944:	58                   	pop    eax
c0016945:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001694a:	5a                   	pop    edx
c001694b:	57                   	push   edi
c001694c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016952:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016958:	e8 15 d3 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c001695d:	83 c4 10             	add    esp,0x10
c0016960:	eb 33                	jmp    c0016995 <setupTimer(int)+0xec>
c0016962:	83 ec 0c             	sub    esp,0xc
c0016965:	68 5c 01 00 00       	push   0x15c
c001696a:	e8 2a 8c ff ff       	call   c000f599 <malloc>
c001696f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016972:	89 c3                	mov    ebx,eax
c0016974:	e8 9f fb 00 00       	call   c0026518 <PIT::PIT()>
c0016979:	58                   	pop    eax
c001697a:	5a                   	pop    edx
c001697b:	53                   	push   ebx
c001697c:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c0016982:	e8 eb d2 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0016987:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016989:	6a 00                	push   0x0
c001698b:	6a 00                	push   0x0
c001698d:	56                   	push   esi
c001698e:	53                   	push   ebx
c001698f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016992:	83 c4 20             	add    esp,0x20
c0016995:	89 d8                	mov    eax,ebx
c0016997:	5b                   	pop    ebx
c0016998:	5e                   	pop    esi
c0016999:	5f                   	pop    edi
c001699a:	c3                   	ret    
c001699b:	90                   	nop

c001699c <VCache::VCache(PhysicalDisk*)>:
c001699c:	53                   	push   ebx
c001699d:	83 ec 18             	sub    esp,0x18
c00169a0:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c00169a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a9:	89 10                	mov    DWORD PTR [eax],edx
c00169ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00169b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00169c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00169cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00169d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00169de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00169e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00169f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a03:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a0e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a16:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a26:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a2d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016a35:	83 ec 0c             	sub    esp,0xc
c0016a38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a3c:	e8 58 8b ff ff       	call   c000f599 <malloc>
c0016a41:	83 c4 10             	add    esp,0x10
c0016a44:	89 c3                	mov    ebx,eax
c0016a46:	83 ec 0c             	sub    esp,0xc
c0016a49:	53                   	push   ebx
c0016a4a:	e8 ef 6e 00 00       	call   c001d93e <Mutex::Mutex()>
c0016a4f:	83 c4 10             	add    esp,0x10
c0016a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a56:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a68:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016a6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a73:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016a79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a7d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016a80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a84:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016a8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016a94:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016a97:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016aa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016aa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016aac:	05 00 01 00 00       	add    eax,0x100
c0016ab1:	c1 e0 04             	shl    eax,0x4
c0016ab4:	83 ec 0c             	sub    esp,0xc
c0016ab7:	50                   	push   eax
c0016ab8:	e8 dc 8a ff ff       	call   c000f599 <malloc>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	89 c2                	mov    edx,eax
c0016ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016adc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ae0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ae6:	c1 e0 07             	shl    eax,0x7
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	50                   	push   eax
c0016aed:	e8 a7 8a ff ff       	call   c000f599 <malloc>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	89 c2                	mov    edx,eax
c0016af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016afe:	90                   	nop
c0016aff:	83 c4 18             	add    esp,0x18
c0016b02:	5b                   	pop    ebx
c0016b03:	c3                   	ret    

c0016b04 <VCache::invalidateReadBuffer()>:
c0016b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b08:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b12:	c3                   	ret    
c0016b13:	90                   	nop

c0016b14 <VCache::writeWriteBuffer()>:
c0016b14:	53                   	push   ebx
c0016b15:	83 ec 14             	sub    esp,0x14
c0016b18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016b1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b27:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016b2a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016b2d:	50                   	push   eax
c0016b2e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b31:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016b38:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016b3f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016b43:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016b4a:	83 c4 28             	add    esp,0x28
c0016b4d:	5b                   	pop    ebx
c0016b4e:	c3                   	ret    
c0016b4f:	90                   	nop

c0016b50 <VCache::~VCache()>:
c0016b50:	83 ec 0c             	sub    esp,0xc
c0016b53:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c0016b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5c:	89 10                	mov    DWORD PTR [eax],edx
c0016b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b62:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016b65:	84 c0                	test   al,al
c0016b67:	74 0f                	je     c0016b78 <VCache::~VCache()+0x28>
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b70:	e8 9f ff ff ff       	call   c0016b14 <VCache::writeWriteBuffer()>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016b7f:	83 ec 0c             	sub    esp,0xc
c0016b82:	50                   	push   eax
c0016b83:	e8 21 8a ff ff       	call   c000f5a9 <free>
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	50                   	push   eax
c0016b96:	e8 0e 8a ff ff       	call   c000f5a9 <free>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	90                   	nop
c0016b9f:	83 c4 0c             	add    esp,0xc
c0016ba2:	c3                   	ret    
c0016ba3:	90                   	nop

c0016ba4 <VCache::~VCache()>:
c0016ba4:	83 ec 0c             	sub    esp,0xc
c0016ba7:	83 ec 0c             	sub    esp,0xc
c0016baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bae:	e8 9d ff ff ff       	call   c0016b50 <VCache::~VCache()>
c0016bb3:	83 c4 10             	add    esp,0x10
c0016bb6:	83 ec 08             	sub    esp,0x8
c0016bb9:	6a 44                	push   0x44
c0016bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bbf:	e8 9d bb ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0016bc4:	83 c4 10             	add    esp,0x10
c0016bc7:	83 c4 0c             	add    esp,0xc
c0016bca:	c3                   	ret    
c0016bcb:	90                   	nop

c0016bcc <VCache::write(unsigned long long, int, void*)>:
c0016bcc:	55                   	push   ebp
c0016bcd:	57                   	push   edi
c0016bce:	56                   	push   esi
c0016bcf:	53                   	push   ebx
c0016bd0:	83 ec 18             	sub    esp,0x18
c0016bd3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016bd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bdf:	68 a4 b3 02 c0       	push   0xc002b3a4
c0016be4:	e8 50 bc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0016be9:	5a                   	pop    edx
c0016bea:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bed:	e8 92 72 00 00       	call   c001de84 <Semaphore::acquire()>
c0016bf2:	c7 04 24 b6 b3 02 c0 	mov    DWORD PTR [esp],0xc002b3b6
c0016bf9:	e8 3b bc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0016bfe:	83 c4 10             	add    esp,0x10
c0016c01:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c05:	74 0c                	je     c0016c13 <VCache::write(unsigned long long, int, void*)+0x47>
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	53                   	push   ebx
c0016c0b:	e8 f4 fe ff ff       	call   c0016b04 <VCache::invalidateReadBuffer()>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	83 ec 0c             	sub    esp,0xc
c0016c16:	68 c8 b3 02 c0       	push   0xc002b3c8
c0016c1b:	e8 19 bc ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0016c20:	83 c4 10             	add    esp,0x10
c0016c23:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c27:	74 5c                	je     c0016c85 <VCache::write(unsigned long long, int, void*)+0xb9>
c0016c29:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016c2c:	89 e8                	mov    eax,ebp
c0016c2e:	99                   	cdq    
c0016c2f:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c32:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c35:	89 c1                	mov    ecx,eax
c0016c37:	89 d0                	mov    eax,edx
c0016c39:	31 f1                	xor    ecx,esi
c0016c3b:	31 f8                	xor    eax,edi
c0016c3d:	09 c1                	or     ecx,eax
c0016c3f:	75 38                	jne    c0016c79 <VCache::write(unsigned long long, int, void*)+0xad>
c0016c41:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016c46:	75 31                	jne    c0016c79 <VCache::write(unsigned long long, int, void*)+0xad>
c0016c48:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c4b:	89 ef                	mov    edi,ebp
c0016c4d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c57:	0f af f9             	imul   edi,ecx
c0016c5a:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016c5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c5f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016c62:	40                   	inc    eax
c0016c63:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016c66:	83 c0 80             	add    eax,0xffffff80
c0016c69:	75 5c                	jne    c0016cc7 <VCache::write(unsigned long long, int, void*)+0xfb>
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	53                   	push   ebx
c0016c6f:	e8 a0 fe ff ff       	call   c0016b14 <VCache::writeWriteBuffer()>
c0016c74:	83 c4 10             	add    esp,0x10
c0016c77:	eb 4e                	jmp    c0016cc7 <VCache::write(unsigned long long, int, void*)+0xfb>
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	53                   	push   ebx
c0016c7d:	e8 92 fe ff ff       	call   c0016b14 <VCache::writeWriteBuffer()>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c88:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016c8d:	7f 22                	jg     c0016cb1 <VCache::write(unsigned long long, int, void*)+0xe5>
c0016c8f:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016c92:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016c95:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016c99:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016c9d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016ca0:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016ca3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ca9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016caf:	eb 16                	jmp    c0016cc7 <VCache::write(unsigned long long, int, void*)+0xfb>
c0016cb1:	83 ec 0c             	sub    esp,0xc
c0016cb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016cba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016cbe:	57                   	push   edi
c0016cbf:	56                   	push   esi
c0016cc0:	50                   	push   eax
c0016cc1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cc4:	83 c4 20             	add    esp,0x20
c0016cc7:	83 ec 0c             	sub    esp,0xc
c0016cca:	68 da b3 02 c0       	push   0xc002b3da
c0016ccf:	e8 65 bb ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0016cd4:	58                   	pop    eax
c0016cd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cd8:	e8 03 78 00 00       	call   c001e4e0 <Semaphore::release()>
c0016cdd:	c7 04 24 ec b3 02 c0 	mov    DWORD PTR [esp],0xc002b3ec
c0016ce4:	e8 50 bb ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0016ce9:	83 c4 1c             	add    esp,0x1c
c0016cec:	31 c0                	xor    eax,eax
c0016cee:	5b                   	pop    ebx
c0016cef:	5e                   	pop    esi
c0016cf0:	5f                   	pop    edi
c0016cf1:	5d                   	pop    ebp
c0016cf2:	c3                   	ret    
c0016cf3:	90                   	nop

c0016cf4 <VCache::read(unsigned long long, int, void*)>:
c0016cf4:	55                   	push   ebp
c0016cf5:	57                   	push   edi
c0016cf6:	56                   	push   esi
c0016cf7:	53                   	push   ebx
c0016cf8:	83 ec 28             	sub    esp,0x28
c0016cfb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d03:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d07:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016d0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d0e:	e8 71 71 00 00       	call   c001de84 <Semaphore::acquire()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d1a:	74 0c                	je     c0016d28 <VCache::read(unsigned long long, int, void*)+0x34>
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	53                   	push   ebx
c0016d20:	e8 ef fd ff ff       	call   c0016b14 <VCache::writeWriteBuffer()>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	83 fd 01             	cmp    ebp,0x1
c0016d2b:	0f 85 80 00 00 00    	jne    c0016db1 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016d31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d38:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016d3f:	75 70                	jne    c0016db1 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016d41:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016d44:	89 e9                	mov    ecx,ebp
c0016d46:	f7 d9                	neg    ecx
c0016d48:	89 c8                	mov    eax,ecx
c0016d4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016d4e:	c1 f8 1f             	sar    eax,0x1f
c0016d51:	21 f1                	and    ecx,esi
c0016d53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d57:	89 c8                	mov    eax,ecx
c0016d59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d5d:	21 f9                	and    ecx,edi
c0016d5f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d63:	89 ca                	mov    edx,ecx
c0016d65:	74 0a                	je     c0016d71 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016d67:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016d6a:	75 05                	jne    c0016d71 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016d6c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016d6f:	74 23                	je     c0016d94 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016d78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016d7c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016d7f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016d82:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016d84:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016d87:	55                   	push   ebp
c0016d88:	52                   	push   edx
c0016d89:	50                   	push   eax
c0016d8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d8e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016d91:	83 c4 20             	add    esp,0x20
c0016d94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d97:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d9b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016da1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016da4:	48                   	dec    eax
c0016da5:	21 c6                	and    esi,eax
c0016da7:	0f af f1             	imul   esi,ecx
c0016daa:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016dad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016daf:	eb 1d                	jmp    c0016dce <VCache::read(unsigned long long, int, void*)+0xda>
c0016db1:	83 ec 0c             	sub    esp,0xc
c0016db4:	53                   	push   ebx
c0016db5:	e8 4a fd ff ff       	call   c0016b04 <VCache::invalidateReadBuffer()>
c0016dba:	5a                   	pop    edx
c0016dbb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016dc4:	55                   	push   ebp
c0016dc5:	57                   	push   edi
c0016dc6:	56                   	push   esi
c0016dc7:	50                   	push   eax
c0016dc8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016dcb:	83 c4 20             	add    esp,0x20
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dd4:	e8 07 77 00 00       	call   c001e4e0 <Semaphore::release()>
c0016dd9:	83 c4 2c             	add    esp,0x2c
c0016ddc:	31 c0                	xor    eax,eax
c0016dde:	5b                   	pop    ebx
c0016ddf:	5e                   	pop    esi
c0016de0:	5f                   	pop    edi
c0016de1:	5d                   	pop    ebp
c0016de2:	c3                   	ret    
c0016de3:	90                   	nop

c0016de4 <Video::putrect(int, int, int, int, unsigned int)>:
c0016de4:	55                   	push   ebp
c0016de5:	57                   	push   edi
c0016de6:	56                   	push   esi
c0016de7:	53                   	push   ebx
c0016de8:	83 ec 1c             	sub    esp,0x1c
c0016deb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016def:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016df3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016df7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016dfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e03:	01 df                	add    edi,ebx
c0016e05:	39 fb                	cmp    ebx,edi
c0016e07:	7d 1f                	jge    c0016e28 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e09:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e0d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016e11:	7d 12                	jge    c0016e25 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016e13:	8b 16                	mov    edx,DWORD PTR [esi]
c0016e15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016e19:	53                   	push   ebx
c0016e1a:	55                   	push   ebp
c0016e1b:	45                   	inc    ebp
c0016e1c:	56                   	push   esi
c0016e1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	eb e8                	jmp    c0016e0d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016e25:	43                   	inc    ebx
c0016e26:	eb dd                	jmp    c0016e05 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016e28:	83 c4 1c             	add    esp,0x1c
c0016e2b:	5b                   	pop    ebx
c0016e2c:	5e                   	pop    esi
c0016e2d:	5f                   	pop    edi
c0016e2e:	5d                   	pop    ebp
c0016e2f:	c3                   	ret    

c0016e30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016e30:	55                   	push   ebp
c0016e31:	57                   	push   edi
c0016e32:	31 ff                	xor    edi,edi
c0016e34:	56                   	push   esi
c0016e35:	53                   	push   ebx
c0016e36:	83 ec 1c             	sub    esp,0x1c
c0016e39:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016e3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e41:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016e48:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016e4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e51:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016e55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e59:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016e5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e60:	01 f9                	add    ecx,edi
c0016e62:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016e66:	7d 2f                	jge    c0016e97 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016e68:	31 f6                	xor    esi,esi
c0016e6a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e6e:	01 f2                	add    edx,esi
c0016e70:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016e74:	7d 1a                	jge    c0016e90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016e76:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e79:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016e7c:	46                   	inc    esi
c0016e7d:	51                   	push   ecx
c0016e7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016e82:	52                   	push   edx
c0016e83:	55                   	push   ebp
c0016e84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e8e:	eb da                	jmp    c0016e6a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016e90:	47                   	inc    edi
c0016e91:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016e95:	eb c5                	jmp    c0016e5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016e97:	83 c4 1c             	add    esp,0x1c
c0016e9a:	5b                   	pop    ebx
c0016e9b:	5e                   	pop    esi
c0016e9c:	5f                   	pop    edi
c0016e9d:	5d                   	pop    ebp
c0016e9e:	c3                   	ret    
c0016e9f:	90                   	nop

c0016ea0 <Video::blit(unsigned int*, int, int, int, int)>:
c0016ea0:	55                   	push   ebp
c0016ea1:	57                   	push   edi
c0016ea2:	56                   	push   esi
c0016ea3:	53                   	push   ebx
c0016ea4:	83 ec 1c             	sub    esp,0x1c
c0016ea7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016eab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016eaf:	85 c0                	test   eax,eax
c0016eb1:	79 02                	jns    c0016eb5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016eb3:	31 c0                	xor    eax,eax
c0016eb5:	c1 e0 02             	shl    eax,0x2
c0016eb8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ec0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ec4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016ec8:	39 d8                	cmp    eax,ebx
c0016eca:	7e 49                	jle    c0016f15 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016ecc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ed2:	7c 41                	jl     c0016f15 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016ed4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016ed8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016edc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ee0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016ee4:	39 f9                	cmp    ecx,edi
c0016ee6:	7e 22                	jle    c0016f0a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016ee8:	83 c5 04             	add    ebp,0x4
c0016eeb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ef1:	7c 14                	jl     c0016f07 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016ef3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016ef5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016ef8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016efc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f00:	56                   	push   esi
c0016f01:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f04:	83 c4 10             	add    esp,0x10
c0016f07:	47                   	inc    edi
c0016f08:	eb d2                	jmp    c0016edc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f0e:	43                   	inc    ebx
c0016f0f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016f13:	eb ab                	jmp    c0016ec0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016f15:	83 c4 1c             	add    esp,0x1c
c0016f18:	5b                   	pop    ebx
c0016f19:	5e                   	pop    esi
c0016f1a:	5f                   	pop    edi
c0016f1b:	5d                   	pop    ebp
c0016f1c:	c3                   	ret    
c0016f1d:	90                   	nop

c0016f1e <Video::clearScreen(unsigned int)>:
c0016f1e:	57                   	push   edi
c0016f1f:	56                   	push   esi
c0016f20:	53                   	push   ebx
c0016f21:	31 db                	xor    ebx,ebx
c0016f23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f27:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f2d:	7e 1f                	jle    c0016f4e <Video::clearScreen(unsigned int)+0x30>
c0016f2f:	31 ff                	xor    edi,edi
c0016f31:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f37:	7e 12                	jle    c0016f4b <Video::clearScreen(unsigned int)+0x2d>
c0016f39:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f3f:	53                   	push   ebx
c0016f40:	57                   	push   edi
c0016f41:	47                   	inc    edi
c0016f42:	56                   	push   esi
c0016f43:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f46:	83 c4 10             	add    esp,0x10
c0016f49:	eb e6                	jmp    c0016f31 <Video::clearScreen(unsigned int)+0x13>
c0016f4b:	43                   	inc    ebx
c0016f4c:	eb d9                	jmp    c0016f27 <Video::clearScreen(unsigned int)+0x9>
c0016f4e:	5b                   	pop    ebx
c0016f4f:	5e                   	pop    esi
c0016f50:	5f                   	pop    edi
c0016f51:	c3                   	ret    

c0016f52 <Video::putpixel(int, int, unsigned int)>:
c0016f52:	c7 44 24 04 10 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b410
c0016f5a:	e9 84 30 00 00       	jmp    c0019fe3 <Krnl::panic(char const*)>
c0016f5f:	90                   	nop

c0016f60 <Video::Video(char const*)>:
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f67:	83 ec 08             	sub    esp,0x8
c0016f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f6e:	50                   	push   eax
c0016f6f:	e8 02 cf ff ff       	call   c0013e76 <Device::Device(char const*)>
c0016f74:	83 c4 10             	add    esp,0x10
c0016f77:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c0016f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f80:	89 10                	mov    DWORD PTR [eax],edx
c0016f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f86:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016f90:	90                   	nop
c0016f91:	83 c4 0c             	add    esp,0xc
c0016f94:	c3                   	ret    
c0016f95:	90                   	nop

c0016f96 <Video::~Video()>:
c0016f96:	83 ec 0c             	sub    esp,0xc
c0016f99:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c0016f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa2:	89 10                	mov    DWORD PTR [eax],edx
c0016fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	50                   	push   eax
c0016fac:	e8 8f cb ff ff       	call   c0013b40 <Device::~Device()>
c0016fb1:	83 c4 10             	add    esp,0x10
c0016fb4:	90                   	nop
c0016fb5:	83 c4 0c             	add    esp,0xc
c0016fb8:	c3                   	ret    
c0016fb9:	90                   	nop

c0016fba <Video::~Video()>:
c0016fba:	83 ec 0c             	sub    esp,0xc
c0016fbd:	83 ec 0c             	sub    esp,0xc
c0016fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fc4:	e8 cd ff ff ff       	call   c0016f96 <Video::~Video()>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	83 ec 08             	sub    esp,0x8
c0016fcf:	68 64 01 00 00       	push   0x164
c0016fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd8:	e8 84 b7 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	83 c4 0c             	add    esp,0xc
c0016fe3:	c3                   	ret    

c0016fe4 <Video::isMonochrome()>:
c0016fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fe8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016fee:	c3                   	ret    
c0016fef:	90                   	nop

c0016ff0 <Video::getWidth()>:
c0016ff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ff4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ffa:	c3                   	ret    
c0016ffb:	90                   	nop

c0016ffc <Video::getHeight()>:
c0016ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017000:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017006:	c3                   	ret    
c0017007:	90                   	nop

c0017008 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017008:	55                   	push   ebp
c0017009:	57                   	push   edi
c001700a:	56                   	push   esi
c001700b:	53                   	push   ebx
c001700c:	83 ec 2c             	sub    esp,0x2c
c001700f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017013:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017017:	83 f8 01             	cmp    eax,0x1
c001701a:	19 c9                	sbb    ecx,ecx
c001701c:	31 db                	xor    ebx,ebx
c001701e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017022:	89 cd                	mov    ebp,ecx
c0017024:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001702c:	f7 d5                	not    ebp
c001702e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017034:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017038:	01 d8                	add    eax,ebx
c001703a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001703e:	56                   	push   esi
c001703f:	e8 b8 ff ff ff       	call   c0016ffc <Video::getHeight()>
c0017044:	59                   	pop    ecx
c0017045:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017049:	7e 70                	jle    c00170bb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001704b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001704f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017053:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017056:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001705a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001705e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017069:	89 f8                	mov    eax,edi
c001706b:	83 c0 20             	add    eax,0x20
c001706e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017072:	56                   	push   esi
c0017073:	e8 78 ff ff ff       	call   c0016ff0 <Video::getWidth()>
c0017078:	5a                   	pop    edx
c0017079:	39 c7                	cmp    edi,eax
c001707b:	7d 34                	jge    c00170b1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001707d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017082:	74 05                	je     c0017089 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017084:	8b 06                	mov    eax,DWORD PTR [esi]
c0017086:	55                   	push   ebp
c0017087:	eb 0d                	jmp    c0017096 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017089:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001708e:	74 12                	je     c00170a2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017090:	8b 06                	mov    eax,DWORD PTR [esi]
c0017092:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017096:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001709a:	57                   	push   edi
c001709b:	56                   	push   esi
c001709c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001709f:	83 c4 10             	add    esp,0x10
c00170a2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00170a6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00170aa:	47                   	inc    edi
c00170ab:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00170af:	75 c1                	jne    c0017072 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00170b1:	43                   	inc    ebx
c00170b2:	83 fb 20             	cmp    ebx,0x20
c00170b5:	0f 85 79 ff ff ff    	jne    c0017034 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00170bb:	83 c4 2c             	add    esp,0x2c
c00170be:	5b                   	pop    ebx
c00170bf:	5e                   	pop    esi
c00170c0:	5f                   	pop    edi
c00170c1:	5d                   	pop    ebp
c00170c2:	c3                   	ret    
c00170c3:	90                   	nop

c00170c4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00170c4:	55                   	push   ebp
c00170c5:	57                   	push   edi
c00170c6:	56                   	push   esi
c00170c7:	53                   	push   ebx
c00170c8:	83 ec 28             	sub    esp,0x28
c00170cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170cf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00170d3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00170d7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00170db:	c1 e6 08             	shl    esi,0x8
c00170de:	01 c6                	add    esi,eax
c00170e0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00170e4:	c1 e0 08             	shl    eax,0x8
c00170e7:	01 d0                	add    eax,edx
c00170e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f1:	0f af c6             	imul   eax,esi
c00170f4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00170fb:	50                   	push   eax
c00170fc:	e8 98 84 ff ff       	call   c000f599 <malloc>
c0017101:	83 c4 10             	add    esp,0x10
c0017104:	89 c7                	mov    edi,eax
c0017106:	85 c0                	test   eax,eax
c0017108:	75 10                	jne    c001711a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001710a:	83 ec 0c             	sub    esp,0xc
c001710d:	68 31 b4 02 c0       	push   0xc002b431
c0017112:	e8 cc 2e 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001711d:	ba 12 00 00 00       	mov    edx,0x12
c0017122:	84 c0                	test   al,al
c0017124:	74 11                	je     c0017137 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0017126:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001712a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001712e:	c1 fa 03             	sar    edx,0x3
c0017131:	0f af d1             	imul   edx,ecx
c0017134:	83 c2 12             	add    edx,0x12
c0017137:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001713b:	74 04                	je     c0017141 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001713d:	85 f6                	test   esi,esi
c001713f:	75 12                	jne    c0017153 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017141:	83 ec 0c             	sub    esp,0xc
c0017144:	68 41 b4 02 c0       	push   0xc002b441
c0017149:	e8 eb b6 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001714e:	e9 b8 00 00 00       	jmp    c001720b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0017153:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017157:	80 f9 02             	cmp    cl,0x2
c001715a:	0f 85 96 00 00 00    	jne    c00171f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017160:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017165:	75 0e                	jne    c0017175 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017167:	84 c0                	test   al,al
c0017169:	75 0a                	jne    c0017175 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001716b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001716e:	83 e8 18             	sub    eax,0x18
c0017171:	a8 f7                	test   al,0xf7
c0017173:	74 0a                	je     c001717f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017175:	83 ec 0c             	sub    esp,0xc
c0017178:	68 56 b4 02 c0       	push   0xc002b456
c001717d:	eb 7f                	jmp    c00171fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001717f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017187:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001718f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0017193:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001719b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001719f:	75 0c                	jne    c00171ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00171a1:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00171a6:	c1 e0 18             	shl    eax,0x18
c00171a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171ad:	45                   	inc    ebp
c00171ae:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00171b3:	c1 e1 10             	shl    ecx,0x10
c00171b6:	89 c8                	mov    eax,ecx
c00171b8:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00171bd:	c1 e1 08             	shl    ecx,0x8
c00171c0:	09 c1                	or     ecx,eax
c00171c2:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00171c6:	09 c1                	or     ecx,eax
c00171c8:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00171cc:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00171d0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00171d4:	c1 f8 03             	sar    eax,0x3
c00171d7:	01 c2                	add    edx,eax
c00171d9:	89 e8                	mov    eax,ebp
c00171db:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00171df:	39 c6                	cmp    esi,eax
c00171e1:	7f b0                	jg     c0017193 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00171e3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171eb:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00171ee:	7e 22                	jle    c0017212 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00171f0:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00171f4:	eb 99                	jmp    c001718f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00171f6:	50                   	push   eax
c00171f7:	50                   	push   eax
c00171f8:	51                   	push   ecx
c00171f9:	68 64 b4 02 c0       	push   0xc002b464
c00171fe:	e8 36 b6 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0017203:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017206:	e8 9e 83 ff ff       	call   c000f5a9 <free>
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	31 ff                	xor    edi,edi
c0017210:	eb 0f                	jmp    c0017221 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0017212:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017216:	89 30                	mov    DWORD PTR [eax],esi
c0017218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001721c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001721f:	89 30                	mov    DWORD PTR [eax],esi
c0017221:	83 c4 1c             	add    esp,0x1c
c0017224:	89 f8                	mov    eax,edi
c0017226:	5b                   	pop    ebx
c0017227:	5e                   	pop    esi
c0017228:	5f                   	pop    edi
c0017229:	5d                   	pop    ebp
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <Video::putTGA(int, int, unsigned char*, int)>:
c001722c:	55                   	push   ebp
c001722d:	57                   	push   edi
c001722e:	56                   	push   esi
c001722f:	53                   	push   ebx
c0017230:	83 ec 28             	sub    esp,0x28
c0017233:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017237:	8d 44 24 18          	lea    eax,[esp+0x18]
c001723b:	50                   	push   eax
c001723c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017240:	50                   	push   eax
c0017241:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017245:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017249:	56                   	push   esi
c001724a:	e8 75 fe ff ff       	call   c00170c4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001724f:	83 c4 20             	add    esp,0x20
c0017252:	85 c0                	test   eax,eax
c0017254:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017258:	74 35                	je     c001728f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001725a:	89 c7                	mov    edi,eax
c001725c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017260:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017264:	39 d8                	cmp    eax,ebx
c0017266:	7e 27                	jle    c001728f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017268:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001726c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017270:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017274:	39 e8                	cmp    eax,ebp
c0017276:	7e 14                	jle    c001728c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017278:	8b 06                	mov    eax,DWORD PTR [esi]
c001727a:	83 c7 04             	add    edi,0x4
c001727d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017280:	53                   	push   ebx
c0017281:	55                   	push   ebp
c0017282:	45                   	inc    ebp
c0017283:	56                   	push   esi
c0017284:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017287:	83 c4 10             	add    esp,0x10
c001728a:	eb e0                	jmp    c001726c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001728c:	43                   	inc    ebx
c001728d:	eb cd                	jmp    c001725c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001728f:	83 c4 1c             	add    esp,0x1c
c0017292:	5b                   	pop    ebx
c0017293:	5e                   	pop    esi
c0017294:	5f                   	pop    edi
c0017295:	5d                   	pop    ebp
c0017296:	c3                   	ret    
c0017297:	90                   	nop

c0017298 <ACPI::close(int, int, void*)>:
c0017298:	83 ec 1c             	sub    esp,0x1c
c001729b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00172a3:	74 0a                	je     c00172af <ACPI::close(int, int, void*)+0x17>
c00172a5:	b8 00 00 00 00       	mov    eax,0x0
c00172aa:	e9 8a 00 00 00       	jmp    c0017339 <ACPI::close(int, int, void*)+0xa1>
c00172af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00172b4:	75 27                	jne    c00172dd <ACPI::close(int, int, void*)+0x45>
c00172b6:	a1 08 04 03 c0       	mov    eax,ds:0xc0030408
c00172bb:	85 c0                	test   eax,eax
c00172bd:	74 07                	je     c00172c6 <ACPI::close(int, int, void*)+0x2e>
c00172bf:	a1 08 04 03 c0       	mov    eax,ds:0xc0030408
c00172c4:	ff d0                	call   eax
c00172c6:	83 ec 0c             	sub    esp,0xc
c00172c9:	68 c0 b4 02 c0       	push   0xc002b4c0
c00172ce:	e8 10 2d 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172db:	eb 5c                	jmp    c0017339 <ACPI::close(int, int, void*)+0xa1>
c00172dd:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00172e2:	75 50                	jne    c0017334 <ACPI::close(int, int, void*)+0x9c>
c00172e4:	a1 04 04 03 c0       	mov    eax,ds:0xc0030404
c00172e9:	85 c0                	test   eax,eax
c00172eb:	74 07                	je     c00172f4 <ACPI::close(int, int, void*)+0x5c>
c00172ed:	a1 04 04 03 c0       	mov    eax,ds:0xc0030404
c00172f2:	ff d0                	call   eax
c00172f4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00172f9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00172fe:	83 e0 02             	and    eax,0x2
c0017301:	74 1c                	je     c001731f <ACPI::close(int, int, void*)+0x87>
c0017303:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001730a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001730e:	89 c2                	mov    edx,eax
c0017310:	ec                   	in     al,dx
c0017311:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017315:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017319:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001731d:	eb da                	jmp    c00172f9 <ACPI::close(int, int, void*)+0x61>
c001731f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017326:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001732b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001732f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017333:	ee                   	out    dx,al
c0017334:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017339:	83 c4 1c             	add    esp,0x1c
c001733c:	c3                   	ret    

c001733d <findRSDP()>:
c001733d:	83 ec 1c             	sub    esp,0x1c
c0017340:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0017345:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001734b:	83 e0 04             	and    eax,0x4
c001734e:	84 c0                	test   al,al
c0017350:	75 07                	jne    c0017359 <findRSDP()+0x1c>
c0017352:	b8 00 00 00 00       	mov    eax,0x0
c0017357:	eb 6a                	jmp    c00173c3 <findRSDP()+0x86>
c0017359:	a1 b4 dd 02 c0       	mov    eax,ds:0xc002ddb4
c001735e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017363:	7f 1b                	jg     c0017380 <findRSDP()+0x43>
c0017365:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001736a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017370:	83 e2 fb             	and    edx,0xfffffffb
c0017373:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017379:	b8 00 00 00 00       	mov    eax,0x0
c001737e:	eb 43                	jmp    c00173c3 <findRSDP()+0x86>
c0017380:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017388:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017390:	77 2c                	ja     c00173be <findRSDP()+0x81>
c0017392:	83 ec 04             	sub    esp,0x4
c0017395:	6a 08                	push   0x8
c0017397:	68 5b b5 02 c0       	push   0xc002b55b
c001739c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173a0:	e8 a7 92 fe ff       	call   c000064c <memcmp>
c00173a5:	83 c4 10             	add    esp,0x10
c00173a8:	85 c0                	test   eax,eax
c00173aa:	0f 94 c0             	sete   al
c00173ad:	84 c0                	test   al,al
c00173af:	74 06                	je     c00173b7 <findRSDP()+0x7a>
c00173b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173b5:	eb 0c                	jmp    c00173c3 <findRSDP()+0x86>
c00173b7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00173bc:	eb ca                	jmp    c0017388 <findRSDP()+0x4b>
c00173be:	b8 00 00 00 00       	mov    eax,0x0
c00173c3:	83 c4 1c             	add    esp,0x1c
c00173c6:	c3                   	ret    

c00173c7 <loadACPITables(unsigned char*)>:
c00173c7:	57                   	push   edi
c00173c8:	56                   	push   esi
c00173c9:	53                   	push   ebx
c00173ca:	83 ec 60             	sub    esp,0x60
c00173cd:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00173d2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173d8:	83 e0 04             	and    eax,0x4
c00173db:	84 c0                	test   al,al
c00173dd:	0f 84 33 02 00 00    	je     c0017616 <loadACPITables(unsigned char*)+0x24f>
c00173e3:	a0 20 06 03 c0       	mov    al,ds:0xc0030620
c00173e8:	84 c0                	test   al,al
c00173ea:	74 75                	je     c0017461 <loadACPITables(unsigned char*)+0x9a>
c00173ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173f0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00173f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173fb:	83 e8 24             	sub    eax,0x24
c00173fe:	c1 e8 03             	shr    eax,0x3
c0017401:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017405:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001740d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017411:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017415:	0f 8d b2 00 00 00    	jge    c00174cd <loadACPITables(unsigned char*)+0x106>
c001741b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001741f:	83 c0 24             	add    eax,0x24
c0017422:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017426:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001742a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001742e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017432:	c1 e0 03             	shl    eax,0x3
c0017435:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017439:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001743d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017440:	8b 00                	mov    eax,DWORD PTR [eax]
c0017442:	89 c1                	mov    ecx,eax
c0017444:	a1 0c 04 03 c0       	mov    eax,ds:0xc003040c
c0017449:	8d 50 01             	lea    edx,[eax+0x1]
c001744c:	89 15 0c 04 03 c0    	mov    DWORD PTR ds:0xc003040c,edx
c0017452:	89 ca                	mov    edx,ecx
c0017454:	89 14 c5 24 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfbdc],edx
c001745b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001745f:	eb ac                	jmp    c001740d <loadACPITables(unsigned char*)+0x46>
c0017461:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017465:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017469:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001746d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017470:	83 e8 24             	sub    eax,0x24
c0017473:	c1 e8 02             	shr    eax,0x2
c0017476:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001747a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017482:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017486:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001748a:	7d 41                	jge    c00174cd <loadACPITables(unsigned char*)+0x106>
c001748c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017490:	83 c0 24             	add    eax,0x24
c0017493:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017497:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001749b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001749f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00174a3:	c1 e0 02             	shl    eax,0x2
c00174a6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00174b0:	a1 0c 04 03 c0       	mov    eax,ds:0xc003040c
c00174b5:	8d 50 01             	lea    edx,[eax+0x1]
c00174b8:	89 15 0c 04 03 c0    	mov    DWORD PTR ds:0xc003040c,edx
c00174be:	89 ca                	mov    edx,ecx
c00174c0:	89 14 c5 24 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfbdc],edx
c00174c7:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00174cb:	eb b5                	jmp    c0017482 <loadACPITables(unsigned char*)+0xbb>
c00174cd:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00174d5:	a1 0c 04 03 c0       	mov    eax,ds:0xc003040c
c00174da:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00174de:	0f 8d 33 01 00 00    	jge    c0017617 <loadACPITables(unsigned char*)+0x250>
c00174e4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00174e8:	8b 04 c5 24 04 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfbdc]
c00174ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00174fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174ff:	25 ff 0f 00 00       	and    eax,0xfff
c0017504:	89 c6                	mov    esi,eax
c0017506:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	6a 01                	push   0x1
c0017511:	e8 09 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017516:	83 c4 10             	add    esp,0x10
c0017519:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001751d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017523:	83 ec 0c             	sub    esp,0xc
c0017526:	6a 01                	push   0x1
c0017528:	6a 01                	push   0x1
c001752a:	50                   	push   eax
c001752b:	52                   	push   edx
c001752c:	53                   	push   ebx
c001752d:	e8 36 a8 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017532:	83 c4 20             	add    esp,0x20
c0017535:	09 f0                	or     eax,esi
c0017537:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001753b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001753f:	c1 e0 03             	shl    eax,0x3
c0017542:	05 20 04 03 c0       	add    eax,0xc0030420
c0017547:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001754b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001754f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017553:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001755b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001755f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017567:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001756b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001756f:	89 c6                	mov    esi,eax
c0017571:	89 d7                	mov    edi,edx
c0017573:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017575:	89 c8                	mov    eax,ecx
c0017577:	89 fa                	mov    edx,edi
c0017579:	89 f3                	mov    ebx,esi
c001757b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001757f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017583:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001758b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001758e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017596:	05 00 10 00 00       	add    eax,0x1000
c001759b:	c1 e8 0c             	shr    eax,0xc
c001759e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175ae:	25 ff 0f 00 00       	and    eax,0xfff
c00175b3:	89 c6                	mov    esi,eax
c00175b5:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c00175bb:	83 ec 0c             	sub    esp,0xc
c00175be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00175c2:	e8 58 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00175c7:	83 c4 10             	add    esp,0x10
c00175ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175ce:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175d4:	83 ec 0c             	sub    esp,0xc
c00175d7:	6a 01                	push   0x1
c00175d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00175dd:	50                   	push   eax
c00175de:	52                   	push   edx
c00175df:	53                   	push   ebx
c00175e0:	e8 83 a7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175e5:	83 c4 20             	add    esp,0x20
c00175e8:	09 f0                	or     eax,esi
c00175ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175f2:	83 ec 0c             	sub    esp,0xc
c00175f5:	50                   	push   eax
c00175f6:	e8 00 a1 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017602:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017606:	89 14 c5 24 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfbdc],edx
c001760d:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017611:	e9 bf fe ff ff       	jmp    c00174d5 <loadACPITables(unsigned char*)+0x10e>
c0017616:	90                   	nop
c0017617:	83 c4 60             	add    esp,0x60
c001761a:	5b                   	pop    ebx
c001761b:	5e                   	pop    esi
c001761c:	5f                   	pop    edi
c001761d:	c3                   	ret    

c001761e <findRSDT(unsigned char*)>:
c001761e:	57                   	push   edi
c001761f:	56                   	push   esi
c0017620:	53                   	push   ebx
c0017621:	83 ec 50             	sub    esp,0x50
c0017624:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0017629:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001762f:	83 e0 04             	and    eax,0x4
c0017632:	84 c0                	test   al,al
c0017634:	75 0a                	jne    c0017640 <findRSDT(unsigned char*)+0x22>
c0017636:	b8 00 00 00 00       	mov    eax,0x0
c001763b:	e9 21 01 00 00       	jmp    c0017761 <findRSDT(unsigned char*)+0x143>
c0017640:	89 e0                	mov    eax,esp
c0017642:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017646:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001764a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001764e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017656:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001765a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001765e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017662:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017666:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001766a:	89 c6                	mov    esi,eax
c001766c:	89 d7                	mov    edi,edx
c001766e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017670:	89 c8                	mov    eax,ecx
c0017672:	89 fa                	mov    edx,edi
c0017674:	89 f3                	mov    ebx,esi
c0017676:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001767a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001767e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017682:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017686:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001768a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017696:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001769a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001769e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00176a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00176aa:	25 ff 0f 00 00       	and    eax,0xfff
c00176af:	89 c6                	mov    esi,eax
c00176b1:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c00176b7:	83 ec 0c             	sub    esp,0xc
c00176ba:	6a 02                	push   0x2
c00176bc:	e8 5e 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00176c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176ce:	83 ec 0c             	sub    esp,0xc
c00176d1:	6a 01                	push   0x1
c00176d3:	6a 02                	push   0x2
c00176d5:	50                   	push   eax
c00176d6:	52                   	push   edx
c00176d7:	53                   	push   ebx
c00176d8:	e8 8b a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176dd:	83 c4 20             	add    esp,0x20
c00176e0:	09 f0                	or     eax,esi
c00176e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00176e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00176ea:	25 ff 0f 00 00       	and    eax,0xfff
c00176ef:	89 c6                	mov    esi,eax
c00176f1:	8b 1d d0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded0
c00176f7:	83 ec 0c             	sub    esp,0xc
c00176fa:	6a 02                	push   0x2
c00176fc:	e8 1e 9b ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017708:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001770e:	83 ec 0c             	sub    esp,0xc
c0017711:	6a 01                	push   0x1
c0017713:	6a 02                	push   0x2
c0017715:	50                   	push   eax
c0017716:	52                   	push   edx
c0017717:	53                   	push   ebx
c0017718:	e8 4b a6 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001771d:	83 c4 20             	add    esp,0x20
c0017720:	09 f0                	or     eax,esi
c0017722:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017726:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001772b:	75 11                	jne    c001773e <findRSDT(unsigned char*)+0x120>
c001772d:	c6 05 20 06 03 c0 00 	mov    BYTE PTR ds:0xc0030620,0x0
c0017734:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017738:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001773c:	eb 1f                	jmp    c001775d <findRSDT(unsigned char*)+0x13f>
c001773e:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017743:	75 11                	jne    c0017756 <findRSDT(unsigned char*)+0x138>
c0017745:	c6 05 20 06 03 c0 01 	mov    BYTE PTR ds:0xc0030620,0x1
c001774c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017750:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017754:	eb 07                	jmp    c001775d <findRSDT(unsigned char*)+0x13f>
c0017756:	b8 00 00 00 00       	mov    eax,0x0
c001775b:	eb 04                	jmp    c0017761 <findRSDT(unsigned char*)+0x143>
c001775d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017761:	83 c4 50             	add    esp,0x50
c0017764:	5b                   	pop    ebx
c0017765:	5e                   	pop    esi
c0017766:	5f                   	pop    edi
c0017767:	c3                   	ret    

c0017768 <findDataTable(unsigned char*, char*)>:
c0017768:	83 ec 1c             	sub    esp,0x1c
c001776b:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0017770:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017776:	83 e0 04             	and    eax,0x4
c0017779:	84 c0                	test   al,al
c001777b:	75 07                	jne    c0017784 <findDataTable(unsigned char*, char*)+0x1c>
c001777d:	b8 00 00 00 00       	mov    eax,0x0
c0017782:	eb 52                	jmp    c00177d6 <findDataTable(unsigned char*, char*)+0x6e>
c0017784:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001778c:	a1 0c 04 03 c0       	mov    eax,ds:0xc003040c
c0017791:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017795:	7d 3a                	jge    c00177d1 <findDataTable(unsigned char*, char*)+0x69>
c0017797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001779b:	c1 e0 03             	shl    eax,0x3
c001779e:	05 20 04 03 c0       	add    eax,0xc0030420
c00177a3:	83 ec 04             	sub    esp,0x4
c00177a6:	6a 04                	push   0x4
c00177a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177ac:	50                   	push   eax
c00177ad:	e8 9a 8e fe ff       	call   c000064c <memcmp>
c00177b2:	83 c4 10             	add    esp,0x10
c00177b5:	85 c0                	test   eax,eax
c00177b7:	0f 94 c0             	sete   al
c00177ba:	84 c0                	test   al,al
c00177bc:	74 0d                	je     c00177cb <findDataTable(unsigned char*, char*)+0x63>
c00177be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177c2:	8b 04 c5 24 04 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfbdc]
c00177c9:	eb 0b                	jmp    c00177d6 <findDataTable(unsigned char*, char*)+0x6e>
c00177cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177cf:	eb bb                	jmp    c001778c <findDataTable(unsigned char*, char*)+0x24>
c00177d1:	b8 00 00 00 00       	mov    eax,0x0
c00177d6:	83 c4 1c             	add    esp,0x1c
c00177d9:	c3                   	ret    

c00177da <scanMADT()>:
c00177da:	53                   	push   ebx
c00177db:	83 ec 38             	sub    esp,0x38
c00177de:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00177e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177e9:	83 e0 04             	and    eax,0x4
c00177ec:	84 c0                	test   al,al
c00177ee:	0f 84 4a 04 00 00    	je     c0017c3e <scanMADT()+0x464>
c00177f4:	e8 44 fb ff ff       	call   c001733d <findRSDP()>
c00177f9:	a3 2c 06 03 c0       	mov    ds:0xc003062c,eax
c00177fe:	a1 2c 06 03 c0       	mov    eax,ds:0xc003062c
c0017803:	85 c0                	test   eax,eax
c0017805:	75 19                	jne    c0017820 <scanMADT()+0x46>
c0017807:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001780c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017812:	83 e2 fb             	and    edx,0xfffffffb
c0017815:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001781b:	e9 22 04 00 00       	jmp    c0017c42 <scanMADT()+0x468>
c0017820:	a1 2c 06 03 c0       	mov    eax,ds:0xc003062c
c0017825:	83 ec 0c             	sub    esp,0xc
c0017828:	50                   	push   eax
c0017829:	e8 f0 fd ff ff       	call   c001761e <findRSDT(unsigned char*)>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	a3 28 06 03 c0       	mov    ds:0xc0030628,eax
c0017836:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c001783b:	85 c0                	test   eax,eax
c001783d:	75 19                	jne    c0017858 <scanMADT()+0x7e>
c001783f:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0017844:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001784a:	83 e2 fb             	and    edx,0xfffffffb
c001784d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017853:	e9 ea 03 00 00       	jmp    c0017c42 <scanMADT()+0x468>
c0017858:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c001785d:	83 ec 0c             	sub    esp,0xc
c0017860:	50                   	push   eax
c0017861:	e8 61 fb ff ff       	call   c00173c7 <loadACPITables(unsigned char*)>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c001786e:	83 ec 08             	sub    esp,0x8
c0017871:	68 64 b5 02 c0       	push   0xc002b564
c0017876:	50                   	push   eax
c0017877:	e8 ec fe ff ff       	call   c0017768 <findDataTable(unsigned char*, char*)>
c001787c:	83 c4 10             	add    esp,0x10
c001787f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017883:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017888:	75 19                	jne    c00178a3 <scanMADT()+0xc9>
c001788a:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001788f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017895:	83 e2 fe             	and    edx,0xfffffffe
c0017898:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001789e:	e9 9f 03 00 00       	jmp    c0017c42 <scanMADT()+0x468>
c00178a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00178ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00178b6:	0f 87 86 03 00 00    	ja     c0017c42 <scanMADT()+0x468>
c00178bc:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00178c4:	0f 87 78 03 00 00    	ja     c0017c42 <scanMADT()+0x468>
c00178ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d6:	8d 50 01             	lea    edx,[eax+0x1]
c00178d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178e5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00178e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ed:	8d 50 01             	lea    edx,[eax+0x1]
c00178f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178fc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017900:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017905:	0f 86 36 03 00 00    	jbe    c0017c41 <scanMADT()+0x467>
c001790b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017910:	75 57                	jne    c0017969 <scanMADT()+0x18f>
c0017912:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017916:	8d 50 01             	lea    edx,[eax+0x1]
c0017919:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001791d:	8a 15 20 08 03 c0    	mov    dl,BYTE PTR ds:0xc0030820
c0017923:	0f b6 d2             	movzx  edx,dl
c0017926:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001792a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001792e:	88 82 60 08 03 c0    	mov    BYTE PTR [edx-0x3ffcf7a0],al
c0017934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017938:	8d 50 01             	lea    edx,[eax+0x1]
c001793b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001793f:	8a 15 20 08 03 c0    	mov    dl,BYTE PTR ds:0xc0030820
c0017945:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017948:	88 0d 20 08 03 c0    	mov    BYTE PTR ds:0xc0030820,cl
c001794e:	0f b6 d2             	movzx  edx,dl
c0017951:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017955:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017959:	88 82 40 08 03 c0    	mov    BYTE PTR [edx-0x3ffcf7c0],al
c001795f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017964:	e9 c1 02 00 00       	jmp    c0017c2a <scanMADT()+0x450>
c0017969:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001796e:	0f 85 14 01 00 00    	jne    c0017a88 <scanMADT()+0x2ae>
c0017974:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017978:	8d 50 01             	lea    edx,[eax+0x1]
c001797b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001797f:	8a 15 e0 06 03 c0    	mov    dl,BYTE PTR ds:0xc00306e0
c0017985:	0f b6 d2             	movzx  edx,dl
c0017988:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001798c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017990:	88 82 00 07 03 c0    	mov    BYTE PTR [edx-0x3ffcf900],al
c0017996:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001799a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001799e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a2:	01 d0                	add    eax,edx
c00179a4:	83 c0 2c             	add    eax,0x2c
c00179a7:	8a 00                	mov    al,BYTE PTR [eax]
c00179a9:	0f b6 d0             	movzx  edx,al
c00179ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b0:	8d 48 01             	lea    ecx,[eax+0x1]
c00179b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179bb:	0f b6 c0             	movzx  eax,al
c00179be:	c1 e0 08             	shl    eax,0x8
c00179c1:	89 d1                	mov    ecx,edx
c00179c3:	09 c1                	or     ecx,eax
c00179c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c9:	8d 50 02             	lea    edx,[eax+0x2]
c00179cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179d0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179d4:	0f b6 c0             	movzx  eax,al
c00179d7:	c1 e0 10             	shl    eax,0x10
c00179da:	09 c1                	or     ecx,eax
c00179dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e0:	8d 50 03             	lea    edx,[eax+0x3]
c00179e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179e7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179eb:	0f b6 c0             	movzx  eax,al
c00179ee:	c1 e0 18             	shl    eax,0x18
c00179f1:	09 c1                	or     ecx,eax
c00179f3:	89 ca                	mov    edx,ecx
c00179f5:	a0 e0 06 03 c0       	mov    al,ds:0xc00306e0
c00179fa:	0f b6 c0             	movzx  eax,al
c00179fd:	89 14 85 20 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8e0],edx
c0017a04:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a11:	01 d0                	add    eax,edx
c0017a13:	83 c0 2c             	add    eax,0x2c
c0017a16:	8a 00                	mov    al,BYTE PTR [eax]
c0017a18:	0f b6 d0             	movzx  edx,al
c0017a1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a26:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a2a:	0f b6 c0             	movzx  eax,al
c0017a2d:	c1 e0 08             	shl    eax,0x8
c0017a30:	89 d1                	mov    ecx,edx
c0017a32:	09 c1                	or     ecx,eax
c0017a34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a38:	8d 50 02             	lea    edx,[eax+0x2]
c0017a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a3f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a43:	0f b6 c0             	movzx  eax,al
c0017a46:	c1 e0 10             	shl    eax,0x10
c0017a49:	09 c1                	or     ecx,eax
c0017a4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a4f:	8d 50 03             	lea    edx,[eax+0x3]
c0017a52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a56:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a5a:	0f b6 c0             	movzx  eax,al
c0017a5d:	c1 e0 18             	shl    eax,0x18
c0017a60:	09 c1                	or     ecx,eax
c0017a62:	89 ca                	mov    edx,ecx
c0017a64:	a0 e0 06 03 c0       	mov    al,ds:0xc00306e0
c0017a69:	0f b6 c0             	movzx  eax,al
c0017a6c:	89 14 85 a0 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf860],edx
c0017a73:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a78:	a0 e0 06 03 c0       	mov    al,ds:0xc00306e0
c0017a7d:	40                   	inc    eax
c0017a7e:	a2 e0 06 03 c0       	mov    ds:0xc00306e0,al
c0017a83:	e9 a2 01 00 00       	jmp    c0017c2a <scanMADT()+0x450>
c0017a88:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017a8d:	0f 85 e9 00 00 00    	jne    c0017b7c <scanMADT()+0x3a2>
c0017a93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a97:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aa6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017aaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aae:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ab5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ab9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017abd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ac1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ac5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac9:	01 d0                	add    eax,edx
c0017acb:	83 c0 2c             	add    eax,0x2c
c0017ace:	8a 00                	mov    al,BYTE PTR [eax]
c0017ad0:	0f b6 d0             	movzx  edx,al
c0017ad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ade:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ae2:	0f b6 c0             	movzx  eax,al
c0017ae5:	c1 e0 08             	shl    eax,0x8
c0017ae8:	89 d1                	mov    ecx,edx
c0017aea:	09 c1                	or     ecx,eax
c0017aec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af0:	8d 50 02             	lea    edx,[eax+0x2]
c0017af3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017af7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017afb:	0f b6 c0             	movzx  eax,al
c0017afe:	c1 e0 10             	shl    eax,0x10
c0017b01:	09 c1                	or     ecx,eax
c0017b03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b07:	8d 50 03             	lea    edx,[eax+0x3]
c0017b0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b0e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b12:	0f b6 c0             	movzx  eax,al
c0017b15:	c1 e0 18             	shl    eax,0x18
c0017b18:	09 c8                	or     eax,ecx
c0017b1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b1e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2b:	01 d0                	add    eax,edx
c0017b2d:	83 c0 2c             	add    eax,0x2c
c0017b30:	8a 00                	mov    al,BYTE PTR [eax]
c0017b32:	0f b6 c0             	movzx  eax,al
c0017b35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b39:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017b3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b40:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017b44:	0f b6 d2             	movzx  edx,dl
c0017b47:	c1 e2 08             	shl    edx,0x8
c0017b4a:	09 d0                	or     eax,edx
c0017b4c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017b51:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b56:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017b5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b5f:	88 90 c0 cf 02 c0    	mov    BYTE PTR [eax-0x3ffd3040],dl
c0017b65:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017b6a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017b6f:	66 89 84 12 c0 06 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf940],ax
c0017b77:	e9 ae 00 00 00       	jmp    c0017c2a <scanMADT()+0x450>
c0017b7c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017b81:	0f 85 97 00 00 00    	jne    c0017c1e <scanMADT()+0x444>
c0017b87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b96:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b9a:	0f b6 c0             	movzx  eax,al
c0017b9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba9:	01 d0                	add    eax,edx
c0017bab:	83 c0 2c             	add    eax,0x2c
c0017bae:	8a 00                	mov    al,BYTE PTR [eax]
c0017bb0:	0f b6 d0             	movzx  edx,al
c0017bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bbe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bc2:	0f b6 c0             	movzx  eax,al
c0017bc5:	c1 e0 08             	shl    eax,0x8
c0017bc8:	09 d0                	or     eax,edx
c0017bca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bce:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017bd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0017bda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bde:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017be6:	0f b6 c0             	movzx  eax,al
c0017be9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf1:	c1 e0 08             	shl    eax,0x8
c0017bf4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017bf8:	89 c1                	mov    ecx,eax
c0017bfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bfe:	c1 e0 18             	shl    eax,0x18
c0017c01:	89 c3                	mov    ebx,eax
c0017c03:	a1 30 06 03 c0       	mov    eax,ds:0xc0030630
c0017c08:	8d 50 01             	lea    edx,[eax+0x1]
c0017c0b:	89 15 30 06 03 c0    	mov    DWORD PTR ds:0xc0030630,edx
c0017c11:	09 d9                	or     ecx,ebx
c0017c13:	89 ca                	mov    edx,ecx
c0017c15:	89 14 85 40 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf9c0],edx
c0017c1c:	eb 0c                	jmp    c0017c2a <scanMADT()+0x450>
c0017c1e:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017c23:	75 05                	jne    c0017c2a <scanMADT()+0x450>
c0017c25:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017c2a:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017c2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c33:	01 d0                	add    eax,edx
c0017c35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c39:	e9 6d fc ff ff       	jmp    c00178ab <scanMADT()+0xd1>
c0017c3e:	90                   	nop
c0017c3f:	eb 01                	jmp    c0017c42 <scanMADT()+0x468>
c0017c41:	90                   	nop
c0017c42:	83 c4 38             	add    esp,0x38
c0017c45:	5b                   	pop    ebx
c0017c46:	c3                   	ret    
c0017c47:	90                   	nop

c0017c48 <ACPI::ACPI()>:
c0017c48:	83 ec 0c             	sub    esp,0xc
c0017c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c4f:	83 ec 08             	sub    esp,0x8
c0017c52:	68 69 b5 02 c0       	push   0xc002b569
c0017c57:	50                   	push   eax
c0017c58:	e8 19 c2 ff ff       	call   c0013e76 <Device::Device(char const*)>
c0017c5d:	83 c4 10             	add    esp,0x10
c0017c60:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0017c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c69:	89 10                	mov    DWORD PTR [eax],edx
c0017c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c6f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c88:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c92:	e8 43 fb ff ff       	call   c00177da <scanMADT()>
c0017c97:	90                   	nop
c0017c98:	83 c4 0c             	add    esp,0xc
c0017c9b:	c3                   	ret    

c0017c9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c9c:	83 ec 2c             	sub    esp,0x2c
c0017c9f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017ca3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ca7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017cab:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017caf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017cb4:	88 d0                	mov    al,dl
c0017cb6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017cba:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017cbf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ccb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cd1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017cd5:	0f 8d 97 00 00 00    	jge    c0017d72 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017cdb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ce3:	83 c2 2a             	add    edx,0x2a
c0017ce6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017cea:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017cef:	75 78                	jne    c0017d69 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017cf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cf9:	83 c2 2a             	add    edx,0x2a
c0017cfc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017d00:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017d04:	75 63                	jne    c0017d69 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017d06:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d0b:	74 3a                	je     c0017d47 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017d0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d15:	83 c2 2a             	add    edx,0x2a
c0017d18:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d23:	39 c2                	cmp    edx,eax
c0017d25:	74 10                	je     c0017d37 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017d27:	83 ec 0c             	sub    esp,0xc
c0017d2a:	68 e4 b4 02 c0       	push   0xc002b4e4
c0017d2f:	e8 af 22 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	83 ec 0c             	sub    esp,0xc
c0017d3a:	68 6e b5 02 c0       	push   0xc002b56e
c0017d3f:	e8 9f 22 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d53:	83 c2 2a             	add    edx,0x2a
c0017d56:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017d5a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017d5c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017d5f:	89 01                	mov    DWORD PTR [ecx],eax
c0017d61:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d64:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d69:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017d6d:	e9 55 ff ff ff       	jmp    c0017cc7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017d72:	90                   	nop
c0017d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d77:	83 c4 2c             	add    esp,0x2c
c0017d7a:	c2 04 00             	ret    0x4
c0017d7d:	90                   	nop

c0017d7e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d7e:	83 ec 1c             	sub    esp,0x1c
c0017d81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d8d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d92:	88 c8                	mov    al,cl
c0017d94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d98:	88 d0                	mov    al,dl
c0017d9a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dac:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017daf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017db3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dbb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017dc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dc5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dcc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ddb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ddf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017de6:	83 c2 2a             	add    edx,0x2a
c0017de9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017df1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dfb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017dfe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e02:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e0a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e10:	8d 50 01             	lea    edx,[eax+0x1]
c0017e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e17:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e21:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e27:	3d 00 02 00 00       	cmp    eax,0x200
c0017e2c:	75 10                	jne    c0017e3e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017e2e:	83 ec 0c             	sub    esp,0xc
c0017e31:	68 7d b5 02 c0       	push   0xc002b57d
c0017e36:	e8 a8 21 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	90                   	nop
c0017e3f:	83 c4 1c             	add    esp,0x1c
c0017e42:	c3                   	ret    
c0017e43:	90                   	nop

c0017e44 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017e44:	b8 00 00 00 00       	mov    eax,0x0
c0017e49:	c3                   	ret    

c0017e4a <ACPI::detectPCI()>:
c0017e4a:	53                   	push   ebx
c0017e4b:	83 ec 28             	sub    esp,0x28
c0017e4e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e53:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017e58:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0017e5d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e63:	83 e0 04             	and    eax,0x4
c0017e66:	84 c0                	test   al,al
c0017e68:	74 2b                	je     c0017e95 <ACPI::detectPCI()+0x4b>
c0017e6a:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c0017e6f:	83 ec 08             	sub    esp,0x8
c0017e72:	68 9a b5 02 c0       	push   0xc002b59a
c0017e77:	50                   	push   eax
c0017e78:	e8 eb f8 ff ff       	call   c0017768 <findDataTable(unsigned char*, char*)>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017e89:	74 0a                	je     c0017e95 <ACPI::detectPCI()+0x4b>
c0017e8b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e90:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e95:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017e9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ea3:	3c 01                	cmp    al,0x1
c0017ea5:	75 0c                	jne    c0017eb3 <ACPI::detectPCI()+0x69>
c0017ea7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017eac:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017eb1:	eb 26                	jmp    c0017ed9 <ACPI::detectPCI()+0x8f>
c0017eb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0017eb9:	3c 02                	cmp    al,0x2
c0017ebb:	75 1c                	jne    c0017ed9 <ACPI::detectPCI()+0x8f>
c0017ebd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ec2:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ec7:	74 10                	je     c0017ed9 <ACPI::detectPCI()+0x8f>
c0017ec9:	83 ec 0c             	sub    esp,0xc
c0017ecc:	68 14 b5 02 c0       	push   0xc002b514
c0017ed1:	e8 0d 21 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017edd:	83 f0 01             	xor    eax,0x1
c0017ee0:	84 c0                	test   al,al
c0017ee2:	74 3f                	je     c0017f23 <ACPI::detectPCI()+0xd9>
c0017ee4:	e8 67 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017ee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017eed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017ef2:	75 0c                	jne    c0017f00 <ACPI::detectPCI()+0xb6>
c0017ef4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ef9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017efe:	eb 23                	jmp    c0017f23 <ACPI::detectPCI()+0xd9>
c0017f00:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017f05:	75 1c                	jne    c0017f23 <ACPI::detectPCI()+0xd9>
c0017f07:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f0c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f11:	74 10                	je     c0017f23 <ACPI::detectPCI()+0xd9>
c0017f13:	83 ec 0c             	sub    esp,0xc
c0017f16:	68 14 b5 02 c0       	push   0xc002b514
c0017f1b:	e8 c3 20 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0017f20:	83 c4 10             	add    esp,0x10
c0017f23:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017f28:	74 7e                	je     c0017fa8 <ACPI::detectPCI()+0x15e>
c0017f2a:	83 ec 0c             	sub    esp,0xc
c0017f2d:	68 9f b5 02 c0       	push   0xc002b59f
c0017f32:	e8 bc 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017f42:	83 ec 0c             	sub    esp,0xc
c0017f45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f49:	e8 4b 76 ff ff       	call   c000f599 <malloc>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	89 c3                	mov    ebx,eax
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	53                   	push   ebx
c0017f57:	e8 b2 a5 00 00       	call   c002250e <PCI::PCI()>
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f67:	83 ec 08             	sub    esp,0x8
c0017f6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f6e:	50                   	push   eax
c0017f6f:	e8 fe bc ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0017f74:	83 c4 10             	add    esp,0x10
c0017f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f7d:	83 c0 08             	add    eax,0x8
c0017f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f82:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f87:	74 07                	je     c0017f90 <ACPI::detectPCI()+0x146>
c0017f89:	ba 01 00 00 00       	mov    edx,0x1
c0017f8e:	eb 05                	jmp    c0017f95 <ACPI::detectPCI()+0x14b>
c0017f90:	ba 02 00 00 00       	mov    edx,0x2
c0017f95:	6a 00                	push   0x0
c0017f97:	6a 00                	push   0x0
c0017f99:	52                   	push   edx
c0017f9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f9e:	ff d0                	call   eax
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	e9 9e 00 00 00       	jmp    c0018046 <ACPI::detectPCI()+0x1fc>
c0017fa8:	83 ec 0c             	sub    esp,0xc
c0017fab:	68 b7 b5 02 c0       	push   0xc002b5b7
c0017fb0:	e8 84 a8 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0017fb5:	83 c4 10             	add    esp,0x10
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	68 c2 b5 02 c0       	push   0xc002b5c2
c0017fc0:	e8 2e 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017fcf:	83 ec 0c             	sub    esp,0xc
c0017fd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017fd6:	e8 be 75 ff ff       	call   c000f599 <malloc>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	89 c3                	mov    ebx,eax
c0017fe0:	83 ec 0c             	sub    esp,0xc
c0017fe3:	53                   	push   ebx
c0017fe4:	e8 8f b0 00 00       	call   c0023078 <IDE::IDE()>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ff4:	83 ec 08             	sub    esp,0x8
c0017ff7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ffb:	50                   	push   eax
c0017ffc:	e8 71 bc ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0018001:	83 c4 10             	add    esp,0x10
c0018004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018008:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0018012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018016:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001801f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018023:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001802c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018030:	8b 00                	mov    eax,DWORD PTR [eax]
c0018032:	83 c0 08             	add    eax,0x8
c0018035:	8b 00                	mov    eax,DWORD PTR [eax]
c0018037:	6a 00                	push   0x0
c0018039:	6a 00                	push   0x0
c001803b:	6a 00                	push   0x0
c001803d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018041:	ff d0                	call   eax
c0018043:	83 c4 10             	add    esp,0x10
c0018046:	90                   	nop
c0018047:	83 c4 28             	add    esp,0x28
c001804a:	5b                   	pop    ebx
c001804b:	c3                   	ret    

c001804c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001804c:	83 ec 1c             	sub    esp,0x1c
c001804f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018053:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018056:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001805a:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001805f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018064:	83 ec 08             	sub    esp,0x8
c0018067:	52                   	push   edx
c0018068:	50                   	push   eax
c0018069:	e8 42 6b ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c001806e:	83 c4 10             	add    esp,0x10
c0018071:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018075:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001807a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001807f:	83 ec 04             	sub    esp,0x4
c0018082:	6a 01                	push   0x1
c0018084:	52                   	push   edx
c0018085:	50                   	push   eax
c0018086:	e8 57 6c ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001808b:	83 c4 10             	add    esp,0x10
c001808e:	90                   	nop
c001808f:	83 c4 1c             	add    esp,0x1c
c0018092:	c3                   	ret    
c0018093:	90                   	nop

c0018094 <ACPI::sleep()>:
c0018094:	83 ec 0c             	sub    esp,0xc
c0018097:	a1 00 04 03 c0       	mov    eax,ds:0xc0030400
c001809c:	85 c0                	test   eax,eax
c001809e:	74 07                	je     c00180a7 <ACPI::sleep()+0x13>
c00180a0:	a1 00 04 03 c0       	mov    eax,ds:0xc0030400
c00180a5:	ff d0                	call   eax
c00180a7:	90                   	nop
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	c3                   	ret    

c00180ac <ACPI::open(int, int, void*)>:
c00180ac:	57                   	push   edi
c00180ad:	56                   	push   esi
c00180ae:	53                   	push   ebx
c00180af:	81 ec 60 01 00 00    	sub    esp,0x160
c00180b5:	83 ec 0c             	sub    esp,0xc
c00180b8:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180bf:	e8 86 fd ff ff       	call   c0017e4a <ACPI::detectPCI()>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	83 ec 0c             	sub    esp,0xc
c00180ca:	68 3c b5 02 c0       	push   0xc002b53c
c00180cf:	e8 1f 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	68 d7 b5 02 c0       	push   0xc002b5d7
c00180df:	e8 55 46 00 00       	call   c001c739 <Thr::loadKernelSymbolTable(char const*)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	83 ec 0c             	sub    esp,0xc
c00180ea:	68 f5 b5 02 c0       	push   0xc002b5f5
c00180ef:	e8 ff 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	83 ec 04             	sub    esp,0x4
c00180fa:	6a 0c                	push   0xc
c00180fc:	68 10 b6 02 c0       	push   0xc002b610
c0018101:	68 21 b6 02 c0       	push   0xc002b621
c0018106:	e8 94 2c 00 00       	call   c001ad9f <Reg::readIntWithDefault(char*, char*, int)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018115:	83 ec 0c             	sub    esp,0xc
c0018118:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001811f:	e8 05 93 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 ec 0c             	sub    esp,0xc
c001812a:	68 35 a0 02 c0       	push   0xc002a035
c001812f:	e8 bf 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018134:	83 c4 10             	add    esp,0x10
c0018137:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c001813d:	83 ec 08             	sub    esp,0x8
c0018140:	6a 01                	push   0x1
c0018142:	68 28 b6 02 c0       	push   0xc002b628
c0018147:	e8 64 50 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	83 ec 08             	sub    esp,0x8
c0018152:	53                   	push   ebx
c0018153:	50                   	push   eax
c0018154:	e8 88 52 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018163:	83 ec 08             	sub    esp,0x8
c0018166:	6a 12                	push   0x12
c0018168:	50                   	push   eax
c0018169:	e8 88 be ff ff       	call   c0013ff6 <getDevicesOfType(DeviceType)>
c001816e:	83 c4 0c             	add    esp,0xc
c0018171:	83 ec 0c             	sub    esp,0xc
c0018174:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001817b:	50                   	push   eax
c001817c:	e8 13 0a 01 00       	call   c0028b94 <LinkedList<Device>::isEmpty()>
c0018181:	83 c4 10             	add    esp,0x10
c0018184:	83 f0 01             	xor    eax,0x1
c0018187:	84 c0                	test   al,al
c0018189:	0f 84 43 01 00 00    	je     c00182d2 <ACPI::open(int, int, void*)+0x226>
c001818f:	83 ec 0c             	sub    esp,0xc
c0018192:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018199:	50                   	push   eax
c001819a:	e8 11 0a 01 00       	call   c0028bb0 <LinkedList<Device>::getFirstElement()>
c001819f:	83 c4 10             	add    esp,0x10
c00181a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00181a9:	83 ec 0c             	sub    esp,0xc
c00181ac:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181b3:	50                   	push   eax
c00181b4:	e8 ff 09 01 00       	call   c0028bb8 <LinkedList<Device>::removeFirst()>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00181c3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00181ca:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00181d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d5:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00181db:	ba 09 00 00 00       	mov    edx,0x9
c00181e0:	fc                   	cld    
c00181e1:	89 c7                	mov    edi,eax
c00181e3:	89 de                	mov    esi,ebx
c00181e5:	89 d1                	mov    ecx,edx
c00181e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181e9:	83 ec 08             	sub    esp,0x8
c00181ec:	8d 44 24 38          	lea    eax,[esp+0x38]
c00181f0:	50                   	push   eax
c00181f1:	83 ec 24             	sub    esp,0x24
c00181f4:	89 e0                	mov    eax,esp
c00181f6:	89 c3                	mov    ebx,eax
c00181f8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00181fc:	ba 09 00 00 00       	mov    edx,0x9
c0018201:	89 df                	mov    edi,ebx
c0018203:	89 c6                	mov    esi,eax
c0018205:	89 d1                	mov    ecx,edx
c0018207:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018209:	e8 de a7 00 00       	call   c00229ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001820e:	83 c4 30             	add    esp,0x30
c0018211:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018218:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018220:	0f 84 4b ff ff ff    	je     c0018171 <ACPI::open(int, int, void*)+0xc5>
c0018226:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018231:	83 ec 0c             	sub    esp,0xc
c0018234:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001823b:	e8 59 73 ff ff       	call   c000f599 <malloc>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	89 c3                	mov    ebx,eax
c0018245:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001824a:	83 ec 04             	sub    esp,0x4
c001824d:	50                   	push   eax
c001824e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018255:	53                   	push   ebx
c0018256:	e8 3d ab ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018265:	83 ec 0c             	sub    esp,0xc
c0018268:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001826f:	e8 f6 ad ff ff       	call   c001306a <File::exists()>
c0018274:	83 c4 10             	add    esp,0x10
c0018277:	84 c0                	test   al,al
c0018279:	74 27                	je     c00182a2 <ACPI::open(int, int, void*)+0x1f6>
c001827b:	83 ec 08             	sub    esp,0x8
c001827e:	6a 01                	push   0x1
c0018280:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018287:	e8 24 4f 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	83 ec 08             	sub    esp,0x8
c0018292:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018299:	50                   	push   eax
c001829a:	e8 42 51 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00182aa:	0f 84 c1 fe ff ff    	je     c0018171 <ACPI::open(int, int, void*)+0xc5>
c00182b0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00182b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00182b9:	83 c0 08             	add    eax,0x8
c00182bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00182be:	83 ec 0c             	sub    esp,0xc
c00182c1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182c8:	ff d0                	call   eax
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	e9 9f fe ff ff       	jmp    c0018171 <ACPI::open(int, int, void*)+0xc5>
c00182d2:	83 ec 0c             	sub    esp,0xc
c00182d5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182dc:	50                   	push   eax
c00182dd:	e8 b0 08 01 00       	call   c0028b92 <LinkedList<Device>::~LinkedList()>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c00182eb:	83 ec 08             	sub    esp,0x8
c00182ee:	6a 01                	push   0x1
c00182f0:	68 43 b6 02 c0       	push   0xc002b643
c00182f5:	e8 b6 4e 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	83 ec 08             	sub    esp,0x8
c0018300:	53                   	push   ebx
c0018301:	50                   	push   eax
c0018302:	e8 da 50 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	8b 1d 68 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd68
c0018310:	83 ec 08             	sub    esp,0x8
c0018313:	6a 01                	push   0x1
c0018315:	68 60 b6 02 c0       	push   0xc002b660
c001831a:	e8 91 4e 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 ec 08             	sub    esp,0x8
c0018325:	53                   	push   ebx
c0018326:	50                   	push   eax
c0018327:	e8 b5 50 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c001832c:	83 c4 10             	add    esp,0x10
c001832f:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0018334:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001833a:	83 e0 04             	and    eax,0x4
c001833d:	84 c0                	test   al,al
c001833f:	0f 84 0d 01 00 00    	je     c0018452 <ACPI::open(int, int, void*)+0x3a6>
c0018345:	83 ec 0c             	sub    esp,0xc
c0018348:	68 7d b6 02 c0       	push   0xc002b67d
c001834d:	e8 a1 72 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018352:	83 c4 10             	add    esp,0x10
c0018355:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018360:	83 ec 0c             	sub    esp,0xc
c0018363:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001836a:	e8 2a 72 ff ff       	call   c000f599 <malloc>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	89 c3                	mov    ebx,eax
c0018374:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c0018379:	83 ec 04             	sub    esp,0x4
c001837c:	50                   	push   eax
c001837d:	68 9a b6 02 c0       	push   0xc002b69a
c0018382:	53                   	push   ebx
c0018383:	e8 10 aa ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c0018388:	83 c4 10             	add    esp,0x10
c001838b:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018392:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001839a:	74 1a                	je     c00183b6 <ACPI::open(int, int, void*)+0x30a>
c001839c:	83 ec 0c             	sub    esp,0xc
c001839f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183a6:	e8 bf ac ff ff       	call   c001306a <File::exists()>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	84 c0                	test   al,al
c00183b0:	74 04                	je     c00183b6 <ACPI::open(int, int, void*)+0x30a>
c00183b2:	b0 01                	mov    al,0x1
c00183b4:	eb 02                	jmp    c00183b8 <ACPI::open(int, int, void*)+0x30c>
c00183b6:	b0 00                	mov    al,0x0
c00183b8:	84 c0                	test   al,al
c00183ba:	74 25                	je     c00183e1 <ACPI::open(int, int, void*)+0x335>
c00183bc:	83 ec 08             	sub    esp,0x8
c00183bf:	6a 01                	push   0x1
c00183c1:	68 9a b6 02 c0       	push   0xc002b69a
c00183c6:	e8 e5 4d 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c00183cb:	83 c4 10             	add    esp,0x10
c00183ce:	83 ec 08             	sub    esp,0x8
c00183d1:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00183d8:	50                   	push   eax
c00183d9:	e8 03 50 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183e9:	74 27                	je     c0018412 <ACPI::open(int, int, void*)+0x366>
c00183eb:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183f3:	74 1d                	je     c0018412 <ACPI::open(int, int, void*)+0x366>
c00183f5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00183fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00183fe:	83 c0 08             	add    eax,0x8
c0018401:	8b 00                	mov    eax,DWORD PTR [eax]
c0018403:	83 ec 0c             	sub    esp,0xc
c0018406:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001840d:	ff d0                	call   eax
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c0018417:	83 ec 08             	sub    esp,0x8
c001841a:	68 b7 b6 02 c0       	push   0xc002b6b7
c001841f:	50                   	push   eax
c0018420:	e8 43 f3 ff ff       	call   c0017768 <findDataTable(unsigned char*, char*)>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001842f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018437:	74 19                	je     c0018452 <ACPI::open(int, int, void*)+0x3a6>
c0018439:	83 ec 08             	sub    esp,0x8
c001843c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018443:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001844a:	e8 fd fb ff ff       	call   c001804c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	b8 00 00 00 00       	mov    eax,0x0
c0018457:	81 c4 60 01 00 00    	add    esp,0x160
c001845d:	5b                   	pop    ebx
c001845e:	5e                   	pop    esi
c001845f:	5f                   	pop    edi
c0018460:	c3                   	ret    
c0018461:	90                   	nop

c0018462 <CPU::close(int, int, void*)>:
c0018462:	31 c0                	xor    eax,eax
c0018464:	c3                   	ret    
c0018465:	90                   	nop

c0018466 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018466:	55                   	push   ebp
c0018467:	57                   	push   edi
c0018468:	56                   	push   esi
c0018469:	53                   	push   ebx
c001846a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001846e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018472:	89 ce                	mov    esi,ecx
c0018474:	89 d5                	mov    ebp,edx
c0018476:	80 f9 04             	cmp    cl,0x4
c0018479:	75 28                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001847b:	8d 42 f9             	lea    eax,[edx-0x7]
c001847e:	3c 03                	cmp    al,0x3
c0018480:	0f 86 63 01 00 00    	jbe    c00185e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018486:	80 fa 03             	cmp    dl,0x3
c0018489:	0f 84 5a 01 00 00    	je     c00185e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001848f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018492:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c0018497:	89 fb                	mov    ebx,edi
c0018499:	80 fb 01             	cmp    bl,0x1
c001849c:	77 4e                	ja     c00184ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001849e:	e9 52 01 00 00       	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a3:	80 f9 05             	cmp    cl,0x5
c00184a6:	75 4d                	jne    c00184f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00184a8:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00184ad:	80 fa 03             	cmp    dl,0x3
c00184b0:	0f 86 3f 01 00 00    	jbe    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b6:	8d 7a fa             	lea    edi,[edx-0x6]
c00184b9:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c00184be:	89 fb                	mov    ebx,edi
c00184c0:	80 fb 01             	cmp    bl,0x1
c00184c3:	0f 86 2c 01 00 00    	jbe    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c9:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c00184ce:	80 fa 08             	cmp    dl,0x8
c00184d1:	0f 84 1e 01 00 00    	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d7:	89 d7                	mov    edi,edx
c00184d9:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c00184de:	83 e7 fb             	and    edi,0xfffffffb
c00184e1:	89 fb                	mov    ebx,edi
c00184e3:	80 fb 09             	cmp    bl,0x9
c00184e6:	0f 84 09 01 00 00    	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ec:	31 c0                	xor    eax,eax
c00184ee:	89 eb                	mov    ebx,ebp
c00184f0:	0f b6 fb             	movzx  edi,bl
c00184f3:	eb 30                	jmp    c0018525 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00184f5:	31 c0                	xor    eax,eax
c00184f7:	80 f9 06             	cmp    cl,0x6
c00184fa:	75 f2                	jne    c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184fc:	80 fa 0a             	cmp    dl,0xa
c00184ff:	77 ed                	ja     c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018501:	bf de 05 00 00       	mov    edi,0x5de
c0018506:	0f a3 d7             	bt     edi,edx
c0018509:	73 e3                	jae    c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001850b:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0018510:	e9 e0 00 00 00       	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018515:	39 c7                	cmp    edi,eax
c0018517:	0f 84 d3 00 00 00    	je     c00185f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001851d:	40                   	inc    eax
c001851e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018523:	74 09                	je     c001852e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018525:	89 f3                	mov    ebx,esi
c0018527:	80 fb 0f             	cmp    bl,0xf
c001852a:	75 f1                	jne    c001851d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001852c:	eb e7                	jmp    c0018515 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001852e:	80 f9 10             	cmp    cl,0x10
c0018531:	75 14                	jne    c0018547 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018533:	8d 42 fc             	lea    eax,[edx-0x4]
c0018536:	83 e0 fb             	and    eax,0xfffffffb
c0018539:	3c 02                	cmp    al,0x2
c001853b:	76 34                	jbe    c0018571 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001853d:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018542:	80 fa 02             	cmp    dl,0x2
c0018545:	eb 24                	jmp    c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018547:	80 f9 11             	cmp    cl,0x11
c001854a:	75 13                	jne    c001855f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001854c:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018551:	80 fa 03             	cmp    dl,0x3
c0018554:	0f 85 9b 00 00 00    	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855a:	e9 91 00 00 00       	jmp    c00185f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001855f:	80 f9 12             	cmp    cl,0x12
c0018562:	75 14                	jne    c0018578 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018564:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018569:	fe ca                	dec    dl
c001856b:	0f 85 84 00 00 00    	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018571:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c0018576:	eb 7d                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018578:	80 f9 14             	cmp    cl,0x14
c001857b:	75 12                	jne    c001858f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001857d:	4a                   	dec    edx
c001857e:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018583:	80 fa 01             	cmp    dl,0x1
c0018586:	77 6d                	ja     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018588:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c001858d:	eb 66                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001858f:	80 f9 15             	cmp    cl,0x15
c0018592:	75 31                	jne    c00185c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018594:	b8 20 d2 02 c0       	mov    eax,0xc002d220
c0018599:	80 fa 01             	cmp    dl,0x1
c001859c:	74 57                	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001859e:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c00185a3:	80 fa 13             	cmp    dl,0x13
c00185a6:	76 0c                	jbe    c00185b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00185a8:	80 fa 30             	cmp    dl,0x30
c00185ab:	75 48                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ad:	b8 40 d2 02 c0       	mov    eax,0xc002d240
c00185b2:	eb 41                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b4:	b9 04 00 09 00       	mov    ecx,0x90004
c00185b9:	0f a3 d1             	bt     ecx,edx
c00185bc:	73 37                	jae    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185be:	b8 30 d2 02 c0       	mov    eax,0xc002d230
c00185c3:	eb 30                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c5:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c00185ca:	80 f9 16             	cmp    cl,0x16
c00185cd:	75 26                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185cf:	b8 50 d2 02 c0       	mov    eax,0xc002d250
c00185d4:	84 d2                	test   dl,dl
c00185d6:	74 1d                	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d8:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c00185dd:	80 fa 30             	cmp    dl,0x30
c00185e0:	75 13                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e2:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00185e7:	eb 0c                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e9:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00185ee:	eb 05                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f0:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c00185f5:	5b                   	pop    ebx
c00185f6:	5e                   	pop    esi
c00185f7:	5f                   	pop    edi
c00185f8:	5d                   	pop    ebp
c00185f9:	c3                   	ret    

c00185fa <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00185fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018602:	80 f9 04             	cmp    cl,0x4
c0018605:	75 6b                	jne    c0018672 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018607:	b8 e0 cf 02 c0       	mov    eax,0xc002cfe0
c001860c:	80 fa 01             	cmp    dl,0x1
c001860f:	0f 86 92 02 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018615:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c001861a:	80 fa 02             	cmp    dl,0x2
c001861d:	0f 84 84 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018623:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0018628:	80 fa 03             	cmp    dl,0x3
c001862b:	0f 84 76 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018631:	b8 10 d0 02 c0       	mov    eax,0xc002d010
c0018636:	80 fa 04             	cmp    dl,0x4
c0018639:	0f 84 68 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863f:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c0018644:	80 fa 05             	cmp    dl,0x5
c0018647:	0f 84 5a 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864d:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0018652:	80 fa 07             	cmp    dl,0x7
c0018655:	0f 84 4c 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865b:	83 ea 08             	sub    edx,0x8
c001865e:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018663:	80 fa 01             	cmp    dl,0x1
c0018666:	0f 87 3b 02 00 00    	ja     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866c:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c0018671:	c3                   	ret    
c0018672:	80 f9 05             	cmp    cl,0x5
c0018675:	75 45                	jne    c00186bc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018677:	8d 4a ff             	lea    ecx,[edx-0x1]
c001867a:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c001867f:	80 f9 02             	cmp    cl,0x2
c0018682:	0f 86 1f 02 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018688:	80 fa 04             	cmp    dl,0x4
c001868b:	0f 84 f3 01 00 00    	je     c0018884 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018691:	80 fa 07             	cmp    dl,0x7
c0018694:	0f 84 0d 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869a:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c001869f:	80 fa 08             	cmp    dl,0x8
c00186a2:	0f 84 ff 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a8:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c00186ad:	80 fa 09             	cmp    dl,0x9
c00186b0:	0f 85 f1 01 00 00    	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b6:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00186bb:	c3                   	ret    
c00186bc:	80 f9 06             	cmp    cl,0x6
c00186bf:	0f 85 85 01 00 00    	jne    c001884a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00186c5:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c00186ca:	80 fa 01             	cmp    dl,0x1
c00186cd:	0f 84 d4 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d3:	8d 42 fb             	lea    eax,[edx-0x5]
c00186d6:	3c 01                	cmp    al,0x1
c00186d8:	0f 86 ac 01 00 00    	jbe    c001888a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00186de:	80 fa 03             	cmp    dl,0x3
c00186e1:	0f 84 a3 01 00 00    	je     c001888a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00186e7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00186ea:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c00186ef:	80 f9 01             	cmp    cl,0x1
c00186f2:	0f 86 af 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f8:	80 fa 09             	cmp    dl,0x9
c00186fb:	0f 84 8f 01 00 00    	je     c0018890 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018701:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018704:	80 f9 01             	cmp    cl,0x1
c0018707:	0f 86 9a 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870d:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c0018712:	80 fa 0d             	cmp    dl,0xd
c0018715:	0f 84 8c 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871b:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c0018720:	80 fa 0e             	cmp    dl,0xe
c0018723:	0f 84 7e 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018729:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c001872e:	80 fa 0f             	cmp    dl,0xf
c0018731:	0f 84 70 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018737:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c001873c:	80 fa 15             	cmp    dl,0x15
c001873f:	0f 84 62 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018745:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018748:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c001874d:	80 f9 01             	cmp    cl,0x1
c0018750:	0f 86 51 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018756:	80 fa 1a             	cmp    dl,0x1a
c0018759:	0f 84 37 01 00 00    	je     c0018896 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001875f:	80 fa 1c             	cmp    dl,0x1c
c0018762:	0f 84 34 01 00 00    	je     c001889c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018768:	80 fa 1d             	cmp    dl,0x1d
c001876b:	0f 84 36 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018771:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c0018776:	80 fa 25             	cmp    dl,0x25
c0018779:	0f 84 28 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018782:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c0018787:	80 f9 01             	cmp    cl,0x1
c001878a:	0f 86 17 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018790:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0018795:	80 fa 2a             	cmp    dl,0x2a
c0018798:	0f 84 09 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879e:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c00187a3:	80 fa 2c             	cmp    dl,0x2c
c00187a6:	0f 84 fb 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ac:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00187b1:	80 fa 2d             	cmp    dl,0x2d
c00187b4:	0f 84 ed 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ba:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c00187bf:	80 fa 2e             	cmp    dl,0x2e
c00187c2:	0f 84 df 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c8:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c00187cd:	80 fa 2f             	cmp    dl,0x2f
c00187d0:	0f 84 d1 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d6:	8d 4a cb             	lea    ecx,[edx-0x35]
c00187d9:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c00187de:	80 f9 01             	cmp    cl,0x1
c00187e1:	0f 86 c0 00 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e7:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c00187ec:	80 fa 37             	cmp    dl,0x37
c00187ef:	0f 84 b2 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f5:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c00187fa:	80 fa 3a             	cmp    dl,0x3a
c00187fd:	0f 84 a4 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018803:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c0018808:	80 fa 3c             	cmp    dl,0x3c
c001880b:	0f 84 96 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018811:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018816:	80 fa 3d             	cmp    dl,0x3d
c0018819:	0f 84 88 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881f:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c0018824:	80 fa 3e             	cmp    dl,0x3e
c0018827:	74 7e                	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018829:	8d 42 bb             	lea    eax,[edx-0x45]
c001882c:	3c 01                	cmp    al,0x1
c001882e:	76 72                	jbe    c00188a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018830:	80 fa 3f             	cmp    dl,0x3f
c0018833:	74 6d                	je     c00188a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018835:	80 fa 4a             	cmp    dl,0x4a
c0018838:	74 0a                	je     c0018844 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001883a:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c001883f:	80 fa 4d             	cmp    dl,0x4d
c0018842:	75 63                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018844:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c0018849:	c3                   	ret    
c001884a:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c001884f:	80 f9 0b             	cmp    cl,0xb
c0018852:	75 0a                	jne    c001885e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018854:	fe ca                	dec    dl
c0018856:	75 4f                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018858:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c001885d:	c3                   	ret    
c001885e:	80 f9 0f             	cmp    cl,0xf
c0018861:	75 44                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018863:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c0018868:	80 fa 02             	cmp    dl,0x2
c001886b:	76 3a                	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018870:	3c 01                	cmp    al,0x1
c0018872:	76 0a                	jbe    c001887e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018874:	b8 3d b8 02 c0       	mov    eax,0xc002b83d
c0018879:	80 fa 06             	cmp    dl,0x6
c001887c:	75 29                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887e:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c0018883:	c3                   	ret    
c0018884:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c0018889:	c3                   	ret    
c001888a:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c001888f:	c3                   	ret    
c0018890:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c0018895:	c3                   	ret    
c0018896:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c001889b:	c3                   	ret    
c001889c:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c00188a1:	c3                   	ret    
c00188a2:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c00188a7:	c3                   	ret    

c00188a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00188a8:	60                   	pusha  
c00188a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188b5:	9c                   	pushf  
c00188b6:	fa                   	cli    
c00188b7:	0f 09                	wbinvd 
c00188b9:	0f 30                	wrmsr  
c00188bb:	9d                   	popf   
c00188bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188c0:	89 02                	mov    DWORD PTR [edx],eax
c00188c2:	61                   	popa   
c00188c3:	c3                   	ret    

c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00188c4:	60                   	pusha  
c00188c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188c9:	9c                   	pushf  
c00188ca:	fa                   	cli    
c00188cb:	0f 09                	wbinvd 
c00188cd:	31 c0                	xor    eax,eax
c00188cf:	31 d2                	xor    edx,edx
c00188d1:	0f 32                	rdmsr  
c00188d3:	9d                   	popf   
c00188d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188d8:	89 02                	mov    DWORD PTR [edx],eax
c00188da:	61                   	popa   
c00188db:	c3                   	ret    

c00188dc <CPU::AMD_K6_writeback(int, int, int)>:
c00188dc:	56                   	push   esi
c00188dd:	53                   	push   ebx
c00188de:	83 ec 10             	sub    esp,0x10
c00188e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00188ea:	75 5d                	jne    c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188ec:	83 f8 08             	cmp    eax,0x8
c00188ef:	75 09                	jne    c00188fa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00188f1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00188f6:	7e 13                	jle    c001890b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00188f8:	eb 30                	jmp    c001892a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00188fa:	83 f8 06             	cmp    eax,0x6
c00188fd:	7c 4a                	jl     c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188ff:	83 f8 07             	cmp    eax,0x7
c0018902:	7e 07                	jle    c001890b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018904:	83 f8 09             	cmp    eax,0x9
c0018907:	74 21                	je     c001892a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018909:	eb 3e                	jmp    c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001890b:	89 e6                	mov    esi,esp
c001890d:	8b 1d a8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dda8
c0018913:	56                   	push   esi
c0018914:	c1 eb 15             	shr    ebx,0x15
c0018917:	68 82 00 00 c0       	push   0xc0000082
c001891c:	83 e3 7e             	and    ebx,0x7e
c001891f:	e8 a0 ff ff ff       	call   c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018924:	56                   	push   esi
c0018925:	6a 00                	push   0x0
c0018927:	53                   	push   ebx
c0018928:	eb 12                	jmp    c001893c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001892a:	89 e3                	mov    ebx,esp
c001892c:	53                   	push   ebx
c001892d:	68 82 00 00 c0       	push   0xc0000082
c0018932:	e8 8d ff ff ff       	call   c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018937:	53                   	push   ebx
c0018938:	6a 00                	push   0x0
c001893a:	6a 00                	push   0x0
c001893c:	68 82 00 00 c0       	push   0xc0000082
c0018941:	e8 62 ff ff ff       	call   c00188a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018946:	83 c4 18             	add    esp,0x18
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	5b                   	pop    ebx
c001894d:	5e                   	pop    esi
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018958:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001895c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018960:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018964:	39 05 80 d2 02 c0    	cmp    DWORD PTR ds:0xc002d280,eax
c001896a:	75 23                	jne    c001898f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001896c:	a1 8c 08 03 c0       	mov    eax,ds:0xc003088c
c0018971:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018975:	89 06                	mov    DWORD PTR [esi],eax
c0018977:	a1 88 08 03 c0       	mov    eax,ds:0xc0030888
c001897c:	89 07                	mov    DWORD PTR [edi],eax
c001897e:	a1 84 08 03 c0       	mov    eax,ds:0xc0030884
c0018983:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018986:	a1 80 08 03 c0       	mov    eax,ds:0xc0030880
c001898b:	89 02                	mov    DWORD PTR [edx],eax
c001898d:	eb 3f                	jmp    c00189ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001898f:	31 c9                	xor    ecx,ecx
c0018991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018995:	0f a2                	cpuid  
c0018997:	89 06                	mov    DWORD PTR [esi],eax
c0018999:	89 1f                	mov    DWORD PTR [edi],ebx
c001899b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001899f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189a2:	89 10                	mov    DWORD PTR [eax],edx
c00189a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189a8:	a3 80 d2 02 c0       	mov    ds:0xc002d280,eax
c00189ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00189af:	a3 8c 08 03 c0       	mov    ds:0xc003088c,eax
c00189b4:	8b 07                	mov    eax,DWORD PTR [edi]
c00189b6:	a3 88 08 03 c0       	mov    ds:0xc0030888,eax
c00189bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00189be:	a3 84 08 03 c0       	mov    ds:0xc0030884,eax
c00189c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00189c9:	a3 80 08 03 c0       	mov    ds:0xc0030880,eax
c00189ce:	5b                   	pop    ebx
c00189cf:	5e                   	pop    esi
c00189d0:	5f                   	pop    edi
c00189d1:	5d                   	pop    ebp
c00189d2:	c3                   	ret    
c00189d3:	90                   	nop

c00189d4 <CPU::cpuidCheckEDX(unsigned int)>:
c00189d4:	83 ec 10             	sub    esp,0x10
c00189d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189db:	50                   	push   eax
c00189dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e0:	50                   	push   eax
c00189e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e5:	50                   	push   eax
c00189e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ea:	50                   	push   eax
c00189eb:	6a 01                	push   0x1
c00189ed:	e8 5e ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00189fa:	0f 95 c0             	setne  al
c00189fd:	83 c4 24             	add    esp,0x24
c0018a00:	c3                   	ret    
c0018a01:	90                   	nop

c0018a02 <CPU::cpuidCheckECX(unsigned int)>:
c0018a02:	83 ec 10             	sub    esp,0x10
c0018a05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a09:	50                   	push   eax
c0018a0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a0e:	50                   	push   eax
c0018a0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a13:	50                   	push   eax
c0018a14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a18:	50                   	push   eax
c0018a19:	6a 01                	push   0x1
c0018a1b:	e8 30 ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a24:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a28:	0f 95 c0             	setne  al
c0018a2b:	83 c4 24             	add    esp,0x24
c0018a2e:	c3                   	ret    
c0018a2f:	90                   	nop

c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a30:	83 ec 10             	sub    esp,0x10
c0018a33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a37:	50                   	push   eax
c0018a38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a3c:	50                   	push   eax
c0018a3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a41:	50                   	push   eax
c0018a42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a46:	50                   	push   eax
c0018a47:	6a 07                	push   0x7
c0018a49:	e8 02 ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a52:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018a56:	0f 95 c0             	setne  al
c0018a59:	83 c4 24             	add    esp,0x24
c0018a5c:	c3                   	ret    
c0018a5d:	90                   	nop

c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018a5e:	83 ec 10             	sub    esp,0x10
c0018a61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a65:	50                   	push   eax
c0018a66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6a:	50                   	push   eax
c0018a6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6f:	50                   	push   eax
c0018a70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a74:	50                   	push   eax
c0018a75:	6a 07                	push   0x7
c0018a77:	e8 d4 fe ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a80:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a84:	0f 95 c0             	setne  al
c0018a87:	83 c4 24             	add    esp,0x24
c0018a8a:	c3                   	ret    
c0018a8b:	90                   	nop

c0018a8c <CPU::CPU()>:
c0018a8c:	83 ec 0c             	sub    esp,0xc
c0018a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a93:	83 ec 08             	sub    esp,0x8
c0018a96:	68 3d b8 02 c0       	push   0xc002b83d
c0018a9b:	50                   	push   eax
c0018a9c:	e8 d5 b3 ff ff       	call   c0013e76 <Device::Device(char const*)>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	ba 14 b9 02 c0       	mov    edx,0xc002b914
c0018aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aad:	89 10                	mov    DWORD PTR [eax],edx
c0018aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ab3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac1:	05 78 01 00 00       	add    eax,0x178
c0018ac6:	83 ec 0c             	sub    esp,0xc
c0018ac9:	50                   	push   eax
c0018aca:	e8 fd 62 ff ff       	call   c000edcc <GDT::GDT()>
c0018acf:	83 c4 10             	add    esp,0x10
c0018ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ad6:	05 7c 09 00 00       	add    eax,0x97c
c0018adb:	83 ec 0c             	sub    esp,0xc
c0018ade:	50                   	push   eax
c0018adf:	e8 38 65 ff ff       	call   c000f01c <IDT::IDT()>
c0018ae4:	83 c4 10             	add    esp,0x10
c0018ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aeb:	05 7c 11 00 00       	add    eax,0x117c
c0018af0:	83 ec 0c             	sub    esp,0xc
c0018af3:	50                   	push   eax
c0018af4:	e8 6d 80 ff ff       	call   c0010b66 <TSS::TSS()>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b00:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b15:	90                   	nop
c0018b16:	83 c4 0c             	add    esp,0xc
c0018b19:	c3                   	ret    

c0018b1a <CPU::displayFeatures()>:
c0018b1a:	c3                   	ret    
c0018b1b:	90                   	nop

c0018b1c <CPU::detectFeatures()>:
c0018b1c:	55                   	push   ebp
c0018b1d:	57                   	push   edi
c0018b1e:	56                   	push   esi
c0018b1f:	53                   	push   ebx
c0018b20:	83 ec 50             	sub    esp,0x50
c0018b23:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018b27:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018b31:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018b38:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018b3e:	6a 0d                	push   0xd
c0018b40:	6a 00                	push   0x0
c0018b42:	55                   	push   ebp
c0018b43:	e8 08 7c fe ff       	call   c0000750 <memset>
c0018b48:	83 c4 10             	add    esp,0x10
c0018b4b:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0018b50:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018b57:	0f 84 22 09 00 00    	je     c001947f <CPU::detectFeatures()+0x963>
c0018b5d:	83 ec 0c             	sub    esp,0xc
c0018b60:	89 ef                	mov    edi,ebp
c0018b62:	6a 10                	push   0x10
c0018b64:	e8 6b fe ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b69:	83 e0 01             	and    eax,0x1
c0018b6c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b6f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b75:	83 e0 fd             	and    eax,0xfffffffd
c0018b78:	09 d0                	or     eax,edx
c0018b7a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b80:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b87:	e8 48 fe ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018b8c:	83 e0 01             	and    eax,0x1
c0018b8f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b96:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b9c:	83 e0 fb             	and    eax,0xfffffffb
c0018b9f:	09 d0                	or     eax,edx
c0018ba1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ba7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018bae:	e8 21 fe ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018bb3:	83 e0 01             	and    eax,0x1
c0018bb6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018bbd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bc3:	83 e0 f7             	and    eax,0xfffffff7
c0018bc6:	09 d0                	or     eax,edx
c0018bc8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bce:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018bd5:	e8 fa fd ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018bda:	83 e0 01             	and    eax,0x1
c0018bdd:	c1 e0 04             	shl    eax,0x4
c0018be0:	88 c2                	mov    dl,al
c0018be2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018be8:	83 e0 ef             	and    eax,0xffffffef
c0018beb:	09 d0                	or     eax,edx
c0018bed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bf3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018bfa:	e8 d5 fd ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018bff:	83 e0 01             	and    eax,0x1
c0018c02:	c1 e0 05             	shl    eax,0x5
c0018c05:	88 c2                	mov    dl,al
c0018c07:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c0d:	83 e0 df             	and    eax,0xffffffdf
c0018c10:	09 d0                	or     eax,edx
c0018c12:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c18:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018c1f:	e8 b0 fd ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018c24:	83 e0 01             	and    eax,0x1
c0018c27:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c2a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c30:	83 e0 fd             	and    eax,0xfffffffd
c0018c33:	09 d0                	or     eax,edx
c0018c35:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c3b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018c42:	e8 8d fd ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018c47:	83 e0 01             	and    eax,0x1
c0018c4a:	c1 e0 06             	shl    eax,0x6
c0018c4d:	88 c2                	mov    dl,al
c0018c4f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c55:	83 e0 bf             	and    eax,0xffffffbf
c0018c58:	09 d0                	or     eax,edx
c0018c5a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c60:	58                   	pop    eax
c0018c61:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c65:	50                   	push   eax
c0018c66:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c6a:	50                   	push   eax
c0018c6b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c6f:	56                   	push   esi
c0018c70:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c74:	50                   	push   eax
c0018c75:	6a 00                	push   0x0
c0018c77:	e8 d4 fc ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c7c:	b8 04 00 00 00       	mov    eax,0x4
c0018c81:	89 c1                	mov    ecx,eax
c0018c83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c85:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018c8b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018c8f:	89 c1                	mov    ecx,eax
c0018c91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c93:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018c99:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018c9d:	89 c1                	mov    ecx,eax
c0018c9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ca1:	83 c4 18             	add    esp,0x18
c0018ca4:	68 e8 b6 02 c0       	push   0xc002b6e8
c0018ca9:	55                   	push   ebp
c0018caa:	e8 e9 7b fe ff       	call   c0000898 <strcmp>
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	85 c0                	test   eax,eax
c0018cb4:	75 0f                	jne    c0018cc5 <CPU::detectFeatures()+0x1a9>
c0018cb6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018cc0:	e9 22 02 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018cc5:	50                   	push   eax
c0018cc6:	50                   	push   eax
c0018cc7:	68 f5 b6 02 c0       	push   0xc002b6f5
c0018ccc:	55                   	push   ebp
c0018ccd:	e8 c6 7b fe ff       	call   c0000898 <strcmp>
c0018cd2:	83 c4 10             	add    esp,0x10
c0018cd5:	85 c0                	test   eax,eax
c0018cd7:	74 dd                	je     c0018cb6 <CPU::detectFeatures()+0x19a>
c0018cd9:	50                   	push   eax
c0018cda:	50                   	push   eax
c0018cdb:	68 02 b7 02 c0       	push   0xc002b702
c0018ce0:	55                   	push   ebp
c0018ce1:	e8 b2 7b fe ff       	call   c0000898 <strcmp>
c0018ce6:	83 c4 10             	add    esp,0x10
c0018ce9:	85 c0                	test   eax,eax
c0018ceb:	74 2a                	je     c0018d17 <CPU::detectFeatures()+0x1fb>
c0018ced:	50                   	push   eax
c0018cee:	50                   	push   eax
c0018cef:	68 0f b7 02 c0       	push   0xc002b70f
c0018cf4:	55                   	push   ebp
c0018cf5:	e8 9e 7b fe ff       	call   c0000898 <strcmp>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	85 c0                	test   eax,eax
c0018cff:	74 16                	je     c0018d17 <CPU::detectFeatures()+0x1fb>
c0018d01:	50                   	push   eax
c0018d02:	50                   	push   eax
c0018d03:	68 1c b7 02 c0       	push   0xc002b71c
c0018d08:	55                   	push   ebp
c0018d09:	e8 8a 7b fe ff       	call   c0000898 <strcmp>
c0018d0e:	83 c4 10             	add    esp,0x10
c0018d11:	85 c0                	test   eax,eax
c0018d13:	74 48                	je     c0018d5d <CPU::detectFeatures()+0x241>
c0018d15:	eb 0f                	jmp    c0018d26 <CPU::detectFeatures()+0x20a>
c0018d17:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018d21:	e9 c1 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018d26:	50                   	push   eax
c0018d27:	50                   	push   eax
c0018d28:	68 29 b7 02 c0       	push   0xc002b729
c0018d2d:	55                   	push   ebp
c0018d2e:	e8 65 7b fe ff       	call   c0000898 <strcmp>
c0018d33:	83 c4 10             	add    esp,0x10
c0018d36:	85 c0                	test   eax,eax
c0018d38:	74 23                	je     c0018d5d <CPU::detectFeatures()+0x241>
c0018d3a:	57                   	push   edi
c0018d3b:	57                   	push   edi
c0018d3c:	68 36 b7 02 c0       	push   0xc002b736
c0018d41:	55                   	push   ebp
c0018d42:	e8 51 7b fe ff       	call   c0000898 <strcmp>
c0018d47:	83 c4 10             	add    esp,0x10
c0018d4a:	85 c0                	test   eax,eax
c0018d4c:	75 1e                	jne    c0018d6c <CPU::detectFeatures()+0x250>
c0018d4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d58:	e9 8a 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018d5d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d67:	e9 7b 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018d6c:	56                   	push   esi
c0018d6d:	56                   	push   esi
c0018d6e:	68 43 b7 02 c0       	push   0xc002b743
c0018d73:	55                   	push   ebp
c0018d74:	e8 1f 7b fe ff       	call   c0000898 <strcmp>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	85 c0                	test   eax,eax
c0018d7e:	75 0f                	jne    c0018d8f <CPU::detectFeatures()+0x273>
c0018d80:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d8a:	e9 58 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018d8f:	51                   	push   ecx
c0018d90:	51                   	push   ecx
c0018d91:	68 02 b7 02 c0       	push   0xc002b702
c0018d96:	55                   	push   ebp
c0018d97:	e8 fc 7a fe ff       	call   c0000898 <strcmp>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	85 c0                	test   eax,eax
c0018da1:	75 0f                	jne    c0018db2 <CPU::detectFeatures()+0x296>
c0018da3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018dad:	e9 35 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018db2:	52                   	push   edx
c0018db3:	52                   	push   edx
c0018db4:	68 50 b7 02 c0       	push   0xc002b750
c0018db9:	55                   	push   ebp
c0018dba:	e8 d9 7a fe ff       	call   c0000898 <strcmp>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	85 c0                	test   eax,eax
c0018dc4:	75 0f                	jne    c0018dd5 <CPU::detectFeatures()+0x2b9>
c0018dc6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018dd0:	e9 12 01 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018dd5:	50                   	push   eax
c0018dd6:	50                   	push   eax
c0018dd7:	68 5d b7 02 c0       	push   0xc002b75d
c0018ddc:	55                   	push   ebp
c0018ddd:	e8 b6 7a fe ff       	call   c0000898 <strcmp>
c0018de2:	83 c4 10             	add    esp,0x10
c0018de5:	85 c0                	test   eax,eax
c0018de7:	75 0f                	jne    c0018df8 <CPU::detectFeatures()+0x2dc>
c0018de9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018df3:	e9 ef 00 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018df8:	50                   	push   eax
c0018df9:	50                   	push   eax
c0018dfa:	68 6a b7 02 c0       	push   0xc002b76a
c0018dff:	55                   	push   ebp
c0018e00:	e8 93 7a fe ff       	call   c0000898 <strcmp>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	85 c0                	test   eax,eax
c0018e0a:	75 0f                	jne    c0018e1b <CPU::detectFeatures()+0x2ff>
c0018e0c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018e16:	e9 cc 00 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018e1b:	50                   	push   eax
c0018e1c:	50                   	push   eax
c0018e1d:	68 77 b7 02 c0       	push   0xc002b777
c0018e22:	55                   	push   ebp
c0018e23:	e8 70 7a fe ff       	call   c0000898 <strcmp>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	85 c0                	test   eax,eax
c0018e2d:	75 0f                	jne    c0018e3e <CPU::detectFeatures()+0x322>
c0018e2f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018e39:	e9 a9 00 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018e3e:	50                   	push   eax
c0018e3f:	50                   	push   eax
c0018e40:	68 84 b7 02 c0       	push   0xc002b784
c0018e45:	55                   	push   ebp
c0018e46:	e8 4d 7a fe ff       	call   c0000898 <strcmp>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	85 c0                	test   eax,eax
c0018e50:	75 0f                	jne    c0018e61 <CPU::detectFeatures()+0x345>
c0018e52:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018e5c:	e9 86 00 00 00       	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018e61:	50                   	push   eax
c0018e62:	50                   	push   eax
c0018e63:	68 91 b7 02 c0       	push   0xc002b791
c0018e68:	55                   	push   ebp
c0018e69:	e8 2a 7a fe ff       	call   c0000898 <strcmp>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	85 c0                	test   eax,eax
c0018e73:	75 0c                	jne    c0018e81 <CPU::detectFeatures()+0x365>
c0018e75:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e7f:	eb 66                	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018e81:	50                   	push   eax
c0018e82:	50                   	push   eax
c0018e83:	68 9e b7 02 c0       	push   0xc002b79e
c0018e88:	55                   	push   ebp
c0018e89:	e8 0a 7a fe ff       	call   c0000898 <strcmp>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	85 c0                	test   eax,eax
c0018e93:	75 0c                	jne    c0018ea1 <CPU::detectFeatures()+0x385>
c0018e95:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e9f:	eb 46                	jmp    c0018ee7 <CPU::detectFeatures()+0x3cb>
c0018ea1:	57                   	push   edi
c0018ea2:	57                   	push   edi
c0018ea3:	68 ab b7 02 c0       	push   0xc002b7ab
c0018ea8:	55                   	push   ebp
c0018ea9:	e8 ea 79 fe ff       	call   c0000898 <strcmp>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	85 c0                	test   eax,eax
c0018eb3:	74 e0                	je     c0018e95 <CPU::detectFeatures()+0x379>
c0018eb5:	56                   	push   esi
c0018eb6:	56                   	push   esi
c0018eb7:	68 b8 b7 02 c0       	push   0xc002b7b8
c0018ebc:	55                   	push   ebp
c0018ebd:	e8 d6 79 fe ff       	call   c0000898 <strcmp>
c0018ec2:	83 c4 10             	add    esp,0x10
c0018ec5:	85 c0                	test   eax,eax
c0018ec7:	74 cc                	je     c0018e95 <CPU::detectFeatures()+0x379>
c0018ec9:	51                   	push   ecx
c0018eca:	51                   	push   ecx
c0018ecb:	68 c5 b7 02 c0       	push   0xc002b7c5
c0018ed0:	55                   	push   ebp
c0018ed1:	e8 c2 79 fe ff       	call   c0000898 <strcmp>
c0018ed6:	83 c4 10             	add    esp,0x10
c0018ed9:	85 c0                	test   eax,eax
c0018edb:	74 b8                	je     c0018e95 <CPU::detectFeatures()+0x379>
c0018edd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018ee7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018eec:	0f 86 be 00 00 00    	jbe    c0018fb0 <CPU::detectFeatures()+0x494>
c0018ef2:	83 ec 0c             	sub    esp,0xc
c0018ef5:	68 80 00 00 00       	push   0x80
c0018efa:	e8 31 fb ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018eff:	83 e0 01             	and    eax,0x1
c0018f02:	c1 e0 06             	shl    eax,0x6
c0018f05:	88 c2                	mov    dl,al
c0018f07:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f0d:	83 e0 bf             	and    eax,0xffffffbf
c0018f10:	09 d0                	or     eax,edx
c0018f12:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f18:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018f1f:	e8 0c fb ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f24:	83 e0 01             	and    eax,0x1
c0018f27:	c1 e0 04             	shl    eax,0x4
c0018f2a:	88 c2                	mov    dl,al
c0018f2c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f32:	83 e0 ef             	and    eax,0xffffffef
c0018f35:	09 d0                	or     eax,edx
c0018f37:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f3d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018f44:	e8 e7 fa ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f49:	c1 e0 07             	shl    eax,0x7
c0018f4c:	88 c2                	mov    dl,al
c0018f4e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f54:	83 e0 7f             	and    eax,0x7f
c0018f57:	09 d0                	or     eax,edx
c0018f59:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f66:	e8 f3 fa ff ff       	call   c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f6b:	83 e0 01             	and    eax,0x1
c0018f6e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f75:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f7b:	83 e0 f7             	and    eax,0xfffffff7
c0018f7e:	09 d0                	or     eax,edx
c0018f80:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f86:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f8d:	e8 cc fa ff ff       	call   c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	83 e0 01             	and    eax,0x1
c0018f98:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f9f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018fa5:	83 e0 fb             	and    eax,0xfffffffb
c0018fa8:	09 d0                	or     eax,edx
c0018faa:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fb7:	50                   	push   eax
c0018fb8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fbc:	50                   	push   eax
c0018fbd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018fc1:	56                   	push   esi
c0018fc2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fc6:	50                   	push   eax
c0018fc7:	6a 01                	push   0x1
c0018fc9:	e8 82 f9 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018fd2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018fd8:	88 ca                	mov    dl,cl
c0018fda:	83 e0 f0             	and    eax,0xfffffff0
c0018fdd:	83 e2 0f             	and    edx,0xf
c0018fe0:	09 d0                	or     eax,edx
c0018fe2:	88 ca                	mov    dl,cl
c0018fe4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018fea:	c0 ea 04             	shr    dl,0x4
c0018fed:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018ff1:	0f b6 c2             	movzx  eax,dl
c0018ff4:	83 c4 20             	add    esp,0x20
c0018ff7:	c1 e0 06             	shl    eax,0x6
c0018ffa:	89 c7                	mov    edi,eax
c0018ffc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019002:	66 25 3f c0          	and    ax,0xc03f
c0019006:	09 f8                	or     eax,edi
c0019008:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001900f:	89 c8                	mov    eax,ecx
c0019011:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019018:	c1 e8 08             	shr    eax,0x8
c001901b:	83 e5 3f             	and    ebp,0x3f
c001901e:	83 e0 0f             	and    eax,0xf
c0019021:	89 c7                	mov    edi,eax
c0019023:	c1 e7 06             	shl    edi,0x6
c0019026:	09 ef                	or     edi,ebp
c0019028:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001902f:	89 fa                	mov    edx,edi
c0019031:	83 e5 c0             	and    ebp,0xffffffc0
c0019034:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001903a:	88 c2                	mov    dl,al
c001903c:	c0 ea 02             	shr    dl,0x2
c001903f:	89 d7                	mov    edi,edx
c0019041:	09 ef                	or     edi,ebp
c0019043:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019049:	89 fa                	mov    edx,edi
c001904b:	83 e5 cf             	and    ebp,0xffffffcf
c001904e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019054:	89 cf                	mov    edi,ecx
c0019056:	c1 ef 0c             	shr    edi,0xc
c0019059:	83 e7 03             	and    edi,0x3
c001905c:	c1 e7 04             	shl    edi,0x4
c001905f:	09 ef                	or     edi,ebp
c0019061:	3c 06                	cmp    al,0x6
c0019063:	89 fa                	mov    edx,edi
c0019065:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001906b:	74 04                	je     c0019071 <CPU::detectFeatures()+0x555>
c001906d:	3c 0f                	cmp    al,0xf
c001906f:	75 5c                	jne    c00190cd <CPU::detectFeatures()+0x5b1>
c0019071:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019075:	89 cf                	mov    edi,ecx
c0019077:	c1 ef 10             	shr    edi,0x10
c001907a:	c1 e7 04             	shl    edi,0x4
c001907d:	09 fa                	or     edx,edi
c001907f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019085:	0f b6 d2             	movzx  edx,dl
c0019088:	66 81 e7 3f c0       	and    di,0xc03f
c001908d:	c1 e2 06             	shl    edx,0x6
c0019090:	09 fa                	or     edx,edi
c0019092:	3c 0f                	cmp    al,0xf
c0019094:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001909b:	75 30                	jne    c00190cd <CPU::detectFeatures()+0x5b1>
c001909d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00190a3:	c1 e9 14             	shr    ecx,0x14
c00190a6:	83 e0 3f             	and    eax,0x3f
c00190a9:	83 c1 0f             	add    ecx,0xf
c00190ac:	88 ca                	mov    dl,cl
c00190ae:	c0 e9 02             	shr    cl,0x2
c00190b1:	c1 e2 06             	shl    edx,0x6
c00190b4:	09 d0                	or     eax,edx
c00190b6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00190bc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00190c2:	83 e0 c0             	and    eax,0xffffffc0
c00190c5:	09 c1                	or     ecx,eax
c00190c7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00190cd:	83 ec 0c             	sub    esp,0xc
c00190d0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00190d7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190db:	50                   	push   eax
c00190dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190e0:	55                   	push   ebp
c00190e1:	56                   	push   esi
c00190e2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00190e6:	57                   	push   edi
c00190e7:	68 00 00 00 80       	push   0x80000000
c00190ec:	e8 5f f8 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190f1:	83 c4 20             	add    esp,0x20
c00190f4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00190fc:	76 22                	jbe    c0019120 <CPU::detectFeatures()+0x604>
c00190fe:	83 ec 0c             	sub    esp,0xc
c0019101:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019105:	50                   	push   eax
c0019106:	55                   	push   ebp
c0019107:	56                   	push   esi
c0019108:	57                   	push   edi
c0019109:	68 01 00 00 80       	push   0x80000001
c001910e:	e8 3d f8 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019113:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001911d:	83 c4 20             	add    esp,0x20
c0019120:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019126:	83 f8 01             	cmp    eax,0x1
c0019129:	75 6f                	jne    c001919a <CPU::detectFeatures()+0x67e>
c001912b:	51                   	push   ecx
c001912c:	51                   	push   ecx
c001912d:	68 d1 b7 02 c0       	push   0xc002b7d1
c0019132:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019136:	56                   	push   esi
c0019137:	e8 d0 76 fe ff       	call   c000080c <strcpy>
c001913c:	5f                   	pop    edi
c001913d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019143:	5d                   	pop    ebp
c0019144:	66 c1 e8 06          	shr    ax,0x6
c0019148:	0f b6 c0             	movzx  eax,al
c001914b:	50                   	push   eax
c001914c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019152:	c1 e8 0e             	shr    eax,0xe
c0019155:	0f b6 c0             	movzx  eax,al
c0019158:	50                   	push   eax
c0019159:	e8 9c f4 ff ff       	call   c00185fa <CPU::lookupIntelName(unsigned char, unsigned char)>
c001915e:	5a                   	pop    edx
c001915f:	59                   	pop    ecx
c0019160:	50                   	push   eax
c0019161:	56                   	push   esi
c0019162:	e8 e5 77 fe ff       	call   c000094c <strcat>
c0019167:	5f                   	pop    edi
c0019168:	5d                   	pop    ebp
c0019169:	56                   	push   esi
c001916a:	53                   	push   ebx
c001916b:	e8 f8 ac ff ff       	call   c0013e68 <Device::setName(char const*)>
c0019170:	58                   	pop    eax
c0019171:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019177:	5a                   	pop    edx
c0019178:	68 d8 b7 02 c0       	push   0xc002b7d8
c001917d:	50                   	push   eax
c001917e:	e8 15 77 fe ff       	call   c0000898 <strcmp>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	85 c0                	test   eax,eax
c0019188:	0f 85 71 03 00 00    	jne    c00194ff <CPU::detectFeatures()+0x9e3>
c001918e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019195:	e9 65 03 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x9e3>
c001919a:	83 f8 02             	cmp    eax,0x2
c001919d:	0f 85 b5 00 00 00    	jne    c0019258 <CPU::detectFeatures()+0x73c>
c00191a3:	57                   	push   edi
c00191a4:	57                   	push   edi
c00191a5:	68 ea b7 02 c0       	push   0xc002b7ea
c00191aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00191ae:	56                   	push   esi
c00191af:	e8 58 76 fe ff       	call   c000080c <strcpy>
c00191b4:	5d                   	pop    ebp
c00191b5:	58                   	pop    eax
c00191b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191bc:	66 c1 e8 06          	shr    ax,0x6
c00191c0:	0f b6 c0             	movzx  eax,al
c00191c3:	50                   	push   eax
c00191c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ca:	c1 e8 0e             	shr    eax,0xe
c00191cd:	0f b6 c0             	movzx  eax,al
c00191d0:	50                   	push   eax
c00191d1:	e8 90 f2 ff ff       	call   c0018466 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00191d6:	5a                   	pop    edx
c00191d7:	59                   	pop    ecx
c00191d8:	50                   	push   eax
c00191d9:	56                   	push   esi
c00191da:	e8 6d 77 fe ff       	call   c000094c <strcat>
c00191df:	5f                   	pop    edi
c00191e0:	5d                   	pop    ebp
c00191e1:	56                   	push   esi
c00191e2:	53                   	push   ebx
c00191e3:	e8 80 ac ff ff       	call   c0013e68 <Device::setName(char const*)>
c00191e8:	58                   	pop    eax
c00191e9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00191ef:	5a                   	pop    edx
c00191f0:	68 ef b7 02 c0       	push   0xc002b7ef
c00191f5:	50                   	push   eax
c00191f6:	e8 9d 76 fe ff       	call   c0000898 <strcmp>
c00191fb:	83 c4 10             	add    esp,0x10
c00191fe:	85 c0                	test   eax,eax
c0019200:	75 20                	jne    c0019222 <CPU::detectFeatures()+0x706>
c0019202:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c0019208:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001920e:	a8 01                	test   al,0x1
c0019210:	74 10                	je     c0019222 <CPU::detectFeatures()+0x706>
c0019212:	83 e0 fe             	and    eax,0xfffffffe
c0019215:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001921b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019222:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019228:	c1 e8 0e             	shr    eax,0xe
c001922b:	3c 05                	cmp    al,0x5
c001922d:	0f 85 cc 02 00 00    	jne    c00194ff <CPU::detectFeatures()+0x9e3>
c0019233:	56                   	push   esi
c0019234:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001923a:	83 e0 0f             	and    eax,0xf
c001923d:	50                   	push   eax
c001923e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019244:	66 c1 e8 06          	shr    ax,0x6
c0019248:	0f b6 c0             	movzx  eax,al
c001924b:	50                   	push   eax
c001924c:	6a 05                	push   0x5
c001924e:	e8 89 f6 ff ff       	call   c00188dc <CPU::AMD_K6_writeback(int, int, int)>
c0019253:	e9 1f 02 00 00       	jmp    c0019477 <CPU::detectFeatures()+0x95b>
c0019258:	8d 50 fd             	lea    edx,[eax-0x3]
c001925b:	83 fa 01             	cmp    edx,0x1
c001925e:	76 09                	jbe    c0019269 <CPU::detectFeatures()+0x74d>
c0019260:	83 f8 06             	cmp    eax,0x6
c0019263:	0f 85 91 01 00 00    	jne    c00193fa <CPU::detectFeatures()+0x8de>
c0019269:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001926f:	c1 ea 0e             	shr    edx,0xe
c0019272:	80 fa 05             	cmp    dl,0x5
c0019275:	75 7b                	jne    c00192f2 <CPU::detectFeatures()+0x7d6>
c0019277:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001927d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019282:	66 81 fa 00 01       	cmp    dx,0x100
c0019287:	75 0c                	jne    c0019295 <CPU::detectFeatures()+0x779>
c0019289:	51                   	push   ecx
c001928a:	51                   	push   ecx
c001928b:	68 f6 b7 02 c0       	push   0xc002b7f6
c0019290:	e9 dc 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019295:	66 81 fa 00 02       	cmp    dx,0x200
c001929a:	75 0c                	jne    c00192a8 <CPU::detectFeatures()+0x78c>
c001929c:	52                   	push   edx
c001929d:	52                   	push   edx
c001929e:	68 09 b8 02 c0       	push   0xc002b809
c00192a3:	e9 c9 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00192a8:	66 81 fa 40 02       	cmp    dx,0x240
c00192ad:	75 0c                	jne    c00192bb <CPU::detectFeatures()+0x79f>
c00192af:	50                   	push   eax
c00192b0:	50                   	push   eax
c00192b1:	68 1b b8 02 c0       	push   0xc002b81b
c00192b6:	e9 b6 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00192bb:	83 f8 06             	cmp    eax,0x6
c00192be:	75 0c                	jne    c00192cc <CPU::detectFeatures()+0x7b0>
c00192c0:	50                   	push   eax
c00192c1:	50                   	push   eax
c00192c2:	68 2d b8 02 c0       	push   0xc002b82d
c00192c7:	e9 a5 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00192cc:	83 f8 04             	cmp    eax,0x4
c00192cf:	75 0c                	jne    c00192dd <CPU::detectFeatures()+0x7c1>
c00192d1:	50                   	push   eax
c00192d2:	50                   	push   eax
c00192d3:	68 39 b8 02 c0       	push   0xc002b839
c00192d8:	e9 94 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00192dd:	83 f8 03             	cmp    eax,0x3
c00192e0:	0f 85 19 02 00 00    	jne    c00194ff <CPU::detectFeatures()+0x9e3>
c00192e6:	50                   	push   eax
c00192e7:	50                   	push   eax
c00192e8:	68 41 b8 02 c0       	push   0xc002b841
c00192ed:	e9 7f 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00192f2:	80 fa 06             	cmp    dl,0x6
c00192f5:	0f 85 db 00 00 00    	jne    c00193d6 <CPU::detectFeatures()+0x8ba>
c00192fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019301:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019306:	66 81 fa 80 01       	cmp    dx,0x180
c001930b:	75 0c                	jne    c0019319 <CPU::detectFeatures()+0x7fd>
c001930d:	50                   	push   eax
c001930e:	50                   	push   eax
c001930f:	68 4c b8 02 c0       	push   0xc002b84c
c0019314:	e9 58 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019319:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001931f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019324:	75 0c                	jne    c0019332 <CPU::detectFeatures()+0x816>
c0019326:	50                   	push   eax
c0019327:	50                   	push   eax
c0019328:	68 5c b8 02 c0       	push   0xc002b85c
c001932d:	e9 3f 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019332:	66 81 fa 40 02       	cmp    dx,0x240
c0019337:	75 0c                	jne    c0019345 <CPU::detectFeatures()+0x829>
c0019339:	55                   	push   ebp
c001933a:	55                   	push   ebp
c001933b:	68 63 b8 02 c0       	push   0xc002b863
c0019340:	e9 2c 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019345:	66 81 fa 80 02       	cmp    dx,0x280
c001934a:	75 0c                	jne    c0019358 <CPU::detectFeatures()+0x83c>
c001934c:	57                   	push   edi
c001934d:	57                   	push   edi
c001934e:	68 6c b8 02 c0       	push   0xc002b86c
c0019353:	e9 19 01 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019358:	66 81 fa 40 03       	cmp    dx,0x340
c001935d:	74 ed                	je     c001934c <CPU::detectFeatures()+0x830>
c001935f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019364:	75 0c                	jne    c0019372 <CPU::detectFeatures()+0x856>
c0019366:	56                   	push   esi
c0019367:	56                   	push   esi
c0019368:	68 73 b8 02 c0       	push   0xc002b873
c001936d:	e9 ff 00 00 00       	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019372:	83 f8 06             	cmp    eax,0x6
c0019375:	0f 84 45 ff ff ff    	je     c00192c0 <CPU::detectFeatures()+0x7a4>
c001937b:	83 f8 04             	cmp    eax,0x4
c001937e:	0f 84 4d ff ff ff    	je     c00192d1 <CPU::detectFeatures()+0x7b5>
c0019384:	83 f8 03             	cmp    eax,0x3
c0019387:	0f 85 72 01 00 00    	jne    c00194ff <CPU::detectFeatures()+0x9e3>
c001938d:	51                   	push   ecx
c001938e:	51                   	push   ecx
c001938f:	68 7c b8 02 c0       	push   0xc002b87c
c0019394:	53                   	push   ebx
c0019395:	e8 ce aa ff ff       	call   c0013e68 <Device::setName(char const*)>
c001939a:	b1 c1                	mov    cl,0xc1
c001939c:	88 c8                	mov    al,cl
c001939e:	e6 22                	out    0x22,al
c00193a0:	e4 23                	in     al,0x23
c00193a2:	88 c2                	mov    dl,al
c00193a4:	88 c8                	mov    al,cl
c00193a6:	e6 22                	out    0x22,al
c00193a8:	88 d0                	mov    al,dl
c00193aa:	83 c8 10             	or     eax,0x10
c00193ad:	e6 23                	out    0x23,al
c00193af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00193b6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00193b9:	89 d0                	mov    eax,edx
c00193bb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00193c1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00193c5:	40                   	inc    eax
c00193c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00193cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00193d1:	e9 a1 00 00 00       	jmp    c0019477 <CPU::detectFeatures()+0x95b>
c00193d6:	83 f8 06             	cmp    eax,0x6
c00193d9:	0f 84 e1 fe ff ff    	je     c00192c0 <CPU::detectFeatures()+0x7a4>
c00193df:	83 f8 04             	cmp    eax,0x4
c00193e2:	0f 84 e9 fe ff ff    	je     c00192d1 <CPU::detectFeatures()+0x7b5>
c00193e8:	83 f8 03             	cmp    eax,0x3
c00193eb:	0f 85 0e 01 00 00    	jne    c00194ff <CPU::detectFeatures()+0x9e3>
c00193f1:	52                   	push   edx
c00193f2:	52                   	push   edx
c00193f3:	68 87 b8 02 c0       	push   0xc002b887
c00193f8:	eb 77                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c00193fa:	83 f8 07             	cmp    eax,0x7
c00193fd:	75 09                	jne    c0019408 <CPU::detectFeatures()+0x8ec>
c00193ff:	50                   	push   eax
c0019400:	50                   	push   eax
c0019401:	68 91 b8 02 c0       	push   0xc002b891
c0019406:	eb 69                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019408:	83 f8 0a             	cmp    eax,0xa
c001940b:	75 09                	jne    c0019416 <CPU::detectFeatures()+0x8fa>
c001940d:	50                   	push   eax
c001940e:	50                   	push   eax
c001940f:	68 9c b8 02 c0       	push   0xc002b89c
c0019414:	eb 5b                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019416:	83 f8 0b             	cmp    eax,0xb
c0019419:	75 09                	jne    c0019424 <CPU::detectFeatures()+0x908>
c001941b:	50                   	push   eax
c001941c:	50                   	push   eax
c001941d:	68 a4 b8 02 c0       	push   0xc002b8a4
c0019422:	eb 4d                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019424:	83 f8 08             	cmp    eax,0x8
c0019427:	75 09                	jne    c0019432 <CPU::detectFeatures()+0x916>
c0019429:	50                   	push   eax
c001942a:	50                   	push   eax
c001942b:	68 ad b8 02 c0       	push   0xc002b8ad
c0019430:	eb 3f                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019432:	83 f8 09             	cmp    eax,0x9
c0019435:	75 09                	jne    c0019440 <CPU::detectFeatures()+0x924>
c0019437:	50                   	push   eax
c0019438:	50                   	push   eax
c0019439:	68 b5 b8 02 c0       	push   0xc002b8b5
c001943e:	eb 31                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c0019440:	83 f8 05             	cmp    eax,0x5
c0019443:	75 09                	jne    c001944e <CPU::detectFeatures()+0x932>
c0019445:	50                   	push   eax
c0019446:	50                   	push   eax
c0019447:	68 bd b8 02 c0       	push   0xc002b8bd
c001944c:	eb 23                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c001944e:	83 f8 0c             	cmp    eax,0xc
c0019451:	75 09                	jne    c001945c <CPU::detectFeatures()+0x940>
c0019453:	55                   	push   ebp
c0019454:	55                   	push   ebp
c0019455:	68 cb b8 02 c0       	push   0xc002b8cb
c001945a:	eb 15                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c001945c:	83 f8 0d             	cmp    eax,0xd
c001945f:	75 09                	jne    c001946a <CPU::detectFeatures()+0x94e>
c0019461:	57                   	push   edi
c0019462:	57                   	push   edi
c0019463:	68 d6 b8 02 c0       	push   0xc002b8d6
c0019468:	eb 07                	jmp    c0019471 <CPU::detectFeatures()+0x955>
c001946a:	56                   	push   esi
c001946b:	56                   	push   esi
c001946c:	68 ea b8 02 c0       	push   0xc002b8ea
c0019471:	53                   	push   ebx
c0019472:	e8 f1 a9 ff ff       	call   c0013e68 <Device::setName(char const*)>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	e9 80 00 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x9e3>
c001947f:	51                   	push   ecx
c0019480:	51                   	push   ecx
c0019481:	68 36 b7 02 c0       	push   0xc002b736
c0019486:	55                   	push   ebp
c0019487:	e8 80 73 fe ff       	call   c000080c <strcpy>
c001948c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019496:	e8 13 6e fe ff       	call   c00002ae <is486>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	85 c0                	test   eax,eax
c00194a0:	74 2b                	je     c00194cd <CPU::detectFeatures()+0x9b1>
c00194a2:	52                   	push   edx
c00194a3:	52                   	push   edx
c00194a4:	68 f6 b8 02 c0       	push   0xc002b8f6
c00194a9:	53                   	push   ebx
c00194aa:	e8 b9 a9 ff ff       	call   c0013e68 <Device::setName(char const*)>
c00194af:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194b6:	0f 20 c0             	mov    eax,cr0
c00194b9:	83 e0 14             	and    eax,0x14
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	83 f8 04             	cmp    eax,0x4
c00194c2:	75 1f                	jne    c00194e3 <CPU::detectFeatures()+0x9c7>
c00194c4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00194cb:	eb 32                	jmp    c00194ff <CPU::detectFeatures()+0x9e3>
c00194cd:	50                   	push   eax
c00194ce:	50                   	push   eax
c00194cf:	68 01 b9 02 c0       	push   0xc002b901
c00194d4:	53                   	push   ebx
c00194d5:	e8 8e a9 ff ff       	call   c0013e68 <Device::setName(char const*)>
c00194da:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00194e1:	eb d3                	jmp    c00194b6 <CPU::detectFeatures()+0x99a>
c00194e3:	e8 a1 6d fe ff       	call   c0000289 <hasLegacyFPU>
c00194e8:	83 e0 01             	and    eax,0x1
c00194eb:	8d 14 00             	lea    edx,[eax+eax*1]
c00194ee:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194f4:	83 e0 fd             	and    eax,0xfffffffd
c00194f7:	09 d0                	or     eax,edx
c00194f9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194ff:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019506:	83 c4 4c             	add    esp,0x4c
c0019509:	5b                   	pop    ebx
c001950a:	5e                   	pop    esi
c001950b:	5f                   	pop    edi
c001950c:	5d                   	pop    ebp
c001950d:	c3                   	ret    

c001950e <CPU::setupSMEP()>:
c001950e:	0f 20 e0             	mov    eax,cr4
c0019511:	0d 00 00 10 00       	or     eax,0x100000
c0019516:	0f 22 e0             	mov    cr4,eax
c0019519:	c3                   	ret    

c001951a <CPU::setupUMIP()>:
c001951a:	0f 20 e0             	mov    eax,cr4
c001951d:	80 cc 08             	or     ah,0x8
c0019520:	0f 22 e0             	mov    cr4,eax
c0019523:	c3                   	ret    

c0019524 <CPU::setupTSC()>:
c0019524:	0f 20 e0             	mov    eax,cr4
c0019527:	83 c8 04             	or     eax,0x4
c001952a:	0f 22 e0             	mov    cr4,eax
c001952d:	c3                   	ret    

c001952e <CPU::setupLargePages()>:
c001952e:	0f 20 e0             	mov    eax,cr4
c0019531:	83 c8 10             	or     eax,0x10
c0019534:	0f 22 e0             	mov    cr4,eax
c0019537:	c3                   	ret    

c0019538 <CPU::setupPAT()>:
c0019538:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001953d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019544:	74 2c                	je     c0019572 <CPU::setupPAT()+0x3a>
c0019546:	53                   	push   ebx
c0019547:	83 ec 10             	sub    esp,0x10
c001954a:	68 77 02 00 00       	push   0x277
c001954f:	50                   	push   eax
c0019550:	e8 eb 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019555:	83 e2 f8             	and    edx,0xfffffff8
c0019558:	83 ca 01             	or     edx,0x1
c001955b:	52                   	push   edx
c001955c:	50                   	push   eax
c001955d:	68 77 02 00 00       	push   0x277
c0019562:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c0019568:	e8 ff 55 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c001956d:	83 c4 28             	add    esp,0x28
c0019570:	5b                   	pop    ebx
c0019571:	c3                   	ret    
c0019572:	c3                   	ret    
c0019573:	90                   	nop

c0019574 <CPU::setupMTRR()>:
c0019574:	c3                   	ret    
c0019575:	90                   	nop

c0019576 <CPU::setupGlobalPages()>:
c0019576:	0f 20 e0             	mov    eax,cr4
c0019579:	0c 80                	or     al,0x80
c001957b:	0f 22 e0             	mov    cr4,eax
c001957e:	c3                   	ret    
c001957f:	90                   	nop

c0019580 <CPU::allowUsermodeDataAccess()>:
c0019580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019584:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001958b:	74 03                	je     c0019590 <CPU::allowUsermodeDataAccess()+0x10>
c001958d:	0f 01 cb             	stac   
c0019590:	c3                   	ret    
c0019591:	90                   	nop

c0019592 <CPU::prohibitUsermodeDataAccess()>:
c0019592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019596:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001959d:	74 03                	je     c00195a2 <CPU::prohibitUsermodeDataAccess()+0x10>
c001959f:	0f 01 ca             	clac   
c00195a2:	c3                   	ret    
c00195a3:	90                   	nop

c00195a4 <CPU::setupSMAP()>:
c00195a4:	0f 20 e0             	mov    eax,cr4
c00195a7:	0d 00 00 20 00       	or     eax,0x200000
c00195ac:	0f 22 e0             	mov    cr4,eax
c00195af:	eb e1                	jmp    c0019592 <CPU::prohibitUsermodeDataAccess()>
c00195b1:	90                   	nop

c00195b2 <CPU::setupFeatures()>:
c00195b2:	83 ec 0c             	sub    esp,0xc
c00195b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195b9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00195c0:	74 07                	je     c00195c9 <CPU::setupFeatures()+0x17>
c00195c2:	52                   	push   edx
c00195c3:	e8 46 ff ff ff       	call   c001950e <CPU::setupSMEP()>
c00195c8:	58                   	pop    eax
c00195c9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00195d0:	74 07                	je     c00195d9 <CPU::setupFeatures()+0x27>
c00195d2:	52                   	push   edx
c00195d3:	e8 cc ff ff ff       	call   c00195a4 <CPU::setupSMAP()>
c00195d8:	58                   	pop    eax
c00195d9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00195e0:	74 07                	je     c00195e9 <CPU::setupFeatures()+0x37>
c00195e2:	52                   	push   edx
c00195e3:	e8 32 ff ff ff       	call   c001951a <CPU::setupUMIP()>
c00195e8:	58                   	pop    eax
c00195e9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00195f0:	74 07                	je     c00195f9 <CPU::setupFeatures()+0x47>
c00195f2:	52                   	push   edx
c00195f3:	e8 2c ff ff ff       	call   c0019524 <CPU::setupTSC()>
c00195f8:	58                   	pop    eax
c00195f9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019600:	74 07                	je     c0019609 <CPU::setupFeatures()+0x57>
c0019602:	52                   	push   edx
c0019603:	e8 26 ff ff ff       	call   c001952e <CPU::setupLargePages()>
c0019608:	59                   	pop    ecx
c0019609:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019610:	74 07                	je     c0019619 <CPU::setupFeatures()+0x67>
c0019612:	52                   	push   edx
c0019613:	e8 5e ff ff ff       	call   c0019576 <CPU::setupGlobalPages()>
c0019618:	58                   	pop    eax
c0019619:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019620:	74 0c                	je     c001962e <CPU::setupFeatures()+0x7c>
c0019622:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019626:	83 c4 0c             	add    esp,0xc
c0019629:	e9 0a ff ff ff       	jmp    c0019538 <CPU::setupPAT()>
c001962e:	83 c4 0c             	add    esp,0xc
c0019631:	c3                   	ret    

c0019632 <CPU::open(int, int, void*)>:
c0019632:	57                   	push   edi
c0019633:	56                   	push   esi
c0019634:	53                   	push   ebx
c0019635:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019639:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001963d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019643:	83 ec 0c             	sub    esp,0xc
c0019646:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001964c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019652:	50                   	push   eax
c0019653:	e8 d6 57 ff ff       	call   c000ee2e <GDT::setup()>
c0019658:	83 c4 0c             	add    esp,0xc
c001965b:	6a 00                	push   0x0
c001965d:	68 ef be ad de       	push   0xdeadbeef
c0019662:	57                   	push   edi
c0019663:	e8 3e 75 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c0019668:	89 3c 24             	mov    DWORD PTR [esp],edi
c001966b:	e8 16 75 ff ff       	call   c0010b86 <TSS::flush()>
c0019670:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019676:	89 04 24             	mov    DWORD PTR [esp],eax
c0019679:	e8 14 5a ff ff       	call   c000f092 <IDT::setup()>
c001967e:	b8 00 04 00 00       	mov    eax,0x400
c0019683:	0f 23 f8             	mov    db7,eax
c0019686:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019690:	e8 00 63 ff ff       	call   c000f995 <Phys::allocatePage()>
c0019695:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001969b:	89 30                	mov    DWORD PTR [eax],esi
c001969d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00196a3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00196a6:	58                   	pop    eax
c00196a7:	5a                   	pop    edx
c00196a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196b2:	e8 95 86 ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c00196b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196ba:	e8 5d f4 ff ff       	call   c0018b1c <CPU::detectFeatures()>
c00196bf:	e8 f7 bb ff ff       	call   c00152bb <setupInterruptController()>
c00196c4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00196ca:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c00196cf:	83 e0 10             	and    eax,0x10
c00196d2:	83 f8 01             	cmp    eax,0x1
c00196d5:	19 c0                	sbb    eax,eax
c00196d7:	83 e0 46             	and    eax,0x46
c00196da:	83 c0 1e             	add    eax,0x1e
c00196dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00196e0:	e8 c4 d1 ff ff       	call   c00168a9 <setupTimer(int)>
c00196e5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00196eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196ee:	e8 bf fe ff ff       	call   c00195b2 <CPU::setupFeatures()>
c00196f3:	83 c4 10             	add    esp,0x10
c00196f6:	31 c0                	xor    eax,eax
c00196f8:	5b                   	pop    ebx
c00196f9:	5e                   	pop    esi
c00196fa:	5f                   	pop    edi
c00196fb:	c3                   	ret    

c00196fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00196fc:	57                   	push   edi
c00196fd:	56                   	push   esi
c00196fe:	53                   	push   ebx
c00196ff:	51                   	push   ecx
c0019700:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019704:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019707:	0f 02 c0             	lar    eax,ax
c001970a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001970d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019711:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019714:	88 ca                	mov    dl,cl
c0019716:	c0 ea 06             	shr    dl,0x6
c0019719:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001971d:	89 ca                	mov    edx,ecx
c001971f:	66 c1 ea 03          	shr    dx,0x3
c0019723:	83 e2 07             	and    edx,0x7
c0019726:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001972b:	88 17                	mov    BYTE PTR [edi],dl
c001972d:	0f 84 a6 01 00 00    	je     c00198d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019733:	83 e1 07             	and    ecx,0x7
c0019736:	80 f9 04             	cmp    cl,0x4
c0019739:	0f 84 98 00 00 00    	je     c00197d7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001973f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019744:	0f 95 c0             	setne  al
c0019747:	80 f9 05             	cmp    cl,0x5
c001974a:	0f 95 c2             	setne  dl
c001974d:	08 c2                	or     dl,al
c001974f:	74 79                	je     c00197ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019751:	84 c9                	test   cl,cl
c0019753:	75 05                	jne    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019755:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019758:	eb 3c                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001975a:	80 f9 01             	cmp    cl,0x1
c001975d:	75 05                	jne    c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001975f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019762:	eb 32                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019764:	80 f9 02             	cmp    cl,0x2
c0019767:	75 05                	jne    c001976e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019769:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001976c:	eb 28                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001976e:	31 c0                	xor    eax,eax
c0019770:	80 f9 03             	cmp    cl,0x3
c0019773:	75 05                	jne    c001977a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019775:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019778:	eb 1c                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001977a:	80 f9 05             	cmp    cl,0x5
c001977d:	75 05                	jne    c0019784 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001977f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019782:	eb 12                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019784:	80 f9 06             	cmp    cl,0x6
c0019787:	75 05                	jne    c001978e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019789:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001978c:	eb 08                	jmp    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001978e:	80 f9 07             	cmp    cl,0x7
c0019791:	75 03                	jne    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019793:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019796:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001979b:	75 10                	jne    c00197ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001979d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00197a1:	b9 03 00 00 00       	mov    ecx,0x3
c00197a6:	01 d0                	add    eax,edx
c00197a8:	e9 37 01 00 00       	jmp    c00198e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197ad:	b9 02 00 00 00       	mov    ecx,0x2
c00197b2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00197b7:	0f 85 27 01 00 00    	jne    c00198e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197bd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00197c0:	b9 06 00 00 00       	mov    ecx,0x6
c00197c5:	e9 1a 01 00 00       	jmp    c00198e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197ca:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00197cd:	b9 06 00 00 00       	mov    ecx,0x6
c00197d2:	e9 0f 01 00 00       	jmp    c00198e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197d7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00197da:	88 ca                	mov    dl,cl
c00197dc:	c0 ea 06             	shr    dl,0x6
c00197df:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00197e3:	89 ca                	mov    edx,ecx
c00197e5:	66 c1 ea 03          	shr    dx,0x3
c00197e9:	83 e2 07             	and    edx,0x7
c00197ec:	80 e1 07             	and    cl,0x7
c00197ef:	75 05                	jne    c00197f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00197f1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00197f4:	eb 4c                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197f6:	80 f9 01             	cmp    cl,0x1
c00197f9:	75 05                	jne    c0019800 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00197fb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00197fe:	eb 42                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019800:	80 f9 02             	cmp    cl,0x2
c0019803:	75 05                	jne    c001980a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019805:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019808:	eb 38                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001980a:	80 f9 03             	cmp    cl,0x3
c001980d:	75 05                	jne    c0019814 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001980f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019812:	eb 2e                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019814:	80 f9 04             	cmp    cl,0x4
c0019817:	75 12                	jne    c001982b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019819:	f6 c4 60             	test   ah,0x60
c001981c:	75 08                	jne    c0019826 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001981e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019821:	8d 78 14             	lea    edi,[eax+0x14]
c0019824:	eb 1c                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019826:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019829:	eb 17                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001982b:	80 f9 05             	cmp    cl,0x5
c001982e:	75 05                	jne    c0019835 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019830:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019833:	eb 0d                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019835:	80 f9 06             	cmp    cl,0x6
c0019838:	75 05                	jne    c001983f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001983a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001983d:	eb 03                	jmp    c0019842 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001983f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019842:	84 d2                	test   dl,dl
c0019844:	75 05                	jne    c001984b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019846:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019849:	eb 3c                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001984b:	80 fa 01             	cmp    dl,0x1
c001984e:	75 05                	jne    c0019855 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019850:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019853:	eb 32                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019855:	80 fa 02             	cmp    dl,0x2
c0019858:	75 05                	jne    c001985f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001985a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001985d:	eb 28                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001985f:	80 fa 03             	cmp    dl,0x3
c0019862:	75 05                	jne    c0019869 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019864:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019867:	eb 1e                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019869:	31 c0                	xor    eax,eax
c001986b:	80 fa 04             	cmp    dl,0x4
c001986e:	74 17                	je     c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019870:	80 fa 05             	cmp    dl,0x5
c0019873:	75 05                	jne    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019875:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019878:	eb 0d                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001987a:	80 fa 06             	cmp    dl,0x6
c001987d:	75 05                	jne    c0019884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001987f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019882:	eb 03                	jmp    c0019887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019884:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019887:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001988c:	0f 94 c2             	sete   dl
c001988f:	80 f9 05             	cmp    cl,0x5
c0019892:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019896:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001989b:	d3 e0                	shl    eax,cl
c001989d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00198a1:	74 0a                	je     c00198ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00198a3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00198a6:	b9 07 00 00 00       	mov    ecx,0x7
c00198ab:	eb 37                	jmp    c00198e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198ad:	01 f8                	add    eax,edi
c00198af:	b9 03 00 00 00       	mov    ecx,0x3
c00198b4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00198b9:	74 2b                	je     c00198e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198bb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198c0:	75 0d                	jne    c00198cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00198c2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00198c6:	01 c8                	add    eax,ecx
c00198c8:	b9 04 00 00 00       	mov    ecx,0x4
c00198cd:	eb 17                	jmp    c00198e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198cf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00198d2:	b9 07 00 00 00       	mov    ecx,0x7
c00198d7:	eb 0d                	jmp    c00198e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198d9:	b9 02 00 00 00       	mov    ecx,0x2
c00198de:	b2 01                	mov    dl,0x1
c00198e0:	31 c0                	xor    eax,eax
c00198e2:	eb 02                	jmp    c00198e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198e4:	31 d2                	xor    edx,edx
c00198e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198ea:	89 0b                	mov    DWORD PTR [ebx],ecx
c00198ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00198f0:	88 11                	mov    BYTE PTR [ecx],dl
c00198f2:	5a                   	pop    edx
c00198f3:	5b                   	pop    ebx
c00198f4:	5e                   	pop    esi
c00198f5:	5f                   	pop    edi
c00198f6:	c3                   	ret    

c00198f7 <Krnl::smpEntry()>:
c00198f7:	eb fe                	jmp    c00198f7 <Krnl::smpEntry()>

c00198f9 <Krnl::startCPU(int)>:
c00198f9:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00198fe:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019905:	0f 84 36 01 00 00    	je     c0019a41 <Krnl::startCPU(int)+0x148>
c001990b:	53                   	push   ebx
c001990c:	83 ec 10             	sub    esp,0x10
c001990f:	fa                   	cli    
c0019910:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c0019916:	6a 1b                	push   0x1b
c0019918:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c001991e:	e8 1d 52 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019923:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019928:	89 c3                	mov    ebx,eax
c001992a:	58                   	pop    eax
c001992b:	5a                   	pop    edx
c001992c:	53                   	push   ebx
c001992d:	68 38 b9 02 c0       	push   0xc002b938
c0019932:	e8 02 8f ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0019937:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019945:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001994f:	c1 e0 18             	shl    eax,0x18
c0019952:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019961:	09 c2                	or     edx,eax
c0019963:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019969:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001996f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019975:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001997b:	80 cd c5             	or     ch,0xc5
c001997e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019984:	f3 90                	pause  
c0019986:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019988:	0f ba e1 0c          	bt     ecx,0xc
c001998c:	72 f6                	jb     c0019984 <Krnl::startCPU(int)+0x8b>
c001998e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019994:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001999a:	09 c1                	or     ecx,eax
c001999c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00199a2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199a8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00199ae:	80 cd 85             	or     ch,0x85
c00199b1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00199b7:	f3 90                	pause  
c00199b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199bb:	0f ba e1 0c          	bt     ecx,0xc
c00199bf:	72 f6                	jb     c00199b7 <Krnl::startCPU(int)+0xbe>
c00199c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00199cb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00199d1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00199d7:	09 c1                	or     ecx,eax
c00199d9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00199df:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199e5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00199eb:	81 c9 02 06 00 00    	or     ecx,0x602
c00199f1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00199f7:	f3 90                	pause  
c00199f9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199fb:	0f ba e1 0c          	bt     ecx,0xc
c00199ff:	72 f6                	jb     c00199f7 <Krnl::startCPU(int)+0xfe>
c0019a01:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a0b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019a11:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019a17:	09 c8                	or     eax,ecx
c0019a19:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019a1f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019a25:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019a2a:	0d 02 06 00 00       	or     eax,0x602
c0019a2f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019a35:	f3 90                	pause  
c0019a37:	8b 02                	mov    eax,DWORD PTR [edx]
c0019a39:	0f ba e0 0c          	bt     eax,0xc
c0019a3d:	72 f6                	jb     c0019a35 <Krnl::startCPU(int)+0x13c>
c0019a3f:	eb fe                	jmp    c0019a3f <Krnl::startCPU(int)+0x146>
c0019a41:	c3                   	ret    

c0019a42 <Krnl::startCPUs()>:
c0019a42:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0019a47:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019a4d:	88 c2                	mov    dl,al
c0019a4f:	83 e2 0a             	and    edx,0xa
c0019a52:	80 fa 0a             	cmp    dl,0xa
c0019a55:	75 09                	jne    c0019a60 <Krnl::startCPUs()+0x1e>
c0019a57:	a8 01                	test   al,0x1
c0019a59:	74 05                	je     c0019a60 <Krnl::startCPUs()+0x1e>
c0019a5b:	e9 3b 67 fe ff       	jmp    c000019b <prepareTramp>
c0019a60:	c3                   	ret    
c0019a61:	90                   	nop

c0019a62 <EnvVarContainer::getEnv(char const*)>:
c0019a62:	57                   	push   edi
c0019a63:	56                   	push   esi
c0019a64:	53                   	push   ebx
c0019a65:	31 db                	xor    ebx,ebx
c0019a67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a6b:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a6d:	7e 2b                	jle    c0019a9a <EnvVarContainer::getEnv(char const*)+0x38>
c0019a6f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a76:	50                   	push   eax
c0019a77:	50                   	push   eax
c0019a78:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a7b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a82:	e8 11 6e fe ff       	call   c0000898 <strcmp>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	85 c0                	test   eax,eax
c0019a8c:	75 09                	jne    c0019a97 <EnvVarContainer::getEnv(char const*)+0x35>
c0019a8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a91:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a95:	eb 05                	jmp    c0019a9c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a97:	43                   	inc    ebx
c0019a98:	eb d1                	jmp    c0019a6b <EnvVarContainer::getEnv(char const*)+0x9>
c0019a9a:	31 c0                	xor    eax,eax
c0019a9c:	5b                   	pop    ebx
c0019a9d:	5e                   	pop    esi
c0019a9e:	5f                   	pop    edi
c0019a9f:	c3                   	ret    

c0019aa0 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019aa0:	55                   	push   ebp
c0019aa1:	57                   	push   edi
c0019aa2:	56                   	push   esi
c0019aa3:	53                   	push   ebx
c0019aa4:	83 ec 28             	sub    esp,0x28
c0019aa7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019aab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019aaf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ab3:	56                   	push   esi
c0019ab4:	e8 b3 6c fe ff       	call   c000076c <strlen>
c0019ab9:	40                   	inc    eax
c0019aba:	89 04 24             	mov    DWORD PTR [esp],eax
c0019abd:	e8 d7 5a ff ff       	call   c000f599 <malloc>
c0019ac2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ac5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ac9:	e8 9e 6c fe ff       	call   c000076c <strlen>
c0019ace:	40                   	inc    eax
c0019acf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ad2:	e8 c2 5a ff ff       	call   c000f599 <malloc>
c0019ad7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ada:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ade:	e8 89 6c fe ff       	call   c000076c <strlen>
c0019ae3:	83 c4 0c             	add    esp,0xc
c0019ae6:	40                   	inc    eax
c0019ae7:	50                   	push   eax
c0019ae8:	6a 00                	push   0x0
c0019aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019aee:	e8 5d 6c fe ff       	call   c0000750 <memset>
c0019af3:	89 34 24             	mov    DWORD PTR [esp],esi
c0019af6:	e8 71 6c fe ff       	call   c000076c <strlen>
c0019afb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019aff:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b07:	89 de                	mov    esi,ebx
c0019b09:	e8 5e 6c fe ff       	call   c000076c <strlen>
c0019b0e:	83 c4 0c             	add    esp,0xc
c0019b11:	40                   	inc    eax
c0019b12:	50                   	push   eax
c0019b13:	6a 00                	push   0x0
c0019b15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b19:	e8 32 6c fe ff       	call   c0000750 <memset>
c0019b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b21:	e8 46 6c fe ff       	call   c000076c <strlen>
c0019b26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019b2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b32:	40                   	inc    eax
c0019b33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b36:	c1 e0 03             	shl    eax,0x3
c0019b39:	5a                   	pop    edx
c0019b3a:	59                   	pop    ecx
c0019b3b:	50                   	push   eax
c0019b3c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b3f:	e8 41 5a ff ff       	call   c000f585 <realloc>
c0019b44:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b48:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b4b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b4e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b52:	b9 08 00 00 00       	mov    ecx,0x8
c0019b57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b59:	83 c4 2c             	add    esp,0x2c
c0019b5c:	5b                   	pop    ebx
c0019b5d:	5e                   	pop    esi
c0019b5e:	5f                   	pop    edi
c0019b5f:	5d                   	pop    ebp
c0019b60:	c3                   	ret    
c0019b61:	90                   	nop

c0019b62 <EnvVarContainer::deleteEnv(char const*)>:
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b64:	55                   	push   ebp
c0019b65:	57                   	push   edi
c0019b66:	56                   	push   esi
c0019b67:	53                   	push   ebx
c0019b68:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b6e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019b75:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019b7c:	68 14 01 00 00       	push   0x114
c0019b81:	e8 13 5a ff ff       	call   c000f599 <malloc>
c0019b86:	83 c4 0c             	add    esp,0xc
c0019b89:	89 c3                	mov    ebx,eax
c0019b8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019b8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019b95:	50                   	push   eax
c0019b96:	e8 fd 91 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c0019b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b9e:	e8 c7 94 ff ff       	call   c001306a <File::exists()>
c0019ba3:	83 c4 10             	add    esp,0x10
c0019ba6:	84 c0                	test   al,al
c0019ba8:	75 31                	jne    c0019bdb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019baa:	50                   	push   eax
c0019bab:	50                   	push   eax
c0019bac:	6a 12                	push   0x12
c0019bae:	53                   	push   ebx
c0019baf:	e8 48 92 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c0019bb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bb6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019bb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019bbc:	e8 ab 6b fe ff       	call   c000076c <strlen>
c0019bc1:	5a                   	pop    edx
c0019bc2:	31 d2                	xor    edx,edx
c0019bc4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bc8:	51                   	push   ecx
c0019bc9:	56                   	push   esi
c0019bca:	52                   	push   edx
c0019bcb:	50                   	push   eax
c0019bcc:	53                   	push   ebx
c0019bcd:	ff d7                	call   edi
c0019bcf:	83 c4 14             	add    esp,0x14
c0019bd2:	53                   	push   ebx
c0019bd3:	e8 82 92 ff ff       	call   c0012e5a <File::close()>
c0019bd8:	83 c4 10             	add    esp,0x10
c0019bdb:	56                   	push   esi
c0019bdc:	31 f6                	xor    esi,esi
c0019bde:	68 00 01 00 00       	push   0x100
c0019be3:	6a 00                	push   0x0
c0019be5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019be9:	50                   	push   eax
c0019bea:	e8 61 6b fe ff       	call   c0000750 <memset>
c0019bef:	5f                   	pop    edi
c0019bf0:	58                   	pop    eax
c0019bf1:	6a 01                	push   0x1
c0019bf3:	53                   	push   ebx
c0019bf4:	e8 03 92 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c0019bf9:	83 c4 10             	add    esp,0x10
c0019bfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c04:	83 ec 0c             	sub    esp,0xc
c0019c07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c09:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c0d:	51                   	push   ecx
c0019c0e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019c12:	52                   	push   edx
c0019c13:	6a 00                	push   0x0
c0019c15:	6a 01                	push   0x1
c0019c17:	53                   	push   ebx
c0019c18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c1f:	83 c4 20             	add    esp,0x20
c0019c22:	3c 0d                	cmp    al,0xd
c0019c24:	0f 84 09 01 00 00    	je     c0019d33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019c2f:	0f 84 ef 00 00 00    	je     c0019d24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019c35:	3c 0a                	cmp    al,0xa
c0019c37:	74 13                	je     c0019c4c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019c39:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c3e:	74 0c                	je     c0019c4c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019c40:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019c46:	0f 8e d8 00 00 00    	jle    c0019d24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c50:	83 ec 0c             	sub    esp,0xc
c0019c53:	8d 78 01             	lea    edi,[eax+0x1]
c0019c56:	57                   	push   edi
c0019c57:	e8 3d 59 ff ff       	call   c000f599 <malloc>
c0019c5c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019c60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c64:	8d 56 04             	lea    edx,[esi+0x4]
c0019c67:	89 14 24             	mov    DWORD PTR [esp],edx
c0019c6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c6e:	e8 26 59 ff ff       	call   c000f599 <malloc>
c0019c73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c77:	83 c4 0c             	add    esp,0xc
c0019c7a:	57                   	push   edi
c0019c7b:	6a 00                	push   0x0
c0019c7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c81:	e8 ca 6a fe ff       	call   c0000750 <memset>
c0019c86:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019c8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c8e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c94:	83 c4 0c             	add    esp,0xc
c0019c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c9b:	52                   	push   edx
c0019c9c:	6a 00                	push   0x0
c0019c9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ca2:	e8 a9 6a fe ff       	call   c0000750 <memset>
c0019ca7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019cab:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019caf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cb2:	e8 b5 6a fe ff       	call   c000076c <strlen>
c0019cb7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019cbb:	89 c1                	mov    ecx,eax
c0019cbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019cc2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019cc5:	40                   	inc    eax
c0019cc6:	83 c4 10             	add    esp,0x10
c0019cc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019ccc:	85 d2                	test   edx,edx
c0019cce:	75 0c                	jne    c0019cdc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	6a 08                	push   0x8
c0019cd5:	e8 bf 58 ff ff       	call   c000f599 <malloc>
c0019cda:	eb 0c                	jmp    c0019ce8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019cdc:	c1 e0 03             	shl    eax,0x3
c0019cdf:	51                   	push   ecx
c0019ce0:	51                   	push   ecx
c0019ce1:	50                   	push   eax
c0019ce2:	52                   	push   edx
c0019ce3:	e8 9d 58 ff ff       	call   c000f585 <realloc>
c0019ce8:	83 c4 10             	add    esp,0x10
c0019ceb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019cee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019cf1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019cf4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019cf8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019cfc:	b9 08 00 00 00       	mov    ecx,0x8
c0019d01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d03:	31 f6                	xor    esi,esi
c0019d05:	50                   	push   eax
c0019d06:	68 00 01 00 00       	push   0x100
c0019d0b:	6a 00                	push   0x0
c0019d0d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d11:	50                   	push   eax
c0019d12:	e8 39 6a fe ff       	call   c0000750 <memset>
c0019d17:	83 c4 10             	add    esp,0x10
c0019d1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d22:	eb 0f                	jmp    c0019d33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019d24:	3c 3d                	cmp    al,0x3d
c0019d26:	74 07                	je     c0019d2f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019d28:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019d2c:	46                   	inc    esi
c0019d2d:	eb 04                	jmp    c0019d33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019d2f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019d33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d38:	0f 85 c6 fe ff ff    	jne    c0019c04 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019d3e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d44:	5b                   	pop    ebx
c0019d45:	5e                   	pop    esi
c0019d46:	5f                   	pop    edi
c0019d47:	5d                   	pop    ebp
c0019d48:	c3                   	ret    
c0019d49:	90                   	nop

c0019d4a <EnvVarContainer::__loadSystem()>:
c0019d4a:	83 ec 10             	sub    esp,0x10
c0019d4d:	68 a0 d2 02 c0       	push   0xc002d2a0
c0019d52:	68 49 b9 02 c0       	push   0xc002b949
c0019d57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d5b:	e8 04 fe ff ff       	call   c0019b64 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d60:	83 c4 1c             	add    esp,0x1c
c0019d63:	c3                   	ret    

c0019d64 <EnvVarContainer::__loadUser()>:
c0019d64:	c3                   	ret    
c0019d65:	90                   	nop

c0019d66 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d78:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d86:	90                   	nop
c0019d87:	c3                   	ret    

c0019d88 <EnvVarContainer::~EnvVarContainer()>:
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019d92:	85 c0                	test   eax,eax
c0019d94:	74 1d                	je     c0019db3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d9c:	85 c0                	test   eax,eax
c0019d9e:	74 13                	je     c0019db3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019da7:	83 ec 0c             	sub    esp,0xc
c0019daa:	50                   	push   eax
c0019dab:	e8 f9 57 ff ff       	call   c000f5a9 <free>
c0019db0:	83 c4 10             	add    esp,0x10
c0019db3:	90                   	nop
c0019db4:	83 c4 0c             	add    esp,0xc
c0019db7:	c3                   	ret    

c0019db8 <Krnl::getEnv(Process*, char const*)>:
c0019db8:	53                   	push   ebx
c0019db9:	83 ec 08             	sub    esp,0x8
c0019dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019dc4:	39 05 b0 12 03 c0    	cmp    DWORD PTR ds:0xc00312b0,eax
c0019dca:	74 04                	je     c0019dd0 <Krnl::getEnv(Process*, char const*)+0x18>
c0019dcc:	85 c0                	test   eax,eax
c0019dce:	75 0b                	jne    c0019ddb <Krnl::getEnv(Process*, char const*)+0x23>
c0019dd0:	a1 94 08 03 c0       	mov    eax,ds:0xc0030894
c0019dd5:	85 c0                	test   eax,eax
c0019dd7:	75 19                	jne    c0019df2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019dd9:	eb 27                	jmp    c0019e02 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019ddb:	52                   	push   edx
c0019ddc:	52                   	push   edx
c0019ddd:	53                   	push   ebx
c0019dde:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019de4:	e8 79 fc ff ff       	call   c0019a62 <EnvVarContainer::getEnv(char const*)>
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	85 c0                	test   eax,eax
c0019dee:	75 28                	jne    c0019e18 <Krnl::getEnv(Process*, char const*)+0x60>
c0019df0:	eb de                	jmp    c0019dd0 <Krnl::getEnv(Process*, char const*)+0x18>
c0019df2:	52                   	push   edx
c0019df3:	52                   	push   edx
c0019df4:	53                   	push   ebx
c0019df5:	50                   	push   eax
c0019df6:	e8 67 fc ff ff       	call   c0019a62 <EnvVarContainer::getEnv(char const*)>
c0019dfb:	83 c4 10             	add    esp,0x10
c0019dfe:	85 c0                	test   eax,eax
c0019e00:	75 16                	jne    c0019e18 <Krnl::getEnv(Process*, char const*)+0x60>
c0019e02:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019e06:	a1 98 08 03 c0       	mov    eax,ds:0xc0030898
c0019e0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e0f:	83 c4 08             	add    esp,0x8
c0019e12:	5b                   	pop    ebx
c0019e13:	e9 4a fc ff ff       	jmp    c0019a62 <EnvVarContainer::getEnv(char const*)>
c0019e18:	83 c4 08             	add    esp,0x8
c0019e1b:	5b                   	pop    ebx
c0019e1c:	c3                   	ret    

c0019e1d <Krnl::setEnvSystem(char const*, char const*)>:
c0019e1d:	83 ec 10             	sub    esp,0x10
c0019e20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e28:	ff 35 98 08 03 c0    	push   DWORD PTR ds:0xc0030898
c0019e2e:	e8 6d fc ff ff       	call   c0019aa0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e33:	83 c4 1c             	add    esp,0x1c
c0019e36:	c3                   	ret    

c0019e37 <Krnl::setEnvUser(char const*, char const*)>:
c0019e37:	a1 94 08 03 c0       	mov    eax,ds:0xc0030894
c0019e3c:	85 c0                	test   eax,eax
c0019e3e:	74 15                	je     c0019e55 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019e40:	83 ec 10             	sub    esp,0x10
c0019e43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e4b:	50                   	push   eax
c0019e4c:	e8 4f fc ff ff       	call   c0019aa0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e51:	83 c4 1c             	add    esp,0x1c
c0019e54:	c3                   	ret    
c0019e55:	c3                   	ret    

c0019e56 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e5a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e64:	e9 37 fc ff ff       	jmp    c0019aa0 <EnvVarContainer::setEnv(char const*, char const*)>

c0019e69 <Krnl::deleteEnvSystem(char const*)>:
c0019e69:	c3                   	ret    

c0019e6a <Krnl::deleteEnvUser(char const*)>:
c0019e6a:	c3                   	ret    

c0019e6b <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e6b:	c3                   	ret    

c0019e6c <Krnl::newProcessEnv(Process*)>:
c0019e6c:	83 ec 28             	sub    esp,0x28
c0019e6f:	6a 0c                	push   0xc
c0019e71:	e8 23 57 ff ff       	call   c000f599 <malloc>
c0019e76:	5a                   	pop    edx
c0019e77:	59                   	pop    ecx
c0019e78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e7c:	50                   	push   eax
c0019e7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e81:	e8 e0 fe ff ff       	call   c0019d66 <EnvVarContainer::EnvVarContainer(Process*)>
c0019e86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e8a:	83 c4 2c             	add    esp,0x2c
c0019e8d:	c3                   	ret    

c0019e8e <Krnl::copyProcessEnv(Process*, Process*)>:
c0019e8e:	57                   	push   edi
c0019e8f:	56                   	push   esi
c0019e90:	53                   	push   ebx
c0019e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e95:	83 ec 0c             	sub    esp,0xc
c0019e98:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019e9e:	6a 0c                	push   0xc
c0019ea0:	e8 f4 56 ff ff       	call   c000f599 <malloc>
c0019ea5:	89 c3                	mov    ebx,eax
c0019ea7:	58                   	pop    eax
c0019ea8:	5a                   	pop    edx
c0019ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ead:	53                   	push   ebx
c0019eae:	e8 b3 fe ff ff       	call   c0019d66 <EnvVarContainer::EnvVarContainer(Process*)>
c0019eb3:	8b 07                	mov    eax,DWORD PTR [edi]
c0019eb5:	89 03                	mov    DWORD PTR [ebx],eax
c0019eb7:	c1 e0 03             	shl    eax,0x3
c0019eba:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ebd:	e8 d7 56 ff ff       	call   c000f599 <malloc>
c0019ec2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ec5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019ec7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019eca:	c1 e1 03             	shl    ecx,0x3
c0019ecd:	89 c7                	mov    edi,eax
c0019ecf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	89 d8                	mov    eax,ebx
c0019ed6:	5b                   	pop    ebx
c0019ed7:	5e                   	pop    esi
c0019ed8:	5f                   	pop    edi
c0019ed9:	c3                   	ret    

c0019eda <Krnl::loadSystemEnv()>:
c0019eda:	53                   	push   ebx
c0019edb:	83 ec 14             	sub    esp,0x14
c0019ede:	6a 0c                	push   0xc
c0019ee0:	e8 b4 56 ff ff       	call   c000f599 <malloc>
c0019ee5:	89 c3                	mov    ebx,eax
c0019ee7:	58                   	pop    eax
c0019ee8:	5a                   	pop    edx
c0019ee9:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c0019eef:	53                   	push   ebx
c0019ef0:	e8 71 fe ff ff       	call   c0019d66 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ef5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef8:	89 1d 98 08 03 c0    	mov    DWORD PTR ds:0xc0030898,ebx
c0019efe:	e8 47 fe ff ff       	call   c0019d4a <EnvVarContainer::__loadSystem()>
c0019f03:	83 c4 18             	add    esp,0x18
c0019f06:	5b                   	pop    ebx
c0019f07:	c3                   	ret    

c0019f08 <Krnl::loadUserEnv()>:
c0019f08:	53                   	push   ebx
c0019f09:	83 ec 14             	sub    esp,0x14
c0019f0c:	6a 0c                	push   0xc
c0019f0e:	e8 86 56 ff ff       	call   c000f599 <malloc>
c0019f13:	89 c3                	mov    ebx,eax
c0019f15:	58                   	pop    eax
c0019f16:	5a                   	pop    edx
c0019f17:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c0019f1d:	53                   	push   ebx
c0019f1e:	e8 43 fe ff ff       	call   c0019d66 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f23:	89 1d 94 08 03 c0    	mov    DWORD PTR ds:0xc0030894,ebx
c0019f29:	83 c4 18             	add    esp,0x18
c0019f2c:	5b                   	pop    ebx
c0019f2d:	c3                   	ret    

c0019f2e <Krnl::flushEnv()>:
c0019f2e:	c3                   	ret    

c0019f2f <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f33:	8b 15 94 08 03 c0    	mov    edx,DWORD PTR ds:0xc0030894
c0019f39:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f3f:	a1 98 08 03 c0       	mov    eax,ds:0xc0030898
c0019f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f46:	03 01                	add    eax,DWORD PTR [ecx]
c0019f48:	85 d2                	test   edx,edx
c0019f4a:	74 02                	je     c0019f4e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019f4c:	03 02                	add    eax,DWORD PTR [edx]
c0019f4e:	c3                   	ret    

c0019f4f <Krnl::getProcessEnvPair(Process*, int)>:
c0019f4f:	57                   	push   edi
c0019f50:	56                   	push   esi
c0019f51:	8b 35 94 08 03 c0    	mov    esi,DWORD PTR ds:0xc0030894
c0019f57:	53                   	push   ebx
c0019f58:	85 f6                	test   esi,esi
c0019f5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f62:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019f6c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019f6e:	75 16                	jne    c0019f86 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019f70:	39 c2                	cmp    edx,eax
c0019f72:	7c 16                	jl     c0019f8a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f74:	8b 0d 98 08 03 c0    	mov    ecx,DWORD PTR ds:0xc0030898
c0019f7a:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019f7c:	01 c6                	add    esi,eax
c0019f7e:	39 d6                	cmp    esi,edx
c0019f80:	7e 3c                	jle    c0019fbe <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019f82:	29 c2                	sub    edx,eax
c0019f84:	eb 04                	jmp    c0019f8a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019f86:	39 c2                	cmp    edx,eax
c0019f88:	7d 05                	jge    c0019f8f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019f8a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019f8d:	eb 20                	jmp    c0019faf <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019f8f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019f91:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019f94:	39 d1                	cmp    ecx,edx
c0019f96:	7e 04                	jle    c0019f9c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019f98:	29 c2                	sub    edx,eax
c0019f9a:	eb 10                	jmp    c0019fac <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019f9c:	8b 35 98 08 03 c0    	mov    esi,DWORD PTR ds:0xc0030898
c0019fa2:	03 0e                	add    ecx,DWORD PTR [esi]
c0019fa4:	39 d1                	cmp    ecx,edx
c0019fa6:	7e 16                	jle    c0019fbe <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019fa8:	29 c2                	sub    edx,eax
c0019faa:	29 fa                	sub    edx,edi
c0019fac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019faf:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019fb2:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fb4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019fb7:	89 03                	mov    DWORD PTR [ebx],eax
c0019fb9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019fbc:	eb 1d                	jmp    c0019fdb <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019fbe:	83 ec 0c             	sub    esp,0xc
c0019fc1:	68 6b b9 02 c0       	push   0xc002b96b
c0019fc6:	e8 18 00 00 00       	call   c0019fe3 <Krnl::panic(char const*)>
c0019fcb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019fd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	89 d8                	mov    eax,ebx
c0019fdd:	5b                   	pop    ebx
c0019fde:	5e                   	pop    esi
c0019fdf:	5f                   	pop    edi
c0019fe0:	c2 04 00             	ret    0x4

c0019fe3 <Krnl::panic(char const*)>:
c0019fe3:	55                   	push   ebp
c0019fe4:	89 e5                	mov    ebp,esp
c0019fe6:	53                   	push   ebx
c0019fe7:	83 ec 10             	sub    esp,0x10
c0019fea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019fed:	fa                   	cli    
c0019fee:	c6 05 a4 08 03 c0 01 	mov    BYTE PTR ds:0xc00308a4,0x1
c0019ff5:	53                   	push   ebx
c0019ff6:	e8 f8 55 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019ffb:	58                   	pop    eax
c0019ffc:	c6 05 a0 cc 02 c0 00 	mov    BYTE PTR ds:0xc002cca0,0x0
c001a003:	5a                   	pop    edx
c001a004:	53                   	push   ebx
c001a005:	68 85 b9 02 c0       	push   0xc002b985
c001a00a:	e8 2a 88 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001a00f:	59                   	pop    ecx
c001a010:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01b:	e8 33 63 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001a020:	83 c4 0c             	add    esp,0xc
c001a023:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a028:	6a 01                	push   0x1
c001a02a:	6a 0f                	push   0xf
c001a02c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a032:	e8 7b 61 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a037:	58                   	pop    eax
c001a038:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a03d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a043:	e8 8c 66 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c001a048:	58                   	pop    eax
c001a049:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a04e:	5a                   	pop    edx
c001a04f:	68 9e b9 02 c0       	push   0xc002b99e
c001a054:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05a:	e8 01 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a05f:	59                   	pop    ecx
c001a060:	58                   	pop    eax
c001a061:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a066:	68 44 ba 02 c0       	push   0xc002ba44
c001a06b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a071:	e8 ea 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a076:	58                   	pop    eax
c001a077:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a07c:	5a                   	pop    edx
c001a07d:	68 ba b9 02 c0       	push   0xc002b9ba
c001a082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a088:	e8 d3 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a08d:	59                   	pop    ecx
c001a08e:	58                   	pop    eax
c001a08f:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a094:	53                   	push   ebx
c001a095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09b:	e8 c0 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0a0:	58                   	pop    eax
c001a0a1:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a0a6:	5a                   	pop    edx
c001a0a7:	68 da b9 02 c0       	push   0xc002b9da
c001a0ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b2:	e8 a9 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0b7:	a1 a0 08 03 c0       	mov    eax,ds:0xc00308a0
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	85 c0                	test   eax,eax
c001a0c1:	74 02                	je     c001a0c5 <Krnl::panic(char const*)+0xe2>
c001a0c3:	ff d0                	call   eax
c001a0c5:	83 ec 0c             	sub    esp,0xc
c001a0c8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0cb:	e8 8f 30 00 00       	call   c001d15f <Thr::getDriverNameFromAddress(unsigned long)>
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	89 c3                	mov    ebx,eax
c001a0d5:	85 c0                	test   eax,eax
c001a0d7:	0f 84 4e 02 00 00    	je     c001a32b <Krnl::panic(char const*)+0x348>
c001a0dd:	83 ec 08             	sub    esp,0x8
c001a0e0:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a0e5:	68 80 ba 02 c0       	push   0xc002ba80
c001a0ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f0:	e8 6b 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0f5:	58                   	pop    eax
c001a0f6:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a0fb:	5a                   	pop    edx
c001a0fc:	68 ba b9 02 c0       	push   0xc002b9ba
c001a101:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a107:	e8 54 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a10c:	59                   	pop    ecx
c001a10d:	58                   	pop    eax
c001a10e:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a113:	53                   	push   ebx
c001a114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a11a:	e8 41 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	83 ec 08             	sub    esp,0x8
c001a125:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a12a:	68 d9 b9 02 c0       	push   0xc002b9d9
c001a12f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a135:	e8 26 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a13a:	58                   	pop    eax
c001a13b:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a140:	5a                   	pop    edx
c001a141:	68 d8 ba 02 c0       	push   0xc002bad8
c001a146:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14c:	e8 0f 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a151:	59                   	pop    ecx
c001a152:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a157:	5b                   	pop    ebx
c001a158:	68 18 bb 02 c0       	push   0xc002bb18
c001a15d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a163:	e8 f8 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a168:	58                   	pop    eax
c001a169:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a16e:	5a                   	pop    edx
c001a16f:	68 c5 b9 02 c0       	push   0xc002b9c5
c001a174:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17a:	e8 e1 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a17f:	59                   	pop    ecx
c001a180:	5b                   	pop    ebx
c001a181:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a184:	68 dd b9 02 c0       	push   0xc002b9dd
c001a189:	e8 ab 86 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001a18e:	58                   	pop    eax
c001a18f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a192:	5a                   	pop    edx
c001a193:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a196:	68 e6 b9 02 c0       	push   0xc002b9e6
c001a19b:	e8 99 86 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001a1a0:	59                   	pop    ecx
c001a1a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1a4:	5b                   	pop    ebx
c001a1a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1aa:	68 ef b9 02 c0       	push   0xc002b9ef
c001a1af:	e8 85 86 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001a1b4:	58                   	pop    eax
c001a1b5:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a1ba:	5a                   	pop    edx
c001a1bb:	68 5c bb 02 c0       	push   0xc002bb5c
c001a1c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1c6:	e8 95 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1cb:	59                   	pop    ecx
c001a1cc:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a1d1:	5b                   	pop    ebx
c001a1d2:	68 f8 b9 02 c0       	push   0xc002b9f8
c001a1d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1dd:	e8 7e 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1e2:	0f 20 c0             	mov    eax,cr0
c001a1e5:	5a                   	pop    edx
c001a1e6:	59                   	pop    ecx
c001a1e7:	50                   	push   eax
c001a1e8:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a1ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f3:	e8 22 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1f8:	5b                   	pop    ebx
c001a1f9:	58                   	pop    eax
c001a1fa:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a1ff:	68 02 ba 02 c0       	push   0xc002ba02
c001a204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20a:	e8 51 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a20f:	0f 20 d0             	mov    eax,cr2
c001a212:	5a                   	pop    edx
c001a213:	59                   	pop    ecx
c001a214:	50                   	push   eax
c001a215:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a21a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a220:	e8 f5 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a225:	5b                   	pop    ebx
c001a226:	58                   	pop    eax
c001a227:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a22c:	68 0c ba 02 c0       	push   0xc002ba0c
c001a231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a237:	e8 24 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a23c:	0f 20 d8             	mov    eax,cr3
c001a23f:	5a                   	pop    edx
c001a240:	59                   	pop    ecx
c001a241:	50                   	push   eax
c001a242:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a24d:	e8 c8 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a252:	5b                   	pop    ebx
c001a253:	58                   	pop    eax
c001a254:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a259:	68 1f ba 02 c0       	push   0xc002ba1f
c001a25e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a264:	e8 f7 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a269:	0f 20 e0             	mov    eax,cr4
c001a26c:	5a                   	pop    edx
c001a26d:	59                   	pop    ecx
c001a26e:	50                   	push   eax
c001a26f:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a274:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27a:	e8 9b 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a27f:	5b                   	pop    ebx
c001a280:	58                   	pop    eax
c001a281:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a286:	68 29 ba 02 c0       	push   0xc002ba29
c001a28b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a291:	e8 ca 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a296:	5a                   	pop    edx
c001a297:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a29c:	59                   	pop    ecx
c001a29d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2a6:	50                   	push   eax
c001a2a7:	e8 6e 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a2ac:	5b                   	pop    ebx
c001a2ad:	58                   	pop    eax
c001a2ae:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a2b3:	68 40 ba 02 c0       	push   0xc002ba40
c001a2b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2be:	e8 9d 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2c3:	5a                   	pop    edx
c001a2c4:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a2c9:	59                   	pop    ecx
c001a2ca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2d0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a2d3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 3e 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a2dc:	5b                   	pop    ebx
c001a2dd:	58                   	pop    eax
c001a2de:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a2e3:	68 40 ba 02 c0       	push   0xc002ba40
c001a2e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ee:	e8 6d 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a2f3:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a2f8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a2fb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a301:	8b 12                	mov    edx,DWORD PTR [edx]
c001a303:	59                   	pop    ecx
c001a304:	5b                   	pop    ebx
c001a305:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a308:	50                   	push   eax
c001a309:	e8 0c 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a30e:	83 c4 10             	add    esp,0x10
c001a311:	b2 fe                	mov    dl,0xfe
c001a313:	e4 60                	in     al,0x60
c001a315:	3c 1c                	cmp    al,0x1c
c001a317:	74 04                	je     c001a31d <Krnl::panic(char const*)+0x33a>
c001a319:	3c 5a                	cmp    al,0x5a
c001a31b:	75 f6                	jne    c001a313 <Krnl::panic(char const*)+0x330>
c001a31d:	e4 64                	in     al,0x64
c001a31f:	a8 02                	test   al,0x2
c001a321:	75 fa                	jne    c001a31d <Krnl::panic(char const*)+0x33a>
c001a323:	88 d0                	mov    al,dl
c001a325:	e6 64                	out    0x64,al
c001a327:	fa                   	cli    
c001a328:	f4                   	hlt    
c001a329:	eb e8                	jmp    c001a313 <Krnl::panic(char const*)+0x330>
c001a32b:	50                   	push   eax
c001a32c:	50                   	push   eax
c001a32d:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a332:	68 ac ba 02 c0       	push   0xc002baac
c001a337:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a33d:	e8 1e 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a342:	58                   	pop    eax
c001a343:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a348:	5a                   	pop    edx
c001a349:	68 ba b9 02 c0       	push   0xc002b9ba
c001a34e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a354:	e8 07 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a359:	59                   	pop    ecx
c001a35a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a35f:	5b                   	pop    ebx
c001a360:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a363:	83 c0 0c             	add    eax,0xc
c001a366:	50                   	push   eax
c001a367:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001a36c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a372:	e8 e9 64 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a377:	83 c4 10             	add    esp,0x10
c001a37a:	e9 a3 fd ff ff       	jmp    c001a122 <Krnl::panic(char const*)+0x13f>

c001a37f <Net::switchEndian16(unsigned short)>:
c001a37f:	83 ec 04             	sub    esp,0x4
c001a382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a386:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a38a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a38e:	c1 f8 08             	sar    eax,0x8
c001a391:	89 c2                	mov    edx,eax
c001a393:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a397:	c1 e0 08             	shl    eax,0x8
c001a39a:	09 d0                	or     eax,edx
c001a39c:	83 c4 04             	add    esp,0x4
c001a39f:	c3                   	ret    

c001a3a0 <Net::switchEndian32(unsigned int)>:
c001a3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a4:	c1 e8 18             	shr    eax,0x18
c001a3a7:	89 c2                	mov    edx,eax
c001a3a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ad:	c1 e0 08             	shl    eax,0x8
c001a3b0:	25 00 00 ff 00       	and    eax,0xff0000
c001a3b5:	09 c2                	or     edx,eax
c001a3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3bb:	c1 e8 08             	shr    eax,0x8
c001a3be:	25 00 ff 00 00       	and    eax,0xff00
c001a3c3:	09 c2                	or     edx,eax
c001a3c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c9:	c1 e0 18             	shl    eax,0x18
c001a3cc:	09 d0                	or     eax,edx
c001a3ce:	c3                   	ret    

c001a3cf <Net::crc32Calc(unsigned char*, int)>:
c001a3cf:	83 ec 10             	sub    esp,0x10
c001a3d2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3d7:	75 07                	jne    c001a3e0 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a3d9:	b8 00 00 00 00       	mov    eax,0x0
c001a3de:	eb 7c                	jmp    c001a45c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a3e0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a3e5:	7f 07                	jg     c001a3ee <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a3e7:	b8 00 00 00 00       	mov    eax,0x0
c001a3ec:	eb 6e                	jmp    c001a45c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a3ee:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a3f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a402:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a406:	7d 4e                	jge    c001a456 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a40c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a410:	01 d0                	add    eax,edx
c001a412:	8a 00                	mov    al,BYTE PTR [eax]
c001a414:	0f b6 c0             	movzx  eax,al
c001a417:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a41b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a423:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a428:	7f 26                	jg     c001a450 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a42e:	83 e0 01             	and    eax,0x1
c001a431:	74 0d                	je     c001a440 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a437:	d1 e8                	shr    eax,1
c001a439:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a43e:	eb 06                	jmp    c001a446 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a444:	d1 e8                	shr    eax,1
c001a446:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a44a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a44e:	eb d3                	jmp    c001a423 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a450:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a454:	eb a8                	jmp    c001a3fe <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a45a:	f7 d0                	not    eax
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	c3                   	ret    

c001a460 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a460:	57                   	push   edi
c001a461:	56                   	push   esi
c001a462:	53                   	push   ebx
c001a463:	83 ec 60             	sub    esp,0x60
c001a466:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a46d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a471:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a479:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a47e:	7f 1a                	jg     c001a49a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a480:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a487:	8d 50 01             	lea    edx,[eax+0x1]
c001a48a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a491:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a494:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a498:	eb df                	jmp    c001a479 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a49a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4a1:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4ab:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a4ae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4b9:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a4bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4c1:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a4c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4dd:	89 c6                	mov    esi,eax
c001a4df:	89 d7                	mov    edi,edx
c001a4e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4e3:	89 c8                	mov    eax,ecx
c001a4e5:	89 fa                	mov    edx,edi
c001a4e7:	89 f3                	mov    ebx,esi
c001a4e9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a4ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a4f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4f4:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a4fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a503:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a507:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a50b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a50f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a517:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a51f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a523:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a527:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a52b:	89 c6                	mov    esi,eax
c001a52d:	89 d7                	mov    edi,edx
c001a52f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a531:	89 c8                	mov    eax,ecx
c001a533:	89 fa                	mov    edx,edi
c001a535:	89 f3                	mov    ebx,esi
c001a537:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a53b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a543:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a54b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a552:	0f b7 c0             	movzx  eax,ax
c001a555:	c1 f8 08             	sar    eax,0x8
c001a558:	89 c1                	mov    ecx,eax
c001a55a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a561:	8d 50 01             	lea    edx,[eax+0x1]
c001a564:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a56b:	88 ca                	mov    dl,cl
c001a56d:	88 10                	mov    BYTE PTR [eax],dl
c001a56f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a576:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a57d:	8d 48 01             	lea    ecx,[eax+0x1]
c001a580:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a587:	88 10                	mov    BYTE PTR [eax],dl
c001a589:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a58d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a591:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a598:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a59c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a5a0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a5a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5a8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a5b0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5b4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a5b8:	89 c6                	mov    esi,eax
c001a5ba:	89 d7                	mov    edi,edx
c001a5bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5be:	89 c8                	mov    eax,ecx
c001a5c0:	89 fa                	mov    edx,edi
c001a5c2:	89 f3                	mov    ebx,esi
c001a5c4:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a5c8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a5cc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a5d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a5d4:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a5db:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5e2:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a5e6:	50                   	push   eax
c001a5e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a5eb:	e8 df fd ff ff       	call   c001a3cf <Net::crc32Calc(unsigned char*, int)>
c001a5f0:	83 c4 08             	add    esp,0x8
c001a5f3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a5f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5fb:	c1 e8 18             	shr    eax,0x18
c001a5fe:	89 c1                	mov    ecx,eax
c001a600:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a607:	8d 50 01             	lea    edx,[eax+0x1]
c001a60a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a611:	88 ca                	mov    dl,cl
c001a613:	88 10                	mov    BYTE PTR [eax],dl
c001a615:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a619:	c1 e8 10             	shr    eax,0x10
c001a61c:	89 c1                	mov    ecx,eax
c001a61e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a625:	8d 50 01             	lea    edx,[eax+0x1]
c001a628:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a62f:	88 ca                	mov    dl,cl
c001a631:	88 10                	mov    BYTE PTR [eax],dl
c001a633:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a637:	c1 e8 08             	shr    eax,0x8
c001a63a:	89 c1                	mov    ecx,eax
c001a63c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a643:	8d 50 01             	lea    edx,[eax+0x1]
c001a646:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a64d:	88 ca                	mov    dl,cl
c001a64f:	88 10                	mov    BYTE PTR [eax],dl
c001a651:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a658:	8d 50 01             	lea    edx,[eax+0x1]
c001a65b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a662:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a666:	88 10                	mov    BYTE PTR [eax],dl
c001a668:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a66c:	83 c4 60             	add    esp,0x60
c001a66f:	5b                   	pop    ebx
c001a670:	5e                   	pop    esi
c001a671:	5f                   	pop    edi
c001a672:	c3                   	ret    

c001a673 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a673:	57                   	push   edi
c001a674:	56                   	push   esi
c001a675:	53                   	push   ebx
c001a676:	83 ec 70             	sub    esp,0x70
c001a679:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a680:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a684:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a68c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a693:	83 c0 0e             	add    eax,0xe
c001a696:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a69a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a6a5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a6ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a6bd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a6c1:	89 c6                	mov    esi,eax
c001a6c3:	89 d7                	mov    edi,edx
c001a6c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6c7:	89 c8                	mov    eax,ecx
c001a6c9:	89 fa                	mov    edx,edi
c001a6cb:	89 f3                	mov    ebx,esi
c001a6cd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a6d1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a6d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6d9:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a6e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6e8:	83 c0 08             	add    eax,0x8
c001a6eb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a6ef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6fa:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a702:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a706:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a70a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a70e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a712:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a716:	89 c6                	mov    esi,eax
c001a718:	89 d7                	mov    edi,edx
c001a71a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a71c:	89 c8                	mov    eax,ecx
c001a71e:	89 fa                	mov    edx,edi
c001a720:	89 f3                	mov    ebx,esi
c001a722:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a726:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a72a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a72e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a736:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a73d:	8d 50 01             	lea    edx,[eax+0x1]
c001a740:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a747:	8a 00                	mov    al,BYTE PTR [eax]
c001a749:	0f b6 c0             	movzx  eax,al
c001a74c:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a751:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a758:	8d 50 01             	lea    edx,[eax+0x1]
c001a75b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a762:	8a 00                	mov    al,BYTE PTR [eax]
c001a764:	0f b6 c0             	movzx  eax,al
c001a767:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a76c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a771:	c1 e0 08             	shl    eax,0x8
c001a774:	89 c2                	mov    edx,eax
c001a776:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a77a:	09 d0                	or     eax,edx
c001a77c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a783:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a787:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a78f:	75 46                	jne    c001a7d7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a791:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a798:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a79b:	66 3d dc 05          	cmp    ax,0x5dc
c001a79f:	77 16                	ja     c001a7b7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a7a1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7ab:	0f b7 c0             	movzx  eax,ax
c001a7ae:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a7b5:	eb 20                	jmp    c001a7d7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a7b7:	83 ec 0c             	sub    esp,0xc
c001a7ba:	68 84 bb 02 c0       	push   0xc002bb84
c001a7bf:	e8 75 80 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7ce:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a7d2:	e9 17 01 00 00       	jmp    c001a8ee <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a7d7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7de:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a7e5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a7e7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a7eb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a7f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a7fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a806:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a80a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a80e:	89 c6                	mov    esi,eax
c001a810:	89 d7                	mov    edi,edx
c001a812:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a814:	89 c8                	mov    eax,ecx
c001a816:	89 fa                	mov    edx,edi
c001a818:	89 f3                	mov    ebx,esi
c001a81a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a81e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a822:	89 04 24             	mov    DWORD PTR [esp],eax
c001a825:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a82c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a833:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a83a:	8d 50 01             	lea    edx,[eax+0x1]
c001a83d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a844:	8a 00                	mov    al,BYTE PTR [eax]
c001a846:	0f b6 c0             	movzx  eax,al
c001a849:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a84d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a854:	8d 50 01             	lea    edx,[eax+0x1]
c001a857:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a85e:	8a 00                	mov    al,BYTE PTR [eax]
c001a860:	0f b6 c0             	movzx  eax,al
c001a863:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a867:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a86e:	8d 50 01             	lea    edx,[eax+0x1]
c001a871:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a878:	8a 00                	mov    al,BYTE PTR [eax]
c001a87a:	0f b6 c0             	movzx  eax,al
c001a87d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a881:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a888:	8d 50 01             	lea    edx,[eax+0x1]
c001a88b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a892:	8a 00                	mov    al,BYTE PTR [eax]
c001a894:	0f b6 c0             	movzx  eax,al
c001a897:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a89b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a89f:	c1 e0 18             	shl    eax,0x18
c001a8a2:	89 c2                	mov    edx,eax
c001a8a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a8a8:	c1 e0 10             	shl    eax,0x10
c001a8ab:	09 c2                	or     edx,eax
c001a8ad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a8b1:	c1 e0 08             	shl    eax,0x8
c001a8b4:	09 d0                	or     eax,edx
c001a8b6:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a8ba:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a8be:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8c5:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a8c9:	83 e8 04             	sub    eax,0x4
c001a8cc:	83 ec 08             	sub    esp,0x8
c001a8cf:	50                   	push   eax
c001a8d0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8d4:	e8 f6 fa ff ff       	call   c001a3cf <Net::crc32Calc(unsigned char*, int)>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a8e0:	0f 94 c2             	sete   dl
c001a8e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8ea:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a8ed:	90                   	nop
c001a8ee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8f5:	83 c4 70             	add    esp,0x70
c001a8f8:	5b                   	pop    ebx
c001a8f9:	5e                   	pop    esi
c001a8fa:	5f                   	pop    edi
c001a8fb:	c2 04 00             	ret    0x4

c001a8fe <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a8fe:	55                   	push   ebp
c001a8ff:	57                   	push   edi
c001a900:	56                   	push   esi
c001a901:	53                   	push   ebx
c001a902:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a908:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a90f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a911:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a914:	80 fb 40             	cmp    bl,0x40
c001a917:	75 1b                	jne    c001a934 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a919:	8a 16                	mov    dl,BYTE PTR [esi]
c001a91b:	84 d2                	test   dl,dl
c001a91d:	0f 84 f1 00 00 00    	je     c001aa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a923:	8d 46 01             	lea    eax,[esi+0x1]
c001a926:	80 fa 3a             	cmp    dl,0x3a
c001a929:	74 04                	je     c001a92f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a92b:	89 c6                	mov    esi,eax
c001a92d:	eb ea                	jmp    c001a919 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a92f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a932:	89 c6                	mov    esi,eax
c001a934:	50                   	push   eax
c001a935:	6a 40                	push   0x40
c001a937:	6a 00                	push   0x0
c001a939:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a93d:	50                   	push   eax
c001a93e:	e8 0d 5e fe ff       	call   c0000750 <memset>
c001a943:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a94a:	31 c0                	xor    eax,eax
c001a94c:	83 c4 10             	add    esp,0x10
c001a94f:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a951:	84 c9                	test   cl,cl
c001a953:	0f 84 bb 00 00 00    	je     c001aa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a959:	3d c7 00 00 00       	cmp    eax,0xc7
c001a95e:	0f 8f b0 00 00 00    	jg     c001aa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a964:	80 f9 0a             	cmp    cl,0xa
c001a967:	0f 85 98 00 00 00    	jne    c001aa05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a96d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a972:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a976:	a8 df                	test   al,0xdf
c001a978:	0f 94 c1             	sete   cl
c001a97b:	3c 23                	cmp    al,0x23
c001a97d:	0f 94 c2             	sete   dl
c001a980:	08 d1                	or     cl,dl
c001a982:	75 4a                	jne    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a984:	8d 50 f7             	lea    edx,[eax-0x9]
c001a987:	80 fa 01             	cmp    dl,0x1
c001a98a:	76 42                	jbe    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a98c:	3c 5b                	cmp    al,0x5b
c001a98e:	75 42                	jne    c001a9d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a990:	80 fb 40             	cmp    bl,0x40
c001a993:	75 39                	jne    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a995:	83 ec 0c             	sub    esp,0xc
c001a998:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a99c:	52                   	push   edx
c001a99d:	e8 ca 5d fe ff       	call   c000076c <strlen>
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	83 f8 3f             	cmp    eax,0x3f
c001a9a8:	77 6a                	ja     c001aa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9aa:	50                   	push   eax
c001a9ab:	50                   	push   eax
c001a9ac:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a9b0:	52                   	push   edx
c001a9b1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9b5:	52                   	push   edx
c001a9b6:	e8 51 5e fe ff       	call   c000080c <strcpy>
c001a9bb:	58                   	pop    eax
c001a9bc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9c0:	52                   	push   edx
c001a9c1:	e8 a6 5d fe ff       	call   c000076c <strlen>
c001a9c6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a9cb:	83 c4 10             	add    esp,0x10
c001a9ce:	31 d2                	xor    edx,edx
c001a9d0:	eb 3a                	jmp    c001aa0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a9d2:	80 fb 40             	cmp    bl,0x40
c001a9d5:	74 06                	je     c001a9dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a9d7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a9db:	eb 20                	jmp    c001a9fd <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a9dd:	50                   	push   eax
c001a9de:	50                   	push   eax
c001a9df:	55                   	push   ebp
c001a9e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9e4:	50                   	push   eax
c001a9e5:	e8 ae 5e fe ff       	call   c0000898 <strcmp>
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	85 c0                	test   eax,eax
c001a9ef:	75 dd                	jne    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9f1:	eb e4                	jmp    c001a9d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a9f3:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f6:	80 f9 3d             	cmp    cl,0x3d
c001a9f9:	74 1d                	je     c001aa18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a9fb:	89 d0                	mov    eax,edx
c001a9fd:	8a 08                	mov    cl,BYTE PTR [eax]
c001a9ff:	84 c9                	test   cl,cl
c001aa01:	75 f0                	jne    c001a9f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa03:	eb 0f                	jmp    c001aa14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa05:	8d 50 01             	lea    edx,[eax+0x1]
c001aa08:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aa0c:	47                   	inc    edi
c001aa0d:	89 d0                	mov    eax,edx
c001aa0f:	e9 3b ff ff ff       	jmp    c001a94f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa14:	31 c0                	xor    eax,eax
c001aa16:	eb 33                	jmp    c001aa4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa1c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aa1f:	50                   	push   eax
c001aa20:	50                   	push   eax
c001aa21:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aa25:	50                   	push   eax
c001aa26:	56                   	push   esi
c001aa27:	e8 6c 5e fe ff       	call   c0000898 <strcmp>
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	85 c0                	test   eax,eax
c001aa31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa35:	75 97                	jne    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa37:	51                   	push   ecx
c001aa38:	51                   	push   ecx
c001aa39:	52                   	push   edx
c001aa3a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aa41:	e8 c6 5d fe ff       	call   c000080c <strcpy>
c001aa46:	83 c4 10             	add    esp,0x10
c001aa49:	b0 01                	mov    al,0x1
c001aa4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa51:	5b                   	pop    ebx
c001aa52:	5e                   	pop    esi
c001aa53:	5f                   	pop    edi
c001aa54:	5d                   	pop    ebp
c001aa55:	c3                   	ret    

c001aa56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aa56:	57                   	push   edi
c001aa57:	56                   	push   esi
c001aa58:	53                   	push   ebx
c001aa59:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa5f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aa66:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa6d:	53                   	push   ebx
c001aa6e:	e8 f9 5c fe ff       	call   c000076c <strlen>
c001aa73:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa76:	89 c7                	mov    edi,eax
c001aa78:	e8 ef 5c fe ff       	call   c000076c <strlen>
c001aa7d:	83 c4 10             	add    esp,0x10
c001aa80:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aa84:	3d ff 00 00 00       	cmp    eax,0xff
c001aa89:	0f 87 d3 00 00 00    	ja     c001ab62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa8f:	57                   	push   edi
c001aa90:	57                   	push   edi
c001aa91:	56                   	push   esi
c001aa92:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aa96:	56                   	push   esi
c001aa97:	e8 70 5d fe ff       	call   c000080c <strcpy>
c001aa9c:	58                   	pop    eax
c001aa9d:	5a                   	pop    edx
c001aa9e:	68 26 bf 02 c0       	push   0xc002bf26
c001aaa3:	56                   	push   esi
c001aaa4:	e8 a3 5e fe ff       	call   c000094c <strcat>
c001aaa9:	59                   	pop    ecx
c001aaaa:	5f                   	pop    edi
c001aaab:	53                   	push   ebx
c001aaac:	56                   	push   esi
c001aaad:	e8 9a 5e fe ff       	call   c000094c <strcat>
c001aab2:	58                   	pop    eax
c001aab3:	5a                   	pop    edx
c001aab4:	68 d0 bb 02 c0       	push   0xc002bbd0
c001aab9:	56                   	push   esi
c001aaba:	e8 8d 5e fe ff       	call   c000094c <strcat>
c001aabf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aac6:	e8 ce 4a ff ff       	call   c000f599 <malloc>
c001aacb:	83 c4 0c             	add    esp,0xc
c001aace:	89 c3                	mov    ebx,eax
c001aad0:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c001aad6:	56                   	push   esi
c001aad7:	50                   	push   eax
c001aad8:	e8 bb 82 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001aadd:	83 c4 10             	add    esp,0x10
c001aae0:	85 db                	test   ebx,ebx
c001aae2:	74 7e                	je     c001ab62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aae4:	51                   	push   ecx
c001aae5:	51                   	push   ecx
c001aae6:	6a 01                	push   0x1
c001aae8:	53                   	push   ebx
c001aae9:	e8 0e 83 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001aaee:	83 c4 10             	add    esp,0x10
c001aaf1:	85 c0                	test   eax,eax
c001aaf3:	74 08                	je     c001aafd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aaf5:	83 ec 0c             	sub    esp,0xc
c001aaf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aafa:	53                   	push   ebx
c001aafb:	eb 5f                	jmp    c001ab5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aafd:	52                   	push   edx
c001aafe:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab02:	50                   	push   eax
c001ab03:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab07:	50                   	push   eax
c001ab08:	53                   	push   ebx
c001ab09:	e8 9a 85 ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001ab0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab12:	83 c4 10             	add    esp,0x10
c001ab15:	89 c1                	mov    ecx,eax
c001ab17:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ab1b:	74 31                	je     c001ab4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	50                   	push   eax
c001ab21:	e8 73 4a ff ff       	call   c000f599 <malloc>
c001ab26:	89 c6                	mov    esi,eax
c001ab28:	58                   	pop    eax
c001ab29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ab2f:	52                   	push   edx
c001ab30:	56                   	push   esi
c001ab31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab39:	53                   	push   ebx
c001ab3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab3d:	83 c4 20             	add    esp,0x20
c001ab40:	85 c0                	test   eax,eax
c001ab42:	75 0a                	jne    c001ab4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab48:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab4c:	74 18                	je     c001ab66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	53                   	push   ebx
c001ab52:	e8 03 83 ff ff       	call   c0012e5a <File::close()>
c001ab57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab5f:	83 c4 10             	add    esp,0x10
c001ab62:	31 c0                	xor    eax,eax
c001ab64:	eb 3b                	jmp    c001aba1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	53                   	push   ebx
c001ab6a:	e8 eb 82 ff ff       	call   c0012e5a <File::close()>
c001ab6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab77:	83 c4 0c             	add    esp,0xc
c001ab7a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab81:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab88:	56                   	push   esi
c001ab89:	e8 70 fd ff ff       	call   c001a8fe <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ab8e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab95:	e8 0f 4a ff ff       	call   c000f5a9 <free>
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aba1:	81 c4 20 01 00 00    	add    esp,0x120
c001aba7:	5b                   	pop    ebx
c001aba8:	5e                   	pop    esi
c001aba9:	5f                   	pop    edi
c001abaa:	c3                   	ret    

c001abab <Reg::getLine(char*, char*, char*)>:
c001abab:	57                   	push   edi
c001abac:	56                   	push   esi
c001abad:	53                   	push   ebx
c001abae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abb6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001abba:	57                   	push   edi
c001abbb:	56                   	push   esi
c001abbc:	53                   	push   ebx
c001abbd:	68 d5 bb 02 c0       	push   0xc002bbd5
c001abc2:	e8 8f fe ff ff       	call   c001aa56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	84 c0                	test   al,al
c001abcc:	75 10                	jne    c001abde <Reg::getLine(char*, char*, char*)+0x33>
c001abce:	57                   	push   edi
c001abcf:	56                   	push   esi
c001abd0:	53                   	push   ebx
c001abd1:	68 fa bb 02 c0       	push   0xc002bbfa
c001abd6:	e8 7b fe ff ff       	call   c001aa56 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	5b                   	pop    ebx
c001abdf:	5e                   	pop    esi
c001abe0:	5f                   	pop    edi
c001abe1:	c3                   	ret    

c001abe2 <Reg::readInt(char*, char*, int*)>:
c001abe2:	55                   	push   ebp
c001abe3:	57                   	push   edi
c001abe4:	56                   	push   esi
c001abe5:	53                   	push   ebx
c001abe6:	81 ec f0 00 00 00    	sub    esp,0xf0
c001abec:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abf0:	57                   	push   edi
c001abf1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abf8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abff:	e8 a7 ff ff ff       	call   c001abab <Reg::getLine(char*, char*, char*)>
c001ac04:	83 c4 10             	add    esp,0x10
c001ac07:	84 c0                	test   al,al
c001ac09:	0f 84 b3 00 00 00    	je     c001acc2 <Reg::readInt(char*, char*, int*)+0xe0>
c001ac0f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac13:	80 fa 2b             	cmp    dl,0x2b
c001ac16:	74 0c                	je     c001ac24 <Reg::readInt(char*, char*, int*)+0x42>
c001ac18:	80 fa 2d             	cmp    dl,0x2d
c001ac1b:	75 0e                	jne    c001ac2b <Reg::readInt(char*, char*, int*)+0x49>
c001ac1d:	ba 01 00 00 00       	mov    edx,0x1
c001ac22:	eb 0b                	jmp    c001ac2f <Reg::readInt(char*, char*, int*)+0x4d>
c001ac24:	ba 01 00 00 00       	mov    edx,0x1
c001ac29:	eb 02                	jmp    c001ac2d <Reg::readInt(char*, char*, int*)+0x4b>
c001ac2b:	31 d2                	xor    edx,edx
c001ac2d:	31 c0                	xor    eax,eax
c001ac2f:	be 0a 00 00 00       	mov    esi,0xa
c001ac34:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ac39:	75 20                	jne    c001ac5b <Reg::readInt(char*, char*, int*)+0x79>
c001ac3b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ac3f:	80 f9 78             	cmp    cl,0x78
c001ac42:	75 0a                	jne    c001ac4e <Reg::readInt(char*, char*, int*)+0x6c>
c001ac44:	83 c2 02             	add    edx,0x2
c001ac47:	be 10 00 00 00       	mov    esi,0x10
c001ac4c:	eb 0d                	jmp    c001ac5b <Reg::readInt(char*, char*, int*)+0x79>
c001ac4e:	80 f9 62             	cmp    cl,0x62
c001ac51:	75 08                	jne    c001ac5b <Reg::readInt(char*, char*, int*)+0x79>
c001ac53:	83 c2 02             	add    edx,0x2
c001ac56:	be 02 00 00 00       	mov    esi,0x2
c001ac5b:	01 d7                	add    edi,edx
c001ac5d:	31 d2                	xor    edx,edx
c001ac5f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac61:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ac65:	80 fb 0d             	cmp    bl,0xd
c001ac68:	0f 94 c3             	sete   bl
c001ac6b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ac70:	0f 94 c1             	sete   cl
c001ac73:	08 cb                	or     bl,cl
c001ac75:	75 3a                	jne    c001acb1 <Reg::readInt(char*, char*, int*)+0xcf>
c001ac77:	0f af d6             	imul   edx,esi
c001ac7a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ac7f:	83 fe 10             	cmp    esi,0x10
c001ac82:	75 26                	jne    c001acaa <Reg::readInt(char*, char*, int*)+0xc8>
c001ac84:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac88:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ac8b:	89 e9                	mov    ecx,ebp
c001ac8d:	80 f9 05             	cmp    cl,0x5
c001ac90:	77 06                	ja     c001ac98 <Reg::readInt(char*, char*, int*)+0xb6>
c001ac92:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ac96:	eb 16                	jmp    c001acae <Reg::readInt(char*, char*, int*)+0xcc>
c001ac98:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac9c:	83 e9 61             	sub    ecx,0x61
c001ac9f:	80 f9 05             	cmp    cl,0x5
c001aca2:	77 06                	ja     c001acaa <Reg::readInt(char*, char*, int*)+0xc8>
c001aca4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aca8:	eb 04                	jmp    c001acae <Reg::readInt(char*, char*, int*)+0xcc>
c001acaa:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001acae:	47                   	inc    edi
c001acaf:	eb ae                	jmp    c001ac5f <Reg::readInt(char*, char*, int*)+0x7d>
c001acb1:	84 c0                	test   al,al
c001acb3:	74 02                	je     c001acb7 <Reg::readInt(char*, char*, int*)+0xd5>
c001acb5:	f7 da                	neg    edx
c001acb7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001acbe:	89 10                	mov    DWORD PTR [eax],edx
c001acc0:	88 d8                	mov    al,bl
c001acc2:	81 c4 ec 00 00 00    	add    esp,0xec
c001acc8:	5b                   	pop    ebx
c001acc9:	5e                   	pop    esi
c001acca:	5f                   	pop    edi
c001accb:	5d                   	pop    ebp
c001accc:	c3                   	ret    

c001accd <Reg::readString(char*, char*, char*, int)>:
c001accd:	57                   	push   edi
c001acce:	56                   	push   esi
c001accf:	53                   	push   ebx
c001acd0:	81 ec d4 00 00 00    	sub    esp,0xd4
c001acd6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001acdd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ace1:	57                   	push   edi
c001ace2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ace9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001acf0:	e8 b6 fe ff ff       	call   c001abab <Reg::getLine(char*, char*, char*)>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	89 c6                	mov    esi,eax
c001acfa:	84 c0                	test   al,al
c001acfc:	74 44                	je     c001ad42 <Reg::readString(char*, char*, char*, int)+0x75>
c001acfe:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad05:	31 c0                	xor    eax,eax
c001ad07:	4a                   	dec    edx
c001ad08:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ad0b:	84 c9                	test   cl,cl
c001ad0d:	74 0f                	je     c001ad1e <Reg::readString(char*, char*, char*, int)+0x51>
c001ad0f:	39 c2                	cmp    edx,eax
c001ad11:	7e 0b                	jle    c001ad1e <Reg::readString(char*, char*, char*, int)+0x51>
c001ad13:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad16:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ad1b:	40                   	inc    eax
c001ad1c:	eb ea                	jmp    c001ad08 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	53                   	push   ebx
c001ad22:	e8 45 5a fe ff       	call   c000076c <strlen>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ad2f:	75 11                	jne    c001ad42 <Reg::readString(char*, char*, char*, int)+0x75>
c001ad31:	83 ec 0c             	sub    esp,0xc
c001ad34:	53                   	push   ebx
c001ad35:	e8 32 5a fe ff       	call   c000076c <strlen>
c001ad3a:	83 c4 10             	add    esp,0x10
c001ad3d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ad42:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ad48:	89 f0                	mov    eax,esi
c001ad4a:	5b                   	pop    ebx
c001ad4b:	5e                   	pop    esi
c001ad4c:	5f                   	pop    edi
c001ad4d:	c3                   	ret    

c001ad4e <Reg::readBool(char*, char*, bool*)>:
c001ad4e:	83 ec 20             	sub    esp,0x20
c001ad51:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad55:	50                   	push   eax
c001ad56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad5e:	e8 7f fe ff ff       	call   c001abe2 <Reg::readInt(char*, char*, int*)>
c001ad63:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad68:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad6c:	0f 95 02             	setne  BYTE PTR [edx]
c001ad6f:	83 c4 2c             	add    esp,0x2c
c001ad72:	c3                   	ret    

c001ad73 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ad73:	53                   	push   ebx
c001ad74:	83 ec 1c             	sub    esp,0x1c
c001ad77:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad7b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ad7f:	50                   	push   eax
c001ad80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad88:	e8 c1 ff ff ff       	call   c001ad4e <Reg::readBool(char*, char*, bool*)>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	84 c0                	test   al,al
c001ad92:	74 04                	je     c001ad98 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ad94:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ad98:	88 d8                	mov    al,bl
c001ad9a:	83 c4 18             	add    esp,0x18
c001ad9d:	5b                   	pop    ebx
c001ad9e:	c3                   	ret    

c001ad9f <Reg::readIntWithDefault(char*, char*, int)>:
c001ad9f:	53                   	push   ebx
c001ada0:	83 ec 1c             	sub    esp,0x1c
c001ada3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ada7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adab:	50                   	push   eax
c001adac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adb4:	e8 29 fe ff ff       	call   c001abe2 <Reg::readInt(char*, char*, int*)>
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	84 c0                	test   al,al
c001adbe:	74 04                	je     c001adc4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001adc0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001adc4:	89 d8                	mov    eax,ebx
c001adc6:	83 c4 18             	add    esp,0x18
c001adc9:	5b                   	pop    ebx
c001adca:	c3                   	ret    

c001adcb <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001adcb:	57                   	push   edi
c001adcc:	56                   	push   esi
c001adcd:	56                   	push   esi
c001adce:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001add2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001add6:	56                   	push   esi
c001add7:	57                   	push   edi
c001add8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001addc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ade0:	e8 e8 fe ff ff       	call   c001accd <Reg::readString(char*, char*, char*, int)>
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	84 c0                	test   al,al
c001adea:	75 1a                	jne    c001ae06 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001adec:	51                   	push   ecx
c001aded:	56                   	push   esi
c001adee:	6a 00                	push   0x0
c001adf0:	57                   	push   edi
c001adf1:	e8 5a 59 fe ff       	call   c0000750 <memset>
c001adf6:	8d 4e ff             	lea    ecx,[esi-0x1]
c001adf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001adfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae06:	89 f8                	mov    eax,edi
c001ae08:	5a                   	pop    edx
c001ae09:	5e                   	pop    esi
c001ae0a:	5f                   	pop    edi
c001ae0b:	c3                   	ret    

c001ae0c <Sys::eject(regs*)>:
c001ae0c:	83 ec 0c             	sub    esp,0xc
c001ae0f:	83 ca ff             	or     edx,0xffffffff
c001ae12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae16:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ae19:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ae1e:	83 e9 41             	sub    ecx,0x41
c001ae21:	83 f9 19             	cmp    ecx,0x19
c001ae24:	77 18                	ja     c001ae3e <Sys::eject(regs*)+0x32>
c001ae26:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c001ae2d:	85 c9                	test   ecx,ecx
c001ae2f:	74 0d                	je     c001ae3e <Sys::eject(regs*)+0x32>
c001ae31:	83 ec 0c             	sub    esp,0xc
c001ae34:	51                   	push   ecx
c001ae35:	e8 ea b2 ff ff       	call   c0016124 <LogicalDisk::eject()>
c001ae3a:	83 c4 10             	add    esp,0x10
c001ae3d:	99                   	cdq    
c001ae3e:	83 c4 0c             	add    esp,0xc
c001ae41:	c3                   	ret    

c001ae42 <Sys::exit(regs*)>:
c001ae42:	83 ec 18             	sub    esp,0x18
c001ae45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae49:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae4c:	e8 c4 35 00 00       	call   c001e415 <terminateTask(int)>
c001ae51:	83 c8 ff             	or     eax,0xffffffff
c001ae54:	83 c4 1c             	add    esp,0x1c
c001ae57:	89 c2                	mov    edx,eax
c001ae59:	c3                   	ret    

c001ae5a <Sys::getCwd(regs*)>:
c001ae5a:	83 ec 10             	sub    esp,0x10
c001ae5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae61:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae64:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae6f:	e8 26 7d ff ff       	call   c0012b9a <Fs::getcwd(Process*, char*, int)>
c001ae74:	83 c4 1c             	add    esp,0x1c
c001ae77:	99                   	cdq    
c001ae78:	c3                   	ret    

c001ae79 <Sys::getPID(regs*)>:
c001ae79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae81:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae83:	99                   	cdq    
c001ae84:	c3                   	ret    

c001ae85 <Sys::getRAMData(regs*)>:
c001ae85:	8b 0d b4 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddb4
c001ae8b:	69 05 b0 dd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002ddb0,0xc8
c001ae95:	99                   	cdq    
c001ae96:	f7 f9                	idiv   ecx
c001ae98:	c1 e0 18             	shl    eax,0x18
c001ae9b:	09 c8                	or     eax,ecx
c001ae9d:	99                   	cdq    
c001ae9e:	c3                   	ret    

c001ae9f <Sys::getVGAPtr(regs*)>:
c001ae9f:	55                   	push   ebp
c001aea0:	57                   	push   edi
c001aea1:	56                   	push   esi
c001aea2:	53                   	push   ebx
c001aea3:	83 ec 18             	sub    esp,0x18
c001aea6:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aeaa:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001aead:	e8 af 30 00 00       	call   c001df61 <Thr::processFromPID(int)>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	89 c1                	mov    ecx,eax
c001aeb7:	b8 01 00 00 00       	mov    eax,0x1
c001aebc:	85 c9                	test   ecx,ecx
c001aebe:	74 59                	je     c001af19 <Sys::getVGAPtr(regs*)+0x7a>
c001aec0:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001aec6:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001aeca:	74 0c                	je     c001aed8 <Sys::getVGAPtr(regs*)+0x39>
c001aecc:	83 ec 0c             	sub    esp,0xc
c001aecf:	53                   	push   ebx
c001aed0:	e8 7e 54 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001aedb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001aede:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001aee3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aee5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001aee8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aeeb:	81 c3 82 00 00 00    	add    ebx,0x82
c001aef1:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001aef7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aefa:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001aefd:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001af03:	50                   	push   eax
c001af04:	50                   	push   eax
c001af05:	53                   	push   ebx
c001af06:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af09:	05 a8 0f 00 00       	add    eax,0xfa8
c001af0e:	50                   	push   eax
c001af0f:	e8 f8 58 fe ff       	call   c000080c <strcpy>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	31 c0                	xor    eax,eax
c001af19:	83 c4 0c             	add    esp,0xc
c001af1c:	31 d2                	xor    edx,edx
c001af1e:	5b                   	pop    ebx
c001af1f:	5e                   	pop    esi
c001af20:	5f                   	pop    edi
c001af21:	5d                   	pop    ebp
c001af22:	c3                   	ret    

c001af23 <Sys::loadDLL(regs*)>:
c001af23:	56                   	push   esi
c001af24:	53                   	push   ebx
c001af25:	31 d2                	xor    edx,edx
c001af27:	51                   	push   ecx
c001af28:	b8 01 00 00 00       	mov    eax,0x1
c001af2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af31:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001af35:	0f 84 8c 00 00 00    	je     c001afc7 <Sys::loadDLL(regs*)+0xa4>
c001af3b:	83 ec 0c             	sub    esp,0xc
c001af3e:	68 14 01 00 00       	push   0x114
c001af43:	e8 51 46 ff ff       	call   c000f599 <malloc>
c001af48:	83 c4 0c             	add    esp,0xc
c001af4b:	89 c3                	mov    ebx,eax
c001af4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af52:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af55:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af58:	53                   	push   ebx
c001af59:	e8 3a 7e ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001af5e:	83 c4 10             	add    esp,0x10
c001af61:	31 d2                	xor    edx,edx
c001af63:	b8 02 00 00 00       	mov    eax,0x2
c001af68:	85 db                	test   ebx,ebx
c001af6a:	74 5b                	je     c001afc7 <Sys::loadDLL(regs*)+0xa4>
c001af6c:	83 ec 0c             	sub    esp,0xc
c001af6f:	53                   	push   ebx
c001af70:	e8 f5 80 ff ff       	call   c001306a <File::exists()>
c001af75:	83 c4 10             	add    esp,0x10
c001af78:	84 c0                	test   al,al
c001af7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7c:	75 11                	jne    c001af8f <Sys::loadDLL(regs*)+0x6c>
c001af7e:	83 ec 0c             	sub    esp,0xc
c001af81:	53                   	push   ebx
c001af82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af85:	83 c4 10             	add    esp,0x10
c001af88:	b8 03 00 00 00       	mov    eax,0x3
c001af8d:	eb 36                	jmp    c001afc5 <Sys::loadDLL(regs*)+0xa2>
c001af8f:	83 ec 0c             	sub    esp,0xc
c001af92:	53                   	push   ebx
c001af93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af96:	58                   	pop    eax
c001af97:	5a                   	pop    edx
c001af98:	6a 00                	push   0x0
c001af9a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af9d:	e8 0e 22 00 00       	call   c001d1b0 <Thr::loadDLL(char const*, bool)>
c001afa2:	83 c4 10             	add    esp,0x10
c001afa5:	89 c1                	mov    ecx,eax
c001afa7:	31 d2                	xor    edx,edx
c001afa9:	b8 04 00 00 00       	mov    eax,0x4
c001afae:	85 c9                	test   ecx,ecx
c001afb0:	74 15                	je     c001afc7 <Sys::loadDLL(regs*)+0xa4>
c001afb2:	53                   	push   ebx
c001afb3:	53                   	push   ebx
c001afb4:	ff 35 68 dd 02 c0    	push   DWORD PTR ds:0xc002dd68
c001afba:	51                   	push   ecx
c001afbb:	e8 21 24 00 00       	call   c001d3e1 <Thr::executeDLL(unsigned long, void*)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	31 c0                	xor    eax,eax
c001afc5:	31 d2                	xor    edx,edx
c001afc7:	59                   	pop    ecx
c001afc8:	5b                   	pop    ebx
c001afc9:	5e                   	pop    esi
c001afca:	c3                   	ret    

c001afcb <Sys::read(regs*)>:
c001afcb:	57                   	push   edi
c001afcc:	56                   	push   esi
c001afcd:	53                   	push   ebx
c001afce:	83 ec 10             	sub    esp,0x10
c001afd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afd8:	83 f8 02             	cmp    eax,0x2
c001afdb:	77 10                	ja     c001afed <Sys::read(regs*)+0x22>
c001afdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afe5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afeb:	eb 0e                	jmp    c001affb <Sys::read(regs*)+0x30>
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	50                   	push   eax
c001aff1:	e8 d3 60 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001aff6:	83 c4 10             	add    esp,0x10
c001aff9:	89 c1                	mov    ecx,eax
c001affb:	83 c8 ff             	or     eax,0xffffffff
c001affe:	85 c9                	test   ecx,ecx
c001b000:	89 c2                	mov    edx,eax
c001b002:	74 28                	je     c001b02c <Sys::read(regs*)+0x61>
c001b004:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b00c:	31 ff                	xor    edi,edi
c001b00e:	83 ec 0c             	sub    esp,0xc
c001b011:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b013:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b017:	52                   	push   edx
c001b018:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b01b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b01e:	57                   	push   edi
c001b01f:	56                   	push   esi
c001b020:	51                   	push   ecx
c001b021:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b024:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b028:	83 c4 20             	add    esp,0x20
c001b02b:	99                   	cdq    
c001b02c:	83 c4 10             	add    esp,0x10
c001b02f:	5b                   	pop    ebx
c001b030:	5e                   	pop    esi
c001b031:	5f                   	pop    edi
c001b032:	c3                   	ret    

c001b033 <Sys::sbrk(regs*)>:
c001b033:	56                   	push   esi
c001b034:	53                   	push   ebx
c001b035:	50                   	push   eax
c001b036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b03b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b03f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b042:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b045:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b04b:	85 db                	test   ebx,ebx
c001b04d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b050:	74 02                	je     c001b054 <Sys::sbrk(regs*)+0x21>
c001b052:	79 06                	jns    c001b05a <Sys::sbrk(regs*)+0x27>
c001b054:	89 f0                	mov    eax,esi
c001b056:	31 d2                	xor    edx,edx
c001b058:	eb 2a                	jmp    c001b084 <Sys::sbrk(regs*)+0x51>
c001b05a:	83 c8 ff             	or     eax,0xffffffff
c001b05d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b063:	89 c2                	mov    edx,eax
c001b065:	77 1d                	ja     c001b084 <Sys::sbrk(regs*)+0x51>
c001b067:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b06d:	50                   	push   eax
c001b06e:	c1 ea 0c             	shr    edx,0xc
c001b071:	68 07 0c 00 00       	push   0xc07
c001b076:	52                   	push   edx
c001b077:	51                   	push   ecx
c001b078:	e8 f7 6a ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001b07d:	89 f0                	mov    eax,esi
c001b07f:	31 d2                	xor    edx,edx
c001b081:	83 c4 10             	add    esp,0x10
c001b084:	59                   	pop    ecx
c001b085:	5b                   	pop    ebx
c001b086:	5e                   	pop    esi
c001b087:	c3                   	ret    

c001b088 <Sys::setCwd(regs*)>:
c001b088:	83 ec 14             	sub    esp,0x14
c001b08b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b08f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b092:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b097:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b09a:	e8 6a 80 ff ff       	call   c0013109 <Fs::setcwd(Process*, char*)>
c001b09f:	83 c4 1c             	add    esp,0x1c
c001b0a2:	99                   	cdq    
c001b0a3:	c3                   	ret    

c001b0a4 <Sys::setTime(regs*)>:
c001b0a4:	55                   	push   ebp
c001b0a5:	31 c9                	xor    ecx,ecx
c001b0a7:	57                   	push   edi
c001b0a8:	bd 0c 00 00 00       	mov    ebp,0xc
c001b0ad:	56                   	push   esi
c001b0ae:	53                   	push   ebx
c001b0af:	31 db                	xor    ebx,ebx
c001b0b1:	83 ec 10             	sub    esp,0x10
c001b0b4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b0b8:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b0bb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b0be:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b0c1:	89 c2                	mov    edx,eax
c001b0c3:	66 81 ef 6c 07       	sub    di,0x76c
c001b0c8:	83 e2 1f             	and    edx,0x1f
c001b0cb:	c1 e7 10             	shl    edi,0x10
c001b0ce:	42                   	inc    edx
c001b0cf:	c1 e8 05             	shr    eax,0x5
c001b0d2:	88 d1                	mov    cl,dl
c001b0d4:	31 d2                	xor    edx,edx
c001b0d6:	f7 f5                	div    ebp
c001b0d8:	89 dd                	mov    ebp,ebx
c001b0da:	88 d5                	mov    ch,dl
c001b0dc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b0e2:	0f b7 c1             	movzx  eax,cx
c001b0e5:	31 d2                	xor    edx,edx
c001b0e7:	09 f8                	or     eax,edi
c001b0e9:	bf 3c 00 00 00       	mov    edi,0x3c
c001b0ee:	89 c1                	mov    ecx,eax
c001b0f0:	89 f0                	mov    eax,esi
c001b0f2:	f7 f7                	div    edi
c001b0f4:	c1 e2 10             	shl    edx,0x10
c001b0f7:	09 d5                	or     ebp,edx
c001b0f9:	31 d2                	xor    edx,edx
c001b0fb:	89 eb                	mov    ebx,ebp
c001b0fd:	f7 f7                	div    edi
c001b0ff:	bf 10 0e 00 00       	mov    edi,0xe10
c001b104:	88 d7                	mov    bh,dl
c001b106:	89 f0                	mov    eax,esi
c001b108:	31 d2                	xor    edx,edx
c001b10a:	f7 f7                	div    edi
c001b10c:	bf 18 00 00 00       	mov    edi,0x18
c001b111:	31 d2                	xor    edx,edx
c001b113:	f7 f7                	div    edi
c001b115:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001b11a:	88 d3                	mov    bl,dl
c001b11c:	53                   	push   ebx
c001b11d:	51                   	push   ecx
c001b11e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b124:	e8 29 88 ff ff       	call   c0013952 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b129:	83 c4 1c             	add    esp,0x1c
c001b12c:	83 f0 01             	xor    eax,0x1
c001b12f:	5b                   	pop    ebx
c001b130:	0f b6 c0             	movzx  eax,al
c001b133:	5e                   	pop    esi
c001b134:	31 d2                	xor    edx,edx
c001b136:	5f                   	pop    edi
c001b137:	5d                   	pop    ebp
c001b138:	c3                   	ret    

c001b139 <Sys::timezone(regs*)>:
c001b139:	53                   	push   ebx
c001b13a:	83 ec 08             	sub    esp,0x8
c001b13d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b141:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b145:	75 17                	jne    c001b15e <Sys::timezone(regs*)+0x25>
c001b147:	83 ec 0c             	sub    esp,0xc
c001b14a:	68 15 bc 02 c0       	push   0xc002bc15
c001b14f:	e8 e5 76 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001b154:	83 c8 ff             	or     eax,0xffffffff
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	89 c2                	mov    edx,eax
c001b15c:	eb 20                	jmp    c001b17e <Sys::timezone(regs*)+0x45>
c001b15e:	83 ec 0c             	sub    esp,0xc
c001b161:	68 2a bc 02 c0       	push   0xc002bc2a
c001b166:	e8 ce 76 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001b16b:	58                   	pop    eax
c001b16c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b16f:	e8 40 85 ff ff       	call   c00136b4 <User::loadClockSettings(int)>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	b8 01 00 00 00       	mov    eax,0x1
c001b17c:	31 d2                	xor    edx,edx
c001b17e:	83 c4 08             	add    esp,0x8
c001b181:	5b                   	pop    ebx
c001b182:	c3                   	ret    

c001b183 <Sys::write(regs*)>:
c001b183:	57                   	push   edi
c001b184:	56                   	push   esi
c001b185:	53                   	push   ebx
c001b186:	83 ec 10             	sub    esp,0x10
c001b189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b18d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b190:	83 f8 02             	cmp    eax,0x2
c001b193:	77 10                	ja     c001b1a5 <Sys::write(regs*)+0x22>
c001b195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b19d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b1a3:	eb 0e                	jmp    c001b1b3 <Sys::write(regs*)+0x30>
c001b1a5:	83 ec 0c             	sub    esp,0xc
c001b1a8:	50                   	push   eax
c001b1a9:	e8 1b 5f ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b1ae:	83 c4 10             	add    esp,0x10
c001b1b1:	89 c1                	mov    ecx,eax
c001b1b3:	83 c8 ff             	or     eax,0xffffffff
c001b1b6:	85 c9                	test   ecx,ecx
c001b1b8:	89 c2                	mov    edx,eax
c001b1ba:	74 28                	je     c001b1e4 <Sys::write(regs*)+0x61>
c001b1bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1c4:	31 ff                	xor    edi,edi
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b1cf:	52                   	push   edx
c001b1d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1d3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b1d6:	57                   	push   edi
c001b1d7:	56                   	push   esi
c001b1d8:	51                   	push   ecx
c001b1d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b1dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1e0:	83 c4 20             	add    esp,0x20
c001b1e3:	99                   	cdq    
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	5b                   	pop    ebx
c001b1e8:	5e                   	pop    esi
c001b1e9:	5f                   	pop    edi
c001b1ea:	c3                   	ret    

c001b1eb <Sys::wsbe(regs*)>:
c001b1eb:	57                   	push   edi
c001b1ec:	b9 0b 00 00 00       	mov    ecx,0xb
c001b1f1:	56                   	push   esi
c001b1f2:	be 69 bc 02 c0       	mov    esi,0xc002bc69
c001b1f7:	53                   	push   ebx
c001b1f8:	83 ec 30             	sub    esp,0x30
c001b1fb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1ff:	fc                   	cld    
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b205:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b20e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b211:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b217:	8b 06                	mov    eax,DWORD PTR [esi]
c001b219:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b21c:	57                   	push   edi
c001b21d:	e8 4a 55 fe ff       	call   c000076c <strlen>
c001b222:	5a                   	pop    edx
c001b223:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b227:	52                   	push   edx
c001b228:	31 d2                	xor    edx,edx
c001b22a:	57                   	push   edi
c001b22b:	52                   	push   edx
c001b22c:	50                   	push   eax
c001b22d:	56                   	push   esi
c001b22e:	ff d3                	call   ebx
c001b230:	83 c4 14             	add    esp,0x14
c001b233:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b237:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b23a:	e8 d6 31 00 00       	call   c001e415 <terminateTask(int)>
c001b23f:	83 c4 40             	add    esp,0x40
c001b242:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b247:	5b                   	pop    ebx
c001b248:	31 d2                	xor    edx,edx
c001b24a:	5e                   	pop    esi
c001b24b:	5f                   	pop    edi
c001b24c:	c3                   	ret    

c001b24d <Sys::yield(regs*)>:
c001b24d:	57                   	push   edi
c001b24e:	56                   	push   esi
c001b24f:	53                   	push   ebx
c001b250:	fa                   	cli    
c001b251:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001b257:	e8 19 29 00 00       	call   c001db75 <schedule()>
c001b25c:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001b261:	48                   	dec    eax
c001b262:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001b267:	75 01                	jne    c001b26a <Sys::yield(regs*)+0x1d>
c001b269:	fb                   	sti    
c001b26a:	8b 35 d0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3d0
c001b270:	8b 3d d4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3d4
c001b276:	89 f0                	mov    eax,esi
c001b278:	89 fb                	mov    ebx,edi
c001b27a:	89 f1                	mov    ecx,esi
c001b27c:	c1 e0 07             	shl    eax,0x7
c001b27f:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b283:	25 80 30 0f 00       	and    eax,0xf3080
c001b288:	c1 eb 17             	shr    ebx,0x17
c001b28b:	31 c8                	xor    eax,ecx
c001b28d:	89 da                	mov    edx,ebx
c001b28f:	5b                   	pop    ebx
c001b290:	5e                   	pop    esi
c001b291:	5f                   	pop    edi
c001b292:	c3                   	ret    

c001b293 <sysCallSeekDir(regs*)>:
c001b293:	31 c0                	xor    eax,eax
c001b295:	31 d2                	xor    edx,edx
c001b297:	c3                   	ret    

c001b298 <sysCallTellDir(regs*)>:
c001b298:	31 c0                	xor    eax,eax
c001b29a:	31 d2                	xor    edx,edx
c001b29c:	c3                   	ret    

c001b29d <sysCallVerify(regs*)>:
c001b29d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2a1:	31 d2                	xor    edx,edx
c001b2a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2a6:	c3                   	ret    

c001b2a7 <sysCallGetArgc(regs*)>:
c001b2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2af:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b2b5:	99                   	cdq    
c001b2b6:	c3                   	ret    

c001b2b7 <sysFormatDisk(regs*)>:
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	53                   	push   ebx
c001b2ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2be:	8b 1d d4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded4
c001b2c4:	eb 25                	jmp    c001b2eb <sysFormatDisk(regs*)+0x34>
c001b2c6:	83 ec 0c             	sub    esp,0xc
c001b2c9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b2cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2ce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b2d1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b2d4:	50                   	push   eax
c001b2d5:	ff 34 85 60 e3 02 c0 	push   DWORD PTR [eax*4-0x3ffd1ca0]
c001b2dc:	53                   	push   ebx
c001b2dd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b2e0:	83 c4 20             	add    esp,0x20
c001b2e3:	83 f8 08             	cmp    eax,0x8
c001b2e6:	75 12                	jne    c001b2fa <sysFormatDisk(regs*)+0x43>
c001b2e8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b2eb:	85 db                	test   ebx,ebx
c001b2ed:	75 d7                	jne    c001b2c6 <sysFormatDisk(regs*)+0xf>
c001b2ef:	59                   	pop    ecx
c001b2f0:	b8 03 00 00 00       	mov    eax,0x3
c001b2f5:	31 d2                	xor    edx,edx
c001b2f7:	5b                   	pop    ebx
c001b2f8:	5e                   	pop    esi
c001b2f9:	c3                   	ret    
c001b2fa:	85 c0                	test   eax,eax
c001b2fc:	74 1b                	je     c001b319 <sysFormatDisk(regs*)+0x62>
c001b2fe:	83 f8 09             	cmp    eax,0x9
c001b301:	74 0b                	je     c001b30e <sysFormatDisk(regs*)+0x57>
c001b303:	59                   	pop    ecx
c001b304:	b8 02 00 00 00       	mov    eax,0x2
c001b309:	31 d2                	xor    edx,edx
c001b30b:	5b                   	pop    ebx
c001b30c:	5e                   	pop    esi
c001b30d:	c3                   	ret    
c001b30e:	59                   	pop    ecx
c001b30f:	b8 01 00 00 00       	mov    eax,0x1
c001b314:	31 d2                	xor    edx,edx
c001b316:	5b                   	pop    ebx
c001b317:	5e                   	pop    esi
c001b318:	c3                   	ret    
c001b319:	59                   	pop    ecx
c001b31a:	31 c0                	xor    eax,eax
c001b31c:	31 d2                	xor    edx,edx
c001b31e:	5b                   	pop    ebx
c001b31f:	5e                   	pop    esi
c001b320:	c3                   	ret    

c001b321 <sysSetDiskVolumeLabel(regs*)>:
c001b321:	56                   	push   esi
c001b322:	53                   	push   ebx
c001b323:	53                   	push   ebx
c001b324:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b328:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b32b:	83 f8 19             	cmp    eax,0x19
c001b32e:	77 29                	ja     c001b359 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b330:	8b 0c 85 60 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ca0]
c001b337:	85 c9                	test   ecx,ecx
c001b339:	74 1e                	je     c001b359 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b33b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b33e:	85 d2                	test   edx,edx
c001b340:	74 17                	je     c001b359 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b342:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b348:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b34a:	52                   	push   edx
c001b34b:	50                   	push   eax
c001b34c:	51                   	push   ecx
c001b34d:	53                   	push   ebx
c001b34e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b351:	83 c4 10             	add    esp,0x10
c001b354:	99                   	cdq    
c001b355:	59                   	pop    ecx
c001b356:	5b                   	pop    ebx
c001b357:	5e                   	pop    esi
c001b358:	c3                   	ret    
c001b359:	59                   	pop    ecx
c001b35a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b35f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b364:	5b                   	pop    ebx
c001b365:	5e                   	pop    esi
c001b366:	c3                   	ret    

c001b367 <sysGetDiskVolumeLabel(regs*)>:
c001b367:	57                   	push   edi
c001b368:	56                   	push   esi
c001b369:	53                   	push   ebx
c001b36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b36e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b371:	83 fa 19             	cmp    edx,0x19
c001b374:	77 34                	ja     c001b3aa <sysGetDiskVolumeLabel(regs*)+0x43>
c001b376:	8b 0c 95 60 e3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1ca0]
c001b37d:	85 c9                	test   ecx,ecx
c001b37f:	74 29                	je     c001b3aa <sysGetDiskVolumeLabel(regs*)+0x43>
c001b381:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b384:	85 db                	test   ebx,ebx
c001b386:	74 22                	je     c001b3aa <sysGetDiskVolumeLabel(regs*)+0x43>
c001b388:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b38b:	85 c0                	test   eax,eax
c001b38d:	74 1b                	je     c001b3aa <sysGetDiskVolumeLabel(regs*)+0x43>
c001b38f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b395:	83 ec 0c             	sub    esp,0xc
c001b398:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b39a:	50                   	push   eax
c001b39b:	53                   	push   ebx
c001b39c:	52                   	push   edx
c001b39d:	51                   	push   ecx
c001b39e:	56                   	push   esi
c001b39f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b3a2:	83 c4 20             	add    esp,0x20
c001b3a5:	99                   	cdq    
c001b3a6:	5b                   	pop    ebx
c001b3a7:	5e                   	pop    esi
c001b3a8:	5f                   	pop    edi
c001b3a9:	c3                   	ret    
c001b3aa:	5b                   	pop    ebx
c001b3ab:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b3b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3b5:	5e                   	pop    esi
c001b3b6:	5f                   	pop    edi
c001b3b7:	c3                   	ret    

c001b3b8 <sysShutdown(regs*)>:
c001b3b8:	83 ec 0c             	sub    esp,0xc
c001b3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3c2:	85 c0                	test   eax,eax
c001b3c4:	74 18                	je     c001b3de <sysShutdown(regs*)+0x26>
c001b3c6:	83 f8 01             	cmp    eax,0x1
c001b3c9:	74 38                	je     c001b403 <sysShutdown(regs*)+0x4b>
c001b3cb:	83 f8 02             	cmp    eax,0x2
c001b3ce:	74 24                	je     c001b3f4 <sysShutdown(regs*)+0x3c>
c001b3d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3da:	83 c4 0c             	add    esp,0xc
c001b3dd:	c3                   	ret    
c001b3de:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001b3e3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3e5:	6a 00                	push   0x0
c001b3e7:	6a 00                	push   0x0
c001b3e9:	6a 00                	push   0x0
c001b3eb:	50                   	push   eax
c001b3ec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	eb dc                	jmp    c001b3d0 <sysShutdown(regs*)+0x18>
c001b3f4:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001b3f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3fb:	6a 00                	push   0x0
c001b3fd:	6a 00                	push   0x0
c001b3ff:	6a 01                	push   0x1
c001b401:	eb e8                	jmp    c001b3eb <sysShutdown(regs*)+0x33>
c001b403:	a1 00 04 03 c0       	mov    eax,ds:0xc0030400
c001b408:	85 c0                	test   eax,eax
c001b40a:	74 02                	je     c001b40e <sysShutdown(regs*)+0x56>
c001b40c:	ff d0                	call   eax
c001b40e:	31 c0                	xor    eax,eax
c001b410:	31 d2                	xor    edx,edx
c001b412:	83 c4 0c             	add    esp,0xc
c001b415:	c3                   	ret    

c001b416 <sysCallRealpath(regs*)>:
c001b416:	83 ec 0c             	sub    esp,0xc
c001b419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b41d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b420:	85 d2                	test   edx,edx
c001b422:	74 07                	je     c001b42b <sysCallRealpath(regs*)+0x15>
c001b424:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b427:	85 c0                	test   eax,eax
c001b429:	75 0b                	jne    c001b436 <sysCallRealpath(regs*)+0x20>
c001b42b:	b8 01 00 00 00       	mov    eax,0x1
c001b430:	31 d2                	xor    edx,edx
c001b432:	83 c4 0c             	add    esp,0xc
c001b435:	c3                   	ret    
c001b436:	51                   	push   ecx
c001b437:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b43d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b440:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b446:	51                   	push   ecx
c001b447:	52                   	push   edx
c001b448:	50                   	push   eax
c001b449:	e8 a0 77 ff ff       	call   c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>
c001b44e:	83 c4 10             	add    esp,0x10
c001b451:	31 c0                	xor    eax,eax
c001b453:	31 d2                	xor    edx,edx
c001b455:	83 c4 0c             	add    esp,0xc
c001b458:	c3                   	ret    

c001b459 <sysCallReadDir(regs*)>:
c001b459:	53                   	push   ebx
c001b45a:	83 ec 18             	sub    esp,0x18
c001b45d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b461:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b464:	83 f8 02             	cmp    eax,0x2
c001b467:	76 60                	jbe    c001b4c9 <sysCallReadDir(regs*)+0x70>
c001b469:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b470:	77 48                	ja     c001b4ba <sysCallReadDir(regs*)+0x61>
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	50                   	push   eax
c001b476:	e8 4e 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b47b:	83 c4 10             	add    esp,0x10
c001b47e:	85 c0                	test   eax,eax
c001b480:	74 38                	je     c001b4ba <sysCallReadDir(regs*)+0x61>
c001b482:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b48a:	83 ec 0c             	sub    esp,0xc
c001b48d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b48f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b493:	51                   	push   ecx
c001b494:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b497:	6a 00                	push   0x0
c001b499:	68 10 01 00 00       	push   0x110
c001b49e:	50                   	push   eax
c001b49f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b4a2:	83 c4 20             	add    esp,0x20
c001b4a5:	85 c0                	test   eax,eax
c001b4a7:	74 29                	je     c001b4d2 <sysCallReadDir(regs*)+0x79>
c001b4a9:	83 f8 07             	cmp    eax,0x7
c001b4ac:	74 1b                	je     c001b4c9 <sysCallReadDir(regs*)+0x70>
c001b4ae:	b8 02 00 00 00       	mov    eax,0x2
c001b4b3:	31 d2                	xor    edx,edx
c001b4b5:	83 c4 18             	add    esp,0x18
c001b4b8:	5b                   	pop    ebx
c001b4b9:	c3                   	ret    
c001b4ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4c4:	83 c4 18             	add    esp,0x18
c001b4c7:	5b                   	pop    ebx
c001b4c8:	c3                   	ret    
c001b4c9:	b8 01 00 00 00       	mov    eax,0x1
c001b4ce:	31 d2                	xor    edx,edx
c001b4d0:	eb e3                	jmp    c001b4b5 <sysCallReadDir(regs*)+0x5c>
c001b4d2:	31 c0                	xor    eax,eax
c001b4d4:	31 d2                	xor    edx,edx
c001b4d6:	eb dd                	jmp    c001b4b5 <sysCallReadDir(regs*)+0x5c>

c001b4d8 <sysCallIsATTY(regs*)>:
c001b4d8:	83 ec 0c             	sub    esp,0xc
c001b4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4e2:	83 f8 02             	cmp    eax,0x2
c001b4e5:	76 07                	jbe    c001b4ee <sysCallIsATTY(regs*)+0x16>
c001b4e7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b4ec:	75 26                	jne    c001b514 <sysCallIsATTY(regs*)+0x3c>
c001b4ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b4fc:	85 c0                	test   eax,eax
c001b4fe:	74 24                	je     c001b524 <sysCallIsATTY(regs*)+0x4c>
c001b500:	83 ec 0c             	sub    esp,0xc
c001b503:	8b 10                	mov    edx,DWORD PTR [eax]
c001b505:	50                   	push   eax
c001b506:	ff 12                	call   DWORD PTR [edx]
c001b508:	31 d2                	xor    edx,edx
c001b50a:	0f b6 c0             	movzx  eax,al
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	83 c4 0c             	add    esp,0xc
c001b513:	c3                   	ret    
c001b514:	83 ec 0c             	sub    esp,0xc
c001b517:	50                   	push   eax
c001b518:	e8 ac 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	85 c0                	test   eax,eax
c001b522:	75 dc                	jne    c001b500 <sysCallIsATTY(regs*)+0x28>
c001b524:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b529:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b52e:	83 c4 0c             	add    esp,0xc
c001b531:	c3                   	ret    

c001b532 <sysCallSeek(regs*)>:
c001b532:	53                   	push   ebx
c001b533:	83 ec 08             	sub    esp,0x8
c001b536:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b53a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b53d:	8d 50 fd             	lea    edx,[eax-0x3]
c001b540:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b546:	77 32                	ja     c001b57a <sysCallSeek(regs*)+0x48>
c001b548:	83 ec 0c             	sub    esp,0xc
c001b54b:	50                   	push   eax
c001b54c:	e8 78 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b551:	83 c4 0c             	add    esp,0xc
c001b554:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b557:	31 db                	xor    ebx,ebx
c001b559:	53                   	push   ebx
c001b55a:	51                   	push   ecx
c001b55b:	50                   	push   eax
c001b55c:	e8 59 79 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	85 c0                	test   eax,eax
c001b566:	0f 95 c0             	setne  al
c001b569:	31 d2                	xor    edx,edx
c001b56b:	0f b6 c0             	movzx  eax,al
c001b56e:	f7 d8                	neg    eax
c001b570:	83 d2 00             	adc    edx,0x0
c001b573:	83 c4 08             	add    esp,0x8
c001b576:	f7 da                	neg    edx
c001b578:	5b                   	pop    ebx
c001b579:	c3                   	ret    
c001b57a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b57f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b584:	83 c4 08             	add    esp,0x8
c001b587:	5b                   	pop    ebx
c001b588:	c3                   	ret    

c001b589 <sysCallTell(regs*)>:
c001b589:	53                   	push   ebx
c001b58a:	83 ec 08             	sub    esp,0x8
c001b58d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b591:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b594:	83 f8 02             	cmp    eax,0x2
c001b597:	76 4d                	jbe    c001b5e6 <sysCallTell(regs*)+0x5d>
c001b599:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b59e:	76 19                	jbe    c001b5b9 <sysCallTell(regs*)+0x30>
c001b5a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5a3:	31 d2                	xor    edx,edx
c001b5a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5b2:	31 c0                	xor    eax,eax
c001b5b4:	83 c4 08             	add    esp,0x8
c001b5b7:	5b                   	pop    ebx
c001b5b8:	c3                   	ret    
c001b5b9:	83 ec 0c             	sub    esp,0xc
c001b5bc:	50                   	push   eax
c001b5bd:	e8 07 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b5c2:	5a                   	pop    edx
c001b5c3:	59                   	pop    ecx
c001b5c4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b5c7:	50                   	push   eax
c001b5c8:	e8 43 79 ff ff       	call   c0012f10 <File::tell(unsigned long long*)>
c001b5cd:	83 c4 10             	add    esp,0x10
c001b5d0:	85 c0                	test   eax,eax
c001b5d2:	0f 95 c0             	setne  al
c001b5d5:	31 d2                	xor    edx,edx
c001b5d7:	0f b6 c0             	movzx  eax,al
c001b5da:	f7 d8                	neg    eax
c001b5dc:	83 d2 00             	adc    edx,0x0
c001b5df:	83 c4 08             	add    esp,0x8
c001b5e2:	f7 da                	neg    edx
c001b5e4:	5b                   	pop    ebx
c001b5e5:	c3                   	ret    
c001b5e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f0:	83 c4 08             	add    esp,0x8
c001b5f3:	5b                   	pop    ebx
c001b5f4:	c3                   	ret    

c001b5f5 <sysCallSize(regs*)>:
c001b5f5:	53                   	push   ebx
c001b5f6:	83 ec 18             	sub    esp,0x18
c001b5f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b600:	83 f8 02             	cmp    eax,0x2
c001b603:	76 53                	jbe    c001b658 <sysCallSize(regs*)+0x63>
c001b605:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b60a:	76 19                	jbe    c001b625 <sysCallSize(regs*)+0x30>
c001b60c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b60f:	31 d2                	xor    edx,edx
c001b611:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b61e:	31 c0                	xor    eax,eax
c001b620:	83 c4 18             	add    esp,0x18
c001b623:	5b                   	pop    ebx
c001b624:	c3                   	ret    
c001b625:	83 ec 0c             	sub    esp,0xc
c001b628:	50                   	push   eax
c001b629:	e8 9b 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b62e:	83 c4 0c             	add    esp,0xc
c001b631:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b635:	52                   	push   edx
c001b636:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b639:	50                   	push   eax
c001b63a:	e8 69 7a ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001b63f:	83 c4 10             	add    esp,0x10
c001b642:	85 c0                	test   eax,eax
c001b644:	0f 95 c0             	setne  al
c001b647:	31 d2                	xor    edx,edx
c001b649:	0f b6 c0             	movzx  eax,al
c001b64c:	f7 d8                	neg    eax
c001b64e:	83 d2 00             	adc    edx,0x0
c001b651:	83 c4 18             	add    esp,0x18
c001b654:	f7 da                	neg    edx
c001b656:	5b                   	pop    ebx
c001b657:	c3                   	ret    
c001b658:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b65d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b662:	83 c4 18             	add    esp,0x18
c001b665:	5b                   	pop    ebx
c001b666:	c3                   	ret    

c001b667 <sysCallSizeFromFilename(regs*)>:
c001b667:	57                   	push   edi
c001b668:	56                   	push   esi
c001b669:	53                   	push   ebx
c001b66a:	83 ec 20             	sub    esp,0x20
c001b66d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b671:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b674:	83 fb 02             	cmp    ebx,0x2
c001b677:	0f 86 88 00 00 00    	jbe    c001b705 <sysCallSizeFromFilename(regs*)+0x9e>
c001b67d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b683:	76 1b                	jbe    c001b6a0 <sysCallSizeFromFilename(regs*)+0x39>
c001b685:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b688:	31 d2                	xor    edx,edx
c001b68a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b690:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b697:	83 c4 20             	add    esp,0x20
c001b69a:	31 c0                	xor    eax,eax
c001b69c:	5b                   	pop    ebx
c001b69d:	5e                   	pop    esi
c001b69e:	5f                   	pop    edi
c001b69f:	c3                   	ret    
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	68 14 01 00 00       	push   0x114
c001b6a8:	e8 ec 3e ff ff       	call   c000f599 <malloc>
c001b6ad:	83 c4 0c             	add    esp,0xc
c001b6b0:	89 c7                	mov    edi,eax
c001b6b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ba:	53                   	push   ebx
c001b6bb:	57                   	push   edi
c001b6bc:	e8 d7 76 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001b6c1:	83 c4 0c             	add    esp,0xc
c001b6c4:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b6c8:	50                   	push   eax
c001b6c9:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b6cc:	57                   	push   edi
c001b6cd:	e8 d6 79 ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	85 ff                	test   edi,edi
c001b6d7:	74 14                	je     c001b6ed <sysCallSizeFromFilename(regs*)+0x86>
c001b6d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6dd:	8b 17                	mov    edx,DWORD PTR [edi]
c001b6df:	83 ec 0c             	sub    esp,0xc
c001b6e2:	57                   	push   edi
c001b6e3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ed:	85 c0                	test   eax,eax
c001b6ef:	0f 95 c0             	setne  al
c001b6f2:	31 d2                	xor    edx,edx
c001b6f4:	0f b6 c0             	movzx  eax,al
c001b6f7:	f7 d8                	neg    eax
c001b6f9:	83 d2 00             	adc    edx,0x0
c001b6fc:	83 c4 20             	add    esp,0x20
c001b6ff:	f7 da                	neg    edx
c001b701:	5b                   	pop    ebx
c001b702:	5e                   	pop    esi
c001b703:	5f                   	pop    edi
c001b704:	c3                   	ret    
c001b705:	83 c4 20             	add    esp,0x20
c001b708:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b70d:	5b                   	pop    ebx
c001b70e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b713:	5e                   	pop    esi
c001b714:	5f                   	pop    edi
c001b715:	c3                   	ret    

c001b716 <sysCallClose(regs*)>:
c001b716:	53                   	push   ebx
c001b717:	83 ec 08             	sub    esp,0x8
c001b71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b721:	83 f8 02             	cmp    eax,0x2
c001b724:	76 41                	jbe    c001b767 <sysCallClose(regs*)+0x51>
c001b726:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b72c:	83 fa 01             	cmp    edx,0x1
c001b72f:	76 2d                	jbe    c001b75e <sysCallClose(regs*)+0x48>
c001b731:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b736:	77 2f                	ja     c001b767 <sysCallClose(regs*)+0x51>
c001b738:	83 ec 0c             	sub    esp,0xc
c001b73b:	50                   	push   eax
c001b73c:	e8 88 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b741:	89 c3                	mov    ebx,eax
c001b743:	89 04 24             	mov    DWORD PTR [esp],eax
c001b746:	e8 0f 77 ff ff       	call   c0012e5a <File::close()>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	85 db                	test   ebx,ebx
c001b750:	74 0c                	je     c001b75e <sysCallClose(regs*)+0x48>
c001b752:	83 ec 0c             	sub    esp,0xc
c001b755:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b757:	53                   	push   ebx
c001b758:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	31 c0                	xor    eax,eax
c001b760:	31 d2                	xor    edx,edx
c001b762:	83 c4 08             	add    esp,0x8
c001b765:	5b                   	pop    ebx
c001b766:	c3                   	ret    
c001b767:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b76c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b771:	83 c4 08             	add    esp,0x8
c001b774:	5b                   	pop    ebx
c001b775:	c3                   	ret    

c001b776 <sysCallOpenDir(regs*)>:
c001b776:	56                   	push   esi
c001b777:	53                   	push   ebx
c001b778:	53                   	push   ebx
c001b779:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b77d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b780:	85 f6                	test   esi,esi
c001b782:	74 59                	je     c001b7dd <sysCallOpenDir(regs*)+0x67>
c001b784:	83 ec 0c             	sub    esp,0xc
c001b787:	68 14 01 00 00       	push   0x114
c001b78c:	e8 08 3e ff ff       	call   c000f599 <malloc>
c001b791:	83 c4 0c             	add    esp,0xc
c001b794:	89 c6                	mov    esi,eax
c001b796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b79b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b79e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7a1:	56                   	push   esi
c001b7a2:	e8 9d 7a ff ff       	call   c0013244 <Directory::Directory(char const*, Process*)>
c001b7a7:	83 c4 10             	add    esp,0x10
c001b7aa:	85 f6                	test   esi,esi
c001b7ac:	74 2f                	je     c001b7dd <sysCallOpenDir(regs*)+0x67>
c001b7ae:	83 ec 0c             	sub    esp,0xc
c001b7b1:	56                   	push   esi
c001b7b2:	e8 f1 7a ff ff       	call   c00132a8 <Directory::open()>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	85 c0                	test   eax,eax
c001b7bc:	75 1f                	jne    c001b7dd <sysCallOpenDir(regs*)+0x67>
c001b7be:	83 ec 0c             	sub    esp,0xc
c001b7c1:	56                   	push   esi
c001b7c2:	e8 0d 56 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b7c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	89 02                	mov    DWORD PTR [edx],eax
c001b7cf:	c1 f8 1f             	sar    eax,0x1f
c001b7d2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b7d5:	31 c0                	xor    eax,eax
c001b7d7:	59                   	pop    ecx
c001b7d8:	31 d2                	xor    edx,edx
c001b7da:	5b                   	pop    ebx
c001b7db:	5e                   	pop    esi
c001b7dc:	c3                   	ret    
c001b7dd:	59                   	pop    ecx
c001b7de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7e8:	5b                   	pop    ebx
c001b7e9:	5e                   	pop    esi
c001b7ea:	c3                   	ret    

c001b7eb <sysCallCloseDir(regs*)>:
c001b7eb:	53                   	push   ebx
c001b7ec:	83 ec 08             	sub    esp,0x8
c001b7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7f6:	8d 50 fd             	lea    edx,[eax-0x3]
c001b7f9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b7ff:	77 2f                	ja     c001b830 <sysCallCloseDir(regs*)+0x45>
c001b801:	83 ec 0c             	sub    esp,0xc
c001b804:	50                   	push   eax
c001b805:	e8 bf 58 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b80a:	89 c3                	mov    ebx,eax
c001b80c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b80f:	e8 f0 7a ff ff       	call   c0013304 <Directory::close()>
c001b814:	83 c4 10             	add    esp,0x10
c001b817:	85 db                	test   ebx,ebx
c001b819:	74 0c                	je     c001b827 <sysCallCloseDir(regs*)+0x3c>
c001b81b:	83 ec 0c             	sub    esp,0xc
c001b81e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b820:	53                   	push   ebx
c001b821:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	31 c0                	xor    eax,eax
c001b829:	31 d2                	xor    edx,edx
c001b82b:	83 c4 08             	add    esp,0x8
c001b82e:	5b                   	pop    ebx
c001b82f:	c3                   	ret    
c001b830:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b835:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b83a:	83 c4 08             	add    esp,0x8
c001b83d:	5b                   	pop    ebx
c001b83e:	c3                   	ret    

c001b83f <sysCallMakeDir(regs*)>:
c001b83f:	56                   	push   esi
c001b840:	53                   	push   ebx
c001b841:	83 ec 10             	sub    esp,0x10
c001b844:	68 14 01 00 00       	push   0x114
c001b849:	e8 4b 3d ff ff       	call   c000f599 <malloc>
c001b84e:	83 c4 0c             	add    esp,0xc
c001b851:	89 c3                	mov    ebx,eax
c001b853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b858:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b85b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b85f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b862:	53                   	push   ebx
c001b863:	e8 dc 79 ff ff       	call   c0013244 <Directory::Directory(char const*, Process*)>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	85 db                	test   ebx,ebx
c001b86d:	74 32                	je     c001b8a1 <sysCallMakeDir(regs*)+0x62>
c001b86f:	83 ec 0c             	sub    esp,0xc
c001b872:	53                   	push   ebx
c001b873:	e8 10 7c ff ff       	call   c0013488 <Directory::create()>
c001b878:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b87b:	89 c6                	mov    esi,eax
c001b87d:	e8 82 7a ff ff       	call   c0013304 <Directory::close()>
c001b882:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b884:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b887:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b88a:	83 c4 10             	add    esp,0x10
c001b88d:	31 c0                	xor    eax,eax
c001b88f:	59                   	pop    ecx
c001b890:	85 f6                	test   esi,esi
c001b892:	5b                   	pop    ebx
c001b893:	0f 95 c0             	setne  al
c001b896:	5e                   	pop    esi
c001b897:	31 d2                	xor    edx,edx
c001b899:	f7 d8                	neg    eax
c001b89b:	83 d2 00             	adc    edx,0x0
c001b89e:	f7 da                	neg    edx
c001b8a0:	c3                   	ret    
c001b8a1:	59                   	pop    ecx
c001b8a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8ac:	5b                   	pop    ebx
c001b8ad:	5e                   	pop    esi
c001b8ae:	c3                   	ret    

c001b8af <sysCallWait(regs*)>:
c001b8af:	83 ec 10             	sub    esp,0x10
c001b8b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8b6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b8b9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8bc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b8bf:	e8 b4 24 00 00       	call   c001dd78 <waitTask(int, int*, int)>
c001b8c4:	83 c4 1c             	add    esp,0x1c
c001b8c7:	99                   	cdq    
c001b8c8:	c3                   	ret    

c001b8c9 <sysCallNotImpl(regs*)>:
c001b8c9:	83 ec 18             	sub    esp,0x18
c001b8cc:	68 95 bc 02 c0       	push   0xc002bc95
c001b8d1:	e8 0d e7 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001b8d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8e0:	83 c4 1c             	add    esp,0x1c
c001b8e3:	c3                   	ret    

c001b8e4 <sysPanic(regs*)>:
c001b8e4:	83 ec 18             	sub    esp,0x18
c001b8e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8eb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8ee:	e8 f0 e6 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001b8f3:	b8 01 00 00 00       	mov    eax,0x1
c001b8f8:	31 d2                	xor    edx,edx
c001b8fa:	83 c4 1c             	add    esp,0x1c
c001b8fd:	c3                   	ret    

c001b8fe <sysCallRmdir(regs*)>:
c001b8fe:	56                   	push   esi
c001b8ff:	53                   	push   ebx
c001b900:	83 ec 20             	sub    esp,0x20
c001b903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b907:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b90a:	68 14 01 00 00       	push   0x114
c001b90f:	e8 85 3c ff ff       	call   c000f599 <malloc>
c001b914:	83 c4 0c             	add    esp,0xc
c001b917:	89 c3                	mov    ebx,eax
c001b919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b921:	56                   	push   esi
c001b922:	53                   	push   ebx
c001b923:	e8 70 74 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001b928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b92b:	e8 44 76 ff ff       	call   c0012f74 <File::unlink()>
c001b930:	83 c4 10             	add    esp,0x10
c001b933:	85 db                	test   ebx,ebx
c001b935:	74 14                	je     c001b94b <sysCallRmdir(regs*)+0x4d>
c001b937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b93b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b93d:	83 ec 0c             	sub    esp,0xc
c001b940:	53                   	push   ebx
c001b941:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b944:	83 c4 10             	add    esp,0x10
c001b947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b94b:	85 c0                	test   eax,eax
c001b94d:	0f 95 c0             	setne  al
c001b950:	31 d2                	xor    edx,edx
c001b952:	0f b6 c0             	movzx  eax,al
c001b955:	f7 d8                	neg    eax
c001b957:	83 d2 00             	adc    edx,0x0
c001b95a:	83 c4 14             	add    esp,0x14
c001b95d:	f7 da                	neg    edx
c001b95f:	5b                   	pop    ebx
c001b960:	5e                   	pop    esi
c001b961:	c3                   	ret    

c001b962 <sysCallUnlink(regs*)>:
c001b962:	56                   	push   esi
c001b963:	53                   	push   ebx
c001b964:	83 ec 20             	sub    esp,0x20
c001b967:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b96b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b96e:	68 14 01 00 00       	push   0x114
c001b973:	e8 21 3c ff ff       	call   c000f599 <malloc>
c001b978:	83 c4 0c             	add    esp,0xc
c001b97b:	89 c3                	mov    ebx,eax
c001b97d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b982:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b985:	56                   	push   esi
c001b986:	53                   	push   ebx
c001b987:	e8 0c 74 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001b98c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b98f:	e8 e0 75 ff ff       	call   c0012f74 <File::unlink()>
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	85 db                	test   ebx,ebx
c001b999:	74 14                	je     c001b9af <sysCallUnlink(regs*)+0x4d>
c001b99b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b99f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9a1:	83 ec 0c             	sub    esp,0xc
c001b9a4:	53                   	push   ebx
c001b9a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9a8:	83 c4 10             	add    esp,0x10
c001b9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9af:	85 c0                	test   eax,eax
c001b9b1:	0f 95 c0             	setne  al
c001b9b4:	31 d2                	xor    edx,edx
c001b9b6:	0f b6 c0             	movzx  eax,al
c001b9b9:	f7 d8                	neg    eax
c001b9bb:	83 d2 00             	adc    edx,0x0
c001b9be:	83 c4 14             	add    esp,0x14
c001b9c1:	f7 da                	neg    edx
c001b9c3:	5b                   	pop    ebx
c001b9c4:	5e                   	pop    esi
c001b9c5:	c3                   	ret    

c001b9c6 <sysCallGetArgv(regs*)>:
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9cd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b9d0:	85 c0                	test   eax,eax
c001b9d2:	78 2b                	js     c001b9ff <sysCallGetArgv(regs*)+0x39>
c001b9d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b9da:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b9dd:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b9e3:	7d 1a                	jge    c001b9ff <sysCallGetArgv(regs*)+0x39>
c001b9e5:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b9ec:	85 c0                	test   eax,eax
c001b9ee:	74 17                	je     c001ba07 <sysCallGetArgv(regs*)+0x41>
c001b9f0:	83 ec 08             	sub    esp,0x8
c001b9f3:	50                   	push   eax
c001b9f4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b9f7:	e8 10 4e fe ff       	call   c000080c <strcpy>
c001b9fc:	83 c4 10             	add    esp,0x10
c001b9ff:	31 c0                	xor    eax,eax
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	83 c4 0c             	add    esp,0xc
c001ba06:	c3                   	ret    
c001ba07:	b8 01 00 00 00       	mov    eax,0x1
c001ba0c:	31 d2                	xor    edx,edx
c001ba0e:	83 c4 0c             	add    esp,0xc
c001ba11:	c3                   	ret    

c001ba12 <sysCallTTYName(regs*)>:
c001ba12:	56                   	push   esi
c001ba13:	53                   	push   ebx
c001ba14:	53                   	push   ebx
c001ba15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba19:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ba1c:	85 c0                	test   eax,eax
c001ba1e:	74 5f                	je     c001ba7f <sysCallTTYName(regs*)+0x6d>
c001ba20:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba23:	83 f8 02             	cmp    eax,0x2
c001ba26:	77 3e                	ja     c001ba66 <sysCallTTYName(regs*)+0x54>
c001ba28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba30:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ba36:	85 db                	test   ebx,ebx
c001ba38:	74 45                	je     c001ba7f <sysCallTTYName(regs*)+0x6d>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba3f:	53                   	push   ebx
c001ba40:	ff 10                	call   DWORD PTR [eax]
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	84 c0                	test   al,al
c001ba47:	74 41                	je     c001ba8a <sysCallTTYName(regs*)+0x78>
c001ba49:	83 ec 08             	sub    esp,0x8
c001ba4c:	81 c3 82 00 00 00    	add    ebx,0x82
c001ba52:	53                   	push   ebx
c001ba53:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba56:	e8 b1 4d fe ff       	call   c000080c <strcpy>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	31 c0                	xor    eax,eax
c001ba60:	59                   	pop    ecx
c001ba61:	31 d2                	xor    edx,edx
c001ba63:	5b                   	pop    ebx
c001ba64:	5e                   	pop    esi
c001ba65:	c3                   	ret    
c001ba66:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba6b:	74 bb                	je     c001ba28 <sysCallTTYName(regs*)+0x16>
c001ba6d:	83 ec 0c             	sub    esp,0xc
c001ba70:	50                   	push   eax
c001ba71:	e8 53 56 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	89 c3                	mov    ebx,eax
c001ba7b:	85 db                	test   ebx,ebx
c001ba7d:	75 bb                	jne    c001ba3a <sysCallTTYName(regs*)+0x28>
c001ba7f:	59                   	pop    ecx
c001ba80:	b8 01 00 00 00       	mov    eax,0x1
c001ba85:	31 d2                	xor    edx,edx
c001ba87:	5b                   	pop    ebx
c001ba88:	5e                   	pop    esi
c001ba89:	c3                   	ret    
c001ba8a:	59                   	pop    ecx
c001ba8b:	b8 02 00 00 00       	mov    eax,0x2
c001ba90:	31 d2                	xor    edx,edx
c001ba92:	5b                   	pop    ebx
c001ba93:	5e                   	pop    esi
c001ba94:	c3                   	ret    

c001ba95 <sysCallUSleep(regs*)>:
c001ba95:	83 ec 14             	sub    esp,0x14
c001ba98:	b8 e8 03 00 00       	mov    eax,0x3e8
c001ba9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001baa1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001baa8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001baab:	01 ca                	add    edx,ecx
c001baad:	52                   	push   edx
c001baae:	50                   	push   eax
c001baaf:	e8 9b 23 00 00       	call   c001de4f <nanoSleep(unsigned long long)>
c001bab4:	31 c0                	xor    eax,eax
c001bab6:	31 d2                	xor    edx,edx
c001bab8:	83 c4 1c             	add    esp,0x1c
c001babb:	c3                   	ret    

c001babc <sysCallSpawn(regs*)>:
c001babc:	56                   	push   esi
c001babd:	53                   	push   ebx
c001babe:	50                   	push   eax
c001babf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bac3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bac6:	85 c0                	test   eax,eax
c001bac8:	75 08                	jne    c001bad2 <sysCallSpawn(regs*)+0x16>
c001baca:	59                   	pop    ecx
c001bacb:	31 c0                	xor    eax,eax
c001bacd:	31 d2                	xor    edx,edx
c001bacf:	5b                   	pop    ebx
c001bad0:	5e                   	pop    esi
c001bad1:	c3                   	ret    
c001bad2:	83 ec 0c             	sub    esp,0xc
c001bad5:	68 3f 07 00 00       	push   0x73f
c001bada:	e8 ba 3a ff ff       	call   c000f599 <malloc>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	89 c6                	mov    esi,eax
c001bae4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bae7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baea:	85 c0                	test   eax,eax
c001baec:	75 32                	jne    c001bb20 <sysCallSpawn(regs*)+0x64>
c001baee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf6:	52                   	push   edx
c001baf7:	50                   	push   eax
c001baf8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bafb:	56                   	push   esi
c001bafc:	e8 73 1a 00 00       	call   c001d574 <Process::Process(char const*, Process*, char**)>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bb0b:	75 bd                	jne    c001baca <sysCallSpawn(regs*)+0xe>
c001bb0d:	83 ec 0c             	sub    esp,0xc
c001bb10:	56                   	push   esi
c001bb11:	e8 40 1f 00 00       	call   c001da56 <Process::createUserThread()>
c001bb16:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	99                   	cdq    
c001bb1c:	59                   	pop    ecx
c001bb1d:	5b                   	pop    ebx
c001bb1e:	5e                   	pop    esi
c001bb1f:	c3                   	ret    
c001bb20:	31 c0                	xor    eax,eax
c001bb22:	eb d2                	jmp    c001baf6 <sysCallSpawn(regs*)+0x3a>

c001bb24 <sysCallGetEnv(regs*)>:
c001bb24:	57                   	push   edi
c001bb25:	56                   	push   esi
c001bb26:	53                   	push   ebx
c001bb27:	83 ec 1c             	sub    esp,0x1c
c001bb2a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb33:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bb36:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bb39:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb3c:	e8 ee e3 ff ff       	call   c0019f2f <Krnl::getProcessTotalEnvCount(Process*)>
c001bb41:	83 c4 10             	add    esp,0x10
c001bb44:	39 c7                	cmp    edi,eax
c001bb46:	7c 14                	jl     c001bb5c <sysCallGetEnv(regs*)+0x38>
c001bb48:	85 f6                	test   esi,esi
c001bb4a:	75 0b                	jne    c001bb57 <sysCallGetEnv(regs*)+0x33>
c001bb4c:	83 c4 10             	add    esp,0x10
c001bb4f:	31 c0                	xor    eax,eax
c001bb51:	5b                   	pop    ebx
c001bb52:	31 d2                	xor    edx,edx
c001bb54:	5e                   	pop    esi
c001bb55:	5f                   	pop    edi
c001bb56:	c3                   	ret    
c001bb57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb5a:	eb f0                	jmp    c001bb4c <sysCallGetEnv(regs*)+0x28>
c001bb5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb60:	52                   	push   edx
c001bb61:	57                   	push   edi
c001bb62:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bb68:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bb6b:	50                   	push   eax
c001bb6c:	e8 de e3 ff ff       	call   c0019f4f <Krnl::getProcessEnvPair(Process*, int)>
c001bb71:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bb74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb7c:	83 c4 0c             	add    esp,0xc
c001bb7f:	85 c9                	test   ecx,ecx
c001bb81:	75 23                	jne    c001bba6 <sysCallGetEnv(regs*)+0x82>
c001bb83:	83 ec 0c             	sub    esp,0xc
c001bb86:	50                   	push   eax
c001bb87:	e8 e0 4b fe ff       	call   c000076c <strlen>
c001bb8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb8f:	89 c3                	mov    ebx,eax
c001bb91:	e8 d6 4b fe ff       	call   c000076c <strlen>
c001bb96:	83 c4 10             	add    esp,0x10
c001bb99:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bb9d:	83 c4 10             	add    esp,0x10
c001bba0:	31 d2                	xor    edx,edx
c001bba2:	5b                   	pop    ebx
c001bba3:	5e                   	pop    esi
c001bba4:	5f                   	pop    edi
c001bba5:	c3                   	ret    
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bbac:	50                   	push   eax
c001bbad:	56                   	push   esi
c001bbae:	e8 59 4c fe ff       	call   c000080c <strcpy>
c001bbb3:	58                   	pop    eax
c001bbb4:	5a                   	pop    edx
c001bbb5:	68 af bc 02 c0       	push   0xc002bcaf
c001bbba:	56                   	push   esi
c001bbbb:	e8 8c 4d fe ff       	call   c000094c <strcat>
c001bbc0:	59                   	pop    ecx
c001bbc1:	5b                   	pop    ebx
c001bbc2:	57                   	push   edi
c001bbc3:	56                   	push   esi
c001bbc4:	e8 83 4d fe ff       	call   c000094c <strcat>
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	e9 7b ff ff ff       	jmp    c001bb4c <sysCallGetEnv(regs*)+0x28>

c001bbd1 <sysAppSettings(regs*)>:
c001bbd1:	57                   	push   edi
c001bbd2:	56                   	push   esi
c001bbd3:	56                   	push   esi
c001bbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bbdb:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bbe1:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bbe6:	66 3d c0 09          	cmp    ax,0x9c0
c001bbea:	75 2e                	jne    c001bc1a <sysAppSettings(regs*)+0x49>
c001bbec:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bbf2:	83 e0 1f             	and    eax,0x1f
c001bbf5:	3c 01                	cmp    al,0x1
c001bbf7:	74 2c                	je     c001bc25 <sysAppSettings(regs*)+0x54>
c001bbf9:	3c 07                	cmp    al,0x7
c001bbfb:	0f 84 b3 00 00 00    	je     c001bcb4 <sysAppSettings(regs*)+0xe3>
c001bc01:	84 c0                	test   al,al
c001bc03:	0f 84 d2 00 00 00    	je     c001bcdb <sysAppSettings(regs*)+0x10a>
c001bc09:	3c 08                	cmp    al,0x8
c001bc0b:	74 63                	je     c001bc70 <sysAppSettings(regs*)+0x9f>
c001bc0d:	59                   	pop    ecx
c001bc0e:	0f b6 c0             	movzx  eax,al
c001bc11:	5e                   	pop    esi
c001bc12:	05 e8 03 00 00       	add    eax,0x3e8
c001bc17:	5f                   	pop    edi
c001bc18:	99                   	cdq    
c001bc19:	c3                   	ret    
c001bc1a:	b8 01 00 00 00       	mov    eax,0x1
c001bc1f:	59                   	pop    ecx
c001bc20:	31 d2                	xor    edx,edx
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	c3                   	ret    
c001bc25:	50                   	push   eax
c001bc26:	68 00 01 00 00       	push   0x100
c001bc2b:	6a 00                	push   0x0
c001bc2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc35:	83 c0 0c             	add    eax,0xc
c001bc38:	50                   	push   eax
c001bc39:	e8 12 4b fe ff       	call   c0000750 <memset>
c001bc3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc43:	b9 ff 00 00 00       	mov    ecx,0xff
c001bc48:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bc4b:	83 c7 0c             	add    edi,0xc
c001bc4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc55:	5a                   	pop    edx
c001bc56:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc59:	59                   	pop    ecx
c001bc5a:	8d 50 0c             	lea    edx,[eax+0xc]
c001bc5d:	52                   	push   edx
c001bc5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc64:	e8 89 45 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	31 c0                	xor    eax,eax
c001bc6e:	eb af                	jmp    c001bc1f <sysAppSettings(regs*)+0x4e>
c001bc70:	83 ec 08             	sub    esp,0x8
c001bc73:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc79:	83 e0 0f             	and    eax,0xf
c001bc7c:	50                   	push   eax
c001bc7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc8b:	e8 52 45 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bc90:	5f                   	pop    edi
c001bc91:	58                   	pop    eax
c001bc92:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bc98:	c1 e8 04             	shr    eax,0x4
c001bc9b:	83 e0 0f             	and    eax,0xf
c001bc9e:	50                   	push   eax
c001bc9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bca7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bcad:	e8 20 45 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bcb2:	eb b5                	jmp    c001bc69 <sysAppSettings(regs*)+0x98>
c001bcb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcbc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bcc2:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bcc8:	c0 e8 06             	shr    al,0x6
c001bccb:	83 e0 01             	and    eax,0x1
c001bcce:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bcd4:	31 c0                	xor    eax,eax
c001bcd6:	e9 44 ff ff ff       	jmp    c001bc1f <sysAppSettings(regs*)+0x4e>
c001bcdb:	b8 02 00 00 00       	mov    eax,0x2
c001bce0:	e9 3a ff ff ff       	jmp    c001bc1f <sysAppSettings(regs*)+0x4e>

c001bce5 <sysSetFatAttrib(regs*)>:
c001bce5:	57                   	push   edi
c001bce6:	56                   	push   esi
c001bce7:	53                   	push   ebx
c001bce8:	83 ec 1c             	sub    esp,0x1c
c001bceb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bcef:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bcf2:	68 14 01 00 00       	push   0x114
c001bcf7:	e8 9d 38 ff ff       	call   c000f599 <malloc>
c001bcfc:	83 c4 0c             	add    esp,0xc
c001bcff:	89 c3                	mov    ebx,eax
c001bd01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd09:	57                   	push   edi
c001bd0a:	53                   	push   ebx
c001bd0b:	e8 88 70 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001bd10:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bd13:	83 c4 0c             	add    esp,0xc
c001bd16:	0f b6 d4             	movzx  edx,ah
c001bd19:	0f b6 c0             	movzx  eax,al
c001bd1c:	52                   	push   edx
c001bd1d:	50                   	push   eax
c001bd1e:	53                   	push   ebx
c001bd1f:	e8 ea 72 ff ff       	call   c001300e <File::chfatattr(unsigned char, unsigned char)>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	85 db                	test   ebx,ebx
c001bd29:	74 14                	je     c001bd3f <sysSetFatAttrib(regs*)+0x5a>
c001bd2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd2f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd31:	83 ec 0c             	sub    esp,0xc
c001bd34:	53                   	push   ebx
c001bd35:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd3f:	85 c0                	test   eax,eax
c001bd41:	0f 95 c0             	setne  al
c001bd44:	31 d2                	xor    edx,edx
c001bd46:	0f b6 c0             	movzx  eax,al
c001bd49:	f7 d8                	neg    eax
c001bd4b:	83 d2 00             	adc    edx,0x0
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	f7 da                	neg    edx
c001bd53:	5b                   	pop    ebx
c001bd54:	5e                   	pop    esi
c001bd55:	5f                   	pop    edi
c001bd56:	c3                   	ret    

c001bd57 <sysPipe(regs*)>:
c001bd57:	57                   	push   edi
c001bd58:	56                   	push   esi
c001bd59:	53                   	push   ebx
c001bd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5e:	83 ec 0c             	sub    esp,0xc
c001bd61:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bd64:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bd67:	6a 20                	push   0x20
c001bd69:	e8 2b 38 ff ff       	call   c000f599 <malloc>
c001bd6e:	89 c3                	mov    ebx,eax
c001bd70:	58                   	pop    eax
c001bd71:	5a                   	pop    edx
c001bd72:	68 00 50 00 00       	push   0x5000
c001bd77:	53                   	push   ebx
c001bd78:	e8 ed 41 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bd7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd80:	e8 4f 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd85:	89 07                	mov    DWORD PTR [edi],eax
c001bd87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8a:	e8 45 50 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bd8f:	83 c4 10             	add    esp,0x10
c001bd92:	89 06                	mov    DWORD PTR [esi],eax
c001bd94:	31 d2                	xor    edx,edx
c001bd96:	5b                   	pop    ebx
c001bd97:	31 c0                	xor    eax,eax
c001bd99:	5e                   	pop    esi
c001bd9a:	5f                   	pop    edi
c001bd9b:	c3                   	ret    

c001bd9c <sysGetUnixTime(regs*)>:
c001bd9c:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001bda1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bda7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdab:	e9 da 79 ff ff       	jmp    c001378a <Clock::timeInSecondsLocal()>

c001bdb0 <string_ends_with(char const*, char const*)>:
c001bdb0:	57                   	push   edi
c001bdb1:	56                   	push   esi
c001bdb2:	53                   	push   ebx
c001bdb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdb7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bdbb:	83 ec 0c             	sub    esp,0xc
c001bdbe:	53                   	push   ebx
c001bdbf:	e8 a8 49 fe ff       	call   c000076c <strlen>
c001bdc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdc7:	89 c6                	mov    esi,eax
c001bdc9:	e8 9e 49 fe ff       	call   c000076c <strlen>
c001bdce:	83 c4 10             	add    esp,0x10
c001bdd1:	39 c6                	cmp    esi,eax
c001bdd3:	7d 06                	jge    c001bddb <string_ends_with(char const*, char const*)+0x2b>
c001bdd5:	5b                   	pop    ebx
c001bdd6:	31 c0                	xor    eax,eax
c001bdd8:	5e                   	pop    esi
c001bdd9:	5f                   	pop    edi
c001bdda:	c3                   	ret    
c001bddb:	83 ec 08             	sub    esp,0x8
c001bdde:	29 c6                	sub    esi,eax
c001bde0:	57                   	push   edi
c001bde1:	01 f3                	add    ebx,esi
c001bde3:	53                   	push   ebx
c001bde4:	e8 af 4a fe ff       	call   c0000898 <strcmp>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	85 c0                	test   eax,eax
c001bdee:	5b                   	pop    ebx
c001bdef:	0f 94 c0             	sete   al
c001bdf2:	5e                   	pop    esi
c001bdf3:	0f b6 c0             	movzx  eax,al
c001bdf6:	5f                   	pop    edi
c001bdf7:	c3                   	ret    

c001bdf8 <sysCallOpen(regs*)>:
c001bdf8:	56                   	push   esi
c001bdf9:	53                   	push   ebx
c001bdfa:	81 ec 04 01 00 00    	sub    esp,0x104
c001be00:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001be07:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001be0a:	85 c9                	test   ecx,ecx
c001be0c:	0f 84 ad 01 00 00    	je     c001bfbf <sysCallOpen(regs*)+0x1c7>
c001be12:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be15:	85 c0                	test   eax,eax
c001be17:	0f 84 a2 01 00 00    	je     c001bfbf <sysCallOpen(regs*)+0x1c7>
c001be1d:	52                   	push   edx
c001be1e:	68 b1 bc 02 c0       	push   0xc002bcb1
c001be23:	50                   	push   eax
c001be24:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001be28:	56                   	push   esi
c001be29:	e8 c0 6d ff ff       	call   c0012bee <Fs::standardiseFiles(char*, char const*, char const*)>
c001be2e:	89 34 24             	mov    DWORD PTR [esp],esi
c001be31:	e8 36 49 fe ff       	call   c000076c <strlen>
c001be36:	83 c4 10             	add    esp,0x10
c001be39:	48                   	dec    eax
c001be3a:	74 1d                	je     c001be59 <sysCallOpen(regs*)+0x61>
c001be3c:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001be3f:	eb 0f                	jmp    c001be50 <sysCallOpen(regs*)+0x58>
c001be41:	80 fa 3a             	cmp    dl,0x3a
c001be44:	74 0f                	je     c001be55 <sysCallOpen(regs*)+0x5d>
c001be46:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001be4a:	48                   	dec    eax
c001be4b:	74 0c                	je     c001be59 <sysCallOpen(regs*)+0x61>
c001be4d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001be50:	80 fa 2e             	cmp    dl,0x2e
c001be53:	75 ec                	jne    c001be41 <sysCallOpen(regs*)+0x49>
c001be55:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001be59:	83 ec 08             	sub    esp,0x8
c001be5c:	68 b5 bc 02 c0       	push   0xc002bcb5
c001be61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be64:	e8 47 ff ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001be69:	83 c4 10             	add    esp,0x10
c001be6c:	85 c0                	test   eax,eax
c001be6e:	74 1d                	je     c001be8d <sysCallOpen(regs*)+0x95>
c001be70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be73:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001be79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be80:	81 c4 04 01 00 00    	add    esp,0x104
c001be86:	31 c0                	xor    eax,eax
c001be88:	31 d2                	xor    edx,edx
c001be8a:	5b                   	pop    ebx
c001be8b:	5e                   	pop    esi
c001be8c:	c3                   	ret    
c001be8d:	83 ec 08             	sub    esp,0x8
c001be90:	68 ba bc 02 c0       	push   0xc002bcba
c001be95:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be98:	e8 13 ff ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001be9d:	83 c4 10             	add    esp,0x10
c001bea0:	85 c0                	test   eax,eax
c001bea2:	75 cc                	jne    c001be70 <sysCallOpen(regs*)+0x78>
c001bea4:	83 ec 08             	sub    esp,0x8
c001bea7:	68 b6 bc 02 c0       	push   0xc002bcb6
c001beac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001beaf:	e8 e4 49 fe ff       	call   c0000898 <strcmp>
c001beb4:	83 c4 10             	add    esp,0x10
c001beb7:	85 c0                	test   eax,eax
c001beb9:	74 b5                	je     c001be70 <sysCallOpen(regs*)+0x78>
c001bebb:	83 ec 08             	sub    esp,0x8
c001bebe:	68 b5 bc 02 c0       	push   0xc002bcb5
c001bec3:	56                   	push   esi
c001bec4:	e8 e7 fe ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	85 c0                	test   eax,eax
c001bece:	75 a0                	jne    c001be70 <sysCallOpen(regs*)+0x78>
c001bed0:	83 ec 08             	sub    esp,0x8
c001bed3:	68 bf bc 02 c0       	push   0xc002bcbf
c001bed8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bedb:	e8 d0 fe ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001bee0:	83 c4 10             	add    esp,0x10
c001bee3:	85 c0                	test   eax,eax
c001bee5:	0f 85 e7 00 00 00    	jne    c001bfd2 <sysCallOpen(regs*)+0x1da>
c001beeb:	83 ec 08             	sub    esp,0x8
c001beee:	68 c4 bc 02 c0       	push   0xc002bcc4
c001bef3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bef6:	e8 b5 fe ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	85 c0                	test   eax,eax
c001bf00:	0f 85 cc 00 00 00    	jne    c001bfd2 <sysCallOpen(regs*)+0x1da>
c001bf06:	83 ec 08             	sub    esp,0x8
c001bf09:	68 c0 bc 02 c0       	push   0xc002bcc0
c001bf0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf11:	e8 82 49 fe ff       	call   c0000898 <strcmp>
c001bf16:	83 c4 10             	add    esp,0x10
c001bf19:	85 c0                	test   eax,eax
c001bf1b:	0f 84 b1 00 00 00    	je     c001bfd2 <sysCallOpen(regs*)+0x1da>
c001bf21:	83 ec 08             	sub    esp,0x8
c001bf24:	68 bf bc 02 c0       	push   0xc002bcbf
c001bf29:	56                   	push   esi
c001bf2a:	e8 81 fe ff ff       	call   c001bdb0 <string_ends_with(char const*, char const*)>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	85 c0                	test   eax,eax
c001bf34:	0f 85 98 00 00 00    	jne    c001bfd2 <sysCallOpen(regs*)+0x1da>
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	68 14 01 00 00       	push   0x114
c001bf42:	e8 52 36 ff ff       	call   c000f599 <malloc>
c001bf47:	83 c4 0c             	add    esp,0xc
c001bf4a:	89 c6                	mov    esi,eax
c001bf4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf51:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf54:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf57:	56                   	push   esi
c001bf58:	e8 3b 6e ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	85 f6                	test   esi,esi
c001bf62:	74 5b                	je     c001bfbf <sysCallOpen(regs*)+0x1c7>
c001bf64:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf67:	0f b6 c2             	movzx  eax,dl
c001bf6a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bf6d:	89 d0                	mov    eax,edx
c001bf6f:	83 e0 01             	and    eax,0x1
c001bf72:	f6 c2 02             	test   dl,0x2
c001bf75:	74 03                	je     c001bf7a <sysCallOpen(regs*)+0x182>
c001bf77:	83 c8 02             	or     eax,0x2
c001bf7a:	f6 c2 04             	test   dl,0x4
c001bf7d:	74 03                	je     c001bf82 <sysCallOpen(regs*)+0x18a>
c001bf7f:	83 c8 04             	or     eax,0x4
c001bf82:	f6 c2 08             	test   dl,0x8
c001bf85:	74 03                	je     c001bf8a <sysCallOpen(regs*)+0x192>
c001bf87:	83 c8 0a             	or     eax,0xa
c001bf8a:	83 e2 10             	and    edx,0x10
c001bf8d:	74 03                	je     c001bf92 <sysCallOpen(regs*)+0x19a>
c001bf8f:	83 c8 12             	or     eax,0x12
c001bf92:	83 ec 08             	sub    esp,0x8
c001bf95:	50                   	push   eax
c001bf96:	56                   	push   esi
c001bf97:	e8 60 6e ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	85 c0                	test   eax,eax
c001bfa1:	75 1c                	jne    c001bfbf <sysCallOpen(regs*)+0x1c7>
c001bfa3:	83 ec 0c             	sub    esp,0xc
c001bfa6:	56                   	push   esi
c001bfa7:	e8 28 4e ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bfac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	89 02                	mov    DWORD PTR [edx],eax
c001bfb4:	c1 f8 1f             	sar    eax,0x1f
c001bfb7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfba:	e9 c1 fe ff ff       	jmp    c001be80 <sysCallOpen(regs*)+0x88>
c001bfbf:	81 c4 04 01 00 00    	add    esp,0x104
c001bfc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfcf:	5b                   	pop    ebx
c001bfd0:	5e                   	pop    esi
c001bfd1:	c3                   	ret    
c001bfd2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bfd5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bfdb:	e9 99 fe ff ff       	jmp    c001be79 <sysCallOpen(regs*)+0x81>

c001bfe0 <Sys::loadSyscalls()>:
c001bfe0:	c7 05 c0 08 03 c0 4d b2 01 c0 	mov    DWORD PTR ds:0xc00308c0,0xc001b24d
c001bfea:	c7 05 c4 08 03 c0 42 ae 01 c0 	mov    DWORD PTR ds:0xc00308c4,0xc001ae42
c001bff4:	c7 05 c8 08 03 c0 33 b0 01 c0 	mov    DWORD PTR ds:0xc00308c8,0xc001b033
c001bffe:	c7 05 cc 08 03 c0 83 b1 01 c0 	mov    DWORD PTR ds:0xc00308cc,0xc001b183
c001c008:	c7 05 d0 08 03 c0 cb af 01 c0 	mov    DWORD PTR ds:0xc00308d0,0xc001afcb
c001c012:	c7 05 d4 08 03 c0 79 ae 01 c0 	mov    DWORD PTR ds:0xc00308d4,0xc001ae79
c001c01c:	c7 05 d8 08 03 c0 5a ae 01 c0 	mov    DWORD PTR ds:0xc00308d8,0xc001ae5a
c001c026:	c7 05 dc 08 03 c0 88 b0 01 c0 	mov    DWORD PTR ds:0xc00308dc,0xc001b088
c001c030:	c7 05 e4 08 03 c0 16 b7 01 c0 	mov    DWORD PTR ds:0xc00308e4,0xc001b716
c001c03a:	c7 05 e0 08 03 c0 f8 bd 01 c0 	mov    DWORD PTR ds:0xc00308e0,0xc001bdf8
c001c044:	c7 05 e8 08 03 c0 76 b7 01 c0 	mov    DWORD PTR ds:0xc00308e8,0xc001b776
c001c04e:	c7 05 ec 08 03 c0 59 b4 01 c0 	mov    DWORD PTR ds:0xc00308ec,0xc001b459
c001c058:	c7 05 f0 08 03 c0 93 b2 01 c0 	mov    DWORD PTR ds:0xc00308f0,0xc001b293
c001c062:	c7 05 f4 08 03 c0 98 b2 01 c0 	mov    DWORD PTR ds:0xc00308f4,0xc001b298
c001c06c:	c7 05 f8 08 03 c0 3f b8 01 c0 	mov    DWORD PTR ds:0xc00308f8,0xc001b83f
c001c076:	c7 05 fc 08 03 c0 eb b7 01 c0 	mov    DWORD PTR ds:0xc00308fc,0xc001b7eb
c001c080:	c7 05 00 09 03 c0 32 b5 01 c0 	mov    DWORD PTR ds:0xc0030900,0xc001b532
c001c08a:	c7 05 04 09 03 c0 89 b5 01 c0 	mov    DWORD PTR ds:0xc0030904,0xc001b589
c001c094:	c7 05 08 09 03 c0 f5 b5 01 c0 	mov    DWORD PTR ds:0xc0030908,0xc001b5f5
c001c09e:	c7 05 0c 09 03 c0 9d b2 01 c0 	mov    DWORD PTR ds:0xc003090c,0xc001b29d
c001c0a8:	c7 05 10 09 03 c0 af b8 01 c0 	mov    DWORD PTR ds:0xc0030910,0xc001b8af
c001c0b2:	c7 05 14 09 03 c0 c9 b8 01 c0 	mov    DWORD PTR ds:0xc0030914,0xc001b8c9
c001c0bc:	c7 05 18 09 03 c0 c9 b8 01 c0 	mov    DWORD PTR ds:0xc0030918,0xc001b8c9
c001c0c6:	c7 05 1c 09 03 c0 fe b8 01 c0 	mov    DWORD PTR ds:0xc003091c,0xc001b8fe
c001c0d0:	c7 05 20 09 03 c0 62 b9 01 c0 	mov    DWORD PTR ds:0xc0030920,0xc001b962
c001c0da:	c7 05 24 09 03 c0 a7 b2 01 c0 	mov    DWORD PTR ds:0xc0030924,0xc001b2a7
c001c0e4:	c7 05 28 09 03 c0 c6 b9 01 c0 	mov    DWORD PTR ds:0xc0030928,0xc001b9c6
c001c0ee:	c7 05 2c 09 03 c0 16 b4 01 c0 	mov    DWORD PTR ds:0xc003092c,0xc001b416
c001c0f8:	c7 05 30 09 03 c0 12 ba 01 c0 	mov    DWORD PTR ds:0xc0030930,0xc001ba12
c001c102:	c7 05 34 09 03 c0 d8 b4 01 c0 	mov    DWORD PTR ds:0xc0030934,0xc001b4d8
c001c10c:	c7 05 38 09 03 c0 95 ba 01 c0 	mov    DWORD PTR ds:0xc0030938,0xc001ba95
c001c116:	c7 05 3c 09 03 c0 67 b6 01 c0 	mov    DWORD PTR ds:0xc003093c,0xc001b667
c001c120:	c7 05 40 09 03 c0 bc ba 01 c0 	mov    DWORD PTR ds:0xc0030940,0xc001babc
c001c12a:	c7 05 44 09 03 c0 24 bb 01 c0 	mov    DWORD PTR ds:0xc0030944,0xc001bb24
c001c134:	c7 05 48 09 03 c0 d1 bb 01 c0 	mov    DWORD PTR ds:0xc0030948,0xc001bbd1
c001c13e:	c7 05 4c 09 03 c0 b7 b2 01 c0 	mov    DWORD PTR ds:0xc003094c,0xc001b2b7
c001c148:	c7 05 50 09 03 c0 21 b3 01 c0 	mov    DWORD PTR ds:0xc0030950,0xc001b321
c001c152:	c7 05 54 09 03 c0 67 b3 01 c0 	mov    DWORD PTR ds:0xc0030954,0xc001b367
c001c15c:	c7 05 58 09 03 c0 e5 bc 01 c0 	mov    DWORD PTR ds:0xc0030958,0xc001bce5
c001c166:	c7 05 5c 09 03 c0 e4 b8 01 c0 	mov    DWORD PTR ds:0xc003095c,0xc001b8e4
c001c170:	c7 05 60 09 03 c0 b8 b3 01 c0 	mov    DWORD PTR ds:0xc0030960,0xc001b3b8
c001c17a:	c7 05 64 09 03 c0 57 bd 01 c0 	mov    DWORD PTR ds:0xc0030964,0xc001bd57
c001c184:	c7 05 68 09 03 c0 9c bd 01 c0 	mov    DWORD PTR ds:0xc0030968,0xc001bd9c
c001c18e:	c7 05 6c 09 03 c0 23 af 01 c0 	mov    DWORD PTR ds:0xc003096c,0xc001af23
c001c198:	c7 05 70 09 03 c0 a4 b0 01 c0 	mov    DWORD PTR ds:0xc0030970,0xc001b0a4
c001c1a2:	c7 05 74 09 03 c0 39 b1 01 c0 	mov    DWORD PTR ds:0xc0030974,0xc001b139
c001c1ac:	c7 05 78 09 03 c0 0c ae 01 c0 	mov    DWORD PTR ds:0xc0030978,0xc001ae0c
c001c1b6:	c7 05 7c 09 03 c0 eb b1 01 c0 	mov    DWORD PTR ds:0xc003097c,0xc001b1eb
c001c1c0:	c7 05 80 09 03 c0 85 ae 01 c0 	mov    DWORD PTR ds:0xc0030980,0xc001ae85
c001c1ca:	c7 05 84 09 03 c0 9f ae 01 c0 	mov    DWORD PTR ds:0xc0030984,0xc001ae9f
c001c1d4:	c3                   	ret    

c001c1d5 <Sys::systemCall(regs*, void*)>:
c001c1d5:	53                   	push   ebx
c001c1d6:	83 ec 08             	sub    esp,0x8
c001c1d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c1e0:	83 f8 7f             	cmp    eax,0x7f
c001c1e3:	77 16                	ja     c001c1fb <Sys::systemCall(regs*, void*)+0x26>
c001c1e5:	8b 14 85 c0 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf740]
c001c1ec:	85 d2                	test   edx,edx
c001c1ee:	74 0b                	je     c001c1fb <Sys::systemCall(regs*, void*)+0x26>
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	53                   	push   ebx
c001c1f4:	ff d2                	call   edx
c001c1f6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c1f9:	eb 0d                	jmp    c001c208 <Sys::systemCall(regs*, void*)+0x33>
c001c1fb:	52                   	push   edx
c001c1fc:	52                   	push   edx
c001c1fd:	50                   	push   eax
c001c1fe:	68 c9 bc 02 c0       	push   0xc002bcc9
c001c203:	e8 31 66 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c208:	83 c4 10             	add    esp,0x10
c001c20b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c210:	31 d2                	xor    edx,edx
c001c212:	83 c4 08             	add    esp,0x8
c001c215:	5b                   	pop    ebx
c001c216:	c3                   	ret    

c001c217 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c217:	55                   	push   ebp
c001c218:	57                   	push   edi
c001c219:	56                   	push   esi
c001c21a:	53                   	push   ebx
c001c21b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c221:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c228:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c22f:	85 c0                	test   eax,eax
c001c231:	0f 95 c1             	setne  cl
c001c234:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c23c:	0f 94 c2             	sete   dl
c001c23f:	84 d1                	test   cl,dl
c001c241:	74 23                	je     c001c266 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c243:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c249:	74 1b                	je     c001c266 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c24b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c251:	89 da                	mov    edx,ebx
c001c253:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c259:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c25f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c266:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c26d:	05 ff 0f 00 00       	add    eax,0xfff
c001c272:	83 ec 0c             	sub    esp,0xc
c001c275:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c279:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c27f:	c1 e8 0c             	shr    eax,0xc
c001c282:	89 fe                	mov    esi,edi
c001c284:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c288:	c1 ee 0c             	shr    esi,0xc
c001c28b:	6a 01                	push   0x1
c001c28d:	e8 8d 4f ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c292:	89 c5                	mov    ebp,eax
c001c294:	58                   	pop    eax
c001c295:	5a                   	pop    edx
c001c296:	56                   	push   esi
c001c297:	68 dd bc 02 c0       	push   0xc002bcdd
c001c29c:	e8 98 65 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c2a1:	59                   	pop    ecx
c001c2a2:	58                   	pop    eax
c001c2a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c2a7:	68 ef bc 02 c0       	push   0xc002bcef
c001c2ac:	e8 88 65 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c2b1:	83 c4 10             	add    esp,0x10
c001c2b4:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c2ba:	0f 86 31 01 00 00    	jbe    c001c3f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c2c0:	c1 e6 0c             	shl    esi,0xc
c001c2c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2c6:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c2c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2cd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c2d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c2d7:	01 df                	add    edi,ebx
c001c2d9:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c2dc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c2e0:	0f 84 08 01 00 00    	je     c001c3ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c2e6:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c2ec:	76 05                	jbe    c001c2f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c2ee:	bf 00 10 00 00       	mov    edi,0x1000
c001c2f3:	83 ec 0c             	sub    esp,0xc
c001c2f6:	31 d2                	xor    edx,edx
c001c2f8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c2ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c301:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c305:	50                   	push   eax
c001c306:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c30a:	56                   	push   esi
c001c30b:	52                   	push   edx
c001c30c:	57                   	push   edi
c001c30d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c314:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c317:	83 c4 20             	add    esp,0x20
c001c31a:	85 c0                	test   eax,eax
c001c31c:	74 0a                	je     c001c328 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c31e:	53                   	push   ebx
c001c31f:	53                   	push   ebx
c001c320:	50                   	push   eax
c001c321:	68 01 bd 02 c0       	push   0xc002bd01
c001c326:	eb 0f                	jmp    c001c337 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c328:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c32c:	74 20                	je     c001c34e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c32e:	51                   	push   ecx
c001c32f:	51                   	push   ecx
c001c330:	6a 00                	push   0x0
c001c332:	68 2c bd 02 c0       	push   0xc002bd2c
c001c337:	e8 fd 64 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c33c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c33f:	e8 b7 53 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	31 c0                	xor    eax,eax
c001c349:	e9 68 01 00 00       	jmp    c001c4b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c34e:	fa                   	cli    
c001c34f:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001c355:	e8 3b 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c35a:	6a 07                	push   0x7
c001c35c:	89 c7                	mov    edi,eax
c001c35e:	55                   	push   ebp
c001c35f:	50                   	push   eax
c001c360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c365:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c368:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c36e:	e8 ff 56 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c373:	83 c4 0c             	add    esp,0xc
c001c376:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c37d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c383:	6a 00                	push   0x0
c001c385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c38d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c393:	e8 34 55 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c398:	58                   	pop    eax
c001c399:	5a                   	pop    edx
c001c39a:	68 07 0c 00 00       	push   0xc07
c001c39f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c3a3:	57                   	push   edi
c001c3a4:	89 ef                	mov    edi,ebp
c001c3a6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c3ad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3b3:	6a 00                	push   0x0
c001c3b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3c3:	e8 66 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c3c8:	b9 00 10 00 00       	mov    ecx,0x1000
c001c3cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3cf:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001c3d4:	83 c4 20             	add    esp,0x20
c001c3d7:	48                   	dec    eax
c001c3d8:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001c3dd:	85 c0                	test   eax,eax
c001c3df:	75 01                	jne    c001c3e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c3e1:	fb                   	sti    
c001c3e2:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c3e9:	e9 df fe ff ff       	jmp    c001c2cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c3ee:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c3f1:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c3f9:	0f 86 a9 00 00 00    	jbe    c001c4a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c3ff:	fa                   	cli    
c001c400:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001c406:	51                   	push   ecx
c001c407:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c40e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c414:	6a 00                	push   0x0
c001c416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c41b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c41e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c424:	e8 a3 54 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c429:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c42d:	c1 e6 0c             	shl    esi,0xc
c001c430:	01 de                	add    esi,ebx
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	39 de                	cmp    esi,ebx
c001c437:	74 61                	je     c001c49a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c439:	e8 57 35 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c43e:	6a 07                	push   0x7
c001c440:	89 c7                	mov    edi,eax
c001c442:	55                   	push   ebp
c001c443:	50                   	push   eax
c001c444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c449:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c44c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c452:	e8 1b 56 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c457:	58                   	pop    eax
c001c458:	5a                   	pop    edx
c001c459:	68 07 0c 00 00       	push   0xc07
c001c45e:	53                   	push   ebx
c001c45f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c465:	57                   	push   edi
c001c466:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c46d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c473:	6a 00                	push   0x0
c001c475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c47a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c47d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c483:	e8 a6 59 ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c488:	83 c4 1c             	add    esp,0x1c
c001c48b:	68 00 10 00 00       	push   0x1000
c001c490:	6a 00                	push   0x0
c001c492:	55                   	push   ebp
c001c493:	e8 b8 42 fe ff       	call   c0000750 <memset>
c001c498:	eb 98                	jmp    c001c432 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c49a:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001c49f:	48                   	dec    eax
c001c4a0:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001c4a5:	75 01                	jne    c001c4a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c4a7:	fb                   	sti    
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	55                   	push   ebp
c001c4ac:	e8 4a 52 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	b0 01                	mov    al,0x1
c001c4b6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c4bc:	5b                   	pop    ebx
c001c4bd:	5e                   	pop    esi
c001c4be:	5f                   	pop    edi
c001c4bf:	5d                   	pop    ebp
c001c4c0:	c3                   	ret    

c001c4c1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c4c1:	55                   	push   ebp
c001c4c2:	57                   	push   edi
c001c4c3:	56                   	push   esi
c001c4c4:	53                   	push   ebx
c001c4c5:	83 ec 48             	sub    esp,0x48
c001c4c8:	68 14 01 00 00       	push   0x114
c001c4cd:	e8 c7 30 ff ff       	call   c000f599 <malloc>
c001c4d2:	83 c4 0c             	add    esp,0xc
c001c4d5:	89 c6                	mov    esi,eax
c001c4d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c4db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c4df:	50                   	push   eax
c001c4e0:	e8 b3 68 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001c4e5:	58                   	pop    eax
c001c4e6:	5a                   	pop    edx
c001c4e7:	6a 01                	push   0x1
c001c4e9:	56                   	push   esi
c001c4ea:	e8 0d 69 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	0f 85 47 01 00 00    	jne    c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4fa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	6a 34                	push   0x34
c001c507:	e8 8d 30 ff ff       	call   c000f599 <malloc>
c001c50c:	89 c3                	mov    ebx,eax
c001c50e:	58                   	pop    eax
c001c50f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c511:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c515:	57                   	push   edi
c001c516:	53                   	push   ebx
c001c517:	6a 00                	push   0x0
c001c519:	6a 34                	push   0x34
c001c51b:	56                   	push   esi
c001c51c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c51f:	83 c4 20             	add    esp,0x20
c001c522:	85 c0                	test   eax,eax
c001c524:	0f 85 17 01 00 00    	jne    c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c52a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c530:	0f 85 0b 01 00 00    	jne    c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c536:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c539:	85 c0                	test   eax,eax
c001c53b:	0f 84 00 01 00 00    	je     c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c541:	31 d2                	xor    edx,edx
c001c543:	55                   	push   ebp
c001c544:	52                   	push   edx
c001c545:	50                   	push   eax
c001c546:	56                   	push   esi
c001c547:	e8 6e 69 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c54c:	83 c4 10             	add    esp,0x10
c001c54f:	85 c0                	test   eax,eax
c001c551:	0f 85 ea 00 00 00    	jne    c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c557:	83 ec 0c             	sub    esp,0xc
c001c55a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c55d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c561:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c565:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c569:	0f af c2             	imul   eax,edx
c001c56c:	50                   	push   eax
c001c56d:	e8 27 30 ff ff       	call   c000f599 <malloc>
c001c572:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c574:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c578:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c57b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c57f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c583:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c587:	0f af c2             	imul   eax,edx
c001c58a:	99                   	cdq    
c001c58b:	52                   	push   edx
c001c58c:	50                   	push   eax
c001c58d:	56                   	push   esi
c001c58e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c591:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c594:	83 c4 20             	add    esp,0x20
c001c597:	85 c0                	test   eax,eax
c001c599:	0f 84 a2 00 00 00    	je     c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c59f:	31 d2                	xor    edx,edx
c001c5a1:	51                   	push   ecx
c001c5a2:	52                   	push   edx
c001c5a3:	50                   	push   eax
c001c5a4:	56                   	push   esi
c001c5a5:	e8 10 69 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c5aa:	83 c4 10             	add    esp,0x10
c001c5ad:	85 c0                	test   eax,eax
c001c5af:	0f 85 8c 00 00 00    	jne    c001c641 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5b5:	83 ec 0c             	sub    esp,0xc
c001c5b8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c5bc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c5c0:	31 ed                	xor    ebp,ebp
c001c5c2:	0f af c2             	imul   eax,edx
c001c5c5:	50                   	push   eax
c001c5c6:	e8 ce 2f ff ff       	call   c000f599 <malloc>
c001c5cb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5d1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5d8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c5dc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c5e0:	0f af c2             	imul   eax,edx
c001c5e3:	99                   	cdq    
c001c5e4:	52                   	push   edx
c001c5e5:	50                   	push   eax
c001c5e6:	56                   	push   esi
c001c5e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5ea:	83 c4 20             	add    esp,0x20
c001c5ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c5f5:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c5f9:	0f 86 80 00 00 00    	jbe    c001c67f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c5ff:	0f b7 fd             	movzx  edi,bp
c001c602:	c1 e7 05             	shl    edi,0x5
c001c605:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c609:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c60c:	75 6b                	jne    c001c679 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c60e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c611:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c615:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c618:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c61c:	52                   	push   edx
c001c61d:	31 d2                	xor    edx,edx
c001c61f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c622:	52                   	push   edx
c001c623:	50                   	push   eax
c001c624:	56                   	push   esi
c001c625:	e8 90 68 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	85 c0                	test   eax,eax
c001c62f:	74 17                	je     c001c648 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c631:	83 ec 0c             	sub    esp,0xc
c001c634:	68 58 bd 02 c0       	push   0xc002bd58
c001c639:	e8 fb 61 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c63e:	83 c4 10             	add    esp,0x10
c001c641:	31 c0                	xor    eax,eax
c001c643:	e9 87 00 00 00       	jmp    c001c6cf <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c64e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c651:	50                   	push   eax
c001c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c656:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c65a:	56                   	push   esi
c001c65b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c65f:	e8 b3 fb ff ff       	call   c001c217 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c664:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c668:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c66c:	83 c4 20             	add    esp,0x20
c001c66f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c673:	73 04                	jae    c001c679 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c679:	45                   	inc    ebp
c001c67a:	e9 76 ff ff ff       	jmp    c001c5f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c67f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c687:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c68b:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c691:	83 ec 0c             	sub    esp,0xc
c001c694:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c69a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c69f:	05 00 10 00 00       	add    eax,0x1000
c001c6a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c6a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ab:	e8 f9 2e ff ff       	call   c000f5a9 <free>
c001c6b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6b3:	e8 f1 2e ff ff       	call   c000f5a9 <free>
c001c6b8:	58                   	pop    eax
c001c6b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6bd:	e8 e7 2e ff ff       	call   c000f5a9 <free>
c001c6c2:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6c5:	e8 90 67 ff ff       	call   c0012e5a <File::close()>
c001c6ca:	83 c4 10             	add    esp,0x10
c001c6cd:	b0 01                	mov    al,0x1
c001c6cf:	83 c4 3c             	add    esp,0x3c
c001c6d2:	5b                   	pop    ebx
c001c6d3:	5e                   	pop    esi
c001c6d4:	5f                   	pop    edi
c001c6d5:	5d                   	pop    ebp
c001c6d6:	c3                   	ret    

c001c6d7 <Thr::runtimeReferenceHelper()>:
c001c6d7:	83 ec 18             	sub    esp,0x18
c001c6da:	68 60 bd 02 c0       	push   0xc002bd60
c001c6df:	e8 55 61 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001c6e4:	fa                   	cli    
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	eb fe                	jmp    c001c6e8 <Thr::runtimeReferenceHelper()+0x11>

c001c6ea <Thr::getAddressOfKernelSymbol(char const*)>:
c001c6ea:	57                   	push   edi
c001c6eb:	56                   	push   esi
c001c6ec:	53                   	push   ebx
c001c6ed:	31 db                	xor    ebx,ebx
c001c6ef:	39 1d 60 12 03 c0    	cmp    DWORD PTR ds:0xc0031260,ebx
c001c6f5:	7e 3c                	jle    c001c733 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c6f7:	8b 34 9d e0 11 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcee20]
c001c6fe:	31 ff                	xor    edi,edi
c001c700:	39 3c 9d e0 10 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcef20],edi
c001c707:	7e 27                	jle    c001c730 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c709:	50                   	push   eax
c001c70a:	50                   	push   eax
c001c70b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c70f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c711:	03 04 9d 60 11 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffceea0]
c001c718:	50                   	push   eax
c001c719:	e8 7a 41 fe ff       	call   c0000898 <strcmp>
c001c71e:	83 c4 10             	add    esp,0x10
c001c721:	85 c0                	test   eax,eax
c001c723:	75 05                	jne    c001c72a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c725:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c728:	eb 0b                	jmp    c001c735 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c72a:	83 c6 10             	add    esi,0x10
c001c72d:	47                   	inc    edi
c001c72e:	eb d0                	jmp    c001c700 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c730:	43                   	inc    ebx
c001c731:	eb bc                	jmp    c001c6ef <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c733:	31 c0                	xor    eax,eax
c001c735:	5b                   	pop    ebx
c001c736:	5e                   	pop    esi
c001c737:	5f                   	pop    edi
c001c738:	c3                   	ret    

c001c739 <Thr::loadKernelSymbolTable(char const*)>:
c001c739:	55                   	push   ebp
c001c73a:	57                   	push   edi
c001c73b:	56                   	push   esi
c001c73c:	53                   	push   ebx
c001c73d:	83 ec 68             	sub    esp,0x68
c001c740:	8b 35 b0 12 03 c0    	mov    esi,DWORD PTR ds:0xc00312b0
c001c746:	68 14 01 00 00       	push   0x114
c001c74b:	e8 49 2e ff ff       	call   c000f599 <malloc>
c001c750:	83 c4 0c             	add    esp,0xc
c001c753:	89 c3                	mov    ebx,eax
c001c755:	56                   	push   esi
c001c756:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c75a:	50                   	push   eax
c001c75b:	e8 38 66 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001c760:	5e                   	pop    esi
c001c761:	5f                   	pop    edi
c001c762:	6a 01                	push   0x1
c001c764:	53                   	push   ebx
c001c765:	e8 92 66 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001c76a:	83 c4 10             	add    esp,0x10
c001c76d:	85 c0                	test   eax,eax
c001c76f:	74 0a                	je     c001c77b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c771:	83 ec 0c             	sub    esp,0xc
c001c774:	68 82 bd 02 c0       	push   0xc002bd82
c001c779:	eb 34                	jmp    c001c7af <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c77b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c783:	83 ec 0c             	sub    esp,0xc
c001c786:	6a 34                	push   0x34
c001c788:	e8 0c 2e ff ff       	call   c000f599 <malloc>
c001c78d:	59                   	pop    ecx
c001c78e:	89 c7                	mov    edi,eax
c001c790:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c794:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c796:	56                   	push   esi
c001c797:	57                   	push   edi
c001c798:	6a 00                	push   0x0
c001c79a:	6a 34                	push   0x34
c001c79c:	53                   	push   ebx
c001c79d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7a0:	83 c4 20             	add    esp,0x20
c001c7a3:	85 c0                	test   eax,eax
c001c7a5:	74 17                	je     c001c7be <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c7a7:	83 ec 0c             	sub    esp,0xc
c001c7aa:	68 99 bd 02 c0       	push   0xc002bd99
c001c7af:	e8 2f d8 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001c7b4:	83 c4 10             	add    esp,0x10
c001c7b7:	31 c0                	xor    eax,eax
c001c7b9:	e9 31 02 00 00       	jmp    c001c9ef <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c7be:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7c4:	75 e1                	jne    c001c7a7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7c6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7c9:	85 c0                	test   eax,eax
c001c7cb:	74 da                	je     c001c7a7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7cd:	52                   	push   edx
c001c7ce:	31 d2                	xor    edx,edx
c001c7d0:	52                   	push   edx
c001c7d1:	50                   	push   eax
c001c7d2:	53                   	push   ebx
c001c7d3:	e8 e2 66 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	85 c0                	test   eax,eax
c001c7dd:	75 c8                	jne    c001c7a7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7e6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7ea:	31 ed                	xor    ebp,ebp
c001c7ec:	0f af c2             	imul   eax,edx
c001c7ef:	50                   	push   eax
c001c7f0:	e8 a4 2d ff ff       	call   c000f599 <malloc>
c001c7f5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c802:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c806:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c80a:	0f af c2             	imul   eax,edx
c001c80d:	99                   	cdq    
c001c80e:	52                   	push   edx
c001c80f:	50                   	push   eax
c001c810:	53                   	push   ebx
c001c811:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c814:	83 c4 20             	add    esp,0x20
c001c817:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c81f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c827:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c82f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c837:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c83b:	0f 86 aa 00 00 00    	jbe    c001c8eb <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c841:	0f b7 f5             	movzx  esi,bp
c001c844:	6b f6 28             	imul   esi,esi,0x28
c001c847:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c84b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c84e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c852:	50                   	push   eax
c001c853:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c857:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c85b:	8b 16                	mov    edx,DWORD PTR [esi]
c001c85d:	6b c0 28             	imul   eax,eax,0x28
c001c860:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c864:	89 d0                	mov    eax,edx
c001c866:	31 d2                	xor    edx,edx
c001c868:	52                   	push   edx
c001c869:	50                   	push   eax
c001c86a:	53                   	push   ebx
c001c86b:	e8 4a 66 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c870:	83 c4 0c             	add    esp,0xc
c001c873:	6a 20                	push   0x20
c001c875:	6a 00                	push   0x0
c001c877:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c87b:	52                   	push   edx
c001c87c:	e8 cf 3e fe ff       	call   c0000750 <memset>
c001c881:	58                   	pop    eax
c001c882:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c884:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c888:	51                   	push   ecx
c001c889:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c88d:	52                   	push   edx
c001c88e:	6a 00                	push   0x0
c001c890:	6a 1f                	push   0x1f
c001c892:	53                   	push   ebx
c001c893:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c896:	83 c4 18             	add    esp,0x18
c001c899:	68 b0 bd 02 c0       	push   0xc002bdb0
c001c89e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c8a2:	52                   	push   edx
c001c8a3:	e8 f0 3f fe ff       	call   c0000898 <strcmp>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	85 c0                	test   eax,eax
c001c8ad:	75 0f                	jne    c001c8be <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c8af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8be:	50                   	push   eax
c001c8bf:	50                   	push   eax
c001c8c0:	68 b8 bd 02 c0       	push   0xc002bdb8
c001c8c5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c8c9:	50                   	push   eax
c001c8ca:	e8 c9 3f fe ff       	call   c0000898 <strcmp>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	75 0f                	jne    c001c8e5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c8d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8e5:	45                   	inc    ebp
c001c8e6:	e9 4c ff ff ff       	jmp    c001c837 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c8eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8f0:	75 10                	jne    c001c902 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	68 c0 bd 02 c0       	push   0xc002bdc0
c001c8fa:	e8 e4 d6 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c907:	75 10                	jne    c001c919 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c909:	83 ec 0c             	sub    esp,0xc
c001c90c:	68 c0 bd 02 c0       	push   0xc002bdc0
c001c911:	e8 cd d6 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001c916:	83 c4 10             	add    esp,0x10
c001c919:	31 d2                	xor    edx,edx
c001c91b:	50                   	push   eax
c001c91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c920:	52                   	push   edx
c001c921:	50                   	push   eax
c001c922:	53                   	push   ebx
c001c923:	e8 92 65 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c928:	5a                   	pop    edx
c001c929:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c92d:	e8 67 2c ff ff       	call   c000f599 <malloc>
c001c932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c936:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c93a:	31 c9                	xor    ecx,ecx
c001c93c:	5e                   	pop    esi
c001c93d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c93f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c943:	55                   	push   ebp
c001c944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c948:	51                   	push   ecx
c001c949:	52                   	push   edx
c001c94a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c94e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c952:	53                   	push   ebx
c001c953:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c956:	83 c4 14             	add    esp,0x14
c001c959:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c95d:	e8 37 2c ff ff       	call   c000f599 <malloc>
c001c962:	89 c6                	mov    esi,eax
c001c964:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c966:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c969:	56                   	push   esi
c001c96a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c96e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c972:	51                   	push   ecx
c001c973:	52                   	push   edx
c001c974:	53                   	push   ebx
c001c975:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c978:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c97c:	8b 15 60 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031260
c001c982:	83 c4 1c             	add    esp,0x1c
c001c985:	c1 e8 04             	shr    eax,0x4
c001c988:	89 04 95 e0 10 03 c0 	mov    DWORD PTR [edx*4-0x3ffcef20],eax
c001c98f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c993:	31 d2                	xor    edx,edx
c001c995:	52                   	push   edx
c001c996:	50                   	push   eax
c001c997:	53                   	push   ebx
c001c998:	e8 1d 65 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001c99d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c99f:	31 d2                	xor    edx,edx
c001c9a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9a4:	56                   	push   esi
c001c9a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9a9:	52                   	push   edx
c001c9aa:	50                   	push   eax
c001c9ab:	53                   	push   ebx
c001c9ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9af:	83 c4 14             	add    esp,0x14
c001c9b2:	53                   	push   ebx
c001c9b3:	e8 a2 64 ff ff       	call   c0012e5a <File::close()>
c001c9b8:	5d                   	pop    ebp
c001c9b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9bd:	e8 e7 2b ff ff       	call   c000f5a9 <free>
c001c9c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9c5:	e8 df 2b ff ff       	call   c000f5a9 <free>
c001c9ca:	a1 60 12 03 c0       	mov    eax,ds:0xc0031260
c001c9cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c9d3:	8d 50 01             	lea    edx,[eax+0x1]
c001c9d6:	89 0c 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],ecx
c001c9dd:	89 34 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],esi
c001c9e4:	89 15 60 12 03 c0    	mov    DWORD PTR ds:0xc0031260,edx
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	b0 01                	mov    al,0x1
c001c9ef:	83 c4 5c             	add    esp,0x5c
c001c9f2:	5b                   	pop    ebx
c001c9f3:	5e                   	pop    esi
c001c9f4:	5f                   	pop    edi
c001c9f5:	5d                   	pop    ebp
c001c9f6:	c3                   	ret    

c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c9f7:	55                   	push   ebp
c001c9f8:	57                   	push   edi
c001c9f9:	56                   	push   esi
c001c9fa:	53                   	push   ebx
c001c9fb:	81 ec 68 03 00 00    	sub    esp,0x368
c001ca01:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ca08:	8b 1d b0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312b0
c001ca0e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca12:	68 14 01 00 00       	push   0x114
c001ca17:	e8 7d 2b ff ff       	call   c000f599 <malloc>
c001ca1c:	83 c4 0c             	add    esp,0xc
c001ca1f:	89 c5                	mov    ebp,eax
c001ca21:	53                   	push   ebx
c001ca22:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ca29:	50                   	push   eax
c001ca2a:	e8 69 63 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001ca2f:	5e                   	pop    esi
c001ca30:	5f                   	pop    edi
c001ca31:	6a 01                	push   0x1
c001ca33:	55                   	push   ebp
c001ca34:	e8 c3 63 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	85 c0                	test   eax,eax
c001ca3e:	0f 85 a7 06 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca44:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca4c:	83 ec 0c             	sub    esp,0xc
c001ca4f:	6a 34                	push   0x34
c001ca51:	e8 43 2b ff ff       	call   c000f599 <malloc>
c001ca56:	5b                   	pop    ebx
c001ca57:	89 c7                	mov    edi,eax
c001ca59:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca60:	53                   	push   ebx
c001ca61:	57                   	push   edi
c001ca62:	6a 00                	push   0x0
c001ca64:	6a 34                	push   0x34
c001ca66:	55                   	push   ebp
c001ca67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca6a:	83 c4 20             	add    esp,0x20
c001ca6d:	85 c0                	test   eax,eax
c001ca6f:	0f 85 76 06 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca75:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca7b:	0f 85 6a 06 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca81:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca84:	85 c0                	test   eax,eax
c001ca86:	0f 84 5f 06 00 00    	je     c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca8c:	31 d2                	xor    edx,edx
c001ca8e:	51                   	push   ecx
c001ca8f:	52                   	push   edx
c001ca90:	50                   	push   eax
c001ca91:	55                   	push   ebp
c001ca92:	e8 23 64 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001ca97:	83 c4 10             	add    esp,0x10
c001ca9a:	85 c0                	test   eax,eax
c001ca9c:	0f 85 49 06 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001caa2:	83 ec 0c             	sub    esp,0xc
c001caa5:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001caa8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001caac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cab0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cab4:	0f af c2             	imul   eax,edx
c001cab7:	50                   	push   eax
c001cab8:	e8 dc 2a ff ff       	call   c000f599 <malloc>
c001cabd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cac0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cacb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cacf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cad3:	0f af c2             	imul   eax,edx
c001cad6:	99                   	cdq    
c001cad7:	52                   	push   edx
c001cad8:	50                   	push   eax
c001cad9:	55                   	push   ebp
c001cada:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cadd:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cae0:	83 c4 20             	add    esp,0x20
c001cae3:	85 c0                	test   eax,eax
c001cae5:	0f 84 00 06 00 00    	je     c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001caeb:	52                   	push   edx
c001caec:	31 d2                	xor    edx,edx
c001caee:	52                   	push   edx
c001caef:	50                   	push   eax
c001caf0:	55                   	push   ebp
c001caf1:	e8 c4 63 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	85 c0                	test   eax,eax
c001cafb:	0f 85 ea 05 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb01:	83 ec 0c             	sub    esp,0xc
c001cb04:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb08:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb0c:	31 f6                	xor    esi,esi
c001cb0e:	0f af c2             	imul   eax,edx
c001cb11:	50                   	push   eax
c001cb12:	e8 82 2a ff ff       	call   c000f599 <malloc>
c001cb17:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb25:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb29:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb2d:	0f af c2             	imul   eax,edx
c001cb30:	99                   	cdq    
c001cb31:	52                   	push   edx
c001cb32:	50                   	push   eax
c001cb33:	55                   	push   ebp
c001cb34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb37:	83 c4 20             	add    esp,0x20
c001cb3a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cb3e:	0f 86 8a 00 00 00    	jbe    c001cbce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cb44:	0f b7 de             	movzx  ebx,si
c001cb47:	c1 e3 05             	shl    ebx,0x5
c001cb4a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cb4e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cb51:	75 75                	jne    c001cbc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cb53:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb56:	31 d2                	xor    edx,edx
c001cb58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb63:	50                   	push   eax
c001cb64:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cb67:	52                   	push   edx
c001cb68:	50                   	push   eax
c001cb69:	55                   	push   ebp
c001cb6a:	e8 4b 63 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	85 c0                	test   eax,eax
c001cb74:	0f 85 71 05 00 00    	jne    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cb7a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cb81:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb84:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cb88:	31 d2                	xor    edx,edx
c001cb8a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb95:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb9c:	50                   	push   eax
c001cb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cba5:	52                   	push   edx
c001cba6:	50                   	push   eax
c001cba7:	55                   	push   ebp
c001cba8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbab:	83 c4 1c             	add    esp,0x1c
c001cbae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbb1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cbb4:	50                   	push   eax
c001cbb5:	6a 00                	push   0x0
c001cbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cbbf:	50                   	push   eax
c001cbc0:	e8 8b 3b fe ff       	call   c0000750 <memset>
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	46                   	inc    esi
c001cbc9:	e9 6c ff ff ff       	jmp    c001cb3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cbce:	53                   	push   ebx
c001cbcf:	31 db                	xor    ebx,ebx
c001cbd1:	68 00 01 00 00       	push   0x100
c001cbd6:	6a 00                	push   0x0
c001cbd8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cbdc:	50                   	push   eax
c001cbdd:	e8 6e 3b fe ff       	call   c0000750 <memset>
c001cbe2:	83 c4 0c             	add    esp,0xc
c001cbe5:	68 00 01 00 00       	push   0x100
c001cbea:	6a 00                	push   0x0
c001cbec:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cbf3:	50                   	push   eax
c001cbf4:	e8 57 3b fe ff       	call   c0000750 <memset>
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc04:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc0c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cc14:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc1c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cc24:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cc28:	0f 86 30 01 00 00    	jbe    c001cd5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cc2e:	0f b7 f3             	movzx  esi,bx
c001cc31:	6b f6 28             	imul   esi,esi,0x28
c001cc34:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc38:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc3f:	52                   	push   edx
c001cc40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc44:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cc48:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc4a:	6b d2 28             	imul   edx,edx,0x28
c001cc4d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cc51:	31 d2                	xor    edx,edx
c001cc53:	52                   	push   edx
c001cc54:	50                   	push   eax
c001cc55:	55                   	push   ebp
c001cc56:	e8 5f 62 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001cc5b:	83 c4 0c             	add    esp,0xc
c001cc5e:	6a 20                	push   0x20
c001cc60:	6a 00                	push   0x0
c001cc62:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc69:	51                   	push   ecx
c001cc6a:	e8 e1 3a fe ff       	call   c0000750 <memset>
c001cc6f:	59                   	pop    ecx
c001cc70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc73:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cc77:	52                   	push   edx
c001cc78:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cc7f:	51                   	push   ecx
c001cc80:	6a 00                	push   0x0
c001cc82:	6a 1f                	push   0x1f
c001cc84:	55                   	push   ebp
c001cc85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc88:	83 c4 1c             	add    esp,0x1c
c001cc8b:	6a 09                	push   0x9
c001cc8d:	68 da bd 02 c0       	push   0xc002bdda
c001cc92:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc99:	51                   	push   ecx
c001cc9a:	e8 ad 39 fe ff       	call   c000064c <memcmp>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	85 c0                	test   eax,eax
c001cca4:	75 21                	jne    c001ccc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccae:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ccb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccb6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccb9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ccc0:	89 d0                	mov    eax,edx
c001ccc2:	40                   	inc    eax
c001ccc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccc7:	50                   	push   eax
c001ccc8:	6a 09                	push   0x9
c001ccca:	68 e4 bd 02 c0       	push   0xc002bde4
c001cccf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccd6:	50                   	push   eax
c001ccd7:	e8 70 39 fe ff       	call   c000064c <memcmp>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	85 c0                	test   eax,eax
c001cce1:	75 21                	jne    c001cd04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cce7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cceb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ccef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccf3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccf6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ccfd:	89 d0                	mov    eax,edx
c001ccff:	40                   	inc    eax
c001cd00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd04:	50                   	push   eax
c001cd05:	50                   	push   eax
c001cd06:	68 b0 bd 02 c0       	push   0xc002bdb0
c001cd0b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd12:	50                   	push   eax
c001cd13:	e8 80 3b fe ff       	call   c0000898 <strcmp>
c001cd18:	83 c4 10             	add    esp,0x10
c001cd1b:	85 c0                	test   eax,eax
c001cd1d:	75 0f                	jne    c001cd2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cd1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd2e:	50                   	push   eax
c001cd2f:	50                   	push   eax
c001cd30:	68 b8 bd 02 c0       	push   0xc002bdb8
c001cd35:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd3c:	50                   	push   eax
c001cd3d:	e8 56 3b fe ff       	call   c0000898 <strcmp>
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	85 c0                	test   eax,eax
c001cd47:	75 0f                	jne    c001cd58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cd49:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cd58:	43                   	inc    ebx
c001cd59:	e9 c6 fe ff ff       	jmp    c001cc24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cd5e:	31 d2                	xor    edx,edx
c001cd60:	50                   	push   eax
c001cd61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd65:	52                   	push   edx
c001cd66:	50                   	push   eax
c001cd67:	55                   	push   ebp
c001cd68:	e8 4d 61 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001cd6d:	58                   	pop    eax
c001cd6e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd72:	e8 22 28 ff ff       	call   c000f599 <malloc>
c001cd77:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cd7e:	31 d2                	xor    edx,edx
c001cd80:	58                   	pop    eax
c001cd81:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cd85:	53                   	push   ebx
c001cd86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cd8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	55                   	push   ebp
c001cd91:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd94:	83 c4 14             	add    esp,0x14
c001cd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd9b:	e8 f9 27 ff ff       	call   c000f599 <malloc>
c001cda0:	31 d2                	xor    edx,edx
c001cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cda6:	83 c4 0c             	add    esp,0xc
c001cda9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdad:	52                   	push   edx
c001cdae:	50                   	push   eax
c001cdaf:	55                   	push   ebp
c001cdb0:	e8 05 61 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001cdb5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdb8:	31 d2                	xor    edx,edx
c001cdba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cdc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cdc5:	52                   	push   edx
c001cdc6:	50                   	push   eax
c001cdc7:	55                   	push   ebp
c001cdc8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdcb:	83 c4 20             	add    esp,0x20
c001cdce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdd6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cdda:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cdde:	0f 84 0b 03 00 00    	je     c001d0ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cde4:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cdeb:	31 d2                	xor    edx,edx
c001cded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdf1:	c1 e8 03             	shr    eax,0x3
c001cdf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cdf8:	51                   	push   ecx
c001cdf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdfd:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ce01:	52                   	push   edx
c001ce02:	50                   	push   eax
c001ce03:	55                   	push   ebp
c001ce04:	e8 b1 60 ff ff       	call   c0012eba <File::seek(unsigned long long)>
c001ce09:	5b                   	pop    ebx
c001ce0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce0e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ce15:	e8 7f 27 ff ff       	call   c000f599 <malloc>
c001ce1a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce21:	31 d2                	xor    edx,edx
c001ce23:	5e                   	pop    esi
c001ce24:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ce28:	50                   	push   eax
c001ce29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce31:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ce38:	52                   	push   edx
c001ce39:	50                   	push   eax
c001ce3a:	55                   	push   ebp
c001ce3b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce3e:	83 c4 20             	add    esp,0x20
c001ce41:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce4d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ce51:	0f 8d 7c 02 00 00    	jge    c001d0d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001ce57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce5f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ce64:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ce67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce6f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ce73:	89 d8                	mov    eax,ebx
c001ce75:	c1 e8 08             	shr    eax,0x8
c001ce78:	89 c6                	mov    esi,eax
c001ce7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce7e:	c1 e6 04             	shl    esi,0x4
c001ce81:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ce85:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ce88:	85 d2                	test   edx,edx
c001ce8a:	0f 85 bf 00 00 00    	jne    c001cf4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce97:	03 06                	add    eax,DWORD PTR [esi]
c001ce99:	50                   	push   eax
c001ce9a:	e8 4b f8 ff ff       	call   c001c6ea <Thr::getAddressOfKernelSymbol(char const*)>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	89 c2                	mov    edx,eax
c001cea4:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cea9:	85 c0                	test   eax,eax
c001ceab:	0f 85 9e 00 00 00    	jne    c001cf4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ceb1:	83 ec 0c             	sub    esp,0xc
c001ceb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceb8:	03 06                	add    eax,DWORD PTR [esi]
c001ceba:	50                   	push   eax
c001cebb:	e8 7f 16 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cec0:	83 c4 10             	add    esp,0x10
c001cec3:	89 c2                	mov    edx,eax
c001cec5:	85 c0                	test   eax,eax
c001cec7:	0f 85 82 00 00 00    	jne    c001cf4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cecd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ced1:	50                   	push   eax
c001ced2:	50                   	push   eax
c001ced3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced7:	03 06                	add    eax,DWORD PTR [esi]
c001ced9:	50                   	push   eax
c001ceda:	68 ee bd 02 c0       	push   0xc002bdee
c001cedf:	e8 55 59 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001cee4:	58                   	pop    eax
c001cee5:	5a                   	pop    edx
c001cee6:	68 08 be 02 c0       	push   0xc002be08
c001ceeb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cef2:	50                   	push   eax
c001cef3:	e8 14 39 fe ff       	call   c000080c <strcpy>
c001cef8:	59                   	pop    ecx
c001cef9:	58                   	pop    eax
c001cefa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefe:	03 06                	add    eax,DWORD PTR [esi]
c001cf00:	50                   	push   eax
c001cf01:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf08:	50                   	push   eax
c001cf09:	e8 3e 3a fe ff       	call   c000094c <strcat>
c001cf0e:	58                   	pop    eax
c001cf0f:	5a                   	pop    edx
c001cf10:	68 9e be 02 c0       	push   0xc002be9e
c001cf15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf1c:	50                   	push   eax
c001cf1d:	e8 2a 3a fe ff       	call   c000094c <strcat>
c001cf22:	83 c4 10             	add    esp,0x10
c001cf25:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf2a:	0f 84 5d 01 00 00    	je     c001d08d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf3a:	50                   	push   eax
c001cf3b:	e8 a3 d0 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cf47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf4b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cf4f:	80 fb 01             	cmp    bl,0x1
c001cf52:	0f 85 88 00 00 00    	jne    c001cfe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cf58:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cf5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf63:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cf67:	01 ce                	add    esi,ecx
c001cf69:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf6f:	0f 94 c0             	sete   al
c001cf72:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf78:	0f 94 c3             	sete   bl
c001cf7b:	09 c3                	or     ebx,eax
c001cf7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf7f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf84:	74 41                	je     c001cfc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cf86:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cf89:	84 db                	test   bl,bl
c001cf8b:	75 15                	jne    c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cf8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf91:	66 83 f8 0c          	cmp    ax,0xc
c001cf95:	76 05                	jbe    c001cf9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cf97:	b8 0c 00 00 00       	mov    eax,0xc
c001cf9c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cfa0:	76 37                	jbe    c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cfa2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cfa6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cfab:	0f 84 dc 00 00 00    	je     c001d08d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cfb1:	83 ec 0c             	sub    esp,0xc
c001cfb4:	68 1f be 02 c0       	push   0xc002be1f
c001cfb9:	e8 25 d0 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001cfbe:	83 c4 10             	add    esp,0x10
c001cfc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cfc5:	eb 12                	jmp    c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cfc7:	01 c1                	add    ecx,eax
c001cfc9:	84 db                	test   bl,bl
c001cfcb:	75 0c                	jne    c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cfcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfd1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cfd5:	77 02                	ja     c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cfd7:	01 d1                	add    ecx,edx
c001cfd9:	89 0e                	mov    DWORD PTR [esi],ecx
c001cfdb:	e9 ea 00 00 00       	jmp    c001d0ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cfe0:	80 fb 02             	cmp    bl,0x2
c001cfe3:	75 7c                	jne    c001d061 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cfe5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cfec:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cff0:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cff4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cffa:	74 20                	je     c001d01c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cffc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d002:	74 18                	je     c001d01c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d004:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d008:	b9 0a 00 00 00       	mov    ecx,0xa
c001d00d:	66 83 f8 0e          	cmp    ax,0xe
c001d011:	77 03                	ja     c001d016 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d013:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d016:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d01a:	76 1f                	jbe    c001d03b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d01c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d020:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d025:	74 66                	je     c001d08d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d027:	83 ec 0c             	sub    esp,0xc
c001d02a:	68 3b be 02 c0       	push   0xc002be3b
c001d02f:	e8 af cf ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d034:	83 c4 10             	add    esp,0x10
c001d037:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d03b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d03d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d042:	74 13                	je     c001d057 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d044:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d048:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d04f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d053:	01 c8                	add    eax,ecx
c001d055:	eb 04                	jmp    c001d05b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d057:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d05b:	01 c2                	add    edx,eax
c001d05d:	89 16                	mov    DWORD PTR [esi],edx
c001d05f:	eb 69                	jmp    c001d0ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d061:	0f b6 db             	movzx  ebx,bl
c001d064:	50                   	push   eax
c001d065:	50                   	push   eax
c001d066:	53                   	push   ebx
c001d067:	68 57 be 02 c0       	push   0xc002be57
c001d06c:	e8 c8 57 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d079:	74 12                	je     c001d08d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d07b:	83 ec 0c             	sub    esp,0xc
c001d07e:	68 62 be 02 c0       	push   0xc002be62
c001d083:	e8 5b cf ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d088:	83 c4 10             	add    esp,0x10
c001d08b:	eb 3d                	jmp    c001d0ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d08d:	83 ec 0c             	sub    esp,0xc
c001d090:	55                   	push   ebp
c001d091:	e8 c4 5d ff ff       	call   c0012e5a <File::close()>
c001d096:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d099:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d09c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d09f:	59                   	pop    ecx
c001d0a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0a4:	e8 00 25 ff ff       	call   c000f5a9 <free>
c001d0a9:	5b                   	pop    ebx
c001d0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0ae:	e8 f6 24 ff ff       	call   c000f5a9 <free>
c001d0b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0b6:	e8 ee 24 ff ff       	call   c000f5a9 <free>
c001d0bb:	5e                   	pop    esi
c001d0bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c0:	e8 e4 24 ff ff       	call   c000f5a9 <free>
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	eb 21                	jmp    c001d0eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0ca:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d0ce:	e9 76 fd ff ff       	jmp    c001ce49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d0d3:	83 ec 0c             	sub    esp,0xc
c001d0d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0da:	e8 ca 24 ff ff       	call   c000f5a9 <free>
c001d0df:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d0e3:	83 c4 10             	add    esp,0x10
c001d0e6:	e9 eb fc ff ff       	jmp    c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d0eb:	31 c0                	xor    eax,eax
c001d0ed:	eb 33                	jmp    c001d122 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d0ef:	83 ec 0c             	sub    esp,0xc
c001d0f2:	55                   	push   ebp
c001d0f3:	e8 62 5d ff ff       	call   c0012e5a <File::close()>
c001d0f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d101:	58                   	pop    eax
c001d102:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d106:	e8 9e 24 ff ff       	call   c000f5a9 <free>
c001d10b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d10e:	e8 96 24 ff ff       	call   c000f5a9 <free>
c001d113:	5a                   	pop    edx
c001d114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d118:	e8 8c 24 ff ff       	call   c000f5a9 <free>
c001d11d:	83 c4 10             	add    esp,0x10
c001d120:	b0 01                	mov    al,0x1
c001d122:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d128:	5b                   	pop    ebx
c001d129:	5e                   	pop    esi
c001d12a:	5f                   	pop    edi
c001d12b:	5d                   	pop    ebp
c001d12c:	c3                   	ret    

c001d12d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d12d:	56                   	push   esi
c001d12e:	31 d2                	xor    edx,edx
c001d130:	53                   	push   ebx
c001d131:	8b 1d c0 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ac0
c001d137:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d13b:	39 d3                	cmp    ebx,edx
c001d13d:	7e 1b                	jle    c001d15a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d13f:	8b 04 95 e0 0c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf320]
c001d146:	39 c8                	cmp    eax,ecx
c001d148:	77 0d                	ja     c001d157 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d14a:	8b 34 95 e0 0a 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf520]
c001d151:	01 c6                	add    esi,eax
c001d153:	39 ce                	cmp    esi,ecx
c001d155:	77 05                	ja     c001d15c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d157:	42                   	inc    edx
c001d158:	eb e1                	jmp    c001d13b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d15a:	31 c0                	xor    eax,eax
c001d15c:	5b                   	pop    ebx
c001d15d:	5e                   	pop    esi
c001d15e:	c3                   	ret    

c001d15f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d15f:	53                   	push   ebx
c001d160:	31 c0                	xor    eax,eax
c001d162:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d166:	8b 1d c0 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ac0
c001d16c:	39 c3                	cmp    ebx,eax
c001d16e:	7e 22                	jle    c001d192 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d170:	8b 14 85 e0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf320]
c001d177:	39 ca                	cmp    edx,ecx
c001d179:	77 14                	ja     c001d18f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d17b:	03 14 85 e0 0a 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf520]
c001d182:	39 ca                	cmp    edx,ecx
c001d184:	76 09                	jbe    c001d18f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d186:	8b 04 85 e0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf120]
c001d18d:	eb 05                	jmp    c001d194 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d18f:	40                   	inc    eax
c001d190:	eb da                	jmp    c001d16c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d192:	31 c0                	xor    eax,eax
c001d194:	5b                   	pop    ebx
c001d195:	c3                   	ret    

c001d196 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d196:	53                   	push   ebx
c001d197:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d19b:	53                   	push   ebx
c001d19c:	e8 8c ff ff ff       	call   c001d12d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d1a1:	5a                   	pop    edx
c001d1a2:	31 d2                	xor    edx,edx
c001d1a4:	85 c0                	test   eax,eax
c001d1a6:	74 04                	je     c001d1ac <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d1a8:	89 da                	mov    edx,ebx
c001d1aa:	29 c2                	sub    edx,eax
c001d1ac:	89 d0                	mov    eax,edx
c001d1ae:	5b                   	pop    ebx
c001d1af:	c3                   	ret    

c001d1b0 <Thr::loadDLL(char const*, bool)>:
c001d1b0:	55                   	push   ebp
c001d1b1:	57                   	push   edi
c001d1b2:	56                   	push   esi
c001d1b3:	53                   	push   ebx
c001d1b4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d1ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d1c1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d1c8:	56                   	push   esi
c001d1c9:	68 7a be 02 c0       	push   0xc002be7a
c001d1ce:	e8 66 56 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001d1d3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d1da:	e8 ba 23 ff ff       	call   c000f599 <malloc>
c001d1df:	83 c4 0c             	add    esp,0xc
c001d1e2:	89 c3                	mov    ebx,eax
c001d1e4:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c001d1ea:	56                   	push   esi
c001d1eb:	50                   	push   eax
c001d1ec:	e8 a7 5b ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	85 db                	test   ebx,ebx
c001d1f6:	75 3c                	jne    c001d234 <Thr::loadDLL(char const*, bool)+0x84>
c001d1f8:	89 f8                	mov    eax,edi
c001d1fa:	84 c0                	test   al,al
c001d1fc:	0f 84 d2 01 00 00    	je     c001d3d4 <Thr::loadDLL(char const*, bool)+0x224>
c001d202:	55                   	push   ebp
c001d203:	55                   	push   ebp
c001d204:	68 8b be 02 c0       	push   0xc002be8b
c001d209:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d20d:	55                   	push   ebp
c001d20e:	e8 f9 35 fe ff       	call   c000080c <strcpy>
c001d213:	58                   	pop    eax
c001d214:	5a                   	pop    edx
c001d215:	56                   	push   esi
c001d216:	55                   	push   ebp
c001d217:	e8 30 37 fe ff       	call   c000094c <strcat>
c001d21c:	59                   	pop    ecx
c001d21d:	58                   	pop    eax
c001d21e:	68 9e be 02 c0       	push   0xc002be9e
c001d223:	55                   	push   ebp
c001d224:	e8 23 37 fe ff       	call   c000094c <strcat>
c001d229:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d22c:	e8 b2 cd ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	51                   	push   ecx
c001d235:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d239:	50                   	push   eax
c001d23a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d23e:	50                   	push   eax
c001d23f:	53                   	push   ebx
c001d240:	e8 63 5e ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	85 db                	test   ebx,ebx
c001d24a:	74 0c                	je     c001d258 <Thr::loadDLL(char const*, bool)+0xa8>
c001d24c:	83 ec 0c             	sub    esp,0xc
c001d24f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d251:	53                   	push   ebx
c001d252:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d255:	83 c4 10             	add    esp,0x10
c001d258:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d25d:	75 0a                	jne    c001d269 <Thr::loadDLL(char const*, bool)+0xb9>
c001d25f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d263:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d267:	75 3c                	jne    c001d2a5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d269:	89 f8                	mov    eax,edi
c001d26b:	84 c0                	test   al,al
c001d26d:	0f 84 49 01 00 00    	je     c001d3bc <Thr::loadDLL(char const*, bool)+0x20c>
c001d273:	51                   	push   ecx
c001d274:	51                   	push   ecx
c001d275:	68 8b be 02 c0       	push   0xc002be8b
c001d27a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d27e:	53                   	push   ebx
c001d27f:	e8 88 35 fe ff       	call   c000080c <strcpy>
c001d284:	5d                   	pop    ebp
c001d285:	58                   	pop    eax
c001d286:	56                   	push   esi
c001d287:	53                   	push   ebx
c001d288:	e8 bf 36 fe ff       	call   c000094c <strcat>
c001d28d:	58                   	pop    eax
c001d28e:	5a                   	pop    edx
c001d28f:	68 9e be 02 c0       	push   0xc002be9e
c001d294:	53                   	push   ebx
c001d295:	e8 b2 36 fe ff       	call   c000094c <strcat>
c001d29a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d29d:	e8 41 cd ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	52                   	push   edx
c001d2a6:	6a 03                	push   0x3
c001d2a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d2b0:	05 ff 0f 00 00       	add    eax,0xfff
c001d2b5:	83 d2 00             	adc    edx,0x0
c001d2b8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d2bc:	50                   	push   eax
c001d2bd:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c001d2c3:	e8 ac 48 ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001d2c8:	59                   	pop    ecx
c001d2c9:	89 c3                	mov    ebx,eax
c001d2cb:	5d                   	pop    ebp
c001d2cc:	50                   	push   eax
c001d2cd:	68 d1 a2 02 c0       	push   0xc002a2d1
c001d2d2:	e8 62 55 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001d2d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001d2da:	e8 8d 34 fe ff       	call   c000076c <strlen>
c001d2df:	8b 2d c0 0a 03 c0    	mov    ebp,DWORD PTR ds:0xc0030ac0
c001d2e5:	40                   	inc    eax
c001d2e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2e9:	e8 ab 22 ff ff       	call   c000f599 <malloc>
c001d2ee:	89 04 ad e0 0e 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf120],eax
c001d2f5:	58                   	pop    eax
c001d2f6:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001d2fb:	5a                   	pop    edx
c001d2fc:	56                   	push   esi
c001d2fd:	ff 34 85 e0 0e 03 c0 	push   DWORD PTR [eax*4-0x3ffcf120]
c001d304:	e8 03 35 fe ff       	call   c000080c <strcpy>
c001d309:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001d30e:	8d 50 01             	lea    edx,[eax+0x1]
c001d311:	89 1c 85 e0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf320],ebx
c001d318:	89 15 c0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac0,edx
c001d31e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d322:	83 c4 0c             	add    esp,0xc
c001d325:	89 14 85 e0 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf520],edx
c001d32c:	6a 01                	push   0x1
c001d32e:	53                   	push   ebx
c001d32f:	56                   	push   esi
c001d330:	e8 c2 f6 ff ff       	call   c001c9f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d335:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d339:	83 c4 10             	add    esp,0x10
c001d33c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d341:	0f 85 89 00 00 00    	jne    c001d3d0 <Thr::loadDLL(char const*, bool)+0x220>
c001d347:	89 f8                	mov    eax,edi
c001d349:	84 c0                	test   al,al
c001d34b:	74 73                	je     c001d3c0 <Thr::loadDLL(char const*, bool)+0x210>
c001d34d:	83 ec 0c             	sub    esp,0xc
c001d350:	68 a0 be 02 c0       	push   0xc002bea0
c001d355:	e8 89 cc ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d35a:	83 c4 10             	add    esp,0x10
c001d35d:	eb 61                	jmp    c001d3c0 <Thr::loadDLL(char const*, bool)+0x210>
c001d35f:	50                   	push   eax
c001d360:	50                   	push   eax
c001d361:	89 e8                	mov    eax,ebp
c001d363:	c1 e0 0c             	shl    eax,0xc
c001d366:	01 d8                	add    eax,ebx
c001d368:	50                   	push   eax
c001d369:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c001d36f:	e8 68 43 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001d374:	83 c4 10             	add    esp,0x10
c001d377:	8b 00                	mov    eax,DWORD PTR [eax]
c001d379:	a8 60                	test   al,0x60
c001d37b:	75 11                	jne    c001d38e <Thr::loadDLL(char const*, bool)+0x1de>
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d385:	50                   	push   eax
c001d386:	e8 99 25 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d38b:	83 c4 10             	add    esp,0x10
c001d38e:	45                   	inc    ebp
c001d38f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d393:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d397:	05 ff 0f 00 00       	add    eax,0xfff
c001d39c:	bf 00 00 00 00       	mov    edi,0x0
c001d3a1:	83 d2 00             	adc    edx,0x0
c001d3a4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d3a8:	c1 ea 0c             	shr    edx,0xc
c001d3ab:	39 c5                	cmp    ebp,eax
c001d3ad:	89 d1                	mov    ecx,edx
c001d3af:	89 f8                	mov    eax,edi
c001d3b1:	19 c8                	sbb    eax,ecx
c001d3b3:	72 aa                	jb     c001d35f <Thr::loadDLL(char const*, bool)+0x1af>
c001d3b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d3ba:	75 18                	jne    c001d3d4 <Thr::loadDLL(char const*, bool)+0x224>
c001d3bc:	31 db                	xor    ebx,ebx
c001d3be:	eb 14                	jmp    c001d3d4 <Thr::loadDLL(char const*, bool)+0x224>
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	68 bf be 02 c0       	push   0xc002bebf
c001d3c8:	e8 16 cc ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d3cd:	83 c4 10             	add    esp,0x10
c001d3d0:	31 ed                	xor    ebp,ebp
c001d3d2:	eb bb                	jmp    c001d38f <Thr::loadDLL(char const*, bool)+0x1df>
c001d3d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d3da:	89 d8                	mov    eax,ebx
c001d3dc:	5b                   	pop    ebx
c001d3dd:	5e                   	pop    esi
c001d3de:	5f                   	pop    edi
c001d3df:	5d                   	pop    ebp
c001d3e0:	c3                   	ret    

c001d3e1 <Thr::executeDLL(unsigned long, void*)>:
c001d3e1:	56                   	push   esi
c001d3e2:	53                   	push   ebx
c001d3e3:	52                   	push   edx
c001d3e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d3ec:	85 db                	test   ebx,ebx
c001d3ee:	75 10                	jne    c001d400 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d3f0:	83 ec 0c             	sub    esp,0xc
c001d3f3:	68 db be 02 c0       	push   0xc002bedb
c001d3f8:	e8 e6 cb ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	50                   	push   eax
c001d401:	50                   	push   eax
c001d402:	53                   	push   ebx
c001d403:	68 05 bf 02 c0       	push   0xc002bf05
c001d408:	e8 2c 54 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001d40d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d411:	89 d8                	mov    eax,ebx
c001d413:	83 c4 14             	add    esp,0x14
c001d416:	5b                   	pop    ebx
c001d417:	5e                   	pop    esi
c001d418:	ff e0                	jmp    eax

c001d41a <userModeEntryPoint(void*)>:
c001d41a:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001d41f:	48                   	dec    eax
c001d420:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001d425:	75 01                	jne    c001d428 <userModeEntryPoint(void*)+0xe>
c001d427:	fb                   	sti    
c001d428:	fb                   	sti    
c001d429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d42e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d431:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d437:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d43b:	e9 ea 2e fe ff       	jmp    c000032a <goToUsermode>

c001d440 <changeTSS>:
c001d440:	83 ec 14             	sub    esp,0x14
c001d443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d448:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d44b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d450:	c1 e2 15             	shl    edx,0x15
c001d453:	29 d0                	sub    eax,edx
c001d455:	50                   	push   eax
c001d456:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001d45b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d461:	05 7c 11 00 00       	add    eax,0x117c
c001d466:	50                   	push   eax
c001d467:	e8 08 37 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d46c:	83 c4 1c             	add    esp,0x1c
c001d46f:	c3                   	ret    

c001d470 <switchToThread(ThreadControlBlock*)>:
c001d470:	57                   	push   edi
c001d471:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001d476:	56                   	push   esi
c001d477:	85 c0                	test   eax,eax
c001d479:	53                   	push   ebx
c001d47a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d47e:	0f 85 88 00 00 00    	jne    c001d50c <switchToThread(ThreadControlBlock*)+0x9c>
c001d484:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d487:	3c ff                	cmp    al,0xff
c001d489:	74 7d                	je     c001d508 <switchToThread(ThreadControlBlock*)+0x98>
c001d48b:	0f b6 d0             	movzx  edx,al
c001d48e:	b8 84 03 00 00       	mov    eax,0x384
c001d493:	29 d0                	sub    eax,edx
c001d495:	c1 e0 10             	shl    eax,0x10
c001d498:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d49b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d49e:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001d4a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d4a9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d4b0:	74 4a                	je     c001d4fc <switchToThread(ThreadControlBlock*)+0x8c>
c001d4b2:	0f 31                	rdtsc  
c001d4b4:	a3 c8 12 03 c0       	mov    ds:0xc00312c8,eax
c001d4b9:	89 c6                	mov    esi,eax
c001d4bb:	89 d7                	mov    edi,edx
c001d4bd:	2b 35 b8 12 03 c0    	sub    esi,DWORD PTR ds:0xc00312b8
c001d4c3:	89 15 cc 12 03 c0    	mov    DWORD PTR ds:0xc00312cc,edx
c001d4c9:	1b 3d bc 12 03 c0    	sbb    edi,DWORD PTR ds:0xc00312bc
c001d4cf:	89 35 c0 12 03 c0    	mov    DWORD PTR ds:0xc00312c0,esi
c001d4d5:	a3 b8 12 03 c0       	mov    ds:0xc00312b8,eax
c001d4da:	89 3d c4 12 03 c0    	mov    DWORD PTR ds:0xc00312c4,edi
c001d4e0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d4e6:	89 15 bc 12 03 c0    	mov    DWORD PTR ds:0xc00312bc,edx
c001d4ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4ef:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d4f2:	01 c6                	add    esi,eax
c001d4f4:	11 d7                	adc    edi,edx
c001d4f6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d4f9:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d4fc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d500:	5b                   	pop    ebx
c001d501:	5e                   	pop    esi
c001d502:	5f                   	pop    edi
c001d503:	e9 5a 2e fe ff       	jmp    c0000362 <switchToThreadASM>
c001d508:	31 c0                	xor    eax,eax
c001d50a:	eb 8f                	jmp    c001d49b <switchToThread(ThreadControlBlock*)+0x2b>
c001d50c:	5b                   	pop    ebx
c001d50d:	c7 05 80 12 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x1
c001d517:	5e                   	pop    esi
c001d518:	5f                   	pop    edi
c001d519:	c3                   	ret    

c001d51a <Process::addArgs(char**)>:
c001d51a:	57                   	push   edi
c001d51b:	56                   	push   esi
c001d51c:	53                   	push   ebx
c001d51d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d521:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d525:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d52f:	85 ff                	test   edi,edi
c001d531:	74 3d                	je     c001d570 <Process::addArgs(char**)+0x56>
c001d533:	8b 07                	mov    eax,DWORD PTR [edi]
c001d535:	85 c0                	test   eax,eax
c001d537:	74 37                	je     c001d570 <Process::addArgs(char**)+0x56>
c001d539:	31 db                	xor    ebx,ebx
c001d53b:	83 ec 0c             	sub    esp,0xc
c001d53e:	50                   	push   eax
c001d53f:	e8 28 32 fe ff       	call   c000076c <strlen>
c001d544:	40                   	inc    eax
c001d545:	89 04 24             	mov    DWORD PTR [esp],eax
c001d548:	e8 4c 20 ff ff       	call   c000f599 <malloc>
c001d54d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d554:	5a                   	pop    edx
c001d555:	59                   	pop    ecx
c001d556:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d559:	43                   	inc    ebx
c001d55a:	50                   	push   eax
c001d55b:	e8 ac 32 fe ff       	call   c000080c <strcpy>
c001d560:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d56c:	85 c0                	test   eax,eax
c001d56e:	75 cb                	jne    c001d53b <Process::addArgs(char**)+0x21>
c001d570:	5b                   	pop    ebx
c001d571:	5e                   	pop    esi
c001d572:	5f                   	pop    edi
c001d573:	c3                   	ret    

c001d574 <Process::Process(char const*, Process*, char**)>:
c001d574:	56                   	push   esi
c001d575:	53                   	push   ebx
c001d576:	83 ec 14             	sub    esp,0x14
c001d579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57d:	05 0c 02 00 00       	add    eax,0x20c
c001d582:	bb 07 00 00 00       	mov    ebx,0x7
c001d587:	89 c6                	mov    esi,eax
c001d589:	85 db                	test   ebx,ebx
c001d58b:	78 12                	js     c001d59f <Process::Process(char const*, Process*, char**)+0x2b>
c001d58d:	83 ec 0c             	sub    esp,0xc
c001d590:	56                   	push   esi
c001d591:	e8 20 b7 00 00       	call   c0028cb6 <ThreadControlBlock::ThreadControlBlock()>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	83 c6 63             	add    esi,0x63
c001d59c:	4b                   	dec    ebx
c001d59d:	eb ea                	jmp    c001d589 <Process::Process(char const*, Process*, char**)+0x15>
c001d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5aa:	83 ec 0c             	sub    esp,0xc
c001d5ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5b1:	e8 b6 c8 ff ff       	call   c0019e6c <Krnl::newProcessEnv(Process*)>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	89 c2                	mov    edx,eax
c001d5bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5bf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d5d2:	a1 f0 d2 02 c0       	mov    eax,ds:0xc002d2f0
c001d5d7:	8d 50 01             	lea    edx,[eax+0x1]
c001d5da:	89 15 f0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2f0,edx
c001d5e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5e4:	89 02                	mov    DWORD PTR [edx],eax
c001d5e6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d5ee:	83 ec 0c             	sub    esp,0xc
c001d5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5f5:	e8 9f 1f ff ff       	call   c000f599 <malloc>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	89 c3                	mov    ebx,eax
c001d5ff:	83 ec 08             	sub    esp,0x8
c001d602:	6a 00                	push   0x0
c001d604:	53                   	push   ebx
c001d605:	e8 12 49 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d60a:	83 c4 10             	add    esp,0x10
c001d60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d611:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d61b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d629:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d62d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d637:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d63d:	85 c0                	test   eax,eax
c001d63f:	74 42                	je     c001d683 <Process::Process(char const*, Process*, char**)+0x10f>
c001d641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d645:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d64b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d655:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d65b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d65f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d665:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d66f:	05 0c 01 00 00       	add    eax,0x10c
c001d674:	83 ec 08             	sub    esp,0x8
c001d677:	52                   	push   edx
c001d678:	50                   	push   eax
c001d679:	e8 8e 31 fe ff       	call   c000080c <strcpy>
c001d67e:	83 c4 10             	add    esp,0x10
c001d681:	eb 63                	jmp    c001d6e6 <Process::Process(char const*, Process*, char**)+0x172>
c001d683:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d68b:	83 ec 0c             	sub    esp,0xc
c001d68e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d692:	e8 02 1f ff ff       	call   c000f599 <malloc>
c001d697:	83 c4 10             	add    esp,0x10
c001d69a:	89 c3                	mov    ebx,eax
c001d69c:	83 ec 08             	sub    esp,0x8
c001d69f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6a3:	53                   	push   ebx
c001d6a4:	e8 dd 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6c0:	83 ec 0c             	sub    esp,0xc
c001d6c3:	50                   	push   eax
c001d6c4:	e8 7c 29 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6d0:	05 0c 01 00 00       	add    eax,0x10c
c001d6d5:	83 ec 08             	sub    esp,0x8
c001d6d8:	68 24 bf 02 c0       	push   0xc002bf24
c001d6dd:	50                   	push   eax
c001d6de:	e8 29 31 fe ff       	call   c000080c <strcpy>
c001d6e3:	83 c4 10             	add    esp,0x10
c001d6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ea:	83 c0 0c             	add    eax,0xc
c001d6ed:	83 ec 08             	sub    esp,0x8
c001d6f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6f4:	50                   	push   eax
c001d6f5:	e8 12 31 fe ff       	call   c000080c <strcpy>
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	83 ec 08             	sub    esp,0x8
c001d700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d704:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d708:	e8 0d fe ff ff       	call   c001d51a <Process::addArgs(char**)>
c001d70d:	83 c4 10             	add    esp,0x10
c001d710:	83 ec 08             	sub    esp,0x8
c001d713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d717:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d71b:	e8 a1 ed ff ff       	call   c001c4c1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d720:	83 c4 10             	add    esp,0x10
c001d723:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d727:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d72b:	83 f0 01             	xor    eax,0x1
c001d72e:	88 c2                	mov    dl,al
c001d730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d734:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d73a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d73f:	83 ec 08             	sub    esp,0x8
c001d742:	50                   	push   eax
c001d743:	68 7c bf 02 c0       	push   0xc002bf7c
c001d748:	e8 ec 50 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001d74d:	83 c4 10             	add    esp,0x10
c001d750:	90                   	nop
c001d751:	83 c4 14             	add    esp,0x14
c001d754:	5b                   	pop    ebx
c001d755:	5e                   	pop    esi
c001d756:	c3                   	ret    
c001d757:	90                   	nop

c001d758 <Process::Process(bool, char const*, Process*, char**)>:
c001d758:	56                   	push   esi
c001d759:	53                   	push   ebx
c001d75a:	83 ec 24             	sub    esp,0x24
c001d75d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d761:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d769:	05 0c 02 00 00       	add    eax,0x20c
c001d76e:	bb 07 00 00 00       	mov    ebx,0x7
c001d773:	89 c6                	mov    esi,eax
c001d775:	85 db                	test   ebx,ebx
c001d777:	78 12                	js     c001d78b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	56                   	push   esi
c001d77d:	e8 34 b5 00 00       	call   c0028cb6 <ThreadControlBlock::ThreadControlBlock()>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	83 c6 63             	add    esi,0x63
c001d788:	4b                   	dec    ebx
c001d789:	eb ea                	jmp    c001d775 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d78b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d78f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d796:	83 ec 0c             	sub    esp,0xc
c001d799:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d79d:	e8 ca c6 ff ff       	call   c0019e6c <Krnl::newProcessEnv(Process*)>
c001d7a2:	83 c4 10             	add    esp,0x10
c001d7a5:	89 c2                	mov    edx,eax
c001d7a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7ab:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7b5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d7be:	a1 f0 d2 02 c0       	mov    eax,ds:0xc002d2f0
c001d7c3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7c6:	89 15 f0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2f0,edx
c001d7cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d7d0:	89 02                	mov    DWORD PTR [edx],eax
c001d7d2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d7da:	83 ec 0c             	sub    esp,0xc
c001d7dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d7e1:	e8 b3 1d ff ff       	call   c000f599 <malloc>
c001d7e6:	83 c4 10             	add    esp,0x10
c001d7e9:	89 c3                	mov    ebx,eax
c001d7eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d7f0:	83 ec 08             	sub    esp,0x8
c001d7f3:	50                   	push   eax
c001d7f4:	53                   	push   ebx
c001d7f5:	e8 22 47 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d7fa:	83 c4 10             	add    esp,0x10
c001d7fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d801:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d807:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d80b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d815:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d819:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d81d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d823:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d827:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d82d:	85 c0                	test   eax,eax
c001d82f:	74 42                	je     c001d873 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d835:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d83b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d841:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d845:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d84b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d84f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d855:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d85b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d85f:	05 0c 01 00 00       	add    eax,0x10c
c001d864:	83 ec 08             	sub    esp,0x8
c001d867:	52                   	push   edx
c001d868:	50                   	push   eax
c001d869:	e8 9e 2f fe ff       	call   c000080c <strcpy>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	eb 63                	jmp    c001d8d6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d873:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d87b:	83 ec 0c             	sub    esp,0xc
c001d87e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d882:	e8 12 1d ff ff       	call   c000f599 <malloc>
c001d887:	83 c4 10             	add    esp,0x10
c001d88a:	89 c3                	mov    ebx,eax
c001d88c:	83 ec 08             	sub    esp,0x8
c001d88f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d893:	53                   	push   ebx
c001d894:	e8 ed 2f ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8a0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d8b0:	83 ec 0c             	sub    esp,0xc
c001d8b3:	50                   	push   eax
c001d8b4:	e8 8c 27 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8c0:	05 0c 01 00 00       	add    eax,0x10c
c001d8c5:	83 ec 08             	sub    esp,0x8
c001d8c8:	68 24 bf 02 c0       	push   0xc002bf24
c001d8cd:	50                   	push   eax
c001d8ce:	e8 39 2f fe ff       	call   c000080c <strcpy>
c001d8d3:	83 c4 10             	add    esp,0x10
c001d8d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8da:	83 c0 0c             	add    eax,0xc
c001d8dd:	83 ec 08             	sub    esp,0x8
c001d8e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d8e4:	50                   	push   eax
c001d8e5:	e8 22 2f fe ff       	call   c000080c <strcpy>
c001d8ea:	83 c4 10             	add    esp,0x10
c001d8ed:	83 ec 08             	sub    esp,0x8
c001d8f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d8f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8f8:	e8 1d fc ff ff       	call   c001d51a <Process::addArgs(char**)>
c001d8fd:	83 c4 10             	add    esp,0x10
c001d900:	90                   	nop
c001d901:	83 c4 24             	add    esp,0x24
c001d904:	5b                   	pop    ebx
c001d905:	5e                   	pop    esi
c001d906:	c3                   	ret    

c001d907 <taskStartupFunction>:
c001d907:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d90c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d90f:	c3                   	ret    

c001d910 <Semaphore::Semaphore(int)>:
c001d910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d918:	89 10                	mov    DWORD PTR [eax],edx
c001d91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d91e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d929:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d934:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d93b:	90                   	nop
c001d93c:	c3                   	ret    
c001d93d:	90                   	nop

c001d93e <Mutex::Mutex()>:
c001d93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d942:	6a 01                	push   0x1
c001d944:	50                   	push   eax
c001d945:	e8 c6 ff ff ff       	call   c001d910 <Semaphore::Semaphore(int)>
c001d94a:	83 c4 08             	add    esp,0x8
c001d94d:	90                   	nop
c001d94e:	c3                   	ret    
c001d94f:	90                   	nop

c001d950 <Process::createThread(void (*)(void*), void*, int)>:
c001d950:	55                   	push   ebp
c001d951:	31 c9                	xor    ecx,ecx
c001d953:	57                   	push   edi
c001d954:	56                   	push   esi
c001d955:	53                   	push   ebx
c001d956:	83 ec 1c             	sub    esp,0x1c
c001d959:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d95d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d964:	89 f2                	mov    edx,esi
c001d966:	0f b7 c2             	movzx  eax,dx
c001d969:	83 e2 01             	and    edx,0x1
c001d96c:	74 16                	je     c001d984 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d96e:	d1 f8                	sar    eax,1
c001d970:	41                   	inc    ecx
c001d971:	89 c2                	mov    edx,eax
c001d973:	83 f9 10             	cmp    ecx,0x10
c001d976:	75 ee                	jne    c001d966 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d978:	83 c4 1c             	add    esp,0x1c
c001d97b:	31 db                	xor    ebx,ebx
c001d97d:	89 d8                	mov    eax,ebx
c001d97f:	5b                   	pop    ebx
c001d980:	5e                   	pop    esi
c001d981:	5f                   	pop    edi
c001d982:	5d                   	pop    ebp
c001d983:	c3                   	ret    
c001d984:	b8 01 00 00 00       	mov    eax,0x1
c001d989:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d98c:	d3 e0                	shl    eax,cl
c001d98e:	09 c6                	or     esi,eax
c001d990:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d993:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d99a:	89 c6                	mov    esi,eax
c001d99c:	c1 e6 05             	shl    esi,0x5
c001d99f:	01 f0                	add    eax,esi
c001d9a1:	01 d8                	add    eax,ebx
c001d9a3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d9aa:	75 0a                	jne    c001d9b6 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d9ac:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d9b6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d9bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d9c0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d9c3:	01 ca                	add    edx,ecx
c001d9c5:	83 ec 08             	sub    esp,0x8
c001d9c8:	89 d0                	mov    eax,edx
c001d9ca:	c1 e0 05             	shl    eax,0x5
c001d9cd:	01 d0                	add    eax,edx
c001d9cf:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d9d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d9d7:	01 d8                	add    eax,ebx
c001d9d9:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d9df:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d9e5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d9eb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d9f1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d9f7:	89 cd                	mov    ebp,ecx
c001d9f9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d9fd:	f7 dd                	neg    ebp
c001d9ff:	c1 e5 15             	shl    ebp,0x15
c001da02:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001da08:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001da0e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001da18:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001da1e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001da28:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001da32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da36:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001da3d:	53                   	push   ebx
c001da3e:	68 a4 12 03 c0       	push   0xc00312a4
c001da43:	e8 28 b0 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da48:	89 d8                	mov    eax,ebx
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	83 c4 1c             	add    esp,0x1c
c001da50:	5b                   	pop    ebx
c001da51:	5e                   	pop    esi
c001da52:	5f                   	pop    edi
c001da53:	5d                   	pop    ebp
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <Process::createUserThread()>:
c001da56:	83 ec 0c             	sub    esp,0xc
c001da59:	68 80 00 00 00       	push   0x80
c001da5e:	6a 00                	push   0x0
c001da60:	68 1a d4 01 c0       	push   0xc001d41a
c001da65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da69:	e8 e2 fe ff ff       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c001da6e:	83 c4 1c             	add    esp,0x1c
c001da71:	c3                   	ret    

c001da72 <setupMultitasking(void (*)())>:
c001da72:	56                   	push   esi
c001da73:	53                   	push   ebx
c001da74:	51                   	push   ecx
c001da75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da79:	eb 10                	jmp    c001da8b <setupMultitasking(void (*)())+0x19>
c001da7b:	83 ec 0c             	sub    esp,0xc
c001da7e:	68 a4 12 03 c0       	push   0xc00312a4
c001da83:	e8 3a af 00 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	83 ec 0c             	sub    esp,0xc
c001da8e:	68 a4 12 03 c0       	push   0xc00312a4
c001da93:	e8 06 af 00 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da98:	83 c4 10             	add    esp,0x10
c001da9b:	84 c0                	test   al,al
c001da9d:	74 dc                	je     c001da7b <setupMultitasking(void (*)())+0x9>
c001da9f:	83 ec 0c             	sub    esp,0xc
c001daa2:	68 3f 07 00 00       	push   0x73f
c001daa7:	e8 ed 1a ff ff       	call   c000f599 <malloc>
c001daac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dab3:	89 c3                	mov    ebx,eax
c001dab5:	6a 00                	push   0x0
c001dab7:	68 28 bf 02 c0       	push   0xc002bf28
c001dabc:	6a 01                	push   0x1
c001dabe:	50                   	push   eax
c001dabf:	e8 94 fc ff ff       	call   c001d758 <Process::Process(bool, char const*, Process*, char**)>
c001dac4:	83 c4 14             	add    esp,0x14
c001dac7:	89 1d b0 12 03 c0    	mov    DWORD PTR ds:0xc00312b0,ebx
c001dacd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dad3:	e8 7b 28 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001dad8:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dae0:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001daea:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001daf0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001daf3:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dafd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001db03:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001db09:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001db13:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001db1d:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001db27:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001db2d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001db37:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001db3d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001db47:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001db4d:	58                   	pop    eax
c001db4e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001db54:	5a                   	pop    edx
c001db55:	68 24 bf 02 c0       	push   0xc002bf24
c001db5a:	50                   	push   eax
c001db5b:	e8 ac 2c fe ff       	call   c000080c <strcpy>
c001db60:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001db67:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db6b:	83 c4 14             	add    esp,0x14
c001db6e:	5b                   	pop    ebx
c001db6f:	5e                   	pop    esi
c001db70:	e9 df 27 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001db75 <schedule()>:
c001db75:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001db7a:	85 c0                	test   eax,eax
c001db7c:	74 0b                	je     c001db89 <schedule()+0x14>
c001db7e:	c7 05 80 12 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x1
c001db88:	c3                   	ret    
c001db89:	53                   	push   ebx
c001db8a:	83 ec 14             	sub    esp,0x14
c001db8d:	68 a4 12 03 c0       	push   0xc00312a4
c001db92:	e8 07 ae 00 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	84 c0                	test   al,al
c001db9c:	75 38                	jne    c001dbd6 <schedule()+0x61>
c001db9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dba6:	4a                   	dec    edx
c001dba7:	74 32                	je     c001dbdb <schedule()+0x66>
c001dba9:	83 ec 0c             	sub    esp,0xc
c001dbac:	68 a4 12 03 c0       	push   0xc00312a4
c001dbb1:	e8 04 ae 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbb6:	c7 04 24 a4 12 03 c0 	mov    DWORD PTR [esp],0xc00312a4
c001dbbd:	89 c3                	mov    ebx,eax
c001dbbf:	e8 fe ad 00 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dbc4:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dbcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbce:	e8 9d f8 ff ff       	call   c001d470 <switchToThread(ThreadControlBlock*)>
c001dbd3:	83 c4 10             	add    esp,0x10
c001dbd6:	83 c4 08             	add    esp,0x8
c001dbd9:	5b                   	pop    ebx
c001dbda:	c3                   	ret    
c001dbdb:	83 ec 08             	sub    esp,0x8
c001dbde:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dbe5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dbeb:	68 a4 12 03 c0       	push   0xc00312a4
c001dbf0:	e8 7b ae 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	eb af                	jmp    c001dba9 <schedule()+0x34>

c001dbfa <Semaphore::tryAcquire()>:
c001dbfa:	53                   	push   ebx
c001dbfb:	83 ec 08             	sub    esp,0x8
c001dbfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc02:	fa                   	cli    
c001dc03:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dc08:	8d 50 01             	lea    edx,[eax+0x1]
c001dc0b:	89 15 88 12 03 c0    	mov    DWORD PTR ds:0xc0031288,edx
c001dc11:	8b 15 84 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031284
c001dc17:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dc1a:	89 1d 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,ebx
c001dc20:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dc23:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dc25:	7c 2a                	jl     c001dc51 <Semaphore::tryAcquire()+0x57>
c001dc27:	89 15 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,edx
c001dc2d:	85 d2                	test   edx,edx
c001dc2f:	75 0a                	jne    c001dc3b <Semaphore::tryAcquire()+0x41>
c001dc31:	8b 15 80 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031280
c001dc37:	85 d2                	test   edx,edx
c001dc39:	75 5b                	jne    c001dc96 <Semaphore::tryAcquire()+0x9c>
c001dc3b:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dc40:	85 c0                	test   eax,eax
c001dc42:	74 07                	je     c001dc4b <Semaphore::tryAcquire()+0x51>
c001dc44:	31 c0                	xor    eax,eax
c001dc46:	83 c4 08             	add    esp,0x8
c001dc49:	5b                   	pop    ebx
c001dc4a:	c3                   	ret    
c001dc4b:	fb                   	sti    
c001dc4c:	83 c4 08             	add    esp,0x8
c001dc4f:	5b                   	pop    ebx
c001dc50:	c3                   	ret    
c001dc51:	43                   	inc    ebx
c001dc52:	89 15 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,edx
c001dc58:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001dc5b:	85 d2                	test   edx,edx
c001dc5d:	75 1f                	jne    c001dc7e <Semaphore::tryAcquire()+0x84>
c001dc5f:	8b 0d 80 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031280
c001dc65:	85 c9                	test   ecx,ecx
c001dc67:	74 15                	je     c001dc7e <Semaphore::tryAcquire()+0x84>
c001dc69:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001dc73:	e8 fd fe ff ff       	call   c001db75 <schedule()>
c001dc78:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dc7d:	48                   	dec    eax
c001dc7e:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dc83:	85 c0                	test   eax,eax
c001dc85:	75 08                	jne    c001dc8f <Semaphore::tryAcquire()+0x95>
c001dc87:	fb                   	sti    
c001dc88:	b0 01                	mov    al,0x1
c001dc8a:	83 c4 08             	add    esp,0x8
c001dc8d:	5b                   	pop    ebx
c001dc8e:	c3                   	ret    
c001dc8f:	b0 01                	mov    al,0x1
c001dc91:	83 c4 08             	add    esp,0x8
c001dc94:	5b                   	pop    ebx
c001dc95:	c3                   	ret    
c001dc96:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001dca0:	e8 d0 fe ff ff       	call   c001db75 <schedule()>
c001dca5:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dcaa:	48                   	dec    eax
c001dcab:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dcb0:	85 c0                	test   eax,eax
c001dcb2:	75 90                	jne    c001dc44 <Semaphore::tryAcquire()+0x4a>
c001dcb4:	eb 95                	jmp    c001dc4b <Semaphore::tryAcquire()+0x51>

c001dcb6 <Semaphore::assertLocked(char const*)>:
c001dcb6:	83 ec 0c             	sub    esp,0xc
c001dcb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcbd:	fa                   	cli    
c001dcbe:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001dcc4:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001dcc9:	8d 48 01             	lea    ecx,[eax+0x1]
c001dccc:	89 0d 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,ecx
c001dcd2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dcd4:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dcd7:	7c 24                	jl     c001dcfd <Semaphore::assertLocked(char const*)+0x47>
c001dcd9:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001dcde:	85 c0                	test   eax,eax
c001dce0:	75 09                	jne    c001dceb <Semaphore::assertLocked(char const*)+0x35>
c001dce2:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001dce7:	85 c0                	test   eax,eax
c001dce9:	75 29                	jne    c001dd14 <Semaphore::assertLocked(char const*)+0x5e>
c001dceb:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dcf0:	48                   	dec    eax
c001dcf1:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dcf6:	75 01                	jne    c001dcf9 <Semaphore::assertLocked(char const*)+0x43>
c001dcf8:	fb                   	sti    
c001dcf9:	83 c4 0c             	add    esp,0xc
c001dcfc:	c3                   	ret    
c001dcfd:	83 ec 0c             	sub    esp,0xc
c001dd00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dd04:	e8 da c2 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001dd09:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001dd0e:	83 c4 10             	add    esp,0x10
c001dd11:	48                   	dec    eax
c001dd12:	eb c5                	jmp    c001dcd9 <Semaphore::assertLocked(char const*)+0x23>
c001dd14:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001dd1e:	e8 52 fe ff ff       	call   c001db75 <schedule()>
c001dd23:	eb c6                	jmp    c001dceb <Semaphore::assertLocked(char const*)+0x35>

c001dd25 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dd25:	83 ec 0c             	sub    esp,0xc
c001dd28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd31:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd34:	e8 3c fe ff ff       	call   c001db75 <schedule()>
c001dd39:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dd3e:	48                   	dec    eax
c001dd3f:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dd44:	75 01                	jne    c001dd47 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dd46:	fb                   	sti    
c001dd47:	83 c4 0c             	add    esp,0xc
c001dd4a:	c3                   	ret    

c001dd4b <blockTask(TaskState)>:
c001dd4b:	83 ec 0c             	sub    esp,0xc
c001dd4e:	fa                   	cli    
c001dd4f:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001dd55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd5e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd61:	e8 0f fe ff ff       	call   c001db75 <schedule()>
c001dd66:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dd6b:	48                   	dec    eax
c001dd6c:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dd71:	75 01                	jne    c001dd74 <blockTask(TaskState)+0x29>
c001dd73:	fb                   	sti    
c001dd74:	83 c4 0c             	add    esp,0xc
c001dd77:	c3                   	ret    

c001dd78 <waitTask(int, int*, int)>:
c001dd78:	83 ec 18             	sub    esp,0x18
c001dd7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd84:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dd87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd90:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dd93:	6a 07                	push   0x7
c001dd95:	e8 b1 ff ff ff       	call   c001dd4b <blockTask(TaskState)>
c001dd9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dda5:	85 d2                	test   edx,edx
c001dda7:	74 0a                	je     c001ddb3 <waitTask(int, int*, int)+0x3b>
c001dda9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001ddac:	89 02                	mov    DWORD PTR [edx],eax
c001ddae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddb3:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001ddb6:	83 c4 0c             	add    esp,0xc
c001ddb9:	c3                   	ret    

c001ddba <nanoSleepUntil(unsigned long long)>:
c001ddba:	83 ec 0c             	sub    esp,0xc
c001ddbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddc5:	3b 05 d0 e3 02 c0    	cmp    eax,DWORD PTR ds:0xc002e3d0
c001ddcb:	89 d1                	mov    ecx,edx
c001ddcd:	1b 0d d4 e3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e3d4
c001ddd3:	73 04                	jae    c001ddd9 <nanoSleepUntil(unsigned long long)+0x1f>
c001ddd5:	83 c4 0c             	add    esp,0xc
c001ddd8:	c3                   	ret    
c001ddd9:	fa                   	cli    
c001ddda:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001dde0:	83 ec 08             	sub    esp,0x8
c001dde3:	ff 05 84 12 03 c0    	inc    DWORD PTR ds:0xc0031284
c001dde9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ddef:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001ddf2:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001ddf5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001ddfb:	68 98 12 03 c0       	push   0xc0031298
c001de00:	e8 6b ac 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de05:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001de0c:	e8 3a ff ff ff       	call   c001dd4b <blockTask(TaskState)>
c001de11:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001de16:	83 c4 10             	add    esp,0x10
c001de19:	48                   	dec    eax
c001de1a:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001de1f:	85 c0                	test   eax,eax
c001de21:	75 09                	jne    c001de2c <nanoSleepUntil(unsigned long long)+0x72>
c001de23:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001de28:	85 c0                	test   eax,eax
c001de2a:	75 12                	jne    c001de3e <nanoSleepUntil(unsigned long long)+0x84>
c001de2c:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001de31:	48                   	dec    eax
c001de32:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001de37:	75 9c                	jne    c001ddd5 <nanoSleepUntil(unsigned long long)+0x1b>
c001de39:	fb                   	sti    
c001de3a:	83 c4 0c             	add    esp,0xc
c001de3d:	c3                   	ret    
c001de3e:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001de48:	e8 28 fd ff ff       	call   c001db75 <schedule()>
c001de4d:	eb dd                	jmp    c001de2c <nanoSleepUntil(unsigned long long)+0x72>

c001de4f <nanoSleep(unsigned long long)>:
c001de4f:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001de54:	8b 15 d4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3d4
c001de5a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001de5e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001de62:	e9 53 ff ff ff       	jmp    c001ddba <nanoSleepUntil(unsigned long long)>

c001de67 <sleep(unsigned long long)>:
c001de67:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001de6f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001de74:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001de78:	01 ca                	add    edx,ecx
c001de7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de82:	eb cb                	jmp    c001de4f <nanoSleep(unsigned long long)>

c001de84 <Semaphore::acquire()>:
c001de84:	83 ec 0c             	sub    esp,0xc
c001de87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de8b:	fa                   	cli    
c001de8c:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001de91:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001de97:	8d 48 01             	lea    ecx,[eax+0x1]
c001de9a:	89 0d 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,ecx
c001dea0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dea3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dea5:	7d 28                	jge    c001decf <Semaphore::acquire()+0x4b>
c001dea7:	41                   	inc    ecx
c001dea8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001deab:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001deb0:	85 c0                	test   eax,eax
c001deb2:	75 09                	jne    c001debd <Semaphore::acquire()+0x39>
c001deb4:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001deb9:	85 c0                	test   eax,eax
c001debb:	75 4e                	jne    c001df0b <Semaphore::acquire()+0x87>
c001debd:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dec2:	48                   	dec    eax
c001dec3:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dec8:	75 01                	jne    c001decb <Semaphore::acquire()+0x47>
c001deca:	fb                   	sti    
c001decb:	83 c4 0c             	add    esp,0xc
c001dece:	c3                   	ret    
c001decf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dedb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dede:	85 c9                	test   ecx,ecx
c001dee0:	74 3a                	je     c001df1c <Semaphore::acquire()+0x98>
c001dee2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dee5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001deeb:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001deee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def3:	83 ec 0c             	sub    esp,0xc
c001def6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001def9:	6a 05                	push   0x5
c001defb:	e8 4b fe ff ff       	call   c001dd4b <blockTask(TaskState)>
c001df00:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001df05:	83 c4 10             	add    esp,0x10
c001df08:	48                   	dec    eax
c001df09:	eb a0                	jmp    c001deab <Semaphore::acquire()+0x27>
c001df0b:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001df15:	e8 5b fc ff ff       	call   c001db75 <schedule()>
c001df1a:	eb a1                	jmp    c001debd <Semaphore::acquire()+0x39>
c001df1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001df24:	eb c8                	jmp    c001deee <Semaphore::acquire()+0x6a>

c001df26 <taskReturned>:
c001df26:	83 ec 18             	sub    esp,0x18
c001df29:	68 a4 bf 02 c0       	push   0xc002bfa4
c001df2e:	e8 b0 c0 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001df33:	83 c4 10             	add    esp,0x10
c001df36:	83 ec 0c             	sub    esp,0xc
c001df39:	6a 02                	push   0x2
c001df3b:	e8 0b fe ff ff       	call   c001dd4b <blockTask(TaskState)>
c001df40:	fa                   	cli    
c001df41:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001df47:	e8 29 fc ff ff       	call   c001db75 <schedule()>
c001df4c:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001df51:	83 c4 10             	add    esp,0x10
c001df54:	48                   	dec    eax
c001df55:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001df5a:	85 c0                	test   eax,eax
c001df5c:	75 d8                	jne    c001df36 <taskReturned+0x10>
c001df5e:	fb                   	sti    
c001df5f:	eb d5                	jmp    c001df36 <taskReturned+0x10>

c001df61 <Thr::processFromPID(int)>:
c001df61:	57                   	push   edi
c001df62:	56                   	push   esi
c001df63:	53                   	push   ebx
c001df64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df68:	fa                   	cli    
c001df69:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001df6f:	83 ec 0c             	sub    esp,0xc
c001df72:	68 a4 12 03 c0       	push   0xc00312a4
c001df77:	e8 3e aa 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df7c:	83 c4 10             	add    esp,0x10
c001df7f:	89 c7                	mov    edi,eax
c001df81:	eb 14                	jmp    c001df97 <Thr::processFromPID(int)+0x36>
c001df83:	83 ec 0c             	sub    esp,0xc
c001df86:	68 a4 12 03 c0       	push   0xc00312a4
c001df8b:	e8 2a aa 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	39 f8                	cmp    eax,edi
c001df95:	74 49                	je     c001dfe0 <Thr::processFromPID(int)+0x7f>
c001df97:	83 ec 0c             	sub    esp,0xc
c001df9a:	68 a4 12 03 c0       	push   0xc00312a4
c001df9f:	e8 16 aa 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfa4:	c7 04 24 a4 12 03 c0 	mov    DWORD PTR [esp],0xc00312a4
c001dfab:	89 c3                	mov    ebx,eax
c001dfad:	e8 10 aa 00 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfb2:	58                   	pop    eax
c001dfb3:	5a                   	pop    edx
c001dfb4:	53                   	push   ebx
c001dfb5:	68 a4 12 03 c0       	push   0xc00312a4
c001dfba:	e8 b1 aa 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfbf:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfc2:	83 c4 10             	add    esp,0x10
c001dfc5:	39 30                	cmp    DWORD PTR [eax],esi
c001dfc7:	75 ba                	jne    c001df83 <Thr::processFromPID(int)+0x22>
c001dfc9:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dfce:	48                   	dec    eax
c001dfcf:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dfd4:	74 07                	je     c001dfdd <Thr::processFromPID(int)+0x7c>
c001dfd6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfd9:	5b                   	pop    ebx
c001dfda:	5e                   	pop    esi
c001dfdb:	5f                   	pop    edi
c001dfdc:	c3                   	ret    
c001dfdd:	fb                   	sti    
c001dfde:	eb f6                	jmp    c001dfd6 <Thr::processFromPID(int)+0x75>
c001dfe0:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001dfe5:	48                   	dec    eax
c001dfe6:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001dfeb:	75 05                	jne    c001dff2 <Thr::processFromPID(int)+0x91>
c001dfed:	fb                   	sti    
c001dfee:	5b                   	pop    ebx
c001dfef:	5e                   	pop    esi
c001dff0:	5f                   	pop    edi
c001dff1:	c3                   	ret    
c001dff2:	5b                   	pop    ebx
c001dff3:	31 c0                	xor    eax,eax
c001dff5:	5e                   	pop    esi
c001dff6:	5f                   	pop    edi
c001dff7:	c3                   	ret    

c001dff8 <unblockTask(ThreadControlBlock*)>:
c001dff8:	53                   	push   ebx
c001dff9:	83 ec 08             	sub    esp,0x8
c001dffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e000:	fa                   	cli    
c001e001:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e007:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e00a:	85 c0                	test   eax,eax
c001e00c:	74 5a                	je     c001e068 <unblockTask(ThreadControlBlock*)+0x70>
c001e00e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e011:	48                   	dec    eax
c001e012:	74 31                	je     c001e045 <unblockTask(ThreadControlBlock*)+0x4d>
c001e014:	83 ec 0c             	sub    esp,0xc
c001e017:	68 a4 12 03 c0       	push   0xc00312a4
c001e01c:	e8 99 a9 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e021:	83 c4 10             	add    esp,0x10
c001e024:	85 c0                	test   eax,eax
c001e026:	75 17                	jne    c001e03f <unblockTask(ThreadControlBlock*)+0x47>
c001e028:	eb 50                	jmp    c001e07a <unblockTask(ThreadControlBlock*)+0x82>
c001e02a:	83 ec 08             	sub    esp,0x8
c001e02d:	50                   	push   eax
c001e02e:	68 a4 12 03 c0       	push   0xc00312a4
c001e033:	e8 0a ad 00 00       	call   c0028d42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e038:	83 c4 10             	add    esp,0x10
c001e03b:	85 c0                	test   eax,eax
c001e03d:	74 3b                	je     c001e07a <unblockTask(ThreadControlBlock*)+0x82>
c001e03f:	39 c3                	cmp    ebx,eax
c001e041:	75 e7                	jne    c001e02a <unblockTask(ThreadControlBlock*)+0x32>
c001e043:	eb 10                	jmp    c001e055 <unblockTask(ThreadControlBlock*)+0x5d>
c001e045:	83 ec 0c             	sub    esp,0xc
c001e048:	68 46 bf 02 c0       	push   0xc002bf46
c001e04d:	e8 e7 47 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e05a:	48                   	dec    eax
c001e05b:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e060:	75 01                	jne    c001e063 <unblockTask(ThreadControlBlock*)+0x6b>
c001e062:	fb                   	sti    
c001e063:	83 c4 08             	add    esp,0x8
c001e066:	5b                   	pop    ebx
c001e067:	c3                   	ret    
c001e068:	83 ec 0c             	sub    esp,0xc
c001e06b:	68 2f bf 02 c0       	push   0xc002bf2f
c001e070:	e8 c4 47 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	eb db                	jmp    c001e055 <unblockTask(ThreadControlBlock*)+0x5d>
c001e07a:	83 ec 08             	sub    esp,0x8
c001e07d:	53                   	push   ebx
c001e07e:	68 a4 12 03 c0       	push   0xc00312a4
c001e083:	e8 e8 a9 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e088:	83 c4 10             	add    esp,0x10
c001e08b:	eb c8                	jmp    c001e055 <unblockTask(ThreadControlBlock*)+0x5d>

c001e08d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e08d:	55                   	push   ebp
c001e08e:	57                   	push   edi
c001e08f:	56                   	push   esi
c001e090:	53                   	push   ebx
c001e091:	83 ec 1c             	sub    esp,0x1c
c001e094:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e098:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e09b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e0a1:	85 ff                	test   edi,edi
c001e0a3:	7e 20                	jle    c001e0c5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e0a5:	31 f6                	xor    esi,esi
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e0b1:	46                   	inc    esi
c001e0b2:	e8 f2 14 ff ff       	call   c000f5a9 <free>
c001e0b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0ba:	83 c4 10             	add    esp,0x10
c001e0bd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e0c3:	7f e2                	jg     c001e0a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e0c5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0cf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e0d4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e0d7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e0da:	d3 c0                	rol    eax,cl
c001e0dc:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e0e3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0e6:	89 f7                	mov    edi,esi
c001e0e8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e0f0:	0f 85 64 01 00 00    	jne    c001e25a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0f6:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e0fc:	85 ed                	test   ebp,ebp
c001e0fe:	74 1b                	je     c001e11b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e100:	83 ec 0c             	sub    esp,0xc
c001e103:	55                   	push   ebp
c001e104:	e8 7f bc ff ff       	call   c0019d88 <EnvVarContainer::~EnvVarContainer()>
c001e109:	59                   	pop    ecx
c001e10a:	5e                   	pop    esi
c001e10b:	6a 0c                	push   0xc
c001e10d:	55                   	push   ebp
c001e10e:	e8 4e 46 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c001e113:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	89 f7                	mov    edi,esi
c001e11b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e121:	85 c0                	test   eax,eax
c001e123:	0f 84 aa 00 00 00    	je     c001e1d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e129:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e12c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e130:	31 c9                	xor    ecx,ecx
c001e132:	eb 10                	jmp    c001e144 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e134:	41                   	inc    ecx
c001e135:	83 f9 10             	cmp    ecx,0x10
c001e138:	0f 84 95 00 00 00    	je     c001e1d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e13e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e144:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e14b:	d3 fa                	sar    edx,cl
c001e14d:	83 e2 01             	and    edx,0x1
c001e150:	74 e2                	je     c001e134 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e152:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e155:	01 ca                	add    edx,ecx
c001e157:	89 d5                	mov    ebp,edx
c001e159:	c1 e5 05             	shl    ebp,0x5
c001e15c:	01 ea                	add    edx,ebp
c001e15e:	01 d0                	add    eax,edx
c001e160:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e166:	83 fd 07             	cmp    ebp,0x7
c001e169:	75 c9                	jne    c001e134 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e16b:	05 40 02 00 00       	add    eax,0x240
c001e170:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e173:	83 fd ff             	cmp    ebp,0xffffffff
c001e176:	0f 8c e6 00 00 00    	jl     c001e262 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e17c:	0f 84 97 01 00 00    	je     c001e319 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e182:	85 ed                	test   ebp,ebp
c001e184:	0f 84 7e 01 00 00    	je     c001e308 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e18a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e18c:	75 a6                	jne    c001e134 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e18e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e194:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e198:	01 d0                	add    eax,edx
c001e19a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e19e:	83 ec 0c             	sub    esp,0xc
c001e1a1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e1a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1aa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1b0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e1b7:	50                   	push   eax
c001e1b8:	e8 3b fe ff ff       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c001e1bd:	83 c4 10             	add    esp,0x10
c001e1c0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e1c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1c7:	89 f7                	mov    edi,esi
c001e1c9:	41                   	inc    ecx
c001e1ca:	83 f9 10             	cmp    ecx,0x10
c001e1cd:	0f 85 6b ff ff ff    	jne    c001e13e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e1d3:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e1d9:	85 c0                	test   eax,eax
c001e1db:	74 5d                	je     c001e23a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e1dd:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e1e3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e1e9:	74 4f                	je     c001e23a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e1eb:	83 ec 0c             	sub    esp,0xc
c001e1ee:	68 a4 12 03 c0       	push   0xc00312a4
c001e1f3:	e8 c2 a7 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1f8:	c7 04 24 a4 12 03 c0 	mov    DWORD PTR [esp],0xc00312a4
c001e1ff:	89 c7                	mov    edi,eax
c001e201:	e8 98 a7 00 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e206:	83 c4 10             	add    esp,0x10
c001e209:	84 c0                	test   al,al
c001e20b:	0f 84 c2 00 00 00    	je     c001e2d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e211:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e214:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e21a:	85 d2                	test   edx,edx
c001e21c:	74 0f                	je     c001e22d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e21e:	83 ec 0c             	sub    esp,0xc
c001e221:	8b 02                	mov    eax,DWORD PTR [edx]
c001e223:	52                   	push   edx
c001e224:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e227:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e22a:	83 c4 10             	add    esp,0x10
c001e22d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e237:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e23a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e240:	85 db                	test   ebx,ebx
c001e242:	74 16                	je     c001e25a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	53                   	push   ebx
c001e248:	e8 a9 36 ff ff       	call   c00118f6 <VAS::~VAS()>
c001e24d:	58                   	pop    eax
c001e24e:	5a                   	pop    edx
c001e24f:	6a 14                	push   0x14
c001e251:	53                   	push   ebx
c001e252:	e8 0a 45 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c001e257:	83 c4 10             	add    esp,0x10
c001e25a:	83 c4 1c             	add    esp,0x1c
c001e25d:	5b                   	pop    ebx
c001e25e:	5e                   	pop    esi
c001e25f:	5f                   	pop    edi
c001e260:	5d                   	pop    ebp
c001e261:	c3                   	ret    
c001e262:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	68 d8 bf 02 c0       	push   0xc002bfd8
c001e26e:	e8 70 bd ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001e273:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e276:	83 c4 10             	add    esp,0x10
c001e279:	89 f7                	mov    edi,esi
c001e27b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e27f:	e9 b0 fe ff ff       	jmp    c001e134 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e284:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e28a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e290:	75 1c                	jne    c001e2ae <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e292:	83 ec 0c             	sub    esp,0xc
c001e295:	68 40 c0 02 c0       	push   0xc002c040
c001e29a:	e8 9a 45 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001e29f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e2a6:	e8 a0 fa ff ff       	call   c001dd4b <blockTask(TaskState)>
c001e2ab:	83 c4 10             	add    esp,0x10
c001e2ae:	83 ec 08             	sub    esp,0x8
c001e2b1:	56                   	push   esi
c001e2b2:	68 a4 12 03 c0       	push   0xc00312a4
c001e2b7:	e8 b4 a7 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2bc:	c7 04 24 a4 12 03 c0 	mov    DWORD PTR [esp],0xc00312a4
c001e2c3:	e8 f2 a6 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	39 f8                	cmp    eax,edi
c001e2cd:	0f 84 3e ff ff ff    	je     c001e211 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	68 a4 12 03 c0       	push   0xc00312a4
c001e2db:	e8 da a6 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2e0:	c7 04 24 a4 12 03 c0 	mov    DWORD PTR [esp],0xc00312a4
c001e2e7:	89 c6                	mov    esi,eax
c001e2e9:	e8 d4 a6 00 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	39 f3                	cmp    ebx,esi
c001e2f3:	74 b9                	je     c001e2ae <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e2f5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e2f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2fb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e301:	75 ab                	jne    c001e2ae <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e303:	e9 7c ff ff ff       	jmp    c001e284 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e308:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	68 0c c0 02 c0       	push   0xc002c00c
c001e314:	e9 55 ff ff ff       	jmp    c001e26e <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e319:	8b 36                	mov    esi,DWORD PTR [esi]
c001e31b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e31f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e322:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e325:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e32b:	01 d7                	add    edi,edx
c001e32d:	89 f8                	mov    eax,edi
c001e32f:	e9 66 fe ff ff       	jmp    c001e19a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e334 <cleanerTaskFunction(void*)>:
c001e334:	53                   	push   ebx
c001e335:	83 ec 08             	sub    esp,0x8
c001e338:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e33d:	48                   	dec    eax
c001e33e:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e343:	75 01                	jne    c001e346 <cleanerTaskFunction(void*)+0x12>
c001e345:	fb                   	sti    
c001e346:	fa                   	cli    
c001e347:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e34c:	80 3d 6c 12 03 c0 00 	cmp    BYTE PTR ds:0xc003126c,0x0
c001e353:	8d 50 01             	lea    edx,[eax+0x1]
c001e356:	89 15 88 12 03 c0    	mov    DWORD PTR ds:0xc0031288,edx
c001e35c:	0f 84 a1 00 00 00    	je     c001e403 <cleanerTaskFunction(void*)+0xcf>
c001e362:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e367:	85 c0                	test   eax,eax
c001e369:	75 01                	jne    c001e36c <cleanerTaskFunction(void*)+0x38>
c001e36b:	fb                   	sti    
c001e36c:	c6 05 6c 12 03 c0 00 	mov    BYTE PTR ds:0xc003126c,0x0
c001e373:	fa                   	cli    
c001e374:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e37a:	ff 05 84 12 03 c0    	inc    DWORD PTR ds:0xc0031284
c001e380:	fa                   	cli    
c001e381:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e387:	eb 26                	jmp    c001e3af <cleanerTaskFunction(void*)+0x7b>
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	68 8c 12 03 c0       	push   0xc003128c
c001e391:	e8 24 a6 00 00       	call   c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e396:	c7 04 24 8c 12 03 c0 	mov    DWORD PTR [esp],0xc003128c
c001e39d:	89 c3                	mov    ebx,eax
c001e39f:	e8 1e a6 00 00       	call   c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e3a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3a7:	e8 e1 fc ff ff       	call   c001e08d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	83 ec 0c             	sub    esp,0xc
c001e3b2:	68 8c 12 03 c0       	push   0xc003128c
c001e3b7:	e8 e2 a5 00 00       	call   c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	84 c0                	test   al,al
c001e3c1:	74 c6                	je     c001e389 <cleanerTaskFunction(void*)+0x55>
c001e3c3:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e3c8:	48                   	dec    eax
c001e3c9:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e3ce:	75 01                	jne    c001e3d1 <cleanerTaskFunction(void*)+0x9d>
c001e3d0:	fb                   	sti    
c001e3d1:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001e3d6:	48                   	dec    eax
c001e3d7:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001e3dc:	0f 85 56 ff ff ff    	jne    c001e338 <cleanerTaskFunction(void*)+0x4>
c001e3e2:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001e3e7:	85 c0                	test   eax,eax
c001e3e9:	0f 84 49 ff ff ff    	je     c001e338 <cleanerTaskFunction(void*)+0x4>
c001e3ef:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001e3f9:	e8 77 f7 ff ff       	call   c001db75 <schedule()>
c001e3fe:	e9 35 ff ff ff       	jmp    c001e338 <cleanerTaskFunction(void*)+0x4>
c001e403:	83 ec 0c             	sub    esp,0xc
c001e406:	6a 02                	push   0x2
c001e408:	e8 18 f9 ff ff       	call   c001dd25 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e40d:	83 c4 10             	add    esp,0x10
c001e410:	e9 57 ff ff ff       	jmp    c001e36c <cleanerTaskFunction(void*)+0x38>

c001e415 <terminateTask(int)>:
c001e415:	83 ec 14             	sub    esp,0x14
c001e418:	fa                   	cli    
c001e419:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e41f:	ff 05 84 12 03 c0    	inc    DWORD PTR ds:0xc0031284
c001e425:	fa                   	cli    
c001e426:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e42c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e435:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e43d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e440:	50                   	push   eax
c001e441:	68 8c 12 03 c0       	push   0xc003128c
c001e446:	e8 25 a6 00 00       	call   c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e44b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e450:	83 c4 10             	add    esp,0x10
c001e453:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e45a:	a1 68 12 03 c0       	mov    eax,ds:0xc0031268
c001e45f:	85 c0                	test   eax,eax
c001e461:	74 53                	je     c001e4b6 <terminateTask(int)+0xa1>
c001e463:	83 ec 0c             	sub    esp,0xc
c001e466:	c6 05 6c 12 03 c0 01 	mov    BYTE PTR ds:0xc003126c,0x1
c001e46d:	50                   	push   eax
c001e46e:	e8 85 fb ff ff       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c001e473:	83 c4 10             	add    esp,0x10
c001e476:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e47b:	48                   	dec    eax
c001e47c:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e481:	75 01                	jne    c001e484 <terminateTask(int)+0x6f>
c001e483:	fb                   	sti    
c001e484:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001e489:	48                   	dec    eax
c001e48a:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001e48f:	75 09                	jne    c001e49a <terminateTask(int)+0x85>
c001e491:	83 3d 80 12 03 c0 00 	cmp    DWORD PTR ds:0xc0031280,0x0
c001e498:	75 2e                	jne    c001e4c8 <terminateTask(int)+0xb3>
c001e49a:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e49f:	48                   	dec    eax
c001e4a0:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e4a5:	75 01                	jne    c001e4a8 <terminateTask(int)+0x93>
c001e4a7:	fb                   	sti    
c001e4a8:	fa                   	cli    
c001e4a9:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e4af:	e8 c1 f6 ff ff       	call   c001db75 <schedule()>
c001e4b4:	eb e4                	jmp    c001e49a <terminateTask(int)+0x85>
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	68 5d bf 02 c0       	push   0xc002bf5d
c001e4be:	e8 76 43 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001e4c3:	83 c4 10             	add    esp,0x10
c001e4c6:	eb ae                	jmp    c001e476 <terminateTask(int)+0x61>
c001e4c8:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001e4d2:	eb db                	jmp    c001e4af <terminateTask(int)+0x9a>

c001e4d4 <Thr::terminateFromIRQ(int)>:
c001e4d4:	83 ec 18             	sub    esp,0x18
c001e4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4db:	e8 35 ff ff ff       	call   c001e415 <terminateTask(int)>

c001e4e0 <Semaphore::release()>:
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e4e7:	fa                   	cli    
c001e4e8:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001e4ed:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e4f3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4f6:	89 0d 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,ecx
c001e4fc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e4ff:	85 c9                	test   ecx,ecx
c001e501:	74 3c                	je     c001e53f <Semaphore::release()+0x5f>
c001e503:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e50c:	51                   	push   ecx
c001e50d:	e8 e6 fa ff ff       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c001e512:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	48                   	dec    eax
c001e51b:	a3 84 12 03 c0       	mov    ds:0xc0031284,eax
c001e520:	85 c0                	test   eax,eax
c001e522:	75 09                	jne    c001e52d <Semaphore::release()+0x4d>
c001e524:	a1 80 12 03 c0       	mov    eax,ds:0xc0031280
c001e529:	85 c0                	test   eax,eax
c001e52b:	75 17                	jne    c001e544 <Semaphore::release()+0x64>
c001e52d:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e532:	48                   	dec    eax
c001e533:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e538:	75 01                	jne    c001e53b <Semaphore::release()+0x5b>
c001e53a:	fb                   	sti    
c001e53b:	83 c4 0c             	add    esp,0xc
c001e53e:	c3                   	ret    
c001e53f:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e542:	eb d7                	jmp    c001e51b <Semaphore::release()+0x3b>
c001e544:	c7 05 80 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031280,0x0
c001e54e:	e8 22 f6 ff ff       	call   c001db75 <schedule()>
c001e553:	eb d8                	jmp    c001e52d <Semaphore::release()+0x4d>

c001e555 <__static_initialization_and_destruction_0(int, int)>:
c001e555:	83 ec 0c             	sub    esp,0xc
c001e558:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e55d:	0f 85 88 00 00 00    	jne    c001e5eb <__static_initialization_and_destruction_0(int, int)+0x96>
c001e563:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e56b:	75 7e                	jne    c001e5eb <__static_initialization_and_destruction_0(int, int)+0x96>
c001e56d:	83 ec 0c             	sub    esp,0xc
c001e570:	68 a4 12 03 c0       	push   0xc00312a4
c001e575:	e8 86 a7 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	83 ec 04             	sub    esp,0x4
c001e580:	68 20 cb 02 c0       	push   0xc002cb20
c001e585:	68 a4 12 03 c0       	push   0xc00312a4
c001e58a:	68 b4 8c 02 c0       	push   0xc0028cb4
c001e58f:	e8 47 41 ff ff       	call   c00126db <__cxa_atexit>
c001e594:	83 c4 10             	add    esp,0x10
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	68 98 12 03 c0       	push   0xc0031298
c001e59f:	e8 5c a7 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	83 ec 04             	sub    esp,0x4
c001e5aa:	68 20 cb 02 c0       	push   0xc002cb20
c001e5af:	68 98 12 03 c0       	push   0xc0031298
c001e5b4:	68 b4 8c 02 c0       	push   0xc0028cb4
c001e5b9:	e8 1d 41 ff ff       	call   c00126db <__cxa_atexit>
c001e5be:	83 c4 10             	add    esp,0x10
c001e5c1:	83 ec 0c             	sub    esp,0xc
c001e5c4:	68 8c 12 03 c0       	push   0xc003128c
c001e5c9:	e8 32 a7 00 00       	call   c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5ce:	83 c4 10             	add    esp,0x10
c001e5d1:	83 ec 04             	sub    esp,0x4
c001e5d4:	68 20 cb 02 c0       	push   0xc002cb20
c001e5d9:	68 8c 12 03 c0       	push   0xc003128c
c001e5de:	68 b4 8c 02 c0       	push   0xc0028cb4
c001e5e3:	e8 f3 40 ff ff       	call   c00126db <__cxa_atexit>
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	90                   	nop
c001e5ec:	83 c4 0c             	add    esp,0xc
c001e5ef:	c3                   	ret    

c001e5f0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e5f0:	83 ec 0c             	sub    esp,0xc
c001e5f3:	83 ec 08             	sub    esp,0x8
c001e5f6:	68 ff ff 00 00       	push   0xffff
c001e5fb:	6a 01                	push   0x1
c001e5fd:	e8 53 ff ff ff       	call   c001e555 <__static_initialization_and_destruction_0(int, int)>
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	83 c4 0c             	add    esp,0xc
c001e608:	c3                   	ret    

c001e609 <Vm::inbv(unsigned short)>:
c001e609:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e60d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e612:	75 06                	jne    c001e61a <Vm::inbv(unsigned short)+0x11>
c001e614:	a0 ec 12 03 c0       	mov    al,ds:0xc00312ec
c001e619:	c3                   	ret    
c001e61a:	ec                   	in     al,dx
c001e61b:	c3                   	ret    

c001e61c <Vm::outbv(unsigned short, unsigned char)>:
c001e61c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e624:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e629:	75 25                	jne    c001e650 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e62b:	8b 0d ec 12 03 c0    	mov    ecx,DWORD PTR ds:0xc00312ec
c001e631:	8d 51 01             	lea    edx,[ecx+0x1]
c001e634:	88 81 00 13 03 c0    	mov    BYTE PTR [ecx-0x3ffced00],al
c001e63a:	89 15 ec 12 03 c0    	mov    DWORD PTR ds:0xc00312ec,edx
c001e640:	83 fa 20             	cmp    edx,0x20
c001e643:	75 0c                	jne    c001e651 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e645:	c7 05 ec 12 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00312ec,0x1f
c001e64f:	c3                   	ret    
c001e650:	ee                   	out    dx,al
c001e651:	c3                   	ret    

c001e652 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e652:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e657:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e65c:	c1 e0 04             	shl    eax,0x4
c001e65f:	01 d0                	add    eax,edx
c001e661:	c3                   	ret    

c001e662 <Vm::getSegment(unsigned int)>:
c001e662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e666:	c1 e8 10             	shr    eax,0x10
c001e669:	c3                   	ret    

c001e66a <Vm::getOffset(unsigned int)>:
c001e66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66e:	c3                   	ret    

c001e66f <Vm::mainloop2()>:
c001e66f:	83 ec 18             	sub    esp,0x18
c001e672:	fa                   	cli    
c001e673:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e679:	6a 02                	push   0x2
c001e67b:	c6 05 e5 12 03 c0 01 	mov    BYTE PTR ds:0xc00312e5,0x1
c001e682:	e8 9e f6 ff ff       	call   c001dd25 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e68c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e690:	52                   	push   edx
c001e691:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e695:	52                   	push   edx
c001e696:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e69a:	52                   	push   edx
c001e69b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e69f:	50                   	push   eax
c001e6a0:	e8 55 1c fe ff       	call   c00002fa <goToVM86>
c001e6a5:	83 c4 2c             	add    esp,0x2c
c001e6a8:	c3                   	ret    

c001e6a9 <Vm::mainVm8086Loop(void*)>:
c001e6a9:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e6ae:	48                   	dec    eax
c001e6af:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e6b4:	75 01                	jne    c001e6b7 <Vm::mainVm8086Loop(void*)+0xe>
c001e6b6:	fb                   	sti    
c001e6b7:	eb b6                	jmp    c001e66f <Vm::mainloop2()>

c001e6b9 <Vm::mainloop3(unsigned long)>:
c001e6b9:	83 ec 18             	sub    esp,0x18
c001e6bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6c0:	fa                   	cli    
c001e6c1:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e6c7:	6a 02                	push   0x2
c001e6c9:	c6 05 e4 12 03 c0 01 	mov    BYTE PTR ds:0xc00312e4,0x1
c001e6d0:	a3 e0 12 03 c0       	mov    ds:0xc00312e0,eax
c001e6d5:	e8 4b f6 ff ff       	call   c001dd25 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6da:	83 c4 1c             	add    esp,0x1c
c001e6dd:	eb 90                	jmp    c001e66f <Vm::mainloop2()>

c001e6df <Vm::initialise8086()>:
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	68 80 00 00 00       	push   0x80
c001e6e7:	6a 00                	push   0x0
c001e6e9:	68 a9 e6 01 c0       	push   0xc001e6a9
c001e6ee:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c001e6f4:	e8 57 f2 ff ff       	call   c001d950 <Process::createThread(void (*)(void*), void*, int)>
c001e6f9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e700:	a3 e8 12 03 c0       	mov    ds:0xc00312e8,eax
c001e705:	68 00 01 00 00       	push   0x100
c001e70a:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c001e70f:	6a 00                	push   0x0
c001e711:	6a 00                	push   0x0
c001e713:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e719:	e8 4a 36 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e71e:	83 c4 2c             	add    esp,0x2c
c001e721:	c3                   	ret    

c001e722 <Vm::finish8086()>:
c001e722:	53                   	push   ebx
c001e723:	83 ec 08             	sub    esp,0x8
c001e726:	fa                   	cli    
c001e727:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e72d:	80 3d e4 12 03 c0 00 	cmp    BYTE PTR ds:0xc00312e4,0x0
c001e734:	75 15                	jne    c001e74b <Vm::finish8086()+0x29>
c001e736:	e8 3a f4 ff ff       	call   c001db75 <schedule()>
c001e73b:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e740:	48                   	dec    eax
c001e741:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e746:	75 de                	jne    c001e726 <Vm::finish8086()+0x4>
c001e748:	fb                   	sti    
c001e749:	eb db                	jmp    c001e726 <Vm::finish8086()+0x4>
c001e74b:	83 ec 0c             	sub    esp,0xc
c001e74e:	8b 1d e0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312e0
c001e754:	ff 35 e8 12 03 c0    	push   DWORD PTR ds:0xc00312e8
c001e75a:	c6 05 e4 12 03 c0 00 	mov    BYTE PTR ds:0xc00312e4,0x0
c001e761:	e8 92 f8 ff ff       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c001e766:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	8d 50 ff             	lea    edx,[eax-0x1]
c001e771:	89 15 88 12 03 c0    	mov    DWORD PTR ds:0xc0031288,edx
c001e777:	85 d2                	test   edx,edx
c001e779:	75 01                	jne    c001e77c <Vm::finish8086()+0x5a>
c001e77b:	fb                   	sti    
c001e77c:	89 d8                	mov    eax,ebx
c001e77e:	83 c4 08             	add    esp,0x8
c001e781:	5b                   	pop    ebx
c001e782:	c3                   	ret    

c001e783 <Vm::getOutput8086(unsigned char*)>:
c001e783:	57                   	push   edi
c001e784:	8b 0d ec 12 03 c0    	mov    ecx,DWORD PTR ds:0xc00312ec
c001e78a:	56                   	push   esi
c001e78b:	be 00 13 03 c0       	mov    esi,0xc0031300
c001e790:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e794:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e796:	a1 ec 12 03 c0       	mov    eax,ds:0xc00312ec
c001e79b:	5e                   	pop    esi
c001e79c:	c7 05 ec 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312ec,0x0
c001e7a6:	5f                   	pop    edi
c001e7a7:	c3                   	ret    

c001e7a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e7a8:	55                   	push   ebp
c001e7a9:	57                   	push   edi
c001e7aa:	56                   	push   esi
c001e7ab:	53                   	push   ebx
c001e7ac:	83 ec 2c             	sub    esp,0x2c
c001e7af:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e7b3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e7b7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e7bb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7bf:	fa                   	cli    
c001e7c0:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c001e7c6:	0f b6 35 e5 12 03 c0 	movzx  esi,BYTE PTR ds:0xc00312e5
c001e7cd:	89 f0                	mov    eax,esi
c001e7cf:	84 c0                	test   al,al
c001e7d1:	75 1d                	jne    c001e7f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7d7:	e8 99 f3 ff ff       	call   c001db75 <schedule()>
c001e7dc:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e7e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7e5:	48                   	dec    eax
c001e7e6:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e7eb:	75 d2                	jne    c001e7bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e7ed:	fb                   	sti    
c001e7ee:	eb cf                	jmp    c001e7bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e7f0:	a1 e8 12 03 c0       	mov    eax,ds:0xc00312e8
c001e7f5:	c7 05 ec 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312ec,0x0
c001e7ff:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e803:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e807:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e80b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e80f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e813:	50                   	push   eax
c001e814:	6a 20                	push   0x20
c001e816:	6a 00                	push   0x0
c001e818:	68 00 13 03 c0       	push   0xc0031300
c001e81d:	e8 2e 1f fe ff       	call   c0000750 <memset>
c001e822:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e829:	e8 6b 0d ff ff       	call   c000f599 <malloc>
c001e82e:	83 c4 0c             	add    esp,0xc
c001e831:	89 c3                	mov    ebx,eax
c001e833:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c001e839:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e83d:	50                   	push   eax
c001e83e:	e8 55 45 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c001e843:	83 c4 10             	add    esp,0x10
c001e846:	85 db                	test   ebx,ebx
c001e848:	75 0a                	jne    c001e854 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e84a:	83 ec 0c             	sub    esp,0xc
c001e84d:	68 68 c0 02 c0       	push   0xc002c068
c001e852:	eb 3e                	jmp    c001e892 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e854:	50                   	push   eax
c001e855:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e859:	50                   	push   eax
c001e85a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e85e:	50                   	push   eax
c001e85f:	53                   	push   ebx
c001e860:	e8 43 48 ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c001e865:	83 c4 10             	add    esp,0x10
c001e868:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e86d:	74 0a                	je     c001e879 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	68 7c c0 02 c0       	push   0xc002c07c
c001e877:	eb 19                	jmp    c001e892 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e879:	51                   	push   ecx
c001e87a:	51                   	push   ecx
c001e87b:	6a 01                	push   0x1
c001e87d:	53                   	push   ebx
c001e87e:	e8 79 45 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	85 c0                	test   eax,eax
c001e888:	74 24                	je     c001e8ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 95 c0 02 c0       	push   0xc002c095
c001e892:	e8 4c b7 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001e897:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	48                   	dec    eax
c001e8a0:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e8a5:	85 c0                	test   eax,eax
c001e8a7:	75 01                	jne    c001e8aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e8a9:	fb                   	sti    
c001e8aa:	31 f6                	xor    esi,esi
c001e8ac:	eb 58                	jmp    c001e906 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e8ae:	0f b7 ed             	movzx  ebp,bp
c001e8b1:	50                   	push   eax
c001e8b2:	0f b7 ff             	movzx  edi,di
c001e8b5:	50                   	push   eax
c001e8b6:	55                   	push   ebp
c001e8b7:	57                   	push   edi
c001e8b8:	e8 95 fd ff ff       	call   c001e652 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8bd:	5a                   	pop    edx
c001e8be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e8c0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e8c4:	51                   	push   ecx
c001e8c5:	50                   	push   eax
c001e8c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e8ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e8ce:	53                   	push   ebx
c001e8cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e8d2:	83 c4 14             	add    esp,0x14
c001e8d5:	53                   	push   ebx
c001e8d6:	e8 7f 45 ff ff       	call   c0012e5a <File::close()>
c001e8db:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	48                   	dec    eax
c001e8e4:	c6 05 e5 12 03 c0 00 	mov    BYTE PTR ds:0xc00312e5,0x0
c001e8eb:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001e8f0:	85 c0                	test   eax,eax
c001e8f2:	75 01                	jne    c001e8f5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e8f4:	fb                   	sti    
c001e8f5:	83 ec 0c             	sub    esp,0xc
c001e8f8:	ff 35 e8 12 03 c0    	push   DWORD PTR ds:0xc00312e8
c001e8fe:	e8 f5 f6 ff ff       	call   c001dff8 <unblockTask(ThreadControlBlock*)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	83 c4 2c             	add    esp,0x2c
c001e909:	89 f0                	mov    eax,esi
c001e90b:	5b                   	pop    ebx
c001e90c:	5e                   	pop    esi
c001e90d:	5f                   	pop    edi
c001e90e:	5d                   	pop    ebp
c001e90f:	c3                   	ret    

c001e910 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e910:	57                   	push   edi
c001e911:	56                   	push   esi
c001e912:	53                   	push   ebx
c001e913:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e91b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e91f:	83 e8 06             	sub    eax,0x6
c001e922:	0f b7 c0             	movzx  eax,ax
c001e925:	50                   	push   eax
c001e926:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e92b:	50                   	push   eax
c001e92c:	e8 21 fd ff ff       	call   c001e652 <Vm::realToLinear(unsigned short, unsigned short)>
c001e931:	5a                   	pop    edx
c001e932:	5e                   	pop    esi
c001e933:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e936:	8d 56 fa             	lea    edx,[esi-0x6]
c001e939:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e93f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e942:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e945:	83 c2 02             	add    edx,0x2
c001e948:	66 89 10             	mov    WORD PTR [eax],dx
c001e94b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e94e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e952:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e955:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e959:	89 d6                	mov    esi,edx
c001e95b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e961:	66 81 e6 ff fd       	and    si,0xfdff
c001e966:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e96a:	74 07                	je     c001e973 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e96c:	89 d6                	mov    esi,edx
c001e96e:	66 81 ce 00 02       	or     si,0x200
c001e973:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e97c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e980:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e988:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e98b:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e993:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e996:	5b                   	pop    ebx
c001e997:	5e                   	pop    esi
c001e998:	5f                   	pop    edi
c001e999:	c3                   	ret    

c001e99a <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e99a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e99f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9a4:	c1 e0 04             	shl    eax,0x4
c001e9a7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e9aa:	c3                   	ret    

c001e9ab <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e9ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9b5:	c1 e0 04             	shl    eax,0x4
c001e9b8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e9bc:	c3                   	ret    

c001e9bd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e9bd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9c2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9c7:	c1 e0 04             	shl    eax,0x4
c001e9ca:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e9cd:	c3                   	ret    

c001e9ce <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e9ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9d8:	c1 e0 04             	shl    eax,0x4
c001e9db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9df:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e9e2:	c3                   	ret    

c001e9e3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e9e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9ed:	c1 e0 04             	shl    eax,0x4
c001e9f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9f4:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e9f8:	c3                   	ret    

c001e9f9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e9f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea03:	c1 e0 04             	shl    eax,0x4
c001ea06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea0a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ea0d:	c3                   	ret    

c001ea0e <Vm::faultHandler(regs*)>:
c001ea0e:	55                   	push   ebp
c001ea0f:	57                   	push   edi
c001ea10:	56                   	push   esi
c001ea11:	53                   	push   ebx
c001ea12:	83 ec 1c             	sub    esp,0x1c
c001ea15:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ea1c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ea20:	0f b7 f8             	movzx  edi,ax
c001ea23:	52                   	push   edx
c001ea24:	0f b7 c0             	movzx  eax,ax
c001ea27:	50                   	push   eax
c001ea28:	e8 25 fc ff ff       	call   c001e652 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea2d:	5a                   	pop    edx
c001ea2e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ea31:	59                   	pop    ecx
c001ea32:	89 c1                	mov    ecx,eax
c001ea34:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea44:	0f b7 c5             	movzx  eax,bp
c001ea47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea4b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ea4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea53:	e8 fa fb ff ff       	call   c001e652 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea58:	5e                   	pop    esi
c001ea59:	be 06 00 00 00       	mov    esi,0x6
c001ea5e:	5a                   	pop    edx
c001ea5f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ea64:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ea69:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ea6c:	80 fa 9d             	cmp    dl,0x9d
c001ea6f:	0f 84 2c 02 00 00    	je     c001eca1 <Vm::faultHandler(regs*)+0x293>
c001ea75:	0f 87 91 00 00 00    	ja     c001eb0c <Vm::faultHandler(regs*)+0xfe>
c001ea7b:	80 fa 66             	cmp    dl,0x66
c001ea7e:	0f 84 98 01 00 00    	je     c001ec1c <Vm::faultHandler(regs*)+0x20e>
c001ea84:	77 47                	ja     c001eacd <Vm::faultHandler(regs*)+0xbf>
c001ea86:	80 fa 36             	cmp    dl,0x36
c001ea89:	0f 84 80 01 00 00    	je     c001ec0f <Vm::faultHandler(regs*)+0x201>
c001ea8f:	77 1a                	ja     c001eaab <Vm::faultHandler(regs*)+0x9d>
c001ea91:	80 fa 26             	cmp    dl,0x26
c001ea94:	0f 84 4e 01 00 00    	je     c001ebe8 <Vm::faultHandler(regs*)+0x1da>
c001ea9a:	80 fa 2e             	cmp    dl,0x2e
c001ea9d:	0f 85 e2 05 00 00    	jne    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eaa3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaa6:	31 f6                	xor    esi,esi
c001eaa8:	41                   	inc    ecx
c001eaa9:	eb be                	jmp    c001ea69 <Vm::faultHandler(regs*)+0x5b>
c001eaab:	80 fa 64             	cmp    dl,0x64
c001eaae:	0f 84 41 01 00 00    	je     c001ebf5 <Vm::faultHandler(regs*)+0x1e7>
c001eab4:	0f 87 48 01 00 00    	ja     c001ec02 <Vm::faultHandler(regs*)+0x1f4>
c001eaba:	80 fa 3e             	cmp    dl,0x3e
c001eabd:	0f 85 c2 05 00 00    	jne    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eac3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eac6:	be 01 00 00 00       	mov    esi,0x1
c001eacb:	eb db                	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001eacd:	80 fa 6d             	cmp    dl,0x6d
c001ead0:	0f 84 ec 02 00 00    	je     c001edc2 <Vm::faultHandler(regs*)+0x3b4>
c001ead6:	77 17                	ja     c001eaef <Vm::faultHandler(regs*)+0xe1>
c001ead8:	80 fa 67             	cmp    dl,0x67
c001eadb:	0f 84 48 01 00 00    	je     c001ec29 <Vm::faultHandler(regs*)+0x21b>
c001eae1:	80 fa 6c             	cmp    dl,0x6c
c001eae4:	0f 84 69 02 00 00    	je     c001ed53 <Vm::faultHandler(regs*)+0x345>
c001eaea:	e9 96 05 00 00       	jmp    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eaef:	80 fa 6f             	cmp    dl,0x6f
c001eaf2:	0f 84 f4 03 00 00    	je     c001eeec <Vm::faultHandler(regs*)+0x4de>
c001eaf8:	0f 82 59 03 00 00    	jb     c001ee57 <Vm::faultHandler(regs*)+0x449>
c001eafe:	80 fa 9c             	cmp    dl,0x9c
c001eb01:	0f 84 2f 01 00 00    	je     c001ec36 <Vm::faultHandler(regs*)+0x228>
c001eb07:	e9 79 05 00 00       	jmp    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eb0c:	80 fa ec             	cmp    dl,0xec
c001eb0f:	0f 84 14 05 00 00    	je     c001f029 <Vm::faultHandler(regs*)+0x61b>
c001eb15:	77 7b                	ja     c001eb92 <Vm::faultHandler(regs*)+0x184>
c001eb17:	80 fa e4             	cmp    dl,0xe4
c001eb1a:	0f 84 93 04 00 00    	je     c001efb3 <Vm::faultHandler(regs*)+0x5a5>
c001eb20:	77 53                	ja     c001eb75 <Vm::faultHandler(regs*)+0x167>
c001eb22:	80 fa cd             	cmp    dl,0xcd
c001eb25:	0f 84 d9 01 00 00    	je     c001ed04 <Vm::faultHandler(regs*)+0x2f6>
c001eb2b:	80 fa cf             	cmp    dl,0xcf
c001eb2e:	0f 85 51 05 00 00    	jne    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eb34:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb37:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001eb3a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001eb3e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001eb41:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001eb45:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb4b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb4e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001eb52:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb58:	66 c1 e8 09          	shr    ax,0x9
c001eb5c:	83 e0 01             	and    eax,0x1
c001eb5f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb62:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb65:	83 c0 06             	add    eax,0x6
c001eb68:	25 ff ff 00 00       	and    eax,0xffff
c001eb6d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb70:	e9 0c 05 00 00       	jmp    c001f081 <Vm::faultHandler(regs*)+0x673>
c001eb75:	80 fa e6             	cmp    dl,0xe6
c001eb78:	0f 84 7f 04 00 00    	je     c001effd <Vm::faultHandler(regs*)+0x5ef>
c001eb7e:	0f 82 4b 04 00 00    	jb     c001efcf <Vm::faultHandler(regs*)+0x5c1>
c001eb84:	80 fa e7             	cmp    dl,0xe7
c001eb87:	0f 84 87 04 00 00    	je     c001f014 <Vm::faultHandler(regs*)+0x606>
c001eb8d:	e9 f3 04 00 00       	jmp    c001f085 <Vm::faultHandler(regs*)+0x677>
c001eb92:	80 fa ef             	cmp    dl,0xef
c001eb95:	0f 84 d1 04 00 00    	je     c001f06c <Vm::faultHandler(regs*)+0x65e>
c001eb9b:	77 28                	ja     c001ebc5 <Vm::faultHandler(regs*)+0x1b7>
c001eb9d:	80 fa ed             	cmp    dl,0xed
c001eba0:	0f 84 9f 04 00 00    	je     c001f045 <Vm::faultHandler(regs*)+0x637>
c001eba6:	80 fa ee             	cmp    dl,0xee
c001eba9:	0f 85 d6 04 00 00    	jne    c001f085 <Vm::faultHandler(regs*)+0x677>
c001ebaf:	50                   	push   eax
c001ebb0:	50                   	push   eax
c001ebb1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ebb5:	50                   	push   eax
c001ebb6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebba:	50                   	push   eax
c001ebbb:	e8 5c fa ff ff       	call   c001e61c <Vm::outbv(unsigned short, unsigned char)>
c001ebc0:	e9 9f 04 00 00       	jmp    c001f064 <Vm::faultHandler(regs*)+0x656>
c001ebc5:	80 fa fa             	cmp    dl,0xfa
c001ebc8:	0f 84 69 01 00 00    	je     c001ed37 <Vm::faultHandler(regs*)+0x329>
c001ebce:	80 fa fb             	cmp    dl,0xfb
c001ebd1:	0f 84 6e 01 00 00    	je     c001ed45 <Vm::faultHandler(regs*)+0x337>
c001ebd7:	80 fa f3             	cmp    dl,0xf3
c001ebda:	0f 85 a5 04 00 00    	jne    c001f085 <Vm::faultHandler(regs*)+0x677>
c001ebe0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebe3:	e9 c0 fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ebe8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebeb:	be 02 00 00 00       	mov    esi,0x2
c001ebf0:	e9 b3 fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ebf5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ebf8:	be 03 00 00 00       	mov    esi,0x3
c001ebfd:	e9 a6 fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ec02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec05:	be 04 00 00 00       	mov    esi,0x4
c001ec0a:	e9 99 fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ec0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec12:	be 05 00 00 00       	mov    esi,0x5
c001ec17:	e9 8c fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ec1c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec1f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ec24:	e9 7f fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ec29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ec2c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ec31:	e9 72 fe ff ff       	jmp    c001eaa8 <Vm::faultHandler(regs*)+0x9a>
c001ec36:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ec39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ec3d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec42:	74 30                	je     c001ec74 <Vm::faultHandler(regs*)+0x266>
c001ec44:	83 e9 04             	sub    ecx,0x4
c001ec47:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ec4d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec53:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec56:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec5f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec63:	0f 84 15 04 00 00    	je     c001f07e <Vm::faultHandler(regs*)+0x670>
c001ec69:	80 ce 02             	or     dh,0x2
c001ec6c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ec6f:	e9 0a 04 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001ec74:	83 e9 02             	sub    ecx,0x2
c001ec77:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ec7d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ec80:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ec8a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ec8e:	74 05                	je     c001ec95 <Vm::faultHandler(regs*)+0x287>
c001ec90:	80 ce 02             	or     dh,0x2
c001ec93:	eb 03                	jmp    c001ec98 <Vm::faultHandler(regs*)+0x28a>
c001ec95:	80 e6 fd             	and    dh,0xfd
c001ec98:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ec9c:	e9 dd 03 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001eca1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eca6:	74 2a                	je     c001ecd2 <Vm::faultHandler(regs*)+0x2c4>
c001eca8:	8b 10                	mov    edx,DWORD PTR [eax]
c001ecaa:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ecb0:	81 ca 00 02 02 00    	or     edx,0x20200
c001ecb6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ecb9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecbb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ecc1:	c1 e8 09             	shr    eax,0x9
c001ecc4:	83 e0 01             	and    eax,0x1
c001ecc7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ecca:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eccd:	83 c0 04             	add    eax,0x4
c001ecd0:	eb 25                	jmp    c001ecf7 <Vm::faultHandler(regs*)+0x2e9>
c001ecd2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ecd5:	81 ca 00 02 02 00    	or     edx,0x20200
c001ecdb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ecde:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ece1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ece7:	66 c1 e8 09          	shr    ax,0x9
c001eceb:	83 e0 01             	and    eax,0x1
c001ecee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ecf1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ecf4:	83 c0 02             	add    eax,0x2
c001ecf7:	25 ff ff 00 00       	and    eax,0xffff
c001ecfc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ecff:	e9 7a 03 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001ed04:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed08:	3c ee                	cmp    al,0xee
c001ed0a:	75 10                	jne    c001ed1c <Vm::faultHandler(regs*)+0x30e>
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ed12:	e8 a2 f9 ff ff       	call   c001e6b9 <Vm::mainloop3(unsigned long)>
c001ed17:	e9 4b 03 00 00       	jmp    c001f067 <Vm::faultHandler(regs*)+0x659>
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed27:	51                   	push   ecx
c001ed28:	50                   	push   eax
c001ed29:	53                   	push   ebx
c001ed2a:	e8 e1 fb ff ff       	call   c001e910 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ed2f:	83 c4 20             	add    esp,0x20
c001ed32:	e9 4a 03 00 00       	jmp    c001f081 <Vm::faultHandler(regs*)+0x673>
c001ed37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed3c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed40:	e9 39 03 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001ed45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed4a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ed4e:	e9 2b 03 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001ed53:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ed56:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed5b:	74 2b                	je     c001ed88 <Vm::faultHandler(regs*)+0x37a>
c001ed5d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ed64:	76 22                	jbe    c001ed88 <Vm::faultHandler(regs*)+0x37a>
c001ed66:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed6a:	50                   	push   eax
c001ed6b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed6f:	50                   	push   eax
c001ed70:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed74:	50                   	push   eax
c001ed75:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed79:	50                   	push   eax
c001ed7a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed7e:	50                   	push   eax
c001ed7f:	6a 6c                	push   0x6c
c001ed81:	6a 6c                	push   0x6c
c001ed83:	e9 b9 01 00 00       	jmp    c001ef41 <Vm::faultHandler(regs*)+0x533>
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed8f:	0f b7 f6             	movzx  esi,si
c001ed92:	50                   	push   eax
c001ed93:	e8 71 f8 ff ff       	call   c001e609 <Vm::inbv(unsigned short)>
c001ed98:	83 c4 0c             	add    esp,0xc
c001ed9b:	0f b6 c0             	movzx  eax,al
c001ed9e:	50                   	push   eax
c001ed9f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eda3:	50                   	push   eax
c001eda4:	56                   	push   esi
c001eda5:	e8 24 fc ff ff       	call   c001e9ce <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001edaa:	83 c4 10             	add    esp,0x10
c001edad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edb0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edb4:	74 03                	je     c001edb9 <Vm::faultHandler(regs*)+0x3ab>
c001edb6:	48                   	dec    eax
c001edb7:	eb 01                	jmp    c001edba <Vm::faultHandler(regs*)+0x3ac>
c001edb9:	40                   	inc    eax
c001edba:	0f b7 c0             	movzx  eax,ax
c001edbd:	e9 8d 00 00 00       	jmp    c001ee4f <Vm::faultHandler(regs*)+0x441>
c001edc2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001edc5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001edc8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001edcd:	74 29                	je     c001edf8 <Vm::faultHandler(regs*)+0x3ea>
c001edcf:	3d ff ff 00 00       	cmp    eax,0xffff
c001edd4:	76 22                	jbe    c001edf8 <Vm::faultHandler(regs*)+0x3ea>
c001edd6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edda:	50                   	push   eax
c001eddb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eddf:	50                   	push   eax
c001ede0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ede4:	50                   	push   eax
c001ede5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ede9:	50                   	push   eax
c001edea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edee:	50                   	push   eax
c001edef:	6a 6d                	push   0x6d
c001edf1:	6a 6d                	push   0x6d
c001edf3:	e9 49 01 00 00       	jmp    c001ef41 <Vm::faultHandler(regs*)+0x533>
c001edf8:	0f b7 c8             	movzx  ecx,ax
c001edfb:	0f b7 f6             	movzx  esi,si
c001edfe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee01:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee06:	74 20                	je     c001ee28 <Vm::faultHandler(regs*)+0x41a>
c001ee08:	ed                   	in     eax,dx
c001ee09:	55                   	push   ebp
c001ee0a:	50                   	push   eax
c001ee0b:	51                   	push   ecx
c001ee0c:	56                   	push   esi
c001ee0d:	e8 e7 fb ff ff       	call   c001e9f9 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ee12:	83 c4 10             	add    esp,0x10
c001ee15:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee18:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee1c:	74 05                	je     c001ee23 <Vm::faultHandler(regs*)+0x415>
c001ee1e:	83 e8 04             	sub    eax,0x4
c001ee21:	eb 27                	jmp    c001ee4a <Vm::faultHandler(regs*)+0x43c>
c001ee23:	83 c0 04             	add    eax,0x4
c001ee26:	eb 22                	jmp    c001ee4a <Vm::faultHandler(regs*)+0x43c>
c001ee28:	66 ed                	in     ax,dx
c001ee2a:	0f b7 c0             	movzx  eax,ax
c001ee2d:	57                   	push   edi
c001ee2e:	50                   	push   eax
c001ee2f:	51                   	push   ecx
c001ee30:	56                   	push   esi
c001ee31:	e8 ad fb ff ff       	call   c001e9e3 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ee36:	83 c4 10             	add    esp,0x10
c001ee39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ee3c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ee40:	74 05                	je     c001ee47 <Vm::faultHandler(regs*)+0x439>
c001ee42:	83 e8 02             	sub    eax,0x2
c001ee45:	eb 03                	jmp    c001ee4a <Vm::faultHandler(regs*)+0x43c>
c001ee47:	83 c0 02             	add    eax,0x2
c001ee4a:	25 ff ff 00 00       	and    eax,0xffff
c001ee4f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ee52:	e9 27 02 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001ee57:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee5a:	3c 05                	cmp    al,0x5
c001ee5c:	77 24                	ja     c001ee82 <Vm::faultHandler(regs*)+0x474>
c001ee5e:	0f b6 c0             	movzx  eax,al
c001ee61:	ff 24 85 08 c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3ef8]
c001ee68:	0f b7 fd             	movzx  edi,bp
c001ee6b:	eb 15                	jmp    c001ee82 <Vm::faultHandler(regs*)+0x474>
c001ee6d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ee71:	eb 0f                	jmp    c001ee82 <Vm::faultHandler(regs*)+0x474>
c001ee73:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ee77:	eb 09                	jmp    c001ee82 <Vm::faultHandler(regs*)+0x474>
c001ee79:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ee7d:	eb 03                	jmp    c001ee82 <Vm::faultHandler(regs*)+0x474>
c001ee7f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ee82:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ee85:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee8a:	74 29                	je     c001eeb5 <Vm::faultHandler(regs*)+0x4a7>
c001ee8c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee91:	76 22                	jbe    c001eeb5 <Vm::faultHandler(regs*)+0x4a7>
c001ee93:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee97:	50                   	push   eax
c001ee98:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee9c:	50                   	push   eax
c001ee9d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eea1:	50                   	push   eax
c001eea2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eea6:	50                   	push   eax
c001eea7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeab:	50                   	push   eax
c001eeac:	6a 6e                	push   0x6e
c001eeae:	6a 6e                	push   0x6e
c001eeb0:	e9 8c 00 00 00       	jmp    c001ef41 <Vm::faultHandler(regs*)+0x533>
c001eeb5:	0f b7 c0             	movzx  eax,ax
c001eeb8:	52                   	push   edx
c001eeb9:	52                   	push   edx
c001eeba:	50                   	push   eax
c001eebb:	57                   	push   edi
c001eebc:	e8 d9 fa ff ff       	call   c001e99a <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eec1:	59                   	pop    ecx
c001eec2:	0f b6 c0             	movzx  eax,al
c001eec5:	5e                   	pop    esi
c001eec6:	50                   	push   eax
c001eec7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eecb:	50                   	push   eax
c001eecc:	e8 4b f7 ff ff       	call   c001e61c <Vm::outbv(unsigned short, unsigned char)>
c001eed1:	83 c4 10             	add    esp,0x10
c001eed4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eed7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eedb:	74 03                	je     c001eee0 <Vm::faultHandler(regs*)+0x4d2>
c001eedd:	48                   	dec    eax
c001eede:	eb 01                	jmp    c001eee1 <Vm::faultHandler(regs*)+0x4d3>
c001eee0:	40                   	inc    eax
c001eee1:	0f b7 c0             	movzx  eax,ax
c001eee4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001eee7:	e9 92 01 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001eeec:	8d 46 ff             	lea    eax,[esi-0x1]
c001eeef:	3c 05                	cmp    al,0x5
c001eef1:	77 1f                	ja     c001ef12 <Vm::faultHandler(regs*)+0x504>
c001eef3:	0f b6 c0             	movzx  eax,al
c001eef6:	ff 24 85 20 c1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3ee0]
c001eefd:	89 ef                	mov    edi,ebp
c001eeff:	eb 11                	jmp    c001ef12 <Vm::faultHandler(regs*)+0x504>
c001ef01:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ef04:	eb 0c                	jmp    c001ef12 <Vm::faultHandler(regs*)+0x504>
c001ef06:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ef09:	eb 07                	jmp    c001ef12 <Vm::faultHandler(regs*)+0x504>
c001ef0b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ef0e:	eb 02                	jmp    c001ef12 <Vm::faultHandler(regs*)+0x504>
c001ef10:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ef12:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ef15:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ef1a:	74 37                	je     c001ef53 <Vm::faultHandler(regs*)+0x545>
c001ef1c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ef22:	76 2f                	jbe    c001ef53 <Vm::faultHandler(regs*)+0x545>
c001ef24:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef28:	50                   	push   eax
c001ef29:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef2d:	50                   	push   eax
c001ef2e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef32:	50                   	push   eax
c001ef33:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef37:	50                   	push   eax
c001ef38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef3c:	50                   	push   eax
c001ef3d:	6a 6f                	push   0x6f
c001ef3f:	6a 6f                	push   0x6f
c001ef41:	68 ae c0 02 c0       	push   0xc002c0ae
c001ef46:	e8 ee 38 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001ef4b:	83 c4 20             	add    esp,0x20
c001ef4e:	e9 86 01 00 00       	jmp    c001f0d9 <Vm::faultHandler(regs*)+0x6cb>
c001ef53:	0f b7 d7             	movzx  edx,di
c001ef56:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ef59:	0f b7 c6             	movzx  eax,si
c001ef5c:	81 e1 00 04 00 00    	and    ecx,0x400
c001ef62:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ef65:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef6a:	74 1d                	je     c001ef89 <Vm::faultHandler(regs*)+0x57b>
c001ef6c:	55                   	push   ebp
c001ef6d:	55                   	push   ebp
c001ef6e:	50                   	push   eax
c001ef6f:	52                   	push   edx
c001ef70:	e8 48 fa ff ff       	call   c001e9bd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	89 fa                	mov    edx,edi
c001ef7a:	ef                   	out    dx,eax
c001ef7b:	85 c9                	test   ecx,ecx
c001ef7d:	74 05                	je     c001ef84 <Vm::faultHandler(regs*)+0x576>
c001ef7f:	83 ee 04             	sub    esi,0x4
c001ef82:	eb 21                	jmp    c001efa5 <Vm::faultHandler(regs*)+0x597>
c001ef84:	83 c6 04             	add    esi,0x4
c001ef87:	eb 1c                	jmp    c001efa5 <Vm::faultHandler(regs*)+0x597>
c001ef89:	55                   	push   ebp
c001ef8a:	55                   	push   ebp
c001ef8b:	50                   	push   eax
c001ef8c:	52                   	push   edx
c001ef8d:	e8 19 fa ff ff       	call   c001e9ab <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ef92:	83 c4 10             	add    esp,0x10
c001ef95:	89 fa                	mov    edx,edi
c001ef97:	66 ef                	out    dx,ax
c001ef99:	85 c9                	test   ecx,ecx
c001ef9b:	74 05                	je     c001efa2 <Vm::faultHandler(regs*)+0x594>
c001ef9d:	83 ee 02             	sub    esi,0x2
c001efa0:	eb 03                	jmp    c001efa5 <Vm::faultHandler(regs*)+0x597>
c001efa2:	83 c6 02             	add    esi,0x2
c001efa5:	81 e6 ff ff 00 00    	and    esi,0xffff
c001efab:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001efae:	e9 cb 00 00 00       	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001efb3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efc1:	50                   	push   eax
c001efc2:	e8 42 f6 ff ff       	call   c001e609 <Vm::inbv(unsigned short)>
c001efc7:	0f b6 c0             	movzx  eax,al
c001efca:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001efcd:	eb 3f                	jmp    c001f00e <Vm::faultHandler(regs*)+0x600>
c001efcf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001efd4:	74 07                	je     c001efdd <Vm::faultHandler(regs*)+0x5cf>
c001efd6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001efda:	ed                   	in     eax,dx
c001efdb:	eb 14                	jmp    c001eff1 <Vm::faultHandler(regs*)+0x5e3>
c001efdd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001efe0:	66 31 f6             	xor    si,si
c001efe3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001efe6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001efea:	66 ed                	in     ax,dx
c001efec:	0f b7 c0             	movzx  eax,ax
c001efef:	09 f0                	or     eax,esi
c001eff1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eff4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eff8:	e9 84 00 00 00       	jmp    c001f081 <Vm::faultHandler(regs*)+0x673>
c001effd:	52                   	push   edx
c001effe:	52                   	push   edx
c001efff:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f003:	50                   	push   eax
c001f004:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f008:	50                   	push   eax
c001f009:	e8 0e f6 ff ff       	call   c001e61c <Vm::outbv(unsigned short, unsigned char)>
c001f00e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f012:	eb 53                	jmp    c001f067 <Vm::faultHandler(regs*)+0x659>
c001f014:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f017:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f01b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f020:	74 03                	je     c001f025 <Vm::faultHandler(regs*)+0x617>
c001f022:	ef                   	out    dx,eax
c001f023:	eb cf                	jmp    c001eff4 <Vm::faultHandler(regs*)+0x5e6>
c001f025:	66 ef                	out    dx,ax
c001f027:	eb cb                	jmp    c001eff4 <Vm::faultHandler(regs*)+0x5e6>
c001f029:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f037:	50                   	push   eax
c001f038:	e8 cc f5 ff ff       	call   c001e609 <Vm::inbv(unsigned short)>
c001f03d:	0f b6 c0             	movzx  eax,al
c001f040:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f043:	eb 1f                	jmp    c001f064 <Vm::faultHandler(regs*)+0x656>
c001f045:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f048:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f04d:	74 03                	je     c001f052 <Vm::faultHandler(regs*)+0x644>
c001f04f:	ed                   	in     eax,dx
c001f050:	eb 0d                	jmp    c001f05f <Vm::faultHandler(regs*)+0x651>
c001f052:	66 ed                	in     ax,dx
c001f054:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f057:	0f b7 c0             	movzx  eax,ax
c001f05a:	66 31 d2             	xor    dx,dx
c001f05d:	09 d0                	or     eax,edx
c001f05f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f062:	eb 1a                	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001f064:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	eb 15                	jmp    c001f081 <Vm::faultHandler(regs*)+0x673>
c001f06c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f06f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f072:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f077:	74 03                	je     c001f07c <Vm::faultHandler(regs*)+0x66e>
c001f079:	ef                   	out    dx,eax
c001f07a:	eb 02                	jmp    c001f07e <Vm::faultHandler(regs*)+0x670>
c001f07c:	66 ef                	out    dx,ax
c001f07e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f081:	b0 01                	mov    al,0x1
c001f083:	eb 56                	jmp    c001f0db <Vm::faultHandler(regs*)+0x6cd>
c001f085:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f089:	50                   	push   eax
c001f08a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f08e:	50                   	push   eax
c001f08f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f093:	50                   	push   eax
c001f094:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f098:	50                   	push   eax
c001f099:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f09d:	50                   	push   eax
c001f09e:	52                   	push   edx
c001f09f:	52                   	push   edx
c001f0a0:	68 db c0 02 c0       	push   0xc002c0db
c001f0a5:	e8 8f 37 ff ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c001f0aa:	83 c4 20             	add    esp,0x20
c001f0ad:	83 ec 0c             	sub    esp,0xc
c001f0b0:	6a 60                	push   0x60
c001f0b2:	e8 52 f5 ff ff       	call   c001e609 <Vm::inbv(unsigned short)>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	3c 1c                	cmp    al,0x1c
c001f0bc:	74 04                	je     c001f0c2 <Vm::faultHandler(regs*)+0x6b4>
c001f0be:	3c 5a                	cmp    al,0x5a
c001f0c0:	75 eb                	jne    c001f0ad <Vm::faultHandler(regs*)+0x69f>
c001f0c2:	3c 5a                	cmp    al,0x5a
c001f0c4:	74 04                	je     c001f0ca <Vm::faultHandler(regs*)+0x6bc>
c001f0c6:	3c 1c                	cmp    al,0x1c
c001f0c8:	75 0f                	jne    c001f0d9 <Vm::faultHandler(regs*)+0x6cb>
c001f0ca:	83 ec 0c             	sub    esp,0xc
c001f0cd:	6a 60                	push   0x60
c001f0cf:	e8 35 f5 ff ff       	call   c001e609 <Vm::inbv(unsigned short)>
c001f0d4:	83 c4 10             	add    esp,0x10
c001f0d7:	eb e9                	jmp    c001f0c2 <Vm::faultHandler(regs*)+0x6b4>
c001f0d9:	31 c0                	xor    eax,eax
c001f0db:	83 c4 1c             	add    esp,0x1c
c001f0de:	5b                   	pop    ebx
c001f0df:	5e                   	pop    esi
c001f0e0:	5f                   	pop    edi
c001f0e1:	5d                   	pop    ebp
c001f0e2:	c3                   	ret    

c001f0e3 <Vm::fpuInternalTo32(unsigned long long)>:
c001f0e3:	57                   	push   edi
c001f0e4:	56                   	push   esi
c001f0e5:	53                   	push   ebx
c001f0e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ee:	89 d6                	mov    esi,edx
c001f0f0:	89 d7                	mov    edi,edx
c001f0f2:	89 c1                	mov    ecx,eax
c001f0f4:	c1 ef 14             	shr    edi,0x14
c001f0f7:	89 d3                	mov    ebx,edx
c001f0f9:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f0ff:	31 d2                	xor    edx,edx
c001f101:	89 f8                	mov    eax,edi
c001f103:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f109:	bf ff 00 00 00       	mov    edi,0xff
c001f10e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f113:	83 d2 ff             	adc    edx,0xffffffff
c001f116:	39 c7                	cmp    edi,eax
c001f118:	bf 00 00 00 00       	mov    edi,0x0
c001f11d:	19 d7                	sbb    edi,edx
c001f11f:	72 15                	jb     c001f136 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f121:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f125:	c1 e0 17             	shl    eax,0x17
c001f128:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f12e:	09 f1                	or     ecx,esi
c001f130:	09 c1                	or     ecx,eax
c001f132:	89 cf                	mov    edi,ecx
c001f134:	eb 02                	jmp    c001f138 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f136:	31 ff                	xor    edi,edi
c001f138:	89 f8                	mov    eax,edi
c001f13a:	5b                   	pop    ebx
c001f13b:	5e                   	pop    esi
c001f13c:	5f                   	pop    edi
c001f13d:	c3                   	ret    

c001f13e <Vm::fpuInternalTo64(unsigned long long)>:
c001f13e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f146:	c3                   	ret    

c001f147 <Vm::fpu32ToInternal(unsigned int)>:
c001f147:	57                   	push   edi
c001f148:	31 ff                	xor    edi,edi
c001f14a:	56                   	push   esi
c001f14b:	53                   	push   ebx
c001f14c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f150:	89 cb                	mov    ebx,ecx
c001f152:	89 ce                	mov    esi,ecx
c001f154:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f15a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f160:	c1 e9 17             	shr    ecx,0x17
c001f163:	89 f0                	mov    eax,esi
c001f165:	0f b6 d1             	movzx  edx,cl
c001f168:	81 c2 80 03 00 00    	add    edx,0x380
c001f16e:	89 d1                	mov    ecx,edx
c001f170:	89 fa                	mov    edx,edi
c001f172:	c1 e1 14             	shl    ecx,0x14
c001f175:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f179:	c1 e0 1d             	shl    eax,0x1d
c001f17c:	89 d7                	mov    edi,edx
c001f17e:	89 c6                	mov    esi,eax
c001f180:	89 ca                	mov    edx,ecx
c001f182:	89 f0                	mov    eax,esi
c001f184:	09 fa                	or     edx,edi
c001f186:	09 da                	or     edx,ebx
c001f188:	5b                   	pop    ebx
c001f189:	5e                   	pop    esi
c001f18a:	5f                   	pop    edi
c001f18b:	c3                   	ret    

c001f18c <Vm::fpu64ToInternal(unsigned long long)>:
c001f18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f194:	c3                   	ret    

c001f195 <Vm::fpuFloatToLong(unsigned long long)>:
c001f195:	57                   	push   edi
c001f196:	31 c0                	xor    eax,eax
c001f198:	56                   	push   esi
c001f199:	31 d2                	xor    edx,edx
c001f19b:	53                   	push   ebx
c001f19c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1a4:	89 d9                	mov    ecx,ebx
c001f1a6:	c1 e9 14             	shr    ecx,0x14
c001f1a9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f1af:	89 cf                	mov    edi,ecx
c001f1b1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f1b7:	78 33                	js     c001f1ec <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f1b9:	89 d9                	mov    ecx,ebx
c001f1bb:	89 f0                	mov    eax,esi
c001f1bd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f1c3:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f1c9:	89 ca                	mov    edx,ecx
c001f1cb:	b9 34 00 00 00       	mov    ecx,0x34
c001f1d0:	29 f9                	sub    ecx,edi
c001f1d2:	0f ad d0             	shrd   eax,edx,cl
c001f1d5:	d3 fa                	sar    edx,cl
c001f1d7:	f6 c1 20             	test   cl,0x20
c001f1da:	74 05                	je     c001f1e1 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f1dc:	89 d0                	mov    eax,edx
c001f1de:	c1 fa 1f             	sar    edx,0x1f
c001f1e1:	85 db                	test   ebx,ebx
c001f1e3:	79 07                	jns    c001f1ec <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f1e5:	f7 d8                	neg    eax
c001f1e7:	83 d2 00             	adc    edx,0x0
c001f1ea:	f7 da                	neg    edx
c001f1ec:	5b                   	pop    ebx
c001f1ed:	5e                   	pop    esi
c001f1ee:	5f                   	pop    edi
c001f1ef:	c3                   	ret    

c001f1f0 <Vm::fpuULongToFloat(unsigned long long)>:
c001f1f0:	57                   	push   edi
c001f1f1:	31 c9                	xor    ecx,ecx
c001f1f3:	56                   	push   esi
c001f1f4:	53                   	push   ebx
c001f1f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1f9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f1fd:	0f ba e7 14          	bt     edi,0x14
c001f201:	72 07                	jb     c001f20a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f203:	01 f6                	add    esi,esi
c001f205:	11 ff                	adc    edi,edi
c001f207:	41                   	inc    ecx
c001f208:	eb f3                	jmp    c001f1fd <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f20a:	89 fa                	mov    edx,edi
c001f20c:	89 f0                	mov    eax,esi
c001f20e:	bb 33 04 00 00       	mov    ebx,0x433
c001f213:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f219:	29 cb                	sub    ebx,ecx
c001f21b:	89 d9                	mov    ecx,ebx
c001f21d:	5b                   	pop    ebx
c001f21e:	c1 e1 14             	shl    ecx,0x14
c001f221:	5e                   	pop    esi
c001f222:	09 ca                	or     edx,ecx
c001f224:	5f                   	pop    edi
c001f225:	c3                   	ret    

c001f226 <Vm::fpuLongToFloat(long long)>:
c001f226:	56                   	push   esi
c001f227:	31 c0                	xor    eax,eax
c001f229:	53                   	push   ebx
c001f22a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f22e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f232:	39 c8                	cmp    eax,ecx
c001f234:	19 d8                	sbb    eax,ebx
c001f236:	7d 04                	jge    c001f23c <Vm::fpuLongToFloat(long long)+0x16>
c001f238:	31 f6                	xor    esi,esi
c001f23a:	eb 0c                	jmp    c001f248 <Vm::fpuLongToFloat(long long)+0x22>
c001f23c:	f7 d9                	neg    ecx
c001f23e:	be 01 00 00 00       	mov    esi,0x1
c001f243:	83 d3 00             	adc    ebx,0x0
c001f246:	f7 db                	neg    ebx
c001f248:	31 c0                	xor    eax,eax
c001f24a:	0f ba e3 14          	bt     ebx,0x14
c001f24e:	72 07                	jb     c001f257 <Vm::fpuLongToFloat(long long)+0x31>
c001f250:	01 c9                	add    ecx,ecx
c001f252:	11 db                	adc    ebx,ebx
c001f254:	40                   	inc    eax
c001f255:	eb f3                	jmp    c001f24a <Vm::fpuLongToFloat(long long)+0x24>
c001f257:	ba 33 04 00 00       	mov    edx,0x433
c001f25c:	29 c2                	sub    edx,eax
c001f25e:	89 c8                	mov    eax,ecx
c001f260:	c1 e2 14             	shl    edx,0x14
c001f263:	89 d9                	mov    ecx,ebx
c001f265:	89 f3                	mov    ebx,esi
c001f267:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f26d:	09 ca                	or     edx,ecx
c001f26f:	84 db                	test   bl,bl
c001f271:	74 06                	je     c001f279 <Vm::fpuLongToFloat(long long)+0x53>
c001f273:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f279:	5b                   	pop    ebx
c001f27a:	5e                   	pop    esi
c001f27b:	c3                   	ret    

c001f27c <Vm::fpuGet0()>:
c001f27c:	31 c0                	xor    eax,eax
c001f27e:	31 d2                	xor    edx,edx
c001f280:	c3                   	ret    

c001f281 <Vm::fpuGet1()>:
c001f281:	b8 01 00 00 00       	mov    eax,0x1
c001f286:	31 d2                	xor    edx,edx
c001f288:	c3                   	ret    

c001f289 <Vm::fpuGetPi()>:
c001f289:	b8 03 00 00 00       	mov    eax,0x3
c001f28e:	31 d2                	xor    edx,edx
c001f290:	c3                   	ret    

c001f291 <Vm::fpuGetLog2E()>:
c001f291:	83 ec 18             	sub    esp,0x18
c001f294:	68 38 c1 02 c0       	push   0xc002c138
c001f299:	e8 45 ad ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f29e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2a3:	31 d2                	xor    edx,edx
c001f2a5:	83 c4 1c             	add    esp,0x1c
c001f2a8:	c3                   	ret    

c001f2a9 <Vm::fpuGetLogE2()>:
c001f2a9:	83 ec 18             	sub    esp,0x18
c001f2ac:	68 44 c1 02 c0       	push   0xc002c144
c001f2b1:	e8 2d ad ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f2b6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2bb:	31 d2                	xor    edx,edx
c001f2bd:	83 c4 1c             	add    esp,0x1c
c001f2c0:	c3                   	ret    

c001f2c1 <Vm::fpuGetLog210()>:
c001f2c1:	83 ec 18             	sub    esp,0x18
c001f2c4:	68 50 c1 02 c0       	push   0xc002c150
c001f2c9:	e8 15 ad ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f2ce:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2d3:	31 d2                	xor    edx,edx
c001f2d5:	83 c4 1c             	add    esp,0x1c
c001f2d8:	c3                   	ret    

c001f2d9 <Vm::fpuGetLog102()>:
c001f2d9:	83 ec 18             	sub    esp,0x18
c001f2dc:	68 5d c1 02 c0       	push   0xc002c15d
c001f2e1:	e8 fd ac ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f2e6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f2eb:	31 d2                	xor    edx,edx
c001f2ed:	83 c4 1c             	add    esp,0x1c
c001f2f0:	c3                   	ret    

c001f2f1 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2f5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f2f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2fd:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f301:	0f 92 c0             	setb   al
c001f304:	c3                   	ret    

c001f305 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f305:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f311:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f315:	09 c2                	or     edx,eax
c001f317:	0f 94 c0             	sete   al
c001f31a:	c3                   	ret    

c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f31b:	57                   	push   edi
c001f31c:	56                   	push   esi
c001f31d:	53                   	push   ebx
c001f31e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f322:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f326:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f32a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f32e:	57                   	push   edi
c001f32f:	56                   	push   esi
c001f330:	53                   	push   ebx
c001f331:	51                   	push   ecx
c001f332:	e8 ce ff ff ff       	call   c001f305 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f337:	83 c4 10             	add    esp,0x10
c001f33a:	88 c2                	mov    dl,al
c001f33c:	31 c0                	xor    eax,eax
c001f33e:	84 d2                	test   dl,dl
c001f340:	75 0c                	jne    c001f34e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f342:	57                   	push   edi
c001f343:	56                   	push   esi
c001f344:	53                   	push   ebx
c001f345:	51                   	push   ecx
c001f346:	e8 a6 ff ff ff       	call   c001f2f1 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f34b:	83 c4 10             	add    esp,0x10
c001f34e:	83 e0 01             	and    eax,0x1
c001f351:	5b                   	pop    ebx
c001f352:	88 c1                	mov    cl,al
c001f354:	83 e2 01             	and    edx,0x1
c001f357:	a0 21 13 03 c0       	mov    al,ds:0xc0031321
c001f35c:	c1 e2 06             	shl    edx,0x6
c001f35f:	83 e0 ba             	and    eax,0xffffffba
c001f362:	5e                   	pop    esi
c001f363:	09 c8                	or     eax,ecx
c001f365:	5f                   	pop    edi
c001f366:	09 d0                	or     eax,edx
c001f368:	a2 21 13 03 c0       	mov    ds:0xc0031321,al
c001f36d:	c3                   	ret    

c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f36e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f376:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f37a:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f37e:	c3                   	ret    

c001f37f <Vm::fpuAbs(unsigned long long)>:
c001f37f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f387:	c3                   	ret    

c001f388 <Vm::fpuChs(unsigned long long)>:
c001f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f390:	f7 d8                	neg    eax
c001f392:	83 d2 00             	adc    edx,0x0
c001f395:	f7 da                	neg    edx
c001f397:	c3                   	ret    

c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f398:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f39c:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f3a1:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f3a5:	eb c7                	jmp    c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f3a7:	53                   	push   ebx
c001f3a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3b8:	0f af ca             	imul   ecx,edx
c001f3bb:	0f af d8             	imul   ebx,eax
c001f3be:	f7 e2                	mul    edx
c001f3c0:	01 d9                	add    ecx,ebx
c001f3c2:	5b                   	pop    ebx
c001f3c3:	01 ca                	add    edx,ecx
c001f3c5:	c3                   	ret    

c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f3c6:	83 ec 0c             	sub    esp,0xc
c001f3c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d9:	e8 66 75 00 00       	call   c0026944 <__udivdi3>
c001f3de:	83 c4 1c             	add    esp,0x1c
c001f3e1:	c3                   	ret    

c001f3e2 <Vm::fpuSquare(unsigned long long)>:
c001f3e2:	50                   	push   eax
c001f3e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3eb:	52                   	push   edx
c001f3ec:	50                   	push   eax
c001f3ed:	52                   	push   edx
c001f3ee:	50                   	push   eax
c001f3ef:	e8 b3 ff ff ff       	call   c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3f4:	83 c4 14             	add    esp,0x14
c001f3f7:	c3                   	ret    

c001f3f8 <Vm::fpuGetReg(int)>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f400:	76 10                	jbe    c001f412 <Vm::fpuGetReg(int)+0x1a>
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	68 6a c1 02 c0       	push   0xc002c16a
c001f40a:	e8 d4 ab ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f40f:	83 c4 10             	add    esp,0x10
c001f412:	a0 21 13 03 c0       	mov    al,ds:0xc0031321
c001f417:	b9 08 00 00 00       	mov    ecx,0x8
c001f41c:	c0 e8 03             	shr    al,0x3
c001f41f:	83 e0 07             	and    eax,0x7
c001f422:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f426:	99                   	cdq    
c001f427:	f7 f9                	idiv   ecx
c001f429:	8b 04 d5 24 13 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcecdc]
c001f430:	8b 14 d5 28 13 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcecd8]
c001f437:	83 c4 0c             	add    esp,0xc
c001f43a:	c3                   	ret    

c001f43b <Vm::fpuSetReg(int, unsigned long long)>:
c001f43b:	57                   	push   edi
c001f43c:	56                   	push   esi
c001f43d:	52                   	push   edx
c001f43e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f442:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f446:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f44b:	76 10                	jbe    c001f45d <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	68 7d c1 02 c0       	push   0xc002c17d
c001f455:	e8 89 ab ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	a0 21 13 03 c0       	mov    al,ds:0xc0031321
c001f462:	b9 08 00 00 00       	mov    ecx,0x8
c001f467:	c0 e8 03             	shr    al,0x3
c001f46a:	83 e0 07             	and    eax,0x7
c001f46d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f471:	99                   	cdq    
c001f472:	f7 f9                	idiv   ecx
c001f474:	89 34 d5 24 13 03 c0 	mov    DWORD PTR [edx*8-0x3ffcecdc],esi
c001f47b:	89 3c d5 28 13 03 c0 	mov    DWORD PTR [edx*8-0x3ffcecd8],edi
c001f482:	58                   	pop    eax
c001f483:	5e                   	pop    esi
c001f484:	5f                   	pop    edi
c001f485:	c3                   	ret    

c001f486 <Vm::fpuPush(unsigned long long)>:
c001f486:	a0 21 13 03 c0       	mov    al,ds:0xc0031321
c001f48b:	c0 e8 03             	shr    al,0x3
c001f48e:	83 e0 07             	and    eax,0x7
c001f491:	83 c0 07             	add    eax,0x7
c001f494:	88 c2                	mov    dl,al
c001f496:	83 e0 07             	and    eax,0x7
c001f499:	83 e2 07             	and    edx,0x7
c001f49c:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f4a3:	8a 15 21 13 03 c0    	mov    dl,BYTE PTR ds:0xc0031321
c001f4a9:	83 e2 c7             	and    edx,0xffffffc7
c001f4ac:	09 ca                	or     edx,ecx
c001f4ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4b2:	88 15 21 13 03 c0    	mov    BYTE PTR ds:0xc0031321,dl
c001f4b8:	89 0c c5 28 13 03 c0 	mov    DWORD PTR [eax*8-0x3ffcecd8],ecx
c001f4bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f4c3:	89 14 c5 24 13 03 c0 	mov    DWORD PTR [eax*8-0x3ffcecdc],edx
c001f4ca:	a1 64 13 03 c0       	mov    eax,ds:0xc0031364
c001f4cf:	83 f8 08             	cmp    eax,0x8
c001f4d2:	75 08                	jne    c001f4dc <Vm::fpuPush(unsigned long long)+0x56>
c001f4d4:	80 0d 20 13 03 c0 40 	or     BYTE PTR ds:0xc0031320,0x40
c001f4db:	c3                   	ret    
c001f4dc:	40                   	inc    eax
c001f4dd:	a3 64 13 03 c0       	mov    ds:0xc0031364,eax
c001f4e2:	c3                   	ret    

c001f4e3 <Vm::fpuPop()>:
c001f4e3:	8a 0d 21 13 03 c0    	mov    cl,BYTE PTR ds:0xc0031321
c001f4e9:	53                   	push   ebx
c001f4ea:	c0 e9 03             	shr    cl,0x3
c001f4ed:	8a 1d 21 13 03 c0    	mov    bl,BYTE PTR ds:0xc0031321
c001f4f3:	83 e1 07             	and    ecx,0x7
c001f4f6:	83 e3 c7             	and    ebx,0xffffffc7
c001f4f9:	8b 04 cd 24 13 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcecdc]
c001f500:	8b 14 cd 28 13 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcecd8]
c001f507:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f50e:	83 e1 38             	and    ecx,0x38
c001f511:	09 d9                	or     ecx,ebx
c001f513:	88 0d 21 13 03 c0    	mov    BYTE PTR ds:0xc0031321,cl
c001f519:	8b 0d 64 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031364
c001f51f:	85 c9                	test   ecx,ecx
c001f521:	74 09                	je     c001f52c <Vm::fpuPop()+0x49>
c001f523:	49                   	dec    ecx
c001f524:	89 0d 64 13 03 c0    	mov    DWORD PTR ds:0xc0031364,ecx
c001f52a:	eb 07                	jmp    c001f533 <Vm::fpuPop()+0x50>
c001f52c:	80 0d 20 13 03 c0 40 	or     BYTE PTR ds:0xc0031320,0x40
c001f533:	5b                   	pop    ebx
c001f534:	c3                   	ret    

c001f535 <Vm::x87Handler(regs*)>:
c001f535:	55                   	push   ebp
c001f536:	57                   	push   edi
c001f537:	56                   	push   esi
c001f538:	53                   	push   ebx
c001f539:	83 ec 1c             	sub    esp,0x1c
c001f53c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f540:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f545:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f548:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f550:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f554:	50                   	push   eax
c001f555:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f559:	50                   	push   eax
c001f55a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f55e:	50                   	push   eax
c001f55f:	53                   	push   ebx
c001f560:	e8 97 a1 ff ff       	call   c00196fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f565:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f568:	83 c4 10             	add    esp,0x10
c001f56b:	89 c6                	mov    esi,eax
c001f56d:	80 fa d9             	cmp    dl,0xd9
c001f570:	0f 85 52 01 00 00    	jne    c001f6c8 <Vm::x87Handler(regs*)+0x193>
c001f576:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57a:	8d 50 20             	lea    edx,[eax+0x20]
c001f57d:	80 fa 0e             	cmp    dl,0xe
c001f580:	0f 87 86 00 00 00    	ja     c001f60c <Vm::x87Handler(regs*)+0xd7>
c001f586:	0f b6 d2             	movzx  edx,dl
c001f589:	ff 24 95 90 c1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3e70]
c001f590:	e8 e7 fc ff ff       	call   c001f27c <Vm::fpuGet0()>
c001f595:	eb 05                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f597:	e8 e5 fc ff ff       	call   c001f281 <Vm::fpuGet1()>
c001f59c:	57                   	push   edi
c001f59d:	57                   	push   edi
c001f59e:	52                   	push   edx
c001f59f:	50                   	push   eax
c001f5a0:	e8 e1 fe ff ff       	call   c001f486 <Vm::fpuPush(unsigned long long)>
c001f5a5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5a9:	83 c4 10             	add    esp,0x10
c001f5ac:	b0 01                	mov    al,0x1
c001f5ae:	e9 e3 09 00 00       	jmp    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001f5b3:	83 ec 0c             	sub    esp,0xc
c001f5b6:	6a 00                	push   0x0
c001f5b8:	e8 3b fe ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f5bd:	59                   	pop    ecx
c001f5be:	5e                   	pop    esi
c001f5bf:	52                   	push   edx
c001f5c0:	50                   	push   eax
c001f5c1:	e8 c2 fd ff ff       	call   c001f388 <Vm::fpuChs(unsigned long long)>
c001f5c6:	eb 13                	jmp    c001f5db <Vm::x87Handler(regs*)+0xa6>
c001f5c8:	83 ec 0c             	sub    esp,0xc
c001f5cb:	6a 00                	push   0x0
c001f5cd:	e8 26 fe ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f5d2:	5f                   	pop    edi
c001f5d3:	5d                   	pop    ebp
c001f5d4:	52                   	push   edx
c001f5d5:	50                   	push   eax
c001f5d6:	e8 a4 fd ff ff       	call   c001f37f <Vm::fpuAbs(unsigned long long)>
c001f5db:	83 c4 0c             	add    esp,0xc
c001f5de:	52                   	push   edx
c001f5df:	50                   	push   eax
c001f5e0:	6a 00                	push   0x0
c001f5e2:	e8 54 fe ff ff       	call   c001f43b <Vm::fpuSetReg(int, unsigned long long)>
c001f5e7:	eb bc                	jmp    c001f5a5 <Vm::x87Handler(regs*)+0x70>
c001f5e9:	e8 d3 fc ff ff       	call   c001f2c1 <Vm::fpuGetLog210()>
c001f5ee:	eb ac                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f5f0:	e8 9c fc ff ff       	call   c001f291 <Vm::fpuGetLog2E()>
c001f5f5:	eb a5                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f5f7:	e8 8d fc ff ff       	call   c001f289 <Vm::fpuGetPi()>
c001f5fc:	eb 9e                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f5fe:	e8 d6 fc ff ff       	call   c001f2d9 <Vm::fpuGetLog102()>
c001f603:	eb 97                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f605:	e8 9f fc ff ff       	call   c001f2a9 <Vm::fpuGetLogE2()>
c001f60a:	eb 90                	jmp    c001f59c <Vm::x87Handler(regs*)+0x67>
c001f60c:	8d 50 40             	lea    edx,[eax+0x40]
c001f60f:	80 fa 07             	cmp    dl,0x7
c001f612:	77 15                	ja     c001f629 <Vm::x87Handler(regs*)+0xf4>
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	2d c0 00 00 00       	sub    eax,0xc0
c001f61c:	50                   	push   eax
c001f61d:	e8 d6 fd ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f622:	59                   	pop    ecx
c001f623:	5e                   	pop    esi
c001f624:	e9 75 ff ff ff       	jmp    c001f59e <Vm::x87Handler(regs*)+0x69>
c001f629:	8d 50 38             	lea    edx,[eax+0x38]
c001f62c:	80 fa 07             	cmp    dl,0x7
c001f62f:	77 3c                	ja     c001f66d <Vm::x87Handler(regs*)+0x138>
c001f631:	83 ec 0c             	sub    esp,0xc
c001f634:	2d c8 00 00 00       	sub    eax,0xc8
c001f639:	50                   	push   eax
c001f63a:	e8 b9 fd ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f63f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f646:	89 c6                	mov    esi,eax
c001f648:	89 d7                	mov    edi,edx
c001f64a:	e8 a9 fd ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f64f:	83 c4 0c             	add    esp,0xc
c001f652:	52                   	push   edx
c001f653:	50                   	push   eax
c001f654:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f658:	2d c8 00 00 00       	sub    eax,0xc8
c001f65d:	50                   	push   eax
c001f65e:	e8 d8 fd ff ff       	call   c001f43b <Vm::fpuSetReg(int, unsigned long long)>
c001f663:	83 c4 0c             	add    esp,0xc
c001f666:	57                   	push   edi
c001f667:	56                   	push   esi
c001f668:	e9 73 ff ff ff       	jmp    c001f5e0 <Vm::x87Handler(regs*)+0xab>
c001f66d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f671:	84 d2                	test   dl,dl
c001f673:	75 0f                	jne    c001f684 <Vm::x87Handler(regs*)+0x14f>
c001f675:	83 ec 0c             	sub    esp,0xc
c001f678:	ff 36                	push   DWORD PTR [esi]
c001f67a:	e8 c8 fa ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001f67f:	e9 bf 00 00 00       	jmp    c001f743 <Vm::x87Handler(regs*)+0x20e>
c001f684:	80 fa 03             	cmp    dl,0x3
c001f687:	75 13                	jne    c001f69c <Vm::x87Handler(regs*)+0x167>
c001f689:	e8 55 fe ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001f68e:	55                   	push   ebp
c001f68f:	55                   	push   ebp
c001f690:	52                   	push   edx
c001f691:	50                   	push   eax
c001f692:	e8 4c fa ff ff       	call   c001f0e3 <Vm::fpuInternalTo32(unsigned long long)>
c001f697:	e9 88 00 00 00       	jmp    c001f724 <Vm::x87Handler(regs*)+0x1ef>
c001f69c:	80 fa 05             	cmp    dl,0x5
c001f69f:	75 0e                	jne    c001f6af <Vm::x87Handler(regs*)+0x17a>
c001f6a1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f6a4:	66 a3 22 13 03 c0    	mov    ds:0xc0031322,ax
c001f6aa:	e9 df 00 00 00       	jmp    c001f78e <Vm::x87Handler(regs*)+0x259>
c001f6af:	31 c0                	xor    eax,eax
c001f6b1:	80 fa 07             	cmp    dl,0x7
c001f6b4:	0f 85 dc 08 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001f6ba:	66 a1 22 13 03 c0    	mov    ax,ds:0xc0031322
c001f6c0:	66 89 06             	mov    WORD PTR [esi],ax
c001f6c3:	e9 c6 00 00 00       	jmp    c001f78e <Vm::x87Handler(regs*)+0x259>
c001f6c8:	80 fa d8             	cmp    dl,0xd8
c001f6cb:	0f 84 c9 00 00 00    	je     c001f79a <Vm::x87Handler(regs*)+0x265>
c001f6d1:	80 fa dc             	cmp    dl,0xdc
c001f6d4:	0f 84 0d 02 00 00    	je     c001f8e7 <Vm::x87Handler(regs*)+0x3b2>
c001f6da:	80 fa de             	cmp    dl,0xde
c001f6dd:	0f 84 cd 02 00 00    	je     c001f9b0 <Vm::x87Handler(regs*)+0x47b>
c001f6e3:	80 fa dd             	cmp    dl,0xdd
c001f6e6:	0f 84 5f 04 00 00    	je     c001fb4b <Vm::x87Handler(regs*)+0x616>
c001f6ec:	80 fa da             	cmp    dl,0xda
c001f6ef:	0f 84 24 05 00 00    	je     c001fc19 <Vm::x87Handler(regs*)+0x6e4>
c001f6f5:	80 fa df             	cmp    dl,0xdf
c001f6f8:	0f 84 68 05 00 00    	je     c001fc66 <Vm::x87Handler(regs*)+0x731>
c001f6fe:	31 c0                	xor    eax,eax
c001f700:	80 fa db             	cmp    dl,0xdb
c001f703:	0f 85 8d 08 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001f709:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f70d:	80 fa 03             	cmp    dl,0x3
c001f710:	0f 85 70 06 00 00    	jne    c001fd86 <Vm::x87Handler(regs*)+0x851>
c001f716:	e8 c8 fd ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001f71b:	55                   	push   ebp
c001f71c:	55                   	push   ebp
c001f71d:	52                   	push   edx
c001f71e:	50                   	push   eax
c001f71f:	e8 71 fa ff ff       	call   c001f195 <Vm::fpuFloatToLong(unsigned long long)>
c001f724:	83 c4 10             	add    esp,0x10
c001f727:	89 06                	mov    DWORD PTR [esi],eax
c001f729:	eb 63                	jmp    c001f78e <Vm::x87Handler(regs*)+0x259>
c001f72b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f72f:	84 d2                	test   dl,dl
c001f731:	0f 85 e6 05 00 00    	jne    c001fd1d <Vm::x87Handler(regs*)+0x7e8>
c001f737:	57                   	push   edi
c001f738:	57                   	push   edi
c001f739:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f73c:	ff 36                	push   DWORD PTR [esi]
c001f73e:	e8 49 fa ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001f743:	5e                   	pop    esi
c001f744:	5f                   	pop    edi
c001f745:	52                   	push   edx
c001f746:	50                   	push   eax
c001f747:	e8 3a fd ff ff       	call   c001f486 <Vm::fpuPush(unsigned long long)>
c001f74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f750:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f753:	e9 51 fe ff ff       	jmp    c001f5a9 <Vm::x87Handler(regs*)+0x74>
c001f758:	80 fa 03             	cmp    dl,0x3
c001f75b:	0f 85 d7 06 00 00    	jne    c001fe38 <Vm::x87Handler(regs*)+0x903>
c001f761:	57                   	push   edi
c001f762:	57                   	push   edi
c001f763:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f766:	ff 36                	push   DWORD PTR [esi]
c001f768:	e8 1f fa ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001f76d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f774:	89 c6                	mov    esi,eax
c001f776:	89 d7                	mov    edi,edx
c001f778:	e8 7b fc ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f77d:	57                   	push   edi
c001f77e:	56                   	push   esi
c001f77f:	52                   	push   edx
c001f780:	50                   	push   eax
c001f781:	e8 95 fb ff ff       	call   c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f786:	83 c4 20             	add    esp,0x20
c001f789:	e8 55 fd ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001f78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f792:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f795:	e9 12 fe ff ff       	jmp    c001f5ac <Vm::x87Handler(regs*)+0x77>
c001f79a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f79e:	8d 50 40             	lea    edx,[eax+0x40]
c001f7a1:	80 fa 07             	cmp    dl,0x7
c001f7a4:	77 29                	ja     c001f7cf <Vm::x87Handler(regs*)+0x29a>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	2d c0 00 00 00       	sub    eax,0xc0
c001f7ae:	50                   	push   eax
c001f7af:	e8 44 fc ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f7b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7bb:	89 c6                	mov    esi,eax
c001f7bd:	89 d7                	mov    edi,edx
c001f7bf:	e8 34 fc ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f7c4:	57                   	push   edi
c001f7c5:	56                   	push   esi
c001f7c6:	52                   	push   edx
c001f7c7:	50                   	push   eax
c001f7c8:	e8 a1 fb ff ff       	call   c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f7cd:	eb 2f                	jmp    c001f7fe <Vm::x87Handler(regs*)+0x2c9>
c001f7cf:	8d 50 38             	lea    edx,[eax+0x38]
c001f7d2:	80 fa 07             	cmp    dl,0x7
c001f7d5:	77 2f                	ja     c001f806 <Vm::x87Handler(regs*)+0x2d1>
c001f7d7:	83 ec 0c             	sub    esp,0xc
c001f7da:	2d c8 00 00 00       	sub    eax,0xc8
c001f7df:	50                   	push   eax
c001f7e0:	e8 13 fc ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f7e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7ec:	89 c6                	mov    esi,eax
c001f7ee:	89 d7                	mov    edi,edx
c001f7f0:	e8 03 fc ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f7f5:	57                   	push   edi
c001f7f6:	56                   	push   esi
c001f7f7:	52                   	push   edx
c001f7f8:	50                   	push   eax
c001f7f9:	e8 a9 fb ff ff       	call   c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7fe:	83 c4 1c             	add    esp,0x1c
c001f801:	e9 d8 fd ff ff       	jmp    c001f5de <Vm::x87Handler(regs*)+0xa9>
c001f806:	8d 50 30             	lea    edx,[eax+0x30]
c001f809:	80 fa 07             	cmp    dl,0x7
c001f80c:	77 0d                	ja     c001f81b <Vm::x87Handler(regs*)+0x2e6>
c001f80e:	83 ec 0c             	sub    esp,0xc
c001f811:	2d d0 00 00 00       	sub    eax,0xd0
c001f816:	e9 99 03 00 00       	jmp    c001fbb4 <Vm::x87Handler(regs*)+0x67f>
c001f81b:	8d 50 28             	lea    edx,[eax+0x28]
c001f81e:	80 fa 07             	cmp    dl,0x7
c001f821:	77 0d                	ja     c001f830 <Vm::x87Handler(regs*)+0x2fb>
c001f823:	83 ec 0c             	sub    esp,0xc
c001f826:	2d d8 00 00 00       	sub    eax,0xd8
c001f82b:	e9 c0 03 00 00       	jmp    c001fbf0 <Vm::x87Handler(regs*)+0x6bb>
c001f830:	8d 50 20             	lea    edx,[eax+0x20]
c001f833:	80 fa 07             	cmp    dl,0x7
c001f836:	77 1b                	ja     c001f853 <Vm::x87Handler(regs*)+0x31e>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	2d e0 00 00 00       	sub    eax,0xe0
c001f840:	50                   	push   eax
c001f841:	e8 b2 fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f846:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f84d:	89 c6                	mov    esi,eax
c001f84f:	89 d7                	mov    edi,edx
c001f851:	eb 22                	jmp    c001f875 <Vm::x87Handler(regs*)+0x340>
c001f853:	8d 50 18             	lea    edx,[eax+0x18]
c001f856:	80 fa 07             	cmp    dl,0x7
c001f859:	77 2d                	ja     c001f888 <Vm::x87Handler(regs*)+0x353>
c001f85b:	83 ec 0c             	sub    esp,0xc
c001f85e:	6a 00                	push   0x0
c001f860:	e8 93 fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f865:	89 c6                	mov    esi,eax
c001f867:	89 d7                	mov    edi,edx
c001f869:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f86d:	2d e8 00 00 00       	sub    eax,0xe8
c001f872:	89 04 24             	mov    DWORD PTR [esp],eax
c001f875:	e8 7e fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f87a:	57                   	push   edi
c001f87b:	56                   	push   esi
c001f87c:	52                   	push   edx
c001f87d:	50                   	push   eax
c001f87e:	e8 15 fb ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f883:	e9 76 ff ff ff       	jmp    c001f7fe <Vm::x87Handler(regs*)+0x2c9>
c001f888:	8d 50 10             	lea    edx,[eax+0x10]
c001f88b:	80 fa 07             	cmp    dl,0x7
c001f88e:	77 1b                	ja     c001f8ab <Vm::x87Handler(regs*)+0x376>
c001f890:	83 ec 0c             	sub    esp,0xc
c001f893:	2d f0 00 00 00       	sub    eax,0xf0
c001f898:	50                   	push   eax
c001f899:	e8 5a fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f89e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8a5:	89 c6                	mov    esi,eax
c001f8a7:	89 d7                	mov    edi,edx
c001f8a9:	eb 22                	jmp    c001f8cd <Vm::x87Handler(regs*)+0x398>
c001f8ab:	3c f7                	cmp    al,0xf7
c001f8ad:	0f 86 d1 03 00 00    	jbe    c001fc84 <Vm::x87Handler(regs*)+0x74f>
c001f8b3:	83 ec 0c             	sub    esp,0xc
c001f8b6:	6a 00                	push   0x0
c001f8b8:	e8 3b fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f8bd:	89 c6                	mov    esi,eax
c001f8bf:	89 d7                	mov    edi,edx
c001f8c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c5:	2d f8 00 00 00       	sub    eax,0xf8
c001f8ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8cd:	e8 26 fb ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f8d2:	57                   	push   edi
c001f8d3:	56                   	push   esi
c001f8d4:	52                   	push   edx
c001f8d5:	50                   	push   eax
c001f8d6:	e8 eb fa ff ff       	call   c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8db:	83 c4 1c             	add    esp,0x1c
c001f8de:	52                   	push   edx
c001f8df:	50                   	push   eax
c001f8e0:	6a 00                	push   0x0
c001f8e2:	e9 51 02 00 00       	jmp    c001fb38 <Vm::x87Handler(regs*)+0x603>
c001f8e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8eb:	8d 50 40             	lea    edx,[eax+0x40]
c001f8ee:	80 fa 07             	cmp    dl,0x7
c001f8f1:	77 37                	ja     c001f92a <Vm::x87Handler(regs*)+0x3f5>
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	2d c0 00 00 00       	sub    eax,0xc0
c001f8fb:	50                   	push   eax
c001f8fc:	e8 f7 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f901:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f908:	89 c6                	mov    esi,eax
c001f90a:	89 d7                	mov    edi,edx
c001f90c:	e8 e7 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f911:	57                   	push   edi
c001f912:	56                   	push   esi
c001f913:	52                   	push   edx
c001f914:	50                   	push   eax
c001f915:	e8 54 fa ff ff       	call   c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f91a:	83 c4 1c             	add    esp,0x1c
c001f91d:	52                   	push   edx
c001f91e:	50                   	push   eax
c001f91f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f923:	2d c0 00 00 00       	sub    eax,0xc0
c001f928:	eb 3d                	jmp    c001f967 <Vm::x87Handler(regs*)+0x432>
c001f92a:	8d 50 38             	lea    edx,[eax+0x38]
c001f92d:	80 fa 07             	cmp    dl,0x7
c001f930:	77 3b                	ja     c001f96d <Vm::x87Handler(regs*)+0x438>
c001f932:	83 ec 0c             	sub    esp,0xc
c001f935:	2d c8 00 00 00       	sub    eax,0xc8
c001f93a:	50                   	push   eax
c001f93b:	e8 b8 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f940:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f947:	89 c6                	mov    esi,eax
c001f949:	89 d7                	mov    edi,edx
c001f94b:	e8 a8 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f950:	57                   	push   edi
c001f951:	56                   	push   esi
c001f952:	52                   	push   edx
c001f953:	50                   	push   eax
c001f954:	e8 4e fa ff ff       	call   c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f959:	83 c4 1c             	add    esp,0x1c
c001f95c:	52                   	push   edx
c001f95d:	50                   	push   eax
c001f95e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f962:	2d c8 00 00 00       	sub    eax,0xc8
c001f967:	50                   	push   eax
c001f968:	e9 75 fc ff ff       	jmp    c001f5e2 <Vm::x87Handler(regs*)+0xad>
c001f96d:	83 c0 18             	add    eax,0x18
c001f970:	3c 07                	cmp    al,0x7
c001f972:	0f 87 3b 04 00 00    	ja     c001fdb3 <Vm::x87Handler(regs*)+0x87e>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	6a 00                	push   0x0
c001f97d:	e8 76 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f982:	89 c6                	mov    esi,eax
c001f984:	89 d7                	mov    edi,edx
c001f986:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f98a:	2d e8 00 00 00       	sub    eax,0xe8
c001f98f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f992:	e8 61 fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f997:	57                   	push   edi
c001f998:	56                   	push   esi
c001f999:	52                   	push   edx
c001f99a:	50                   	push   eax
c001f99b:	e8 f8 f9 ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9a0:	83 c4 1c             	add    esp,0x1c
c001f9a3:	52                   	push   edx
c001f9a4:	50                   	push   eax
c001f9a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9a9:	2d e8 00 00 00       	sub    eax,0xe8
c001f9ae:	eb b7                	jmp    c001f967 <Vm::x87Handler(regs*)+0x432>
c001f9b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b4:	8d 50 40             	lea    edx,[eax+0x40]
c001f9b7:	80 fa 07             	cmp    dl,0x7
c001f9ba:	77 3a                	ja     c001f9f6 <Vm::x87Handler(regs*)+0x4c1>
c001f9bc:	83 ec 0c             	sub    esp,0xc
c001f9bf:	2d c0 00 00 00       	sub    eax,0xc0
c001f9c4:	50                   	push   eax
c001f9c5:	e8 2e fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f9ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9d1:	89 c6                	mov    esi,eax
c001f9d3:	89 d7                	mov    edi,edx
c001f9d5:	e8 1e fa ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001f9da:	57                   	push   edi
c001f9db:	56                   	push   esi
c001f9dc:	52                   	push   edx
c001f9dd:	50                   	push   eax
c001f9de:	e8 8b f9 ff ff       	call   c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f9e3:	83 c4 1c             	add    esp,0x1c
c001f9e6:	52                   	push   edx
c001f9e7:	50                   	push   eax
c001f9e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ec:	2d c0 00 00 00       	sub    eax,0xc0
c001f9f1:	e9 9e 01 00 00       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x65f>
c001f9f6:	8d 50 20             	lea    edx,[eax+0x20]
c001f9f9:	80 fa 07             	cmp    dl,0x7
c001f9fc:	77 3a                	ja     c001fa38 <Vm::x87Handler(regs*)+0x503>
c001f9fe:	83 ec 0c             	sub    esp,0xc
c001fa01:	2d e0 00 00 00       	sub    eax,0xe0
c001fa06:	50                   	push   eax
c001fa07:	e8 ec f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fa0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa13:	89 c6                	mov    esi,eax
c001fa15:	89 d7                	mov    edi,edx
c001fa17:	e8 dc f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fa1c:	57                   	push   edi
c001fa1d:	56                   	push   esi
c001fa1e:	52                   	push   edx
c001fa1f:	50                   	push   eax
c001fa20:	e8 73 f9 ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa25:	83 c4 1c             	add    esp,0x1c
c001fa28:	52                   	push   edx
c001fa29:	50                   	push   eax
c001fa2a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa2e:	2d e0 00 00 00       	sub    eax,0xe0
c001fa33:	e9 5c 01 00 00       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x65f>
c001fa38:	8d 50 18             	lea    edx,[eax+0x18]
c001fa3b:	80 fa 07             	cmp    dl,0x7
c001fa3e:	77 3b                	ja     c001fa7b <Vm::x87Handler(regs*)+0x546>
c001fa40:	83 ec 0c             	sub    esp,0xc
c001fa43:	6a 00                	push   0x0
c001fa45:	e8 ae f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fa4a:	89 c6                	mov    esi,eax
c001fa4c:	89 d7                	mov    edi,edx
c001fa4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa52:	2d e8 00 00 00       	sub    eax,0xe8
c001fa57:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa5a:	e8 99 f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fa5f:	57                   	push   edi
c001fa60:	56                   	push   esi
c001fa61:	52                   	push   edx
c001fa62:	50                   	push   eax
c001fa63:	e8 30 f9 ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa68:	83 c4 1c             	add    esp,0x1c
c001fa6b:	52                   	push   edx
c001fa6c:	50                   	push   eax
c001fa6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa71:	2d e8 00 00 00       	sub    eax,0xe8
c001fa76:	e9 19 01 00 00       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x65f>
c001fa7b:	8d 50 38             	lea    edx,[eax+0x38]
c001fa7e:	80 fa 07             	cmp    dl,0x7
c001fa81:	77 37                	ja     c001faba <Vm::x87Handler(regs*)+0x585>
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	2d c8 00 00 00       	sub    eax,0xc8
c001fa8b:	50                   	push   eax
c001fa8c:	e8 67 f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fa91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa98:	89 c6                	mov    esi,eax
c001fa9a:	89 d7                	mov    edi,edx
c001fa9c:	e8 57 f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001faa1:	57                   	push   edi
c001faa2:	56                   	push   esi
c001faa3:	52                   	push   edx
c001faa4:	50                   	push   eax
c001faa5:	e8 fd f8 ff ff       	call   c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001faaa:	83 c4 1c             	add    esp,0x1c
c001faad:	52                   	push   edx
c001faae:	50                   	push   eax
c001faaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fab3:	2d c8 00 00 00       	sub    eax,0xc8
c001fab8:	eb 7d                	jmp    c001fb37 <Vm::x87Handler(regs*)+0x602>
c001faba:	3c f7                	cmp    al,0xf7
c001fabc:	76 38                	jbe    c001faf6 <Vm::x87Handler(regs*)+0x5c1>
c001fabe:	83 ec 0c             	sub    esp,0xc
c001fac1:	6a 00                	push   0x0
c001fac3:	e8 30 f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fac8:	89 c6                	mov    esi,eax
c001faca:	89 d7                	mov    edi,edx
c001facc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad0:	2d f8 00 00 00       	sub    eax,0xf8
c001fad5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fad8:	e8 1b f9 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fadd:	57                   	push   edi
c001fade:	56                   	push   esi
c001fadf:	52                   	push   edx
c001fae0:	50                   	push   eax
c001fae1:	e8 e0 f8 ff ff       	call   c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fae6:	83 c4 1c             	add    esp,0x1c
c001fae9:	52                   	push   edx
c001faea:	50                   	push   eax
c001faeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faef:	2d f8 00 00 00       	sub    eax,0xf8
c001faf4:	eb 41                	jmp    c001fb37 <Vm::x87Handler(regs*)+0x602>
c001faf6:	8d 50 10             	lea    edx,[eax+0x10]
c001faf9:	80 fa 07             	cmp    dl,0x7
c001fafc:	0f 87 5a 01 00 00    	ja     c001fc5c <Vm::x87Handler(regs*)+0x727>
c001fb02:	83 ec 0c             	sub    esp,0xc
c001fb05:	2d f0 00 00 00       	sub    eax,0xf0
c001fb0a:	50                   	push   eax
c001fb0b:	e8 e8 f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fb10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb17:	89 c6                	mov    esi,eax
c001fb19:	89 d7                	mov    edi,edx
c001fb1b:	e8 d8 f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fb20:	57                   	push   edi
c001fb21:	56                   	push   esi
c001fb22:	52                   	push   edx
c001fb23:	50                   	push   eax
c001fb24:	e8 9d f8 ff ff       	call   c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb29:	83 c4 1c             	add    esp,0x1c
c001fb2c:	52                   	push   edx
c001fb2d:	50                   	push   eax
c001fb2e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb32:	2d f0 00 00 00       	sub    eax,0xf0
c001fb37:	50                   	push   eax
c001fb38:	e8 fe f8 ff ff       	call   c001f43b <Vm::fpuSetReg(int, unsigned long long)>
c001fb3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb41:	e8 9d f9 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fb46:	e9 5e fa ff ff       	jmp    c001f5a9 <Vm::x87Handler(regs*)+0x74>
c001fb4b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb4f:	8d 50 30             	lea    edx,[eax+0x30]
c001fb52:	80 fa 07             	cmp    dl,0x7
c001fb55:	77 1d                	ja     c001fb74 <Vm::x87Handler(regs*)+0x63f>
c001fb57:	83 ec 0c             	sub    esp,0xc
c001fb5a:	6a 00                	push   0x0
c001fb5c:	e8 97 f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fb61:	83 c4 0c             	add    esp,0xc
c001fb64:	52                   	push   edx
c001fb65:	50                   	push   eax
c001fb66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6a:	2d d0 00 00 00       	sub    eax,0xd0
c001fb6f:	e9 f3 fd ff ff       	jmp    c001f967 <Vm::x87Handler(regs*)+0x432>
c001fb74:	8d 50 28             	lea    edx,[eax+0x28]
c001fb77:	80 fa 07             	cmp    dl,0x7
c001fb7a:	77 28                	ja     c001fba4 <Vm::x87Handler(regs*)+0x66f>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	6a 00                	push   0x0
c001fb81:	e8 72 f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fb86:	83 c4 0c             	add    esp,0xc
c001fb89:	52                   	push   edx
c001fb8a:	50                   	push   eax
c001fb8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb8f:	2d d8 00 00 00       	sub    eax,0xd8
c001fb94:	50                   	push   eax
c001fb95:	e8 a1 f8 ff ff       	call   c001f43b <Vm::fpuSetReg(int, unsigned long long)>
c001fb9a:	e8 44 f9 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fb9f:	e9 01 fa ff ff       	jmp    c001f5a5 <Vm::x87Handler(regs*)+0x70>
c001fba4:	8d 50 20             	lea    edx,[eax+0x20]
c001fba7:	80 fa 07             	cmp    dl,0x7
c001fbaa:	77 30                	ja     c001fbdc <Vm::x87Handler(regs*)+0x6a7>
c001fbac:	83 ec 0c             	sub    esp,0xc
c001fbaf:	2d e0 00 00 00       	sub    eax,0xe0
c001fbb4:	50                   	push   eax
c001fbb5:	e8 3e f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fbba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc1:	89 c6                	mov    esi,eax
c001fbc3:	89 d7                	mov    edi,edx
c001fbc5:	e8 2e f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fbca:	57                   	push   edi
c001fbcb:	56                   	push   esi
c001fbcc:	52                   	push   edx
c001fbcd:	50                   	push   eax
c001fbce:	e8 48 f7 ff ff       	call   c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbd3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbd7:	e9 54 02 00 00       	jmp    c001fe30 <Vm::x87Handler(regs*)+0x8fb>
c001fbdc:	8d 50 18             	lea    edx,[eax+0x18]
c001fbdf:	80 fa 07             	cmp    dl,0x7
c001fbe2:	0f 87 43 fb ff ff    	ja     c001f72b <Vm::x87Handler(regs*)+0x1f6>
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	2d e8 00 00 00       	sub    eax,0xe8
c001fbf0:	50                   	push   eax
c001fbf1:	e8 02 f8 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fbf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbfd:	89 c6                	mov    esi,eax
c001fbff:	89 d7                	mov    edi,edx
c001fc01:	e8 f2 f7 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fc06:	57                   	push   edi
c001fc07:	56                   	push   esi
c001fc08:	52                   	push   edx
c001fc09:	50                   	push   eax
c001fc0a:	e8 0c f7 ff ff       	call   c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc0f:	83 c4 20             	add    esp,0x20
c001fc12:	e8 cc f8 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fc17:	eb 62                	jmp    c001fc7b <Vm::x87Handler(regs*)+0x746>
c001fc19:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fc1d:	0f 85 0f 01 00 00    	jne    c001fd32 <Vm::x87Handler(regs*)+0x7fd>
c001fc23:	83 ec 0c             	sub    esp,0xc
c001fc26:	6a 01                	push   0x1
c001fc28:	e8 cb f7 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fc2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc34:	89 c6                	mov    esi,eax
c001fc36:	89 d7                	mov    edi,edx
c001fc38:	e8 bb f7 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fc3d:	57                   	push   edi
c001fc3e:	56                   	push   esi
c001fc3f:	52                   	push   edx
c001fc40:	50                   	push   eax
c001fc41:	e8 d5 f6 ff ff       	call   c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc46:	83 c4 20             	add    esp,0x20
c001fc49:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc4d:	e8 91 f8 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fc52:	e8 8c f8 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fc57:	e9 50 f9 ff ff       	jmp    c001f5ac <Vm::x87Handler(regs*)+0x77>
c001fc5c:	3c d9                	cmp    al,0xd9
c001fc5e:	0f 85 b5 02 00 00    	jne    c001ff19 <Vm::x87Handler(regs*)+0x9e4>
c001fc64:	eb bd                	jmp    c001fc23 <Vm::x87Handler(regs*)+0x6ee>
c001fc66:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fc6a:	0f 85 ea 02 00 00    	jne    c001ff5a <Vm::x87Handler(regs*)+0xa25>
c001fc70:	0f b7 05 20 13 03 c0 	movzx  eax,WORD PTR ds:0xc0031320
c001fc77:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fc7b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc7f:	e9 28 f9 ff ff       	jmp    c001f5ac <Vm::x87Handler(regs*)+0x77>
c001fc84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc88:	84 d2                	test   dl,dl
c001fc8a:	75 0f                	jne    c001fc9b <Vm::x87Handler(regs*)+0x766>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	ff 36                	push   DWORD PTR [esi]
c001fc91:	e8 b1 f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fc96:	e9 2c 01 00 00       	jmp    c001fdc7 <Vm::x87Handler(regs*)+0x892>
c001fc9b:	80 fa 01             	cmp    dl,0x1
c001fc9e:	75 0f                	jne    c001fcaf <Vm::x87Handler(regs*)+0x77a>
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	ff 36                	push   DWORD PTR [esi]
c001fca5:	e8 9d f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fcaa:	e9 81 02 00 00       	jmp    c001ff30 <Vm::x87Handler(regs*)+0x9fb>
c001fcaf:	80 fa 04             	cmp    dl,0x4
c001fcb2:	75 0f                	jne    c001fcc3 <Vm::x87Handler(regs*)+0x78e>
c001fcb4:	83 ec 0c             	sub    esp,0xc
c001fcb7:	ff 36                	push   DWORD PTR [esi]
c001fcb9:	e8 89 f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fcbe:	e9 86 01 00 00       	jmp    c001fe49 <Vm::x87Handler(regs*)+0x914>
c001fcc3:	80 fa 05             	cmp    dl,0x5
c001fcc6:	75 1b                	jne    c001fce3 <Vm::x87Handler(regs*)+0x7ae>
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	6a 00                	push   0x0
c001fccd:	e8 26 f7 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fcd2:	89 c7                	mov    edi,eax
c001fcd4:	89 d5                	mov    ebp,edx
c001fcd6:	58                   	pop    eax
c001fcd7:	ff 36                	push   DWORD PTR [esi]
c001fcd9:	e8 69 f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fcde:	e9 a3 01 00 00       	jmp    c001fe86 <Vm::x87Handler(regs*)+0x951>
c001fce3:	80 fa 06             	cmp    dl,0x6
c001fce6:	75 0f                	jne    c001fcf7 <Vm::x87Handler(regs*)+0x7c2>
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	ff 36                	push   DWORD PTR [esi]
c001fced:	e8 55 f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fcf2:	e9 ae 01 00 00       	jmp    c001fea5 <Vm::x87Handler(regs*)+0x970>
c001fcf7:	31 c0                	xor    eax,eax
c001fcf9:	80 fa 07             	cmp    dl,0x7
c001fcfc:	0f 85 94 02 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	6a 00                	push   0x0
c001fd07:	e8 ec f6 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fd0c:	89 c7                	mov    edi,eax
c001fd0e:	89 d5                	mov    ebp,edx
c001fd10:	58                   	pop    eax
c001fd11:	ff 36                	push   DWORD PTR [esi]
c001fd13:	e8 2f f4 ff ff       	call   c001f147 <Vm::fpu32ToInternal(unsigned int)>
c001fd18:	e9 cb 01 00 00       	jmp    c001fee8 <Vm::x87Handler(regs*)+0x9b3>
c001fd1d:	80 fa 03             	cmp    dl,0x3
c001fd20:	0f 85 d3 01 00 00    	jne    c001fef9 <Vm::x87Handler(regs*)+0x9c4>
c001fd26:	e8 b8 f7 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001fd2b:	51                   	push   ecx
c001fd2c:	51                   	push   ecx
c001fd2d:	e9 de 01 00 00       	jmp    c001ff10 <Vm::x87Handler(regs*)+0x9db>
c001fd32:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd36:	80 fa 01             	cmp    dl,0x1
c001fd39:	75 09                	jne    c001fd44 <Vm::x87Handler(regs*)+0x80f>
c001fd3b:	57                   	push   edi
c001fd3c:	57                   	push   edi
c001fd3d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd3f:	e9 e3 01 00 00       	jmp    c001ff27 <Vm::x87Handler(regs*)+0x9f2>
c001fd44:	80 fa 04             	cmp    dl,0x4
c001fd47:	75 12                	jne    c001fd5b <Vm::x87Handler(regs*)+0x826>
c001fd49:	31 d2                	xor    edx,edx
c001fd4b:	51                   	push   ecx
c001fd4c:	51                   	push   ecx
c001fd4d:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd4f:	52                   	push   edx
c001fd50:	50                   	push   eax
c001fd51:	e8 d0 f4 ff ff       	call   c001f226 <Vm::fpuLongToFloat(long long)>
c001fd56:	e9 ee 00 00 00       	jmp    c001fe49 <Vm::x87Handler(regs*)+0x914>
c001fd5b:	31 c0                	xor    eax,eax
c001fd5d:	80 fa 07             	cmp    dl,0x7
c001fd60:	0f 85 30 02 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001fd66:	83 ec 0c             	sub    esp,0xc
c001fd69:	6a 00                	push   0x0
c001fd6b:	e8 88 f6 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fd70:	89 c7                	mov    edi,eax
c001fd72:	89 d5                	mov    ebp,edx
c001fd74:	58                   	pop    eax
c001fd75:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd77:	5a                   	pop    edx
c001fd78:	31 d2                	xor    edx,edx
c001fd7a:	52                   	push   edx
c001fd7b:	50                   	push   eax
c001fd7c:	e8 a5 f4 ff ff       	call   c001f226 <Vm::fpuLongToFloat(long long)>
c001fd81:	e9 62 01 00 00       	jmp    c001fee8 <Vm::x87Handler(regs*)+0x9b3>
c001fd86:	84 d2                	test   dl,dl
c001fd88:	75 0d                	jne    c001fd97 <Vm::x87Handler(regs*)+0x862>
c001fd8a:	31 d2                	xor    edx,edx
c001fd8c:	55                   	push   ebp
c001fd8d:	55                   	push   ebp
c001fd8e:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd90:	52                   	push   edx
c001fd91:	50                   	push   eax
c001fd92:	e9 d3 01 00 00       	jmp    c001ff6a <Vm::x87Handler(regs*)+0xa35>
c001fd97:	31 c0                	xor    eax,eax
c001fd99:	80 fa 02             	cmp    dl,0x2
c001fd9c:	0f 85 f4 01 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	6a 00                	push   0x0
c001fda7:	e8 4c f6 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fdac:	59                   	pop    ecx
c001fdad:	5f                   	pop    edi
c001fdae:	e9 6a f9 ff ff       	jmp    c001f71d <Vm::x87Handler(regs*)+0x1e8>
c001fdb3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdb7:	84 d2                	test   dl,dl
c001fdb9:	75 2a                	jne    c001fde5 <Vm::x87Handler(regs*)+0x8b0>
c001fdbb:	50                   	push   eax
c001fdbc:	50                   	push   eax
c001fdbd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdc0:	ff 36                	push   DWORD PTR [esi]
c001fdc2:	e8 c5 f3 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fdc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdce:	89 c6                	mov    esi,eax
c001fdd0:	89 d7                	mov    edi,edx
c001fdd2:	e8 21 f6 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fdd7:	57                   	push   edi
c001fdd8:	56                   	push   esi
c001fdd9:	52                   	push   edx
c001fdda:	50                   	push   eax
c001fddb:	e8 8e f5 ff ff       	call   c001f36e <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fde0:	e9 64 01 00 00       	jmp    c001ff49 <Vm::x87Handler(regs*)+0xa14>
c001fde5:	80 fa 01             	cmp    dl,0x1
c001fde8:	75 11                	jne    c001fdfb <Vm::x87Handler(regs*)+0x8c6>
c001fdea:	50                   	push   eax
c001fdeb:	50                   	push   eax
c001fdec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdef:	ff 36                	push   DWORD PTR [esi]
c001fdf1:	e8 96 f3 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fdf6:	e9 35 01 00 00       	jmp    c001ff30 <Vm::x87Handler(regs*)+0x9fb>
c001fdfb:	80 fa 02             	cmp    dl,0x2
c001fdfe:	0f 85 54 f9 ff ff    	jne    c001f758 <Vm::x87Handler(regs*)+0x223>
c001fe04:	55                   	push   ebp
c001fe05:	55                   	push   ebp
c001fe06:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe09:	ff 36                	push   DWORD PTR [esi]
c001fe0b:	e8 7c f3 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fe10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe17:	89 c6                	mov    esi,eax
c001fe19:	89 d7                	mov    edi,edx
c001fe1b:	e8 d8 f5 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fe20:	57                   	push   edi
c001fe21:	56                   	push   esi
c001fe22:	52                   	push   edx
c001fe23:	50                   	push   eax
c001fe24:	e8 f2 f4 ff ff       	call   c001f31b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fe2d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe30:	83 c4 20             	add    esp,0x20
c001fe33:	e9 74 f7 ff ff       	jmp    c001f5ac <Vm::x87Handler(regs*)+0x77>
c001fe38:	80 fa 04             	cmp    dl,0x4
c001fe3b:	75 2a                	jne    c001fe67 <Vm::x87Handler(regs*)+0x932>
c001fe3d:	51                   	push   ecx
c001fe3e:	51                   	push   ecx
c001fe3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe42:	ff 36                	push   DWORD PTR [esi]
c001fe44:	e8 43 f3 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fe49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe50:	89 c6                	mov    esi,eax
c001fe52:	89 d7                	mov    edi,edx
c001fe54:	e8 9f f5 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fe59:	57                   	push   edi
c001fe5a:	56                   	push   esi
c001fe5b:	52                   	push   edx
c001fe5c:	50                   	push   eax
c001fe5d:	e8 36 f5 ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe62:	e9 e2 00 00 00       	jmp    c001ff49 <Vm::x87Handler(regs*)+0xa14>
c001fe67:	80 fa 05             	cmp    dl,0x5
c001fe6a:	75 28                	jne    c001fe94 <Vm::x87Handler(regs*)+0x95f>
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	6a 00                	push   0x0
c001fe71:	e8 82 f5 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fe76:	89 c7                	mov    edi,eax
c001fe78:	89 d5                	mov    ebp,edx
c001fe7a:	58                   	pop    eax
c001fe7b:	5a                   	pop    edx
c001fe7c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe7f:	ff 36                	push   DWORD PTR [esi]
c001fe81:	e8 06 f3 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fe86:	83 c4 10             	add    esp,0x10
c001fe89:	55                   	push   ebp
c001fe8a:	57                   	push   edi
c001fe8b:	52                   	push   edx
c001fe8c:	50                   	push   eax
c001fe8d:	e8 06 f5 ff ff       	call   c001f398 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe92:	eb 60                	jmp    c001fef4 <Vm::x87Handler(regs*)+0x9bf>
c001fe94:	80 fa 06             	cmp    dl,0x6
c001fe97:	75 2a                	jne    c001fec3 <Vm::x87Handler(regs*)+0x98e>
c001fe99:	51                   	push   ecx
c001fe9a:	51                   	push   ecx
c001fe9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe9e:	ff 36                	push   DWORD PTR [esi]
c001fea0:	e8 e7 f2 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feac:	89 c6                	mov    esi,eax
c001feae:	89 d7                	mov    edi,edx
c001feb0:	e8 43 f5 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001feb5:	57                   	push   edi
c001feb6:	56                   	push   esi
c001feb7:	52                   	push   edx
c001feb8:	50                   	push   eax
c001feb9:	e8 08 f5 ff ff       	call   c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001febe:	e9 86 00 00 00       	jmp    c001ff49 <Vm::x87Handler(regs*)+0xa14>
c001fec3:	31 c0                	xor    eax,eax
c001fec5:	80 fa 07             	cmp    dl,0x7
c001fec8:	0f 85 c8 00 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	6a 00                	push   0x0
c001fed3:	e8 20 f5 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001fed8:	89 c7                	mov    edi,eax
c001feda:	89 d5                	mov    ebp,edx
c001fedc:	58                   	pop    eax
c001fedd:	5a                   	pop    edx
c001fede:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fee1:	ff 36                	push   DWORD PTR [esi]
c001fee3:	e8 a4 f2 ff ff       	call   c001f18c <Vm::fpu64ToInternal(unsigned long long)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	55                   	push   ebp
c001feec:	57                   	push   edi
c001feed:	52                   	push   edx
c001feee:	50                   	push   eax
c001feef:	e8 d2 f4 ff ff       	call   c001f3c6 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fef4:	83 c4 0c             	add    esp,0xc
c001fef7:	eb 53                	jmp    c001ff4c <Vm::x87Handler(regs*)+0xa17>
c001fef9:	31 c0                	xor    eax,eax
c001fefb:	80 fa 02             	cmp    dl,0x2
c001fefe:	0f 85 92 00 00 00    	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	6a 00                	push   0x0
c001ff09:	e8 ea f4 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001ff0e:	59                   	pop    ecx
c001ff0f:	5f                   	pop    edi
c001ff10:	52                   	push   edx
c001ff11:	50                   	push   eax
c001ff12:	e8 27 f2 ff ff       	call   c001f13e <Vm::fpuInternalTo64(unsigned long long)>
c001ff17:	eb 70                	jmp    c001ff89 <Vm::x87Handler(regs*)+0xa54>
c001ff19:	31 c0                	xor    eax,eax
c001ff1b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ff20:	75 74                	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001ff22:	50                   	push   eax
c001ff23:	50                   	push   eax
c001ff24:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ff27:	31 d2                	xor    edx,edx
c001ff29:	52                   	push   edx
c001ff2a:	50                   	push   eax
c001ff2b:	e8 f6 f2 ff ff       	call   c001f226 <Vm::fpuLongToFloat(long long)>
c001ff30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff37:	89 c6                	mov    esi,eax
c001ff39:	89 d7                	mov    edi,edx
c001ff3b:	e8 b8 f4 ff ff       	call   c001f3f8 <Vm::fpuGetReg(int)>
c001ff40:	57                   	push   edi
c001ff41:	56                   	push   esi
c001ff42:	52                   	push   edx
c001ff43:	50                   	push   eax
c001ff44:	e8 5e f4 ff ff       	call   c001f3a7 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff49:	83 c4 1c             	add    esp,0x1c
c001ff4c:	52                   	push   edx
c001ff4d:	50                   	push   eax
c001ff4e:	6a 00                	push   0x0
c001ff50:	e8 e6 f4 ff ff       	call   c001f43b <Vm::fpuSetReg(int, unsigned long long)>
c001ff55:	e9 f2 f7 ff ff       	jmp    c001f74c <Vm::x87Handler(regs*)+0x217>
c001ff5a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff5e:	80 fa 05             	cmp    dl,0x5
c001ff61:	75 11                	jne    c001ff74 <Vm::x87Handler(regs*)+0xa3f>
c001ff63:	55                   	push   ebp
c001ff64:	55                   	push   ebp
c001ff65:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff68:	ff 36                	push   DWORD PTR [esi]
c001ff6a:	e8 81 f2 ff ff       	call   c001f1f0 <Vm::fpuULongToFloat(unsigned long long)>
c001ff6f:	e9 cf f7 ff ff       	jmp    c001f743 <Vm::x87Handler(regs*)+0x20e>
c001ff74:	31 c0                	xor    eax,eax
c001ff76:	80 fa 07             	cmp    dl,0x7
c001ff79:	75 1b                	jne    c001ff96 <Vm::x87Handler(regs*)+0xa61>
c001ff7b:	e8 63 f5 ff ff       	call   c001f4e3 <Vm::fpuPop()>
c001ff80:	51                   	push   ecx
c001ff81:	51                   	push   ecx
c001ff82:	52                   	push   edx
c001ff83:	50                   	push   eax
c001ff84:	e8 0c f2 ff ff       	call   c001f195 <Vm::fpuFloatToLong(unsigned long long)>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	89 06                	mov    DWORD PTR [esi],eax
c001ff8e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ff91:	e9 f8 f7 ff ff       	jmp    c001f78e <Vm::x87Handler(regs*)+0x259>
c001ff96:	83 c4 1c             	add    esp,0x1c
c001ff99:	5b                   	pop    ebx
c001ff9a:	5e                   	pop    esi
c001ff9b:	5f                   	pop    edi
c001ff9c:	5d                   	pop    ebp
c001ff9d:	c3                   	ret    

c001ff9e <__static_initialization_and_destruction_0(int, int)>:
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ffa6:	75 1a                	jne    c001ffc2 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ffa8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ffb0:	75 10                	jne    c001ffc2 <__static_initialization_and_destruction_0(int, int)+0x24>
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	68 20 13 03 c0       	push   0xc0031320
c001ffba:	e8 8b 8d 00 00       	call   c0028d4a <Vm::_FPUState::_FPUState()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	90                   	nop
c001ffc3:	83 c4 0c             	add    esp,0xc
c001ffc6:	c3                   	ret    

c001ffc7 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ffc7:	83 ec 0c             	sub    esp,0xc
c001ffca:	83 ec 08             	sub    esp,0x8
c001ffcd:	68 ff ff 00 00       	push   0xffff
c001ffd2:	6a 01                	push   0x1
c001ffd4:	e8 c5 ff ff ff       	call   c001ff9e <__static_initialization_and_destruction_0(int, int)>
c001ffd9:	83 c4 10             	add    esp,0x10
c001ffdc:	83 c4 0c             	add    esp,0xc
c001ffdf:	c3                   	ret    

c001ffe0 <FAT::getName()>:
c001ffe0:	b8 cc c1 02 c0       	mov    eax,0xc002c1cc
c001ffe5:	c3                   	ret    

c001ffe6 <FAT::tell(void*, unsigned long long*)>:
c001ffe6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffeb:	75 06                	jne    c001fff3 <FAT::tell(void*, unsigned long long*)+0xd>
c001ffed:	b8 04 00 00 00       	mov    eax,0x4
c001fff2:	c3                   	ret    
c001fff3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fff8:	75 06                	jne    c0020000 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fffa:	b8 04 00 00 00       	mov    eax,0x4
c001ffff:	c3                   	ret    
c0020000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020004:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020007:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002000a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002000e:	89 01                	mov    DWORD PTR [ecx],eax
c0020010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020013:	b8 00 00 00 00       	mov    eax,0x0
c0020018:	c3                   	ret    
c0020019:	90                   	nop

c002001a <FAT::stat(void*, unsigned long long*)>:
c002001a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002001f:	75 06                	jne    c0020027 <FAT::stat(void*, unsigned long long*)+0xd>
c0020021:	b8 04 00 00 00       	mov    eax,0x4
c0020026:	c3                   	ret    
c0020027:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002002c:	75 06                	jne    c0020034 <FAT::stat(void*, unsigned long long*)+0x1a>
c002002e:	b8 04 00 00 00       	mov    eax,0x4
c0020033:	c3                   	ret    
c0020034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020038:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002003b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002003e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020042:	89 01                	mov    DWORD PTR [ecx],eax
c0020044:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020047:	b8 00 00 00 00       	mov    eax,0x0
c002004c:	c3                   	ret    
c002004d:	90                   	nop

c002004e <FAT::~FAT()>:
c002004e:	83 ec 0c             	sub    esp,0xc
c0020051:	ba 18 c2 02 c0       	mov    edx,0xc002c218
c0020056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005a:	89 10                	mov    DWORD PTR [eax],edx
c002005c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020060:	83 ec 0c             	sub    esp,0xc
c0020063:	50                   	push   eax
c0020064:	e8 ff 2a ff ff       	call   c0012b68 <Filesystem::~Filesystem()>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	90                   	nop
c002006d:	83 c4 0c             	add    esp,0xc
c0020070:	c3                   	ret    
c0020071:	90                   	nop

c0020072 <FAT::~FAT()>:
c0020072:	83 ec 0c             	sub    esp,0xc
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002007c:	e8 cd ff ff ff       	call   c002004e <FAT::~FAT()>
c0020081:	83 c4 10             	add    esp,0x10
c0020084:	83 ec 08             	sub    esp,0x8
c0020087:	6a 08                	push   0x8
c0020089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002008d:	e8 cf 26 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0020092:	83 c4 10             	add    esp,0x10
c0020095:	83 c4 0c             	add    esp,0xc
c0020098:	c3                   	ret    
c0020099:	90                   	nop

c002009a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002009a:	83 ec 1c             	sub    esp,0x1c
c002009d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00200a4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00200a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200ad:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c00200b4:	83 f8 ff             	cmp    eax,0xffffffff
c00200b7:	75 34                	jne    c00200ed <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00200b9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00200bd:	88 c2                	mov    dl,al
c00200bf:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c00200c4:	01 d0                	add    eax,edx
c00200c6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00200ca:	8b 15 80 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031380
c00200d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200d4:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c00200db:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c00200e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00200e4:	89 14 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],edx
c00200eb:	eb 17                	jmp    c0020104 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00200ed:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00200f1:	88 c2                	mov    dl,al
c00200f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00200f7:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c00200fe:	01 d0                	add    eax,edx
c0020100:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020104:	83 ec 04             	sub    esp,0x4
c0020107:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002010b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002010f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020113:	50                   	push   eax
c0020114:	e8 e5 6b fe ff       	call   c0006cfe <f_getlabel>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020120:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020125:	75 07                	jne    c002012e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020127:	b8 00 00 00 00       	mov    eax,0x0
c002012c:	eb 05                	jmp    c0020133 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002012e:	b8 01 00 00 00       	mov    eax,0x1
c0020133:	83 c4 1c             	add    esp,0x1c
c0020136:	c3                   	ret    
c0020137:	90                   	nop

c0020138 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020138:	57                   	push   edi
c0020139:	83 ec 58             	sub    esp,0x58
c002013c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020144:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020148:	b9 0f 00 00 00       	mov    ecx,0xf
c002014d:	b8 00 00 00 00       	mov    eax,0x0
c0020152:	fc                   	cld    
c0020153:	89 d7                	mov    edi,edx
c0020155:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020157:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002015b:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c0020162:	83 f8 ff             	cmp    eax,0xffffffff
c0020165:	75 34                	jne    c002019b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020167:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002016b:	88 c2                	mov    dl,al
c002016d:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c0020172:	01 d0                	add    eax,edx
c0020174:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020178:	8b 15 80 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031380
c002017e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020182:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c0020189:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c002018e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020192:	89 14 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],edx
c0020199:	eb 17                	jmp    c00201b2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002019b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002019f:	88 c2                	mov    dl,al
c00201a1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00201a5:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c00201ac:	01 d0                	add    eax,edx
c00201ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00201b2:	83 ec 08             	sub    esp,0x8
c00201b5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00201b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201bd:	50                   	push   eax
c00201be:	e8 89 07 fe ff       	call   c000094c <strcat>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201cd:	50                   	push   eax
c00201ce:	e8 19 6d fe ff       	call   c0006eec <f_setlabel>
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00201da:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00201df:	75 07                	jne    c00201e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00201e1:	b8 00 00 00 00       	mov    eax,0x0
c00201e6:	eb 05                	jmp    c00201ed <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00201e8:	b8 01 00 00 00       	mov    eax,0x1
c00201ed:	83 c4 58             	add    esp,0x58
c00201f0:	5f                   	pop    edi
c00201f1:	c3                   	ret    

c00201f2 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00201f2:	83 ec 2c             	sub    esp,0x2c
c00201f5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00201fd:	83 ec 08             	sub    esp,0x8
c0020200:	68 f0 c1 02 c0       	push   0xc002c1f0
c0020205:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020209:	e8 8a 06 fe ff       	call   c0000898 <strcmp>
c002020e:	83 c4 10             	add    esp,0x10
c0020211:	85 c0                	test   eax,eax
c0020213:	0f 94 c0             	sete   al
c0020216:	84 c0                	test   al,al
c0020218:	74 0d                	je     c0020227 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002021a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020222:	e9 a6 00 00 00       	jmp    c00202cd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020227:	83 ec 08             	sub    esp,0x8
c002022a:	68 e2 c1 02 c0       	push   0xc002c1e2
c002022f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020233:	e8 60 06 fe ff       	call   c0000898 <strcmp>
c0020238:	83 c4 10             	add    esp,0x10
c002023b:	85 c0                	test   eax,eax
c002023d:	0f 94 c0             	sete   al
c0020240:	84 c0                	test   al,al
c0020242:	74 0a                	je     c002024e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020244:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002024c:	eb 7f                	jmp    c00202cd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002024e:	83 ec 08             	sub    esp,0x8
c0020251:	68 e8 c1 02 c0       	push   0xc002c1e8
c0020256:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002025a:	e8 39 06 fe ff       	call   c0000898 <strcmp>
c002025f:	83 c4 10             	add    esp,0x10
c0020262:	85 c0                	test   eax,eax
c0020264:	0f 94 c0             	sete   al
c0020267:	84 c0                	test   al,al
c0020269:	74 0a                	je     c0020275 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002026b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020273:	eb 58                	jmp    c00202cd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020275:	83 ec 08             	sub    esp,0x8
c0020278:	68 ac 94 02 c0       	push   0xc00294ac
c002027d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020281:	e8 12 06 fe ff       	call   c0000898 <strcmp>
c0020286:	83 c4 10             	add    esp,0x10
c0020289:	85 c0                	test   eax,eax
c002028b:	0f 94 c0             	sete   al
c002028e:	84 c0                	test   al,al
c0020290:	74 0a                	je     c002029c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020292:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002029a:	eb 31                	jmp    c00202cd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002029c:	83 ec 08             	sub    esp,0x8
c002029f:	68 ee c1 02 c0       	push   0xc002c1ee
c00202a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202a8:	e8 eb 05 fe ff       	call   c0000898 <strcmp>
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	85 c0                	test   eax,eax
c00202b2:	0f 94 c0             	sete   al
c00202b5:	84 c0                	test   al,al
c00202b7:	74 0a                	je     c00202c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00202b9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00202c1:	eb 0a                	jmp    c00202cd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00202c3:	b8 08 00 00 00       	mov    eax,0x8
c00202c8:	e9 df 00 00 00       	jmp    c00203ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00202cd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00202d4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00202d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202dd:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c00202e4:	83 f8 ff             	cmp    eax,0xffffffff
c00202e7:	75 34                	jne    c002031d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00202e9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00202ed:	88 c2                	mov    dl,al
c00202ef:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c00202f4:	01 d0                	add    eax,edx
c00202f6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202fa:	8b 15 80 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031380
c0020300:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020304:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c002030b:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c0020310:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020314:	89 14 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],edx
c002031b:	eb 17                	jmp    c0020334 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002031d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020321:	88 c2                	mov    dl,al
c0020323:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020327:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c002032e:	01 d0                	add    eax,edx
c0020330:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020338:	88 04 24             	mov    BYTE PTR [esp],al
c002033b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002033f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020343:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002034b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020350:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	68 00 20 00 00       	push   0x2000
c0020360:	e8 34 f2 fe ff       	call   c000f599 <malloc>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002036c:	68 00 20 00 00       	push   0x2000
c0020371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020375:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020379:	50                   	push   eax
c002037a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002037e:	50                   	push   eax
c002037f:	e8 b3 6f fe ff       	call   c0007337 <f_mkfs>
c0020384:	83 c4 10             	add    esp,0x10
c0020387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002038b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020390:	75 07                	jne    c0020399 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020392:	b8 00 00 00 00       	mov    eax,0x0
c0020397:	eb 13                	jmp    c00203ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020399:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002039e:	75 07                	jne    c00203a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00203a0:	b8 09 00 00 00       	mov    eax,0x9
c00203a5:	eb 05                	jmp    c00203ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00203a7:	b8 01 00 00 00       	mov    eax,0x1
c00203ac:	83 c4 2c             	add    esp,0x2c
c00203af:	c3                   	ret    

c00203b0 <FAT::tryMount(LogicalDisk*, int)>:
c00203b0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00203b6:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c00203bb:	83 f8 14             	cmp    eax,0x14
c00203be:	75 17                	jne    c00203d7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	68 f4 c1 02 c0       	push   0xc002c1f4
c00203c8:	e8 16 9c ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	b0 00                	mov    al,0x0
c00203d2:	e9 d7 01 00 00       	jmp    c00205ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203d7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00203de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00203e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00203ea:	3d 00 02 00 00       	cmp    eax,0x200
c00203ef:	74 07                	je     c00203f8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00203f1:	b0 00                	mov    al,0x0
c00203f3:	e9 b6 01 00 00       	jmp    c00205ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203f8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020400:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020407:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c002040e:	83 f8 ff             	cmp    eax,0xffffffff
c0020411:	74 07                	je     c002041a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020413:	b0 01                	mov    al,0x1
c0020415:	e9 94 01 00 00       	jmp    c00205ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002041a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020424:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002042c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020433:	88 c2                	mov    dl,al
c0020435:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c002043a:	01 d0                	add    eax,edx
c002043c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020443:	8b 15 80 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031380
c0020449:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020450:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c0020457:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c002045c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020463:	89 14 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],edx
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	68 54 02 00 00       	push   0x254
c0020472:	e8 22 f1 fe ff       	call   c000f599 <malloc>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020481:	83 ec 04             	sub    esp,0x4
c0020484:	6a 00                	push   0x0
c0020486:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002048d:	50                   	push   eax
c002048e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020495:	e8 5b 4a fe ff       	call   c0004ef5 <f_mount>
c002049a:	83 c4 10             	add    esp,0x10
c002049d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00204a4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00204ac:	74 19                	je     c00204c7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00204ae:	83 ec 0c             	sub    esp,0xc
c00204b1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00204b8:	e8 fc f0 fe ff       	call   c000f5b9 <rfree>
c00204bd:	83 c4 10             	add    esp,0x10
c00204c0:	b0 00                	mov    al,0x0
c00204c2:	e9 e7 00 00 00       	jmp    c00205ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00204c7:	83 ec 04             	sub    esp,0x4
c00204ca:	68 00 01 00 00       	push   0x100
c00204cf:	6a 00                	push   0x0
c00204d1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204d8:	50                   	push   eax
c00204d9:	e8 72 02 fe ff       	call   c0000750 <memset>
c00204de:	83 c4 10             	add    esp,0x10
c00204e1:	83 ec 08             	sub    esp,0x8
c00204e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00204eb:	50                   	push   eax
c00204ec:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204f3:	50                   	push   eax
c00204f4:	e8 53 04 fe ff       	call   c000094c <strcat>
c00204f9:	83 c4 10             	add    esp,0x10
c00204fc:	83 ec 08             	sub    esp,0x8
c00204ff:	68 02 c2 02 c0       	push   0xc002c202
c0020504:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002050b:	50                   	push   eax
c002050c:	e8 3b 04 fe ff       	call   c000094c <strcat>
c0020511:	83 c4 10             	add    esp,0x10
c0020514:	83 ec 04             	sub    esp,0x4
c0020517:	6a 01                	push   0x1
c0020519:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020520:	50                   	push   eax
c0020521:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020525:	50                   	push   eax
c0020526:	e8 2c 4a fe ff       	call   c0004f57 <f_open>
c002052b:	83 c4 10             	add    esp,0x10
c002052e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020535:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002053c:	85 c0                	test   eax,eax
c002053e:	74 0a                	je     c002054a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020540:	78 2d                	js     c002056f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020542:	83 e8 04             	sub    eax,0x4
c0020545:	83 f8 01             	cmp    eax,0x1
c0020548:	77 25                	ja     c002056f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002054a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020559:	50                   	push   eax
c002055a:	e8 4a 55 fe ff       	call   c0005aa9 <f_close>
c002055f:	83 c4 10             	add    esp,0x10
c0020562:	90                   	nop
c0020563:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002056b:	74 3a                	je     c00205a7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002056d:	eb 2d                	jmp    c002059c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002056f:	83 ec 0c             	sub    esp,0xc
c0020572:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020579:	e8 3b f0 fe ff       	call   c000f5b9 <rfree>
c002057e:	83 c4 10             	add    esp,0x10
c0020581:	83 ec 04             	sub    esp,0x4
c0020584:	6a 00                	push   0x0
c0020586:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002058d:	50                   	push   eax
c002058e:	6a 00                	push   0x0
c0020590:	e8 60 49 fe ff       	call   c0004ef5 <f_mount>
c0020595:	83 c4 10             	add    esp,0x10
c0020598:	b0 00                	mov    al,0x0
c002059a:	eb 12                	jmp    c00205ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002059c:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c00205a1:	40                   	inc    eax
c00205a2:	a3 80 13 03 c0       	mov    ds:0xc0031380,eax
c00205a7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00205ae:	81 c4 6c 03 00 00    	add    esp,0x36c
c00205b4:	c3                   	ret    
c00205b5:	90                   	nop

c00205b6 <FAT::getFileFirstSector(char const*)>:
c00205b6:	53                   	push   ebx
c00205b7:	83 ec 28             	sub    esp,0x28
c00205ba:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00205c2:	83 ec 0c             	sub    esp,0xc
c00205c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c9:	e8 cb ef fe ff       	call   c000f599 <malloc>
c00205ce:	83 c4 10             	add    esp,0x10
c00205d1:	89 c3                	mov    ebx,eax
c00205d3:	a1 b0 12 03 c0       	mov    eax,ds:0xc00312b0
c00205d8:	83 ec 04             	sub    esp,0x4
c00205db:	50                   	push   eax
c00205dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00205e0:	53                   	push   ebx
c00205e1:	e8 b2 27 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00205ed:	83 ec 08             	sub    esp,0x8
c00205f0:	6a 01                	push   0x1
c00205f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00205f6:	e8 01 28 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c00205fb:	83 c4 10             	add    esp,0x10
c00205fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020602:	8b 00                	mov    eax,DWORD PTR [eax]
c0020604:	83 c0 0c             	add    eax,0xc
c0020607:	8b 00                	mov    eax,DWORD PTR [eax]
c0020609:	83 ec 0c             	sub    esp,0xc
c002060c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020610:	52                   	push   edx
c0020611:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020615:	52                   	push   edx
c0020616:	6a 00                	push   0x0
c0020618:	6a 04                	push   0x4
c002061a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002061e:	ff d0                	call   eax
c0020620:	83 c4 20             	add    esp,0x20
c0020623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020627:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002062d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020631:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020635:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020638:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002063b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002063f:	83 ec 0c             	sub    esp,0xc
c0020642:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020646:	e8 0f 28 ff ff       	call   c0012e5a <File::close()>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020652:	ba 00 00 00 00       	mov    edx,0x0
c0020657:	83 c4 28             	add    esp,0x28
c002065a:	5b                   	pop    ebx
c002065b:	c3                   	ret    

c002065c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002065c:	57                   	push   edi
c002065d:	56                   	push   esi
c002065e:	53                   	push   ebx
c002065f:	81 ec 50 02 00 00    	sub    esp,0x250
c0020665:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002066d:	74 0a                	je     c0020679 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002066f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020677:	75 0a                	jne    c0020683 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020679:	b8 04 00 00 00       	mov    eax,0x4
c002067e:	e9 29 01 00 00       	jmp    c00207ac <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020683:	83 ec 08             	sub    esp,0x8
c0020686:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002068d:	50                   	push   eax
c002068e:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020695:	e8 19 5a fe ff       	call   c00060b3 <f_readdir>
c002069a:	83 c4 10             	add    esp,0x10
c002069d:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00206a4:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00206ab:	83 ec 0c             	sub    esp,0xc
c00206ae:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00206b5:	83 c0 1a             	add    eax,0x1a
c00206b8:	50                   	push   eax
c00206b9:	e8 ae 00 fe ff       	call   c000076c <strlen>
c00206be:	83 c4 10             	add    esp,0x10
c00206c1:	ba 00 00 00 00       	mov    edx,0x0
c00206c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00206ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00206ce:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00206d5:	0f b6 c0             	movzx  eax,al
c00206d8:	83 e0 10             	and    eax,0x10
c00206db:	74 07                	je     c00206e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00206dd:	b8 02 00 00 00       	mov    eax,0x2
c00206e2:	eb 05                	jmp    c00206e9 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00206e4:	b8 01 00 00 00       	mov    eax,0x1
c00206e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00206ed:	83 ec 08             	sub    esp,0x8
c00206f0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00206f7:	83 c0 1a             	add    eax,0x1a
c00206fa:	50                   	push   eax
c00206fb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00206ff:	83 c0 10             	add    eax,0x10
c0020702:	50                   	push   eax
c0020703:	e8 04 01 fe ff       	call   c000080c <strcpy>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020712:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020719:	8d 44 24 04          	lea    eax,[esp+0x4]
c002071d:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020724:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002072b:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020732:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020739:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020740:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020747:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002074e:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020755:	89 c6                	mov    esi,eax
c0020757:	89 d7                	mov    edi,edx
c0020759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002075b:	89 c8                	mov    eax,ecx
c002075d:	89 fa                	mov    edx,edi
c002075f:	89 f3                	mov    ebx,esi
c0020761:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020768:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002076f:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020776:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002077d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020783:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002078a:	84 c0                	test   al,al
c002078c:	75 07                	jne    c0020795 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c002078e:	b8 07 00 00 00       	mov    eax,0x7
c0020793:	eb 17                	jmp    c00207ac <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020795:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002079c:	85 c0                	test   eax,eax
c002079e:	75 07                	jne    c00207a7 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00207a0:	b8 00 00 00 00       	mov    eax,0x0
c00207a5:	eb 05                	jmp    c00207ac <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00207a7:	b8 01 00 00 00       	mov    eax,0x1
c00207ac:	81 c4 50 02 00 00    	add    esp,0x250
c00207b2:	5b                   	pop    ebx
c00207b3:	5e                   	pop    esi
c00207b4:	5f                   	pop    edi
c00207b5:	c3                   	ret    

c00207b6 <FAT::read(void*, unsigned long, void*, int*)>:
c00207b6:	83 ec 1c             	sub    esp,0x1c
c00207b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207be:	74 07                	je     c00207c7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00207c0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00207c5:	75 07                	jne    c00207ce <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00207c7:	b8 04 00 00 00       	mov    eax,0x4
c00207cc:	eb 3d                	jmp    c002080b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00207ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207d2:	50                   	push   eax
c00207d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207df:	e8 af 4b fe ff       	call   c0005393 <f_read>
c00207e4:	83 c4 10             	add    esp,0x10
c00207e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ef:	89 c2                	mov    edx,eax
c00207f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00207f5:	89 10                	mov    DWORD PTR [eax],edx
c00207f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207fb:	85 c0                	test   eax,eax
c00207fd:	75 07                	jne    c0020806 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00207ff:	b8 00 00 00 00       	mov    eax,0x0
c0020804:	eb 05                	jmp    c002080b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020806:	b8 01 00 00 00       	mov    eax,0x1
c002080b:	83 c4 1c             	add    esp,0x1c
c002080e:	c3                   	ret    
c002080f:	90                   	nop

c0020810 <FAT::write(void*, unsigned long, void*, int*)>:
c0020810:	83 ec 1c             	sub    esp,0x1c
c0020813:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020818:	74 07                	je     c0020821 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002081a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002081f:	75 07                	jne    c0020828 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020821:	b8 04 00 00 00       	mov    eax,0x4
c0020826:	eb 3d                	jmp    c0020865 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020828:	8d 44 24 08          	lea    eax,[esp+0x8]
c002082c:	50                   	push   eax
c002082d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020835:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020839:	e8 d5 4d fe ff       	call   c0005613 <f_write>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020849:	89 c2                	mov    edx,eax
c002084b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002084f:	89 10                	mov    DWORD PTR [eax],edx
c0020851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020855:	85 c0                	test   eax,eax
c0020857:	75 07                	jne    c0020860 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020859:	b8 00 00 00 00       	mov    eax,0x0
c002085e:	eb 05                	jmp    c0020865 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020860:	b8 01 00 00 00       	mov    eax,0x1
c0020865:	83 c4 1c             	add    esp,0x1c
c0020868:	c3                   	ret    
c0020869:	90                   	nop

c002086a <FAT::close(void*)>:
c002086a:	83 ec 1c             	sub    esp,0x1c
c002086d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020872:	75 07                	jne    c002087b <FAT::close(void*)+0x11>
c0020874:	b8 04 00 00 00       	mov    eax,0x4
c0020879:	eb 36                	jmp    c00208b1 <FAT::close(void*)+0x47>
c002087b:	83 ec 0c             	sub    esp,0xc
c002087e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020882:	e8 22 52 fe ff       	call   c0005aa9 <f_close>
c0020887:	83 c4 10             	add    esp,0x10
c002088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002088e:	83 ec 0c             	sub    esp,0xc
c0020891:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020895:	e8 0f ed fe ff       	call   c000f5a9 <free>
c002089a:	83 c4 10             	add    esp,0x10
c002089d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a1:	85 c0                	test   eax,eax
c00208a3:	75 07                	jne    c00208ac <FAT::close(void*)+0x42>
c00208a5:	b8 00 00 00 00       	mov    eax,0x0
c00208aa:	eb 05                	jmp    c00208b1 <FAT::close(void*)+0x47>
c00208ac:	b8 01 00 00 00       	mov    eax,0x1
c00208b1:	83 c4 1c             	add    esp,0x1c
c00208b4:	c3                   	ret    
c00208b5:	90                   	nop

c00208b6 <FAT::closeDir(void*)>:
c00208b6:	83 ec 1c             	sub    esp,0x1c
c00208b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00208be:	75 07                	jne    c00208c7 <FAT::closeDir(void*)+0x11>
c00208c0:	b8 04 00 00 00       	mov    eax,0x4
c00208c5:	eb 36                	jmp    c00208fd <FAT::closeDir(void*)+0x47>
c00208c7:	83 ec 0c             	sub    esp,0xc
c00208ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208ce:	e8 be 57 fe ff       	call   c0006091 <f_closedir>
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208e1:	e8 c3 ec fe ff       	call   c000f5a9 <free>
c00208e6:	83 c4 10             	add    esp,0x10
c00208e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ed:	85 c0                	test   eax,eax
c00208ef:	75 07                	jne    c00208f8 <FAT::closeDir(void*)+0x42>
c00208f1:	b8 00 00 00 00       	mov    eax,0x0
c00208f6:	eb 05                	jmp    c00208fd <FAT::closeDir(void*)+0x47>
c00208f8:	b8 01 00 00 00       	mov    eax,0x1
c00208fd:	83 c4 1c             	add    esp,0x1c
c0020900:	c3                   	ret    
c0020901:	90                   	nop

c0020902 <FAT::seek(void*, unsigned long long)>:
c0020902:	83 ec 2c             	sub    esp,0x2c
c0020905:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002090d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020911:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020915:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002091a:	75 07                	jne    c0020923 <FAT::seek(void*, unsigned long long)+0x21>
c002091c:	b8 04 00 00 00       	mov    eax,0x4
c0020921:	eb 2f                	jmp    c0020952 <FAT::seek(void*, unsigned long long)+0x50>
c0020923:	83 ec 04             	sub    esp,0x4
c0020926:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002092a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002092e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020932:	e8 a1 51 fe ff       	call   c0005ad8 <f_lseek>
c0020937:	83 c4 10             	add    esp,0x10
c002093a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002093e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020942:	85 c0                	test   eax,eax
c0020944:	75 07                	jne    c002094d <FAT::seek(void*, unsigned long long)+0x4b>
c0020946:	b8 00 00 00 00       	mov    eax,0x0
c002094b:	eb 05                	jmp    c0020952 <FAT::seek(void*, unsigned long long)+0x50>
c002094d:	b8 01 00 00 00       	mov    eax,0x1
c0020952:	83 c4 2c             	add    esp,0x2c
c0020955:	c3                   	ret    

c0020956 <fatWrapperReadDisk>:
c0020956:	83 ec 1c             	sub    esp,0x1c
c0020959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002095d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020961:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020965:	89 04 24             	mov    DWORD PTR [esp],eax
c0020968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002096c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020970:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020975:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c002097c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020980:	83 ec 0c             	sub    esp,0xc
c0020983:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020987:	52                   	push   edx
c0020988:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002098c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020990:	50                   	push   eax
c0020991:	e8 f8 57 ff ff       	call   c001618e <LogicalDisk::read(unsigned long long, int, void*)>
c0020996:	83 c4 20             	add    esp,0x20
c0020999:	83 c4 1c             	add    esp,0x1c
c002099c:	c3                   	ret    

c002099d <fatWrapperWriteDisk>:
c002099d:	83 ec 1c             	sub    esp,0x1c
c00209a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00209a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00209ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00209af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00209b7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209bc:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c00209c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00209c7:	83 ec 0c             	sub    esp,0xc
c00209ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00209ce:	52                   	push   edx
c00209cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209d7:	50                   	push   eax
c00209d8:	e8 1d 58 ff ff       	call   c00161fa <LogicalDisk::write(unsigned long long, int, void*)>
c00209dd:	83 c4 20             	add    esp,0x20
c00209e0:	83 c4 1c             	add    esp,0x1c
c00209e3:	c3                   	ret    

c00209e4 <fatWrapperIoctl>:
c00209e4:	53                   	push   ebx
c00209e5:	83 ec 28             	sub    esp,0x28
c00209e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00209ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00209f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00209f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00209f8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00209fd:	75 31                	jne    c0020a30 <fatWrapperIoctl+0x4c>
c00209ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a07:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a0c:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c0020a13:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a19:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020a23:	66 89 02             	mov    WORD PTR [edx],ax
c0020a26:	b8 00 00 00 00       	mov    eax,0x0
c0020a2b:	e9 b2 00 00 00       	jmp    c0020ae2 <fatWrapperIoctl+0xfe>
c0020a30:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020a35:	75 6a                	jne    c0020aa1 <fatWrapperIoctl+0xbd>
c0020a37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a44:	8b 04 85 60 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ca0]
c0020a4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a51:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020a57:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020a5d:	89 c8                	mov    eax,ecx
c0020a5f:	89 da                	mov    edx,ebx
c0020a61:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020a65:	c1 e0 0a             	shl    eax,0xa
c0020a68:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020a6d:	8b 0c 8d 60 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ca0]
c0020a74:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020a7a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020a80:	89 cb                	mov    ebx,ecx
c0020a82:	c1 fb 1f             	sar    ebx,0x1f
c0020a85:	53                   	push   ebx
c0020a86:	51                   	push   ecx
c0020a87:	52                   	push   edx
c0020a88:	50                   	push   eax
c0020a89:	e8 b6 5e 00 00       	call   c0026944 <__udivdi3>
c0020a8e:	83 c4 10             	add    esp,0x10
c0020a91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020a95:	89 01                	mov    DWORD PTR [ecx],eax
c0020a97:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a9a:	b8 00 00 00 00       	mov    eax,0x0
c0020a9f:	eb 41                	jmp    c0020ae2 <fatWrapperIoctl+0xfe>
c0020aa1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020aa6:	75 07                	jne    c0020aaf <fatWrapperIoctl+0xcb>
c0020aa8:	b8 00 00 00 00       	mov    eax,0x0
c0020aad:	eb 33                	jmp    c0020ae2 <fatWrapperIoctl+0xfe>
c0020aaf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ab4:	75 19                	jne    c0020acf <fatWrapperIoctl+0xeb>
c0020ab6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020aba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020abe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ac2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ac8:	b8 00 00 00 00       	mov    eax,0x0
c0020acd:	eb 13                	jmp    c0020ae2 <fatWrapperIoctl+0xfe>
c0020acf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ad4:	75 07                	jne    c0020add <fatWrapperIoctl+0xf9>
c0020ad6:	b8 00 00 00 00       	mov    eax,0x0
c0020adb:	eb 05                	jmp    c0020ae2 <fatWrapperIoctl+0xfe>
c0020add:	b8 04 00 00 00       	mov    eax,0x4
c0020ae2:	83 c4 28             	add    esp,0x28
c0020ae5:	5b                   	pop    ebx
c0020ae6:	c3                   	ret    
c0020ae7:	90                   	nop

c0020ae8 <FAT::FAT()>:
c0020ae8:	83 ec 1c             	sub    esp,0x1c
c0020aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aef:	83 ec 0c             	sub    esp,0xc
c0020af2:	50                   	push   eax
c0020af3:	e8 4c 20 ff ff       	call   c0012b44 <Filesystem::Filesystem()>
c0020af8:	83 c4 10             	add    esp,0x10
c0020afb:	ba 18 c2 02 c0       	mov    edx,0xc002c218
c0020b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b04:	89 10                	mov    DWORD PTR [eax],edx
c0020b06:	c7 05 80 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031380,0x0
c0020b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020b18:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020b1d:	7f 15                	jg     c0020b34 <FAT::FAT()+0x4c>
c0020b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b23:	c7 04 85 a0 13 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcec60],0xffffffff
c0020b2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020b32:	eb e4                	jmp    c0020b18 <FAT::FAT()+0x30>
c0020b34:	90                   	nop
c0020b35:	83 c4 1c             	add    esp,0x1c
c0020b38:	c3                   	ret    
c0020b39:	90                   	nop

c0020b3a <FAT::fixFilepath(char*)>:
c0020b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b3e:	8a 00                	mov    al,BYTE PTR [eax]
c0020b40:	3c 40                	cmp    al,0x40
c0020b42:	7e 2c                	jle    c0020b70 <FAT::fixFilepath(char*)+0x36>
c0020b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b48:	8a 00                	mov    al,BYTE PTR [eax]
c0020b4a:	83 e8 41             	sub    eax,0x41
c0020b4d:	88 c2                	mov    dl,al
c0020b4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b53:	88 10                	mov    BYTE PTR [eax],dl
c0020b55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b59:	8a 00                	mov    al,BYTE PTR [eax]
c0020b5b:	0f be c0             	movsx  eax,al
c0020b5e:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c0020b65:	83 c0 30             	add    eax,0x30
c0020b68:	88 c2                	mov    dl,al
c0020b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b6e:	88 10                	mov    BYTE PTR [eax],dl
c0020b70:	90                   	nop
c0020b71:	c3                   	ret    

c0020b72 <FAT::open(char const*, void**, FileOpenMode)>:
c0020b72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b78:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b80:	74 0a                	je     c0020b8c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020b82:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b8a:	75 0a                	jne    c0020b96 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020b8c:	b8 04 00 00 00       	mov    eax,0x4
c0020b91:	e9 fd 00 00 00       	jmp    c0020c93 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b96:	83 ec 08             	sub    esp,0x8
c0020b99:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ba0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ba4:	50                   	push   eax
c0020ba5:	e8 62 fc fd ff       	call   c000080c <strcpy>
c0020baa:	83 c4 10             	add    esp,0x10
c0020bad:	83 ec 08             	sub    esp,0x8
c0020bb0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020bb4:	50                   	push   eax
c0020bb5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bbc:	e8 79 ff ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0020bc1:	83 c4 10             	add    esp,0x10
c0020bc4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020bcc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bd3:	83 e0 01             	and    eax,0x1
c0020bd6:	74 08                	je     c0020be0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020bd8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020be0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020be7:	83 e0 04             	and    eax,0x4
c0020bea:	74 10                	je     c0020bfc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020bec:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020bf4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020bfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020c03:	83 e0 02             	and    eax,0x2
c0020c06:	74 08                	je     c0020c10 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020c08:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020c10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020c17:	83 e0 08             	and    eax,0x8
c0020c1a:	74 08                	je     c0020c24 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020c1c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020c24:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020c2b:	83 e0 10             	and    eax,0x10
c0020c2e:	74 08                	je     c0020c38 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020c30:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020c38:	83 ec 0c             	sub    esp,0xc
c0020c3b:	68 50 02 00 00       	push   0x250
c0020c40:	e8 54 e9 fe ff       	call   c000f599 <malloc>
c0020c45:	83 c4 10             	add    esp,0x10
c0020c48:	89 c2                	mov    edx,eax
c0020c4a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c51:	89 10                	mov    DWORD PTR [eax],edx
c0020c53:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020c5b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c64:	83 ec 04             	sub    esp,0x4
c0020c67:	52                   	push   edx
c0020c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020c6c:	52                   	push   edx
c0020c6d:	50                   	push   eax
c0020c6e:	e8 e4 42 fe ff       	call   c0004f57 <f_open>
c0020c73:	83 c4 10             	add    esp,0x10
c0020c76:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020c7d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020c85:	74 07                	je     c0020c8e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020c87:	b8 01 00 00 00       	mov    eax,0x1
c0020c8c:	eb 05                	jmp    c0020c93 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c8e:	b8 00 00 00 00       	mov    eax,0x0
c0020c93:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c99:	c3                   	ret    

c0020c9a <FAT::openDir(char const*, void**)>:
c0020c9a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ca0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ca8:	74 0a                	je     c0020cb4 <FAT::openDir(char const*, void**)+0x1a>
c0020caa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020cb2:	75 07                	jne    c0020cbb <FAT::openDir(char const*, void**)+0x21>
c0020cb4:	b8 04 00 00 00       	mov    eax,0x4
c0020cb9:	eb 7d                	jmp    c0020d38 <FAT::openDir(char const*, void**)+0x9e>
c0020cbb:	83 ec 08             	sub    esp,0x8
c0020cbe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020cc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cc9:	50                   	push   eax
c0020cca:	e8 3d fb fd ff       	call   c000080c <strcpy>
c0020ccf:	83 c4 10             	add    esp,0x10
c0020cd2:	83 ec 08             	sub    esp,0x8
c0020cd5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cd9:	50                   	push   eax
c0020cda:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ce1:	e8 54 fe ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0020ce6:	83 c4 10             	add    esp,0x10
c0020ce9:	83 ec 0c             	sub    esp,0xc
c0020cec:	6a 4c                	push   0x4c
c0020cee:	e8 a6 e8 fe ff       	call   c000f599 <malloc>
c0020cf3:	83 c4 10             	add    esp,0x10
c0020cf6:	89 c2                	mov    edx,eax
c0020cf8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020cff:	89 10                	mov    DWORD PTR [eax],edx
c0020d01:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d0a:	83 ec 08             	sub    esp,0x8
c0020d0d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020d11:	52                   	push   edx
c0020d12:	50                   	push   eax
c0020d13:	e8 77 52 fe ff       	call   c0005f8f <f_opendir>
c0020d18:	83 c4 10             	add    esp,0x10
c0020d1b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d22:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020d2a:	74 07                	je     c0020d33 <FAT::openDir(char const*, void**)+0x99>
c0020d2c:	b8 01 00 00 00       	mov    eax,0x1
c0020d31:	eb 05                	jmp    c0020d38 <FAT::openDir(char const*, void**)+0x9e>
c0020d33:	b8 00 00 00 00       	mov    eax,0x0
c0020d38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d3e:	c3                   	ret    
c0020d3f:	90                   	nop

c0020d40 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020d40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020d46:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020d4e:	75 0a                	jne    c0020d5a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020d50:	b8 04 00 00 00       	mov    eax,0x4
c0020d55:	e9 c9 00 00 00       	jmp    c0020e23 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d5a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020d62:	75 0a                	jne    c0020d6e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020d64:	b8 04 00 00 00       	mov    eax,0x4
c0020d69:	e9 b5 00 00 00       	jmp    c0020e23 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d6e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020d76:	75 0a                	jne    c0020d82 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020d78:	b8 04 00 00 00       	mov    eax,0x4
c0020d7d:	e9 a1 00 00 00       	jmp    c0020e23 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d82:	83 ec 08             	sub    esp,0x8
c0020d85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d8c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d93:	50                   	push   eax
c0020d94:	e8 73 fa fd ff       	call   c000080c <strcpy>
c0020d99:	83 c4 10             	add    esp,0x10
c0020d9c:	83 ec 08             	sub    esp,0x8
c0020d9f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020da6:	50                   	push   eax
c0020da7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020dae:	e8 87 fd ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	83 ec 08             	sub    esp,0x8
c0020db9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020dbd:	50                   	push   eax
c0020dbe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020dc5:	50                   	push   eax
c0020dc6:	e8 83 53 fe ff       	call   c000614e <f_stat>
c0020dcb:	83 c4 10             	add    esp,0x10
c0020dce:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020dd5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ddc:	85 c0                	test   eax,eax
c0020dde:	74 07                	je     c0020de7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020de0:	83 f8 04             	cmp    eax,0x4
c0020de3:	74 32                	je     c0020e17 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020de5:	eb 37                	jmp    c0020e1e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020de7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020deb:	0f b6 c0             	movzx  eax,al
c0020dee:	83 e0 10             	and    eax,0x10
c0020df1:	0f 95 c2             	setne  dl
c0020df4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020dfb:	88 10                	mov    BYTE PTR [eax],dl
c0020dfd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020e04:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020e0b:	89 01                	mov    DWORD PTR [ecx],eax
c0020e0d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e10:	b8 00 00 00 00       	mov    eax,0x0
c0020e15:	eb 0c                	jmp    c0020e23 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e17:	b8 02 00 00 00       	mov    eax,0x2
c0020e1c:	eb 05                	jmp    c0020e23 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e1e:	b8 01 00 00 00       	mov    eax,0x1
c0020e23:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e29:	c3                   	ret    

c0020e2a <FAT::unlink(char const*)>:
c0020e2a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e30:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e38:	75 07                	jne    c0020e41 <FAT::unlink(char const*)+0x17>
c0020e3a:	b8 04 00 00 00       	mov    eax,0x4
c0020e3f:	eb 5c                	jmp    c0020e9d <FAT::unlink(char const*)+0x73>
c0020e41:	83 ec 08             	sub    esp,0x8
c0020e44:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e4f:	50                   	push   eax
c0020e50:	e8 b7 f9 fd ff       	call   c000080c <strcpy>
c0020e55:	83 c4 10             	add    esp,0x10
c0020e58:	83 ec 08             	sub    esp,0x8
c0020e5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e5f:	50                   	push   eax
c0020e60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e67:	e8 ce fc ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0020e6c:	83 c4 10             	add    esp,0x10
c0020e6f:	83 ec 0c             	sub    esp,0xc
c0020e72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e76:	50                   	push   eax
c0020e77:	e8 24 56 fe ff       	call   c00064a0 <f_unlink>
c0020e7c:	83 c4 10             	add    esp,0x10
c0020e7f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e86:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e8d:	85 c0                	test   eax,eax
c0020e8f:	75 07                	jne    c0020e98 <FAT::unlink(char const*)+0x6e>
c0020e91:	b8 00 00 00 00       	mov    eax,0x0
c0020e96:	eb 05                	jmp    c0020e9d <FAT::unlink(char const*)+0x73>
c0020e98:	b8 01 00 00 00       	mov    eax,0x1
c0020e9d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ea3:	c3                   	ret    

c0020ea4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020ea4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020eaa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020eb1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020eb8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ebc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ec0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020ec8:	75 0a                	jne    c0020ed4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020eca:	b8 04 00 00 00       	mov    eax,0x4
c0020ecf:	e9 1c 01 00 00       	jmp    c0020ff0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020ed4:	83 ec 08             	sub    esp,0x8
c0020ed7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020ede:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ee2:	50                   	push   eax
c0020ee3:	e8 24 f9 fd ff       	call   c000080c <strcpy>
c0020ee8:	83 c4 10             	add    esp,0x10
c0020eeb:	83 ec 08             	sub    esp,0x8
c0020eee:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020ef2:	50                   	push   eax
c0020ef3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020efa:	e8 3b fc ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020f0a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020f12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020f17:	83 e0 01             	and    eax,0x1
c0020f1a:	74 08                	je     c0020f24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020f1c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020f24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020f29:	83 e0 02             	and    eax,0x2
c0020f2c:	74 08                	je     c0020f36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020f2e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020f36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020f3b:	83 e0 04             	and    eax,0x4
c0020f3e:	74 08                	je     c0020f48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020f40:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020f48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020f4d:	83 e0 08             	and    eax,0x8
c0020f50:	74 08                	je     c0020f5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020f52:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020f5a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f5f:	83 e0 01             	and    eax,0x1
c0020f62:	74 08                	je     c0020f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020f64:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020f6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f71:	83 e0 02             	and    eax,0x2
c0020f74:	74 08                	je     c0020f7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020f76:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020f7e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f83:	83 e0 04             	and    eax,0x4
c0020f86:	74 08                	je     c0020f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020f88:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020f90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f95:	83 e0 08             	and    eax,0x8
c0020f98:	74 08                	je     c0020fa2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020f9a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020fa2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020fa9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020fb0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020fb8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020fc0:	83 ec 04             	sub    esp,0x4
c0020fc3:	52                   	push   edx
c0020fc4:	50                   	push   eax
c0020fc5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020fc9:	50                   	push   eax
c0020fca:	e8 73 5b fe ff       	call   c0006b42 <f_chmod>
c0020fcf:	83 c4 10             	add    esp,0x10
c0020fd2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020fd9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020fe0:	85 c0                	test   eax,eax
c0020fe2:	75 07                	jne    c0020feb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020fe4:	b8 00 00 00 00       	mov    eax,0x0
c0020fe9:	eb 05                	jmp    c0020ff0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020feb:	b8 01 00 00 00       	mov    eax,0x1
c0020ff0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020ff6:	c3                   	ret    
c0020ff7:	90                   	nop

c0020ff8 <FAT::rename(char const*, char const*)>:
c0020ff8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ffe:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021006:	74 0a                	je     c0021012 <FAT::rename(char const*, char const*)+0x1a>
c0021008:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021010:	75 0a                	jne    c002101c <FAT::rename(char const*, char const*)+0x24>
c0021012:	b8 04 00 00 00       	mov    eax,0x4
c0021017:	e9 98 00 00 00       	jmp    c00210b4 <FAT::rename(char const*, char const*)+0xbc>
c002101c:	83 ec 08             	sub    esp,0x8
c002101f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021026:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002102d:	50                   	push   eax
c002102e:	e8 d9 f7 fd ff       	call   c000080c <strcpy>
c0021033:	83 c4 10             	add    esp,0x10
c0021036:	83 ec 08             	sub    esp,0x8
c0021039:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021040:	50                   	push   eax
c0021041:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021048:	e8 ed fa ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c002104d:	83 c4 10             	add    esp,0x10
c0021050:	83 ec 08             	sub    esp,0x8
c0021053:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002105a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002105e:	50                   	push   eax
c002105f:	e8 a8 f7 fd ff       	call   c000080c <strcpy>
c0021064:	83 c4 10             	add    esp,0x10
c0021067:	83 ec 08             	sub    esp,0x8
c002106a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002106e:	50                   	push   eax
c002106f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021076:	e8 bf fa ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c002107b:	83 c4 10             	add    esp,0x10
c002107e:	83 ec 08             	sub    esp,0x8
c0021081:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021085:	50                   	push   eax
c0021086:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002108d:	50                   	push   eax
c002108e:	e8 bc 57 fe ff       	call   c000684f <f_rename>
c0021093:	83 c4 10             	add    esp,0x10
c0021096:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002109d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00210a4:	85 c0                	test   eax,eax
c00210a6:	75 07                	jne    c00210af <FAT::rename(char const*, char const*)+0xb7>
c00210a8:	b8 00 00 00 00       	mov    eax,0x0
c00210ad:	eb 05                	jmp    c00210b4 <FAT::rename(char const*, char const*)+0xbc>
c00210af:	b8 01 00 00 00       	mov    eax,0x1
c00210b4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00210ba:	c3                   	ret    
c00210bb:	90                   	nop

c00210bc <FAT::mkdir(char const*)>:
c00210bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210ca:	75 07                	jne    c00210d3 <FAT::mkdir(char const*)+0x17>
c00210cc:	b8 04 00 00 00       	mov    eax,0x4
c00210d1:	eb 5c                	jmp    c002112f <FAT::mkdir(char const*)+0x73>
c00210d3:	83 ec 08             	sub    esp,0x8
c00210d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210e1:	50                   	push   eax
c00210e2:	e8 25 f7 fd ff       	call   c000080c <strcpy>
c00210e7:	83 c4 10             	add    esp,0x10
c00210ea:	83 ec 08             	sub    esp,0x8
c00210ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210f1:	50                   	push   eax
c00210f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210f9:	e8 3c fa ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c00210fe:	83 c4 10             	add    esp,0x10
c0021101:	83 ec 0c             	sub    esp,0xc
c0021104:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021108:	50                   	push   eax
c0021109:	e8 15 55 fe ff       	call   c0006623 <f_mkdir>
c002110e:	83 c4 10             	add    esp,0x10
c0021111:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021118:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002111f:	85 c0                	test   eax,eax
c0021121:	75 07                	jne    c002112a <FAT::mkdir(char const*)+0x6e>
c0021123:	b8 00 00 00 00       	mov    eax,0x0
c0021128:	eb 05                	jmp    c002112f <FAT::mkdir(char const*)+0x73>
c002112a:	b8 01 00 00 00       	mov    eax,0x1
c002112f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021135:	c3                   	ret    

c0021136 <FAT::exists(char const*)>:
c0021136:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002113c:	83 ec 08             	sub    esp,0x8
c002113f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021146:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002114a:	50                   	push   eax
c002114b:	e8 bc f6 fd ff       	call   c000080c <strcpy>
c0021150:	83 c4 10             	add    esp,0x10
c0021153:	83 ec 08             	sub    esp,0x8
c0021156:	8d 44 24 08          	lea    eax,[esp+0x8]
c002115a:	50                   	push   eax
c002115b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021162:	e8 d3 f9 ff ff       	call   c0020b3a <FAT::fixFilepath(char*)>
c0021167:	83 c4 10             	add    esp,0x10
c002116a:	83 ec 08             	sub    esp,0x8
c002116d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021174:	50                   	push   eax
c0021175:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021179:	50                   	push   eax
c002117a:	e8 cf 4f fe ff       	call   c000614e <f_stat>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021189:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021190:	85 c0                	test   eax,eax
c0021192:	75 04                	jne    c0021198 <FAT::exists(char const*)+0x62>
c0021194:	b0 01                	mov    al,0x1
c0021196:	eb 02                	jmp    c002119a <FAT::exists(char const*)+0x64>
c0021198:	b0 00                	mov    al,0x0
c002119a:	81 c4 2c 02 00 00    	add    esp,0x22c
c00211a0:	c3                   	ret    
c00211a1:	90                   	nop

c00211a2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00211a2:	b8 08 00 00 00       	mov    eax,0x8
c00211a7:	c3                   	ret    

c00211a8 <ISO9660::seek(void*, unsigned long long)>:
c00211a8:	53                   	push   ebx
c00211a9:	b8 04 00 00 00       	mov    eax,0x4
c00211ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00211b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00211b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00211ba:	85 d2                	test   edx,edx
c00211bc:	74 17                	je     c00211d5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00211be:	89 c8                	mov    eax,ecx
c00211c0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00211c3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00211c6:	b8 01 00 00 00       	mov    eax,0x1
c00211cb:	73 08                	jae    c00211d5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00211cd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00211d0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00211d3:	31 c0                	xor    eax,eax
c00211d5:	5b                   	pop    ebx
c00211d6:	c3                   	ret    
c00211d7:	90                   	nop

c00211d8 <ISO9660::tell(void*, unsigned long long*)>:
c00211d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00211dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211e0:	85 d2                	test   edx,edx
c00211e2:	74 12                	je     c00211f6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00211e4:	85 c0                	test   eax,eax
c00211e6:	74 0e                	je     c00211f6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00211e8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00211eb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00211ee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00211f1:	89 10                	mov    DWORD PTR [eax],edx
c00211f3:	31 c0                	xor    eax,eax
c00211f5:	c3                   	ret    
c00211f6:	b8 04 00 00 00       	mov    eax,0x4
c00211fb:	c3                   	ret    

c00211fc <ISO9660::getName()>:
c00211fc:	b8 78 c2 02 c0       	mov    eax,0xc002c278
c0021201:	c3                   	ret    

c0021202 <ISO9660::stat(void*, unsigned long long*)>:
c0021202:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021206:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002120a:	85 d2                	test   edx,edx
c002120c:	74 12                	je     c0021220 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002120e:	85 c0                	test   eax,eax
c0021210:	74 0e                	je     c0021220 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021212:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021215:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021218:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002121b:	89 10                	mov    DWORD PTR [eax],edx
c002121d:	31 c0                	xor    eax,eax
c002121f:	c3                   	ret    
c0021220:	b8 04 00 00 00       	mov    eax,0x4
c0021225:	c3                   	ret    

c0021226 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021226:	b8 01 00 00 00       	mov    eax,0x1
c002122b:	c3                   	ret    

c002122c <ISO9660::unlink(char const*)>:
c002122c:	b8 01 00 00 00       	mov    eax,0x1
c0021231:	c3                   	ret    

c0021232 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021232:	b8 01 00 00 00       	mov    eax,0x1
c0021237:	c3                   	ret    

c0021238 <ISO9660::rename(char const*, char const*)>:
c0021238:	b8 01 00 00 00       	mov    eax,0x1
c002123d:	c3                   	ret    

c002123e <ISO9660::mkdir(char const*)>:
c002123e:	b8 01 00 00 00       	mov    eax,0x1
c0021243:	c3                   	ret    

c0021244 <ISO9660::close(void*)>:
c0021244:	83 ec 0c             	sub    esp,0xc
c0021247:	b8 04 00 00 00       	mov    eax,0x4
c002124c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021250:	85 d2                	test   edx,edx
c0021252:	74 0e                	je     c0021262 <ISO9660::close(void*)+0x1e>
c0021254:	83 ec 0c             	sub    esp,0xc
c0021257:	52                   	push   edx
c0021258:	e8 4c e3 fe ff       	call   c000f5a9 <free>
c002125d:	83 c4 10             	add    esp,0x10
c0021260:	31 c0                	xor    eax,eax
c0021262:	83 c4 0c             	add    esp,0xc
c0021265:	c3                   	ret    

c0021266 <ISO9660::closeDir(void*)>:
c0021266:	83 ec 0c             	sub    esp,0xc
c0021269:	b8 04 00 00 00       	mov    eax,0x4
c002126e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021272:	85 d2                	test   edx,edx
c0021274:	74 0e                	je     c0021284 <ISO9660::closeDir(void*)+0x1e>
c0021276:	83 ec 0c             	sub    esp,0xc
c0021279:	52                   	push   edx
c002127a:	e8 2a e3 fe ff       	call   c000f5a9 <free>
c002127f:	83 c4 10             	add    esp,0x10
c0021282:	31 c0                	xor    eax,eax
c0021284:	83 c4 0c             	add    esp,0xc
c0021287:	c3                   	ret    

c0021288 <ISO9660::~ISO9660()>:
c0021288:	83 ec 0c             	sub    esp,0xc
c002128b:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0021290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021294:	89 10                	mov    DWORD PTR [eax],edx
c0021296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129a:	83 ec 0c             	sub    esp,0xc
c002129d:	50                   	push   eax
c002129e:	e8 c5 18 ff ff       	call   c0012b68 <Filesystem::~Filesystem()>
c00212a3:	83 c4 10             	add    esp,0x10
c00212a6:	90                   	nop
c00212a7:	83 c4 0c             	add    esp,0xc
c00212aa:	c3                   	ret    
c00212ab:	90                   	nop

c00212ac <ISO9660::~ISO9660()>:
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	83 ec 0c             	sub    esp,0xc
c00212b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212b6:	e8 cd ff ff ff       	call   c0021288 <ISO9660::~ISO9660()>
c00212bb:	83 c4 10             	add    esp,0x10
c00212be:	83 ec 08             	sub    esp,0x8
c00212c1:	6a 08                	push   0x8
c00212c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00212c7:	e8 95 14 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00212cc:	83 c4 10             	add    esp,0x10
c00212cf:	83 c4 0c             	add    esp,0xc
c00212d2:	c3                   	ret    

c00212d3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00212d3:	55                   	push   ebp
c00212d4:	31 c9                	xor    ecx,ecx
c00212d6:	57                   	push   edi
c00212d7:	56                   	push   esi
c00212d8:	53                   	push   ebx
c00212d9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00212dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00212e1:	89 eb                	mov    ebx,ebp
c00212e3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00212e7:	39 ce                	cmp    esi,ecx
c00212e9:	7e 17                	jle    c0021302 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00212eb:	31 d2                	xor    edx,edx
c00212ed:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00212f1:	7d 13                	jge    c0021306 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00212f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212f7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00212fa:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00212fd:	75 0d                	jne    c002130c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00212ff:	42                   	inc    edx
c0021300:	eb eb                	jmp    c00212ed <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021302:	31 c0                	xor    eax,eax
c0021304:	eb 0a                	jmp    c0021310 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021306:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002130a:	eb 04                	jmp    c0021310 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002130c:	41                   	inc    ecx
c002130d:	43                   	inc    ebx
c002130e:	eb d7                	jmp    c00212e7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021310:	5b                   	pop    ebx
c0021311:	5e                   	pop    esi
c0021312:	5f                   	pop    edi
c0021313:	5d                   	pop    ebp
c0021314:	c3                   	ret    

c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021315:	57                   	push   edi
c0021316:	56                   	push   esi
c0021317:	53                   	push   ebx
c0021318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002131c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021320:	39 0d 80 14 03 c0    	cmp    DWORD PTR ds:0xc0031480,ecx
c0021326:	75 08                	jne    c0021330 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021328:	38 05 f4 d2 02 c0    	cmp    BYTE PTR ds:0xc002d2f4,al
c002132e:	74 2b                	je     c002135b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021330:	83 ec 0c             	sub    esp,0xc
c0021333:	a2 f4 d2 02 c0       	mov    ds:0xc002d2f4,al
c0021338:	68 a0 14 03 c0       	push   0xc00314a0
c002133d:	0f be c0             	movsx  eax,al
c0021340:	6a 01                	push   0x1
c0021342:	89 0d 80 14 03 c0    	mov    DWORD PTR ds:0xc0031480,ecx
c0021348:	31 db                	xor    ebx,ebx
c002134a:	53                   	push   ebx
c002134b:	51                   	push   ecx
c002134c:	ff 34 85 5c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da4]
c0021353:	e8 36 4e ff ff       	call   c001618e <LogicalDisk::read(unsigned long long, int, void*)>
c0021358:	83 c4 20             	add    esp,0x20
c002135b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002135f:	be a0 14 03 c0       	mov    esi,0xc00314a0
c0021364:	b9 00 08 00 00       	mov    ecx,0x800
c0021369:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002136b:	5b                   	pop    ebx
c002136c:	5e                   	pop    esi
c002136d:	5f                   	pop    edi
c002136e:	c3                   	ret    
c002136f:	90                   	nop

c0021370 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021370:	81 ec 10 08 00 00    	sub    esp,0x810
c0021376:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002137d:	83 c0 41             	add    eax,0x41
c0021380:	0f be c0             	movsx  eax,al
c0021383:	50                   	push   eax
c0021384:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021388:	50                   	push   eax
c0021389:	6a 10                	push   0x10
c002138b:	e8 85 ff ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021390:	83 c4 10             	add    esp,0x10
c0021393:	31 c0                	xor    eax,eax
c0021395:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002139a:	75 1d                	jne    c00213b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002139c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00213a1:	75 16                	jne    c00213b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00213a3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00213a8:	75 0f                	jne    c00213b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00213aa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00213af:	75 08                	jne    c00213b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00213b1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00213b6:	0f 94 c0             	sete   al
c00213b9:	81 c4 0c 08 00 00    	add    esp,0x80c
c00213bf:	c3                   	ret    

c00213c0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00213c0:	55                   	push   ebp
c00213c1:	57                   	push   edi
c00213c2:	56                   	push   esi
c00213c3:	53                   	push   ebx
c00213c4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00213ca:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00213d1:	85 ed                	test   ebp,ebp
c00213d3:	0f 84 da 01 00 00    	je     c00215b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00213d9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00213e1:	0f 84 cc 01 00 00    	je     c00215b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00213e7:	b8 01 00 00 00       	mov    eax,0x1
c00213ec:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00213f0:	0f 85 c2 01 00 00    	jne    c00215b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213f6:	31 d2                	xor    edx,edx
c00213f8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00213ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021402:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021405:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021408:	89 04 24             	mov    DWORD PTR [esp],eax
c002140b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002140f:	01 c8                	add    eax,ecx
c0021411:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021414:	11 da                	adc    edx,ebx
c0021416:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002141a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002141e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021422:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021426:	19 d7                	sbb    edi,edx
c0021428:	72 11                	jb     c002143b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002142a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002142d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021431:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021435:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021439:	eb 0c                	jmp    c0021447 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002143b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002143f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021443:	29 ce                	sub    esi,ecx
c0021445:	19 df                	sbb    edi,ebx
c0021447:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002144a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002144d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021451:	c1 e0 0b             	shl    eax,0xb
c0021454:	01 c8                	add    eax,ecx
c0021456:	11 da                	adc    edx,ebx
c0021458:	89 04 24             	mov    DWORD PTR [esp],eax
c002145b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002145f:	51                   	push   ecx
c0021460:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021464:	50                   	push   eax
c0021465:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021469:	53                   	push   ebx
c002146a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002146e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021472:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021476:	50                   	push   eax
c0021477:	e8 99 fe ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002147c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002147f:	b8 00 08 00 00       	mov    eax,0x800
c0021484:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002148a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002148e:	29 d0                	sub    eax,edx
c0021490:	83 c4 10             	add    esp,0x10
c0021493:	89 f9                	mov    ecx,edi
c0021495:	39 c6                	cmp    esi,eax
c0021497:	83 d9 00             	sbb    ecx,0x0
c002149a:	7d 1b                	jge    c00214b7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002149c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00214a1:	75 12                	jne    c00214b5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00214a3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214b0:	e9 fa 00 00 00       	jmp    c00215af <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00214b5:	89 f0                	mov    eax,esi
c00214b7:	01 d3                	add    ebx,edx
c00214b9:	31 d2                	xor    edx,edx
c00214bb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00214bf:	39 c2                	cmp    edx,eax
c00214c1:	7d 14                	jge    c00214d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00214c3:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00214ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00214ce:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00214d1:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00214d4:	42                   	inc    edx
c00214d5:	eb e8                	jmp    c00214bf <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00214d7:	89 c2                	mov    edx,eax
c00214d9:	85 c0                	test   eax,eax
c00214db:	79 02                	jns    c00214df <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00214dd:	31 d2                	xor    edx,edx
c00214df:	01 c2                	add    edx,eax
c00214e1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00214e4:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00214eb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00214ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00214f3:	99                   	cdq    
c00214f4:	01 c1                	add    ecx,eax
c00214f6:	11 d3                	adc    ebx,edx
c00214f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00214fc:	29 c6                	sub    esi,eax
c00214fe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021502:	19 d7                	sbb    edi,edx
c0021504:	89 34 24             	mov    DWORD PTR [esp],esi
c0021507:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002150b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021510:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021513:	b8 00 00 00 00       	mov    eax,0x0
c0021518:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002151c:	7d 43                	jge    c0021561 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002151e:	52                   	push   edx
c002151f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021523:	50                   	push   eax
c0021524:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002152c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021530:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021534:	50                   	push   eax
c0021535:	e8 db fd ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002153a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021542:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021547:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002154f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021557:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	eb aa                	jmp    c002150b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021565:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021568:	74 2a                	je     c0021594 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002156a:	50                   	push   eax
c002156b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002156f:	50                   	push   eax
c0021570:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021574:	56                   	push   esi
c0021575:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021579:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002157d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021581:	51                   	push   ecx
c0021582:	e8 8e fd ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021587:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002158b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002158f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002159b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002159f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215a3:	89 18                	mov    DWORD PTR [eax],ebx
c00215a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215a9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00215ac:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00215af:	31 c0                	xor    eax,eax
c00215b1:	eb 05                	jmp    c00215b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00215b3:	b8 04 00 00 00       	mov    eax,0x4
c00215b8:	81 c4 2c 08 00 00    	add    esp,0x82c
c00215be:	5b                   	pop    ebx
c00215bf:	5e                   	pop    esi
c00215c0:	5f                   	pop    edi
c00215c1:	5d                   	pop    ebp
c00215c2:	c3                   	ret    
c00215c3:	90                   	nop

c00215c4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00215c4:	55                   	push   ebp
c00215c5:	57                   	push   edi
c00215c6:	56                   	push   esi
c00215c7:	53                   	push   ebx
c00215c8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00215ce:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00215d5:	85 ed                	test   ebp,ebp
c00215d7:	0f 84 51 02 00 00    	je     c002182e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00215dd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00215e5:	0f 84 43 02 00 00    	je     c002182e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00215eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215ee:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00215f1:	75 0a                	jne    c00215fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00215f3:	b8 07 00 00 00       	mov    eax,0x7
c00215f8:	e9 36 02 00 00       	jmp    c0021833 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00215fd:	50                   	push   eax
c00215fe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021602:	50                   	push   eax
c0021603:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002160a:	53                   	push   ebx
c002160b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002160e:	c1 e0 0b             	shl    eax,0xb
c0021611:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021614:	c1 e8 0b             	shr    eax,0xb
c0021617:	50                   	push   eax
c0021618:	e8 f8 fc ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002161d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021620:	83 c4 10             	add    esp,0x10
c0021623:	89 c1                	mov    ecx,eax
c0021625:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021628:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002162e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021631:	84 db                	test   bl,bl
c0021633:	0f 85 8b 00 00 00    	jne    c00216c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021639:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002163f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021642:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021648:	29 c6                	sub    esi,eax
c002164a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002164e:	89 f3                	mov    ebx,esi
c0021650:	89 f1                	mov    ecx,esi
c0021652:	c1 fb 1f             	sar    ebx,0x1f
c0021655:	01 f0                	add    eax,esi
c0021657:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002165a:	11 da                	adc    edx,ebx
c002165c:	89 04 24             	mov    DWORD PTR [esp],eax
c002165f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021663:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021666:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021669:	89 d8                	mov    eax,ebx
c002166b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002166f:	ba 00 00 00 00       	mov    edx,0x0
c0021674:	19 f8                	sbb    eax,edi
c0021676:	b8 00 00 00 00       	mov    eax,0x0
c002167b:	73 08                	jae    c0021685 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002167d:	89 f0                	mov    eax,esi
c002167f:	89 fa                	mov    edx,edi
c0021681:	29 c8                	sub    eax,ecx
c0021683:	19 da                	sbb    edx,ebx
c0021685:	89 d7                	mov    edi,edx
c0021687:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002168a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002168d:	09 c7                	or     edi,eax
c002168f:	0f 84 5e ff ff ff    	je     c00215f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021695:	57                   	push   edi
c0021696:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002169a:	50                   	push   eax
c002169b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00216a2:	53                   	push   ebx
c00216a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00216a6:	c1 e0 0b             	shl    eax,0xb
c00216a9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00216ad:	c1 e8 0b             	shr    eax,0xb
c00216b0:	50                   	push   eax
c00216b1:	e8 5f fc ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00216b9:	83 c4 10             	add    esp,0x10
c00216bc:	25 ff 07 00 00       	and    eax,0x7ff
c00216c1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00216c4:	31 ff                	xor    edi,edi
c00216c6:	56                   	push   esi
c00216c7:	6a 28                	push   0x28
c00216c9:	6a 00                	push   0x0
c00216cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00216cf:	50                   	push   eax
c00216d0:	e8 7b f0 fd ff       	call   c0000750 <memset>
c00216d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00216d8:	25 ff 07 00 00       	and    eax,0x7ff
c00216dd:	89 c6                	mov    esi,eax
c00216df:	83 c6 21             	add    esi,0x21
c00216e2:	83 d7 00             	adc    edi,0x0
c00216e5:	83 c4 10             	add    esp,0x10
c00216e8:	31 c9                	xor    ecx,ecx
c00216ea:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00216f1:	83 f9 28             	cmp    ecx,0x28
c00216f4:	88 04 24             	mov    BYTE PTR [esp],al
c00216f7:	0f 94 c2             	sete   dl
c00216fa:	88 d0                	mov    al,dl
c00216fc:	ba ff 07 00 00       	mov    edx,0x7ff
c0021701:	39 f2                	cmp    edx,esi
c0021703:	ba 00 00 00 00       	mov    edx,0x0
c0021708:	19 fa                	sbb    edx,edi
c002170a:	0f 92 c2             	setb   dl
c002170d:	09 c2                	or     edx,eax
c002170f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021713:	0f 94 c0             	sete   al
c0021716:	08 d0                	or     al,dl
c0021718:	75 16                	jne    c0021730 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002171a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002171e:	74 10                	je     c0021730 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021720:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021723:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021727:	41                   	inc    ecx
c0021728:	83 c6 01             	add    esi,0x1
c002172b:	83 d7 00             	adc    edi,0x0
c002172e:	eb ba                	jmp    c00216ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021730:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021737:	83 ec 0c             	sub    esp,0xc
c002173a:	8d 74 24 24          	lea    esi,[esp+0x24]
c002173e:	56                   	push   esi
c002173f:	e8 28 f0 fd ff       	call   c000076c <strlen>
c0021744:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002174b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002174f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021757:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002175a:	5a                   	pop    edx
c002175b:	25 ff 07 00 00       	and    eax,0x7ff
c0021760:	59                   	pop    ecx
c0021761:	01 f8                	add    eax,edi
c0021763:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021769:	83 e0 02             	and    eax,0x2
c002176c:	3c 01                	cmp    al,0x1
c002176e:	19 c0                	sbb    eax,eax
c0021770:	83 c0 02             	add    eax,0x2
c0021773:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021777:	56                   	push   esi
c0021778:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002177c:	50                   	push   eax
c002177d:	e8 8a f0 fd ff       	call   c000080c <strcpy>
c0021782:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021786:	83 c4 10             	add    esp,0x10
c0021789:	84 c0                	test   al,al
c002178b:	75 21                	jne    c00217ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002178d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021795:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002179d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00217a5:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00217ac:	eb 28                	jmp    c00217d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00217ae:	fe c8                	dec    al
c00217b0:	75 24                	jne    c00217d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00217b2:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00217ba:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00217c2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00217ca:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00217d1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00217d6:	8d 74 24 40          	lea    esi,[esp+0x40]
c00217da:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00217e1:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00217e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217ea:	0f b6 f3             	movzx  esi,bl
c00217ed:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00217f4:	31 db                	xor    ebx,ebx
c00217f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00217fc:	89 df                	mov    edi,ebx
c00217fe:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021804:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021807:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002180a:	39 c6                	cmp    esi,eax
c002180c:	19 d7                	sbb    edi,edx
c002180e:	72 10                	jb     c0021820 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021810:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021817:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002181e:	eb 0a                	jmp    c002182a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021820:	29 f0                	sub    eax,esi
c0021822:	19 da                	sbb    edx,ebx
c0021824:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021827:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002182a:	31 c0                	xor    eax,eax
c002182c:	eb 05                	jmp    c0021833 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002182e:	b8 04 00 00 00       	mov    eax,0x4
c0021833:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021839:	5b                   	pop    ebx
c002183a:	5e                   	pop    esi
c002183b:	5f                   	pop    edi
c002183c:	5d                   	pop    ebp
c002183d:	c3                   	ret    

c002183e <readRoot(unsigned int*, unsigned int*, char)>:
c002183e:	57                   	push   edi
c002183f:	56                   	push   esi
c0021840:	81 ec 38 08 00 00    	sub    esp,0x838
c0021846:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002184e:	50                   	push   eax
c002184f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021853:	50                   	push   eax
c0021854:	6a 10                	push   0x10
c0021856:	e8 ba fa ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002185b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021862:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021866:	b9 22 00 00 00       	mov    ecx,0x22
c002186b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002186d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021874:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021878:	89 10                	mov    DWORD PTR [eax],edx
c002187a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021881:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021885:	89 10                	mov    DWORD PTR [eax],edx
c0021887:	81 c4 44 08 00 00    	add    esp,0x844
c002188d:	b0 01                	mov    al,0x1
c002188f:	5e                   	pop    esi
c0021890:	5f                   	pop    edi
c0021891:	c3                   	ret    

c0021892 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021892:	55                   	push   ebp
c0021893:	57                   	push   edi
c0021894:	56                   	push   esi
c0021895:	53                   	push   ebx
c0021896:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002189c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00218a3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00218aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218ae:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00218b2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00218b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00218ba:	75 03                	jne    c00218bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00218bc:	83 c3 02             	add    ebx,0x2
c00218bf:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00218c2:	75 03                	jne    c00218c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00218c4:	43                   	inc    ebx
c00218c5:	eb f8                	jmp    c00218bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00218c7:	51                   	push   ecx
c00218c8:	68 00 01 00 00       	push   0x100
c00218cd:	6a 00                	push   0x0
c00218cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218d3:	50                   	push   eax
c00218d4:	e8 77 ee fd ff       	call   c0000750 <memset>
c00218d9:	83 c4 10             	add    esp,0x10
c00218dc:	31 d2                	xor    edx,edx
c00218de:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00218e1:	84 c0                	test   al,al
c00218e3:	74 21                	je     c0021906 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00218e5:	3c 2f                	cmp    al,0x2f
c00218e7:	75 0b                	jne    c00218f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00218e9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00218ed:	bd 01 00 00 00       	mov    ebp,0x1
c00218f2:	eb 14                	jmp    c0021908 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00218f4:	8d 48 9f             	lea    ecx,[eax-0x61]
c00218f7:	80 f9 19             	cmp    cl,0x19
c00218fa:	77 03                	ja     c00218ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218fc:	83 e8 20             	sub    eax,0x20
c00218ff:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021903:	42                   	inc    edx
c0021904:	eb d8                	jmp    c00218de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021906:	31 ed                	xor    ebp,ebp
c0021908:	83 ec 0c             	sub    esp,0xc
c002190b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021912:	e8 82 dc fe ff       	call   c000f599 <malloc>
c0021917:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002191e:	89 c6                	mov    esi,eax
c0021920:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021926:	c1 ef 0b             	shr    edi,0xb
c0021929:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021930:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021934:	83 c4 10             	add    esp,0x10
c0021937:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002193c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021940:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021947:	74 28                	je     c0021971 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021949:	52                   	push   edx
c002194a:	57                   	push   edi
c002194b:	50                   	push   eax
c002194c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021950:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021957:	e8 b9 f9 ff ff       	call   c0021315 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002195c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021960:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021967:	05 00 08 00 00       	add    eax,0x800
c002196c:	83 c4 10             	add    esp,0x10
c002196f:	eb cb                	jmp    c002193c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021971:	83 ec 0c             	sub    esp,0xc
c0021974:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021978:	57                   	push   edi
c0021979:	e8 ee ed fd ff       	call   c000076c <strlen>
c002197e:	50                   	push   eax
c002197f:	57                   	push   edi
c0021980:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021987:	56                   	push   esi
c0021988:	e8 46 f9 ff ff       	call   c00212d3 <__memmem(unsigned char*, int, unsigned char*, int)>
c002198d:	83 c4 20             	add    esp,0x20
c0021990:	85 c0                	test   eax,eax
c0021992:	75 13                	jne    c00219a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021994:	83 ec 0c             	sub    esp,0xc
c0021997:	56                   	push   esi
c0021998:	e8 0c dc fe ff       	call   c000f5a9 <free>
c002199d:	83 c4 10             	add    esp,0x10
c00219a0:	31 c0                	xor    eax,eax
c00219a2:	e9 b3 00 00 00       	jmp    c0021a5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00219a7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00219ab:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00219af:	c1 e7 08             	shl    edi,0x8
c00219b2:	c1 e2 10             	shl    edx,0x10
c00219b5:	09 d7                	or     edi,edx
c00219b7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00219bb:	09 d7                	or     edi,edx
c00219bd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00219c1:	c1 e2 18             	shl    edx,0x18
c00219c4:	09 d7                	or     edi,edx
c00219c6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00219ca:	89 d1                	mov    ecx,edx
c00219cc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00219d0:	c1 e1 08             	shl    ecx,0x8
c00219d3:	c1 e2 10             	shl    edx,0x10
c00219d6:	09 ca                	or     edx,ecx
c00219d8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00219dc:	09 ca                	or     edx,ecx
c00219de:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00219e2:	c1 e1 18             	shl    ecx,0x18
c00219e5:	09 ca                	or     edx,ecx
c00219e7:	89 e9                	mov    ecx,ebp
c00219e9:	84 c9                	test   cl,cl
c00219eb:	74 3c                	je     c0021a29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00219ed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00219f1:	83 ec 0c             	sub    esp,0xc
c00219f4:	56                   	push   esi
c00219f5:	e8 af db fe ff       	call   c000f5a9 <free>
c00219fa:	83 c4 0c             	add    esp,0xc
c00219fd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021a04:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021a09:	50                   	push   eax
c0021a0a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021a11:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021a18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021a1c:	52                   	push   edx
c0021a1d:	57                   	push   edi
c0021a1e:	53                   	push   ebx
c0021a1f:	e8 6e fe ff ff       	call   c0021892 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021a24:	83 c4 20             	add    esp,0x20
c0021a27:	eb 31                	jmp    c0021a5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021a29:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021a2c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021a33:	d0 e8                	shr    al,1
c0021a35:	89 3b                	mov    DWORD PTR [ebx],edi
c0021a37:	83 e0 01             	and    eax,0x1
c0021a3a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021a41:	83 ec 0c             	sub    esp,0xc
c0021a44:	89 13                	mov    DWORD PTR [ebx],edx
c0021a46:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021a4d:	89 03                	mov    DWORD PTR [ebx],eax
c0021a4f:	56                   	push   esi
c0021a50:	e8 54 db fe ff       	call   c000f5a9 <free>
c0021a55:	83 c4 10             	add    esp,0x10
c0021a58:	b0 01                	mov    al,0x1
c0021a5a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a60:	5b                   	pop    ebx
c0021a61:	5e                   	pop    esi
c0021a62:	5f                   	pop    edi
c0021a63:	5d                   	pop    ebp
c0021a64:	c3                   	ret    

c0021a65 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021a65:	55                   	push   ebp
c0021a66:	57                   	push   edi
c0021a67:	56                   	push   esi
c0021a68:	53                   	push   ebx
c0021a69:	83 ec 20             	sub    esp,0x20
c0021a6c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021a70:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021a74:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021a78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a80:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021a88:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021a8d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021a93:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021a99:	57                   	push   edi
c0021a9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a9e:	50                   	push   eax
c0021a9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021aa3:	50                   	push   eax
c0021aa4:	e8 95 fd ff ff       	call   c002183e <readRoot(unsigned int*, unsigned int*, char)>
c0021aa9:	5a                   	pop    edx
c0021aaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021aae:	e8 b9 ec fd ff       	call   c000076c <strlen>
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	83 f8 03             	cmp    eax,0x3
c0021ab9:	77 17                	ja     c0021ad2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021abb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021abf:	89 03                	mov    DWORD PTR [ebx],eax
c0021ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ac5:	89 06                	mov    DWORD PTR [esi],eax
c0021ac7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021ace:	b0 01                	mov    al,0x1
c0021ad0:	eb 19                	jmp    c0021aeb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021ad2:	50                   	push   eax
c0021ad3:	55                   	push   ebp
c0021ad4:	57                   	push   edi
c0021ad5:	56                   	push   esi
c0021ad6:	53                   	push   ebx
c0021ad7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021adb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021adf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ae3:	e8 aa fd ff ff       	call   c0021892 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ae8:	83 c4 20             	add    esp,0x20
c0021aeb:	83 c4 1c             	add    esp,0x1c
c0021aee:	5b                   	pop    ebx
c0021aef:	5e                   	pop    esi
c0021af0:	5f                   	pop    edi
c0021af1:	5d                   	pop    ebp
c0021af2:	c3                   	ret    
c0021af3:	90                   	nop

c0021af4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021af4:	57                   	push   edi
c0021af5:	56                   	push   esi
c0021af6:	53                   	push   ebx
c0021af7:	83 ec 10             	sub    esp,0x10
c0021afa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021afe:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b02:	85 ff                	test   edi,edi
c0021b04:	0f 84 8b 00 00 00    	je     c0021b95 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021b0a:	85 f6                	test   esi,esi
c0021b0c:	0f 84 83 00 00 00    	je     c0021b95 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021b12:	b8 03 00 00 00       	mov    eax,0x3
c0021b17:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021b1c:	75 7c                	jne    c0021b9a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b1e:	83 ec 0c             	sub    esp,0xc
c0021b21:	6a 1c                	push   0x1c
c0021b23:	e8 71 da fe ff       	call   c000f599 <malloc>
c0021b28:	89 07                	mov    DWORD PTR [edi],eax
c0021b2a:	89 c3                	mov    ebx,eax
c0021b2c:	58                   	pop    eax
c0021b2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b31:	50                   	push   eax
c0021b32:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b35:	50                   	push   eax
c0021b36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b3a:	50                   	push   eax
c0021b3b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b3f:	50                   	push   eax
c0021b40:	56                   	push   esi
c0021b41:	e8 1f ff ff ff       	call   c0021a65 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b46:	83 c4 20             	add    esp,0x20
c0021b49:	84 c0                	test   al,al
c0021b4b:	74 07                	je     c0021b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021b4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b52:	74 0b                	je     c0021b5f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021b54:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b58:	b8 01 00 00 00       	mov    eax,0x1
c0021b5d:	eb 3b                	jmp    c0021b9a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b63:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b67:	89 03                	mov    DWORD PTR [ebx],eax
c0021b69:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b74:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b8c:	8a 06                	mov    al,BYTE PTR [esi]
c0021b8e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b91:	31 c0                	xor    eax,eax
c0021b93:	eb 05                	jmp    c0021b9a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021b95:	b8 04 00 00 00       	mov    eax,0x4
c0021b9a:	83 c4 10             	add    esp,0x10
c0021b9d:	5b                   	pop    ebx
c0021b9e:	5e                   	pop    esi
c0021b9f:	5f                   	pop    edi
c0021ba0:	c3                   	ret    
c0021ba1:	90                   	nop

c0021ba2 <ISO9660::exists(char const*)>:
c0021ba2:	83 ec 28             	sub    esp,0x28
c0021ba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ba9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021bad:	52                   	push   edx
c0021bae:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021bb1:	52                   	push   edx
c0021bb2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021bb6:	52                   	push   edx
c0021bb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021bbb:	52                   	push   edx
c0021bbc:	50                   	push   eax
c0021bbd:	e8 a3 fe ff ff       	call   c0021a65 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021bc2:	83 c4 3c             	add    esp,0x3c
c0021bc5:	c3                   	ret    

c0021bc6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021bc6:	56                   	push   esi
c0021bc7:	53                   	push   ebx
c0021bc8:	83 ec 14             	sub    esp,0x14
c0021bcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021bcf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021bd3:	85 db                	test   ebx,ebx
c0021bd5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021bd9:	0f 94 c2             	sete   dl
c0021bdc:	85 f6                	test   esi,esi
c0021bde:	0f 94 c0             	sete   al
c0021be1:	08 c2                	or     dl,al
c0021be3:	75 68                	jne    c0021c4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021be5:	85 c9                	test   ecx,ecx
c0021be7:	74 64                	je     c0021c4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021be9:	83 ec 0c             	sub    esp,0xc
c0021bec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021bef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bf3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021bf9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c00:	50                   	push   eax
c0021c01:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021c04:	50                   	push   eax
c0021c05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c09:	50                   	push   eax
c0021c0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c0e:	50                   	push   eax
c0021c0f:	51                   	push   ecx
c0021c10:	e8 50 fe ff ff       	call   c0021a65 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c15:	83 c4 20             	add    esp,0x20
c0021c18:	ba 01 00 00 00       	mov    edx,0x1
c0021c1d:	84 c0                	test   al,al
c0021c1f:	74 31                	je     c0021c52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c2c:	89 03                	mov    DWORD PTR [ebx],eax
c0021c2e:	ba 00 00 00 00       	mov    edx,0x0
c0021c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c37:	85 c0                	test   eax,eax
c0021c39:	0f 95 06             	setne  BYTE PTR [esi]
c0021c3c:	74 14                	je     c0021c52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021c44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c4b:	eb 05                	jmp    c0021c52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c4d:	ba 04 00 00 00       	mov    edx,0x4
c0021c52:	83 c4 14             	add    esp,0x14
c0021c55:	89 d0                	mov    eax,edx
c0021c57:	5b                   	pop    ebx
c0021c58:	5e                   	pop    esi
c0021c59:	c3                   	ret    

c0021c5a <ISO9660::openDir(char const*, void**)>:
c0021c5a:	57                   	push   edi
c0021c5b:	56                   	push   esi
c0021c5c:	53                   	push   ebx
c0021c5d:	83 ec 10             	sub    esp,0x10
c0021c60:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c68:	85 ff                	test   edi,edi
c0021c6a:	74 7b                	je     c0021ce7 <ISO9660::openDir(char const*, void**)+0x8d>
c0021c6c:	85 f6                	test   esi,esi
c0021c6e:	74 77                	je     c0021ce7 <ISO9660::openDir(char const*, void**)+0x8d>
c0021c70:	83 ec 0c             	sub    esp,0xc
c0021c73:	6a 1c                	push   0x1c
c0021c75:	e8 1f d9 fe ff       	call   c000f599 <malloc>
c0021c7a:	89 07                	mov    DWORD PTR [edi],eax
c0021c7c:	89 c3                	mov    ebx,eax
c0021c7e:	58                   	pop    eax
c0021c7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c83:	50                   	push   eax
c0021c84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c87:	50                   	push   eax
c0021c88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c8c:	50                   	push   eax
c0021c8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c91:	50                   	push   eax
c0021c92:	56                   	push   esi
c0021c93:	e8 cd fd ff ff       	call   c0021a65 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c98:	83 c4 20             	add    esp,0x20
c0021c9b:	84 c0                	test   al,al
c0021c9d:	74 07                	je     c0021ca6 <ISO9660::openDir(char const*, void**)+0x4c>
c0021c9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ca4:	75 0b                	jne    c0021cb1 <ISO9660::openDir(char const*, void**)+0x57>
c0021ca6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021caa:	b8 01 00 00 00       	mov    eax,0x1
c0021caf:	eb 3b                	jmp    c0021cec <ISO9660::openDir(char const*, void**)+0x92>
c0021cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021cb9:	89 03                	mov    DWORD PTR [ebx],eax
c0021cbb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021cc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ccd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021cd4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021cd7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021cde:	8a 06                	mov    al,BYTE PTR [esi]
c0021ce0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ce3:	31 c0                	xor    eax,eax
c0021ce5:	eb 05                	jmp    c0021cec <ISO9660::openDir(char const*, void**)+0x92>
c0021ce7:	b8 04 00 00 00       	mov    eax,0x4
c0021cec:	83 c4 10             	add    esp,0x10
c0021cef:	5b                   	pop    ebx
c0021cf0:	5e                   	pop    esi
c0021cf1:	5f                   	pop    edi
c0021cf2:	c3                   	ret    
c0021cf3:	90                   	nop

c0021cf4 <ISO9660::ISO9660()>:
c0021cf4:	83 ec 0c             	sub    esp,0xc
c0021cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfb:	83 ec 0c             	sub    esp,0xc
c0021cfe:	50                   	push   eax
c0021cff:	e8 40 0e ff ff       	call   c0012b44 <Filesystem::Filesystem()>
c0021d04:	83 c4 10             	add    esp,0x10
c0021d07:	ba 9c c2 02 c0       	mov    edx,0xc002c29c
c0021d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d10:	89 10                	mov    DWORD PTR [eax],edx
c0021d12:	90                   	nop
c0021d13:	83 c4 0c             	add    esp,0xc
c0021d16:	c3                   	ret    
c0021d17:	90                   	nop

c0021d18 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021d18:	83 ec 1c             	sub    esp,0x1c
c0021d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d1f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021d23:	89 10                	mov    DWORD PTR [eax],edx
c0021d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d3b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021d40:	75 23                	jne    c0021d65 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d4f:	0f af c2             	imul   eax,edx
c0021d52:	85 c0                	test   eax,eax
c0021d54:	79 03                	jns    c0021d59 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021d56:	83 c0 03             	add    eax,0x3
c0021d59:	c1 f8 02             	sar    eax,0x2
c0021d5c:	05 a0 0f 00 00       	add    eax,0xfa0
c0021d61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021d6d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d74:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d7f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d8d:	c1 e0 02             	shl    eax,0x2
c0021d90:	83 ec 0c             	sub    esp,0xc
c0021d93:	50                   	push   eax
c0021d94:	e8 00 d8 fe ff       	call   c000f599 <malloc>
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	89 c2                	mov    edx,eax
c0021d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021da5:	83 ec 04             	sub    esp,0x4
c0021da8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021dac:	50                   	push   eax
c0021dad:	6a 01                	push   0x1
c0021daf:	6a 04                	push   0x4
c0021db1:	e8 af 6d fe ff       	call   c0008b65 <src_new>
c0021db6:	83 c4 10             	add    esp,0x10
c0021db9:	89 c2                	mov    edx,eax
c0021dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dbf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc6:	85 c0                	test   eax,eax
c0021dc8:	74 10                	je     c0021dda <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021dca:	83 ec 0c             	sub    esp,0xc
c0021dcd:	68 fc c2 02 c0       	push   0xc002c2fc
c0021dd2:	e8 0c 82 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0021dd7:	83 c4 10             	add    esp,0x10
c0021dda:	a0 a0 20 03 c0       	mov    al,ds:0xc00320a0
c0021ddf:	83 f0 01             	xor    eax,0x1
c0021de2:	84 c0                	test   al,al
c0021de4:	74 57                	je     c0021e3d <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021de6:	a1 18 c3 02 c0       	mov    eax,ds:0xc002c318
c0021deb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021def:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021df7:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021dff:	7f 35                	jg     c0021e36 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021e01:	83 ec 0c             	sub    esp,0xc
c0021e04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021e08:	e8 62 54 00 00       	call   c002726f <__floatsisf>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	8b 15 18 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c318
c0021e16:	83 ec 08             	sub    esp,0x8
c0021e19:	52                   	push   edx
c0021e1a:	50                   	push   eax
c0021e1b:	e8 61 50 00 00       	call   c0026e81 <__mulsf3>
c0021e20:	83 c4 10             	add    esp,0x10
c0021e23:	89 c2                	mov    edx,eax
c0021e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e29:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0021e30:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e34:	eb c1                	jmp    c0021df7 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021e36:	c6 05 a0 20 03 c0 01 	mov    BYTE PTR ds:0xc00320a0,0x1
c0021e3d:	90                   	nop
c0021e3e:	83 c4 1c             	add    esp,0x1c
c0021e41:	c3                   	ret    

c0021e42 <SoundChannel::~SoundChannel()>:
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021e4c:	83 ec 0c             	sub    esp,0xc
c0021e4f:	50                   	push   eax
c0021e50:	e8 54 d7 fe ff       	call   c000f5a9 <free>
c0021e55:	83 c4 10             	add    esp,0x10
c0021e58:	90                   	nop
c0021e59:	83 c4 0c             	add    esp,0xc
c0021e5c:	c3                   	ret    
c0021e5d:	90                   	nop

c0021e5e <SoundChannel::getSampleRate()>:
c0021e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e62:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e64:	c3                   	ret    
c0021e65:	90                   	nop

c0021e66 <SoundChannel::getBits()>:
c0021e66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e6d:	c3                   	ret    

c0021e6e <SoundChannel::getBufferUsed()>:
c0021e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e72:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021e75:	c3                   	ret    

c0021e76 <SoundChannel::getBufferSize()>:
c0021e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021e7d:	c3                   	ret    

c0021e7e <SoundChannel::unbuffer(float*, int, int)>:
c0021e7e:	56                   	push   esi
c0021e7f:	53                   	push   ebx
c0021e80:	83 ec 40             	sub    esp,0x40
c0021e83:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021e87:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021e8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e8e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021e91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021e95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021e99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021e9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ea5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021ea9:	e8 c1 53 00 00       	call   c002726f <__floatsisf>
c0021eae:	5a                   	pop    edx
c0021eaf:	89 c6                	mov    esi,eax
c0021eb1:	ff 33                	push   DWORD PTR [ebx]
c0021eb3:	e8 b7 53 00 00       	call   c002726f <__floatsisf>
c0021eb8:	59                   	pop    ecx
c0021eb9:	5a                   	pop    edx
c0021eba:	50                   	push   eax
c0021ebb:	56                   	push   esi
c0021ebc:	e8 83 51 00 00       	call   c0027044 <__divsf3>
c0021ec1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ec4:	e8 76 66 00 00       	call   c002853f <__extendsfdf2>
c0021ec9:	59                   	pop    ecx
c0021eca:	5e                   	pop    esi
c0021ecb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ecf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021ed3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021edb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021edf:	50                   	push   eax
c0021ee0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021ee3:	e8 72 68 fe ff       	call   c000875a <src_process>
c0021ee8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021eec:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021eef:	83 c4 0c             	add    esp,0xc
c0021ef2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021ef5:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021ef8:	29 d0                	sub    eax,edx
c0021efa:	c1 e0 02             	shl    eax,0x2
c0021efd:	50                   	push   eax
c0021efe:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021f01:	50                   	push   eax
c0021f02:	51                   	push   ecx
c0021f03:	e8 80 e7 fd ff       	call   c0000688 <memmove>
c0021f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f0c:	83 c4 44             	add    esp,0x44
c0021f0f:	5b                   	pop    ebx
c0021f10:	5e                   	pop    esi
c0021f11:	c3                   	ret    

c0021f12 <SoundChannel::buffer16(short*, int)>:
c0021f12:	55                   	push   ebp
c0021f13:	57                   	push   edi
c0021f14:	56                   	push   esi
c0021f15:	53                   	push   ebx
c0021f16:	83 ec 1c             	sub    esp,0x1c
c0021f19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021f1d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021f20:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021f23:	0f 84 d2 00 00 00    	je     c0021ffb <SoundChannel::buffer16(short*, int)+0xe9>
c0021f29:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021f2d:	85 ed                	test   ebp,ebp
c0021f2f:	0f 8e c6 00 00 00    	jle    c0021ffb <SoundChannel::buffer16(short*, int)+0xe9>
c0021f35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f39:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021f3e:	83 ec 0c             	sub    esp,0xc
c0021f41:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021f44:	50                   	push   eax
c0021f45:	e8 25 53 00 00       	call   c002726f <__floatsisf>
c0021f4a:	59                   	pop    ecx
c0021f4b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021f4e:	5f                   	pop    edi
c0021f4f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021f52:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f55:	55                   	push   ebp
c0021f56:	50                   	push   eax
c0021f57:	e8 25 4f 00 00       	call   c0026e81 <__mulsf3>
c0021f5c:	83 c4 10             	add    esp,0x10
c0021f5f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f62:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021f65:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021f68:	0f 84 99 00 00 00    	je     c0022007 <SoundChannel::buffer16(short*, int)+0xf5>
c0021f6e:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021f73:	74 78                	je     c0021fed <SoundChannel::buffer16(short*, int)+0xdb>
c0021f75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f79:	83 ec 0c             	sub    esp,0xc
c0021f7c:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021f80:	50                   	push   eax
c0021f81:	e8 e9 52 00 00       	call   c002726f <__floatsisf>
c0021f86:	5f                   	pop    edi
c0021f87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021f8a:	5a                   	pop    edx
c0021f8b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021f8e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021f91:	55                   	push   ebp
c0021f92:	50                   	push   eax
c0021f93:	e8 e9 4e 00 00       	call   c0026e81 <__mulsf3>
c0021f98:	83 c4 10             	add    esp,0x10
c0021f9b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021f9e:	be 02 00 00 00       	mov    esi,0x2
c0021fa3:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021fa6:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021fa9:	74 46                	je     c0021ff1 <SoundChannel::buffer16(short*, int)+0xdf>
c0021fab:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021faf:	eb 36                	jmp    c0021fe7 <SoundChannel::buffer16(short*, int)+0xd5>
c0021fb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021fb5:	83 ec 0c             	sub    esp,0xc
c0021fb8:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021fbc:	46                   	inc    esi
c0021fbd:	50                   	push   eax
c0021fbe:	e8 ac 52 00 00       	call   c002726f <__floatsisf>
c0021fc3:	5a                   	pop    edx
c0021fc4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021fc7:	59                   	pop    ecx
c0021fc8:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021fcb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021fce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fd2:	50                   	push   eax
c0021fd3:	e8 a9 4e 00 00       	call   c0026e81 <__mulsf3>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021fdf:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021fe2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021fe5:	74 0a                	je     c0021ff1 <SoundChannel::buffer16(short*, int)+0xdf>
c0021fe7:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021feb:	75 c4                	jne    c0021fb1 <SoundChannel::buffer16(short*, int)+0x9f>
c0021fed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021ff1:	83 c4 1c             	add    esp,0x1c
c0021ff4:	89 f0                	mov    eax,esi
c0021ff6:	5b                   	pop    ebx
c0021ff7:	5e                   	pop    esi
c0021ff8:	5f                   	pop    edi
c0021ff9:	5d                   	pop    ebp
c0021ffa:	c3                   	ret    
c0021ffb:	83 c4 1c             	add    esp,0x1c
c0021ffe:	31 f6                	xor    esi,esi
c0022000:	5b                   	pop    ebx
c0022001:	89 f0                	mov    eax,esi
c0022003:	5e                   	pop    esi
c0022004:	5f                   	pop    edi
c0022005:	5d                   	pop    ebp
c0022006:	c3                   	ret    
c0022007:	be 01 00 00 00       	mov    esi,0x1
c002200c:	eb e3                	jmp    c0021ff1 <SoundChannel::buffer16(short*, int)+0xdf>

c002200e <SoundChannel::buffer8(unsigned char*, int)>:
c002200e:	55                   	push   ebp
c002200f:	57                   	push   edi
c0022010:	56                   	push   esi
c0022011:	53                   	push   ebx
c0022012:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022016:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002201a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002201d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022021:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022024:	74 7a                	je     c00220a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022026:	85 ff                	test   edi,edi
c0022028:	7e 76                	jle    c00220a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002202a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002202e:	8d 70 01             	lea    esi,[eax+0x1]
c0022031:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022034:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022037:	8b 1c 9d a0 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce360]
c002203e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022041:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022044:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022047:	74 5e                	je     c00220a7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022049:	83 ff 01             	cmp    edi,0x1
c002204c:	74 4b                	je     c0022099 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002204e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022052:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022055:	8d 70 01             	lea    esi,[eax+0x1]
c0022058:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002205b:	8b 1c 9d a0 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce360]
c0022062:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022065:	b8 02 00 00 00       	mov    eax,0x2
c002206a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002206d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022070:	75 23                	jne    c0022095 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022072:	eb 27                	jmp    c002209b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022074:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022079:	8d 71 01             	lea    esi,[ecx+0x1]
c002207c:	40                   	inc    eax
c002207d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022080:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022083:	8b 1c 9d a0 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce360]
c002208a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002208d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022090:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022093:	74 06                	je     c002209b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022095:	39 c7                	cmp    edi,eax
c0022097:	75 db                	jne    c0022074 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022099:	89 f8                	mov    eax,edi
c002209b:	5b                   	pop    ebx
c002209c:	5e                   	pop    esi
c002209d:	5f                   	pop    edi
c002209e:	5d                   	pop    ebp
c002209f:	c3                   	ret    
c00220a0:	5b                   	pop    ebx
c00220a1:	31 c0                	xor    eax,eax
c00220a3:	5e                   	pop    esi
c00220a4:	5f                   	pop    edi
c00220a5:	5d                   	pop    ebp
c00220a6:	c3                   	ret    
c00220a7:	b8 01 00 00 00       	mov    eax,0x1
c00220ac:	eb ed                	jmp    c002209b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00220ae <SoundDevice::SoundDevice(char const*)>:
c00220ae:	83 ec 1c             	sub    esp,0x1c
c00220b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b5:	83 ec 08             	sub    esp,0x8
c00220b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00220bc:	50                   	push   eax
c00220bd:	e8 b4 1d ff ff       	call   c0013e76 <Device::Device(char const*)>
c00220c2:	83 c4 10             	add    esp,0x10
c00220c5:	ba 24 c3 02 c0       	mov    edx,0xc002c324
c00220ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220ce:	89 10                	mov    DWORD PTR [eax],edx
c00220d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220d4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00220de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00220ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220f4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00220f9:	7f 19                	jg     c0022114 <SoundDevice::SoundDevice(char const*)+0x66>
c00220fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022103:	83 c2 54             	add    edx,0x54
c0022106:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002210e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022112:	eb e0                	jmp    c00220f4 <SoundDevice::SoundDevice(char const*)+0x46>
c0022114:	90                   	nop
c0022115:	83 c4 1c             	add    esp,0x1c
c0022118:	c3                   	ret    
c0022119:	90                   	nop

c002211a <SoundDevice::~SoundDevice()>:
c002211a:	53                   	push   ebx
c002211b:	83 ec 18             	sub    esp,0x18
c002211e:	ba 24 c3 02 c0       	mov    edx,0xc002c324
c0022123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022127:	89 10                	mov    DWORD PTR [eax],edx
c0022129:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022131:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022136:	7f 46                	jg     c002217e <SoundDevice::~SoundDevice()+0x64>
c0022138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002213c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022140:	83 c2 54             	add    edx,0x54
c0022143:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022147:	85 c0                	test   eax,eax
c0022149:	74 2d                	je     c0022178 <SoundDevice::~SoundDevice()+0x5e>
c002214b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002214f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022153:	83 c2 54             	add    edx,0x54
c0022156:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002215a:	85 db                	test   ebx,ebx
c002215c:	74 1a                	je     c0022178 <SoundDevice::~SoundDevice()+0x5e>
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	53                   	push   ebx
c0022162:	e8 db fc ff ff       	call   c0021e42 <SoundChannel::~SoundChannel()>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	83 ec 08             	sub    esp,0x8
c002216d:	6a 2c                	push   0x2c
c002216f:	53                   	push   ebx
c0022170:	e8 ec 05 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0022175:	83 c4 10             	add    esp,0x10
c0022178:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002217c:	eb b3                	jmp    c0022131 <SoundDevice::~SoundDevice()+0x17>
c002217e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022182:	83 ec 0c             	sub    esp,0xc
c0022185:	50                   	push   eax
c0022186:	e8 b5 19 ff ff       	call   c0013b40 <Device::~Device()>
c002218b:	83 c4 10             	add    esp,0x10
c002218e:	90                   	nop
c002218f:	83 c4 18             	add    esp,0x18
c0022192:	5b                   	pop    ebx
c0022193:	c3                   	ret    

c0022194 <SoundDevice::~SoundDevice()>:
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	83 ec 0c             	sub    esp,0xc
c002219a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002219e:	e8 77 ff ff ff       	call   c002211a <SoundDevice::~SoundDevice()>
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	83 ec 08             	sub    esp,0x8
c00221a9:	68 e4 01 00 00       	push   0x1e4
c00221ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221b2:	e8 aa 05 ff ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00221b7:	83 c4 10             	add    esp,0x10
c00221ba:	83 c4 0c             	add    esp,0xc
c00221bd:	c3                   	ret    

c00221be <SoundDevice::getFreeChannelNum()>:
c00221be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221c2:	31 c0                	xor    eax,eax
c00221c4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00221cc:	74 09                	je     c00221d7 <SoundDevice::getFreeChannelNum()+0x19>
c00221ce:	40                   	inc    eax
c00221cf:	83 f8 20             	cmp    eax,0x20
c00221d2:	75 f0                	jne    c00221c4 <SoundDevice::getFreeChannelNum()+0x6>
c00221d4:	83 c8 ff             	or     eax,0xffffffff
c00221d7:	c3                   	ret    

c00221d8 <SoundDevice::addChannel(SoundChannel*)>:
c00221d8:	56                   	push   esi
c00221d9:	53                   	push   ebx
c00221da:	51                   	push   ecx
c00221db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00221df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00221e3:	53                   	push   ebx
c00221e4:	e8 d5 ff ff ff       	call   c00221be <SoundDevice::getFreeChannelNum()>
c00221e9:	5a                   	pop    edx
c00221ea:	83 f8 ff             	cmp    eax,0xffffffff
c00221ed:	74 51                	je     c0022240 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00221ef:	85 f6                	test   esi,esi
c00221f1:	74 4d                	je     c0022240 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00221f3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00221fa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022201:	75 30                	jne    c0022233 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022203:	83 ec 0c             	sub    esp,0xc
c0022206:	56                   	push   esi
c0022207:	e8 52 fc ff ff       	call   c0021e5e <SoundChannel::getSampleRate()>
c002220c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022212:	89 34 24             	mov    DWORD PTR [esp],esi
c0022215:	e8 4c fc ff ff       	call   c0021e66 <SoundChannel::getBits()>
c002221a:	83 c4 0c             	add    esp,0xc
c002221d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022223:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022225:	50                   	push   eax
c0022226:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002222c:	53                   	push   ebx
c002222d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022230:	83 c4 10             	add    esp,0x10
c0022233:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022239:	b8 01 00 00 00       	mov    eax,0x1
c002223e:	eb 03                	jmp    c0022243 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022240:	83 c8 ff             	or     eax,0xffffffff
c0022243:	5a                   	pop    edx
c0022244:	5b                   	pop    ebx
c0022245:	5e                   	pop    esi
c0022246:	c3                   	ret    
c0022247:	90                   	nop

c0022248 <SoundDevice::removeChannel(int)>:
c0022248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022250:	83 fa 1f             	cmp    edx,0x1f
c0022253:	77 23                	ja     c0022278 <SoundDevice::removeChannel(int)+0x30>
c0022255:	8d 14 90             	lea    edx,[eax+edx*4]
c0022258:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002225f:	74 17                	je     c0022278 <SoundDevice::removeChannel(int)+0x30>
c0022261:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002226b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022271:	75 05                	jne    c0022278 <SoundDevice::removeChannel(int)+0x30>
c0022273:	8b 00                	mov    eax,DWORD PTR [eax]
c0022275:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022278:	c3                   	ret    
c0022279:	90                   	nop

c002227a <SoundDevice::floatTo16(float*, short*, int)>:
c002227a:	57                   	push   edi
c002227b:	56                   	push   esi
c002227c:	53                   	push   ebx
c002227d:	31 db                	xor    ebx,ebx
c002227f:	83 ec 10             	sub    esp,0x10
c0022282:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022286:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002228a:	0f 8d d0 00 00 00    	jge    c0022360 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022290:	83 ec 0c             	sub    esp,0xc
c0022293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022297:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002229a:	e8 a0 62 00 00       	call   c002853f <__extendsfdf2>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222aa:	68 00 00 f0 3f       	push   0x3ff00000
c00222af:	6a 00                	push   0x0
c00222b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b9:	e8 0d 52 00 00       	call   c00274cb <__adddf3>
c00222be:	83 c4 10             	add    esp,0x10
c00222c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222c9:	68 00 00 e0 3f       	push   0x3fe00000
c00222ce:	6a 00                	push   0x0
c00222d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222d8:	e8 6b 58 00 00       	call   c0027b48 <__muldf3>
c00222dd:	83 c4 10             	add    esp,0x10
c00222e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222e8:	68 c0 ff df 40       	push   0x40dfffc0
c00222ed:	6a 00                	push   0x0
c00222ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222f7:	e8 4c 58 00 00       	call   c0027b48 <__muldf3>
c00222fc:	59                   	pop    ecx
c00222fd:	5f                   	pop    edi
c00222fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002230a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002230e:	e8 08 61 00 00       	call   c002841b <__truncdfsf2>
c0022313:	5a                   	pop    edx
c0022314:	89 c7                	mov    edi,eax
c0022316:	59                   	pop    ecx
c0022317:	68 00 fe ff 46       	push   0x46fffe00
c002231c:	50                   	push   eax
c002231d:	e8 a3 51 00 00       	call   c00274c5 <__gesf2>
c0022322:	83 c4 10             	add    esp,0x10
c0022325:	85 c0                	test   eax,eax
c0022327:	78 08                	js     c0022331 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022329:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002232f:	eb 29                	jmp    c002235a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022331:	50                   	push   eax
c0022332:	50                   	push   eax
c0022333:	6a 00                	push   0x0
c0022335:	57                   	push   edi
c0022336:	e8 8e 51 00 00       	call   c00274c9 <__lesf2>
c002233b:	83 c4 10             	add    esp,0x10
c002233e:	85 c0                	test   eax,eax
c0022340:	7f 08                	jg     c002234a <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022342:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022348:	eb 10                	jmp    c002235a <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002234a:	83 ec 0c             	sub    esp,0xc
c002234d:	57                   	push   edi
c002234e:	e8 89 62 00 00       	call   c00285dc <lrintf>
c0022353:	83 c4 10             	add    esp,0x10
c0022356:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002235a:	43                   	inc    ebx
c002235b:	e9 26 ff ff ff       	jmp    c0022286 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022360:	83 c4 10             	add    esp,0x10
c0022363:	5b                   	pop    ebx
c0022364:	5e                   	pop    esi
c0022365:	5f                   	pop    edi
c0022366:	c3                   	ret    
c0022367:	90                   	nop

c0022368 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022368:	57                   	push   edi
c0022369:	56                   	push   esi
c002236a:	53                   	push   ebx
c002236b:	31 db                	xor    ebx,ebx
c002236d:	83 ec 10             	sub    esp,0x10
c0022370:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022374:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022378:	0f 8d cb 00 00 00    	jge    c0022449 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002237e:	83 ec 0c             	sub    esp,0xc
c0022381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022385:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022388:	e8 b2 61 00 00       	call   c002853f <__extendsfdf2>
c002238d:	83 c4 10             	add    esp,0x10
c0022390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022398:	68 00 00 f0 3f       	push   0x3ff00000
c002239d:	6a 00                	push   0x0
c002239f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223a7:	e8 1f 51 00 00       	call   c00274cb <__adddf3>
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00223b7:	68 00 00 e0 3f       	push   0x3fe00000
c00223bc:	6a 00                	push   0x0
c00223be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223c6:	e8 7d 57 00 00       	call   c0027b48 <__muldf3>
c00223cb:	83 c4 10             	add    esp,0x10
c00223ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00223d6:	68 00 00 60 40       	push   0x40600000
c00223db:	6a 00                	push   0x0
c00223dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223e5:	e8 5e 57 00 00       	call   c0027b48 <__muldf3>
c00223ea:	59                   	pop    ecx
c00223eb:	5f                   	pop    edi
c00223ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00223f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00223f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223fc:	e8 1a 60 00 00       	call   c002841b <__truncdfsf2>
c0022401:	5a                   	pop    edx
c0022402:	89 c7                	mov    edi,eax
c0022404:	59                   	pop    ecx
c0022405:	68 00 00 fe 42       	push   0x42fe0000
c002240a:	50                   	push   eax
c002240b:	e8 b5 50 00 00       	call   c00274c5 <__gesf2>
c0022410:	83 c4 10             	add    esp,0x10
c0022413:	85 c0                	test   eax,eax
c0022415:	78 06                	js     c002241d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022417:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002241b:	eb 26                	jmp    c0022443 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002241d:	50                   	push   eax
c002241e:	50                   	push   eax
c002241f:	6a 00                	push   0x0
c0022421:	57                   	push   edi
c0022422:	e8 a2 50 00 00       	call   c00274c9 <__lesf2>
c0022427:	83 c4 10             	add    esp,0x10
c002242a:	85 c0                	test   eax,eax
c002242c:	7f 06                	jg     c0022434 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002242e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022432:	eb 0f                	jmp    c0022443 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022434:	83 ec 0c             	sub    esp,0xc
c0022437:	57                   	push   edi
c0022438:	e8 9f 61 00 00       	call   c00285dc <lrintf>
c002243d:	83 c4 10             	add    esp,0x10
c0022440:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022443:	43                   	inc    ebx
c0022444:	e9 2b ff ff ff       	jmp    c0022374 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	5b                   	pop    ebx
c002244d:	5e                   	pop    esi
c002244e:	5f                   	pop    edi
c002244f:	c3                   	ret    

c0022450 <SoundDevice::getAudio(int, float*, float*)>:
c0022450:	55                   	push   ebp
c0022451:	31 ed                	xor    ebp,ebp
c0022453:	57                   	push   edi
c0022454:	56                   	push   esi
c0022455:	31 f6                	xor    esi,esi
c0022457:	53                   	push   ebx
c0022458:	83 ec 20             	sub    esp,0x20
c002245b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002245f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022463:	c1 e0 02             	shl    eax,0x2
c0022466:	50                   	push   eax
c0022467:	6a 00                	push   0x0
c0022469:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002246d:	e8 de e2 fd ff       	call   c0000750 <memset>
c0022472:	83 c4 10             	add    esp,0x10
c0022475:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002247d:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022484:	85 c9                	test   ecx,ecx
c0022486:	74 52                	je     c00224da <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022488:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002248c:	99                   	cdq    
c002248d:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022493:	50                   	push   eax
c0022494:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002249a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002249e:	51                   	push   ecx
c002249f:	e8 da f9 ff ff       	call   c0021e7e <SoundChannel::unbuffer(float*, int, int)>
c00224a4:	31 d2                	xor    edx,edx
c00224a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224aa:	83 c4 10             	add    esp,0x10
c00224ad:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00224b1:	7d 1e                	jge    c00224d1 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00224b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00224b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00224bb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00224be:	89 cf                	mov    edi,ecx
c00224c0:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00224c6:	0f af ca             	imul   ecx,edx
c00224c9:	42                   	inc    edx
c00224ca:	01 e9                	add    ecx,ebp
c00224cc:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00224cf:	eb dc                	jmp    c00224ad <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00224d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00224d5:	45                   	inc    ebp
c00224d6:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00224da:	46                   	inc    esi
c00224db:	83 fe 20             	cmp    esi,0x20
c00224de:	75 9d                	jne    c002247d <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00224e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224e4:	83 c4 1c             	add    esp,0x1c
c00224e7:	5b                   	pop    ebx
c00224e8:	5e                   	pop    esi
c00224e9:	5f                   	pop    edi
c00224ea:	5d                   	pop    ebp
c00224eb:	c3                   	ret    

c00224ec <PCI::open(int, int, void*)>:
c00224ec:	83 ec 18             	sub    esp,0x18
c00224ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00224f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00224f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00224ff:	50                   	push   eax
c0022500:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022503:	31 c0                	xor    eax,eax
c0022505:	83 c4 1c             	add    esp,0x1c
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <PCI::close(int, int, void*)>:
c002250a:	31 c0                	xor    eax,eax
c002250c:	c3                   	ret    
c002250d:	90                   	nop

c002250e <PCI::PCI()>:
c002250e:	83 ec 0c             	sub    esp,0xc
c0022511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022515:	83 ec 08             	sub    esp,0x8
c0022518:	68 54 c3 02 c0       	push   0xc002c354
c002251d:	50                   	push   eax
c002251e:	e8 b7 0f ff ff       	call   c00134da <Bus::Bus(char const*)>
c0022523:	83 c4 10             	add    esp,0x10
c0022526:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c002252b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252f:	89 10                	mov    DWORD PTR [eax],edx
c0022531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022535:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002253f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022543:	a3 a4 20 03 c0       	mov    ds:0xc00320a4,eax
c0022548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022552:	0f b6 d0             	movzx  edx,al
c0022555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022559:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022564:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002256a:	0f b6 d0             	movzx  edx,al
c002256d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022571:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002257a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022580:	8d 50 01             	lea    edx,[eax+0x1]
c0022583:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022587:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002258d:	0f b6 d0             	movzx  edx,al
c0022590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022594:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022598:	83 c9 c0             	or     ecx,0xffffffc0
c002259b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002259f:	90                   	nop
c00225a0:	83 c4 0c             	add    esp,0xc
c00225a3:	c3                   	ret    

c00225a4 <PCI::readBAR8(unsigned int, int)>:
c00225a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225ac:	f6 c2 01             	test   dl,0x1
c00225af:	74 07                	je     c00225b8 <PCI::readBAR8(unsigned int, int)+0x14>
c00225b1:	83 e2 fc             	and    edx,0xfffffffc
c00225b4:	01 c2                	add    edx,eax
c00225b6:	ec                   	in     al,dx
c00225b7:	c3                   	ret    
c00225b8:	83 e2 f0             	and    edx,0xfffffff0
c00225bb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00225be:	c3                   	ret    
c00225bf:	90                   	nop

c00225c0 <PCI::readBAR16(unsigned int, int)>:
c00225c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225c8:	f6 c2 01             	test   dl,0x1
c00225cb:	74 08                	je     c00225d5 <PCI::readBAR16(unsigned int, int)+0x15>
c00225cd:	83 e2 fc             	and    edx,0xfffffffc
c00225d0:	01 c2                	add    edx,eax
c00225d2:	66 ed                	in     ax,dx
c00225d4:	c3                   	ret    
c00225d5:	83 e2 f0             	and    edx,0xfffffff0
c00225d8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00225dc:	c3                   	ret    
c00225dd:	90                   	nop

c00225de <PCI::readBAR32(unsigned int, int)>:
c00225de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225e6:	f6 c2 01             	test   dl,0x1
c00225e9:	74 07                	je     c00225f2 <PCI::readBAR32(unsigned int, int)+0x14>
c00225eb:	83 e2 fc             	and    edx,0xfffffffc
c00225ee:	01 c2                	add    edx,eax
c00225f0:	ed                   	in     eax,dx
c00225f1:	c3                   	ret    
c00225f2:	83 e2 f0             	and    edx,0xfffffff0
c00225f5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00225f8:	c3                   	ret    
c00225f9:	90                   	nop

c00225fa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00225fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00225fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022606:	f6 c2 01             	test   dl,0x1
c0022609:	74 07                	je     c0022612 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002260b:	83 e2 fc             	and    edx,0xfffffffc
c002260e:	01 ca                	add    edx,ecx
c0022610:	ee                   	out    dx,al
c0022611:	c3                   	ret    
c0022612:	83 e2 f0             	and    edx,0xfffffff0
c0022615:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022618:	c3                   	ret    
c0022619:	90                   	nop

c002261a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002261a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002261e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022622:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022626:	f6 c2 01             	test   dl,0x1
c0022629:	74 08                	je     c0022633 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002262b:	83 e2 fc             	and    edx,0xfffffffc
c002262e:	01 ca                	add    edx,ecx
c0022630:	66 ef                	out    dx,ax
c0022632:	c3                   	ret    
c0022633:	83 e2 f0             	and    edx,0xfffffff0
c0022636:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002263a:	c3                   	ret    
c002263b:	90                   	nop

c002263c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002263c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022644:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022648:	f6 c2 01             	test   dl,0x1
c002264b:	74 07                	je     c0022654 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002264d:	83 e2 fc             	and    edx,0xfffffffc
c0022650:	01 ca                	add    edx,ecx
c0022652:	ef                   	out    dx,eax
c0022653:	c3                   	ret    
c0022654:	83 e2 f0             	and    edx,0xfffffff0
c0022657:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002265a:	c3                   	ret    
c002265b:	90                   	nop

c002265c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002265c:	55                   	push   ebp
c002265d:	57                   	push   edi
c002265e:	56                   	push   esi
c002265f:	53                   	push   ebx
c0022660:	83 ec 0c             	sub    esp,0xc
c0022663:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022667:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002266b:	89 f0                	mov    eax,esi
c002266d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022671:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022675:	3c 07                	cmp    al,0x7
c0022677:	76 10                	jbe    c0022689 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022679:	83 ec 0c             	sub    esp,0xc
c002267c:	68 5c c3 02 c0       	push   0xc002c35c
c0022681:	e8 5d 79 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0022686:	83 c4 10             	add    esp,0x10
c0022689:	80 fb 0f             	cmp    bl,0xf
c002268c:	76 10                	jbe    c002269e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	68 8c c3 02 c0       	push   0xc002c38c
c0022696:	e8 48 79 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c002269b:	83 c4 10             	add    esp,0x10
c002269e:	8d 04 36             	lea    eax,[esi+esi*1]
c00226a1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226a6:	83 c8 f0             	or     eax,0xfffffff0
c00226a9:	ee                   	out    dx,al
c00226aa:	ba fa 0c 00 00       	mov    edx,0xcfa
c00226af:	89 e8                	mov    eax,ebp
c00226b1:	ee                   	out    dx,al
c00226b2:	83 c4 0c             	add    esp,0xc
c00226b5:	89 d8                	mov    eax,ebx
c00226b7:	66 81 e7 fc 00       	and    di,0xfc
c00226bc:	5b                   	pop    ebx
c00226bd:	c1 e0 08             	shl    eax,0x8
c00226c0:	5e                   	pop    esi
c00226c1:	09 f8                	or     eax,edi
c00226c3:	5f                   	pop    edi
c00226c4:	66 0d 00 c0          	or     ax,0xc000
c00226c8:	5d                   	pop    ebp
c00226c9:	c3                   	ret    

c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226ca:	57                   	push   edi
c00226cb:	56                   	push   esi
c00226cc:	53                   	push   ebx
c00226cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00226d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226d5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00226db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00226df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00226e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00226e7:	83 ff 01             	cmp    edi,0x1
c00226ea:	75 3e                	jne    c002272a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00226ec:	89 de                	mov    esi,ebx
c00226ee:	0f b6 c0             	movzx  eax,al
c00226f1:	81 e6 fc 00 00 00    	and    esi,0xfc
c00226f7:	c1 e0 10             	shl    eax,0x10
c00226fa:	0f b6 c9             	movzx  ecx,cl
c00226fd:	09 f0                	or     eax,esi
c00226ff:	c1 e1 08             	shl    ecx,0x8
c0022702:	0f b6 d2             	movzx  edx,dl
c0022705:	09 c8                	or     eax,ecx
c0022707:	c1 e2 0b             	shl    edx,0xb
c002270a:	09 d0                	or     eax,edx
c002270c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022711:	0d 00 00 00 80       	or     eax,0x80000000
c0022716:	ef                   	out    dx,eax
c0022717:	ba fc 0c 00 00       	mov    edx,0xcfc
c002271c:	ed                   	in     eax,dx
c002271d:	83 e3 02             	and    ebx,0x2
c0022720:	0f b6 cb             	movzx  ecx,bl
c0022723:	c1 e1 03             	shl    ecx,0x3
c0022726:	d3 e8                	shr    eax,cl
c0022728:	eb 43                	jmp    c002276d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002272a:	83 ff 02             	cmp    edi,0x2
c002272d:	75 2c                	jne    c002275b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002272f:	83 ec 0c             	sub    esp,0xc
c0022732:	0f b6 c9             	movzx  ecx,cl
c0022735:	0f b6 d2             	movzx  edx,dl
c0022738:	0f b6 fb             	movzx  edi,bl
c002273b:	0f b6 c0             	movzx  eax,al
c002273e:	57                   	push   edi
c002273f:	51                   	push   ecx
c0022740:	52                   	push   edx
c0022741:	50                   	push   eax
c0022742:	56                   	push   esi
c0022743:	e8 14 ff ff ff       	call   c002265c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022748:	89 c2                	mov    edx,eax
c002274a:	ed                   	in     eax,dx
c002274b:	83 e3 02             	and    ebx,0x2
c002274e:	83 c4 20             	add    esp,0x20
c0022751:	0f b6 cb             	movzx  ecx,bl
c0022754:	c1 e1 03             	shl    ecx,0x3
c0022757:	d3 e8                	shr    eax,cl
c0022759:	eb 12                	jmp    c002276d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002275b:	83 ec 0c             	sub    esp,0xc
c002275e:	68 bc c3 02 c0       	push   0xc002c3bc
c0022763:	e8 7b 78 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0022768:	83 c4 10             	add    esp,0x10
c002276b:	31 c0                	xor    eax,eax
c002276d:	5b                   	pop    ebx
c002276e:	5e                   	pop    esi
c002276f:	5f                   	pop    edi
c0022770:	c3                   	ret    
c0022771:	90                   	nop

c0022772 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022772:	83 ec 18             	sub    esp,0x18
c0022775:	6a 00                	push   0x0
c0022777:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002277c:	50                   	push   eax
c002277d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022782:	50                   	push   eax
c0022783:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022788:	50                   	push   eax
c0022789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002278d:	e8 38 ff ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022792:	83 c4 2c             	add    esp,0x2c
c0022795:	c3                   	ret    

c0022796 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022796:	83 ec 18             	sub    esp,0x18
c0022799:	6a 0e                	push   0xe
c002279b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227a0:	50                   	push   eax
c00227a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227a6:	50                   	push   eax
c00227a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227ac:	50                   	push   eax
c00227ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227b1:	e8 14 ff ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227b6:	83 c4 2c             	add    esp,0x2c
c00227b9:	0f b6 c0             	movzx  eax,al
c00227bc:	c3                   	ret    
c00227bd:	90                   	nop

c00227be <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00227be:	55                   	push   ebp
c00227bf:	57                   	push   edi
c00227c0:	56                   	push   esi
c00227c1:	53                   	push   ebx
c00227c2:	83 ec 18             	sub    esp,0x18
c00227c5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00227ca:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00227cf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00227d4:	6a 0a                	push   0xa
c00227d6:	56                   	push   esi
c00227d7:	55                   	push   ebp
c00227d8:	57                   	push   edi
c00227d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00227dd:	e8 e8 fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227e2:	83 c4 14             	add    esp,0x14
c00227e5:	89 c3                	mov    ebx,eax
c00227e7:	6a 0a                	push   0xa
c00227e9:	0f b6 db             	movzx  ebx,bl
c00227ec:	56                   	push   esi
c00227ed:	55                   	push   ebp
c00227ee:	57                   	push   edi
c00227ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00227f3:	e8 d2 fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227f8:	83 c4 2c             	add    esp,0x2c
c00227fb:	25 00 ff 00 00       	and    eax,0xff00
c0022800:	09 d8                	or     eax,ebx
c0022802:	5b                   	pop    ebx
c0022803:	5e                   	pop    esi
c0022804:	5f                   	pop    edi
c0022805:	5d                   	pop    ebp
c0022806:	c3                   	ret    
c0022807:	90                   	nop

c0022808 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022808:	83 ec 18             	sub    esp,0x18
c002280b:	6a 08                	push   0x8
c002280d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022812:	50                   	push   eax
c0022813:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022818:	50                   	push   eax
c0022819:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002281e:	50                   	push   eax
c002281f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022823:	e8 a2 fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022828:	83 c4 2c             	add    esp,0x2c
c002282b:	0f b6 c4             	movzx  eax,ah
c002282e:	c3                   	ret    
c002282f:	90                   	nop

c0022830 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022830:	83 ec 18             	sub    esp,0x18
c0022833:	6a 08                	push   0x8
c0022835:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002283a:	50                   	push   eax
c002283b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022840:	50                   	push   eax
c0022841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022846:	50                   	push   eax
c0022847:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002284b:	e8 7a fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022850:	83 c4 2c             	add    esp,0x2c
c0022853:	c3                   	ret    

c0022854 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022854:	83 ec 18             	sub    esp,0x18
c0022857:	6a 3c                	push   0x3c
c0022859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002285e:	50                   	push   eax
c002285f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022864:	50                   	push   eax
c0022865:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002286a:	50                   	push   eax
c002286b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002286f:	e8 56 fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022874:	83 c4 2c             	add    esp,0x2c
c0022877:	c3                   	ret    

c0022878 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022878:	83 ec 18             	sub    esp,0x18
c002287b:	6a 18                	push   0x18
c002287d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022882:	50                   	push   eax
c0022883:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022888:	50                   	push   eax
c0022889:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002288e:	50                   	push   eax
c002288f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022893:	e8 32 fe ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022898:	83 c4 2c             	add    esp,0x2c
c002289b:	0f b6 c4             	movzx  eax,ah
c002289e:	c3                   	ret    
c002289f:	90                   	nop

c00228a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00228a0:	55                   	push   ebp
c00228a1:	57                   	push   edi
c00228a2:	56                   	push   esi
c00228a3:	53                   	push   ebx
c00228a4:	83 ec 28             	sub    esp,0x28
c00228a7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00228ab:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00228b0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00228b5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00228ba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00228c1:	8d 43 12             	lea    eax,[ebx+0x12]
c00228c4:	83 c3 10             	add    ebx,0x10
c00228c7:	0f b6 c0             	movzx  eax,al
c00228ca:	0f b6 db             	movzx  ebx,bl
c00228cd:	50                   	push   eax
c00228ce:	51                   	push   ecx
c00228cf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00228d3:	57                   	push   edi
c00228d4:	55                   	push   ebp
c00228d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228d9:	e8 ec fd ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228de:	83 c4 14             	add    esp,0x14
c00228e1:	89 c6                	mov    esi,eax
c00228e3:	53                   	push   ebx
c00228e4:	c1 e6 10             	shl    esi,0x10
c00228e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00228eb:	51                   	push   ecx
c00228ec:	57                   	push   edi
c00228ed:	55                   	push   ebp
c00228ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228f2:	e8 d3 fd ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228f7:	83 c4 3c             	add    esp,0x3c
c00228fa:	0f b7 c0             	movzx  eax,ax
c00228fd:	5b                   	pop    ebx
c00228fe:	09 f0                	or     eax,esi
c0022900:	5e                   	pop    esi
c0022901:	5f                   	pop    edi
c0022902:	5d                   	pop    ebp
c0022903:	c3                   	ret    

c0022904 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022904:	55                   	push   ebp
c0022905:	57                   	push   edi
c0022906:	56                   	push   esi
c0022907:	53                   	push   ebx
c0022908:	83 ec 0c             	sub    esp,0xc
c002290b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002290f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022913:	89 f5                	mov    ebp,esi
c0022915:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002291b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002291f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022923:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022927:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002292b:	83 f9 01             	cmp    ecx,0x1
c002292e:	75 5d                	jne    c002298d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022930:	0f b6 c8             	movzx  ecx,al
c0022933:	0f b6 d2             	movzx  edx,dl
c0022936:	c1 e1 10             	shl    ecx,0x10
c0022939:	c1 e2 0b             	shl    edx,0xb
c002293c:	89 f0                	mov    eax,esi
c002293e:	25 fc 00 00 00       	and    eax,0xfc
c0022943:	09 c1                	or     ecx,eax
c0022945:	89 e8                	mov    eax,ebp
c0022947:	0f b6 c0             	movzx  eax,al
c002294a:	c1 e0 08             	shl    eax,0x8
c002294d:	09 c1                	or     ecx,eax
c002294f:	09 d1                	or     ecx,edx
c0022951:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022956:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002295c:	89 c8                	mov    eax,ecx
c002295e:	ef                   	out    dx,eax
c002295f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022964:	ed                   	in     eax,dx
c0022965:	0f b7 db             	movzx  ebx,bx
c0022968:	83 e6 02             	and    esi,0x2
c002296b:	74 0a                	je     c0022977 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002296d:	0f b7 d0             	movzx  edx,ax
c0022970:	c1 e3 10             	shl    ebx,0x10
c0022973:	09 d3                	or     ebx,edx
c0022975:	eb 05                	jmp    c002297c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022977:	66 31 c0             	xor    ax,ax
c002297a:	09 c3                	or     ebx,eax
c002297c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022981:	89 c8                	mov    eax,ecx
c0022983:	ef                   	out    dx,eax
c0022984:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022989:	89 d8                	mov    eax,ebx
c002298b:	eb 41                	jmp    c00229ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002298d:	83 f9 02             	cmp    ecx,0x2
c0022990:	75 45                	jne    c00229d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022992:	83 ec 0c             	sub    esp,0xc
c0022995:	0f b6 d2             	movzx  edx,dl
c0022998:	89 f1                	mov    ecx,esi
c002299a:	0f b6 c0             	movzx  eax,al
c002299d:	0f b6 f1             	movzx  esi,cl
c00229a0:	89 e9                	mov    ecx,ebp
c00229a2:	56                   	push   esi
c00229a3:	0f b6 c9             	movzx  ecx,cl
c00229a6:	51                   	push   ecx
c00229a7:	52                   	push   edx
c00229a8:	50                   	push   eax
c00229a9:	57                   	push   edi
c00229aa:	e8 ad fc ff ff       	call   c002265c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229af:	89 c2                	mov    edx,eax
c00229b1:	ed                   	in     eax,dx
c00229b2:	83 c4 20             	add    esp,0x20
c00229b5:	0f b7 db             	movzx  ebx,bx
c00229b8:	f6 c2 02             	test   dl,0x2
c00229bb:	74 0c                	je     c00229c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00229bd:	0f b7 c8             	movzx  ecx,ax
c00229c0:	89 d8                	mov    eax,ebx
c00229c2:	c1 e0 10             	shl    eax,0x10
c00229c5:	09 c8                	or     eax,ecx
c00229c7:	eb 05                	jmp    c00229ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00229c9:	66 31 c0             	xor    ax,ax
c00229cc:	09 d8                	or     eax,ebx
c00229ce:	ef                   	out    dx,eax
c00229cf:	83 c4 0c             	add    esp,0xc
c00229d2:	5b                   	pop    ebx
c00229d3:	5e                   	pop    esi
c00229d4:	5f                   	pop    edi
c00229d5:	5d                   	pop    ebp
c00229d6:	c3                   	ret    
c00229d7:	c7 44 24 20 bc c3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c3bc
c00229df:	83 c4 0c             	add    esp,0xc
c00229e2:	5b                   	pop    ebx
c00229e3:	5e                   	pop    esi
c00229e4:	5f                   	pop    edi
c00229e5:	5d                   	pop    ebp
c00229e6:	e9 f8 75 ff ff       	jmp    c0019fe3 <Krnl::panic(char const*)>
c00229eb:	90                   	nop

c00229ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00229ec:	55                   	push   ebp
c00229ed:	57                   	push   edi
c00229ee:	56                   	push   esi
c00229ef:	53                   	push   ebx
c00229f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00229f6:	80 3d b0 20 03 c0 00 	cmp    BYTE PTR ds:0xc00320b0,0x0
c00229fd:	0f 85 84 00 00 00    	jne    c0022a87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022a03:	83 ec 0c             	sub    esp,0xc
c0022a06:	68 14 01 00 00       	push   0x114
c0022a0b:	e8 89 cb fe ff       	call   c000f599 <malloc>
c0022a10:	83 c4 0c             	add    esp,0xc
c0022a13:	89 c3                	mov    ebx,eax
c0022a15:	ff 35 b0 12 03 c0    	push   DWORD PTR ds:0xc00312b0
c0022a1b:	68 c2 c3 02 c0       	push   0xc002c3c2
c0022a20:	50                   	push   eax
c0022a21:	e8 72 03 ff ff       	call   c0012d98 <File::File(char const*, Process*)>
c0022a26:	5a                   	pop    edx
c0022a27:	59                   	pop    ecx
c0022a28:	6a 01                	push   0x1
c0022a2a:	53                   	push   ebx
c0022a2b:	e8 cc 03 ff ff       	call   c0012dfc <File::open(FileOpenMode)>
c0022a30:	83 c4 0c             	add    esp,0xc
c0022a33:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022a37:	50                   	push   eax
c0022a38:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a3c:	50                   	push   eax
c0022a3d:	53                   	push   ebx
c0022a3e:	e8 65 06 ff ff       	call   c00130a8 <File::stat(unsigned long long*, bool*)>
c0022a43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a47:	40                   	inc    eax
c0022a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a4b:	e8 49 cb fe ff       	call   c000f599 <malloc>
c0022a50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a54:	a3 ac 20 03 c0       	mov    ds:0xc00320ac,eax
c0022a59:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022a5d:	5e                   	pop    esi
c0022a5e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022a60:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022a64:	51                   	push   ecx
c0022a65:	50                   	push   eax
c0022a66:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a6a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a6e:	53                   	push   ebx
c0022a6f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022a72:	83 c4 14             	add    esp,0x14
c0022a75:	53                   	push   ebx
c0022a76:	e8 df 03 ff ff       	call   c0012e5a <File::close()>
c0022a7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a7f:	83 c4 10             	add    esp,0x10
c0022a82:	a3 a8 20 03 c0       	mov    ds:0xc00320a8,eax
c0022a87:	a1 a8 20 03 c0       	mov    eax,ds:0xc00320a8
c0022a8c:	8b 15 ac 20 03 c0    	mov    edx,DWORD PTR ds:0xc00320ac
c0022a92:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a95:	31 ff                	xor    edi,edi
c0022a97:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022a9f:	31 f6                	xor    esi,esi
c0022aa1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022aa6:	31 db                	xor    ebx,ebx
c0022aa8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022ab0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022ab5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022abc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022ac0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022ac7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022acb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022ace:	0f 8e 6b 01 00 00    	jle    c0022c3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022ad4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022ad7:	d4 40                	aam    0x40
c0022ad9:	d5 39                	aad    0x39
c0022adb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022adf:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022ae3:	d4 40                	aam    0x40
c0022ae5:	d5 39                	aad    0x39
c0022ae7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022aeb:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022aef:	d4 40                	aam    0x40
c0022af1:	d5 39                	aad    0x39
c0022af3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022af7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022afb:	d4 40                	aam    0x40
c0022afd:	d5 39                	aad    0x39
c0022aff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022b03:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022b07:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022b0b:	3c 56                	cmp    al,0x56
c0022b0d:	74 45                	je     c0022b54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022b0f:	d4 40                	aam    0x40
c0022b11:	d5 39                	aad    0x39
c0022b13:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022b16:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022b1a:	0f b6 c9             	movzx  ecx,cl
c0022b1d:	c1 e1 04             	shl    ecx,0x4
c0022b20:	d4 40                	aam    0x40
c0022b22:	d5 39                	aad    0x39
c0022b24:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022b27:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022b2b:	0f b6 db             	movzx  ebx,bl
c0022b2e:	09 cb                	or     ebx,ecx
c0022b30:	c1 e3 04             	shl    ebx,0x4
c0022b33:	d4 40                	aam    0x40
c0022b35:	d5 39                	aad    0x39
c0022b37:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022b3a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022b3e:	0f b6 c9             	movzx  ecx,cl
c0022b41:	09 cb                	or     ebx,ecx
c0022b43:	c1 e3 04             	shl    ebx,0x4
c0022b46:	89 d9                	mov    ecx,ebx
c0022b48:	d4 40                	aam    0x40
c0022b4a:	d5 39                	aad    0x39
c0022b4c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022b4f:	0f b6 db             	movzx  ebx,bl
c0022b52:	09 cb                	or     ebx,ecx
c0022b54:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022b58:	80 f9 44             	cmp    cl,0x44
c0022b5b:	74 47                	je     c0022ba4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022b5d:	88 c8                	mov    al,cl
c0022b5f:	d4 40                	aam    0x40
c0022b61:	d5 39                	aad    0x39
c0022b63:	83 e8 30             	sub    eax,0x30
c0022b66:	0f b6 e8             	movzx  ebp,al
c0022b69:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022b6d:	c1 e5 04             	shl    ebp,0x4
c0022b70:	d4 40                	aam    0x40
c0022b72:	d5 39                	aad    0x39
c0022b74:	83 e8 30             	sub    eax,0x30
c0022b77:	0f b6 f0             	movzx  esi,al
c0022b7a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022b7e:	09 ee                	or     esi,ebp
c0022b80:	c1 e6 04             	shl    esi,0x4
c0022b83:	d4 40                	aam    0x40
c0022b85:	d5 39                	aad    0x39
c0022b87:	83 e8 30             	sub    eax,0x30
c0022b8a:	0f b6 e8             	movzx  ebp,al
c0022b8d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022b91:	09 ee                	or     esi,ebp
c0022b93:	c1 e6 04             	shl    esi,0x4
c0022b96:	89 f5                	mov    ebp,esi
c0022b98:	d4 40                	aam    0x40
c0022b9a:	d5 39                	aad    0x39
c0022b9c:	83 e8 30             	sub    eax,0x30
c0022b9f:	0f b6 f0             	movzx  esi,al
c0022ba2:	09 ee                	or     esi,ebp
c0022ba4:	83 c7 10             	add    edi,0x10
c0022ba7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022bab:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022bae:	3c 0a                	cmp    al,0xa
c0022bb0:	74 09                	je     c0022bbb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022bb2:	45                   	inc    ebp
c0022bb3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022bb6:	75 16                	jne    c0022bce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022bb8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022bbb:	3c 0a                	cmp    al,0xa
c0022bbd:	0f 94 c0             	sete   al
c0022bc0:	0f b6 c0             	movzx  eax,al
c0022bc3:	01 c7                	add    edi,eax
c0022bc5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022bca:	75 0c                	jne    c0022bd8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022bcc:	eb 15                	jmp    c0022be3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022bce:	47                   	inc    edi
c0022bcf:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022bd2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022bd6:	eb d3                	jmp    c0022bab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022bd8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022bdd:	0f 85 e8 fe ff ff    	jne    c0022acb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022be3:	80 f9 44             	cmp    cl,0x44
c0022be6:	74 0b                	je     c0022bf3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022be8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022bed:	0f 85 d8 fe ff ff    	jne    c0022acb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022bf3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022bf7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022bfb:	c1 e1 04             	shl    ecx,0x4
c0022bfe:	83 e8 30             	sub    eax,0x30
c0022c01:	09 c8                	or     eax,ecx
c0022c03:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022c07:	0f 85 be fe ff ff    	jne    c0022acb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022c0d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022c11:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022c15:	c1 e1 04             	shl    ecx,0x4
c0022c18:	83 e8 30             	sub    eax,0x30
c0022c1b:	09 c8                	or     eax,ecx
c0022c1d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022c21:	0f 85 a4 fe ff ff    	jne    c0022acb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022c27:	50                   	push   eax
c0022c28:	50                   	push   eax
c0022c29:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022c2d:	50                   	push   eax
c0022c2e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022c35:	e8 d2 db fd ff       	call   c000080c <strcpy>
c0022c3a:	83 c4 10             	add    esp,0x10
c0022c3d:	eb 15                	jmp    c0022c54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022c3f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022c46:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022c51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022c54:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022c5b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c61:	5b                   	pop    ebx
c0022c62:	5e                   	pop    esi
c0022c63:	5f                   	pop    edi
c0022c64:	5d                   	pop    ebp
c0022c65:	c3                   	ret    

c0022c66 <PCI::checkBus(unsigned char)>:
c0022c66:	56                   	push   esi
c0022c67:	53                   	push   ebx
c0022c68:	31 db                	xor    ebx,ebx
c0022c6a:	51                   	push   ecx
c0022c6b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c70:	52                   	push   edx
c0022c71:	53                   	push   ebx
c0022c72:	43                   	inc    ebx
c0022c73:	56                   	push   esi
c0022c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c78:	e8 37 03 00 00       	call   c0022fb4 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c7d:	83 c4 10             	add    esp,0x10
c0022c80:	83 fb 20             	cmp    ebx,0x20
c0022c83:	75 eb                	jne    c0022c70 <PCI::checkBus(unsigned char)+0xa>
c0022c85:	58                   	pop    eax
c0022c86:	5b                   	pop    ebx
c0022c87:	5e                   	pop    esi
c0022c88:	c3                   	ret    
c0022c89:	90                   	nop

c0022c8a <PCI::foundDevice(PCIDeviceInfo)>:
c0022c8a:	55                   	push   ebp
c0022c8b:	57                   	push   edi
c0022c8c:	56                   	push   esi
c0022c8d:	53                   	push   ebx
c0022c8e:	83 ec 1c             	sub    esp,0x1c
c0022c91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c95:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c9b:	0f 84 52 01 00 00    	je     c0022df3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ca1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ca5:	66 81 f9 06 04       	cmp    cx,0x406
c0022caa:	75 2c                	jne    c0022cd8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cac:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cb1:	50                   	push   eax
c0022cb2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cb7:	50                   	push   eax
c0022cb8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022cbd:	50                   	push   eax
c0022cbe:	56                   	push   esi
c0022cbf:	e8 b4 fb ff ff       	call   c0022878 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022cc4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cc8:	0f b6 c0             	movzx  eax,al
c0022ccb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ccf:	83 c4 2c             	add    esp,0x2c
c0022cd2:	5b                   	pop    ebx
c0022cd3:	5e                   	pop    esi
c0022cd4:	5f                   	pop    edi
c0022cd5:	5d                   	pop    ebp
c0022cd6:	eb 8e                	jmp    c0022c66 <PCI::checkBus(unsigned char)>
c0022cd8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cdc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ce2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ce6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cea:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cee:	88 d3                	mov    bl,dl
c0022cf0:	85 c0                	test   eax,eax
c0022cf2:	74 33                	je     c0022d27 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cf7:	85 d2                	test   edx,edx
c0022cf9:	74 28                	je     c0022d23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cfb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d01:	31 ef                	xor    edi,ebp
c0022d03:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d09:	75 18                	jne    c0022d23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d0f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d15:	75 0c                	jne    c0022d23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d17:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d1d:	0f 84 d0 00 00 00    	je     c0022df3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d25:	eb c9                	jmp    c0022cf0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d27:	66 81 f9 01 06       	cmp    cx,0x601
c0022d2c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d30:	75 19                	jne    c0022d4b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d32:	83 ec 0c             	sub    esp,0xc
c0022d35:	68 64 01 00 00       	push   0x164
c0022d3a:	e8 5a c8 fe ff       	call   c000f599 <malloc>
c0022d3f:	89 c5                	mov    ebp,eax
c0022d41:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d44:	e8 85 0e 00 00       	call   c0023bce <SATABus::SATABus()>
c0022d49:	eb 1e                	jmp    c0022d69 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d4b:	66 81 f9 01 01       	cmp    cx,0x101
c0022d50:	75 60                	jne    c0022db2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d52:	83 ec 0c             	sub    esp,0xc
c0022d55:	68 70 02 00 00       	push   0x270
c0022d5a:	e8 3a c8 fe ff       	call   c000f599 <malloc>
c0022d5f:	89 c5                	mov    ebp,eax
c0022d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d64:	e8 0f 03 00 00       	call   c0023078 <IDE::IDE()>
c0022d69:	58                   	pop    eax
c0022d6a:	5a                   	pop    edx
c0022d6b:	55                   	push   ebp
c0022d6c:	56                   	push   esi
c0022d6d:	e8 00 0f ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0022d72:	83 ec 1c             	sub    esp,0x1c
c0022d75:	b9 09 00 00 00       	mov    ecx,0x9
c0022d7a:	fc                   	cld    
c0022d7b:	89 e7                	mov    edi,esp
c0022d7d:	89 de                	mov    esi,ebx
c0022d7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d81:	55                   	push   ebp
c0022d82:	e8 fd 0d ff ff       	call   c0013b84 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d8a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d8e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d96:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d9e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022da6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022da9:	83 c4 4c             	add    esp,0x4c
c0022dac:	5b                   	pop    ebx
c0022dad:	5e                   	pop    esi
c0022dae:	5f                   	pop    edi
c0022daf:	5d                   	pop    ebp
c0022db0:	ff e0                	jmp    eax
c0022db2:	83 ec 0c             	sub    esp,0xc
c0022db5:	68 58 01 00 00       	push   0x158
c0022dba:	e8 da c7 fe ff       	call   c000f599 <malloc>
c0022dbf:	89 c5                	mov    ebp,eax
c0022dc1:	58                   	pop    eax
c0022dc2:	5a                   	pop    edx
c0022dc3:	68 db c3 02 c0       	push   0xc002c3db
c0022dc8:	55                   	push   ebp
c0022dc9:	e8 ae 11 ff ff       	call   c0013f7c <DriverlessDevice::DriverlessDevice(char const*)>
c0022dce:	59                   	pop    ecx
c0022dcf:	5f                   	pop    edi
c0022dd0:	55                   	push   ebp
c0022dd1:	56                   	push   esi
c0022dd2:	e8 9b 0e ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0022dd7:	b9 09 00 00 00       	mov    ecx,0x9
c0022ddc:	fc                   	cld    
c0022ddd:	89 df                	mov    edi,ebx
c0022ddf:	89 de                	mov    esi,ebx
c0022de1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022de3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022de7:	83 c4 2c             	add    esp,0x2c
c0022dea:	5b                   	pop    ebx
c0022deb:	5e                   	pop    esi
c0022dec:	5f                   	pop    edi
c0022ded:	5d                   	pop    ebp
c0022dee:	e9 91 0d ff ff       	jmp    c0013b84 <Device::preOpenPCI(PCIDeviceInfo)>
c0022df3:	83 c4 1c             	add    esp,0x1c
c0022df6:	5b                   	pop    ebx
c0022df7:	5e                   	pop    esi
c0022df8:	5f                   	pop    edi
c0022df9:	5d                   	pop    ebp
c0022dfa:	c3                   	ret    
c0022dfb:	90                   	nop

c0022dfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dfc:	55                   	push   ebp
c0022dfd:	57                   	push   edi
c0022dfe:	56                   	push   esi
c0022dff:	53                   	push   ebx
c0022e00:	83 ec 68             	sub    esp,0x68
c0022e03:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022e07:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022e0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022e19:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022e1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022e22:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022e29:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022e2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022e32:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022e37:	6a 0c                	push   0xc
c0022e39:	57                   	push   edi
c0022e3a:	53                   	push   ebx
c0022e3b:	56                   	push   esi
c0022e3c:	55                   	push   ebp
c0022e3d:	e8 88 f8 ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e42:	83 c4 20             	add    esp,0x20
c0022e45:	57                   	push   edi
c0022e46:	53                   	push   ebx
c0022e47:	56                   	push   esi
c0022e48:	55                   	push   ebp
c0022e49:	e8 70 f9 ff ff       	call   c00227be <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e4e:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022e53:	57                   	push   edi
c0022e54:	53                   	push   ebx
c0022e55:	56                   	push   esi
c0022e56:	55                   	push   ebp
c0022e57:	e8 f8 f9 ff ff       	call   c0022854 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e5c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022e60:	83 c4 14             	add    esp,0x14
c0022e63:	6a 3c                	push   0x3c
c0022e65:	57                   	push   edi
c0022e66:	53                   	push   ebx
c0022e67:	56                   	push   esi
c0022e68:	55                   	push   ebp
c0022e69:	e8 5c f8 ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e6e:	0f b6 c4             	movzx  eax,ah
c0022e71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022e75:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022e79:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022e7d:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0022e82:	83 c4 20             	add    esp,0x20
c0022e85:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e8b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e92:	74 7c                	je     c0022f10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022e94:	31 c0                	xor    eax,eax
c0022e96:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c0022e9c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ea2:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022ea8:	7e 66                	jle    c0022f10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022eaa:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022ead:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022eb4:	39 cb                	cmp    ebx,ecx
c0022eb6:	75 55                	jne    c0022f0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022eb8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ebf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022ec3:	75 48                	jne    c0022f0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022ec5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022ec9:	83 ec 0c             	sub    esp,0xc
c0022ecc:	68 f5 c3 02 c0       	push   0xc002c3f5
c0022ed1:	e8 63 f9 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0022ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022eda:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c0022ee0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022ee4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eea:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022ef2:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022ef6:	52                   	push   edx
c0022ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022efb:	53                   	push   ebx
c0022efc:	68 1a c4 02 c0       	push   0xc002c41a
c0022f01:	e8 33 f9 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0022f06:	83 c4 20             	add    esp,0x20
c0022f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f0d:	40                   	inc    eax
c0022f0e:	eb 86                	jmp    c0022e96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022f10:	31 d2                	xor    edx,edx
c0022f12:	83 ec 0c             	sub    esp,0xc
c0022f15:	57                   	push   edi
c0022f16:	53                   	push   ebx
c0022f17:	56                   	push   esi
c0022f18:	52                   	push   edx
c0022f19:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022f1d:	55                   	push   ebp
c0022f1e:	e8 7d f9 ff ff       	call   c00228a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022f27:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f2b:	42                   	inc    edx
c0022f2c:	83 c4 20             	add    esp,0x20
c0022f2f:	83 fa 06             	cmp    edx,0x6
c0022f32:	75 de                	jne    c0022f12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022f34:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022f39:	83 ec 0c             	sub    esp,0xc
c0022f3c:	86 e0                	xchg   al,ah
c0022f3e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022f43:	6a 02                	push   0x2
c0022f45:	57                   	push   edi
c0022f46:	53                   	push   ebx
c0022f47:	56                   	push   esi
c0022f48:	55                   	push   ebp
c0022f49:	e8 7c f7 ff ff       	call   c00226ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f4e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022f53:	83 c4 20             	add    esp,0x20
c0022f56:	57                   	push   edi
c0022f57:	53                   	push   ebx
c0022f58:	56                   	push   esi
c0022f59:	55                   	push   ebp
c0022f5a:	e8 a9 f8 ff ff       	call   c0022808 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f5f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f63:	57                   	push   edi
c0022f64:	53                   	push   ebx
c0022f65:	56                   	push   esi
c0022f66:	55                   	push   ebp
c0022f67:	e8 06 f8 ff ff       	call   c0022772 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f6c:	b9 09 00 00 00       	mov    ecx,0x9
c0022f71:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022f76:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022f7a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022f7e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022f82:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022f86:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022f8a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022f8e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022f92:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022f96:	83 ec 0c             	sub    esp,0xc
c0022f99:	fc                   	cld    
c0022f9a:	89 e7                	mov    edi,esp
c0022f9c:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022fa0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022fa2:	55                   	push   ebp
c0022fa3:	e8 e2 fc ff ff       	call   c0022c8a <PCI::foundDevice(PCIDeviceInfo)>
c0022fa8:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022fae:	5b                   	pop    ebx
c0022faf:	5e                   	pop    esi
c0022fb0:	5f                   	pop    edi
c0022fb1:	5d                   	pop    ebp
c0022fb2:	c3                   	ret    
c0022fb3:	90                   	nop

c0022fb4 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022fb4:	55                   	push   ebp
c0022fb5:	57                   	push   edi
c0022fb6:	56                   	push   esi
c0022fb7:	53                   	push   ebx
c0022fb8:	83 ec 0c             	sub    esp,0xc
c0022fbb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fbf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fc4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fc9:	6a 00                	push   0x0
c0022fcb:	56                   	push   esi
c0022fcc:	57                   	push   edi
c0022fcd:	55                   	push   ebp
c0022fce:	e8 9f f7 ff ff       	call   c0022772 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fd3:	6a 00                	push   0x0
c0022fd5:	56                   	push   esi
c0022fd6:	57                   	push   edi
c0022fd7:	55                   	push   ebp
c0022fd8:	e8 1f fe ff ff       	call   c0022dfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fdd:	83 c4 20             	add    esp,0x20
c0022fe0:	6a 00                	push   0x0
c0022fe2:	56                   	push   esi
c0022fe3:	57                   	push   edi
c0022fe4:	55                   	push   ebp
c0022fe5:	e8 ac f7 ff ff       	call   c0022796 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fea:	83 c4 10             	add    esp,0x10
c0022fed:	84 c0                	test   al,al
c0022fef:	79 27                	jns    c0023018 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ff1:	bb 01 00 00 00       	mov    ebx,0x1
c0022ff6:	53                   	push   ebx
c0022ff7:	56                   	push   esi
c0022ff8:	57                   	push   edi
c0022ff9:	55                   	push   ebp
c0022ffa:	e8 73 f7 ff ff       	call   c0022772 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fff:	83 c4 10             	add    esp,0x10
c0023002:	66 40                	inc    ax
c0023004:	74 0c                	je     c0023012 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023006:	53                   	push   ebx
c0023007:	56                   	push   esi
c0023008:	57                   	push   edi
c0023009:	55                   	push   ebp
c002300a:	e8 ed fd ff ff       	call   c0022dfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002300f:	83 c4 10             	add    esp,0x10
c0023012:	43                   	inc    ebx
c0023013:	83 fb 08             	cmp    ebx,0x8
c0023016:	75 de                	jne    c0022ff6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023018:	83 c4 0c             	add    esp,0xc
c002301b:	5b                   	pop    ebx
c002301c:	5e                   	pop    esi
c002301d:	5f                   	pop    edi
c002301e:	5d                   	pop    ebp
c002301f:	c3                   	ret    

c0023020 <PCI::detect()>:
c0023020:	56                   	push   esi
c0023021:	53                   	push   ebx
c0023022:	53                   	push   ebx
c0023023:	31 db                	xor    ebx,ebx
c0023025:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023029:	6a 00                	push   0x0
c002302b:	6a 00                	push   0x0
c002302d:	6a 00                	push   0x0
c002302f:	56                   	push   esi
c0023030:	e8 61 f7 ff ff       	call   c0022796 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023035:	83 c4 10             	add    esp,0x10
c0023038:	a8 80                	test   al,0x80
c002303a:	75 21                	jne    c002305d <PCI::detect()+0x3d>
c002303c:	51                   	push   ecx
c002303d:	51                   	push   ecx
c002303e:	6a 00                	push   0x0
c0023040:	56                   	push   esi
c0023041:	e8 20 fc ff ff       	call   c0022c66 <PCI::checkBus(unsigned char)>
c0023046:	83 c4 10             	add    esp,0x10
c0023049:	eb 24                	jmp    c002306f <PCI::detect()+0x4f>
c002304b:	52                   	push   edx
c002304c:	52                   	push   edx
c002304d:	53                   	push   ebx
c002304e:	43                   	inc    ebx
c002304f:	56                   	push   esi
c0023050:	e8 11 fc ff ff       	call   c0022c66 <PCI::checkBus(unsigned char)>
c0023055:	83 c4 10             	add    esp,0x10
c0023058:	83 fb 08             	cmp    ebx,0x8
c002305b:	74 12                	je     c002306f <PCI::detect()+0x4f>
c002305d:	53                   	push   ebx
c002305e:	6a 00                	push   0x0
c0023060:	6a 00                	push   0x0
c0023062:	56                   	push   esi
c0023063:	e8 0a f7 ff ff       	call   c0022772 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023068:	83 c4 10             	add    esp,0x10
c002306b:	66 40                	inc    ax
c002306d:	74 dc                	je     c002304b <PCI::detect()+0x2b>
c002306f:	58                   	pop    eax
c0023070:	5b                   	pop    ebx
c0023071:	5e                   	pop    esi
c0023072:	c3                   	ret    
c0023073:	90                   	nop

c0023074 <IDE::close(int, int, void*)>:
c0023074:	83 c8 ff             	or     eax,0xffffffff
c0023077:	c3                   	ret    

c0023078 <IDE::IDE()>:
c0023078:	83 ec 0c             	sub    esp,0xc
c002307b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307f:	83 ec 08             	sub    esp,0x8
c0023082:	68 64 c4 02 c0       	push   0xc002c464
c0023087:	50                   	push   eax
c0023088:	e8 93 0f ff ff       	call   c0014020 <HardDiskController::HardDiskController(char const*)>
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c0023095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023099:	89 10                	mov    DWORD PTR [eax],edx
c002309b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00230a6:	90                   	nop
c00230a7:	83 c4 0c             	add    esp,0xc
c00230aa:	c3                   	ret    
c00230ab:	90                   	nop

c00230ac <IDE::prepareInterrupt(unsigned char)>:
c00230ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230b5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230bd:	c3                   	ret    

c00230be <selectDrive(unsigned char, unsigned char)>:
c00230be:	c3                   	ret    
c00230bf:	90                   	nop

c00230c0 <IDE::getBase(unsigned char)>:
c00230c0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230d1:	c3                   	ret    

c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230d2:	55                   	push   ebp
c00230d3:	57                   	push   edi
c00230d4:	56                   	push   esi
c00230d5:	53                   	push   ebx
c00230d6:	83 ec 1c             	sub    esp,0x1c
c00230d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230e1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230ec:	80 f9 03             	cmp    cl,0x3
c00230ef:	77 51                	ja     c0023142 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230f5:	0f b6 f2             	movzx  esi,dl
c00230f8:	0f b6 db             	movzx  ebx,bl
c00230fb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230fe:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023102:	83 ca 80             	or     edx,0xffffff80
c0023105:	0f b6 d2             	movzx  edx,dl
c0023108:	52                   	push   edx
c0023109:	6a 0c                	push   0xc
c002310b:	56                   	push   esi
c002310c:	57                   	push   edi
c002310d:	e8 c0 ff ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023112:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023117:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002311b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002311f:	ee                   	out    dx,al
c0023120:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023125:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023129:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002312d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023131:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023139:	83 c4 2c             	add    esp,0x2c
c002313c:	5b                   	pop    ebx
c002313d:	5e                   	pop    esi
c002313e:	5f                   	pop    edi
c002313f:	5d                   	pop    ebp
c0023140:	eb 90                	jmp    c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023142:	80 fb 07             	cmp    bl,0x7
c0023145:	77 12                	ja     c0023159 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023147:	0f b6 d2             	movzx  edx,dl
c002314a:	0f b6 db             	movzx  ebx,bl
c002314d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023155:	89 da                	mov    edx,ebx
c0023157:	eb 2f                	jmp    c0023188 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023159:	80 fb 0d             	cmp    bl,0xd
c002315c:	77 13                	ja     c0023171 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002315e:	0f b6 d2             	movzx  edx,dl
c0023161:	0f b6 db             	movzx  ebx,bl
c0023164:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002316b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002316f:	eb 17                	jmp    c0023188 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023171:	80 fb 15             	cmp    bl,0x15
c0023174:	77 13                	ja     c0023189 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023176:	0f b6 d2             	movzx  edx,dl
c0023179:	0f b6 db             	movzx  ebx,bl
c002317c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023184:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023188:	ee                   	out    dx,al
c0023189:	83 c4 1c             	add    esp,0x1c
c002318c:	5b                   	pop    ebx
c002318d:	5e                   	pop    esi
c002318e:	5f                   	pop    edi
c002318f:	5d                   	pop    ebp
c0023190:	c3                   	ret    
c0023191:	90                   	nop

c0023192 <IDE::read(unsigned char, unsigned char)>:
c0023192:	55                   	push   ebp
c0023193:	57                   	push   edi
c0023194:	56                   	push   esi
c0023195:	53                   	push   ebx
c0023196:	83 ec 1c             	sub    esp,0x1c
c0023199:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002319d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00231a1:	8d 43 f8             	lea    eax,[ebx-0x8]
c00231a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231a8:	3c 03                	cmp    al,0x3
c00231aa:	77 43                	ja     c00231ef <IDE::read(unsigned char, unsigned char)+0x5d>
c00231ac:	0f b6 f2             	movzx  esi,dl
c00231af:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231b2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231b6:	83 c8 80             	or     eax,0xffffff80
c00231b9:	0f b6 c0             	movzx  eax,al
c00231bc:	50                   	push   eax
c00231bd:	6a 0c                	push   0xc
c00231bf:	56                   	push   esi
c00231c0:	57                   	push   edi
c00231c1:	e8 0c ff ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231cb:	0f b6 c3             	movzx  eax,bl
c00231ce:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231d2:	ec                   	in     al,dx
c00231d3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231d7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231dc:	52                   	push   edx
c00231dd:	6a 0c                	push   0xc
c00231df:	56                   	push   esi
c00231e0:	57                   	push   edi
c00231e1:	e8 ec fe ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231e6:	83 c4 20             	add    esp,0x20
c00231e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231ed:	eb 49                	jmp    c0023238 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231ef:	80 fb 07             	cmp    bl,0x7
c00231f2:	77 12                	ja     c0023206 <IDE::read(unsigned char, unsigned char)+0x74>
c00231f4:	0f b6 d2             	movzx  edx,dl
c00231f7:	0f b6 c3             	movzx  eax,bl
c00231fa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023202:	89 c2                	mov    edx,eax
c0023204:	eb 31                	jmp    c0023237 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023206:	80 fb 0d             	cmp    bl,0xd
c0023209:	77 13                	ja     c002321e <IDE::read(unsigned char, unsigned char)+0x8c>
c002320b:	0f b6 d2             	movzx  edx,dl
c002320e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023215:	0f b6 d3             	movzx  edx,bl
c0023218:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002321c:	eb 19                	jmp    c0023237 <IDE::read(unsigned char, unsigned char)+0xa5>
c002321e:	31 c0                	xor    eax,eax
c0023220:	80 fb 15             	cmp    bl,0x15
c0023223:	77 13                	ja     c0023238 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023225:	0f b6 d2             	movzx  edx,dl
c0023228:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023230:	0f b6 d3             	movzx  edx,bl
c0023233:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023237:	ec                   	in     al,dx
c0023238:	83 c4 1c             	add    esp,0x1c
c002323b:	5b                   	pop    ebx
c002323c:	5e                   	pop    esi
c002323d:	5f                   	pop    edi
c002323e:	5d                   	pop    ebp
c002323f:	c3                   	ret    

c0023240 <IDE::waitInterrupt(unsigned char)>:
c0023240:	55                   	push   ebp
c0023241:	57                   	push   edi
c0023242:	56                   	push   esi
c0023243:	53                   	push   ebx
c0023244:	31 db                	xor    ebx,ebx
c0023246:	83 ec 0c             	sub    esp,0xc
c0023249:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002324d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023252:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002325a:	89 e8                	mov    eax,ebp
c002325c:	84 c0                	test   al,al
c002325e:	75 34                	jne    c0023294 <IDE::waitInterrupt(unsigned char)+0x54>
c0023260:	52                   	push   edx
c0023261:	6a 0c                	push   0xc
c0023263:	56                   	push   esi
c0023264:	57                   	push   edi
c0023265:	e8 28 ff ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c002326a:	83 c4 10             	add    esp,0x10
c002326d:	a8 01                	test   al,0x1
c002326f:	75 2b                	jne    c002329c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023271:	f6 c3 04             	test   bl,0x4
c0023274:	75 16                	jne    c002328c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023276:	83 fb 32             	cmp    ebx,0x32
c0023279:	7e 11                	jle    c002328c <IDE::waitInterrupt(unsigned char)+0x4c>
c002327b:	50                   	push   eax
c002327c:	50                   	push   eax
c002327d:	6a 00                	push   0x0
c002327f:	68 80 96 98 00       	push   0x989680
c0023284:	e8 c6 ab ff ff       	call   c001de4f <nanoSleep(unsigned long long)>
c0023289:	83 c4 10             	add    esp,0x10
c002328c:	83 fb 3c             	cmp    ebx,0x3c
c002328f:	74 0b                	je     c002329c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023291:	43                   	inc    ebx
c0023292:	eb be                	jmp    c0023252 <IDE::waitInterrupt(unsigned char)+0x12>
c0023294:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002329c:	83 c4 0c             	add    esp,0xc
c002329f:	89 e8                	mov    eax,ebp
c00232a1:	5b                   	pop    ebx
c00232a2:	5e                   	pop    esi
c00232a3:	5f                   	pop    edi
c00232a4:	5d                   	pop    ebp
c00232a5:	c3                   	ret    

c00232a6 <ideChannel0IRQHandler(regs*, void*)>:
c00232a6:	83 ec 10             	sub    esp,0x10
c00232a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232ad:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232b4:	6a 07                	push   0x7
c00232b6:	6a 00                	push   0x0
c00232b8:	50                   	push   eax
c00232b9:	e8 d4 fe ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00232be:	83 c4 1c             	add    esp,0x1c
c00232c1:	c3                   	ret    

c00232c2 <ideChannel1IRQHandler(regs*, void*)>:
c00232c2:	83 ec 10             	sub    esp,0x10
c00232c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232c9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232d0:	6a 07                	push   0x7
c00232d2:	6a 01                	push   0x1
c00232d4:	50                   	push   eax
c00232d5:	e8 b8 fe ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00232da:	83 c4 1c             	add    esp,0x1c
c00232dd:	c3                   	ret    

c00232de <IDE::enableIRQs(unsigned char, bool)>:
c00232de:	57                   	push   edi
c00232df:	56                   	push   esi
c00232e0:	be 04 00 00 00       	mov    esi,0x4
c00232e5:	53                   	push   ebx
c00232e6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232ef:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232f4:	0f 94 c0             	sete   al
c00232f7:	d1 e0                	shl    eax,1
c00232f9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023300:	0f b6 c0             	movzx  eax,al
c0023303:	50                   	push   eax
c0023304:	6a 0c                	push   0xc
c0023306:	57                   	push   edi
c0023307:	53                   	push   ebx
c0023308:	e8 c5 fd ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002330d:	83 c4 10             	add    esp,0x10
c0023310:	50                   	push   eax
c0023311:	6a 0c                	push   0xc
c0023313:	57                   	push   edi
c0023314:	53                   	push   ebx
c0023315:	e8 78 fe ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c002331a:	83 c4 10             	add    esp,0x10
c002331d:	4e                   	dec    esi
c002331e:	75 f0                	jne    c0023310 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023320:	5b                   	pop    ebx
c0023321:	5e                   	pop    esi
c0023322:	5f                   	pop    edi
c0023323:	c3                   	ret    

c0023324 <IDE::open(int, int, void*)>:
c0023324:	55                   	push   ebp
c0023325:	57                   	push   edi
c0023326:	56                   	push   esi
c0023327:	53                   	push   ebx
c0023328:	83 ec 1c             	sub    esp,0x1c
c002332b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002332f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023338:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023341:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023348:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002334f:	0f 85 b0 02 00 00    	jne    c0023605 <IDE::open(int, int, void*)+0x2e1>
c0023355:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002335b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002335f:	83 e0 7f             	and    eax,0x7f
c0023362:	3c 05                	cmp    al,0x5
c0023364:	74 04                	je     c002336a <IDE::open(int, int, void*)+0x46>
c0023366:	3c 0f                	cmp    al,0xf
c0023368:	75 32                	jne    c002339c <IDE::open(int, int, void*)+0x78>
c002336a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023370:	83 e0 fc             	and    eax,0xfffffffc
c0023373:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002337a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023380:	83 e0 fc             	and    eax,0xfffffffc
c0023383:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002338a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023390:	83 e0 fc             	and    eax,0xfffffffc
c0023393:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002339a:	eb 14                	jmp    c00233b0 <IDE::open(int, int, void*)+0x8c>
c002339c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233a6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233b0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233b7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233c2:	89 c6                	mov    esi,eax
c00233c4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233c9:	c1 e6 10             	shl    esi,0x10
c00233cc:	89 e8                	mov    eax,ebp
c00233ce:	89 fa                	mov    edx,edi
c00233d0:	c1 e0 0b             	shl    eax,0xb
c00233d3:	09 f0                	or     eax,esi
c00233d5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233dc:	c1 e6 08             	shl    esi,0x8
c00233df:	09 c6                	or     esi,eax
c00233e1:	89 f0                	mov    eax,esi
c00233e3:	0d 08 00 00 80       	or     eax,0x80000008
c00233e8:	ef                   	out    dx,eax
c00233e9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233ee:	89 ca                	mov    edx,ecx
c00233f0:	ed                   	in     eax,dx
c00233f1:	c1 e8 10             	shr    eax,0x10
c00233f4:	3d ff ff 00 00       	cmp    eax,0xffff
c00233f9:	0f 84 f5 00 00 00    	je     c00234f4 <IDE::open(int, int, void*)+0x1d0>
c00233ff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023405:	89 fa                	mov    edx,edi
c0023407:	89 f0                	mov    eax,esi
c0023409:	ef                   	out    dx,eax
c002340a:	b0 fe                	mov    al,0xfe
c002340c:	89 ca                	mov    edx,ecx
c002340e:	ee                   	out    dx,al
c002340f:	89 f0                	mov    eax,esi
c0023411:	89 fa                	mov    edx,edi
c0023413:	ef                   	out    dx,eax
c0023414:	89 ca                	mov    edx,ecx
c0023416:	ed                   	in     eax,dx
c0023417:	3c fe                	cmp    al,0xfe
c0023419:	0f 85 a9 00 00 00    	jne    c00234c8 <IDE::open(int, int, void*)+0x1a4>
c002341f:	8b 15 68 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd68
c0023425:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002342c:	74 33                	je     c0023461 <IDE::open(int, int, void*)+0x13d>
c002342e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023434:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023438:	40                   	inc    eax
c0023439:	83 ec 0c             	sub    esp,0xc
c002343c:	0f b6 c0             	movzx  eax,al
c002343f:	50                   	push   eax
c0023440:	55                   	push   ebp
c0023441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023445:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002344b:	51                   	push   ecx
c002344c:	e8 4b 48 ff ff       	call   c0017c9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023451:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023456:	83 c4 1c             	add    esp,0x1c
c0023459:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002345f:	eb 0a                	jmp    c002346b <IDE::open(int, int, void*)+0x147>
c0023461:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002346b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023472:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023479:	c1 e1 10             	shl    ecx,0x10
c002347c:	c1 e0 08             	shl    eax,0x8
c002347f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023484:	09 c1                	or     ecx,eax
c0023486:	89 fa                	mov    edx,edi
c0023488:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002348f:	c1 e0 0b             	shl    eax,0xb
c0023492:	09 c1                	or     ecx,eax
c0023494:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002349a:	89 c8                	mov    eax,ecx
c002349c:	ef                   	out    dx,eax
c002349d:	be fc 0c 00 00       	mov    esi,0xcfc
c00234a2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00234a8:	89 f2                	mov    edx,esi
c00234aa:	ee                   	out    dx,al
c00234ab:	89 c8                	mov    eax,ecx
c00234ad:	89 fa                	mov    edx,edi
c00234af:	ef                   	out    dx,eax
c00234b0:	89 f2                	mov    edx,esi
c00234b2:	ed                   	in     eax,dx
c00234b3:	0f b6 c0             	movzx  eax,al
c00234b6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234bc:	74 46                	je     c0023504 <IDE::open(int, int, void*)+0x1e0>
c00234be:	83 ec 0c             	sub    esp,0xc
c00234c1:	68 7c c4 02 c0       	push   0xc002c47c
c00234c6:	eb 34                	jmp    c00234fc <IDE::open(int, int, void*)+0x1d8>
c00234c8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234d1:	75 17                	jne    c00234ea <IDE::open(int, int, void*)+0x1c6>
c00234d3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234d8:	74 07                	je     c00234e1 <IDE::open(int, int, void*)+0x1bd>
c00234da:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234df:	75 09                	jne    c00234ea <IDE::open(int, int, void*)+0x1c6>
c00234e1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234e8:	eb 1a                	jmp    c0023504 <IDE::open(int, int, void*)+0x1e0>
c00234ea:	83 ec 0c             	sub    esp,0xc
c00234ed:	68 84 c4 02 c0       	push   0xc002c484
c00234f2:	eb 08                	jmp    c00234fc <IDE::open(int, int, void*)+0x1d8>
c00234f4:	83 ec 0c             	sub    esp,0xc
c00234f7:	68 b5 c4 02 c0       	push   0xc002c4b5
c00234fc:	e8 e2 6a ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0023501:	83 c4 10             	add    esp,0x10
c0023504:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002350b:	79 1a                	jns    c0023527 <IDE::open(int, int, void*)+0x203>
c002350d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023513:	83 e0 fc             	and    eax,0xfffffffc
c0023516:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002351d:	83 c0 08             	add    eax,0x8
c0023520:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023527:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002352d:	89 c2                	mov    edx,eax
c002352f:	83 e2 0f             	and    edx,0xf
c0023532:	66 83 fa 08          	cmp    dx,0x8
c0023536:	75 0a                	jne    c0023542 <IDE::open(int, int, void*)+0x21e>
c0023538:	83 e8 02             	sub    eax,0x2
c002353b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023542:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023548:	89 c2                	mov    edx,eax
c002354a:	83 e2 0f             	and    edx,0xf
c002354d:	66 83 fa 08          	cmp    dx,0x8
c0023551:	75 0a                	jne    c002355d <IDE::open(int, int, void*)+0x239>
c0023553:	83 e8 02             	sub    eax,0x2
c0023556:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002355d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023564:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002356b:	89 d0                	mov    eax,edx
c002356d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023570:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023574:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023578:	8d 4a 01             	lea    ecx,[edx+0x1]
c002357b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023580:	0f b6 c9             	movzx  ecx,cl
c0023583:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002358a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002358d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023591:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023595:	8d 50 02             	lea    edx,[eax+0x2]
c0023598:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002359d:	0f b6 d2             	movzx  edx,dl
c00235a0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00235a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235a9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235ad:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235b1:	8d 48 03             	lea    ecx,[eax+0x3]
c00235b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235b9:	0f b6 c9             	movzx  ecx,cl
c00235bc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235c9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235cd:	8d 50 04             	lea    edx,[eax+0x4]
c00235d0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235d6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235db:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235e2:	66 85 f6             	test   si,si
c00235e5:	74 5b                	je     c0023642 <IDE::open(int, int, void*)+0x31e>
c00235e7:	0f b6 d2             	movzx  edx,dl
c00235ea:	83 c0 05             	add    eax,0x5
c00235ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235f4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235f8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235fe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023603:	eb 3d                	jmp    c0023642 <IDE::open(int, int, void*)+0x31e>
c0023605:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002360b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023612:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023619:	66 05 06 02          	add    ax,0x206
c002361d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023624:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002362b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023632:	66 05 06 02          	add    ax,0x206
c0023636:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002363d:	e9 e5 fe ff ff       	jmp    c0023527 <IDE::open(int, int, void*)+0x203>
c0023642:	50                   	push   eax
c0023643:	50                   	push   eax
c0023644:	6a 00                	push   0x0
c0023646:	53                   	push   ebx
c0023647:	e8 60 fa ff ff       	call   c00230ac <IDE::prepareInterrupt(unsigned char)>
c002364c:	5a                   	pop    edx
c002364d:	59                   	pop    ecx
c002364e:	6a 01                	push   0x1
c0023650:	53                   	push   ebx
c0023651:	e8 56 fa ff ff       	call   c00230ac <IDE::prepareInterrupt(unsigned char)>
c0023656:	83 c4 0c             	add    esp,0xc
c0023659:	6a 00                	push   0x0
c002365b:	6a 00                	push   0x0
c002365d:	53                   	push   ebx
c002365e:	e8 7b fc ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c0023663:	83 c4 0c             	add    esp,0xc
c0023666:	6a 00                	push   0x0
c0023668:	6a 01                	push   0x1
c002366a:	53                   	push   ebx
c002366b:	e8 6e fc ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c0023670:	83 c4 10             	add    esp,0x10
c0023673:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002367a:	74 34                	je     c00236b0 <IDE::open(int, int, void*)+0x38c>
c002367c:	83 ec 0c             	sub    esp,0xc
c002367f:	53                   	push   ebx
c0023680:	6a 01                	push   0x1
c0023682:	68 a6 32 02 c0       	push   0xc00232a6
c0023687:	6a 0e                	push   0xe
c0023689:	53                   	push   ebx
c002368a:	e8 5b 05 ff ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002368f:	83 c4 14             	add    esp,0x14
c0023692:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023698:	53                   	push   ebx
c0023699:	6a 01                	push   0x1
c002369b:	68 c2 32 02 c0       	push   0xc00232c2
c00236a0:	6a 0f                	push   0xf
c00236a2:	53                   	push   ebx
c00236a3:	e8 42 05 ff ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00236ae:	eb 38                	jmp    c00236e8 <IDE::open(int, int, void*)+0x3c4>
c00236b0:	83 ec 0c             	sub    esp,0xc
c00236b3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00236bd:	53                   	push   ebx
c00236be:	6a 00                	push   0x0
c00236c0:	68 a6 32 02 c0       	push   0xc00232a6
c00236c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236cb:	53                   	push   ebx
c00236cc:	e8 19 05 ff ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236d1:	83 c4 14             	add    esp,0x14
c00236d4:	53                   	push   ebx
c00236d5:	6a 00                	push   0x0
c00236d7:	68 c2 32 02 c0       	push   0xc00232c2
c00236dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236e2:	53                   	push   ebx
c00236e3:	e8 02 05 ff ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236ea:	83 c4 20             	add    esp,0x20
c00236ed:	83 ec 0c             	sub    esp,0xc
c00236f0:	53                   	push   ebx
c00236f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236f4:	83 c4 0c             	add    esp,0xc
c00236f7:	6a 07                	push   0x7
c00236f9:	6a 00                	push   0x0
c00236fb:	53                   	push   ebx
c00236fc:	e8 91 fa ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023701:	83 c4 0c             	add    esp,0xc
c0023704:	6a 07                	push   0x7
c0023706:	6a 01                	push   0x1
c0023708:	53                   	push   ebx
c0023709:	e8 84 fa ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c002370e:	83 c4 0c             	add    esp,0xc
c0023711:	6a 01                	push   0x1
c0023713:	6a 00                	push   0x0
c0023715:	53                   	push   ebx
c0023716:	e8 c3 fb ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c002371b:	83 c4 0c             	add    esp,0xc
c002371e:	6a 01                	push   0x1
c0023720:	6a 01                	push   0x1
c0023722:	53                   	push   ebx
c0023723:	e8 b6 fb ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c0023728:	83 c4 2c             	add    esp,0x2c
c002372b:	31 c0                	xor    eax,eax
c002372d:	5b                   	pop    ebx
c002372e:	5e                   	pop    esi
c002372f:	5f                   	pop    edi
c0023730:	5d                   	pop    ebp
c0023731:	c3                   	ret    

c0023732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023732:	55                   	push   ebp
c0023733:	57                   	push   edi
c0023734:	56                   	push   esi
c0023735:	53                   	push   ebx
c0023736:	83 ec 1c             	sub    esp,0x1c
c0023739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002373d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023741:	8d 50 f8             	lea    edx,[eax-0x8]
c0023744:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023748:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002374c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023750:	80 fa 03             	cmp    dl,0x3
c0023753:	77 5d                	ja     c00237b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023755:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002375d:	0f b6 db             	movzx  ebx,bl
c0023760:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023763:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023767:	83 ca 80             	or     edx,0xffffff80
c002376a:	0f b6 d2             	movzx  edx,dl
c002376d:	52                   	push   edx
c002376e:	6a 0c                	push   0xc
c0023770:	53                   	push   ebx
c0023771:	56                   	push   esi
c0023772:	e8 5b f9 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023777:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002377c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023780:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023784:	0f b6 c0             	movzx  eax,al
c0023787:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002378b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002378d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023792:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023796:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002379a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002379e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237a6:	83 c4 2c             	add    esp,0x2c
c00237a9:	5b                   	pop    ebx
c00237aa:	5e                   	pop    esi
c00237ab:	5f                   	pop    edi
c00237ac:	5d                   	pop    ebp
c00237ad:	e9 20 f9 ff ff       	jmp    c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b2:	3c 07                	cmp    al,0x7
c00237b4:	77 10                	ja     c00237c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237b6:	0f b6 db             	movzx  ebx,bl
c00237b9:	0f b6 d0             	movzx  edx,al
c00237bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237c4:	eb 2d                	jmp    c00237f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237c6:	3c 0d                	cmp    al,0xd
c00237c8:	77 13                	ja     c00237dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237ca:	0f b6 db             	movzx  ebx,bl
c00237cd:	0f b6 c0             	movzx  eax,al
c00237d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237db:	eb 16                	jmp    c00237f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237dd:	3c 15                	cmp    al,0x15
c00237df:	77 14                	ja     c00237f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237e1:	0f b6 db             	movzx  ebx,bl
c00237e4:	0f b6 c0             	movzx  eax,al
c00237e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237f5:	83 c4 1c             	add    esp,0x1c
c00237f8:	5b                   	pop    ebx
c00237f9:	5e                   	pop    esi
c00237fa:	5f                   	pop    edi
c00237fb:	5d                   	pop    ebp
c00237fc:	c3                   	ret    
c00237fd:	90                   	nop

c00237fe <IDE::detect()>:
c00237fe:	55                   	push   ebp
c00237ff:	57                   	push   edi
c0023800:	56                   	push   esi
c0023801:	53                   	push   ebx
c0023802:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023808:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002380f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023816:	0f 85 9d 02 00 00    	jne    c0023ab9 <IDE::detect()+0x2bb>
c002381c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023823:	31 f6                	xor    esi,esi
c0023825:	31 ed                	xor    ebp,ebp
c0023827:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002382f:	89 e8                	mov    eax,ebp
c0023831:	c1 e0 06             	shl    eax,0x6
c0023834:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002383c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023840:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023844:	c1 e0 04             	shl    eax,0x4
c0023847:	83 c8 a0             	or     eax,0xffffffa0
c002384a:	0f b6 c0             	movzx  eax,al
c002384d:	50                   	push   eax
c002384e:	6a 06                	push   0x6
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 7b f8 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023857:	83 c4 0c             	add    esp,0xc
c002385a:	6a 0c                	push   0xc
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 2f f9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023863:	83 c4 0c             	add    esp,0xc
c0023866:	6a 0c                	push   0xc
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	e8 23 f9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c002386f:	83 c4 0c             	add    esp,0xc
c0023872:	6a 0c                	push   0xc
c0023874:	56                   	push   esi
c0023875:	53                   	push   ebx
c0023876:	e8 17 f9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c002387b:	83 c4 0c             	add    esp,0xc
c002387e:	6a 0c                	push   0xc
c0023880:	56                   	push   esi
c0023881:	53                   	push   ebx
c0023882:	e8 0b f9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023887:	68 ec 00 00 00       	push   0xec
c002388c:	6a 07                	push   0x7
c002388e:	56                   	push   esi
c002388f:	53                   	push   ebx
c0023890:	e8 3d f8 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023895:	83 c4 1c             	add    esp,0x1c
c0023898:	6a 0c                	push   0xc
c002389a:	56                   	push   esi
c002389b:	53                   	push   ebx
c002389c:	e8 f1 f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238a1:	83 c4 0c             	add    esp,0xc
c00238a4:	6a 0c                	push   0xc
c00238a6:	56                   	push   esi
c00238a7:	53                   	push   ebx
c00238a8:	e8 e5 f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238ad:	83 c4 0c             	add    esp,0xc
c00238b0:	6a 0c                	push   0xc
c00238b2:	56                   	push   esi
c00238b3:	53                   	push   ebx
c00238b4:	e8 d9 f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238b9:	83 c4 0c             	add    esp,0xc
c00238bc:	6a 0c                	push   0xc
c00238be:	56                   	push   esi
c00238bf:	53                   	push   ebx
c00238c0:	e8 cd f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238c5:	83 c4 0c             	add    esp,0xc
c00238c8:	6a 0c                	push   0xc
c00238ca:	56                   	push   esi
c00238cb:	53                   	push   ebx
c00238cc:	e8 c1 f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238d1:	83 c4 10             	add    esp,0x10
c00238d4:	84 c0                	test   al,al
c00238d6:	0f 84 63 01 00 00    	je     c0023a3f <IDE::detect()+0x241>
c00238dc:	31 ff                	xor    edi,edi
c00238de:	50                   	push   eax
c00238df:	6a 0c                	push   0xc
c00238e1:	56                   	push   esi
c00238e2:	53                   	push   ebx
c00238e3:	e8 aa f8 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00238e8:	83 c4 10             	add    esp,0x10
c00238eb:	a8 01                	test   al,0x1
c00238ed:	0f 85 6d 01 00 00    	jne    c0023a60 <IDE::detect()+0x262>
c00238f3:	84 c0                	test   al,al
c00238f5:	78 04                	js     c00238fb <IDE::detect()+0xfd>
c00238f7:	a8 08                	test   al,0x8
c00238f9:	75 27                	jne    c0023922 <IDE::detect()+0x124>
c00238fb:	47                   	inc    edi
c00238fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023902:	7e da                	jle    c00238de <IDE::detect()+0xe0>
c0023904:	50                   	push   eax
c0023905:	50                   	push   eax
c0023906:	6a 00                	push   0x0
c0023908:	68 40 4b 4c 00       	push   0x4c4b40
c002390d:	e8 3d a5 ff ff       	call   c001de4f <nanoSleep(unsigned long long)>
c0023912:	83 c4 10             	add    esp,0x10
c0023915:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002391b:	75 c1                	jne    c00238de <IDE::detect()+0xe0>
c002391d:	e9 3e 01 00 00       	jmp    c0023a60 <IDE::detect()+0x262>
c0023922:	31 c9                	xor    ecx,ecx
c0023924:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023928:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002392c:	83 ec 0c             	sub    esp,0xc
c002392f:	68 80 00 00 00       	push   0x80
c0023934:	57                   	push   edi
c0023935:	6a 00                	push   0x0
c0023937:	56                   	push   esi
c0023938:	53                   	push   ebx
c0023939:	e8 f4 fd ff ff       	call   c0023732 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002393e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023943:	89 e8                	mov    eax,ebp
c0023945:	89 d1                	mov    ecx,edx
c0023947:	c1 e0 06             	shl    eax,0x6
c002394a:	01 d8                	add    eax,ebx
c002394c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023953:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002395a:	89 f2                	mov    edx,esi
c002395c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023962:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023966:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002396c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023970:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023977:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002397f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023986:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002398e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023994:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002399b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00239a1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00239a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239a9:	83 c4 20             	add    esp,0x20
c00239ac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239af:	83 c0 02             	add    eax,0x2
c00239b2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239b8:	83 c7 02             	add    edi,0x2
c00239bb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239be:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239c4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239c8:	75 e2                	jne    c00239ac <IDE::detect()+0x1ae>
c00239ca:	89 e8                	mov    eax,ebp
c00239cc:	c1 e0 06             	shl    eax,0x6
c00239cf:	01 d8                	add    eax,ebx
c00239d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239de:	66 c1 ea 09          	shr    dx,0x9
c00239e2:	83 e2 01             	and    edx,0x1
c00239e5:	84 c9                	test   cl,cl
c00239e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239ed:	75 22                	jne    c0023a11 <IDE::detect()+0x213>
c00239ef:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00239f6:	74 46                	je     c0023a3e <IDE::detect()+0x240>
c00239f8:	83 ec 0c             	sub    esp,0xc
c00239fb:	68 7c 01 00 00       	push   0x17c
c0023a00:	e8 94 bb fe ff       	call   c000f599 <malloc>
c0023a05:	89 c7                	mov    edi,eax
c0023a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a0a:	e8 15 05 00 00       	call   c0023f24 <ATA::ATA()>
c0023a0f:	eb 17                	jmp    c0023a28 <IDE::detect()+0x22a>
c0023a11:	83 ec 0c             	sub    esp,0xc
c0023a14:	68 80 01 00 00       	push   0x180
c0023a19:	e8 7b bb fe ff       	call   c000f599 <malloc>
c0023a1e:	89 c7                	mov    edi,eax
c0023a20:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a23:	e8 88 0b 00 00       	call   c00245b0 <ATAPI::ATAPI()>
c0023a28:	5a                   	pop    edx
c0023a29:	59                   	pop    ecx
c0023a2a:	57                   	push   edi
c0023a2b:	53                   	push   ebx
c0023a2c:	e8 41 02 ff ff       	call   c0013c72 <Device::addChild(Device*)>
c0023a31:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a33:	53                   	push   ebx
c0023a34:	55                   	push   ebp
c0023a35:	6a 00                	push   0x0
c0023a37:	57                   	push   edi
c0023a38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a3b:	83 c4 20             	add    esp,0x20
c0023a3e:	45                   	inc    ebp
c0023a3f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023a44:	74 0d                	je     c0023a53 <IDE::detect()+0x255>
c0023a46:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023a4e:	e9 dc fd ff ff       	jmp    c002382f <IDE::detect()+0x31>
c0023a53:	4e                   	dec    esi
c0023a54:	74 63                	je     c0023ab9 <IDE::detect()+0x2bb>
c0023a56:	be 01 00 00 00       	mov    esi,0x1
c0023a5b:	e9 c7 fd ff ff       	jmp    c0023827 <IDE::detect()+0x29>
c0023a60:	50                   	push   eax
c0023a61:	6a 04                	push   0x4
c0023a63:	56                   	push   esi
c0023a64:	53                   	push   ebx
c0023a65:	e8 28 f7 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023a6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a6e:	83 c4 0c             	add    esp,0xc
c0023a71:	6a 05                	push   0x5
c0023a73:	56                   	push   esi
c0023a74:	53                   	push   ebx
c0023a75:	e8 18 f7 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023a7a:	83 c4 10             	add    esp,0x10
c0023a7d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a81:	80 fa 14             	cmp    dl,0x14
c0023a84:	75 04                	jne    c0023a8a <IDE::detect()+0x28c>
c0023a86:	3c eb                	cmp    al,0xeb
c0023a88:	eb 07                	jmp    c0023a91 <IDE::detect()+0x293>
c0023a8a:	3c 96                	cmp    al,0x96
c0023a8c:	75 b1                	jne    c0023a3f <IDE::detect()+0x241>
c0023a8e:	80 fa 69             	cmp    dl,0x69
c0023a91:	75 ac                	jne    c0023a3f <IDE::detect()+0x241>
c0023a93:	68 a1 00 00 00       	push   0xa1
c0023a98:	6a 07                	push   0x7
c0023a9a:	56                   	push   esi
c0023a9b:	53                   	push   ebx
c0023a9c:	e8 31 f6 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aa1:	5f                   	pop    edi
c0023aa2:	58                   	pop    eax
c0023aa3:	6a 00                	push   0x0
c0023aa5:	68 40 42 0f 00       	push   0xf4240
c0023aaa:	e8 a0 a3 ff ff       	call   c001de4f <nanoSleep(unsigned long long)>
c0023aaf:	83 c4 10             	add    esp,0x10
c0023ab2:	b1 01                	mov    cl,0x1
c0023ab4:	e9 6b fe ff ff       	jmp    c0023924 <IDE::detect()+0x126>
c0023ab9:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023abf:	5b                   	pop    ebx
c0023ac0:	5e                   	pop    esi
c0023ac1:	5f                   	pop    edi
c0023ac2:	5d                   	pop    ebp
c0023ac3:	c3                   	ret    

c0023ac4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ac4:	55                   	push   ebp
c0023ac5:	57                   	push   edi
c0023ac6:	56                   	push   esi
c0023ac7:	53                   	push   ebx
c0023ac8:	83 ec 1c             	sub    esp,0x1c
c0023acb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023acf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ad3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023ad7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023adb:	88 c3                	mov    bl,al
c0023add:	84 c0                	test   al,al
c0023adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ae3:	0f 84 81 00 00 00    	je     c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023ae9:	83 ec 0c             	sub    esp,0xc
c0023aec:	68 df c4 02 c0       	push   0xc002c4df
c0023af1:	e8 43 ed fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0023af6:	83 c4 10             	add    esp,0x10
c0023af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023afd:	3c 01                	cmp    al,0x1
c0023aff:	74 63                	je     c0023b64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023b01:	3c 02                	cmp    al,0x2
c0023b03:	75 53                	jne    c0023b58 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023b05:	d1 e6                	shl    esi,1
c0023b07:	09 ee                	or     esi,ebp
c0023b09:	50                   	push   eax
c0023b0a:	89 f0                	mov    eax,esi
c0023b0c:	6a 01                	push   0x1
c0023b0e:	0f b6 f0             	movzx  esi,al
c0023b11:	c1 e6 06             	shl    esi,0x6
c0023b14:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b1c:	50                   	push   eax
c0023b1d:	57                   	push   edi
c0023b1e:	e8 6f f6 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023b23:	83 c4 10             	add    esp,0x10
c0023b26:	a8 01                	test   al,0x1
c0023b28:	74 02                	je     c0023b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023b2a:	b3 07                	mov    bl,0x7
c0023b2c:	a8 02                	test   al,0x2
c0023b2e:	74 02                	je     c0023b32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023b30:	b3 03                	mov    bl,0x3
c0023b32:	a8 04                	test   al,0x4
c0023b34:	74 02                	je     c0023b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023b36:	b3 14                	mov    bl,0x14
c0023b38:	a8 08                	test   al,0x8
c0023b3a:	74 02                	je     c0023b3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023b3c:	b3 03                	mov    bl,0x3
c0023b3e:	a8 10                	test   al,0x10
c0023b40:	74 02                	je     c0023b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023b42:	b3 15                	mov    bl,0x15
c0023b44:	a8 20                	test   al,0x20
c0023b46:	74 02                	je     c0023b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023b48:	b3 03                	mov    bl,0x3
c0023b4a:	a8 40                	test   al,0x40
c0023b4c:	74 02                	je     c0023b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023b4e:	b3 16                	mov    bl,0x16
c0023b50:	84 c0                	test   al,al
c0023b52:	79 16                	jns    c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b54:	b3 0d                	mov    bl,0xd
c0023b56:	eb 12                	jmp    c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b58:	3c 03                	cmp    al,0x3
c0023b5a:	74 0c                	je     c0023b68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023b5c:	3c 04                	cmp    al,0x4
c0023b5e:	75 0a                	jne    c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b60:	b3 08                	mov    bl,0x8
c0023b62:	eb 06                	jmp    c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b64:	b3 13                	mov    bl,0x13
c0023b66:	eb 02                	jmp    c0023b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023b68:	b3 17                	mov    bl,0x17
c0023b6a:	83 c4 1c             	add    esp,0x1c
c0023b6d:	88 d8                	mov    al,bl
c0023b6f:	5b                   	pop    ebx
c0023b70:	5e                   	pop    esi
c0023b71:	5f                   	pop    edi
c0023b72:	5d                   	pop    ebp
c0023b73:	c3                   	ret    

c0023b74 <IDE::polling(unsigned char, unsigned int)>:
c0023b74:	57                   	push   edi
c0023b75:	56                   	push   esi
c0023b76:	53                   	push   ebx
c0023b77:	bb 04 00 00 00       	mov    ebx,0x4
c0023b7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b80:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b85:	52                   	push   edx
c0023b86:	6a 0c                	push   0xc
c0023b88:	56                   	push   esi
c0023b89:	57                   	push   edi
c0023b8a:	e8 03 f6 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023b8f:	83 c4 10             	add    esp,0x10
c0023b92:	4b                   	dec    ebx
c0023b93:	75 f0                	jne    c0023b85 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b95:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b9a:	50                   	push   eax
c0023b9b:	6a 0c                	push   0xc
c0023b9d:	56                   	push   esi
c0023b9e:	57                   	push   edi
c0023b9f:	e8 ee f5 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023ba4:	83 c4 10             	add    esp,0x10
c0023ba7:	a8 01                	test   al,0x1
c0023ba9:	75 17                	jne    c0023bc2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023bab:	a8 20                	test   al,0x20
c0023bad:	75 0f                	jne    c0023bbe <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023baf:	4b                   	dec    ebx
c0023bb0:	74 10                	je     c0023bc2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023bb2:	84 c0                	test   al,al
c0023bb4:	78 e4                	js     c0023b9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bb6:	a8 08                	test   al,0x8
c0023bb8:	74 e0                	je     c0023b9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023bba:	31 c0                	xor    eax,eax
c0023bbc:	eb 06                	jmp    c0023bc4 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023bbe:	b0 01                	mov    al,0x1
c0023bc0:	eb 02                	jmp    c0023bc4 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023bc2:	b0 02                	mov    al,0x2
c0023bc4:	5b                   	pop    ebx
c0023bc5:	5e                   	pop    esi
c0023bc6:	5f                   	pop    edi
c0023bc7:	c3                   	ret    

c0023bc8 <SATABus::close(int, int, void*)>:
c0023bc8:	31 c0                	xor    eax,eax
c0023bca:	c3                   	ret    
c0023bcb:	90                   	nop

c0023bcc <SATABus::detect()>:
c0023bcc:	c3                   	ret    
c0023bcd:	90                   	nop

c0023bce <SATABus::SATABus()>:
c0023bce:	83 ec 0c             	sub    esp,0xc
c0023bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd5:	83 ec 08             	sub    esp,0x8
c0023bd8:	68 18 c5 02 c0       	push   0xc002c518
c0023bdd:	50                   	push   eax
c0023bde:	e8 3d 04 ff ff       	call   c0014020 <HardDiskController::HardDiskController(char const*)>
c0023be3:	83 c4 10             	add    esp,0x10
c0023be6:	ba 6c c5 02 c0       	mov    edx,0xc002c56c
c0023beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bef:	89 10                	mov    DWORD PTR [eax],edx
c0023bf1:	83 ec 0c             	sub    esp,0xc
c0023bf4:	6a 50                	push   0x50
c0023bf6:	e8 92 be fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	89 c2                	mov    edx,eax
c0023c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c04:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c0a:	83 ec 0c             	sub    esp,0xc
c0023c0d:	6a 50                	push   0x50
c0023c0f:	e8 0b d6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	89 c2                	mov    edx,eax
c0023c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c23:	a1 d0 de 02 c0       	mov    eax,ds:0xc002ded0
c0023c28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c2c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c36:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c3c:	83 ec 0c             	sub    esp,0xc
c0023c3f:	6a 03                	push   0x3
c0023c41:	6a 50                	push   0x50
c0023c43:	51                   	push   ecx
c0023c44:	52                   	push   edx
c0023c45:	50                   	push   eax
c0023c46:	e8 1d e1 fe ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c4b:	83 c4 20             	add    esp,0x20
c0023c4e:	90                   	nop
c0023c4f:	83 c4 0c             	add    esp,0xc
c0023c52:	c3                   	ret    
c0023c53:	90                   	nop

c0023c54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c54:	83 ec 0c             	sub    esp,0xc
c0023c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c5b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c61:	09 c2                	or     edx,eax
c0023c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c6f:	31 c0                	xor    eax,eax
c0023c71:	c1 e9 08             	shr    ecx,0x8
c0023c74:	83 e1 0f             	and    ecx,0xf
c0023c77:	39 c8                	cmp    eax,ecx
c0023c79:	74 0a                	je     c0023c85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c7b:	f6 c2 01             	test   dl,0x1
c0023c7e:	74 18                	je     c0023c98 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c80:	d1 ea                	shr    edx,1
c0023c82:	40                   	inc    eax
c0023c83:	eb f2                	jmp    c0023c77 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c85:	83 ec 0c             	sub    esp,0xc
c0023c88:	68 3c c5 02 c0       	push   0xc002c53c
c0023c8d:	e8 51 63 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0023c92:	83 c4 10             	add    esp,0x10
c0023c95:	83 c8 ff             	or     eax,0xffffffff
c0023c98:	83 c4 0c             	add    esp,0xc
c0023c9b:	c3                   	ret    

c0023c9c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023c9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ca0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ca3:	89 c2                	mov    edx,eax
c0023ca5:	c1 ea 08             	shr    edx,0x8
c0023ca8:	83 e2 0f             	and    edx,0xf
c0023cab:	fe ca                	dec    dl
c0023cad:	75 31                	jne    c0023ce0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023caf:	83 e0 0f             	and    eax,0xf
c0023cb2:	3c 03                	cmp    al,0x3
c0023cb4:	75 2a                	jne    c0023ce0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cb6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cb9:	b8 02 00 00 00       	mov    eax,0x2
c0023cbe:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cc4:	74 1c                	je     c0023ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cc6:	b8 04 00 00 00       	mov    eax,0x4
c0023ccb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023cd1:	74 0f                	je     c0023ce2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cd3:	31 c0                	xor    eax,eax
c0023cd5:	83 fa 03             	cmp    edx,0x3
c0023cd8:	0f 94 c0             	sete   al
c0023cdb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023cdf:	c3                   	ret    
c0023ce0:	31 c0                	xor    eax,eax
c0023ce2:	c3                   	ret    
c0023ce3:	90                   	nop

c0023ce4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ce4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ce8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ceb:	0f ba e2 0f          	bt     edx,0xf
c0023cef:	72 f7                	jb     c0023ce8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023cf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cf4:	83 ca 10             	or     edx,0x10
c0023cf7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cfd:	83 ca 01             	or     edx,0x1
c0023d00:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d03:	c3                   	ret    

c0023d04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0b:	83 e2 fe             	and    edx,0xfffffffe
c0023d0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d11:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d14:	83 e2 ef             	and    edx,0xffffffef
c0023d17:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d1d:	0f ba e2 0e          	bt     edx,0xe
c0023d21:	72 f7                	jb     c0023d1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d26:	0f ba e2 0f          	bt     edx,0xf
c0023d2a:	72 ee                	jb     c0023d1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d2c:	c3                   	ret    
c0023d2d:	90                   	nop

c0023d2e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d2e:	55                   	push   ebp
c0023d2f:	57                   	push   edi
c0023d30:	56                   	push   esi
c0023d31:	53                   	push   ebx
c0023d32:	83 ec 1c             	sub    esp,0x1c
c0023d35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d3d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d41:	53                   	push   ebx
c0023d42:	89 fd                	mov    ebp,edi
c0023d44:	56                   	push   esi
c0023d45:	c1 e5 0a             	shl    ebp,0xa
c0023d48:	e8 b7 ff ff ff       	call   c0023d04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d4d:	83 ec 0c             	sub    esp,0xc
c0023d50:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d56:	01 e8                	add    eax,ebp
c0023d58:	89 03                	mov    DWORD PTR [ebx],eax
c0023d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d5c:	68 00 04 00 00       	push   0x400
c0023d61:	6a 00                	push   0x0
c0023d63:	50                   	push   eax
c0023d64:	e8 e7 c9 fd ff       	call   c0000750 <memset>
c0023d69:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d6f:	89 fa                	mov    edx,edi
c0023d71:	01 e8                	add    eax,ebp
c0023d73:	c1 e7 0d             	shl    edi,0xd
c0023d76:	89 03                	mov    DWORD PTR [ebx],eax
c0023d78:	c1 e2 08             	shl    edx,0x8
c0023d7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d82:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d8c:	89 d0                	mov    eax,edx
c0023d8e:	83 c4 1c             	add    esp,0x1c
c0023d91:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d97:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023d9d:	68 00 01 00 00       	push   0x100
c0023da2:	6a 00                	push   0x0
c0023da4:	50                   	push   eax
c0023da5:	e8 a6 c9 fd ff       	call   c0000750 <memset>
c0023daa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dae:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023db4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dbe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023dcb:	31 ff                	xor    edi,edi
c0023dcd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023dd3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023dd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ddd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023de3:	83 c5 20             	add    ebp,0x20
c0023de6:	01 f8                	add    eax,edi
c0023de8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023deb:	52                   	push   edx
c0023dec:	68 00 01 00 00       	push   0x100
c0023df1:	6a 00                	push   0x0
c0023df3:	50                   	push   eax
c0023df4:	e8 57 c9 fd ff       	call   c0000750 <memset>
c0023df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023dfd:	83 c4 10             	add    esp,0x10
c0023e00:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e06:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e0d:	01 f8                	add    eax,edi
c0023e0f:	81 c7 00 01 00 00    	add    edi,0x100
c0023e15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e18:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e1e:	75 b3                	jne    c0023dd3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e20:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e24:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e28:	83 c4 1c             	add    esp,0x1c
c0023e2b:	5b                   	pop    ebx
c0023e2c:	5e                   	pop    esi
c0023e2d:	5f                   	pop    edi
c0023e2e:	5d                   	pop    ebp
c0023e2f:	e9 b0 fe ff ff       	jmp    c0023ce4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e34:	55                   	push   ebp
c0023e35:	57                   	push   edi
c0023e36:	56                   	push   esi
c0023e37:	53                   	push   ebx
c0023e38:	31 db                	xor    ebx,ebx
c0023e3a:	83 ec 0c             	sub    esp,0xc
c0023e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e41:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e45:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e48:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e4e:	74 7a                	je     c0023eca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023e50:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023e54:	89 d8                	mov    eax,ebx
c0023e56:	c1 e0 07             	shl    eax,0x7
c0023e59:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023e60:	55                   	push   ebp
c0023e61:	56                   	push   esi
c0023e62:	e8 35 fe ff ff       	call   c0023c9c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e67:	5a                   	pop    edx
c0023e68:	83 f8 01             	cmp    eax,0x1
c0023e6b:	59                   	pop    ecx
c0023e6c:	75 21                	jne    c0023e8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023e6e:	50                   	push   eax
c0023e6f:	53                   	push   ebx
c0023e70:	55                   	push   ebp
c0023e71:	56                   	push   esi
c0023e72:	e8 b7 fe ff ff       	call   c0023d2e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e77:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e7e:	e8 16 b7 fe ff       	call   c000f599 <malloc>
c0023e83:	89 c5                	mov    ebp,eax
c0023e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e88:	e8 87 0d 00 00       	call   c0024c14 <SATA::SATA()>
c0023e8d:	eb 24                	jmp    c0023eb3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023e8f:	83 f8 04             	cmp    eax,0x4
c0023e92:	75 36                	jne    c0023eca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023e94:	51                   	push   ecx
c0023e95:	53                   	push   ebx
c0023e96:	55                   	push   ebp
c0023e97:	56                   	push   esi
c0023e98:	e8 91 fe ff ff       	call   c0023d2e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e9d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ea4:	e8 f0 b6 fe ff       	call   c000f599 <malloc>
c0023ea9:	89 c5                	mov    ebp,eax
c0023eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eae:	e8 d7 10 00 00       	call   c0024f8a <SATAPI::SATAPI()>
c0023eb3:	58                   	pop    eax
c0023eb4:	5a                   	pop    edx
c0023eb5:	55                   	push   ebp
c0023eb6:	56                   	push   esi
c0023eb7:	e8 b6 fd fe ff       	call   c0013c72 <Device::addChild(Device*)>
c0023ebc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ebf:	56                   	push   esi
c0023ec0:	6a 00                	push   0x0
c0023ec2:	53                   	push   ebx
c0023ec3:	55                   	push   ebp
c0023ec4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023ec7:	83 c4 20             	add    esp,0x20
c0023eca:	d1 ef                	shr    edi,1
c0023ecc:	43                   	inc    ebx
c0023ecd:	83 fb 20             	cmp    ebx,0x20
c0023ed0:	0f 85 72 ff ff ff    	jne    c0023e48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023ed6:	83 c4 0c             	add    esp,0xc
c0023ed9:	5b                   	pop    ebx
c0023eda:	5e                   	pop    esi
c0023edb:	5f                   	pop    edi
c0023edc:	5d                   	pop    ebp
c0023edd:	c3                   	ret    

c0023ede <SATABus::open(int, int, void*)>:
c0023ede:	83 ec 14             	sub    esp,0x14
c0023ee1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ee5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023eeb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ef1:	52                   	push   edx
c0023ef2:	50                   	push   eax
c0023ef3:	e8 3c ff ff ff       	call   c0023e34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023ef8:	31 c0                	xor    eax,eax
c0023efa:	83 c4 1c             	add    esp,0x1c
c0023efd:	c3                   	ret    

c0023efe <ATA::close(int, int, void*)>:
c0023efe:	83 ec 0c             	sub    esp,0xc
c0023f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f0b:	85 c0                	test   eax,eax
c0023f0d:	74 0c                	je     c0023f1b <ATA::close(int, int, void*)+0x1d>
c0023f0f:	83 ec 0c             	sub    esp,0xc
c0023f12:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f14:	50                   	push   eax
c0023f15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f18:	83 c4 10             	add    esp,0x10
c0023f1b:	31 c0                	xor    eax,eax
c0023f1d:	83 c4 0c             	add    esp,0xc
c0023f20:	c3                   	ret    
c0023f21:	90                   	nop

c0023f22 <ATA::powerSaving(PowerSavingLevel)>:
c0023f22:	c3                   	ret    
c0023f23:	90                   	nop

c0023f24 <ATA::ATA()>:
c0023f24:	83 ec 0c             	sub    esp,0xc
c0023f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f2b:	83 ec 04             	sub    esp,0x4
c0023f2e:	68 00 02 00 00       	push   0x200
c0023f33:	68 61 c6 02 c0       	push   0xc002c661
c0023f38:	50                   	push   eax
c0023f39:	e8 6a 01 ff ff       	call   c00140a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f3e:	83 c4 10             	add    esp,0x10
c0023f41:	ba e4 c5 02 c0       	mov    edx,0xc002c5e4
c0023f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f4a:	89 10                	mov    DWORD PTR [eax],edx
c0023f4c:	90                   	nop
c0023f4d:	83 c4 0c             	add    esp,0xc
c0023f50:	c3                   	ret    
c0023f51:	90                   	nop

c0023f52 <ATA::flush(bool)>:
c0023f52:	53                   	push   ebx
c0023f53:	83 ec 08             	sub    esp,0x8
c0023f56:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f5f:	19 c0                	sbb    eax,eax
c0023f61:	83 e0 fd             	and    eax,0xfffffffd
c0023f64:	05 ea 00 00 00       	add    eax,0xea
c0023f69:	50                   	push   eax
c0023f6a:	6a 07                	push   0x7
c0023f6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f73:	50                   	push   eax
c0023f74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f7a:	e8 53 f1 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f7f:	83 c4 0c             	add    esp,0xc
c0023f82:	6a 00                	push   0x0
c0023f84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f8b:	50                   	push   eax
c0023f8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f92:	e8 dd fb ff ff       	call   c0023b74 <IDE::polling(unsigned char, unsigned int)>
c0023f97:	83 c4 18             	add    esp,0x18
c0023f9a:	5b                   	pop    ebx
c0023f9b:	c3                   	ret    

c0023f9c <ATA::readyForCommand()>:
c0023f9c:	56                   	push   esi
c0023f9d:	53                   	push   ebx
c0023f9e:	31 db                	xor    ebx,ebx
c0023fa0:	50                   	push   eax
c0023fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023fa5:	50                   	push   eax
c0023fa6:	6a 0c                	push   0xc
c0023fa8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023faf:	50                   	push   eax
c0023fb0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023fb6:	e8 d7 f1 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c0023fbb:	83 c4 10             	add    esp,0x10
c0023fbe:	a8 88                	test   al,0x88
c0023fc0:	74 23                	je     c0023fe5 <ATA::readyForCommand()+0x49>
c0023fc2:	43                   	inc    ebx
c0023fc3:	83 fb 63             	cmp    ebx,0x63
c0023fc6:	7e dd                	jle    c0023fa5 <ATA::readyForCommand()+0x9>
c0023fc8:	51                   	push   ecx
c0023fc9:	51                   	push   ecx
c0023fca:	6a 00                	push   0x0
c0023fcc:	68 40 42 0f 00       	push   0xf4240
c0023fd1:	e8 79 9e ff ff       	call   c001de4f <nanoSleep(unsigned long long)>
c0023fd6:	83 c4 10             	add    esp,0x10
c0023fd9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023fdf:	75 c4                	jne    c0023fa5 <ATA::readyForCommand()+0x9>
c0023fe1:	31 c0                	xor    eax,eax
c0023fe3:	eb 02                	jmp    c0023fe7 <ATA::readyForCommand()+0x4b>
c0023fe5:	b0 01                	mov    al,0x1
c0023fe7:	5a                   	pop    edx
c0023fe8:	5b                   	pop    ebx
c0023fe9:	5e                   	pop    esi
c0023fea:	c3                   	ret    
c0023feb:	90                   	nop

c0023fec <ATA::access(unsigned long long, int, void*, bool)>:
c0023fec:	55                   	push   ebp
c0023fed:	57                   	push   edi
c0023fee:	56                   	push   esi
c0023fef:	53                   	push   ebx
c0023ff0:	83 ec 38             	sub    esp,0x38
c0023ff3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0023ff7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0023ffb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0023fff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024003:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024007:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002400b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002400f:	68 90 c5 02 c0       	push   0xc002c590
c0024014:	e8 20 e8 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0024019:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002401f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024023:	83 c4 10             	add    esp,0x10
c0024026:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002402c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024030:	c1 e0 06             	shl    eax,0x6
c0024033:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002403b:	74 5d                	je     c002409a <ATA::access(unsigned long long, int, void*, bool)+0xae>
c002403d:	89 fa                	mov    edx,edi
c002403f:	89 f0                	mov    eax,esi
c0024041:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024045:	c1 ea 1c             	shr    edx,0x1c
c0024048:	89 d1                	mov    ecx,edx
c002404a:	09 c1                	or     ecx,eax
c002404c:	74 25                	je     c0024073 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c002404e:	31 ed                	xor    ebp,ebp
c0024050:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024057:	89 fa                	mov    edx,edi
c0024059:	89 f0                	mov    eax,esi
c002405b:	0f ad d0             	shrd   eax,edx,cl
c002405e:	d3 ea                	shr    edx,cl
c0024060:	f6 c1 20             	test   cl,0x20
c0024063:	74 02                	je     c0024067 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024065:	89 d0                	mov    eax,edx
c0024067:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002406b:	45                   	inc    ebp
c002406c:	83 fd 06             	cmp    ebp,0x6
c002406f:	75 df                	jne    c0024050 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024071:	eb 76                	jmp    c00240e9 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024073:	89 f0                	mov    eax,esi
c0024075:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002407a:	89 fa                	mov    edx,edi
c002407c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024083:	0f ac d0 10          	shrd   eax,edx,0x10
c0024087:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002408c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024090:	c1 ee 18             	shr    esi,0x18
c0024093:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024098:	eb 56                	jmp    c00240f0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c002409a:	6a 00                	push   0x0
c002409c:	6a 3f                	push   0x3f
c002409e:	57                   	push   edi
c002409f:	56                   	push   esi
c00240a0:	e8 9f 29 00 00       	call   c0026a44 <__umoddi3>
c00240a5:	83 c4 10             	add    esp,0x10
c00240a8:	40                   	inc    eax
c00240a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240ad:	6a 00                	push   0x0
c00240af:	68 f0 03 00 00       	push   0x3f0
c00240b4:	57                   	push   edi
c00240b5:	56                   	push   esi
c00240b6:	e8 89 28 00 00       	call   c0026944 <__udivdi3>
c00240bb:	83 c4 10             	add    esp,0x10
c00240be:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00240c3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240cf:	6a 00                	push   0x0
c00240d1:	6a 3f                	push   0x3f
c00240d3:	57                   	push   edi
c00240d4:	56                   	push   esi
c00240d5:	e8 6a 28 00 00       	call   c0026944 <__udivdi3>
c00240da:	83 c4 10             	add    esp,0x10
c00240dd:	89 c6                	mov    esi,eax
c00240df:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00240e4:	83 e6 0f             	and    esi,0xf
c00240e7:	eb 07                	jmp    c00240f0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00240e9:	31 f6                	xor    esi,esi
c00240eb:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00240f0:	bf 01 00 00 00       	mov    edi,0x1
c00240f5:	50                   	push   eax
c00240f6:	6a 00                	push   0x0
c00240f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ff:	50                   	push   eax
c0024100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024104:	e8 d5 f1 ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c0024109:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002410c:	e8 8b fe ff ff       	call   c0023f9c <ATA::readyForCommand()>
c0024111:	83 c4 10             	add    esp,0x10
c0024114:	84 c0                	test   al,al
c0024116:	0f 84 bc 02 00 00    	je     c00243d8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002411c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024122:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024128:	c1 e0 04             	shl    eax,0x4
c002412b:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024132:	09 c6                	or     esi,eax
c0024134:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024139:	75 05                	jne    c0024140 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c002413b:	83 ce a0             	or     esi,0xffffffa0
c002413e:	eb 03                	jmp    c0024143 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024140:	83 ce e0             	or     esi,0xffffffe0
c0024143:	89 f0                	mov    eax,esi
c0024145:	0f b6 f0             	movzx  esi,al
c0024148:	56                   	push   esi
c0024149:	6a 06                	push   0x6
c002414b:	51                   	push   ecx
c002414c:	52                   	push   edx
c002414d:	e8 80 ef ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024152:	83 c4 10             	add    esp,0x10
c0024155:	6a 00                	push   0x0
c0024157:	6a 01                	push   0x1
c0024159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024160:	50                   	push   eax
c0024161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024167:	e8 66 ef ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002416c:	83 c4 10             	add    esp,0x10
c002416f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024174:	75 6e                	jne    c00241e4 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024176:	6a 00                	push   0x0
c0024178:	6a 08                	push   0x8
c002417a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024181:	50                   	push   eax
c0024182:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024188:	e8 45 ef ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002418d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024192:	50                   	push   eax
c0024193:	6a 09                	push   0x9
c0024195:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002419c:	50                   	push   eax
c002419d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a3:	e8 2a ef ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241a8:	83 c4 20             	add    esp,0x20
c00241ab:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241b0:	50                   	push   eax
c00241b1:	6a 0a                	push   0xa
c00241b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ba:	50                   	push   eax
c00241bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c1:	e8 0c ef ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00241cb:	50                   	push   eax
c00241cc:	6a 0b                	push   0xb
c00241ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d5:	50                   	push   eax
c00241d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241dc:	e8 f1 ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e1:	83 c4 20             	add    esp,0x20
c00241e4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00241e9:	50                   	push   eax
c00241ea:	6a 02                	push   0x2
c00241ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f3:	50                   	push   eax
c00241f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241fa:	e8 d3 ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ff:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024204:	50                   	push   eax
c0024205:	6a 03                	push   0x3
c0024207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420e:	50                   	push   eax
c002420f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024215:	e8 b8 ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002421a:	83 c4 20             	add    esp,0x20
c002421d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024222:	50                   	push   eax
c0024223:	6a 04                	push   0x4
c0024225:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422c:	50                   	push   eax
c002422d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024233:	e8 9a ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024238:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002423d:	50                   	push   eax
c002423e:	6a 05                	push   0x5
c0024240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024247:	50                   	push   eax
c0024248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424e:	e8 7f ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024253:	83 c4 20             	add    esp,0x20
c0024256:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002425b:	0f 94 c0             	sete   al
c002425e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024263:	74 09                	je     c002426e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024265:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002426c:	eb 07                	jmp    c0024275 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002426e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024275:	0f b6 c0             	movzx  eax,al
c0024278:	50                   	push   eax
c0024279:	6a 07                	push   0x7
c002427b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024282:	50                   	push   eax
c0024283:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024289:	e8 44 ee ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428e:	c7 04 24 9d c5 02 c0 	mov    DWORD PTR [esp],0xc002c59d
c0024295:	e8 9f e5 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c002429a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002429e:	83 c4 10             	add    esp,0x10
c00242a1:	85 f6                	test   esi,esi
c00242a3:	0f 84 f7 00 00 00    	je     c00243a0 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00242a9:	83 ec 0c             	sub    esp,0xc
c00242ac:	68 a0 c5 02 c0       	push   0xc002c5a0
c00242b1:	e8 83 e5 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00242b6:	83 c4 0c             	add    esp,0xc
c00242b9:	6a 01                	push   0x1
c00242bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c2:	50                   	push   eax
c00242c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c9:	e8 a6 f8 ff ff       	call   c0023b74 <IDE::polling(unsigned char, unsigned int)>
c00242ce:	c7 04 24 a3 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5a3
c00242d5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00242d9:	e8 5b e5 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00242de:	83 c4 10             	add    esp,0x10
c00242e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00242e5:	84 c0                	test   al,al
c00242e7:	74 2b                	je     c0024314 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00242e9:	0f b6 f8             	movzx  edi,al
c00242ec:	57                   	push   edi
c00242ed:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00242f4:	50                   	push   eax
c00242f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fc:	50                   	push   eax
c00242fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024303:	e8 bc f7 ff ff       	call   c0023ac4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024308:	c7 04 24 a6 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5a6
c002430f:	e9 bc 00 00 00       	jmp    c00243d0 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0024314:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024319:	74 50                	je     c002436b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002431b:	83 ec 0c             	sub    esp,0xc
c002431e:	31 ed                	xor    ebp,ebp
c0024320:	68 b1 c5 02 c0       	push   0xc002c5b1
c0024325:	e8 0f e5 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c002432a:	83 c4 10             	add    esp,0x10
c002432d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024331:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024335:	50                   	push   eax
c0024336:	50                   	push   eax
c0024337:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433e:	50                   	push   eax
c002433f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024345:	e8 76 ed ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c002434a:	89 c2                	mov    edx,eax
c002434c:	89 f8                	mov    eax,edi
c002434e:	66 ef                	out    dx,ax
c0024350:	45                   	inc    ebp
c0024351:	83 c4 10             	add    esp,0x10
c0024354:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002435a:	75 d1                	jne    c002432d <ATA::access(unsigned long long, int, void*, bool)+0x341>
c002435c:	83 ec 0c             	sub    esp,0xc
c002435f:	68 b4 c5 02 c0       	push   0xc002c5b4
c0024364:	e8 d0 e4 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0024369:	eb 24                	jmp    c002438f <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c002436b:	51                   	push   ecx
c002436c:	51                   	push   ecx
c002436d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024374:	50                   	push   eax
c0024375:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437b:	e8 40 ed ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c0024380:	b9 00 01 00 00       	mov    ecx,0x100
c0024385:	89 c2                	mov    edx,eax
c0024387:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002438b:	fc                   	cld    
c002438c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002438f:	83 c4 10             	add    esp,0x10
c0024392:	4e                   	dec    esi
c0024393:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002439b:	e9 01 ff ff ff       	jmp    c00242a1 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00243a0:	31 ff                	xor    edi,edi
c00243a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243a7:	74 2f                	je     c00243d8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00243a9:	83 ec 0c             	sub    esp,0xc
c00243ac:	68 b7 c5 02 c0       	push   0xc002c5b7
c00243b1:	e8 83 e4 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00243b6:	58                   	pop    eax
c00243b7:	31 c0                	xor    eax,eax
c00243b9:	5a                   	pop    edx
c00243ba:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243bf:	0f 94 c0             	sete   al
c00243c2:	50                   	push   eax
c00243c3:	53                   	push   ebx
c00243c4:	e8 89 fb ff ff       	call   c0023f52 <ATA::flush(bool)>
c00243c9:	c7 04 24 ba c5 02 c0 	mov    DWORD PTR [esp],0xc002c5ba
c00243d0:	e8 64 e4 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00243d5:	83 c4 10             	add    esp,0x10
c00243d8:	83 c4 2c             	add    esp,0x2c
c00243db:	89 f8                	mov    eax,edi
c00243dd:	5b                   	pop    ebx
c00243de:	5e                   	pop    esi
c00243df:	5f                   	pop    edi
c00243e0:	5d                   	pop    ebp
c00243e1:	c3                   	ret    

c00243e2 <ATA::read(unsigned long long, int, void*)>:
c00243e2:	57                   	push   edi
c00243e3:	b8 04 00 00 00       	mov    eax,0x4
c00243e8:	56                   	push   esi
c00243e9:	53                   	push   ebx
c00243ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00243f2:	8d 7a ff             	lea    edi,[edx-0x1]
c00243f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00243f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00243fd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024403:	77 25                	ja     c002442a <ATA::read(unsigned long long, int, void*)+0x48>
c0024405:	b8 06 00 00 00       	mov    eax,0x6
c002440a:	85 f6                	test   esi,esi
c002440c:	74 1c                	je     c002442a <ATA::read(unsigned long long, int, void*)+0x48>
c002440e:	50                   	push   eax
c002440f:	50                   	push   eax
c0024410:	6a 00                	push   0x0
c0024412:	56                   	push   esi
c0024413:	52                   	push   edx
c0024414:	53                   	push   ebx
c0024415:	51                   	push   ecx
c0024416:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002441a:	e8 cd fb ff ff       	call   c0023fec <ATA::access(unsigned long long, int, void*, bool)>
c002441f:	83 c4 20             	add    esp,0x20
c0024422:	85 c0                	test   eax,eax
c0024424:	0f 95 c0             	setne  al
c0024427:	0f b6 c0             	movzx  eax,al
c002442a:	5b                   	pop    ebx
c002442b:	5e                   	pop    esi
c002442c:	5f                   	pop    edi
c002442d:	c3                   	ret    

c002442e <ATA::write(unsigned long long, int, void*)>:
c002442e:	55                   	push   ebp
c002442f:	57                   	push   edi
c0024430:	56                   	push   esi
c0024431:	53                   	push   ebx
c0024432:	83 ec 18             	sub    esp,0x18
c0024435:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024439:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002443d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024441:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024445:	68 bd c5 02 c0       	push   0xc002c5bd
c002444a:	e8 ea e3 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c002444f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024452:	83 c4 10             	add    esp,0x10
c0024455:	b8 04 00 00 00       	mov    eax,0x4
c002445a:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024460:	77 25                	ja     c0024487 <ATA::write(unsigned long long, int, void*)+0x59>
c0024462:	b8 06 00 00 00       	mov    eax,0x6
c0024467:	85 f6                	test   esi,esi
c0024469:	74 1c                	je     c0024487 <ATA::write(unsigned long long, int, void*)+0x59>
c002446b:	50                   	push   eax
c002446c:	50                   	push   eax
c002446d:	6a 01                	push   0x1
c002446f:	56                   	push   esi
c0024470:	53                   	push   ebx
c0024471:	55                   	push   ebp
c0024472:	57                   	push   edi
c0024473:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024477:	e8 70 fb ff ff       	call   c0023fec <ATA::access(unsigned long long, int, void*, bool)>
c002447c:	83 c4 20             	add    esp,0x20
c002447f:	85 c0                	test   eax,eax
c0024481:	0f 95 c0             	setne  al
c0024484:	0f b6 c0             	movzx  eax,al
c0024487:	83 c4 0c             	add    esp,0xc
c002448a:	5b                   	pop    ebx
c002448b:	5e                   	pop    esi
c002448c:	5f                   	pop    edi
c002448d:	5d                   	pop    ebp
c002448e:	c3                   	ret    
c002448f:	90                   	nop

c0024490 <ATA::detectCHS()>:
c0024490:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024494:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002449a:	c1 e0 06             	shl    eax,0x6
c002449d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00244a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244ad:	c7 44 24 04 c9 c5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c5c9
c00244b5:	e9 29 5b ff ff       	jmp    c0019fe3 <Krnl::panic(char const*)>

c00244ba <ATA::open(int, int, void*)>:
c00244ba:	53                   	push   ebx
c00244bb:	83 ec 08             	sub    esp,0x8
c00244be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244d6:	c1 e0 06             	shl    eax,0x6
c00244d9:	01 d0                	add    eax,edx
c00244db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024506:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002450d:	75 0c                	jne    c002451b <ATA::open(int, int, void*)+0x61>
c002450f:	83 ec 0c             	sub    esp,0xc
c0024512:	53                   	push   ebx
c0024513:	e8 78 ff ff ff       	call   c0024490 <ATA::detectCHS()>
c0024518:	83 c4 10             	add    esp,0x10
c002451b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024521:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024527:	c1 e0 06             	shl    eax,0x6
c002452a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024531:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002453b:	d1 e8                	shr    eax,1
c002453d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024543:	6a 04                	push   0x4
c0024545:	6a 0c                	push   0xc
c0024547:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002454e:	50                   	push   eax
c002454f:	52                   	push   edx
c0024550:	e8 7d eb ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024555:	90                   	nop
c0024556:	90                   	nop
c0024557:	6a 00                	push   0x0
c0024559:	6a 0c                	push   0xc
c002455b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024562:	50                   	push   eax
c0024563:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024569:	e8 64 eb ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002456e:	83 c4 14             	add    esp,0x14
c0024571:	53                   	push   ebx
c0024572:	e8 99 fb fe ff       	call   c0014110 <PhysicalDisk::startCache()>
c0024577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002457a:	e8 13 1e ff ff       	call   c0016392 <createPartitionsForDisk(PhysicalDisk*)>
c002457f:	31 c0                	xor    eax,eax
c0024581:	83 c4 18             	add    esp,0x18
c0024584:	5b                   	pop    ebx
c0024585:	c3                   	ret    

c0024586 <ATAPI::write(unsigned long long, int, void*)>:
c0024586:	b8 03 00 00 00       	mov    eax,0x3
c002458b:	c3                   	ret    

c002458c <ATAPI::close(int, int, void*)>:
c002458c:	83 ec 0c             	sub    esp,0xc
c002458f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024593:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024599:	85 c0                	test   eax,eax
c002459b:	74 0c                	je     c00245a9 <ATAPI::close(int, int, void*)+0x1d>
c002459d:	83 ec 0c             	sub    esp,0xc
c00245a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00245a2:	50                   	push   eax
c00245a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	31 c0                	xor    eax,eax
c00245ab:	83 c4 0c             	add    esp,0xc
c00245ae:	c3                   	ret    
c00245af:	90                   	nop

c00245b0 <ATAPI::ATAPI()>:
c00245b0:	83 ec 0c             	sub    esp,0xc
c00245b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b7:	83 ec 04             	sub    esp,0x4
c00245ba:	68 00 08 00 00       	push   0x800
c00245bf:	68 01 c7 02 c0       	push   0xc002c701
c00245c4:	50                   	push   eax
c00245c5:	e8 de fa fe ff       	call   c00140a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245ca:	83 c4 10             	add    esp,0x10
c00245cd:	ba 1c c6 02 c0       	mov    edx,0xc002c61c
c00245d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d6:	89 10                	mov    DWORD PTR [eax],edx
c00245d8:	90                   	nop
c00245d9:	83 c4 0c             	add    esp,0xc
c00245dc:	c3                   	ret    
c00245dd:	90                   	nop

c00245de <ATAPI::readyForCommand()>:
c00245de:	56                   	push   esi
c00245df:	53                   	push   ebx
c00245e0:	31 db                	xor    ebx,ebx
c00245e2:	50                   	push   eax
c00245e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245e7:	50                   	push   eax
c00245e8:	6a 0c                	push   0xc
c00245ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245f1:	50                   	push   eax
c00245f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245f8:	e8 95 eb ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00245fd:	83 c4 10             	add    esp,0x10
c0024600:	a8 88                	test   al,0x88
c0024602:	74 23                	je     c0024627 <ATAPI::readyForCommand()+0x49>
c0024604:	43                   	inc    ebx
c0024605:	83 fb 63             	cmp    ebx,0x63
c0024608:	7e dd                	jle    c00245e7 <ATAPI::readyForCommand()+0x9>
c002460a:	51                   	push   ecx
c002460b:	51                   	push   ecx
c002460c:	6a 00                	push   0x0
c002460e:	68 40 42 0f 00       	push   0xf4240
c0024613:	e8 37 98 ff ff       	call   c001de4f <nanoSleep(unsigned long long)>
c0024618:	83 c4 10             	add    esp,0x10
c002461b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024621:	75 c4                	jne    c00245e7 <ATAPI::readyForCommand()+0x9>
c0024623:	31 c0                	xor    eax,eax
c0024625:	eb 02                	jmp    c0024629 <ATAPI::readyForCommand()+0x4b>
c0024627:	b0 01                	mov    al,0x1
c0024629:	5a                   	pop    edx
c002462a:	5b                   	pop    ebx
c002462b:	5e                   	pop    esi
c002462c:	c3                   	ret    
c002462d:	90                   	nop

c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002462e:	55                   	push   ebp
c002462f:	57                   	push   edi
c0024630:	56                   	push   esi
c0024631:	53                   	push   ebx
c0024632:	83 ec 20             	sub    esp,0x20
c0024635:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024639:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002463d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024641:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024645:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024649:	6a 01                	push   0x1
c002464b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024652:	50                   	push   eax
c0024653:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024659:	e8 80 ec ff ff       	call   c00232de <IDE::enableIRQs(unsigned char, bool)>
c002465e:	5e                   	pop    esi
c002465f:	58                   	pop    eax
c0024660:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024667:	50                   	push   eax
c0024668:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466e:	e8 39 ea ff ff       	call   c00230ac <IDE::prepareInterrupt(unsigned char)>
c0024673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024676:	e8 63 ff ff ff       	call   c00245de <ATAPI::readyForCommand()>
c002467b:	83 c4 10             	add    esp,0x10
c002467e:	84 c0                	test   al,al
c0024680:	75 0a                	jne    c002468c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024682:	bb 01 00 00 00       	mov    ebx,0x1
c0024687:	e9 57 02 00 00       	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002468c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024692:	c1 e0 04             	shl    eax,0x4
c0024695:	0f b6 c0             	movzx  eax,al
c0024698:	50                   	push   eax
c0024699:	6a 06                	push   0x6
c002469b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a2:	50                   	push   eax
c00246a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a9:	e8 24 ea ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ae:	6a 00                	push   0x0
c00246b0:	6a 01                	push   0x1
c00246b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b9:	50                   	push   eax
c00246ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c0:	e8 0d ea ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246c5:	83 c4 20             	add    esp,0x20
c00246c8:	0f b6 c3             	movzx  eax,bl
c00246cb:	0f b6 df             	movzx  ebx,bh
c00246ce:	50                   	push   eax
c00246cf:	6a 04                	push   0x4
c00246d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d8:	50                   	push   eax
c00246d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246df:	e8 ee e9 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e4:	53                   	push   ebx
c00246e5:	6a 05                	push   0x5
c00246e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ee:	50                   	push   eax
c00246ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f5:	e8 d8 e9 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246fa:	83 c4 20             	add    esp,0x20
c00246fd:	68 a0 00 00 00       	push   0xa0
c0024702:	6a 07                	push   0x7
c0024704:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470b:	50                   	push   eax
c002470c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024712:	e8 bb e9 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024717:	83 c4 0c             	add    esp,0xc
c002471a:	6a 01                	push   0x1
c002471c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024723:	50                   	push   eax
c0024724:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472a:	e8 45 f4 ff ff       	call   c0023b74 <IDE::polling(unsigned char, unsigned int)>
c002472f:	83 c4 10             	add    esp,0x10
c0024732:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024738:	84 c0                	test   al,al
c002473a:	74 23                	je     c002475f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002473c:	0f b6 d8             	movzx  ebx,al
c002473f:	0f b6 d2             	movzx  edx,dl
c0024742:	53                   	push   ebx
c0024743:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002474a:	50                   	push   eax
c002474b:	52                   	push   edx
c002474c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024752:	e8 6d f3 ff ff       	call   c0023ac4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024757:	83 c4 10             	add    esp,0x10
c002475a:	e9 84 01 00 00       	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002475f:	0f b6 d2             	movzx  edx,dl
c0024762:	53                   	push   ebx
c0024763:	53                   	push   ebx
c0024764:	52                   	push   edx
c0024765:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476b:	e8 50 e9 ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c0024770:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024774:	b9 06 00 00 00       	mov    ecx,0x6
c0024779:	89 c2                	mov    edx,eax
c002477b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002477e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024782:	83 c4 10             	add    esp,0x10
c0024785:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002478b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024792:	85 db                	test   ebx,ebx
c0024794:	0f 84 ec 00 00 00    	je     c0024886 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002479a:	51                   	push   ecx
c002479b:	51                   	push   ecx
c002479c:	52                   	push   edx
c002479d:	50                   	push   eax
c002479e:	e8 9d ea ff ff       	call   c0023240 <IDE::waitInterrupt(unsigned char)>
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	84 c0                	test   al,al
c00247a8:	0f 84 d4 fe ff ff    	je     c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247ae:	56                   	push   esi
c00247af:	56                   	push   esi
c00247b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b7:	50                   	push   eax
c00247b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247be:	e8 e9 e8 ff ff       	call   c00230ac <IDE::prepareInterrupt(unsigned char)>
c00247c3:	83 c4 0c             	add    esp,0xc
c00247c6:	6a 04                	push   0x4
c00247c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247cf:	50                   	push   eax
c00247d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d6:	e8 b7 e9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00247db:	83 c4 0c             	add    esp,0xc
c00247de:	89 c6                	mov    esi,eax
c00247e0:	6a 05                	push   0x5
c00247e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e9:	50                   	push   eax
c00247ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f0:	e8 9d e9 ff ff       	call   c0023192 <IDE::read(unsigned char, unsigned char)>
c00247f5:	89 f1                	mov    ecx,esi
c00247f7:	0f b6 c0             	movzx  eax,al
c00247fa:	0f b6 f1             	movzx  esi,cl
c00247fd:	c1 e0 08             	shl    eax,0x8
c0024800:	09 c6                	or     esi,eax
c0024802:	d1 fe                	sar    esi,1
c0024804:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024808:	83 c4 10             	add    esp,0x10
c002480b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024810:	74 41                	je     c0024853 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024812:	31 c9                	xor    ecx,ecx
c0024814:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002481a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024821:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024825:	75 0a                	jne    c0024831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024827:	01 c9                	add    ecx,ecx
c0024829:	01 cd                	add    ebp,ecx
c002482b:	4b                   	dec    ebx
c002482c:	e9 54 ff ff ff       	jmp    c0024785 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024831:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024836:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002483a:	51                   	push   ecx
c002483b:	51                   	push   ecx
c002483c:	52                   	push   edx
c002483d:	50                   	push   eax
c002483e:	e8 7d e8 ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c0024843:	89 c2                	mov    edx,eax
c0024845:	89 f0                	mov    eax,esi
c0024847:	66 ef                	out    dx,ax
c0024849:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002484d:	83 c4 10             	add    esp,0x10
c0024850:	41                   	inc    ecx
c0024851:	eb c1                	jmp    c0024814 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024853:	31 f6                	xor    esi,esi
c0024855:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002485b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024862:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024866:	75 06                	jne    c002486e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024868:	01 f6                	add    esi,esi
c002486a:	01 f5                	add    ebp,esi
c002486c:	eb bd                	jmp    c002482b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002486e:	51                   	push   ecx
c002486f:	51                   	push   ecx
c0024870:	52                   	push   edx
c0024871:	50                   	push   eax
c0024872:	e8 49 e8 ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c0024877:	89 c2                	mov    edx,eax
c0024879:	66 ed                	in     ax,dx
c002487b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024880:	83 c4 10             	add    esp,0x10
c0024883:	46                   	inc    esi
c0024884:	eb cf                	jmp    c0024855 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024886:	51                   	push   ecx
c0024887:	51                   	push   ecx
c0024888:	52                   	push   edx
c0024889:	50                   	push   eax
c002488a:	e8 b1 e9 ff ff       	call   c0023240 <IDE::waitInterrupt(unsigned char)>
c002488f:	83 c4 10             	add    esp,0x10
c0024892:	84 c0                	test   al,al
c0024894:	0f 84 e8 fd ff ff    	je     c0024682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002489a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002489f:	52                   	push   edx
c00248a0:	52                   	push   edx
c00248a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a8:	50                   	push   eax
c00248a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248af:	e8 f8 e7 ff ff       	call   c00230ac <IDE::prepareInterrupt(unsigned char)>
c00248b4:	83 c4 10             	add    esp,0x10
c00248b7:	50                   	push   eax
c00248b8:	50                   	push   eax
c00248b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c0:	50                   	push   eax
c00248c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248c7:	e8 f4 e7 ff ff       	call   c00230c0 <IDE::getBase(unsigned char)>
c00248cc:	8d 50 07             	lea    edx,[eax+0x7]
c00248cf:	ec                   	in     al,dx
c00248d0:	83 c4 10             	add    esp,0x10
c00248d3:	a8 88                	test   al,0x88
c00248d5:	74 0a                	je     c00248e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248d7:	4b                   	dec    ebx
c00248d8:	75 dd                	jne    c00248b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248da:	bb 02 00 00 00       	mov    ebx,0x2
c00248df:	eb 02                	jmp    c00248e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248e1:	31 db                	xor    ebx,ebx
c00248e3:	83 c4 1c             	add    esp,0x1c
c00248e6:	89 d8                	mov    eax,ebx
c00248e8:	5b                   	pop    ebx
c00248e9:	5e                   	pop    esi
c00248ea:	5f                   	pop    edi
c00248eb:	5d                   	pop    ebp
c00248ec:	c3                   	ret    
c00248ed:	90                   	nop

c00248ee <ATAPI::diskRemoved()>:
c00248ee:	83 ec 18             	sub    esp,0x18
c00248f1:	68 0d c7 02 c0       	push   0xc002c70d
c00248f6:	e8 3e df fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00248fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248ff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024906:	83 c4 1c             	add    esp,0x1c
c0024909:	c3                   	ret    

c002490a <ATAPI::eject()>:
c002490a:	57                   	push   edi
c002490b:	b9 03 00 00 00       	mov    ecx,0x3
c0024910:	53                   	push   ebx
c0024911:	83 ec 14             	sub    esp,0x14
c0024914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024918:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002491c:	fc                   	cld    
c002491d:	31 c0                	xor    eax,eax
c002491f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024921:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024926:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002492b:	50                   	push   eax
c002492c:	50                   	push   eax
c002492d:	6a 00                	push   0x0
c002492f:	6a 00                	push   0x0
c0024931:	6a 00                	push   0x0
c0024933:	6a 02                	push   0x2
c0024935:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024939:	50                   	push   eax
c002493a:	53                   	push   ebx
c002493b:	e8 ee fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024940:	83 c4 14             	add    esp,0x14
c0024943:	53                   	push   ebx
c0024944:	e8 a5 ff ff ff       	call   c00248ee <ATAPI::diskRemoved()>
c0024949:	83 c4 24             	add    esp,0x24
c002494c:	31 c0                	xor    eax,eax
c002494e:	5b                   	pop    ebx
c002494f:	5f                   	pop    edi
c0024950:	c3                   	ret    
c0024951:	90                   	nop

c0024952 <ATAPI::diskInserted()>:
c0024952:	53                   	push   ebx
c0024953:	83 ec 14             	sub    esp,0x14
c0024956:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002495a:	68 24 c7 02 c0       	push   0xc002c724
c002495f:	e8 d5 de fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0024964:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002496b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002496e:	e8 9d f7 fe ff       	call   c0014110 <PhysicalDisk::startCache()>
c0024973:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024977:	83 c4 18             	add    esp,0x18
c002497a:	5b                   	pop    ebx
c002497b:	e9 12 1a ff ff       	jmp    c0016392 <createPartitionsForDisk(PhysicalDisk*)>

c0024980 <ATAPI::detectMedia()>:
c0024980:	56                   	push   esi
c0024981:	53                   	push   ebx
c0024982:	83 ec 28             	sub    esp,0x28
c0024985:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024989:	6a 0c                	push   0xc
c002498b:	6a 00                	push   0x0
c002498d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024991:	56                   	push   esi
c0024992:	e8 b9 bd fd ff       	call   c0000750 <memset>
c0024997:	58                   	pop    eax
c0024998:	5a                   	pop    edx
c0024999:	6a 00                	push   0x0
c002499b:	6a 00                	push   0x0
c002499d:	6a 00                	push   0x0
c002499f:	6a 00                	push   0x0
c00249a1:	56                   	push   esi
c00249a2:	53                   	push   ebx
c00249a3:	e8 86 fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a8:	83 c4 1c             	add    esp,0x1c
c00249ab:	6a 0c                	push   0xc
c00249ad:	6a 00                	push   0x0
c00249af:	56                   	push   esi
c00249b0:	e8 9b bd fd ff       	call   c0000750 <memset>
c00249b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249bf:	59                   	pop    ecx
c00249c0:	58                   	pop    eax
c00249c1:	6a 01                	push   0x1
c00249c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249c7:	50                   	push   eax
c00249c8:	6a 00                	push   0x0
c00249ca:	6a 12                	push   0x12
c00249cc:	56                   	push   esi
c00249cd:	53                   	push   ebx
c00249ce:	e8 5b fc ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249d7:	83 c4 20             	add    esp,0x20
c00249da:	83 e0 7f             	and    eax,0x7f
c00249dd:	3c 70                	cmp    al,0x70
c00249df:	74 15                	je     c00249f6 <ATAPI::detectMedia()+0x76>
c00249e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249e8:	75 0c                	jne    c00249f6 <ATAPI::detectMedia()+0x76>
c00249ea:	83 ec 0c             	sub    esp,0xc
c00249ed:	53                   	push   ebx
c00249ee:	e8 5f ff ff ff       	call   c0024952 <ATAPI::diskInserted()>
c00249f3:	83 c4 10             	add    esp,0x10
c00249f6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249fa:	83 e0 0f             	and    eax,0xf
c00249fd:	3c 02                	cmp    al,0x2
c00249ff:	75 1b                	jne    c0024a1c <ATAPI::detectMedia()+0x9c>
c0024a01:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a06:	75 2d                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a08:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a0f:	74 24                	je     c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a11:	83 ec 0c             	sub    esp,0xc
c0024a14:	53                   	push   ebx
c0024a15:	e8 d4 fe ff ff       	call   c00248ee <ATAPI::diskRemoved()>
c0024a1a:	eb 16                	jmp    c0024a32 <ATAPI::detectMedia()+0xb2>
c0024a1c:	84 c0                	test   al,al
c0024a1e:	75 15                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a20:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a27:	75 0c                	jne    c0024a35 <ATAPI::detectMedia()+0xb5>
c0024a29:	83 ec 0c             	sub    esp,0xc
c0024a2c:	53                   	push   ebx
c0024a2d:	e8 20 ff ff ff       	call   c0024952 <ATAPI::diskInserted()>
c0024a32:	83 c4 10             	add    esp,0x10
c0024a35:	83 c4 24             	add    esp,0x24
c0024a38:	5b                   	pop    ebx
c0024a39:	5e                   	pop    esi
c0024a3a:	c3                   	ret    
c0024a3b:	90                   	nop

c0024a3c <ATAPI::open(int, int, void*)>:
c0024a3c:	53                   	push   ebx
c0024a3d:	83 ec 08             	sub    esp,0x8
c0024a40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a4c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a52:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a58:	c1 e0 06             	shl    eax,0x6
c0024a5b:	01 d0                	add    eax,edx
c0024a5d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a64:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a6a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a71:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a7b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a81:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a88:	6a 04                	push   0x4
c0024a8a:	6a 0c                	push   0xc
c0024a8c:	51                   	push   ecx
c0024a8d:	52                   	push   edx
c0024a8e:	e8 3f e6 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a93:	90                   	nop
c0024a94:	90                   	nop
c0024a95:	6a 00                	push   0x0
c0024a97:	6a 0c                	push   0xc
c0024a99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aa0:	50                   	push   eax
c0024aa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa7:	e8 26 e6 ff ff       	call   c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024ab3:	83 c4 14             	add    esp,0x14
c0024ab6:	53                   	push   ebx
c0024ab7:	e8 c4 fe ff ff       	call   c0024980 <ATAPI::detectMedia()>
c0024abc:	31 c0                	xor    eax,eax
c0024abe:	83 c4 18             	add    esp,0x18
c0024ac1:	5b                   	pop    ebx
c0024ac2:	c3                   	ret    
c0024ac3:	90                   	nop

c0024ac4 <ATAPI::read(unsigned long long, int, void*)>:
c0024ac4:	55                   	push   ebp
c0024ac5:	57                   	push   edi
c0024ac6:	56                   	push   esi
c0024ac7:	53                   	push   ebx
c0024ac8:	83 ec 1c             	sub    esp,0x1c
c0024acb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024acf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ad3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024ad7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ade:	74 41                	je     c0024b21 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024ae0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ae4:	b9 03 00 00 00       	mov    ecx,0x3
c0024ae9:	fc                   	cld    
c0024aea:	31 c0                	xor    eax,eax
c0024aec:	86 fb                	xchg   bl,bh
c0024aee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024af0:	c1 c3 10             	rol    ebx,0x10
c0024af3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024af8:	89 e8                	mov    eax,ebp
c0024afa:	86 fb                	xchg   bl,bh
c0024afc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b00:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b04:	50                   	push   eax
c0024b05:	50                   	push   eax
c0024b06:	55                   	push   ebp
c0024b07:	c1 e5 0b             	shl    ebp,0xb
c0024b0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b0e:	6a 00                	push   0x0
c0024b10:	55                   	push   ebp
c0024b11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b15:	50                   	push   eax
c0024b16:	56                   	push   esi
c0024b17:	e8 12 fb ff ff       	call   c002462e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b1c:	83 c4 20             	add    esp,0x20
c0024b1f:	eb 1a                	jmp    c0024b3b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b21:	83 ec 0c             	sub    esp,0xc
c0024b24:	56                   	push   esi
c0024b25:	e8 56 fe ff ff       	call   c0024980 <ATAPI::detectMedia()>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b34:	75 aa                	jne    c0024ae0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b36:	b8 02 00 00 00       	mov    eax,0x2
c0024b3b:	83 c4 1c             	add    esp,0x1c
c0024b3e:	5b                   	pop    ebx
c0024b3f:	5e                   	pop    esi
c0024b40:	5f                   	pop    edi
c0024b41:	5d                   	pop    ebp
c0024b42:	c3                   	ret    
c0024b43:	90                   	nop

c0024b44 <SATA::close(int, int, void*)>:
c0024b44:	83 ec 0c             	sub    esp,0xc
c0024b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b51:	85 c0                	test   eax,eax
c0024b53:	74 0c                	je     c0024b61 <SATA::close(int, int, void*)+0x1d>
c0024b55:	83 ec 0c             	sub    esp,0xc
c0024b58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b5a:	50                   	push   eax
c0024b5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b5e:	83 c4 10             	add    esp,0x10
c0024b61:	31 c0                	xor    eax,eax
c0024b63:	83 c4 0c             	add    esp,0xc
c0024b66:	c3                   	ret    
c0024b67:	90                   	nop

c0024b68 <SATA::powerSaving(PowerSavingLevel)>:
c0024b68:	c3                   	ret    
c0024b69:	90                   	nop

c0024b6a <SATA::open(int, int, void*)>:
c0024b6a:	56                   	push   esi
c0024b6b:	53                   	push   ebx
c0024b6c:	50                   	push   eax
c0024b6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b75:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b7f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b85:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b9d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ba3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024baa:	e8 e6 ad fe ff       	call   c000f995 <Phys::allocatePage()>
c0024baf:	89 c6                	mov    esi,eax
c0024bb1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bb7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bbd:	e8 d3 ad fe ff       	call   c000f995 <Phys::allocatePage()>
c0024bc2:	39 c6                	cmp    esi,eax
c0024bc4:	74 10                	je     c0024bd6 <SATA::open(int, int, void*)+0x6c>
c0024bc6:	83 ec 0c             	sub    esp,0xc
c0024bc9:	68 4c c6 02 c0       	push   0xc002c64c
c0024bce:	e8 10 54 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0024bd3:	83 c4 10             	add    esp,0x10
c0024bd6:	83 ec 0c             	sub    esp,0xc
c0024bd9:	6a 02                	push   0x2
c0024bdb:	e8 3f c6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0024be0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024be6:	6a 03                	push   0x3
c0024be8:	50                   	push   eax
c0024be9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024bef:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c0024bf5:	e8 78 ce fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bfa:	83 c4 14             	add    esp,0x14
c0024bfd:	53                   	push   ebx
c0024bfe:	e8 0d f5 fe ff       	call   c0014110 <PhysicalDisk::startCache()>
c0024c03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c06:	e8 87 17 ff ff       	call   c0016392 <createPartitionsForDisk(PhysicalDisk*)>
c0024c0b:	83 c4 14             	add    esp,0x14
c0024c0e:	31 c0                	xor    eax,eax
c0024c10:	5b                   	pop    ebx
c0024c11:	5e                   	pop    esi
c0024c12:	c3                   	ret    
c0024c13:	90                   	nop

c0024c14 <SATA::SATA()>:
c0024c14:	83 ec 0c             	sub    esp,0xc
c0024c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c1b:	83 ec 04             	sub    esp,0x4
c0024c1e:	68 00 02 00 00       	push   0x200
c0024c23:	68 60 c6 02 c0       	push   0xc002c660
c0024c28:	50                   	push   eax
c0024c29:	e8 7a f4 fe ff       	call   c00140a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c2e:	83 c4 10             	add    esp,0x10
c0024c31:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0024c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c3a:	89 10                	mov    DWORD PTR [eax],edx
c0024c3c:	90                   	nop
c0024c3d:	83 c4 0c             	add    esp,0xc
c0024c40:	c3                   	ret    
c0024c41:	90                   	nop

c0024c42 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c42:	55                   	push   ebp
c0024c43:	57                   	push   edi
c0024c44:	56                   	push   esi
c0024c45:	53                   	push   ebx
c0024c46:	83 ec 2c             	sub    esp,0x2c
c0024c49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024c51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024c55:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024c59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c5d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c66:	7e 10                	jle    c0024c78 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c68:	83 ec 0c             	sub    esp,0xc
c0024c6b:	68 70 c6 02 c0       	push   0xc002c670
c0024c70:	e8 6e 53 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0024c75:	83 c4 10             	add    esp,0x10
c0024c78:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c7e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024c84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c8e:	89 d0                	mov    eax,edx
c0024c90:	c1 e0 07             	shl    eax,0x7
c0024c93:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024c97:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ca1:	51                   	push   ecx
c0024ca2:	8d 42 02             	lea    eax,[edx+0x2]
c0024ca5:	51                   	push   ecx
c0024ca6:	c1 e0 07             	shl    eax,0x7
c0024ca9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024cad:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024cb1:	50                   	push   eax
c0024cb2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024cb8:	e8 97 ef ff ff       	call   c0023c54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cbd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024cc1:	83 c4 10             	add    esp,0x10
c0024cc4:	b8 01 00 00 00       	mov    eax,0x1
c0024cc9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024cce:	0f 84 cb 01 00 00    	je     c0024e9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cdc:	c1 e0 09             	shl    eax,0x9
c0024cdf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ce4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ce8:	74 0e                	je     c0024cf8 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024cea:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024cf0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024cf4:	89 c1                	mov    ecx,eax
c0024cf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024cf8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024cfc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024d02:	8d 42 02             	lea    eax,[edx+0x2]
c0024d05:	c1 e0 07             	shl    eax,0x7
c0024d08:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d0e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d14:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d1e:	c1 e1 05             	shl    ecx,0x5
c0024d21:	01 c8                	add    eax,ecx
c0024d23:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024d27:	83 e1 01             	and    ecx,0x1
c0024d2a:	89 ce                	mov    esi,ecx
c0024d2c:	8a 08                	mov    cl,BYTE PTR [eax]
c0024d2e:	c1 e6 06             	shl    esi,0x6
c0024d31:	83 e1 bf             	and    ecx,0xffffffbf
c0024d34:	09 f1                	or     ecx,esi
c0024d36:	88 08                	mov    BYTE PTR [eax],cl
c0024d38:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d3a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d40:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d46:	89 08                	mov    DWORD PTR [eax],ecx
c0024d48:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024d4e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024d54:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024d5a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024d5d:	50                   	push   eax
c0024d5e:	68 90 00 00 00       	push   0x90
c0024d63:	6a 00                	push   0x0
c0024d65:	56                   	push   esi
c0024d66:	e8 e5 b9 fd ff       	call   c0000750 <memset>
c0024d6b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024d71:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024d75:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024d7b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024d7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024d83:	83 c4 10             	add    esp,0x10
c0024d86:	48                   	dec    eax
c0024d87:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024d8c:	89 c1                	mov    ecx,eax
c0024d8e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024d94:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d99:	09 c8                	or     eax,ecx
c0024d9b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024da1:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024da4:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024dab:	66 25 00 7f          	and    ax,0x7f00
c0024daf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024db3:	66 0d 27 80          	or     ax,0x8027
c0024db7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024dbc:	66 89 06             	mov    WORD PTR [esi],ax
c0024dbf:	19 c0                	sbb    eax,eax
c0024dc1:	83 e0 f0             	and    eax,0xfffffff0
c0024dc4:	83 c0 35             	add    eax,0x35
c0024dc7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024dca:	89 e8                	mov    eax,ebp
c0024dcc:	c1 e8 10             	shr    eax,0x10
c0024dcf:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024dd2:	89 e8                	mov    eax,ebp
c0024dd4:	c1 e8 18             	shr    eax,0x18
c0024dd7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024dda:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024dde:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024de1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024de5:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024de8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dec:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024df0:	89 d6                	mov    esi,edx
c0024df2:	31 c0                	xor    eax,eax
c0024df4:	c1 e6 07             	shl    esi,0x7
c0024df7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024dfb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024e01:	80 e1 88             	and    cl,0x88
c0024e04:	74 0a                	je     c0024e10 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024e06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e0b:	74 0a                	je     c0024e17 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024e0d:	40                   	inc    eax
c0024e0e:	eb eb                	jmp    c0024dfb <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024e10:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e15:	75 0a                	jne    c0024e21 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024e17:	83 ec 0c             	sub    esp,0xc
c0024e1a:	68 a9 c6 02 c0       	push   0xc002c6a9
c0024e1f:	eb 56                	jmp    c0024e77 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024e21:	b8 01 00 00 00       	mov    eax,0x1
c0024e26:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e2a:	c1 e2 07             	shl    edx,0x7
c0024e2d:	d3 e0                	shl    eax,cl
c0024e2f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024e33:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024e39:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024e3f:	85 c8                	test   eax,ecx
c0024e41:	74 20                	je     c0024e63 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024e43:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024e49:	0f ba e1 1e          	bt     ecx,0x1e
c0024e4d:	73 ea                	jae    c0024e39 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024e4f:	83 ec 0c             	sub    esp,0xc
c0024e52:	68 b7 c6 02 c0       	push   0xc002c6b7
c0024e57:	e8 87 51 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0024e5c:	83 c4 10             	add    esp,0x10
c0024e5f:	31 c0                	xor    eax,eax
c0024e61:	eb 3c                	jmp    c0024e9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e63:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024e69:	0f ba e0 1e          	bt     eax,0x1e
c0024e6d:	73 17                	jae    c0024e86 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024e6f:	83 ec 0c             	sub    esp,0xc
c0024e72:	68 b7 c6 02 c0       	push   0xc002c6b7
c0024e77:	e8 67 51 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	b8 01 00 00 00       	mov    eax,0x1
c0024e84:	eb 19                	jmp    c0024e9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e86:	31 c0                	xor    eax,eax
c0024e88:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024e8d:	75 10                	jne    c0024e9f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024e8f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024e95:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024e99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e9f:	83 c4 2c             	add    esp,0x2c
c0024ea2:	5b                   	pop    ebx
c0024ea3:	5e                   	pop    esi
c0024ea4:	5f                   	pop    edi
c0024ea5:	5d                   	pop    ebp
c0024ea6:	c3                   	ret    
c0024ea7:	90                   	nop

c0024ea8 <SATA::read(unsigned long long, int, void*)>:
c0024ea8:	57                   	push   edi
c0024ea9:	b8 04 00 00 00       	mov    eax,0x4
c0024eae:	56                   	push   esi
c0024eaf:	53                   	push   ebx
c0024eb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024eb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024eb8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ebb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ebf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ec3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ec9:	77 25                	ja     c0024ef0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ecb:	b8 06 00 00 00       	mov    eax,0x6
c0024ed0:	85 f6                	test   esi,esi
c0024ed2:	74 1c                	je     c0024ef0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ed4:	50                   	push   eax
c0024ed5:	50                   	push   eax
c0024ed6:	6a 00                	push   0x0
c0024ed8:	56                   	push   esi
c0024ed9:	52                   	push   edx
c0024eda:	53                   	push   ebx
c0024edb:	51                   	push   ecx
c0024edc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ee0:	e8 5d fd ff ff       	call   c0024c42 <SATA::access(unsigned long long, int, void*, bool)>
c0024ee5:	83 c4 20             	add    esp,0x20
c0024ee8:	85 c0                	test   eax,eax
c0024eea:	0f 95 c0             	setne  al
c0024eed:	0f b6 c0             	movzx  eax,al
c0024ef0:	5b                   	pop    ebx
c0024ef1:	5e                   	pop    esi
c0024ef2:	5f                   	pop    edi
c0024ef3:	c3                   	ret    

c0024ef4 <SATA::write(unsigned long long, int, void*)>:
c0024ef4:	55                   	push   ebp
c0024ef5:	b8 04 00 00 00       	mov    eax,0x4
c0024efa:	57                   	push   edi
c0024efb:	56                   	push   esi
c0024efc:	53                   	push   ebx
c0024efd:	83 ec 0c             	sub    esp,0xc
c0024f00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024f08:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024f0b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f0f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024f13:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f19:	77 3d                	ja     c0024f58 <SATA::write(unsigned long long, int, void*)+0x64>
c0024f1b:	b8 06 00 00 00       	mov    eax,0x6
c0024f20:	85 ed                	test   ebp,ebp
c0024f22:	74 34                	je     c0024f58 <SATA::write(unsigned long long, int, void*)+0x64>
c0024f24:	c1 e3 09             	shl    ebx,0x9
c0024f27:	01 eb                	add    ebx,ebp
c0024f29:	89 d6                	mov    esi,edx
c0024f2b:	89 cf                	mov    edi,ecx
c0024f2d:	83 c6 01             	add    esi,0x1
c0024f30:	83 d7 00             	adc    edi,0x0
c0024f33:	50                   	push   eax
c0024f34:	50                   	push   eax
c0024f35:	6a 01                	push   0x1
c0024f37:	55                   	push   ebp
c0024f38:	81 c5 00 02 00 00    	add    ebp,0x200
c0024f3e:	6a 01                	push   0x1
c0024f40:	51                   	push   ecx
c0024f41:	52                   	push   edx
c0024f42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f46:	e8 f7 fc ff ff       	call   c0024c42 <SATA::access(unsigned long long, int, void*, bool)>
c0024f4b:	83 c4 20             	add    esp,0x20
c0024f4e:	89 f2                	mov    edx,esi
c0024f50:	89 f9                	mov    ecx,edi
c0024f52:	39 dd                	cmp    ebp,ebx
c0024f54:	75 d3                	jne    c0024f29 <SATA::write(unsigned long long, int, void*)+0x35>
c0024f56:	31 c0                	xor    eax,eax
c0024f58:	83 c4 0c             	add    esp,0xc
c0024f5b:	5b                   	pop    ebx
c0024f5c:	5e                   	pop    esi
c0024f5d:	5f                   	pop    edi
c0024f5e:	5d                   	pop    ebp
c0024f5f:	c3                   	ret    

c0024f60 <SATAPI::write(unsigned long long, int, void*)>:
c0024f60:	b8 03 00 00 00       	mov    eax,0x3
c0024f65:	c3                   	ret    

c0024f66 <SATAPI::close(int, int, void*)>:
c0024f66:	83 ec 0c             	sub    esp,0xc
c0024f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f73:	85 c0                	test   eax,eax
c0024f75:	74 0c                	je     c0024f83 <SATAPI::close(int, int, void*)+0x1d>
c0024f77:	83 ec 0c             	sub    esp,0xc
c0024f7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f7c:	50                   	push   eax
c0024f7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f80:	83 c4 10             	add    esp,0x10
c0024f83:	31 c0                	xor    eax,eax
c0024f85:	83 c4 0c             	add    esp,0xc
c0024f88:	c3                   	ret    
c0024f89:	90                   	nop

c0024f8a <SATAPI::SATAPI()>:
c0024f8a:	83 ec 0c             	sub    esp,0xc
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	83 ec 04             	sub    esp,0x4
c0024f94:	68 00 08 00 00       	push   0x800
c0024f99:	68 00 c7 02 c0       	push   0xc002c700
c0024f9e:	50                   	push   eax
c0024f9f:	e8 04 f1 fe ff       	call   c00140a8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fa4:	83 c4 10             	add    esp,0x10
c0024fa7:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0024fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb0:	89 10                	mov    DWORD PTR [eax],edx
c0024fb2:	90                   	nop
c0024fb3:	83 c4 0c             	add    esp,0xc
c0024fb6:	c3                   	ret    
c0024fb7:	90                   	nop

c0024fb8 <SATAPI::diskRemoved()>:
c0024fb8:	83 ec 18             	sub    esp,0x18
c0024fbb:	68 0c c7 02 c0       	push   0xc002c70c
c0024fc0:	e8 74 d8 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0024fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fc9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024fd0:	83 c4 1c             	add    esp,0x1c
c0024fd3:	c3                   	ret    

c0024fd4 <SATAPI::diskInserted()>:
c0024fd4:	53                   	push   ebx
c0024fd5:	83 ec 14             	sub    esp,0x14
c0024fd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024fdc:	68 23 c7 02 c0       	push   0xc002c723
c0024fe1:	e8 53 d8 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0024fe6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024fed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ff0:	e8 1b f1 fe ff       	call   c0014110 <PhysicalDisk::startCache()>
c0024ff5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ff9:	83 c4 18             	add    esp,0x18
c0024ffc:	5b                   	pop    ebx
c0024ffd:	e9 90 13 ff ff       	jmp    c0016392 <createPartitionsForDisk(PhysicalDisk*)>

c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025002:	55                   	push   ebp
c0025003:	57                   	push   edi
c0025004:	56                   	push   esi
c0025005:	53                   	push   ebx
c0025006:	83 ec 34             	sub    esp,0x34
c0025009:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002500d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025011:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002501d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025023:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025029:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002502d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025033:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025037:	c1 e0 07             	shl    eax,0x7
c002503a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002503e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025042:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002504c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025050:	8d 58 02             	lea    ebx,[eax+0x2]
c0025053:	c1 e3 07             	shl    ebx,0x7
c0025056:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002505a:	53                   	push   ebx
c002505b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025061:	e8 ee eb ff ff       	call   c0023c54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002506a:	83 c4 10             	add    esp,0x10
c002506d:	b8 01 00 00 00       	mov    eax,0x1
c0025072:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025077:	0f 84 85 01 00 00    	je     c0025202 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002507d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025083:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025085:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002508b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025091:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025095:	c1 e1 05             	shl    ecx,0x5
c0025098:	01 c8                	add    eax,ecx
c002509a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002509c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250a2:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250a8:	89 08                	mov    DWORD PTR [eax],ecx
c00250aa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00250b0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250b6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250bc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250bf:	8d 7b 40             	lea    edi,[ebx+0x40]
c00250c2:	50                   	push   eax
c00250c3:	68 90 00 00 00       	push   0x90
c00250c8:	6a 00                	push   0x0
c00250ca:	53                   	push   ebx
c00250cb:	e8 80 b6 fd ff       	call   c0000750 <memset>
c00250d0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00250d4:	b9 0c 00 00 00       	mov    ecx,0xc
c00250d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00250db:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00250e1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00250e5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00250eb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00250ef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00250f3:	48                   	dec    eax
c00250f4:	25 ff ff 3f 00       	and    eax,0x3fffff
c00250f9:	89 c1                	mov    ecx,eax
c00250fb:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025101:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025106:	09 c8                	or     eax,ecx
c0025108:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002510e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025111:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025118:	66 25 00 7f          	and    ax,0x7f00
c002511c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025120:	66 0d 27 80          	or     ax,0x8027
c0025124:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025128:	66 89 03             	mov    WORD PTR [ebx],ax
c002512b:	89 d0                	mov    eax,edx
c002512d:	c1 ea 18             	shr    edx,0x18
c0025130:	c1 e8 10             	shr    eax,0x10
c0025133:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025136:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025139:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002513d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025144:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025147:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002514b:	83 c4 10             	add    esp,0x10
c002514e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025152:	31 c0                	xor    eax,eax
c0025154:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025158:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c002515e:	80 e2 88             	and    dl,0x88
c0025161:	74 0a                	je     c002516d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025163:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025168:	74 0a                	je     c0025174 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c002516a:	40                   	inc    eax
c002516b:	eb eb                	jmp    c0025158 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002516d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025172:	75 0f                	jne    c0025183 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025174:	83 ec 0c             	sub    esp,0xc
c0025177:	68 a9 c6 02 c0       	push   0xc002c6a9
c002517c:	e8 62 4e ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0025181:	eb 3f                	jmp    c00251c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025183:	ba 01 00 00 00       	mov    edx,0x1
c0025188:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002518c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025190:	d3 e2                	shl    edx,cl
c0025192:	c1 e0 07             	shl    eax,0x7
c0025195:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c002519b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002519f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00251a5:	85 ca                	test   edx,ecx
c00251a7:	74 23                	je     c00251cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00251a9:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00251af:	0f ba e1 1e          	bt     ecx,0x1e
c00251b3:	73 ea                	jae    c002519f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00251b5:	83 ec 0c             	sub    esp,0xc
c00251b8:	68 3b c7 02 c0       	push   0xc002c73b
c00251bd:	e8 77 d6 fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c00251c2:	83 c4 10             	add    esp,0x10
c00251c5:	b8 01 00 00 00       	mov    eax,0x1
c00251ca:	eb 36                	jmp    c0025202 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00251cc:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00251d2:	0f ba e0 1e          	bt     eax,0x1e
c00251d6:	73 0a                	jae    c00251e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	68 4e c7 02 c0       	push   0xc002c74e
c00251e0:	eb db                	jmp    c00251bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00251e2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00251e7:	74 17                	je     c0025200 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00251e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00251ee:	74 10                	je     c0025200 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00251f0:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00251f6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00251fa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00251fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025200:	31 c0                	xor    eax,eax
c0025202:	83 c4 2c             	add    esp,0x2c
c0025205:	5b                   	pop    ebx
c0025206:	5e                   	pop    esi
c0025207:	5f                   	pop    edi
c0025208:	5d                   	pop    ebp
c0025209:	c3                   	ret    

c002520a <SATAPI::eject()>:
c002520a:	57                   	push   edi
c002520b:	b9 03 00 00 00       	mov    ecx,0x3
c0025210:	53                   	push   ebx
c0025211:	83 ec 14             	sub    esp,0x14
c0025214:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025218:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002521c:	fc                   	cld    
c002521d:	31 c0                	xor    eax,eax
c002521f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025221:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025226:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002522b:	50                   	push   eax
c002522c:	6a 00                	push   0x0
c002522e:	6a 00                	push   0x0
c0025230:	6a 00                	push   0x0
c0025232:	6a 00                	push   0x0
c0025234:	6a 02                	push   0x2
c0025236:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002523a:	50                   	push   eax
c002523b:	53                   	push   ebx
c002523c:	e8 c1 fd ff ff       	call   c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025241:	83 c4 14             	add    esp,0x14
c0025244:	53                   	push   ebx
c0025245:	e8 6e fd ff ff       	call   c0024fb8 <SATAPI::diskRemoved()>
c002524a:	83 c4 24             	add    esp,0x24
c002524d:	31 c0                	xor    eax,eax
c002524f:	5b                   	pop    ebx
c0025250:	5f                   	pop    edi
c0025251:	c3                   	ret    

c0025252 <SATAPI::detectMedia()>:
c0025252:	56                   	push   esi
c0025253:	53                   	push   ebx
c0025254:	83 ec 28             	sub    esp,0x28
c0025257:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002525b:	6a 0c                	push   0xc
c002525d:	6a 00                	push   0x0
c002525f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025263:	56                   	push   esi
c0025264:	e8 e7 b4 fd ff       	call   c0000750 <memset>
c0025269:	83 c4 0c             	add    esp,0xc
c002526c:	6a 00                	push   0x0
c002526e:	6a 00                	push   0x0
c0025270:	6a 00                	push   0x0
c0025272:	6a 00                	push   0x0
c0025274:	6a 00                	push   0x0
c0025276:	56                   	push   esi
c0025277:	53                   	push   ebx
c0025278:	e8 85 fd ff ff       	call   c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002527d:	83 c4 1c             	add    esp,0x1c
c0025280:	6a 0c                	push   0xc
c0025282:	6a 00                	push   0x0
c0025284:	56                   	push   esi
c0025285:	e8 c6 b4 fd ff       	call   c0000750 <memset>
c002528a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002528f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025294:	83 c4 0c             	add    esp,0xc
c0025297:	6a 01                	push   0x1
c0025299:	8d 44 24 16          	lea    eax,[esp+0x16]
c002529d:	50                   	push   eax
c002529e:	6a 00                	push   0x0
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 12                	push   0x12
c00252a4:	56                   	push   esi
c00252a5:	53                   	push   ebx
c00252a6:	e8 57 fd ff ff       	call   c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252af:	83 c4 20             	add    esp,0x20
c00252b2:	83 e0 7f             	and    eax,0x7f
c00252b5:	3c 70                	cmp    al,0x70
c00252b7:	74 15                	je     c00252ce <SATAPI::detectMedia()+0x7c>
c00252b9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252c0:	75 0c                	jne    c00252ce <SATAPI::detectMedia()+0x7c>
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	53                   	push   ebx
c00252c6:	e8 09 fd ff ff       	call   c0024fd4 <SATAPI::diskInserted()>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252d2:	83 e0 0f             	and    eax,0xf
c00252d5:	3c 02                	cmp    al,0x2
c00252d7:	75 1b                	jne    c00252f4 <SATAPI::detectMedia()+0xa2>
c00252d9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252de:	75 2d                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c00252e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252e7:	74 24                	je     c002530d <SATAPI::detectMedia()+0xbb>
c00252e9:	83 ec 0c             	sub    esp,0xc
c00252ec:	53                   	push   ebx
c00252ed:	e8 c6 fc ff ff       	call   c0024fb8 <SATAPI::diskRemoved()>
c00252f2:	eb 16                	jmp    c002530a <SATAPI::detectMedia()+0xb8>
c00252f4:	84 c0                	test   al,al
c00252f6:	75 15                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c00252f8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252ff:	75 0c                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c0025301:	83 ec 0c             	sub    esp,0xc
c0025304:	53                   	push   ebx
c0025305:	e8 ca fc ff ff       	call   c0024fd4 <SATAPI::diskInserted()>
c002530a:	83 c4 10             	add    esp,0x10
c002530d:	83 c4 24             	add    esp,0x24
c0025310:	5b                   	pop    ebx
c0025311:	5e                   	pop    esi
c0025312:	c3                   	ret    
c0025313:	90                   	nop

c0025314 <SATAPI::open(int, int, void*)>:
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	50                   	push   eax
c0025317:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002531b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002531f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025329:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002532f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025347:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002534d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025354:	e8 3c a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025359:	89 c6                	mov    esi,eax
c002535b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025361:	81 c6 00 10 00 00    	add    esi,0x1000
c0025367:	e8 29 a6 fe ff       	call   c000f995 <Phys::allocatePage()>
c002536c:	39 c6                	cmp    esi,eax
c002536e:	74 10                	je     c0025380 <SATAPI::open(int, int, void*)+0x6c>
c0025370:	83 ec 0c             	sub    esp,0xc
c0025373:	68 63 c7 02 c0       	push   0xc002c763
c0025378:	e8 66 4c ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c002537d:	83 c4 10             	add    esp,0x10
c0025380:	83 ec 0c             	sub    esp,0xc
c0025383:	6a 02                	push   0x2
c0025385:	e8 95 be fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c002538a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025390:	6a 03                	push   0x3
c0025392:	50                   	push   eax
c0025393:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025399:	ff 35 d0 de 02 c0    	push   DWORD PTR ds:0xc002ded0
c002539f:	e8 ce c6 fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253a4:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253ab:	83 c4 14             	add    esp,0x14
c00253ae:	53                   	push   ebx
c00253af:	e8 9e fe ff ff       	call   c0025252 <SATAPI::detectMedia()>
c00253b4:	83 c4 14             	add    esp,0x14
c00253b7:	31 c0                	xor    eax,eax
c00253b9:	5b                   	pop    ebx
c00253ba:	5e                   	pop    esi
c00253bb:	c3                   	ret    

c00253bc <SATAPI::read(unsigned long long, int, void*)>:
c00253bc:	55                   	push   ebp
c00253bd:	57                   	push   edi
c00253be:	56                   	push   esi
c00253bf:	53                   	push   ebx
c00253c0:	83 ec 1c             	sub    esp,0x1c
c00253c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00253cf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253d6:	74 19                	je     c00253f1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00253d8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00253dd:	7e 2e                	jle    c002540d <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253df:	83 ec 0c             	sub    esp,0xc
c00253e2:	68 79 c7 02 c0       	push   0xc002c779
c00253e7:	e8 f7 4b ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00253ec:	83 c4 10             	add    esp,0x10
c00253ef:	eb 1c                	jmp    c002540d <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253f1:	83 ec 0c             	sub    esp,0xc
c00253f4:	55                   	push   ebp
c00253f5:	e8 58 fe ff ff       	call   c0025252 <SATAPI::detectMedia()>
c00253fa:	83 c4 10             	add    esp,0x10
c00253fd:	b8 02 00 00 00       	mov    eax,0x2
c0025402:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025409:	75 cd                	jne    c00253d8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002540b:	eb 49                	jmp    c0025456 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002540d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025411:	b9 03 00 00 00       	mov    ecx,0x3
c0025416:	fc                   	cld    
c0025417:	31 c0                	xor    eax,eax
c0025419:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002541b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025420:	89 d8                	mov    eax,ebx
c0025422:	86 e0                	xchg   al,ah
c0025424:	c1 c0 10             	rol    eax,0x10
c0025427:	86 e0                	xchg   al,ah
c0025429:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002542d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025431:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025435:	50                   	push   eax
c0025436:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002543a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002543e:	56                   	push   esi
c002543f:	53                   	push   ebx
c0025440:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025444:	c1 e0 0b             	shl    eax,0xb
c0025447:	50                   	push   eax
c0025448:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002544c:	50                   	push   eax
c002544d:	55                   	push   ebp
c002544e:	e8 af fb ff ff       	call   c0025002 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025453:	83 c4 20             	add    esp,0x20
c0025456:	83 c4 1c             	add    esp,0x1c
c0025459:	5b                   	pop    ebx
c002545a:	5e                   	pop    esi
c002545b:	5f                   	pop    edi
c002545c:	5d                   	pop    ebp
c002545d:	c3                   	ret    

c002545e <AVX::open(int, int, void*)>:
c002545e:	83 ec 0c             	sub    esp,0xc
c0025461:	e8 42 11 00 00       	call   c00265a8 <avxInit>
c0025466:	b8 00 00 00 00       	mov    eax,0x0
c002546b:	83 c4 0c             	add    esp,0xc
c002546e:	c3                   	ret    
c002546f:	90                   	nop

c0025470 <AVX::close(int, int, void*)>:
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	e8 31 11 00 00       	call   c00265a9 <avxClose>
c0025478:	b8 00 00 00 00       	mov    eax,0x0
c002547d:	83 c4 0c             	add    esp,0xc
c0025480:	c3                   	ret    
c0025481:	90                   	nop

c0025482 <AVX::available()>:
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	e8 16 11 00 00       	call   c00265a0 <avxDetect>
c002548a:	85 c0                	test   eax,eax
c002548c:	0f 95 c0             	setne  al
c002548f:	83 c4 0c             	add    esp,0xc
c0025492:	c3                   	ret    
c0025493:	90                   	nop

c0025494 <AVX::save(void*)>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002549b:	83 ec 0c             	sub    esp,0xc
c002549e:	50                   	push   eax
c002549f:	e8 02 11 00 00       	call   c00265a6 <avxSave>
c00254a4:	83 c4 10             	add    esp,0x10
c00254a7:	90                   	nop
c00254a8:	83 c4 0c             	add    esp,0xc
c00254ab:	c3                   	ret    

c00254ac <AVX::load(void*)>:
c00254ac:	83 ec 0c             	sub    esp,0xc
c00254af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254b3:	83 ec 0c             	sub    esp,0xc
c00254b6:	50                   	push   eax
c00254b7:	e8 eb 10 00 00       	call   c00265a7 <avxLoad>
c00254bc:	83 c4 10             	add    esp,0x10
c00254bf:	90                   	nop
c00254c0:	83 c4 0c             	add    esp,0xc
c00254c3:	c3                   	ret    

c00254c4 <AVX::AVX()>:
c00254c4:	83 ec 0c             	sub    esp,0xc
c00254c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254cb:	83 ec 08             	sub    esp,0x8
c00254ce:	68 dc c7 02 c0       	push   0xc002c7dc
c00254d3:	50                   	push   eax
c00254d4:	e8 ad ec fe ff       	call   c0014186 <FPU::FPU(char const*)>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c00254e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254e5:	89 10                	mov    DWORD PTR [eax],edx
c00254e7:	90                   	nop
c00254e8:	83 c4 0c             	add    esp,0xc
c00254eb:	c3                   	ret    

c00254ec <MMX::available()>:
c00254ec:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00254f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254f7:	83 e0 20             	and    eax,0x20
c00254fa:	84 c0                	test   al,al
c00254fc:	0f 95 c0             	setne  al
c00254ff:	c3                   	ret    

c0025500 <MMX::open(int, int, void*)>:
c0025500:	83 ec 0c             	sub    esp,0xc
c0025503:	e8 2a 11 00 00       	call   c0026632 <x87Init>
c0025508:	b8 00 00 00 00       	mov    eax,0x0
c002550d:	83 c4 0c             	add    esp,0xc
c0025510:	c3                   	ret    
c0025511:	90                   	nop

c0025512 <MMX::close(int, int, void*)>:
c0025512:	83 ec 0c             	sub    esp,0xc
c0025515:	e8 32 11 00 00       	call   c002664c <x87Close>
c002551a:	b8 00 00 00 00       	mov    eax,0x0
c002551f:	83 c4 0c             	add    esp,0xc
c0025522:	c3                   	ret    
c0025523:	90                   	nop

c0025524 <MMX::save(void*)>:
c0025524:	83 ec 0c             	sub    esp,0xc
c0025527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002552b:	83 ec 0c             	sub    esp,0xc
c002552e:	50                   	push   eax
c002552f:	e8 ed 10 00 00       	call   c0026621 <x87Save>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	90                   	nop
c0025538:	83 c4 0c             	add    esp,0xc
c002553b:	c3                   	ret    

c002553c <MMX::load(void*)>:
c002553c:	83 ec 0c             	sub    esp,0xc
c002553f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025543:	83 ec 0c             	sub    esp,0xc
c0025546:	50                   	push   eax
c0025547:	e8 de 10 00 00       	call   c002662a <x87Load>
c002554c:	83 c4 10             	add    esp,0x10
c002554f:	90                   	nop
c0025550:	83 c4 0c             	add    esp,0xc
c0025553:	c3                   	ret    

c0025554 <MMX::MMX()>:
c0025554:	83 ec 0c             	sub    esp,0xc
c0025557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555b:	83 ec 08             	sub    esp,0x8
c002555e:	68 1c c8 02 c0       	push   0xc002c81c
c0025563:	50                   	push   eax
c0025564:	e8 1d ec fe ff       	call   c0014186 <FPU::FPU(char const*)>
c0025569:	83 c4 10             	add    esp,0x10
c002556c:	ba 2c c8 02 c0       	mov    edx,0xc002c82c
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	89 10                	mov    DWORD PTR [eax],edx
c0025577:	90                   	nop
c0025578:	83 c4 0c             	add    esp,0xc
c002557b:	c3                   	ret    

c002557c <SSE::open(int, int, void*)>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	e8 60 10 00 00       	call   c00265e4 <sseInit>
c0025584:	b8 00 00 00 00       	mov    eax,0x0
c0025589:	83 c4 0c             	add    esp,0xc
c002558c:	c3                   	ret    
c002558d:	90                   	nop

c002558e <SSE::close(int, int, void*)>:
c002558e:	83 ec 0c             	sub    esp,0xc
c0025591:	e8 5e 10 00 00       	call   c00265f4 <sseClose>
c0025596:	b8 00 00 00 00       	mov    eax,0x0
c002559b:	83 c4 0c             	add    esp,0xc
c002559e:	c3                   	ret    
c002559f:	90                   	nop

c00255a0 <SSE::available()>:
c00255a0:	83 ec 1c             	sub    esp,0x1c
c00255a3:	e8 18 10 00 00       	call   c00265c0 <absolutelyNoChanceInHell>
c00255a8:	85 c0                	test   eax,eax
c00255aa:	0f 95 c0             	setne  al
c00255ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255b1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255b5:	83 c4 1c             	add    esp,0x1c
c00255b8:	c3                   	ret    
c00255b9:	90                   	nop

c00255ba <SSE::save(void*)>:
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c1:	83 ec 0c             	sub    esp,0xc
c00255c4:	50                   	push   eax
c00255c5:	e8 0e 10 00 00       	call   c00265d8 <sseSave>
c00255ca:	83 c4 10             	add    esp,0x10
c00255cd:	90                   	nop
c00255ce:	83 c4 0c             	add    esp,0xc
c00255d1:	c3                   	ret    

c00255d2 <SSE::load(void*)>:
c00255d2:	83 ec 0c             	sub    esp,0xc
c00255d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255d9:	83 ec 0c             	sub    esp,0xc
c00255dc:	50                   	push   eax
c00255dd:	e8 fc 0f 00 00       	call   c00265de <sseLoad>
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	90                   	nop
c00255e6:	83 c4 0c             	add    esp,0xc
c00255e9:	c3                   	ret    

c00255ea <SSE::SSE()>:
c00255ea:	83 ec 0c             	sub    esp,0xc
c00255ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f1:	83 ec 08             	sub    esp,0x8
c00255f4:	68 5c c8 02 c0       	push   0xc002c85c
c00255f9:	50                   	push   eax
c00255fa:	e8 87 eb fe ff       	call   c0014186 <FPU::FPU(char const*)>
c00255ff:	83 c4 10             	add    esp,0x10
c0025602:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c0025607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560b:	89 10                	mov    DWORD PTR [eax],edx
c002560d:	90                   	nop
c002560e:	83 c4 0c             	add    esp,0xc
c0025611:	c3                   	ret    

c0025612 <x87::open(int, int, void*)>:
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	e8 18 10 00 00       	call   c0026632 <x87Init>
c002561a:	b8 00 00 00 00       	mov    eax,0x0
c002561f:	83 c4 0c             	add    esp,0xc
c0025622:	c3                   	ret    
c0025623:	90                   	nop

c0025624 <x87::close(int, int, void*)>:
c0025624:	83 ec 0c             	sub    esp,0xc
c0025627:	e8 20 10 00 00       	call   c002664c <x87Close>
c002562c:	b8 00 00 00 00       	mov    eax,0x0
c0025631:	83 c4 0c             	add    esp,0xc
c0025634:	c3                   	ret    
c0025635:	90                   	nop

c0025636 <x87::available()>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	e8 c8 0f 00 00       	call   c0026606 <x87Detect>
c002563e:	85 c0                	test   eax,eax
c0025640:	0f 95 c0             	setne  al
c0025643:	83 c4 0c             	add    esp,0xc
c0025646:	c3                   	ret    
c0025647:	90                   	nop

c0025648 <x87::save(void*)>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002564f:	83 ec 0c             	sub    esp,0xc
c0025652:	50                   	push   eax
c0025653:	e8 c9 0f 00 00       	call   c0026621 <x87Save>
c0025658:	83 c4 10             	add    esp,0x10
c002565b:	90                   	nop
c002565c:	83 c4 0c             	add    esp,0xc
c002565f:	c3                   	ret    

c0025660 <x87::load(void*)>:
c0025660:	83 ec 0c             	sub    esp,0xc
c0025663:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025667:	83 ec 0c             	sub    esp,0xc
c002566a:	50                   	push   eax
c002566b:	e8 ba 0f 00 00       	call   c002662a <x87Load>
c0025670:	83 c4 10             	add    esp,0x10
c0025673:	90                   	nop
c0025674:	83 c4 0c             	add    esp,0xc
c0025677:	c3                   	ret    

c0025678 <x87::x87()>:
c0025678:	83 ec 0c             	sub    esp,0xc
c002567b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002567f:	83 ec 08             	sub    esp,0x8
c0025682:	68 9c c8 02 c0       	push   0xc002c89c
c0025687:	50                   	push   eax
c0025688:	e8 f9 ea fe ff       	call   c0014186 <FPU::FPU(char const*)>
c002568d:	83 c4 10             	add    esp,0x10
c0025690:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c0025695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025699:	89 10                	mov    DWORD PTR [eax],edx
c002569b:	90                   	nop
c002569c:	83 c4 0c             	add    esp,0xc
c002569f:	c3                   	ret    

c00256a0 <APIC::disable()>:
c00256a0:	90                   	nop
c00256a1:	c3                   	ret    

c00256a2 <APIC::close(int, int, void*)>:
c00256a2:	55                   	push   ebp
c00256a3:	89 e5                	mov    ebp,esp
c00256a5:	83 ec 08             	sub    esp,0x8
c00256a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00256ad:	83 c0 3c             	add    eax,0x3c
c00256b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256b8:	ff d0                	call   eax
c00256ba:	83 c4 10             	add    esp,0x10
c00256bd:	b8 00 00 00 00       	mov    eax,0x0
c00256c2:	c9                   	leave  
c00256c3:	c3                   	ret    

c00256c4 <IOAPIC::close(int, int, void*)>:
c00256c4:	b8 00 00 00 00       	mov    eax,0x0
c00256c9:	c3                   	ret    

c00256ca <APIC::io_wait()>:
c00256ca:	eb 00                	jmp    c00256cc <APIC::io_wait()+0x2>
c00256cc:	eb 00                	jmp    c00256ce <APIC::io_wait()+0x4>
c00256ce:	90                   	nop
c00256cf:	c3                   	ret    

c00256d0 <APIC::getBase()>:
c00256d0:	55                   	push   ebp
c00256d1:	89 e5                	mov    ebp,esp
c00256d3:	83 ec 18             	sub    esp,0x18
c00256d6:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00256db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256e1:	83 e0 08             	and    eax,0x8
c00256e4:	84 c0                	test   al,al
c00256e6:	75 07                	jne    c00256ef <APIC::getBase()+0x1f>
c00256e8:	b8 00 00 00 00       	mov    eax,0x0
c00256ed:	eb 21                	jmp    c0025710 <APIC::getBase()+0x40>
c00256ef:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00256f4:	83 ec 08             	sub    esp,0x8
c00256f7:	6a 1b                	push   0x1b
c00256f9:	50                   	push   eax
c00256fa:	e8 41 94 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00256ff:	83 c4 10             	add    esp,0x10
c0025702:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025705:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025708:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002570b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025710:	c9                   	leave  
c0025711:	c3                   	ret    

c0025712 <APIC::eoi(unsigned char)>:
c0025712:	55                   	push   ebp
c0025713:	89 e5                	mov    ebp,esp
c0025715:	83 ec 28             	sub    esp,0x28
c0025718:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002571b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002571e:	83 ec 0c             	sub    esp,0xc
c0025721:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025724:	e8 a7 ff ff ff       	call   c00256d0 <APIC::getBase()>
c0025729:	83 c4 10             	add    esp,0x10
c002572c:	05 b0 00 00 00       	add    eax,0xb0
c0025731:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025737:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002573d:	90                   	nop
c002573e:	c9                   	leave  
c002573f:	c3                   	ret    

c0025740 <APIC::open(int, int, void*)>:
c0025740:	55                   	push   ebp
c0025741:	89 e5                	mov    ebp,esp
c0025743:	57                   	push   edi
c0025744:	56                   	push   esi
c0025745:	53                   	push   ebx
c0025746:	83 ec 2c             	sub    esp,0x2c
c0025749:	83 ec 0c             	sub    esp,0xc
c002574c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002574f:	e8 7c ff ff ff       	call   c00256d0 <APIC::getBase()>
c0025754:	83 c4 10             	add    esp,0x10
c0025757:	89 c2                	mov    edx,eax
c0025759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002575c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025762:	0f b6 f8             	movzx  edi,al
c0025765:	89 d0                	mov    eax,edx
c0025767:	ba 00 00 00 00       	mov    edx,0x0
c002576c:	89 c1                	mov    ecx,eax
c002576e:	80 e5 ff             	and    ch,0xff
c0025771:	89 cb                	mov    ebx,ecx
c0025773:	0f b6 f2             	movzx  esi,dl
c0025776:	89 d8                	mov    eax,ebx
c0025778:	89 f2                	mov    edx,esi
c002577a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002577d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025780:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025784:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025788:	83 e0 00             	and    eax,0x0
c002578b:	09 d0                	or     eax,edx
c002578d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025794:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002579a:	8d 50 01             	lea    edx,[eax+0x1]
c002579d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257a0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257a6:	0f b6 d0             	movzx  edx,al
c00257a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ac:	83 c2 08             	add    edx,0x8
c00257af:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257b3:	0f b6 c9             	movzx  ecx,cl
c00257b6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257bc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257c0:	83 ec 0c             	sub    esp,0xc
c00257c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c6:	e8 05 ff ff ff       	call   c00256d0 <APIC::getBase()>
c00257cb:	83 c4 10             	add    esp,0x10
c00257ce:	05 f0 00 00 00       	add    eax,0xf0
c00257d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00257d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00257db:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257de:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00257e5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00257ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257ef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00257f2:	89 10                	mov    DWORD PTR [eax],edx
c00257f4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00257fb:	a1 30 06 03 c0       	mov    eax,ds:0xc0030630
c0025800:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025803:	7d 7c                	jge    c0025881 <APIC::open(int, int, void*)+0x141>
c0025805:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025808:	8b 04 85 40 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9c0]
c002580f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025812:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025815:	8b 04 85 40 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9c0]
c002581c:	c1 e8 08             	shr    eax,0x8
c002581f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025823:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025826:	8b 04 85 40 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9c0]
c002582d:	c1 e8 18             	shr    eax,0x18
c0025830:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025833:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025837:	75 40                	jne    c0025879 <APIC::open(int, int, void*)+0x139>
c0025839:	83 ec 0c             	sub    esp,0xc
c002583c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002583f:	e8 8c fe ff ff       	call   c00256d0 <APIC::getBase()>
c0025844:	83 c4 10             	add    esp,0x10
c0025847:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002584b:	75 07                	jne    c0025854 <APIC::open(int, int, void*)+0x114>
c002584d:	ba 60 03 00 00       	mov    edx,0x360
c0025852:	eb 05                	jmp    c0025859 <APIC::open(int, int, void*)+0x119>
c0025854:	ba 50 03 00 00       	mov    edx,0x350
c0025859:	01 d0                	add    eax,edx
c002585b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002585e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025861:	8b 00                	mov    eax,DWORD PTR [eax]
c0025863:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025866:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002586d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025871:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025874:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025877:	89 10                	mov    DWORD PTR [eax],edx
c0025879:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002587c:	e9 7a ff ff ff       	jmp    c00257fb <APIC::open(int, int, void*)+0xbb>
c0025881:	b8 00 00 00 00       	mov    eax,0x0
c0025886:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025889:	5b                   	pop    ebx
c002588a:	5e                   	pop    esi
c002588b:	5f                   	pop    edi
c002588c:	5d                   	pop    ebp
c002588d:	c3                   	ret    

c002588e <IOAPIC::IOAPIC()>:
c002588e:	83 ec 0c             	sub    esp,0xc
c0025891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025895:	83 ec 08             	sub    esp,0x8
c0025898:	68 dc c8 02 c0       	push   0xc002c8dc
c002589d:	50                   	push   eax
c002589e:	e8 d3 e5 fe ff       	call   c0013e76 <Device::Device(char const*)>
c00258a3:	83 c4 10             	add    esp,0x10
c00258a6:	ba 04 ca 02 c0       	mov    edx,0xc002ca04
c00258ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258af:	89 10                	mov    DWORD PTR [eax],edx
c00258b1:	90                   	nop
c00258b2:	83 c4 0c             	add    esp,0xc
c00258b5:	c3                   	ret    

c00258b6 <APIC::APIC()>:
c00258b6:	53                   	push   ebx
c00258b7:	83 ec 18             	sub    esp,0x18
c00258ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258be:	83 ec 08             	sub    esp,0x8
c00258c1:	68 e4 c8 02 c0       	push   0xc002c8e4
c00258c6:	50                   	push   eax
c00258c7:	e8 14 ed fe ff       	call   c00145e0 <InterruptController::InterruptController(char const*)>
c00258cc:	83 c4 10             	add    esp,0x10
c00258cf:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c00258d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258d8:	89 10                	mov    DWORD PTR [eax],edx
c00258da:	a0 00 21 03 c0       	mov    al,ds:0xc0032100
c00258df:	83 f0 01             	xor    eax,0x1
c00258e2:	84 c0                	test   al,al
c00258e4:	0f 84 a1 00 00 00    	je     c002598b <APIC::APIC()+0xd5>
c00258ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00258ef:	a0 e0 06 03 c0       	mov    al,ds:0xc00306e0
c00258f4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00258f8:	0f 83 86 00 00 00    	jae    c0025984 <APIC::APIC()+0xce>
c00258fe:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025906:	83 ec 0c             	sub    esp,0xc
c0025909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002590d:	e8 87 9c fe ff       	call   c000f599 <malloc>
c0025912:	83 c4 10             	add    esp,0x10
c0025915:	89 c3                	mov    ebx,eax
c0025917:	83 ec 0c             	sub    esp,0xc
c002591a:	53                   	push   ebx
c002591b:	e8 6e ff ff ff       	call   c002588e <IOAPIC::IOAPIC()>
c0025920:	83 c4 10             	add    esp,0x10
c0025923:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025927:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002592c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025930:	89 14 85 e0 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf20],edx
c0025937:	a1 c0 20 03 c0       	mov    eax,ds:0xc00320c0
c002593c:	40                   	inc    eax
c002593d:	a3 c0 20 03 c0       	mov    ds:0xc00320c0,eax
c0025942:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c0025947:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002594d:	83 ec 08             	sub    esp,0x8
c0025950:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025954:	50                   	push   eax
c0025955:	e8 18 e3 fe ff       	call   c0013c72 <Device::addChild(Device*)>
c002595a:	83 c4 10             	add    esp,0x10
c002595d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025961:	8b 00                	mov    eax,DWORD PTR [eax]
c0025963:	83 c0 08             	add    eax,0x8
c0025966:	8b 00                	mov    eax,DWORD PTR [eax]
c0025968:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002596d:	6a 00                	push   0x0
c002596f:	6a 00                	push   0x0
c0025971:	52                   	push   edx
c0025972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025976:	ff d0                	call   eax
c0025978:	83 c4 10             	add    esp,0x10
c002597b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002597f:	e9 6b ff ff ff       	jmp    c00258ef <APIC::APIC()+0x39>
c0025984:	c6 05 00 21 03 c0 01 	mov    BYTE PTR ds:0xc0032100,0x1
c002598b:	90                   	nop
c002598c:	83 c4 18             	add    esp,0x18
c002598f:	5b                   	pop    ebx
c0025990:	c3                   	ret    
c0025991:	90                   	nop

c0025992 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025992:	55                   	push   ebp
c0025993:	89 e5                	mov    ebp,esp
c0025995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025998:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002599e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259a1:	72 1d                	jb     c00259c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259af:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259b5:	01 d0                	add    eax,edx
c00259b7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259ba:	73 04                	jae    c00259c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259bc:	b0 01                	mov    al,0x1
c00259be:	eb 02                	jmp    c00259c2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259c0:	b0 00                	mov    al,0x0
c00259c2:	5d                   	pop    ebp
c00259c3:	c3                   	ret    

c00259c4 <IOAPIC::read(int)>:
c00259c4:	55                   	push   ebp
c00259c5:	89 e5                	mov    ebp,esp
c00259c7:	83 ec 10             	sub    esp,0x10
c00259ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00259d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00259d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259d9:	0f b6 d0             	movzx  edx,al
c00259dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259df:	89 10                	mov    DWORD PTR [eax],edx
c00259e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259e4:	83 c0 10             	add    eax,0x10
c00259e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e9:	c9                   	leave  
c00259ea:	c3                   	ret    
c00259eb:	90                   	nop

c00259ec <IOAPIC::open(int, int, void*)>:
c00259ec:	55                   	push   ebp
c00259ed:	89 e5                	mov    ebp,esp
c00259ef:	57                   	push   edi
c00259f0:	56                   	push   esi
c00259f1:	53                   	push   ebx
c00259f2:	83 ec 0c             	sub    esp,0xc
c00259f5:	83 ec 0c             	sub    esp,0xc
c00259f8:	68 0f c9 02 c0       	push   0xc002c90f
c00259fd:	e8 37 ce fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0025a02:	83 c4 10             	add    esp,0x10
c0025a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a1a:	8b 14 85 20 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf8e0]
c0025a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a24:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a33:	8b 14 85 a0 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf860]
c0025a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a46:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a55:	0f b6 f8             	movzx  edi,al
c0025a58:	89 d0                	mov    eax,edx
c0025a5a:	ba 00 00 00 00       	mov    edx,0x0
c0025a5f:	89 c1                	mov    ecx,eax
c0025a61:	80 e5 ff             	and    ch,0xff
c0025a64:	89 cb                	mov    ebx,ecx
c0025a66:	0f b6 f2             	movzx  esi,dl
c0025a69:	89 d8                	mov    eax,ebx
c0025a6b:	89 f2                	mov    edx,esi
c0025a6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a70:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a73:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a77:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a7b:	83 e0 00             	and    eax,0x0
c0025a7e:	09 d0                	or     eax,edx
c0025a80:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a8d:	8d 50 01             	lea    edx,[eax+0x1]
c0025a90:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a93:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a99:	0f b6 d0             	movzx  edx,al
c0025a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9f:	83 c2 08             	add    edx,0x8
c0025aa2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025aa6:	0f b6 c9             	movzx  ecx,cl
c0025aa9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025aaf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ab3:	83 ec 08             	sub    esp,0x8
c0025ab6:	6a 01                	push   0x1
c0025ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025abb:	e8 04 ff ff ff       	call   c00259c4 <IOAPIC::read(int)>
c0025ac0:	83 c4 10             	add    esp,0x10
c0025ac3:	c1 f8 10             	sar    eax,0x10
c0025ac6:	0f b6 c0             	movzx  eax,al
c0025ac9:	8d 50 01             	lea    edx,[eax+0x1]
c0025acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025ad5:	b8 00 00 00 00       	mov    eax,0x0
c0025ada:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025add:	5b                   	pop    ebx
c0025ade:	5e                   	pop    esi
c0025adf:	5f                   	pop    edi
c0025ae0:	5d                   	pop    ebp
c0025ae1:	c3                   	ret    

c0025ae2 <IOAPIC::write(int, int)>:
c0025ae2:	55                   	push   ebp
c0025ae3:	89 e5                	mov    ebp,esp
c0025ae5:	83 ec 10             	sub    esp,0x10
c0025ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aeb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025af1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025af4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025af7:	0f b6 d0             	movzx  edx,al
c0025afa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025afd:	89 10                	mov    DWORD PTR [eax],edx
c0025aff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b02:	8d 50 10             	lea    edx,[eax+0x10]
c0025b05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b08:	89 02                	mov    DWORD PTR [edx],eax
c0025b0a:	90                   	nop
c0025b0b:	c9                   	leave  
c0025b0c:	c3                   	ret    
c0025b0d:	90                   	nop

c0025b0e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b0e:	55                   	push   ebp
c0025b0f:	89 e5                	mov    ebp,esp
c0025b11:	53                   	push   ebx
c0025b12:	83 ec 2c             	sub    esp,0x2c
c0025b15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b18:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b1b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b1e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b21:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b2a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b30:	88 d8                	mov    al,bl
c0025b32:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b35:	88 c8                	mov    al,cl
c0025b37:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b3a:	88 d0                	mov    al,dl
c0025b3c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b43:	83 c0 08             	add    eax,0x8
c0025b46:	01 c0                	add    eax,eax
c0025b48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b4b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b4f:	83 c0 08             	add    eax,0x8
c0025b52:	01 c0                	add    eax,eax
c0025b54:	40                   	inc    eax
c0025b55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b5b:	50                   	push   eax
c0025b5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b5f:	e8 60 fe ff ff       	call   c00259c4 <IOAPIC::read(int)>
c0025b64:	83 c4 08             	add    esp,0x8
c0025b67:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b6a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b71:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b74:	c1 e0 18             	shl    eax,0x18
c0025b77:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025b7a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025b7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b80:	52                   	push   edx
c0025b81:	50                   	push   eax
c0025b82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b85:	e8 58 ff ff ff       	call   c0025ae2 <IOAPIC::write(int, int)>
c0025b8a:	83 c4 0c             	add    esp,0xc
c0025b8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b90:	50                   	push   eax
c0025b91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b94:	e8 2b fe ff ff       	call   c00259c4 <IOAPIC::read(int)>
c0025b99:	83 c4 08             	add    esp,0x8
c0025b9c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025b9f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ba6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025bad:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bb4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bb8:	74 09                	je     c0025bc3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025bba:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025bc1:	eb 07                	jmp    c0025bca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025bc3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025bca:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025bce:	74 09                	je     c0025bd9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025bd0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025bd7:	eb 07                	jmp    c0025be0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025bd9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025be0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025be7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025beb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025bee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025bf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bf4:	52                   	push   edx
c0025bf5:	50                   	push   eax
c0025bf6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf9:	e8 e4 fe ff ff       	call   c0025ae2 <IOAPIC::write(int, int)>
c0025bfe:	83 c4 0c             	add    esp,0xc
c0025c01:	90                   	nop
c0025c02:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c05:	c9                   	leave  
c0025c06:	c3                   	ret    
c0025c07:	90                   	nop

c0025c08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c08:	55                   	push   ebp
c0025c09:	89 e5                	mov    ebp,esp
c0025c0b:	57                   	push   edi
c0025c0c:	56                   	push   esi
c0025c0d:	53                   	push   ebx
c0025c0e:	83 ec 2c             	sub    esp,0x2c
c0025c11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c14:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c17:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c1b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c1f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c23:	74 5a                	je     c0025c7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c25:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c29:	7f 44                	jg     c0025c6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c2e:	05 c0 cf 02 c0       	add    eax,0xc002cfc0
c0025c33:	8a 00                	mov    al,BYTE PTR [eax]
c0025c35:	0f b6 c0             	movzx  eax,al
c0025c38:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c3e:	66 8b 84 00 c0 06 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf940]
c0025c46:	0f b7 c0             	movzx  eax,ax
c0025c49:	83 e0 02             	and    eax,0x2
c0025c4c:	85 c0                	test   eax,eax
c0025c4e:	74 04                	je     c0025c54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c50:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c57:	66 8b 84 00 c0 06 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf940]
c0025c5f:	0f b7 c0             	movzx  eax,ax
c0025c62:	83 e0 08             	and    eax,0x8
c0025c65:	85 c0                	test   eax,eax
c0025c67:	74 16                	je     c0025c7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c69:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c6d:	eb 10                	jmp    c0025c7f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c6f:	83 ec 0c             	sub    esp,0xc
c0025c72:	68 20 c9 02 c0       	push   0xc002c920
c0025c77:	e8 67 43 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0025c7c:	83 c4 10             	add    esp,0x10
c0025c7f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025c83:	a1 c0 20 03 c0       	mov    eax,ds:0xc00320c0
c0025c88:	83 ec 08             	sub    esp,0x8
c0025c8b:	50                   	push   eax
c0025c8c:	68 58 c9 02 c0       	push   0xc002c958
c0025c91:	e8 a3 cb fe ff       	call   c0012839 <Dbg::kprintf(char const*, ...)>
c0025c96:	83 c4 10             	add    esp,0x10
c0025c99:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ca0:	a1 c0 20 03 c0       	mov    eax,ds:0xc00320c0
c0025ca5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025ca8:	7d 67                	jge    c0025d11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025caa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cad:	8b 04 85 e0 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf20]
c0025cb4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cb7:	83 ec 08             	sub    esp,0x8
c0025cba:	52                   	push   edx
c0025cbb:	50                   	push   eax
c0025cbc:	e8 d1 fc ff ff       	call   c0025992 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025cc1:	83 c4 10             	add    esp,0x10
c0025cc4:	84 c0                	test   al,al
c0025cc6:	74 44                	je     c0025d0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025cc8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ccb:	8b 1c 85 e0 20 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdf20]
c0025cd2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025cd6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025cd9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025cdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ce0:	83 c0 20             	add    eax,0x20
c0025ce3:	0f b6 f0             	movzx  esi,al
c0025ce6:	b8 00 00 00 00       	mov    eax,0x0
c0025ceb:	99                   	cdq    
c0025cec:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025cef:	0f b6 c9             	movzx  ecx,cl
c0025cf2:	83 ec 04             	sub    esp,0x4
c0025cf5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025cf8:	57                   	push   edi
c0025cf9:	56                   	push   esi
c0025cfa:	52                   	push   edx
c0025cfb:	50                   	push   eax
c0025cfc:	51                   	push   ecx
c0025cfd:	53                   	push   ebx
c0025cfe:	e8 0b fe ff ff       	call   c0025b0e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d03:	83 c4 20             	add    esp,0x20
c0025d06:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d0a:	eb 05                	jmp    c0025d11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d0c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d0f:	eb 8f                	jmp    c0025ca0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d11:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d14:	83 f0 01             	xor    eax,0x1
c0025d17:	84 c0                	test   al,al
c0025d19:	74 10                	je     c0025d2b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d1b:	83 ec 0c             	sub    esp,0xc
c0025d1e:	68 6f c9 02 c0       	push   0xc002c96f
c0025d23:	e8 bb 42 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0025d28:	83 c4 10             	add    esp,0x10
c0025d2b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d2f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d36:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d3a:	7f 65                	jg     c0025da1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d3f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d42:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d49:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d4c:	01 ca                	add    edx,ecx
c0025d4e:	83 c2 54             	add    edx,0x54
c0025d51:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d55:	85 c0                	test   eax,eax
c0025d57:	75 43                	jne    c0025d9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d5f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d66:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d69:	01 ca                	add    edx,ecx
c0025d6b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d6e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d71:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d82:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d85:	01 ca                	add    edx,ecx
c0025d87:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d8d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d90:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d97:	83 e8 20             	sub    eax,0x20
c0025d9a:	eb 1a                	jmp    c0025db6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025d9c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025d9f:	eb 95                	jmp    c0025d36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025da1:	83 ec 0c             	sub    esp,0xc
c0025da4:	68 7c c9 02 c0       	push   0xc002c97c
c0025da9:	e8 35 42 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0025dae:	83 c4 10             	add    esp,0x10
c0025db1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025db6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025db9:	5b                   	pop    ebx
c0025dba:	5e                   	pop    esi
c0025dbb:	5f                   	pop    edi
c0025dbc:	5d                   	pop    ebp
c0025dbd:	c3                   	ret    

c0025dbe <PIC::disable()>:
c0025dbe:	55                   	push   ebp
c0025dbf:	89 e5                	mov    ebp,esp
c0025dc1:	83 ec 10             	sub    esp,0x10
c0025dc4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025dca:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025dce:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025dd1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025dd5:	ee                   	out    dx,al
c0025dd6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ddc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025de0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025de3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025de7:	ee                   	out    dx,al
c0025de8:	90                   	nop
c0025de9:	c9                   	leave  
c0025dea:	c3                   	ret    
c0025deb:	90                   	nop

c0025dec <PIC::close(int, int, void*)>:
c0025dec:	55                   	push   ebp
c0025ded:	89 e5                	mov    ebp,esp
c0025def:	83 ec 08             	sub    esp,0x8
c0025df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025df7:	83 c0 3c             	add    eax,0x3c
c0025dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dfc:	83 ec 0c             	sub    esp,0xc
c0025dff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e02:	ff d0                	call   eax
c0025e04:	83 c4 10             	add    esp,0x10
c0025e07:	b8 00 00 00 00       	mov    eax,0x0
c0025e0c:	c9                   	leave  
c0025e0d:	c3                   	ret    

c0025e0e <PIC::PIC()>:
c0025e0e:	83 ec 0c             	sub    esp,0xc
c0025e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e15:	83 ec 08             	sub    esp,0x8
c0025e18:	68 28 ca 02 c0       	push   0xc002ca28
c0025e1d:	50                   	push   eax
c0025e1e:	e8 bd e7 fe ff       	call   c00145e0 <InterruptController::InterruptController(char const*)>
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	ba 54 ca 02 c0       	mov    edx,0xc002ca54
c0025e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e2f:	89 10                	mov    DWORD PTR [eax],edx
c0025e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e3b:	0f b6 d0             	movzx  edx,al
c0025e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e42:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e53:	0f b6 d0             	movzx  edx,al
c0025e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e69:	8d 50 01             	lea    edx,[eax+0x1]
c0025e6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e70:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e76:	0f b6 d0             	movzx  edx,al
c0025e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e81:	83 e1 3f             	and    ecx,0x3f
c0025e84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e92:	0f b6 d0             	movzx  edx,al
c0025e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e99:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eaa:	0f b6 d0             	movzx  edx,al
c0025ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec0:	8d 50 01             	lea    edx,[eax+0x1]
c0025ec3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ec7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ecd:	0f b6 d0             	movzx  edx,al
c0025ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ed8:	83 e1 3f             	and    ecx,0x3f
c0025edb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025edf:	90                   	nop
c0025ee0:	83 c4 0c             	add    esp,0xc
c0025ee3:	c3                   	ret    

c0025ee4 <PIC::ioWait()>:
c0025ee4:	eb 00                	jmp    c0025ee6 <PIC::ioWait()+0x2>
c0025ee6:	eb 00                	jmp    c0025ee8 <PIC::ioWait()+0x4>
c0025ee8:	90                   	nop
c0025ee9:	c3                   	ret    

c0025eea <PIC::getIRQReg(int)>:
c0025eea:	55                   	push   ebp
c0025eeb:	89 e5                	mov    ebp,esp
c0025eed:	83 ec 10             	sub    esp,0x10
c0025ef0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ef3:	0f b6 c0             	movzx  eax,al
c0025ef6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025efc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025eff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f02:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f06:	ee                   	out    dx,al
c0025f07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f0a:	0f b6 c0             	movzx  eax,al
c0025f0d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f13:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f16:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f19:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f1d:	ee                   	out    dx,al
c0025f1e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f24:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f28:	89 c2                	mov    edx,eax
c0025f2a:	ec                   	in     al,dx
c0025f2b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f2e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f31:	0f b6 c0             	movzx  eax,al
c0025f34:	c1 e0 08             	shl    eax,0x8
c0025f37:	89 c1                	mov    ecx,eax
c0025f39:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f3f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f43:	89 c2                	mov    edx,eax
c0025f45:	ec                   	in     al,dx
c0025f46:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f49:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f4c:	0f b6 c0             	movzx  eax,al
c0025f4f:	09 c8                	or     eax,ecx
c0025f51:	c9                   	leave  
c0025f52:	c3                   	ret    
c0025f53:	90                   	nop

c0025f54 <PIC::eoi(unsigned char)>:
c0025f54:	55                   	push   ebp
c0025f55:	89 e5                	mov    ebp,esp
c0025f57:	83 ec 14             	sub    esp,0x14
c0025f5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f5d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f60:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f64:	75 1e                	jne    c0025f84 <PIC::eoi(unsigned char)+0x30>
c0025f66:	6a 0b                	push   0xb
c0025f68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f6b:	e8 7a ff ff ff       	call   c0025eea <PIC::getIRQReg(int)>
c0025f70:	83 c4 08             	add    esp,0x8
c0025f73:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f77:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025f7b:	25 80 00 00 00       	and    eax,0x80
c0025f80:	85 c0                	test   eax,eax
c0025f82:	74 5f                	je     c0025fe3 <PIC::eoi(unsigned char)+0x8f>
c0025f84:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f88:	75 2d                	jne    c0025fb7 <PIC::eoi(unsigned char)+0x63>
c0025f8a:	6a 0b                	push   0xb
c0025f8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f8f:	e8 56 ff ff ff       	call   c0025eea <PIC::getIRQReg(int)>
c0025f94:	83 c4 08             	add    esp,0x8
c0025f97:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025f9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025f9e:	66 85 c0             	test   ax,ax
c0025fa1:	78 14                	js     c0025fb7 <PIC::eoi(unsigned char)+0x63>
c0025fa3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fa9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fad:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fb0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fb4:	ee                   	out    dx,al
c0025fb5:	eb 2d                	jmp    c0025fe4 <PIC::eoi(unsigned char)+0x90>
c0025fb7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fbb:	76 12                	jbe    c0025fcf <PIC::eoi(unsigned char)+0x7b>
c0025fbd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fc3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025fc7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fca:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fce:	ee                   	out    dx,al
c0025fcf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fd5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025fd9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fdc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fe0:	ee                   	out    dx,al
c0025fe1:	eb 01                	jmp    c0025fe4 <PIC::eoi(unsigned char)+0x90>
c0025fe3:	90                   	nop
c0025fe4:	c9                   	leave  
c0025fe5:	c3                   	ret    

c0025fe6 <PIC::remap()>:
c0025fe6:	55                   	push   ebp
c0025fe7:	89 e5                	mov    ebp,esp
c0025fe9:	83 ec 48             	sub    esp,0x48
c0025fec:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ff3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025ffa:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026000:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026003:	89 c2                	mov    edx,eax
c0026005:	ec                   	in     al,dx
c0026006:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026009:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002600c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002600f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026015:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026018:	89 c2                	mov    edx,eax
c002601a:	ec                   	in     al,dx
c002601b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002601e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026021:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026024:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002602a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002602e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026031:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026034:	ee                   	out    dx,al
c0026035:	83 ec 0c             	sub    esp,0xc
c0026038:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603b:	e8 a4 fe ff ff       	call   c0025ee4 <PIC::ioWait()>
c0026040:	83 c4 10             	add    esp,0x10
c0026043:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026049:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002604d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026050:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026053:	ee                   	out    dx,al
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605a:	e8 85 fe ff ff       	call   c0025ee4 <PIC::ioWait()>
c002605f:	83 c4 10             	add    esp,0x10
c0026062:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026065:	0f b6 c0             	movzx  eax,al
c0026068:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002606e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026071:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026074:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026077:	ee                   	out    dx,al
c0026078:	83 ec 0c             	sub    esp,0xc
c002607b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002607e:	e8 61 fe ff ff       	call   c0025ee4 <PIC::ioWait()>
c0026083:	83 c4 10             	add    esp,0x10
c0026086:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026089:	0f b6 c0             	movzx  eax,al
c002608c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026092:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026095:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026098:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002609b:	ee                   	out    dx,al
c002609c:	83 ec 0c             	sub    esp,0xc
c002609f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a2:	e8 3d fe ff ff       	call   c0025ee4 <PIC::ioWait()>
c00260a7:	83 c4 10             	add    esp,0x10
c00260aa:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260b0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260b4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260b7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260ba:	ee                   	out    dx,al
c00260bb:	83 ec 0c             	sub    esp,0xc
c00260be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c1:	e8 1e fe ff ff       	call   c0025ee4 <PIC::ioWait()>
c00260c6:	83 c4 10             	add    esp,0x10
c00260c9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00260cf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00260d3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00260d6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260d9:	ee                   	out    dx,al
c00260da:	83 ec 0c             	sub    esp,0xc
c00260dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e0:	e8 ff fd ff ff       	call   c0025ee4 <PIC::ioWait()>
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00260ee:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00260f2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00260f5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260f8:	ee                   	out    dx,al
c00260f9:	83 ec 0c             	sub    esp,0xc
c00260fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260ff:	e8 e0 fd ff ff       	call   c0025ee4 <PIC::ioWait()>
c0026104:	83 c4 10             	add    esp,0x10
c0026107:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002610d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026111:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026114:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026117:	ee                   	out    dx,al
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611e:	e8 c1 fd ff ff       	call   c0025ee4 <PIC::ioWait()>
c0026123:	83 c4 10             	add    esp,0x10
c0026126:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002612a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026130:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026133:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026136:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026139:	ee                   	out    dx,al
c002613a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002613e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026144:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026147:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002614a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002614d:	ee                   	out    dx,al
c002614e:	90                   	nop
c002614f:	c9                   	leave  
c0026150:	c3                   	ret    
c0026151:	90                   	nop

c0026152 <PIC::open(int, int, void*)>:
c0026152:	55                   	push   ebp
c0026153:	89 e5                	mov    ebp,esp
c0026155:	83 ec 18             	sub    esp,0x18
c0026158:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002615e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026162:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026165:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026169:	ee                   	out    dx,al
c002616a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026170:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026174:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026177:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002617b:	ee                   	out    dx,al
c002617c:	83 ec 0c             	sub    esp,0xc
c002617f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026182:	e8 5f fe ff ff       	call   c0025fe6 <PIC::remap()>
c0026187:	83 c4 10             	add    esp,0x10
c002618a:	b8 00 00 00 00       	mov    eax,0x0
c002618f:	c9                   	leave  
c0026190:	c3                   	ret    
c0026191:	90                   	nop

c0026192 <APICTimer::close(int, int, void*)>:
c0026192:	b8 00 00 00 00       	mov    eax,0x0
c0026197:	c3                   	ret    

c0026198 <apicTimerHandler(regs*, void*)>:
c0026198:	83 ec 0c             	sub    esp,0xc
c002619b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002619f:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a1:	99                   	cdq    
c00261a2:	52                   	push   edx
c00261a3:	50                   	push   eax
c00261a4:	6a 00                	push   0x0
c00261a6:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261ab:	e8 94 07 00 00       	call   c0026944 <__udivdi3>
c00261b0:	83 c4 10             	add    esp,0x10
c00261b3:	83 ec 08             	sub    esp,0x8
c00261b6:	52                   	push   edx
c00261b7:	50                   	push   eax
c00261b8:	e8 7a 05 ff ff       	call   c0016737 <timerHandler(unsigned long long)>
c00261bd:	83 c4 10             	add    esp,0x10
c00261c0:	90                   	nop
c00261c1:	83 c4 0c             	add    esp,0xc
c00261c4:	c3                   	ret    
c00261c5:	90                   	nop

c00261c6 <APICTimer::write(int)>:
c00261c6:	53                   	push   ebx
c00261c7:	83 ec 28             	sub    esp,0x28
c00261ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00261d2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261d8:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00261dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00261e3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00261e9:	83 ec 0c             	sub    esp,0xc
c00261ec:	50                   	push   eax
c00261ed:	e8 de f4 ff ff       	call   c00256d0 <APIC::getBase()>
c00261f2:	83 c4 10             	add    esp,0x10
c00261f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00261f9:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c00261fe:	8b 15 d4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3d4
c0026204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026208:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002620c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026210:	05 e0 03 00 00       	add    eax,0x3e0
c0026215:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002621b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002621f:	05 80 03 00 00       	add    eax,0x380
c0026224:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002622a:	fb                   	sti    
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026233:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026238:	83 d2 00             	adc    edx,0x0
c002623b:	89 c1                	mov    ecx,eax
c002623d:	89 d3                	mov    ebx,edx
c002623f:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c0026244:	8b 15 d4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3d4
c002624a:	39 c8                	cmp    eax,ecx
c002624c:	89 d0                	mov    eax,edx
c002624e:	19 d8                	sbb    eax,ebx
c0026250:	73 02                	jae    c0026254 <APICTimer::write(int)+0x8e>
c0026252:	eb d7                	jmp    c002622b <APICTimer::write(int)+0x65>
c0026254:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026258:	05 20 03 00 00       	add    eax,0x320
c002625d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026267:	05 90 03 00 00       	add    eax,0x390
c002626c:	8b 00                	mov    eax,DWORD PTR [eax]
c002626e:	f7 d0                	not    eax
c0026270:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026274:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002627c:	ba 00 00 00 00       	mov    edx,0x0
c0026281:	f7 f3                	div    ebx
c0026283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002628b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026291:	0d 00 00 02 00       	or     eax,0x20000
c0026296:	89 c2                	mov    edx,eax
c0026298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002629c:	05 20 03 00 00       	add    eax,0x320
c00262a1:	89 10                	mov    DWORD PTR [eax],edx
c00262a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262a7:	05 e0 03 00 00       	add    eax,0x3e0
c00262ac:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262b6:	05 80 03 00 00       	add    eax,0x380
c00262bb:	89 c2                	mov    edx,eax
c00262bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262c1:	89 02                	mov    DWORD PTR [edx],eax
c00262c3:	90                   	nop
c00262c4:	83 c4 28             	add    esp,0x28
c00262c7:	5b                   	pop    ebx
c00262c8:	c3                   	ret    
c00262c9:	90                   	nop

c00262ca <APICTimer::open(int, int, void*)>:
c00262ca:	57                   	push   edi
c00262cb:	56                   	push   esi
c00262cc:	53                   	push   ebx
c00262cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d3:	83 c0 24             	add    eax,0x24
c00262d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d8:	83 ec 08             	sub    esp,0x8
c00262db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262e3:	ff d0                	call   eax
c00262e5:	83 c4 10             	add    esp,0x10
c00262e8:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c00262ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262f3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262f9:	83 ec 0c             	sub    esp,0xc
c00262fc:	50                   	push   eax
c00262fd:	e8 ce f3 ff ff       	call   c00256d0 <APIC::getBase()>
c0026302:	83 c4 10             	add    esp,0x10
c0026305:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002630b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026315:	0f b6 f8             	movzx  edi,al
c0026318:	89 d0                	mov    eax,edx
c002631a:	ba 00 00 00 00       	mov    edx,0x0
c002631f:	89 c1                	mov    ecx,eax
c0026321:	80 e5 ff             	and    ch,0xff
c0026324:	89 cb                	mov    ebx,ecx
c0026326:	0f b6 f2             	movzx  esi,dl
c0026329:	89 d8                	mov    eax,ebx
c002632b:	89 f2                	mov    edx,esi
c002632d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026331:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026334:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026338:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002633c:	83 e0 00             	and    eax,0x0
c002633f:	09 d0                	or     eax,edx
c0026341:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026349:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002634f:	8d 50 01             	lea    edx,[eax+0x1]
c0026352:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026356:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002635c:	0f b6 d0             	movzx  edx,al
c002635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026363:	83 c2 08             	add    edx,0x8
c0026366:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002636a:	0f b6 c9             	movzx  ecx,cl
c002636d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026373:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002637f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026389:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002638d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026393:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026397:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002639d:	83 ec 0c             	sub    esp,0xc
c00263a0:	51                   	push   ecx
c00263a1:	6a 01                	push   0x1
c00263a3:	68 98 61 02 c0       	push   0xc0026198
c00263a8:	52                   	push   edx
c00263a9:	50                   	push   eax
c00263aa:	e8 3b d8 fe ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263af:	83 c4 20             	add    esp,0x20
c00263b2:	89 c2                	mov    edx,eax
c00263b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263be:	b8 00 00 00 00       	mov    eax,0x0
c00263c3:	5b                   	pop    ebx
c00263c4:	5e                   	pop    esi
c00263c5:	5f                   	pop    edi
c00263c6:	c3                   	ret    
c00263c7:	90                   	nop

c00263c8 <APICTimer::APICTimer()>:
c00263c8:	83 ec 0c             	sub    esp,0xc
c00263cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cf:	83 ec 08             	sub    esp,0x8
c00263d2:	68 94 ca 02 c0       	push   0xc002ca94
c00263d7:	50                   	push   eax
c00263d8:	e8 cb 02 ff ff       	call   c00166a8 <Timer::Timer(char const*)>
c00263dd:	83 c4 10             	add    esp,0x10
c00263e0:	ba a8 ca 02 c0       	mov    edx,0xc002caa8
c00263e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e9:	89 10                	mov    DWORD PTR [eax],edx
c00263eb:	90                   	nop
c00263ec:	83 c4 0c             	add    esp,0xc
c00263ef:	c3                   	ret    

c00263f0 <PIT::write(int)>:
c00263f0:	83 ec 10             	sub    esp,0x10
c00263f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026405:	a3 04 21 03 c0       	mov    ds:0xc0032104,eax
c002640a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002640f:	99                   	cdq    
c0026410:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026418:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002641f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026424:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026428:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002642d:	ee                   	out    dx,al
c002642e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026432:	0f b6 c0             	movzx  eax,al
c0026435:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002643c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026440:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026444:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026449:	ee                   	out    dx,al
c002644a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002644e:	c1 f8 08             	sar    eax,0x8
c0026451:	0f b6 c0             	movzx  eax,al
c0026454:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002645b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002645f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026463:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026468:	ee                   	out    dx,al
c0026469:	90                   	nop
c002646a:	83 c4 10             	add    esp,0x10
c002646d:	c3                   	ret    

c002646e <pitHandler(regs*, void*)>:
c002646e:	83 ec 0c             	sub    esp,0xc
c0026471:	a1 04 21 03 c0       	mov    eax,ds:0xc0032104
c0026476:	99                   	cdq    
c0026477:	52                   	push   edx
c0026478:	50                   	push   eax
c0026479:	6a 00                	push   0x0
c002647b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026480:	e8 bf 04 00 00       	call   c0026944 <__udivdi3>
c0026485:	83 c4 10             	add    esp,0x10
c0026488:	83 ec 08             	sub    esp,0x8
c002648b:	52                   	push   edx
c002648c:	50                   	push   eax
c002648d:	e8 a5 02 ff ff       	call   c0016737 <timerHandler(unsigned long long)>
c0026492:	83 c4 10             	add    esp,0x10
c0026495:	90                   	nop
c0026496:	83 c4 0c             	add    esp,0xc
c0026499:	c3                   	ret    

c002649a <PIT::open(int, int, void*)>:
c002649a:	83 ec 0c             	sub    esp,0xc
c002649d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00264a3:	83 c0 24             	add    eax,0x24
c00264a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00264a8:	83 ec 08             	sub    esp,0x8
c00264ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264b3:	ff d0                	call   eax
c00264b5:	83 c4 10             	add    esp,0x10
c00264b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bc:	83 ec 0c             	sub    esp,0xc
c00264bf:	6a 00                	push   0x0
c00264c1:	6a 01                	push   0x1
c00264c3:	68 6e 64 02 c0       	push   0xc002646e
c00264c8:	6a 00                	push   0x0
c00264ca:	50                   	push   eax
c00264cb:	e8 1a d7 fe ff       	call   c0013bea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264d0:	83 c4 20             	add    esp,0x20
c00264d3:	89 c2                	mov    edx,eax
c00264d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264df:	b8 00 00 00 00       	mov    eax,0x0
c00264e4:	83 c4 0c             	add    esp,0xc
c00264e7:	c3                   	ret    

c00264e8 <PIT::close(int, int, void*)>:
c00264e8:	83 ec 0c             	sub    esp,0xc
c00264eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00264f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fd:	6a 01                	push   0x1
c00264ff:	68 6e 64 02 c0       	push   0xc002646e
c0026504:	6a 00                	push   0x0
c0026506:	50                   	push   eax
c0026507:	e8 28 d7 fe ff       	call   c0013c34 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002650c:	83 c4 10             	add    esp,0x10
c002650f:	b8 00 00 00 00       	mov    eax,0x0
c0026514:	83 c4 0c             	add    esp,0xc
c0026517:	c3                   	ret    

c0026518 <PIT::PIT()>:
c0026518:	83 ec 0c             	sub    esp,0xc
c002651b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651f:	83 ec 08             	sub    esp,0x8
c0026522:	68 d0 ca 02 c0       	push   0xc002cad0
c0026527:	50                   	push   eax
c0026528:	e8 7b 01 ff ff       	call   c00166a8 <Timer::Timer(char const*)>
c002652d:	83 c4 10             	add    esp,0x10
c0026530:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c0026535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026539:	89 10                	mov    DWORD PTR [eax],edx
c002653b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026545:	0f b6 d0             	movzx  edx,al
c0026548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026557:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002655d:	0f b6 d0             	movzx  edx,al
c0026560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026564:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026573:	8d 50 01             	lea    edx,[eax+0x1]
c0026576:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002657a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026580:	0f b6 d0             	movzx  edx,al
c0026583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026587:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002658b:	83 e1 3f             	and    ecx,0x3f
c002658e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026592:	90                   	nop
c0026593:	83 c4 0c             	add    esp,0xc
c0026596:	c3                   	ret    
c0026597:	66 90                	xchg   ax,ax
c0026599:	66 90                	xchg   ax,ax
c002659b:	66 90                	xchg   ax,ax
c002659d:	66 90                	xchg   ax,ax
c002659f:	90                   	nop

c00265a0 <avxDetect>:
c00265a0:	b8 00 00 00 00       	mov    eax,0x0
c00265a5:	c3                   	ret    

c00265a6 <avxSave>:
c00265a6:	c3                   	ret    

c00265a7 <avxLoad>:
c00265a7:	c3                   	ret    

c00265a8 <avxInit>:
c00265a8:	c3                   	ret    

c00265a9 <avxClose>:
c00265a9:	c3                   	ret    

c00265aa <wouldSheSayYes>:
c00265aa:	c3                   	ret    
c00265ab:	49                   	dec    ecx
c00265ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265b4:	75 20                	jne    c00265d6 <sseDetect.noSSE+0x1>
c00265b6:	4e                   	dec    esi
c00265b7:	79 61                	jns    c002661a <x87Detect+0x14>
c00265b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265be:	66 90                	xchg   ax,ax

c00265c0 <absolutelyNoChanceInHell>:
c00265c0:	b8 01 00 00 00       	mov    eax,0x1
c00265c5:	0f a2                	cpuid  
c00265c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00265cd:	74 06                	je     c00265d5 <sseDetect.noSSE>
c00265cf:	b8 01 00 00 00       	mov    eax,0x1
c00265d4:	c3                   	ret    

c00265d5 <sseDetect.noSSE>:
c00265d5:	31 c0                	xor    eax,eax
c00265d7:	c3                   	ret    

c00265d8 <sseSave>:
c00265d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00265dd:	c3                   	ret    

c00265de <sseLoad>:
c00265de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00265e3:	c3                   	ret    

c00265e4 <sseInit>:
c00265e4:	e8 49 00 00 00       	call   c0026632 <x87Init>
c00265e9:	0f 20 e0             	mov    eax,cr4
c00265ec:	66 0d 00 06          	or     ax,0x600
c00265f0:	0f 22 e0             	mov    cr4,eax
c00265f3:	c3                   	ret    

c00265f4 <sseClose>:
c00265f4:	c3                   	ret    
c00265f5:	66 90                	xchg   ax,ax
c00265f7:	66 90                	xchg   ax,ax
c00265f9:	66 90                	xchg   ax,ax
c00265fb:	66 90                	xchg   ax,ax
c00265fd:	66 90                	xchg   ax,ax
c00265ff:	90                   	nop

c0026600 <value_37F>:
c0026600:	7f 03                	jg     c0026605 <value_37A+0x1>

c0026602 <value_37E>:
c0026602:	7e 03                	jle    c0026607 <x87Detect+0x1>

c0026604 <value_37A>:
c0026604:	7a 03                	jp     c0026609 <x87Detect+0x3>

c0026606 <x87Detect>:
c0026606:	b8 01 00 00 00       	mov    eax,0x1
c002660b:	0f a2                	cpuid  
c002660d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026613:	74 06                	je     c002661b <x87Detect.nox87>
c0026615:	b8 01 00 00 00       	mov    eax,0x1
c002661a:	c3                   	ret    

c002661b <x87Detect.nox87>:
c002661b:	b8 00 00 00 00       	mov    eax,0x0
c0026620:	c3                   	ret    

c0026621 <x87Save>:
c0026621:	55                   	push   ebp
c0026622:	89 e5                	mov    ebp,esp
c0026624:	9b dd 75 08          	fsave  [ebp+0x8]
c0026628:	c9                   	leave  
c0026629:	c3                   	ret    

c002662a <x87Load>:
c002662a:	55                   	push   ebp
c002662b:	89 e5                	mov    ebp,esp
c002662d:	dd 65 08             	frstor [ebp+0x8]
c0026630:	c9                   	leave  
c0026631:	c3                   	ret    

c0026632 <x87Init>:
c0026632:	9b db e3             	finit  
c0026635:	0f 20 c0             	mov    eax,cr0
c0026638:	66 25 fb ff          	and    ax,0xfffb
c002663c:	66 0d 22 00          	or     ax,0x22
c0026640:	0f 22 c0             	mov    cr0,eax
c0026643:	0f 06                	clts   
c0026645:	d9 2d 04 66 02 c0    	fldcw  WORD PTR ds:0xc0026604
c002664b:	c3                   	ret    

c002664c <x87Close>:
c002664c:	c3                   	ret    
c002664d:	66 90                	xchg   ax,ax
c002664f:	90                   	nop

c0026650 <__do_global_ctors_aux>:
c0026650:	a1 44 92 02 c0       	mov    eax,ds:0xc0029244
c0026655:	83 f8 ff             	cmp    eax,0xffffffff
c0026658:	74 1a                	je     c0026674 <__do_global_ctors_aux+0x24>
c002665a:	55                   	push   ebp
c002665b:	89 e5                	mov    ebp,esp
c002665d:	53                   	push   ebx
c002665e:	52                   	push   edx
c002665f:	bb 44 92 02 c0       	mov    ebx,0xc0029244
c0026664:	ff d0                	call   eax
c0026666:	83 eb 04             	sub    ebx,0x4
c0026669:	8b 03                	mov    eax,DWORD PTR [ebx]
c002666b:	83 f8 ff             	cmp    eax,0xffffffff
c002666e:	75 f4                	jne    c0026664 <__do_global_ctors_aux+0x14>
c0026670:	58                   	pop    eax
c0026671:	5b                   	pop    ebx
c0026672:	5d                   	pop    ebp
c0026673:	c3                   	ret    
c0026674:	c3                   	ret    
c0026675:	66 90                	xchg   ax,ax
c0026677:	90                   	nop

c0026678 <__divdi3>:
c0026678:	55                   	push   ebp
c0026679:	57                   	push   edi
c002667a:	56                   	push   esi
c002667b:	53                   	push   ebx
c002667c:	83 ec 1c             	sub    esp,0x1c
c002667f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026683:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026687:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002668a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002668e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026692:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026696:	85 db                	test   ebx,ebx
c0026698:	0f 88 8e 00 00 00    	js     c002672c <__divdi3+0xb4>
c002669e:	89 dd                	mov    ebp,ebx
c00266a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266a8:	89 d3                	mov    ebx,edx
c00266aa:	85 d2                	test   edx,edx
c00266ac:	79 0d                	jns    c00266bb <__divdi3+0x43>
c00266ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266b2:	f7 d8                	neg    eax
c00266b4:	83 d2 00             	adc    edx,0x0
c00266b7:	f7 da                	neg    edx
c00266b9:	89 d3                	mov    ebx,edx
c00266bb:	89 c7                	mov    edi,eax
c00266bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266c0:	85 db                	test   ebx,ebx
c00266c2:	75 48                	jne    c002670c <__divdi3+0x94>
c00266c4:	39 ef                	cmp    edi,ebp
c00266c6:	76 24                	jbe    c00266ec <__divdi3+0x74>
c00266c8:	89 ea                	mov    edx,ebp
c00266ca:	f7 f7                	div    edi
c00266cc:	89 c1                	mov    ecx,eax
c00266ce:	31 f6                	xor    esi,esi
c00266d0:	89 c8                	mov    eax,ecx
c00266d2:	89 f2                	mov    edx,esi
c00266d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266d8:	85 c9                	test   ecx,ecx
c00266da:	74 07                	je     c00266e3 <__divdi3+0x6b>
c00266dc:	f7 d8                	neg    eax
c00266de:	83 d2 00             	adc    edx,0x0
c00266e1:	f7 da                	neg    edx
c00266e3:	83 c4 1c             	add    esp,0x1c
c00266e6:	5b                   	pop    ebx
c00266e7:	5e                   	pop    esi
c00266e8:	5f                   	pop    edi
c00266e9:	5d                   	pop    ebp
c00266ea:	c3                   	ret    
c00266eb:	90                   	nop
c00266ec:	85 ff                	test   edi,edi
c00266ee:	75 0b                	jne    c00266fb <__divdi3+0x83>
c00266f0:	b8 01 00 00 00       	mov    eax,0x1
c00266f5:	31 d2                	xor    edx,edx
c00266f7:	f7 f3                	div    ebx
c00266f9:	89 c7                	mov    edi,eax
c00266fb:	31 d2                	xor    edx,edx
c00266fd:	89 e8                	mov    eax,ebp
c00266ff:	f7 f7                	div    edi
c0026701:	89 c6                	mov    esi,eax
c0026703:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026706:	f7 f7                	div    edi
c0026708:	89 c1                	mov    ecx,eax
c002670a:	eb c4                	jmp    c00266d0 <__divdi3+0x58>
c002670c:	39 eb                	cmp    ebx,ebp
c002670e:	77 3c                	ja     c002674c <__divdi3+0xd4>
c0026710:	0f bd f3             	bsr    esi,ebx
c0026713:	83 f6 1f             	xor    esi,0x1f
c0026716:	75 40                	jne    c0026758 <__divdi3+0xe0>
c0026718:	39 eb                	cmp    ebx,ebp
c002671a:	72 09                	jb     c0026725 <__divdi3+0xad>
c002671c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002671f:	0f 87 97 00 00 00    	ja     c00267bc <__divdi3+0x144>
c0026725:	b9 01 00 00 00       	mov    ecx,0x1
c002672a:	eb a4                	jmp    c00266d0 <__divdi3+0x58>
c002672c:	f7 d9                	neg    ecx
c002672e:	83 d3 00             	adc    ebx,0x0
c0026731:	f7 db                	neg    ebx
c0026733:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026736:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002673a:	89 dd                	mov    ebp,ebx
c002673c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026744:	e9 5f ff ff ff       	jmp    c00266a8 <__divdi3+0x30>
c0026749:	8d 76 00             	lea    esi,[esi+0x0]
c002674c:	31 f6                	xor    esi,esi
c002674e:	31 c9                	xor    ecx,ecx
c0026750:	e9 7b ff ff ff       	jmp    c00266d0 <__divdi3+0x58>
c0026755:	8d 76 00             	lea    esi,[esi+0x0]
c0026758:	b8 20 00 00 00       	mov    eax,0x20
c002675d:	29 f0                	sub    eax,esi
c002675f:	89 f1                	mov    ecx,esi
c0026761:	d3 e3                	shl    ebx,cl
c0026763:	89 fa                	mov    edx,edi
c0026765:	88 c1                	mov    cl,al
c0026767:	d3 ea                	shr    edx,cl
c0026769:	09 da                	or     edx,ebx
c002676b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002676f:	89 f1                	mov    ecx,esi
c0026771:	d3 e7                	shl    edi,cl
c0026773:	89 eb                	mov    ebx,ebp
c0026775:	88 c1                	mov    cl,al
c0026777:	d3 eb                	shr    ebx,cl
c0026779:	89 f1                	mov    ecx,esi
c002677b:	d3 e5                	shl    ebp,cl
c002677d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026780:	88 c1                	mov    cl,al
c0026782:	d3 ea                	shr    edx,cl
c0026784:	09 d5                	or     ebp,edx
c0026786:	89 e8                	mov    eax,ebp
c0026788:	89 da                	mov    edx,ebx
c002678a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002678e:	89 d3                	mov    ebx,edx
c0026790:	89 c5                	mov    ebp,eax
c0026792:	f7 e7                	mul    edi
c0026794:	39 d3                	cmp    ebx,edx
c0026796:	72 18                	jb     c00267b0 <__divdi3+0x138>
c0026798:	74 0a                	je     c00267a4 <__divdi3+0x12c>
c002679a:	89 e9                	mov    ecx,ebp
c002679c:	31 f6                	xor    esi,esi
c002679e:	e9 2d ff ff ff       	jmp    c00266d0 <__divdi3+0x58>
c00267a3:	90                   	nop
c00267a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267a7:	89 f1                	mov    ecx,esi
c00267a9:	d3 e7                	shl    edi,cl
c00267ab:	39 c7                	cmp    edi,eax
c00267ad:	73 eb                	jae    c002679a <__divdi3+0x122>
c00267af:	90                   	nop
c00267b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267b3:	31 f6                	xor    esi,esi
c00267b5:	e9 16 ff ff ff       	jmp    c00266d0 <__divdi3+0x58>
c00267ba:	66 90                	xchg   ax,ax
c00267bc:	31 c9                	xor    ecx,ecx
c00267be:	e9 0d ff ff ff       	jmp    c00266d0 <__divdi3+0x58>
c00267c3:	90                   	nop

c00267c4 <__moddi3>:
c00267c4:	55                   	push   ebp
c00267c5:	57                   	push   edi
c00267c6:	56                   	push   esi
c00267c7:	53                   	push   ebx
c00267c8:	83 ec 2c             	sub    esp,0x2c
c00267cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00267cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00267d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00267d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00267db:	85 db                	test   ebx,ebx
c00267dd:	0f 88 85 00 00 00    	js     c0026868 <__moddi3+0xa4>
c00267e3:	89 de                	mov    esi,ebx
c00267e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00267ed:	89 d7                	mov    edi,edx
c00267ef:	85 d2                	test   edx,edx
c00267f1:	79 09                	jns    c00267fc <__moddi3+0x38>
c00267f3:	f7 d8                	neg    eax
c00267f5:	83 d2 00             	adc    edx,0x0
c00267f8:	f7 da                	neg    edx
c00267fa:	89 d7                	mov    edi,edx
c00267fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026800:	89 cd                	mov    ebp,ecx
c0026802:	85 ff                	test   edi,edi
c0026804:	75 52                	jne    c0026858 <__moddi3+0x94>
c0026806:	89 c3                	mov    ebx,eax
c0026808:	39 f0                	cmp    eax,esi
c002680a:	76 24                	jbe    c0026830 <__moddi3+0x6c>
c002680c:	89 c8                	mov    eax,ecx
c002680e:	89 f2                	mov    edx,esi
c0026810:	f7 f3                	div    ebx
c0026812:	89 d6                	mov    esi,edx
c0026814:	89 f0                	mov    eax,esi
c0026816:	31 d2                	xor    edx,edx
c0026818:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002681c:	85 c9                	test   ecx,ecx
c002681e:	74 07                	je     c0026827 <__moddi3+0x63>
c0026820:	f7 d8                	neg    eax
c0026822:	83 d2 00             	adc    edx,0x0
c0026825:	f7 da                	neg    edx
c0026827:	83 c4 2c             	add    esp,0x2c
c002682a:	5b                   	pop    ebx
c002682b:	5e                   	pop    esi
c002682c:	5f                   	pop    edi
c002682d:	5d                   	pop    ebp
c002682e:	c3                   	ret    
c002682f:	90                   	nop
c0026830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026834:	85 db                	test   ebx,ebx
c0026836:	75 0d                	jne    c0026845 <__moddi3+0x81>
c0026838:	b8 01 00 00 00       	mov    eax,0x1
c002683d:	31 d2                	xor    edx,edx
c002683f:	f7 f7                	div    edi
c0026841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026845:	89 f0                	mov    eax,esi
c0026847:	31 d2                	xor    edx,edx
c0026849:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002684d:	f7 f7                	div    edi
c002684f:	89 e8                	mov    eax,ebp
c0026851:	f7 f7                	div    edi
c0026853:	89 d6                	mov    esi,edx
c0026855:	eb bd                	jmp    c0026814 <__moddi3+0x50>
c0026857:	90                   	nop
c0026858:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002685c:	39 f7                	cmp    edi,esi
c002685e:	76 20                	jbe    c0026880 <__moddi3+0xbc>
c0026860:	89 c8                	mov    eax,ecx
c0026862:	89 f2                	mov    edx,esi
c0026864:	eb b2                	jmp    c0026818 <__moddi3+0x54>
c0026866:	66 90                	xchg   ax,ax
c0026868:	f7 d9                	neg    ecx
c002686a:	83 d3 00             	adc    ebx,0x0
c002686d:	f7 db                	neg    ebx
c002686f:	89 de                	mov    esi,ebx
c0026871:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026879:	e9 6f ff ff ff       	jmp    c00267ed <__moddi3+0x29>
c002687e:	66 90                	xchg   ax,ax
c0026880:	0f bd c7             	bsr    eax,edi
c0026883:	83 f0 1f             	xor    eax,0x1f
c0026886:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002688a:	75 24                	jne    c00268b0 <__moddi3+0xec>
c002688c:	39 f7                	cmp    edi,esi
c002688e:	72 06                	jb     c0026896 <__moddi3+0xd2>
c0026890:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026894:	77 0c                	ja     c00268a2 <__moddi3+0xde>
c0026896:	89 e9                	mov    ecx,ebp
c0026898:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002689c:	19 fe                	sbb    esi,edi
c002689e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268a6:	89 f2                	mov    edx,esi
c00268a8:	e9 6b ff ff ff       	jmp    c0026818 <__moddi3+0x54>
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	b8 20 00 00 00       	mov    eax,0x20
c00268b5:	89 c2                	mov    edx,eax
c00268b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268bb:	29 da                	sub    edx,ebx
c00268bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268c1:	88 d9                	mov    cl,bl
c00268c3:	d3 e7                	shl    edi,cl
c00268c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268c9:	88 d1                	mov    cl,dl
c00268cb:	d3 e8                	shr    eax,cl
c00268cd:	09 c7                	or     edi,eax
c00268cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00268d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268d7:	89 d8                	mov    eax,ebx
c00268d9:	88 d9                	mov    cl,bl
c00268db:	d3 e7                	shl    edi,cl
c00268dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268e1:	89 f3                	mov    ebx,esi
c00268e3:	88 d1                	mov    cl,dl
c00268e5:	d3 eb                	shr    ebx,cl
c00268e7:	89 c7                	mov    edi,eax
c00268e9:	88 c1                	mov    cl,al
c00268eb:	d3 e6                	shl    esi,cl
c00268ed:	89 e8                	mov    eax,ebp
c00268ef:	88 d1                	mov    cl,dl
c00268f1:	d3 e8                	shr    eax,cl
c00268f3:	09 f0                	or     eax,esi
c00268f5:	89 f9                	mov    ecx,edi
c00268f7:	d3 e5                	shl    ebp,cl
c00268f9:	89 da                	mov    edx,ebx
c00268fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00268ff:	89 d3                	mov    ebx,edx
c0026901:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026905:	89 c6                	mov    esi,eax
c0026907:	89 d1                	mov    ecx,edx
c0026909:	39 d3                	cmp    ebx,edx
c002690b:	72 27                	jb     c0026934 <__moddi3+0x170>
c002690d:	74 21                	je     c0026930 <__moddi3+0x16c>
c002690f:	29 f5                	sub    ebp,esi
c0026911:	19 cb                	sbb    ebx,ecx
c0026913:	89 de                	mov    esi,ebx
c0026915:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026919:	d3 e6                	shl    esi,cl
c002691b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002691f:	89 f9                	mov    ecx,edi
c0026921:	d3 ed                	shr    ebp,cl
c0026923:	09 ee                	or     esi,ebp
c0026925:	89 f0                	mov    eax,esi
c0026927:	d3 eb                	shr    ebx,cl
c0026929:	89 da                	mov    edx,ebx
c002692b:	e9 e8 fe ff ff       	jmp    c0026818 <__moddi3+0x54>
c0026930:	39 c5                	cmp    ebp,eax
c0026932:	73 db                	jae    c002690f <__moddi3+0x14b>
c0026934:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026938:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002693c:	89 d1                	mov    ecx,edx
c002693e:	89 c6                	mov    esi,eax
c0026940:	eb cd                	jmp    c002690f <__moddi3+0x14b>
c0026942:	66 90                	xchg   ax,ax

c0026944 <__udivdi3>:
c0026944:	55                   	push   ebp
c0026945:	57                   	push   edi
c0026946:	56                   	push   esi
c0026947:	53                   	push   ebx
c0026948:	83 ec 1c             	sub    esp,0x1c
c002694b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002694f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026953:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026957:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002695b:	85 d2                	test   edx,edx
c002695d:	75 41                	jne    c00269a0 <__udivdi3+0x5c>
c002695f:	39 f7                	cmp    edi,esi
c0026961:	76 15                	jbe    c0026978 <__udivdi3+0x34>
c0026963:	89 e8                	mov    eax,ebp
c0026965:	89 f2                	mov    edx,esi
c0026967:	f7 f7                	div    edi
c0026969:	31 db                	xor    ebx,ebx
c002696b:	89 da                	mov    edx,ebx
c002696d:	83 c4 1c             	add    esp,0x1c
c0026970:	5b                   	pop    ebx
c0026971:	5e                   	pop    esi
c0026972:	5f                   	pop    edi
c0026973:	5d                   	pop    ebp
c0026974:	c3                   	ret    
c0026975:	8d 76 00             	lea    esi,[esi+0x0]
c0026978:	89 f9                	mov    ecx,edi
c002697a:	85 ff                	test   edi,edi
c002697c:	75 0b                	jne    c0026989 <__udivdi3+0x45>
c002697e:	b8 01 00 00 00       	mov    eax,0x1
c0026983:	31 d2                	xor    edx,edx
c0026985:	f7 f7                	div    edi
c0026987:	89 c1                	mov    ecx,eax
c0026989:	31 d2                	xor    edx,edx
c002698b:	89 f0                	mov    eax,esi
c002698d:	f7 f1                	div    ecx
c002698f:	89 c3                	mov    ebx,eax
c0026991:	89 e8                	mov    eax,ebp
c0026993:	f7 f1                	div    ecx
c0026995:	89 da                	mov    edx,ebx
c0026997:	83 c4 1c             	add    esp,0x1c
c002699a:	5b                   	pop    ebx
c002699b:	5e                   	pop    esi
c002699c:	5f                   	pop    edi
c002699d:	5d                   	pop    ebp
c002699e:	c3                   	ret    
c002699f:	90                   	nop
c00269a0:	39 f2                	cmp    edx,esi
c00269a2:	77 1c                	ja     c00269c0 <__udivdi3+0x7c>
c00269a4:	0f bd da             	bsr    ebx,edx
c00269a7:	83 f3 1f             	xor    ebx,0x1f
c00269aa:	75 24                	jne    c00269d0 <__udivdi3+0x8c>
c00269ac:	39 f2                	cmp    edx,esi
c00269ae:	72 08                	jb     c00269b8 <__udivdi3+0x74>
c00269b0:	39 ef                	cmp    edi,ebp
c00269b2:	0f 87 84 00 00 00    	ja     c0026a3c <__udivdi3+0xf8>
c00269b8:	b8 01 00 00 00       	mov    eax,0x1
c00269bd:	eb ac                	jmp    c002696b <__udivdi3+0x27>
c00269bf:	90                   	nop
c00269c0:	31 db                	xor    ebx,ebx
c00269c2:	31 c0                	xor    eax,eax
c00269c4:	89 da                	mov    edx,ebx
c00269c6:	83 c4 1c             	add    esp,0x1c
c00269c9:	5b                   	pop    ebx
c00269ca:	5e                   	pop    esi
c00269cb:	5f                   	pop    edi
c00269cc:	5d                   	pop    ebp
c00269cd:	c3                   	ret    
c00269ce:	66 90                	xchg   ax,ax
c00269d0:	b8 20 00 00 00       	mov    eax,0x20
c00269d5:	29 d8                	sub    eax,ebx
c00269d7:	88 d9                	mov    cl,bl
c00269d9:	d3 e2                	shl    edx,cl
c00269db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00269df:	89 fa                	mov    edx,edi
c00269e1:	88 c1                	mov    cl,al
c00269e3:	d3 ea                	shr    edx,cl
c00269e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269e9:	09 d1                	or     ecx,edx
c00269eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00269ef:	88 d9                	mov    cl,bl
c00269f1:	d3 e7                	shl    edi,cl
c00269f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269f7:	89 f7                	mov    edi,esi
c00269f9:	88 c1                	mov    cl,al
c00269fb:	d3 ef                	shr    edi,cl
c00269fd:	88 d9                	mov    cl,bl
c00269ff:	d3 e6                	shl    esi,cl
c0026a01:	89 ea                	mov    edx,ebp
c0026a03:	88 c1                	mov    cl,al
c0026a05:	d3 ea                	shr    edx,cl
c0026a07:	09 d6                	or     esi,edx
c0026a09:	89 f0                	mov    eax,esi
c0026a0b:	89 fa                	mov    edx,edi
c0026a0d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a11:	89 d7                	mov    edi,edx
c0026a13:	89 c6                	mov    esi,eax
c0026a15:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a19:	39 d7                	cmp    edi,edx
c0026a1b:	72 13                	jb     c0026a30 <__udivdi3+0xec>
c0026a1d:	74 09                	je     c0026a28 <__udivdi3+0xe4>
c0026a1f:	89 f0                	mov    eax,esi
c0026a21:	31 db                	xor    ebx,ebx
c0026a23:	e9 43 ff ff ff       	jmp    c002696b <__udivdi3+0x27>
c0026a28:	88 d9                	mov    cl,bl
c0026a2a:	d3 e5                	shl    ebp,cl
c0026a2c:	39 c5                	cmp    ebp,eax
c0026a2e:	73 ef                	jae    c0026a1f <__udivdi3+0xdb>
c0026a30:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a33:	31 db                	xor    ebx,ebx
c0026a35:	e9 31 ff ff ff       	jmp    c002696b <__udivdi3+0x27>
c0026a3a:	66 90                	xchg   ax,ax
c0026a3c:	31 c0                	xor    eax,eax
c0026a3e:	e9 28 ff ff ff       	jmp    c002696b <__udivdi3+0x27>
c0026a43:	90                   	nop

c0026a44 <__umoddi3>:
c0026a44:	55                   	push   ebp
c0026a45:	57                   	push   edi
c0026a46:	56                   	push   esi
c0026a47:	53                   	push   ebx
c0026a48:	83 ec 1c             	sub    esp,0x1c
c0026a4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a5b:	89 da                	mov    edx,ebx
c0026a5d:	85 c0                	test   eax,eax
c0026a5f:	75 37                	jne    c0026a98 <__umoddi3+0x54>
c0026a61:	39 df                	cmp    edi,ebx
c0026a63:	76 13                	jbe    c0026a78 <__umoddi3+0x34>
c0026a65:	89 f0                	mov    eax,esi
c0026a67:	f7 f7                	div    edi
c0026a69:	89 d0                	mov    eax,edx
c0026a6b:	31 d2                	xor    edx,edx
c0026a6d:	83 c4 1c             	add    esp,0x1c
c0026a70:	5b                   	pop    ebx
c0026a71:	5e                   	pop    esi
c0026a72:	5f                   	pop    edi
c0026a73:	5d                   	pop    ebp
c0026a74:	c3                   	ret    
c0026a75:	8d 76 00             	lea    esi,[esi+0x0]
c0026a78:	89 fd                	mov    ebp,edi
c0026a7a:	85 ff                	test   edi,edi
c0026a7c:	75 0b                	jne    c0026a89 <__umoddi3+0x45>
c0026a7e:	b8 01 00 00 00       	mov    eax,0x1
c0026a83:	31 d2                	xor    edx,edx
c0026a85:	f7 f7                	div    edi
c0026a87:	89 c5                	mov    ebp,eax
c0026a89:	89 d8                	mov    eax,ebx
c0026a8b:	31 d2                	xor    edx,edx
c0026a8d:	f7 f5                	div    ebp
c0026a8f:	89 f0                	mov    eax,esi
c0026a91:	f7 f5                	div    ebp
c0026a93:	89 d0                	mov    eax,edx
c0026a95:	eb d4                	jmp    c0026a6b <__umoddi3+0x27>
c0026a97:	90                   	nop
c0026a98:	89 f1                	mov    ecx,esi
c0026a9a:	39 d8                	cmp    eax,ebx
c0026a9c:	76 0a                	jbe    c0026aa8 <__umoddi3+0x64>
c0026a9e:	89 f0                	mov    eax,esi
c0026aa0:	83 c4 1c             	add    esp,0x1c
c0026aa3:	5b                   	pop    ebx
c0026aa4:	5e                   	pop    esi
c0026aa5:	5f                   	pop    edi
c0026aa6:	5d                   	pop    ebp
c0026aa7:	c3                   	ret    
c0026aa8:	0f bd e8             	bsr    ebp,eax
c0026aab:	83 f5 1f             	xor    ebp,0x1f
c0026aae:	75 1c                	jne    c0026acc <__umoddi3+0x88>
c0026ab0:	39 d8                	cmp    eax,ebx
c0026ab2:	72 04                	jb     c0026ab8 <__umoddi3+0x74>
c0026ab4:	39 f7                	cmp    edi,esi
c0026ab6:	77 08                	ja     c0026ac0 <__umoddi3+0x7c>
c0026ab8:	89 da                	mov    edx,ebx
c0026aba:	29 fe                	sub    esi,edi
c0026abc:	19 c2                	sbb    edx,eax
c0026abe:	89 f1                	mov    ecx,esi
c0026ac0:	89 c8                	mov    eax,ecx
c0026ac2:	83 c4 1c             	add    esp,0x1c
c0026ac5:	5b                   	pop    ebx
c0026ac6:	5e                   	pop    esi
c0026ac7:	5f                   	pop    edi
c0026ac8:	5d                   	pop    ebp
c0026ac9:	c3                   	ret    
c0026aca:	66 90                	xchg   ax,ax
c0026acc:	ba 20 00 00 00       	mov    edx,0x20
c0026ad1:	29 ea                	sub    edx,ebp
c0026ad3:	89 e9                	mov    ecx,ebp
c0026ad5:	d3 e0                	shl    eax,cl
c0026ad7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026adb:	89 f8                	mov    eax,edi
c0026add:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ae1:	88 d1                	mov    cl,dl
c0026ae3:	d3 e8                	shr    eax,cl
c0026ae5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ae9:	09 c1                	or     ecx,eax
c0026aeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026aef:	89 e9                	mov    ecx,ebp
c0026af1:	d3 e7                	shl    edi,cl
c0026af3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026af7:	89 d8                	mov    eax,ebx
c0026af9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026afd:	88 d1                	mov    cl,dl
c0026aff:	d3 e8                	shr    eax,cl
c0026b01:	89 c7                	mov    edi,eax
c0026b03:	89 e9                	mov    ecx,ebp
c0026b05:	d3 e3                	shl    ebx,cl
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	88 d1                	mov    cl,dl
c0026b0b:	d3 e8                	shr    eax,cl
c0026b0d:	09 d8                	or     eax,ebx
c0026b0f:	89 e9                	mov    ecx,ebp
c0026b11:	d3 e6                	shl    esi,cl
c0026b13:	89 f3                	mov    ebx,esi
c0026b15:	89 fa                	mov    edx,edi
c0026b17:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b1b:	89 d1                	mov    ecx,edx
c0026b1d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b21:	89 c6                	mov    esi,eax
c0026b23:	89 d7                	mov    edi,edx
c0026b25:	39 d1                	cmp    ecx,edx
c0026b27:	72 27                	jb     c0026b50 <__umoddi3+0x10c>
c0026b29:	74 21                	je     c0026b4c <__umoddi3+0x108>
c0026b2b:	89 ca                	mov    edx,ecx
c0026b2d:	29 f3                	sub    ebx,esi
c0026b2f:	19 fa                	sbb    edx,edi
c0026b31:	89 d0                	mov    eax,edx
c0026b33:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b37:	d3 e0                	shl    eax,cl
c0026b39:	89 e9                	mov    ecx,ebp
c0026b3b:	d3 eb                	shr    ebx,cl
c0026b3d:	09 d8                	or     eax,ebx
c0026b3f:	d3 ea                	shr    edx,cl
c0026b41:	83 c4 1c             	add    esp,0x1c
c0026b44:	5b                   	pop    ebx
c0026b45:	5e                   	pop    esi
c0026b46:	5f                   	pop    edi
c0026b47:	5d                   	pop    ebp
c0026b48:	c3                   	ret    
c0026b49:	8d 76 00             	lea    esi,[esi+0x0]
c0026b4c:	39 c3                	cmp    ebx,eax
c0026b4e:	73 db                	jae    c0026b2b <__umoddi3+0xe7>
c0026b50:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b54:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b58:	89 d7                	mov    edi,edx
c0026b5a:	89 c6                	mov    esi,eax
c0026b5c:	eb cd                	jmp    c0026b2b <__umoddi3+0xe7>

c0026b5e <__addsf3>:
c0026b5e:	55                   	push   ebp
c0026b5f:	89 e5                	mov    ebp,esp
c0026b61:	57                   	push   edi
c0026b62:	56                   	push   esi
c0026b63:	53                   	push   ebx
c0026b64:	83 ec 08             	sub    esp,0x8
c0026b67:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b6a:	89 fa                	mov    edx,edi
c0026b6c:	89 f8                	mov    eax,edi
c0026b6e:	c1 f8 17             	sar    eax,0x17
c0026b71:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b74:	c1 e2 08             	shl    edx,0x8
c0026b77:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b7d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b80:	89 de                	mov    esi,ebx
c0026b82:	c1 fe 17             	sar    esi,0x17
c0026b85:	c1 e3 08             	shl    ebx,0x8
c0026b88:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026b8e:	31 f0                	xor    eax,esi
c0026b90:	0f 88 3b 01 00 00    	js     c0026cd1 <__addsf3+0x173>
c0026b96:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b99:	29 f1                	sub    ecx,esi
c0026b9b:	85 c9                	test   ecx,ecx
c0026b9d:	7e 54                	jle    c0026bf3 <__addsf3+0x95>
c0026b9f:	89 f0                	mov    eax,esi
c0026ba1:	84 c0                	test   al,al
c0026ba3:	75 10                	jne    c0026bb5 <__addsf3+0x57>
c0026ba5:	85 db                	test   ebx,ebx
c0026ba7:	0f 84 aa 02 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026bad:	49                   	dec    ecx
c0026bae:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bb1:	74 38                	je     c0026beb <__addsf3+0x8d>
c0026bb3:	eb 13                	jmp    c0026bc8 <__addsf3+0x6a>
c0026bb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bb8:	f7 d0                	not    eax
c0026bba:	84 c0                	test   al,al
c0026bbc:	0f 84 95 02 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026bc2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026bc8:	83 f9 1f             	cmp    ecx,0x1f
c0026bcb:	0f 8f 86 02 00 00    	jg     c0026e57 <__addsf3+0x2f9>
c0026bd1:	89 de                	mov    esi,ebx
c0026bd3:	d3 ee                	shr    esi,cl
c0026bd5:	b8 20 00 00 00       	mov    eax,0x20
c0026bda:	29 c8                	sub    eax,ecx
c0026bdc:	89 c1                	mov    ecx,eax
c0026bde:	d3 e3                	shl    ebx,cl
c0026be0:	31 c0                	xor    eax,eax
c0026be2:	85 db                	test   ebx,ebx
c0026be4:	0f 95 c0             	setne  al
c0026be7:	09 f0                	or     eax,esi
c0026be9:	01 d0                	add    eax,edx
c0026beb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bee:	e9 b6 00 00 00       	jmp    c0026ca9 <__addsf3+0x14b>
c0026bf3:	74 5c                	je     c0026c51 <__addsf3+0xf3>
c0026bf5:	89 f1                	mov    ecx,esi
c0026bf7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026bfa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bfd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c01:	75 14                	jne    c0026c17 <__addsf3+0xb9>
c0026c03:	85 d2                	test   edx,edx
c0026c05:	0f 84 4c 02 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026c0b:	49                   	dec    ecx
c0026c0c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c0f:	0f 84 94 00 00 00    	je     c0026ca9 <__addsf3+0x14b>
c0026c15:	eb 12                	jmp    c0026c29 <__addsf3+0xcb>
c0026c17:	89 f0                	mov    eax,esi
c0026c19:	f7 d0                	not    eax
c0026c1b:	84 c0                	test   al,al
c0026c1d:	0f 84 34 02 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026c23:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c29:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c2c:	83 f9 1f             	cmp    ecx,0x1f
c0026c2f:	0f 8f 22 02 00 00    	jg     c0026e57 <__addsf3+0x2f9>
c0026c35:	89 d7                	mov    edi,edx
c0026c37:	d3 ef                	shr    edi,cl
c0026c39:	b8 20 00 00 00       	mov    eax,0x20
c0026c3e:	29 c8                	sub    eax,ecx
c0026c40:	89 c1                	mov    ecx,eax
c0026c42:	d3 e2                	shl    edx,cl
c0026c44:	31 c0                	xor    eax,eax
c0026c46:	85 d2                	test   edx,edx
c0026c48:	0f 95 c0             	setne  al
c0026c4b:	09 f8                	or     eax,edi
c0026c4d:	01 d8                	add    eax,ebx
c0026c4f:	eb 58                	jmp    c0026ca9 <__addsf3+0x14b>
c0026c51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c54:	8d 70 01             	lea    esi,[eax+0x1]
c0026c57:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c5d:	75 32                	jne    c0026c91 <__addsf3+0x133>
c0026c5f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c63:	75 1f                	jne    c0026c84 <__addsf3+0x126>
c0026c65:	85 d2                	test   edx,edx
c0026c67:	0f 84 e0 01 00 00    	je     c0026e4d <__addsf3+0x2ef>
c0026c6d:	85 db                	test   ebx,ebx
c0026c6f:	0f 84 e2 01 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026c75:	89 d0                	mov    eax,edx
c0026c77:	01 d8                	add    eax,ebx
c0026c79:	0f 89 a9 01 00 00    	jns    c0026e28 <__addsf3+0x2ca>
c0026c7f:	e9 9d 01 00 00       	jmp    c0026e21 <__addsf3+0x2c3>
c0026c84:	85 d2                	test   edx,edx
c0026c86:	0f 85 cb 01 00 00    	jne    c0026e57 <__addsf3+0x2f9>
c0026c8c:	e9 bc 01 00 00       	jmp    c0026e4d <__addsf3+0x2ef>
c0026c91:	31 c0                	xor    eax,eax
c0026c93:	89 f1                	mov    ecx,esi
c0026c95:	f7 d1                	not    ecx
c0026c97:	84 c9                	test   cl,cl
c0026c99:	0f 84 90 01 00 00    	je     c0026e2f <__addsf3+0x2d1>
c0026c9f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ca2:	d1 e8                	shr    eax,1
c0026ca4:	e9 86 01 00 00       	jmp    c0026e2f <__addsf3+0x2d1>
c0026ca9:	85 c0                	test   eax,eax
c0026cab:	0f 89 7e 01 00 00    	jns    c0026e2f <__addsf3+0x2d1>
c0026cb1:	46                   	inc    esi
c0026cb2:	89 f2                	mov    edx,esi
c0026cb4:	f7 d2                	not    edx
c0026cb6:	84 d2                	test   dl,dl
c0026cb8:	0f 84 6f 01 00 00    	je     c0026e2d <__addsf3+0x2cf>
c0026cbe:	89 c2                	mov    edx,eax
c0026cc0:	83 e2 01             	and    edx,0x1
c0026cc3:	d1 e8                	shr    eax,1
c0026cc5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026cca:	09 d0                	or     eax,edx
c0026ccc:	e9 5e 01 00 00       	jmp    c0026e2f <__addsf3+0x2d1>
c0026cd1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026cd8:	89 f0                	mov    eax,esi
c0026cda:	0f b6 c0             	movzx  eax,al
c0026cdd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ce0:	29 c1                	sub    ecx,eax
c0026ce2:	85 c9                	test   ecx,ecx
c0026ce4:	7e 55                	jle    c0026d3b <__addsf3+0x1dd>
c0026ce6:	85 c0                	test   eax,eax
c0026ce8:	75 11                	jne    c0026cfb <__addsf3+0x19d>
c0026cea:	85 db                	test   ebx,ebx
c0026cec:	0f 84 65 01 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026cf2:	49                   	dec    ecx
c0026cf3:	75 19                	jne    c0026d0e <__addsf3+0x1b0>
c0026cf5:	89 d0                	mov    eax,edx
c0026cf7:	29 d8                	sub    eax,ebx
c0026cf9:	eb 38                	jmp    c0026d33 <__addsf3+0x1d5>
c0026cfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cfe:	f7 d0                	not    eax
c0026d00:	84 c0                	test   al,al
c0026d02:	0f 84 4f 01 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026d08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d0e:	83 f9 1f             	cmp    ecx,0x1f
c0026d11:	0f 8f 40 01 00 00    	jg     c0026e57 <__addsf3+0x2f9>
c0026d17:	89 de                	mov    esi,ebx
c0026d19:	d3 ee                	shr    esi,cl
c0026d1b:	b8 20 00 00 00       	mov    eax,0x20
c0026d20:	29 c8                	sub    eax,ecx
c0026d22:	89 c1                	mov    ecx,eax
c0026d24:	d3 e3                	shl    ebx,cl
c0026d26:	31 c0                	xor    eax,eax
c0026d28:	85 db                	test   ebx,ebx
c0026d2a:	0f 95 c0             	setne  al
c0026d2d:	09 f0                	or     eax,esi
c0026d2f:	29 c2                	sub    edx,eax
c0026d31:	89 d0                	mov    eax,edx
c0026d33:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d36:	e9 af 00 00 00       	jmp    c0026dea <__addsf3+0x28c>
c0026d3b:	74 5c                	je     c0026d99 <__addsf3+0x23b>
c0026d3d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d40:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d43:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d47:	75 14                	jne    c0026d5d <__addsf3+0x1ff>
c0026d49:	85 d2                	test   edx,edx
c0026d4b:	0f 84 06 01 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026d51:	48                   	dec    eax
c0026d52:	75 1b                	jne    c0026d6f <__addsf3+0x211>
c0026d54:	89 d8                	mov    eax,ebx
c0026d56:	29 d0                	sub    eax,edx
c0026d58:	e9 8d 00 00 00       	jmp    c0026dea <__addsf3+0x28c>
c0026d5d:	89 f1                	mov    ecx,esi
c0026d5f:	f7 d1                	not    ecx
c0026d61:	84 c9                	test   cl,cl
c0026d63:	0f 84 ee 00 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026d69:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d72:	83 f8 1f             	cmp    eax,0x1f
c0026d75:	0f 8f dc 00 00 00    	jg     c0026e57 <__addsf3+0x2f9>
c0026d7b:	89 d7                	mov    edi,edx
c0026d7d:	88 c1                	mov    cl,al
c0026d7f:	d3 ef                	shr    edi,cl
c0026d81:	b9 20 00 00 00       	mov    ecx,0x20
c0026d86:	29 c1                	sub    ecx,eax
c0026d88:	d3 e2                	shl    edx,cl
c0026d8a:	31 c0                	xor    eax,eax
c0026d8c:	85 d2                	test   edx,edx
c0026d8e:	0f 95 c0             	setne  al
c0026d91:	09 f8                	or     eax,edi
c0026d93:	29 c3                	sub    ebx,eax
c0026d95:	89 d8                	mov    eax,ebx
c0026d97:	eb 51                	jmp    c0026dea <__addsf3+0x28c>
c0026d99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d9c:	40                   	inc    eax
c0026d9d:	a8 fe                	test   al,0xfe
c0026d9f:	75 3d                	jne    c0026dde <__addsf3+0x280>
c0026da1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026da5:	0f 85 a7 00 00 00    	jne    c0026e52 <__addsf3+0x2f4>
c0026dab:	85 d2                	test   edx,edx
c0026dad:	75 12                	jne    c0026dc1 <__addsf3+0x263>
c0026daf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026db2:	85 db                	test   ebx,ebx
c0026db4:	0f 85 9d 00 00 00    	jne    c0026e57 <__addsf3+0x2f9>
c0026dba:	31 ff                	xor    edi,edi
c0026dbc:	e9 96 00 00 00       	jmp    c0026e57 <__addsf3+0x2f9>
c0026dc1:	85 db                	test   ebx,ebx
c0026dc3:	0f 84 8e 00 00 00    	je     c0026e57 <__addsf3+0x2f9>
c0026dc9:	89 d0                	mov    eax,edx
c0026dcb:	29 d8                	sub    eax,ebx
c0026dcd:	79 06                	jns    c0026dd5 <__addsf3+0x277>
c0026dcf:	89 d8                	mov    eax,ebx
c0026dd1:	29 d0                	sub    eax,edx
c0026dd3:	eb 5a                	jmp    c0026e2f <__addsf3+0x2d1>
c0026dd5:	bf 00 00 00 00       	mov    edi,0x0
c0026dda:	74 7b                	je     c0026e57 <__addsf3+0x2f9>
c0026ddc:	eb 4a                	jmp    c0026e28 <__addsf3+0x2ca>
c0026dde:	89 d0                	mov    eax,edx
c0026de0:	29 d8                	sub    eax,ebx
c0026de2:	79 12                	jns    c0026df6 <__addsf3+0x298>
c0026de4:	89 d8                	mov    eax,ebx
c0026de6:	29 d0                	sub    eax,edx
c0026de8:	eb 09                	jmp    c0026df3 <__addsf3+0x295>
c0026dea:	85 c0                	test   eax,eax
c0026dec:	79 41                	jns    c0026e2f <__addsf3+0x2d1>
c0026dee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026df3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026df6:	31 f6                	xor    esi,esi
c0026df8:	85 c0                	test   eax,eax
c0026dfa:	74 33                	je     c0026e2f <__addsf3+0x2d1>
c0026dfc:	0f bd c8             	bsr    ecx,eax
c0026dff:	83 f1 1f             	xor    ecx,0x1f
c0026e02:	d3 e0                	shl    eax,cl
c0026e04:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e08:	39 ca                	cmp    edx,ecx
c0026e0a:	7f 10                	jg     c0026e1c <__addsf3+0x2be>
c0026e0c:	29 d1                	sub    ecx,edx
c0026e0e:	41                   	inc    ecx
c0026e0f:	d3 e8                	shr    eax,cl
c0026e11:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e14:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e1a:	eb 13                	jmp    c0026e2f <__addsf3+0x2d1>
c0026e1c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e1f:	29 ce                	sub    esi,ecx
c0026e21:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e26:	eb 07                	jmp    c0026e2f <__addsf3+0x2d1>
c0026e28:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e2b:	eb 02                	jmp    c0026e2f <__addsf3+0x2d1>
c0026e2d:	31 c0                	xor    eax,eax
c0026e2f:	89 c2                	mov    edx,eax
c0026e31:	c1 ea 08             	shr    edx,0x8
c0026e34:	a8 7f                	test   al,0x7f
c0026e36:	0f 95 c1             	setne  cl
c0026e39:	09 d1                	or     ecx,edx
c0026e3b:	83 e1 01             	and    ecx,0x1
c0026e3e:	c1 e8 07             	shr    eax,0x7
c0026e41:	21 c8                	and    eax,ecx
c0026e43:	c1 e6 17             	shl    esi,0x17
c0026e46:	09 d6                	or     esi,edx
c0026e48:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e4b:	eb 0a                	jmp    c0026e57 <__addsf3+0x2f9>
c0026e4d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e50:	eb 05                	jmp    c0026e57 <__addsf3+0x2f9>
c0026e52:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e57:	89 f8                	mov    eax,edi
c0026e59:	5a                   	pop    edx
c0026e5a:	59                   	pop    ecx
c0026e5b:	5b                   	pop    ebx
c0026e5c:	5e                   	pop    esi
c0026e5d:	5f                   	pop    edi
c0026e5e:	5d                   	pop    ebp
c0026e5f:	c3                   	ret    

c0026e60 <__subsf3>:
c0026e60:	55                   	push   ebp
c0026e61:	89 e5                	mov    ebp,esp
c0026e63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e66:	05 00 00 00 80       	add    eax,0x80000000
c0026e6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e6e:	5d                   	pop    ebp
c0026e6f:	e9 ea fc ff ff       	jmp    c0026b5e <__addsf3>

c0026e74 <__negsf2>:
c0026e74:	55                   	push   ebp
c0026e75:	89 e5                	mov    ebp,esp
c0026e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e7a:	05 00 00 00 80       	add    eax,0x80000000
c0026e7f:	5d                   	pop    ebp
c0026e80:	c3                   	ret    

c0026e81 <__mulsf3>:
c0026e81:	55                   	push   ebp
c0026e82:	89 e5                	mov    ebp,esp
c0026e84:	57                   	push   edi
c0026e85:	56                   	push   esi
c0026e86:	53                   	push   ebx
c0026e87:	83 ec 1c             	sub    esp,0x1c
c0026e8a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026e8d:	89 f0                	mov    eax,esi
c0026e8f:	89 f1                	mov    ecx,esi
c0026e91:	c1 f9 17             	sar    ecx,0x17
c0026e94:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e97:	c1 e0 08             	shl    eax,0x8
c0026e9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e9f:	89 c1                	mov    ecx,eax
c0026ea1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ea4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ea7:	89 c7                	mov    edi,eax
c0026ea9:	c1 ff 17             	sar    edi,0x17
c0026eac:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026eb0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026eb3:	89 f8                	mov    eax,edi
c0026eb5:	0f b6 c0             	movzx  eax,al
c0026eb8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ebb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ebf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ec2:	42                   	inc    edx
c0026ec3:	80 e2 fe             	and    dl,0xfe
c0026ec6:	75 7b                	jne    c0026f43 <__mulsf3+0xc2>
c0026ec8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ecc:	74 54                	je     c0026f22 <__mulsf3+0xa1>
c0026ece:	85 c9                	test   ecx,ecx
c0026ed0:	0f 85 64 01 00 00    	jne    c002703a <__mulsf3+0x1b9>
c0026ed6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ed9:	80 e2 fe             	and    dl,0xfe
c0026edc:	75 1f                	jne    c0026efd <__mulsf3+0x7c>
c0026ede:	85 c0                	test   eax,eax
c0026ee0:	b8 00 00 00 00       	mov    eax,0x0
c0026ee5:	74 29                	je     c0026f10 <__mulsf3+0x8f>
c0026ee7:	53                   	push   ebx
c0026ee8:	53                   	push   ebx
c0026ee9:	50                   	push   eax
c0026eea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eed:	e8 96 05 00 00       	call   c0027488 <__nesf2>
c0026ef2:	83 c4 10             	add    esp,0x10
c0026ef5:	85 c0                	test   eax,eax
c0026ef7:	0f 85 3a 01 00 00    	jne    c0027037 <__mulsf3+0x1b6>
c0026efd:	85 ff                	test   edi,edi
c0026eff:	0f 89 35 01 00 00    	jns    c002703a <__mulsf3+0x1b9>
c0026f05:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f0b:	e9 2a 01 00 00       	jmp    c002703a <__mulsf3+0x1b9>
c0026f10:	51                   	push   ecx
c0026f11:	51                   	push   ecx
c0026f12:	50                   	push   eax
c0026f13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f16:	e8 6d 05 00 00       	call   c0027488 <__nesf2>
c0026f1b:	83 c4 10             	add    esp,0x10
c0026f1e:	85 c0                	test   eax,eax
c0026f20:	eb 15                	jmp    c0026f37 <__mulsf3+0xb6>
c0026f22:	85 c9                	test   ecx,ecx
c0026f24:	74 0b                	je     c0026f31 <__mulsf3+0xb0>
c0026f26:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f29:	01 c9                	add    ecx,ecx
c0026f2b:	78 16                	js     c0026f43 <__mulsf3+0xc2>
c0026f2d:	89 d3                	mov    ebx,edx
c0026f2f:	eb f5                	jmp    c0026f26 <__mulsf3+0xa5>
c0026f31:	89 f8                	mov    eax,edi
c0026f33:	f7 d0                	not    eax
c0026f35:	84 c0                	test   al,al
c0026f37:	75 c4                	jne    c0026efd <__mulsf3+0x7c>
c0026f39:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f3e:	e9 f7 00 00 00       	jmp    c002703a <__mulsf3+0x1b9>
c0026f43:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f46:	c1 e6 08             	shl    esi,0x8
c0026f49:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f4f:	8d 57 01             	lea    edx,[edi+0x1]
c0026f52:	80 e2 fe             	and    dl,0xfe
c0026f55:	75 63                	jne    c0026fba <__mulsf3+0x139>
c0026f57:	85 c0                	test   eax,eax
c0026f59:	74 2f                	je     c0026f8a <__mulsf3+0x109>
c0026f5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f5f:	0f 89 d2 00 00 00    	jns    c0027037 <__mulsf3+0x1b6>
c0026f65:	52                   	push   edx
c0026f66:	52                   	push   edx
c0026f67:	6a 00                	push   0x0
c0026f69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f6c:	e8 dc 04 00 00       	call   c002744d <__eqsf2>
c0026f71:	83 c4 10             	add    esp,0x10
c0026f74:	85 c0                	test   eax,eax
c0026f76:	0f 85 bb 00 00 00    	jne    c0027037 <__mulsf3+0x1b6>
c0026f7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f7f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f85:	e9 b0 00 00 00       	jmp    c002703a <__mulsf3+0x1b9>
c0026f8a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f8d:	50                   	push   eax
c0026f8e:	50                   	push   eax
c0026f8f:	6a 00                	push   0x0
c0026f91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f94:	e8 b4 04 00 00       	call   c002744d <__eqsf2>
c0026f99:	83 c4 10             	add    esp,0x10
c0026f9c:	85 c0                	test   eax,eax
c0026f9e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fa1:	75 0c                	jne    c0026faf <__mulsf3+0x12e>
c0026fa3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fa7:	0f 89 8a 00 00 00    	jns    c0027037 <__mulsf3+0x1b6>
c0026fad:	eb cd                	jmp    c0026f7c <__mulsf3+0xfb>
c0026faf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fb2:	01 f6                	add    esi,esi
c0026fb4:	78 04                	js     c0026fba <__mulsf3+0x139>
c0026fb6:	89 c3                	mov    ebx,eax
c0026fb8:	eb f5                	jmp    c0026faf <__mulsf3+0x12e>
c0026fba:	89 c8                	mov    eax,ecx
c0026fbc:	0d 00 00 00 80       	or     eax,0x80000000
c0026fc1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fc7:	f7 e6                	mul    esi
c0026fc9:	85 c0                	test   eax,eax
c0026fcb:	0f 95 c0             	setne  al
c0026fce:	0f b6 c0             	movzx  eax,al
c0026fd1:	09 c2                	or     edx,eax
c0026fd3:	78 03                	js     c0026fd8 <__mulsf3+0x157>
c0026fd5:	01 d2                	add    edx,edx
c0026fd7:	4b                   	dec    ebx
c0026fd8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026fde:	7f 22                	jg     c0027002 <__mulsf3+0x181>
c0026fe0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fe6:	85 db                	test   ebx,ebx
c0026fe8:	7f 23                	jg     c002700d <__mulsf3+0x18c>
c0026fea:	83 fb e9             	cmp    ebx,0xffffffe9
c0026fed:	7c 1a                	jl     c0027009 <__mulsf3+0x188>
c0026fef:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ff5:	b9 01 00 00 00       	mov    ecx,0x1
c0026ffa:	29 d9                	sub    ecx,ebx
c0026ffc:	d3 ea                	shr    edx,cl
c0026ffe:	31 db                	xor    ebx,ebx
c0027000:	eb 0b                	jmp    c002700d <__mulsf3+0x18c>
c0027002:	bb ff 00 00 00       	mov    ebx,0xff
c0027007:	eb 02                	jmp    c002700b <__mulsf3+0x18a>
c0027009:	31 db                	xor    ebx,ebx
c002700b:	31 d2                	xor    edx,edx
c002700d:	89 d0                	mov    eax,edx
c002700f:	c1 e8 08             	shr    eax,0x8
c0027012:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027015:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002701b:	09 fb                	or     ebx,edi
c002701d:	c1 e3 17             	shl    ebx,0x17
c0027020:	09 c3                	or     ebx,eax
c0027022:	f6 c2 7f             	test   dl,0x7f
c0027025:	0f 95 c1             	setne  cl
c0027028:	09 c8                	or     eax,ecx
c002702a:	83 e0 01             	and    eax,0x1
c002702d:	c1 ea 07             	shr    edx,0x7
c0027030:	21 c2                	and    edx,eax
c0027032:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027035:	eb 03                	jmp    c002703a <__mulsf3+0x1b9>
c0027037:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002703a:	89 f0                	mov    eax,esi
c002703c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002703f:	5b                   	pop    ebx
c0027040:	5e                   	pop    esi
c0027041:	5f                   	pop    edi
c0027042:	5d                   	pop    ebp
c0027043:	c3                   	ret    

c0027044 <__divsf3>:
c0027044:	55                   	push   ebp
c0027045:	89 e5                	mov    ebp,esp
c0027047:	57                   	push   edi
c0027048:	56                   	push   esi
c0027049:	53                   	push   ebx
c002704a:	83 ec 1c             	sub    esp,0x1c
c002704d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027050:	89 d8                	mov    eax,ebx
c0027052:	89 d9                	mov    ecx,ebx
c0027054:	c1 f9 17             	sar    ecx,0x17
c0027057:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002705a:	c1 e0 08             	shl    eax,0x8
c002705d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027062:	89 c1                	mov    ecx,eax
c0027064:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027067:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002706a:	89 c7                	mov    edi,eax
c002706c:	c1 ff 17             	sar    edi,0x17
c002706f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027073:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027076:	89 f8                	mov    eax,edi
c0027078:	0f b6 c0             	movzx  eax,al
c002707b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002707e:	29 c6                	sub    esi,eax
c0027080:	83 c6 7f             	add    esi,0x7f
c0027083:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027086:	42                   	inc    edx
c0027087:	80 e2 fe             	and    dl,0xfe
c002708a:	0f 85 9c 00 00 00    	jne    c002712c <__divsf3+0xe8>
c0027090:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027094:	74 33                	je     c00270c9 <__divsf3+0x85>
c0027096:	85 c9                	test   ecx,ecx
c0027098:	0f 85 c7 01 00 00    	jne    c0027265 <__divsf3+0x221>
c002709e:	8d 57 01             	lea    edx,[edi+0x1]
c00270a1:	80 e2 fe             	and    dl,0xfe
c00270a4:	75 2f                	jne    c00270d5 <__divsf3+0x91>
c00270a6:	85 c0                	test   eax,eax
c00270a8:	74 2b                	je     c00270d5 <__divsf3+0x91>
c00270aa:	51                   	push   ecx
c00270ab:	51                   	push   ecx
c00270ac:	6a 00                	push   0x0
c00270ae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b1:	e8 d2 03 00 00       	call   c0027488 <__nesf2>
c00270b6:	83 c4 10             	add    esp,0x10
c00270b9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270bc:	85 c0                	test   eax,eax
c00270be:	0f 85 a1 01 00 00    	jne    c0027265 <__divsf3+0x221>
c00270c4:	e9 92 01 00 00       	jmp    c002725b <__divsf3+0x217>
c00270c9:	85 c9                	test   ecx,ecx
c00270cb:	75 1b                	jne    c00270e8 <__divsf3+0xa4>
c00270cd:	8d 57 01             	lea    edx,[edi+0x1]
c00270d0:	80 e2 fe             	and    dl,0xfe
c00270d3:	74 1e                	je     c00270f3 <__divsf3+0xaf>
c00270d5:	85 ff                	test   edi,edi
c00270d7:	0f 89 88 01 00 00    	jns    c0027265 <__divsf3+0x221>
c00270dd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00270e3:	e9 7d 01 00 00       	jmp    c0027265 <__divsf3+0x221>
c00270e8:	8d 56 ff             	lea    edx,[esi-0x1]
c00270eb:	01 c9                	add    ecx,ecx
c00270ed:	78 3d                	js     c002712c <__divsf3+0xe8>
c00270ef:	89 d6                	mov    esi,edx
c00270f1:	eb f5                	jmp    c00270e8 <__divsf3+0xa4>
c00270f3:	85 c0                	test   eax,eax
c00270f5:	b8 00 00 00 00       	mov    eax,0x0
c00270fa:	74 18                	je     c0027114 <__divsf3+0xd0>
c00270fc:	52                   	push   edx
c00270fd:	52                   	push   edx
c00270fe:	50                   	push   eax
c00270ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027102:	e8 81 03 00 00       	call   c0027488 <__nesf2>
c0027107:	83 c4 10             	add    esp,0x10
c002710a:	85 c0                	test   eax,eax
c002710c:	0f 85 50 01 00 00    	jne    c0027262 <__divsf3+0x21e>
c0027112:	eb c1                	jmp    c00270d5 <__divsf3+0x91>
c0027114:	56                   	push   esi
c0027115:	56                   	push   esi
c0027116:	50                   	push   eax
c0027117:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002711a:	e8 69 03 00 00       	call   c0027488 <__nesf2>
c002711f:	83 c4 10             	add    esp,0x10
c0027122:	85 c0                	test   eax,eax
c0027124:	0f 84 31 01 00 00    	je     c002725b <__divsf3+0x217>
c002712a:	eb a9                	jmp    c00270d5 <__divsf3+0x91>
c002712c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002712f:	c1 e3 08             	shl    ebx,0x8
c0027132:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027138:	8d 57 01             	lea    edx,[edi+0x1]
c002713b:	80 e2 fe             	and    dl,0xfe
c002713e:	75 71                	jne    c00271b1 <__divsf3+0x16d>
c0027140:	85 c0                	test   eax,eax
c0027142:	ba 00 00 00 00       	mov    edx,0x0
c0027147:	74 2f                	je     c0027178 <__divsf3+0x134>
c0027149:	51                   	push   ecx
c002714a:	51                   	push   ecx
c002714b:	52                   	push   edx
c002714c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002714f:	e8 f9 02 00 00       	call   c002744d <__eqsf2>
c0027154:	83 c4 10             	add    esp,0x10
c0027157:	85 c0                	test   eax,eax
c0027159:	0f 85 03 01 00 00    	jne    c0027262 <__divsf3+0x21e>
c002715f:	31 d2                	xor    edx,edx
c0027161:	89 d3                	mov    ebx,edx
c0027163:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027166:	31 f8                	xor    eax,edi
c0027168:	0f 89 f7 00 00 00    	jns    c0027265 <__divsf3+0x221>
c002716e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027173:	e9 ed 00 00 00       	jmp    c0027265 <__divsf3+0x221>
c0027178:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002717b:	50                   	push   eax
c002717c:	50                   	push   eax
c002717d:	52                   	push   edx
c002717e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027181:	e8 c7 02 00 00       	call   c002744d <__eqsf2>
c0027186:	83 c4 10             	add    esp,0x10
c0027189:	85 c0                	test   eax,eax
c002718b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002718e:	75 16                	jne    c00271a6 <__divsf3+0x162>
c0027190:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027193:	31 fb                	xor    ebx,edi
c0027195:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002719b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271a1:	e9 bf 00 00 00       	jmp    c0027265 <__divsf3+0x221>
c00271a6:	8d 46 01             	lea    eax,[esi+0x1]
c00271a9:	01 db                	add    ebx,ebx
c00271ab:	78 04                	js     c00271b1 <__divsf3+0x16d>
c00271ad:	89 c6                	mov    esi,eax
c00271af:	eb f5                	jmp    c00271a6 <__divsf3+0x162>
c00271b1:	89 c8                	mov    eax,ecx
c00271b3:	0d 00 00 00 80       	or     eax,0x80000000
c00271b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271be:	31 d2                	xor    edx,edx
c00271c0:	39 d8                	cmp    eax,ebx
c00271c2:	72 07                	jb     c00271cb <__divsf3+0x187>
c00271c4:	29 d8                	sub    eax,ebx
c00271c6:	ba 01 00 00 00       	mov    edx,0x1
c00271cb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00271d2:	01 d2                	add    edx,edx
c00271d4:	89 c1                	mov    ecx,eax
c00271d6:	01 c0                	add    eax,eax
c00271d8:	85 c9                	test   ecx,ecx
c00271da:	78 04                	js     c00271e0 <__divsf3+0x19c>
c00271dc:	39 c3                	cmp    ebx,eax
c00271de:	77 05                	ja     c00271e5 <__divsf3+0x1a1>
c00271e0:	29 d8                	sub    eax,ebx
c00271e2:	83 ca 01             	or     edx,0x1
c00271e5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00271e8:	75 e8                	jne    c00271d2 <__divsf3+0x18e>
c00271ea:	85 c0                	test   eax,eax
c00271ec:	0f 95 c0             	setne  al
c00271ef:	0f b6 c0             	movzx  eax,al
c00271f2:	c1 e2 06             	shl    edx,0x6
c00271f5:	09 c2                	or     edx,eax
c00271f7:	78 03                	js     c00271fc <__divsf3+0x1b8>
c00271f9:	01 d2                	add    edx,edx
c00271fb:	4e                   	dec    esi
c00271fc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027202:	7f 22                	jg     c0027226 <__divsf3+0x1e2>
c0027204:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002720a:	85 f6                	test   esi,esi
c002720c:	7f 23                	jg     c0027231 <__divsf3+0x1ed>
c002720e:	83 fe e9             	cmp    esi,0xffffffe9
c0027211:	7c 1a                	jl     c002722d <__divsf3+0x1e9>
c0027213:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027219:	b9 01 00 00 00       	mov    ecx,0x1
c002721e:	29 f1                	sub    ecx,esi
c0027220:	d3 ea                	shr    edx,cl
c0027222:	31 f6                	xor    esi,esi
c0027224:	eb 0b                	jmp    c0027231 <__divsf3+0x1ed>
c0027226:	be ff 00 00 00       	mov    esi,0xff
c002722b:	eb 02                	jmp    c002722f <__divsf3+0x1eb>
c002722d:	31 f6                	xor    esi,esi
c002722f:	31 d2                	xor    edx,edx
c0027231:	89 d0                	mov    eax,edx
c0027233:	c1 e8 08             	shr    eax,0x8
c0027236:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027239:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002723f:	09 fe                	or     esi,edi
c0027241:	c1 e6 17             	shl    esi,0x17
c0027244:	09 c6                	or     esi,eax
c0027246:	f6 c2 7f             	test   dl,0x7f
c0027249:	0f 95 c1             	setne  cl
c002724c:	09 c8                	or     eax,ecx
c002724e:	83 e0 01             	and    eax,0x1
c0027251:	c1 ea 07             	shr    edx,0x7
c0027254:	21 c2                	and    edx,eax
c0027256:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027259:	eb 0a                	jmp    c0027265 <__divsf3+0x221>
c002725b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027260:	eb 03                	jmp    c0027265 <__divsf3+0x221>
c0027262:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027265:	89 d8                	mov    eax,ebx
c0027267:	8d 65 f4             	lea    esp,[ebp-0xc]
c002726a:	5b                   	pop    ebx
c002726b:	5e                   	pop    esi
c002726c:	5f                   	pop    edi
c002726d:	5d                   	pop    ebp
c002726e:	c3                   	ret    

c002726f <__floatsisf>:
c002726f:	55                   	push   ebp
c0027270:	89 e5                	mov    ebp,esp
c0027272:	53                   	push   ebx
c0027273:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027276:	85 d2                	test   edx,edx
c0027278:	7e 2b                	jle    c00272a5 <__floatsisf+0x36>
c002727a:	0f bd ca             	bsr    ecx,edx
c002727d:	83 f1 1f             	xor    ecx,0x1f
c0027280:	d3 e2                	shl    edx,cl
c0027282:	89 d0                	mov    eax,edx
c0027284:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027289:	89 c3                	mov    ebx,eax
c002728b:	c1 eb 08             	shr    ebx,0x8
c002728e:	80 e2 7f             	and    dl,0x7f
c0027291:	0f 95 c2             	setne  dl
c0027294:	09 da                	or     edx,ebx
c0027296:	83 e2 01             	and    edx,0x1
c0027299:	c1 e8 07             	shr    eax,0x7
c002729c:	21 c2                	and    edx,eax
c002729e:	b8 9e 00 00 00       	mov    eax,0x9e
c00272a3:	eb 32                	jmp    c00272d7 <__floatsisf+0x68>
c00272a5:	b8 00 00 00 00       	mov    eax,0x0
c00272aa:	74 34                	je     c00272e0 <__floatsisf+0x71>
c00272ac:	f7 da                	neg    edx
c00272ae:	0f bd ca             	bsr    ecx,edx
c00272b1:	83 f1 1f             	xor    ecx,0x1f
c00272b4:	d3 e2                	shl    edx,cl
c00272b6:	89 d0                	mov    eax,edx
c00272b8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272bd:	89 c3                	mov    ebx,eax
c00272bf:	c1 eb 08             	shr    ebx,0x8
c00272c2:	80 e2 7f             	and    dl,0x7f
c00272c5:	0f 95 c2             	setne  dl
c00272c8:	09 da                	or     edx,ebx
c00272ca:	83 e2 01             	and    edx,0x1
c00272cd:	c1 e8 07             	shr    eax,0x7
c00272d0:	21 c2                	and    edx,eax
c00272d2:	b8 9e 01 00 00       	mov    eax,0x19e
c00272d7:	29 c8                	sub    eax,ecx
c00272d9:	c1 e0 17             	shl    eax,0x17
c00272dc:	09 d8                	or     eax,ebx
c00272de:	01 d0                	add    eax,edx
c00272e0:	5b                   	pop    ebx
c00272e1:	5d                   	pop    ebp
c00272e2:	c3                   	ret    

c00272e3 <__floatunsisf>:
c00272e3:	55                   	push   ebp
c00272e4:	89 e5                	mov    ebp,esp
c00272e6:	53                   	push   ebx
c00272e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272ea:	31 c0                	xor    eax,eax
c00272ec:	85 d2                	test   edx,edx
c00272ee:	74 32                	je     c0027322 <__floatunsisf+0x3f>
c00272f0:	0f bd ca             	bsr    ecx,edx
c00272f3:	83 f1 1f             	xor    ecx,0x1f
c00272f6:	d3 e2                	shl    edx,cl
c00272f8:	89 d0                	mov    eax,edx
c00272fa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272ff:	89 c3                	mov    ebx,eax
c0027301:	c1 eb 08             	shr    ebx,0x8
c0027304:	80 e2 7f             	and    dl,0x7f
c0027307:	0f 95 c2             	setne  dl
c002730a:	09 da                	or     edx,ebx
c002730c:	83 e2 01             	and    edx,0x1
c002730f:	c1 e8 07             	shr    eax,0x7
c0027312:	21 c2                	and    edx,eax
c0027314:	b8 9e 00 00 00       	mov    eax,0x9e
c0027319:	29 c8                	sub    eax,ecx
c002731b:	c1 e0 17             	shl    eax,0x17
c002731e:	09 d8                	or     eax,ebx
c0027320:	01 d0                	add    eax,edx
c0027322:	5b                   	pop    ebx
c0027323:	5d                   	pop    ebp
c0027324:	c3                   	ret    

c0027325 <__fixsfsi>:
c0027325:	55                   	push   ebp
c0027326:	89 e5                	mov    ebp,esp
c0027328:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002732b:	89 d1                	mov    ecx,edx
c002732d:	c1 e1 08             	shl    ecx,0x8
c0027330:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027336:	c1 fa 17             	sar    edx,0x17
c0027339:	78 1c                	js     c0027357 <__fixsfsi+0x32>
c002733b:	83 ea 7f             	sub    edx,0x7f
c002733e:	31 c0                	xor    eax,eax
c0027340:	83 fa 1e             	cmp    edx,0x1e
c0027343:	77 40                	ja     c0027385 <__fixsfsi+0x60>
c0027345:	89 c8                	mov    eax,ecx
c0027347:	0d 00 00 00 80       	or     eax,0x80000000
c002734c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027351:	29 d1                	sub    ecx,edx
c0027353:	d3 e8                	shr    eax,cl
c0027355:	eb 2e                	jmp    c0027385 <__fixsfsi+0x60>
c0027357:	31 c0                	xor    eax,eax
c0027359:	81 c2 81 00 00 00    	add    edx,0x81
c002735f:	78 24                	js     c0027385 <__fixsfsi+0x60>
c0027361:	83 fa 1e             	cmp    edx,0x1e
c0027364:	7e 09                	jle    c002736f <__fixsfsi+0x4a>
c0027366:	83 fa 1f             	cmp    edx,0x1f
c0027369:	75 18                	jne    c0027383 <__fixsfsi+0x5e>
c002736b:	85 c9                	test   ecx,ecx
c002736d:	75 14                	jne    c0027383 <__fixsfsi+0x5e>
c002736f:	89 c8                	mov    eax,ecx
c0027371:	0d 00 00 00 80       	or     eax,0x80000000
c0027376:	b9 1f 00 00 00       	mov    ecx,0x1f
c002737b:	29 d1                	sub    ecx,edx
c002737d:	d3 e8                	shr    eax,cl
c002737f:	f7 d8                	neg    eax
c0027381:	eb 02                	jmp    c0027385 <__fixsfsi+0x60>
c0027383:	31 c0                	xor    eax,eax
c0027385:	5d                   	pop    ebp
c0027386:	c3                   	ret    

c0027387 <__fixunssfsi>:
c0027387:	55                   	push   ebp
c0027388:	89 e5                	mov    ebp,esp
c002738a:	53                   	push   ebx
c002738b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002738e:	89 d3                	mov    ebx,edx
c0027390:	c1 fb 17             	sar    ebx,0x17
c0027393:	83 eb 7f             	sub    ebx,0x7f
c0027396:	31 c0                	xor    eax,eax
c0027398:	83 fb 1f             	cmp    ebx,0x1f
c002739b:	77 18                	ja     c00273b5 <__fixunssfsi+0x2e>
c002739d:	89 d0                	mov    eax,edx
c002739f:	c1 e0 08             	shl    eax,0x8
c00273a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273a7:	0d 00 00 00 80       	or     eax,0x80000000
c00273ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273b1:	29 d9                	sub    ecx,ebx
c00273b3:	d3 e8                	shr    eax,cl
c00273b5:	5b                   	pop    ebx
c00273b6:	5d                   	pop    ebp
c00273b7:	c3                   	ret    

c00273b8 <__cmpsf2>:
c00273b8:	55                   	push   ebp
c00273b9:	89 e5                	mov    ebp,esp
c00273bb:	57                   	push   edi
c00273bc:	56                   	push   esi
c00273bd:	53                   	push   ebx
c00273be:	83 ec 24             	sub    esp,0x24
c00273c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273c7:	e8 4f 10 00 00       	call   c002841b <__truncdfsf2>
c00273cc:	5a                   	pop    edx
c00273cd:	59                   	pop    ecx
c00273ce:	89 c3                	mov    ebx,eax
c00273d0:	c1 e8 17             	shr    eax,0x17
c00273d3:	0f b6 f0             	movzx  esi,al
c00273d6:	89 d8                	mov    eax,ebx
c00273d8:	c1 e8 1f             	shr    eax,0x1f
c00273db:	31 c6                	xor    esi,eax
c00273dd:	c1 e3 08             	shl    ebx,0x8
c00273e0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00273e3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00273e6:	e8 30 10 00 00       	call   c002841b <__truncdfsf2>
c00273eb:	83 c4 10             	add    esp,0x10
c00273ee:	89 c1                	mov    ecx,eax
c00273f0:	c1 e9 17             	shr    ecx,0x17
c00273f3:	0f b6 c9             	movzx  ecx,cl
c00273f6:	89 c7                	mov    edi,eax
c00273f8:	c1 ef 1f             	shr    edi,0x1f
c00273fb:	89 ca                	mov    edx,ecx
c00273fd:	31 fa                	xor    edx,edi
c00273ff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027402:	c1 e0 08             	shl    eax,0x8
c0027405:	89 c2                	mov    edx,eax
c0027407:	89 d8                	mov    eax,ebx
c0027409:	09 d0                	or     eax,edx
c002740b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027410:	09 f0                	or     eax,esi
c0027412:	75 08                	jne    c002741c <__cmpsf2+0x64>
c0027414:	31 c0                	xor    eax,eax
c0027416:	39 f9                	cmp    ecx,edi
c0027418:	75 0c                	jne    c0027426 <__cmpsf2+0x6e>
c002741a:	eb 29                	jmp    c0027445 <__cmpsf2+0x8d>
c002741c:	b8 01 00 00 00       	mov    eax,0x1
c0027421:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027424:	7f 1f                	jg     c0027445 <__cmpsf2+0x8d>
c0027426:	83 c8 ff             	or     eax,0xffffffff
c0027429:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002742c:	7c 17                	jl     c0027445 <__cmpsf2+0x8d>
c002742e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027434:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002743a:	b8 01 00 00 00       	mov    eax,0x1
c002743f:	39 d3                	cmp    ebx,edx
c0027441:	77 02                	ja     c0027445 <__cmpsf2+0x8d>
c0027443:	19 c0                	sbb    eax,eax
c0027445:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027448:	5b                   	pop    ebx
c0027449:	5e                   	pop    esi
c002744a:	5f                   	pop    edi
c002744b:	5d                   	pop    ebp
c002744c:	c3                   	ret    

c002744d <__eqsf2>:
c002744d:	55                   	push   ebp
c002744e:	89 e5                	mov    ebp,esp
c0027450:	83 ec 24             	sub    esp,0x24
c0027453:	6a 01                	push   0x1
c0027455:	83 ec 0c             	sub    esp,0xc
c0027458:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002745b:	e8 df 10 00 00       	call   c002853f <__extendsfdf2>
c0027460:	83 c4 10             	add    esp,0x10
c0027463:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027466:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027469:	52                   	push   edx
c002746a:	50                   	push   eax
c002746b:	50                   	push   eax
c002746c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002746f:	e8 cb 10 00 00       	call   c002853f <__extendsfdf2>
c0027474:	59                   	pop    ecx
c0027475:	59                   	pop    ecx
c0027476:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027479:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002747c:	52                   	push   edx
c002747d:	50                   	push   eax
c002747e:	e8 35 ff ff ff       	call   c00273b8 <__cmpsf2>
c0027483:	83 c4 20             	add    esp,0x20
c0027486:	c9                   	leave  
c0027487:	c3                   	ret    

c0027488 <__nesf2>:
c0027488:	eb c3                	jmp    c002744d <__eqsf2>

c002748a <__gtsf2>:
c002748a:	55                   	push   ebp
c002748b:	89 e5                	mov    ebp,esp
c002748d:	83 ec 24             	sub    esp,0x24
c0027490:	6a ff                	push   0xffffffff
c0027492:	83 ec 0c             	sub    esp,0xc
c0027495:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027498:	e8 a2 10 00 00       	call   c002853f <__extendsfdf2>
c002749d:	83 c4 10             	add    esp,0x10
c00274a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274a6:	52                   	push   edx
c00274a7:	50                   	push   eax
c00274a8:	50                   	push   eax
c00274a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274ac:	e8 8e 10 00 00       	call   c002853f <__extendsfdf2>
c00274b1:	59                   	pop    ecx
c00274b2:	59                   	pop    ecx
c00274b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274b9:	52                   	push   edx
c00274ba:	50                   	push   eax
c00274bb:	e8 f8 fe ff ff       	call   c00273b8 <__cmpsf2>
c00274c0:	83 c4 20             	add    esp,0x20
c00274c3:	c9                   	leave  
c00274c4:	c3                   	ret    

c00274c5 <__gesf2>:
c00274c5:	eb c3                	jmp    c002748a <__gtsf2>

c00274c7 <__ltsf2>:
c00274c7:	eb 84                	jmp    c002744d <__eqsf2>

c00274c9 <__lesf2>:
c00274c9:	eb 82                	jmp    c002744d <__eqsf2>

c00274cb <__adddf3>:
c00274cb:	55                   	push   ebp
c00274cc:	89 e5                	mov    ebp,esp
c00274ce:	57                   	push   edi
c00274cf:	56                   	push   esi
c00274d0:	53                   	push   ebx
c00274d1:	83 ec 24             	sub    esp,0x24
c00274d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00274da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00274dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00274e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00274e6:	89 c8                	mov    eax,ecx
c00274e8:	89 ce                	mov    esi,ecx
c00274ea:	c1 fe 14             	sar    esi,0x14
c00274ed:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00274f0:	89 fb                	mov    ebx,edi
c00274f2:	89 fa                	mov    edx,edi
c00274f4:	c1 e2 0b             	shl    edx,0xb
c00274f7:	c1 e0 0b             	shl    eax,0xb
c00274fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00274ff:	c1 eb 15             	shr    ebx,0x15
c0027502:	09 d8                	or     eax,ebx
c0027504:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027507:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002750a:	c1 fe 14             	sar    esi,0x14
c002750d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027510:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027513:	89 f3                	mov    ebx,esi
c0027515:	c1 e3 0b             	shl    ebx,0xb
c0027518:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002751b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002751e:	c1 e3 0b             	shl    ebx,0xb
c0027521:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027527:	c1 ee 15             	shr    esi,0x15
c002752a:	09 f3                	or     ebx,esi
c002752c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002752f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027532:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027535:	0f 88 5f 02 00 00    	js     c002779a <__adddf3+0x2cf>
c002753b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002753e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027541:	85 db                	test   ebx,ebx
c0027543:	0f 8e c7 00 00 00    	jle    c0027610 <__adddf3+0x145>
c0027549:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027550:	75 1a                	jne    c002756c <__adddf3+0xa1>
c0027552:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027555:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027558:	0f 84 b2 05 00 00    	je     c0027b10 <__adddf3+0x645>
c002755e:	4b                   	dec    ebx
c002755f:	75 23                	jne    c0027584 <__adddf3+0xb9>
c0027561:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027564:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027567:	e9 99 00 00 00       	jmp    c0027605 <__adddf3+0x13a>
c002756c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756f:	f7 d6                	not    esi
c0027571:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027577:	0f 84 93 05 00 00    	je     c0027b10 <__adddf3+0x645>
c002757d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027584:	83 fb 1f             	cmp    ebx,0x1f
c0027587:	7e 42                	jle    c00275cb <__adddf3+0x100>
c0027589:	83 fb 3f             	cmp    ebx,0x3f
c002758c:	0f 8f 7e 05 00 00    	jg     c0027b10 <__adddf3+0x645>
c0027592:	83 e3 1f             	and    ebx,0x1f
c0027595:	89 d9                	mov    ecx,ebx
c0027597:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002759a:	d3 ef                	shr    edi,cl
c002759c:	31 db                	xor    ebx,ebx
c002759e:	85 c9                	test   ecx,ecx
c00275a0:	74 15                	je     c00275b7 <__adddf3+0xec>
c00275a2:	be 20 00 00 00       	mov    esi,0x20
c00275a7:	29 ce                	sub    esi,ecx
c00275a9:	89 f1                	mov    ecx,esi
c00275ab:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275ae:	d3 e6                	shl    esi,cl
c00275b0:	31 db                	xor    ebx,ebx
c00275b2:	85 f6                	test   esi,esi
c00275b4:	0f 95 c3             	setne  bl
c00275b7:	31 c9                	xor    ecx,ecx
c00275b9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275bd:	0f 95 c1             	setne  cl
c00275c0:	09 cf                	or     edi,ecx
c00275c2:	09 fb                	or     ebx,edi
c00275c4:	01 da                	add    edx,ebx
c00275c6:	83 d0 00             	adc    eax,0x0
c00275c9:	eb 3a                	jmp    c0027605 <__adddf3+0x13a>
c00275cb:	bf 20 00 00 00       	mov    edi,0x20
c00275d0:	29 df                	sub    edi,ebx
c00275d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275db:	d3 e6                	shl    esi,cl
c00275dd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275e0:	88 d9                	mov    cl,bl
c00275e2:	d3 ef                	shr    edi,cl
c00275e4:	09 fe                	or     esi,edi
c00275e6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275e9:	88 d9                	mov    cl,bl
c00275eb:	d3 ef                	shr    edi,cl
c00275ed:	89 fb                	mov    ebx,edi
c00275ef:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275f2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275f5:	d3 e7                	shl    edi,cl
c00275f7:	85 ff                	test   edi,edi
c00275f9:	0f 95 c1             	setne  cl
c00275fc:	0f b6 c9             	movzx  ecx,cl
c00275ff:	09 ce                	or     esi,ecx
c0027601:	01 f2                	add    edx,esi
c0027603:	11 d8                	adc    eax,ebx
c0027605:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027608:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002760b:	e9 52 01 00 00       	jmp    c0027762 <__adddf3+0x297>
c0027610:	0f 84 d5 00 00 00    	je     c00276eb <__adddf3+0x220>
c0027616:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027619:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002761c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002761f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027622:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027629:	75 20                	jne    c002764b <__adddf3+0x180>
c002762b:	89 d6                	mov    esi,edx
c002762d:	09 c6                	or     esi,eax
c002762f:	0f 84 db 04 00 00    	je     c0027b10 <__adddf3+0x645>
c0027635:	4b                   	dec    ebx
c0027636:	75 29                	jne    c0027661 <__adddf3+0x196>
c0027638:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002763b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002763e:	01 d1                	add    ecx,edx
c0027640:	11 c6                	adc    esi,eax
c0027642:	89 f0                	mov    eax,esi
c0027644:	89 ca                	mov    edx,ecx
c0027646:	e9 17 01 00 00       	jmp    c0027762 <__adddf3+0x297>
c002764b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002764e:	f7 d6                	not    esi
c0027650:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027656:	0f 84 b4 04 00 00    	je     c0027b10 <__adddf3+0x645>
c002765c:	0d 00 00 00 80       	or     eax,0x80000000
c0027661:	83 fb 1f             	cmp    ebx,0x1f
c0027664:	7e 48                	jle    c00276ae <__adddf3+0x1e3>
c0027666:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027669:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002766c:	83 fb 3f             	cmp    ebx,0x3f
c002766f:	0f 8f 9b 04 00 00    	jg     c0027b10 <__adddf3+0x645>
c0027675:	83 e3 1f             	and    ebx,0x1f
c0027678:	89 d9                	mov    ecx,ebx
c002767a:	89 c7                	mov    edi,eax
c002767c:	d3 ef                	shr    edi,cl
c002767e:	31 db                	xor    ebx,ebx
c0027680:	85 c9                	test   ecx,ecx
c0027682:	74 12                	je     c0027696 <__adddf3+0x1cb>
c0027684:	be 20 00 00 00       	mov    esi,0x20
c0027689:	29 ce                	sub    esi,ecx
c002768b:	89 f1                	mov    ecx,esi
c002768d:	d3 e0                	shl    eax,cl
c002768f:	31 db                	xor    ebx,ebx
c0027691:	85 c0                	test   eax,eax
c0027693:	0f 95 c3             	setne  bl
c0027696:	31 c0                	xor    eax,eax
c0027698:	85 d2                	test   edx,edx
c002769a:	0f 95 c0             	setne  al
c002769d:	09 c7                	or     edi,eax
c002769f:	09 fb                	or     ebx,edi
c00276a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276a7:	01 da                	add    edx,ebx
c00276a9:	83 d6 00             	adc    esi,0x0
c00276ac:	eb 39                	jmp    c00276e7 <__adddf3+0x21c>
c00276ae:	be 20 00 00 00       	mov    esi,0x20
c00276b3:	29 de                	sub    esi,ebx
c00276b5:	89 c7                	mov    edi,eax
c00276b7:	89 f1                	mov    ecx,esi
c00276b9:	d3 e7                	shl    edi,cl
c00276bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276be:	89 d7                	mov    edi,edx
c00276c0:	88 d9                	mov    cl,bl
c00276c2:	d3 ef                	shr    edi,cl
c00276c4:	89 f9                	mov    ecx,edi
c00276c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c9:	09 cf                	or     edi,ecx
c00276cb:	88 d9                	mov    cl,bl
c00276cd:	d3 e8                	shr    eax,cl
c00276cf:	89 f1                	mov    ecx,esi
c00276d1:	d3 e2                	shl    edx,cl
c00276d3:	85 d2                	test   edx,edx
c00276d5:	0f 95 c2             	setne  dl
c00276d8:	0f b6 d2             	movzx  edx,dl
c00276db:	09 d7                	or     edi,edx
c00276dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276e3:	01 fa                	add    edx,edi
c00276e5:	11 c6                	adc    esi,eax
c00276e7:	89 f0                	mov    eax,esi
c00276e9:	eb 77                	jmp    c0027762 <__adddf3+0x297>
c00276eb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276ee:	46                   	inc    esi
c00276ef:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276f2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276f8:	75 41                	jne    c002773b <__adddf3+0x270>
c00276fa:	89 d3                	mov    ebx,edx
c00276fc:	09 c3                	or     ebx,eax
c00276fe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027705:	75 27                	jne    c002772e <__adddf3+0x263>
c0027707:	85 db                	test   ebx,ebx
c0027709:	0f 84 fb 03 00 00    	je     c0027b0a <__adddf3+0x63f>
c002770f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027712:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027715:	0f 84 f5 03 00 00    	je     c0027b10 <__adddf3+0x645>
c002771b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002771e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027721:	85 c0                	test   eax,eax
c0027723:	0f 89 91 03 00 00    	jns    c0027aba <__adddf3+0x5ef>
c0027729:	e9 85 03 00 00       	jmp    c0027ab3 <__adddf3+0x5e8>
c002772e:	85 db                	test   ebx,ebx
c0027730:	0f 85 da 03 00 00    	jne    c0027b10 <__adddf3+0x645>
c0027736:	e9 cf 03 00 00       	jmp    c0027b0a <__adddf3+0x63f>
c002773b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002773e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027741:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027744:	f7 d1                	not    ecx
c0027746:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002774c:	0f 84 70 03 00 00    	je     c0027ac2 <__adddf3+0x5f7>
c0027752:	d1 ea                	shr    edx,1
c0027754:	89 c1                	mov    ecx,eax
c0027756:	c1 e1 1f             	shl    ecx,0x1f
c0027759:	09 ca                	or     edx,ecx
c002775b:	d1 e8                	shr    eax,1
c002775d:	e9 6f 03 00 00       	jmp    c0027ad1 <__adddf3+0x606>
c0027762:	85 c0                	test   eax,eax
c0027764:	0f 89 67 03 00 00    	jns    c0027ad1 <__adddf3+0x606>
c002776a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002776d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027770:	f7 d1                	not    ecx
c0027772:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027778:	0f 84 44 03 00 00    	je     c0027ac2 <__adddf3+0x5f7>
c002777e:	89 d1                	mov    ecx,edx
c0027780:	d1 e9                	shr    ecx,1
c0027782:	83 e2 01             	and    edx,0x1
c0027785:	09 ca                	or     edx,ecx
c0027787:	89 c1                	mov    ecx,eax
c0027789:	c1 e1 1f             	shl    ecx,0x1f
c002778c:	09 ca                	or     edx,ecx
c002778e:	d1 e8                	shr    eax,1
c0027790:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027795:	e9 37 03 00 00       	jmp    c0027ad1 <__adddf3+0x606>
c002779a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002779d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277a3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277af:	29 de                	sub    esi,ebx
c00277b1:	85 f6                	test   esi,esi
c00277b3:	0f 8e bd 00 00 00    	jle    c0027876 <__adddf3+0x3ab>
c00277b9:	85 db                	test   ebx,ebx
c00277bb:	75 17                	jne    c00277d4 <__adddf3+0x309>
c00277bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277c3:	0f 84 47 03 00 00    	je     c0027b10 <__adddf3+0x645>
c00277c9:	4e                   	dec    esi
c00277ca:	75 20                	jne    c00277ec <__adddf3+0x321>
c00277cc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277cf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277d2:	eb 5b                	jmp    c002782f <__adddf3+0x364>
c00277d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277d7:	f7 d3                	not    ebx
c00277d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277df:	0f 84 2b 03 00 00    	je     c0027b10 <__adddf3+0x645>
c00277e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00277ec:	83 fe 1f             	cmp    esi,0x1f
c00277ef:	7e 49                	jle    c002783a <__adddf3+0x36f>
c00277f1:	83 fe 3f             	cmp    esi,0x3f
c00277f4:	0f 8f 16 03 00 00    	jg     c0027b10 <__adddf3+0x645>
c00277fa:	83 e6 1f             	and    esi,0x1f
c00277fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027800:	89 f1                	mov    ecx,esi
c0027802:	d3 ef                	shr    edi,cl
c0027804:	31 db                	xor    ebx,ebx
c0027806:	85 f6                	test   esi,esi
c0027808:	74 13                	je     c002781d <__adddf3+0x352>
c002780a:	b9 20 00 00 00       	mov    ecx,0x20
c002780f:	29 f1                	sub    ecx,esi
c0027811:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027814:	d3 e6                	shl    esi,cl
c0027816:	31 db                	xor    ebx,ebx
c0027818:	85 f6                	test   esi,esi
c002781a:	0f 95 c3             	setne  bl
c002781d:	31 c9                	xor    ecx,ecx
c002781f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027823:	0f 95 c1             	setne  cl
c0027826:	09 cf                	or     edi,ecx
c0027828:	09 fb                	or     ebx,edi
c002782a:	29 da                	sub    edx,ebx
c002782c:	83 d8 00             	sbb    eax,0x0
c002782f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027832:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027835:	e9 aa 01 00 00       	jmp    c00279e4 <__adddf3+0x519>
c002783a:	bf 20 00 00 00       	mov    edi,0x20
c002783f:	29 f7                	sub    edi,esi
c0027841:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027844:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027847:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002784a:	d3 e3                	shl    ebx,cl
c002784c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 ef                	shr    edi,cl
c0027853:	09 fb                	or     ebx,edi
c0027855:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027858:	89 f1                	mov    ecx,esi
c002785a:	d3 ef                	shr    edi,cl
c002785c:	89 fe                	mov    esi,edi
c002785e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027861:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027864:	d3 e7                	shl    edi,cl
c0027866:	85 ff                	test   edi,edi
c0027868:	0f 95 c1             	setne  cl
c002786b:	0f b6 c9             	movzx  ecx,cl
c002786e:	09 cb                	or     ebx,ecx
c0027870:	29 da                	sub    edx,ebx
c0027872:	19 f0                	sbb    eax,esi
c0027874:	eb b9                	jmp    c002782f <__adddf3+0x364>
c0027876:	0f 84 cd 00 00 00    	je     c0027949 <__adddf3+0x47e>
c002787c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002787f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027882:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027885:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027889:	75 1b                	jne    c00278a6 <__adddf3+0x3db>
c002788b:	89 d6                	mov    esi,edx
c002788d:	09 c6                	or     esi,eax
c002788f:	0f 84 7b 02 00 00    	je     c0027b10 <__adddf3+0x645>
c0027895:	4b                   	dec    ebx
c0027896:	75 24                	jne    c00278bc <__adddf3+0x3f1>
c0027898:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002789b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002789e:	29 d1                	sub    ecx,edx
c00278a0:	19 c6                	sbb    esi,eax
c00278a2:	89 ca                	mov    edx,ecx
c00278a4:	eb 61                	jmp    c0027907 <__adddf3+0x43c>
c00278a6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278a9:	f7 d6                	not    esi
c00278ab:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278b1:	0f 84 59 02 00 00    	je     c0027b10 <__adddf3+0x645>
c00278b7:	0d 00 00 00 80       	or     eax,0x80000000
c00278bc:	83 fb 1f             	cmp    ebx,0x1f
c00278bf:	7e 4d                	jle    c002790e <__adddf3+0x443>
c00278c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278c7:	83 fb 3f             	cmp    ebx,0x3f
c00278ca:	0f 8f 40 02 00 00    	jg     c0027b10 <__adddf3+0x645>
c00278d0:	83 e3 1f             	and    ebx,0x1f
c00278d3:	89 d9                	mov    ecx,ebx
c00278d5:	89 c7                	mov    edi,eax
c00278d7:	d3 ef                	shr    edi,cl
c00278d9:	31 db                	xor    ebx,ebx
c00278db:	85 c9                	test   ecx,ecx
c00278dd:	74 12                	je     c00278f1 <__adddf3+0x426>
c00278df:	be 20 00 00 00       	mov    esi,0x20
c00278e4:	29 ce                	sub    esi,ecx
c00278e6:	89 f1                	mov    ecx,esi
c00278e8:	d3 e0                	shl    eax,cl
c00278ea:	31 db                	xor    ebx,ebx
c00278ec:	85 c0                	test   eax,eax
c00278ee:	0f 95 c3             	setne  bl
c00278f1:	31 c0                	xor    eax,eax
c00278f3:	85 d2                	test   edx,edx
c00278f5:	0f 95 c0             	setne  al
c00278f8:	09 c7                	or     edi,eax
c00278fa:	09 fb                	or     ebx,edi
c00278fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027902:	29 da                	sub    edx,ebx
c0027904:	83 de 00             	sbb    esi,0x0
c0027907:	89 f0                	mov    eax,esi
c0027909:	e9 d6 00 00 00       	jmp    c00279e4 <__adddf3+0x519>
c002790e:	be 20 00 00 00       	mov    esi,0x20
c0027913:	29 de                	sub    esi,ebx
c0027915:	89 c7                	mov    edi,eax
c0027917:	89 f1                	mov    ecx,esi
c0027919:	d3 e7                	shl    edi,cl
c002791b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002791e:	89 d7                	mov    edi,edx
c0027920:	88 d9                	mov    cl,bl
c0027922:	d3 ef                	shr    edi,cl
c0027924:	89 f9                	mov    ecx,edi
c0027926:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027929:	09 cf                	or     edi,ecx
c002792b:	88 d9                	mov    cl,bl
c002792d:	d3 e8                	shr    eax,cl
c002792f:	89 f1                	mov    ecx,esi
c0027931:	d3 e2                	shl    edx,cl
c0027933:	85 d2                	test   edx,edx
c0027935:	0f 95 c2             	setne  dl
c0027938:	0f b6 d2             	movzx  edx,dl
c002793b:	09 d7                	or     edi,edx
c002793d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027940:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027943:	29 fa                	sub    edx,edi
c0027945:	19 c6                	sbb    esi,eax
c0027947:	eb be                	jmp    c0027907 <__adddf3+0x43c>
c0027949:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002794c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002794f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027955:	75 6a                	jne    c00279c1 <__adddf3+0x4f6>
c0027957:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002795b:	75 58                	jne    c00279b5 <__adddf3+0x4ea>
c002795d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027960:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027963:	89 d6                	mov    esi,edx
c0027965:	09 c6                	or     esi,eax
c0027967:	75 17                	jne    c0027980 <__adddf3+0x4b5>
c0027969:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002796f:	85 db                	test   ebx,ebx
c0027971:	0f 85 99 01 00 00    	jne    c0027b10 <__adddf3+0x645>
c0027977:	31 ff                	xor    edi,edi
c0027979:	31 c9                	xor    ecx,ecx
c002797b:	e9 90 01 00 00       	jmp    c0027b10 <__adddf3+0x645>
c0027980:	85 db                	test   ebx,ebx
c0027982:	0f 84 88 01 00 00    	je     c0027b10 <__adddf3+0x645>
c0027988:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002798b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002798e:	85 c0                	test   eax,eax
c0027990:	79 10                	jns    c00279a2 <__adddf3+0x4d7>
c0027992:	31 c9                	xor    ecx,ecx
c0027994:	f7 da                	neg    edx
c0027996:	0f 95 c1             	setne  cl
c0027999:	01 c8                	add    eax,ecx
c002799b:	f7 d8                	neg    eax
c002799d:	e9 2f 01 00 00       	jmp    c0027ad1 <__adddf3+0x606>
c00279a2:	31 ff                	xor    edi,edi
c00279a4:	31 c9                	xor    ecx,ecx
c00279a6:	89 c3                	mov    ebx,eax
c00279a8:	09 d3                	or     ebx,edx
c00279aa:	0f 84 60 01 00 00    	je     c0027b10 <__adddf3+0x645>
c00279b0:	e9 05 01 00 00       	jmp    c0027aba <__adddf3+0x5ef>
c00279b5:	31 ff                	xor    edi,edi
c00279b7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279bc:	e9 4f 01 00 00       	jmp    c0027b10 <__adddf3+0x645>
c00279c1:	89 c1                	mov    ecx,eax
c00279c3:	89 d0                	mov    eax,edx
c00279c5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00279c8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00279cb:	89 ca                	mov    edx,ecx
c00279cd:	85 c9                	test   ecx,ecx
c00279cf:	79 2c                	jns    c00279fd <__adddf3+0x532>
c00279d1:	31 c9                	xor    ecx,ecx
c00279d3:	f7 d8                	neg    eax
c00279d5:	0f 95 c1             	setne  cl
c00279d8:	01 ca                	add    edx,ecx
c00279da:	f7 da                	neg    edx
c00279dc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00279df:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279e2:	eb 19                	jmp    c00279fd <__adddf3+0x532>
c00279e4:	85 c0                	test   eax,eax
c00279e6:	0f 89 e5 00 00 00    	jns    c0027ad1 <__adddf3+0x606>
c00279ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279f1:	89 c1                	mov    ecx,eax
c00279f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279f6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279f9:	89 d0                	mov    eax,edx
c00279fb:	89 ca                	mov    edx,ecx
c00279fd:	85 d2                	test   edx,edx
c00279ff:	74 59                	je     c0027a5a <__adddf3+0x58f>
c0027a01:	0f bd da             	bsr    ebx,edx
c0027a04:	83 f3 1f             	xor    ebx,0x1f
c0027a07:	88 d9                	mov    cl,bl
c0027a09:	d3 e2                	shl    edx,cl
c0027a0b:	bf 20 00 00 00       	mov    edi,0x20
c0027a10:	89 f9                	mov    ecx,edi
c0027a12:	29 d9                	sub    ecx,ebx
c0027a14:	89 c6                	mov    esi,eax
c0027a16:	d3 ee                	shr    esi,cl
c0027a18:	09 d6                	or     esi,edx
c0027a1a:	88 d9                	mov    cl,bl
c0027a1c:	d3 e0                	shl    eax,cl
c0027a1e:	89 c2                	mov    edx,eax
c0027a20:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a23:	25 ff 07 00 00       	and    eax,0x7ff
c0027a28:	39 d8                	cmp    eax,ebx
c0027a2a:	7f 22                	jg     c0027a4e <__adddf3+0x583>
c0027a2c:	29 c3                	sub    ebx,eax
c0027a2e:	43                   	inc    ebx
c0027a2f:	88 d9                	mov    cl,bl
c0027a31:	d3 ea                	shr    edx,cl
c0027a33:	29 df                	sub    edi,ebx
c0027a35:	89 f9                	mov    ecx,edi
c0027a37:	89 f0                	mov    eax,esi
c0027a39:	d3 e0                	shl    eax,cl
c0027a3b:	09 c2                	or     edx,eax
c0027a3d:	89 f0                	mov    eax,esi
c0027a3f:	88 d9                	mov    cl,bl
c0027a41:	d3 e8                	shr    eax,cl
c0027a43:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a46:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a4c:	eb 6f                	jmp    c0027abd <__adddf3+0x5f2>
c0027a4e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a51:	29 d8                	sub    eax,ebx
c0027a53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a56:	89 f0                	mov    eax,esi
c0027a58:	eb 59                	jmp    c0027ab3 <__adddf3+0x5e8>
c0027a5a:	85 c0                	test   eax,eax
c0027a5c:	74 6a                	je     c0027ac8 <__adddf3+0x5fd>
c0027a5e:	0f bd c8             	bsr    ecx,eax
c0027a61:	83 f1 1f             	xor    ecx,0x1f
c0027a64:	d3 e0                	shl    eax,cl
c0027a66:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a69:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a6f:	83 c1 20             	add    ecx,0x20
c0027a72:	39 cb                	cmp    ebx,ecx
c0027a74:	7f 35                	jg     c0027aab <__adddf3+0x5e0>
c0027a76:	29 d9                	sub    ecx,ebx
c0027a78:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a7b:	83 fe 1f             	cmp    esi,0x1f
c0027a7e:	7e 09                	jle    c0027a89 <__adddf3+0x5be>
c0027a80:	83 e9 1f             	sub    ecx,0x1f
c0027a83:	d3 e8                	shr    eax,cl
c0027a85:	89 c3                	mov    ebx,eax
c0027a87:	eb 11                	jmp    c0027a9a <__adddf3+0x5cf>
c0027a89:	b9 20 00 00 00       	mov    ecx,0x20
c0027a8e:	29 f1                	sub    ecx,esi
c0027a90:	89 c3                	mov    ebx,eax
c0027a92:	d3 e3                	shl    ebx,cl
c0027a94:	89 f1                	mov    ecx,esi
c0027a96:	d3 e8                	shr    eax,cl
c0027a98:	89 c2                	mov    edx,eax
c0027a9a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a9d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aa2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aa5:	89 d0                	mov    eax,edx
c0027aa7:	89 da                	mov    edx,ebx
c0027aa9:	eb 26                	jmp    c0027ad1 <__adddf3+0x606>
c0027aab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aae:	29 cf                	sub    edi,ecx
c0027ab0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ab3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ab8:	eb 17                	jmp    c0027ad1 <__adddf3+0x606>
c0027aba:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027abd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ac0:	eb 0f                	jmp    c0027ad1 <__adddf3+0x606>
c0027ac2:	31 d2                	xor    edx,edx
c0027ac4:	31 c0                	xor    eax,eax
c0027ac6:	eb 09                	jmp    c0027ad1 <__adddf3+0x606>
c0027ac8:	89 c2                	mov    edx,eax
c0027aca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027ad1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ad4:	c1 e1 14             	shl    ecx,0x14
c0027ad7:	89 c3                	mov    ebx,eax
c0027ad9:	c1 eb 0b             	shr    ebx,0xb
c0027adc:	09 d9                	or     ecx,ebx
c0027ade:	89 d3                	mov    ebx,edx
c0027ae0:	c1 eb 0b             	shr    ebx,0xb
c0027ae3:	c1 e0 15             	shl    eax,0x15
c0027ae6:	09 d8                	or     eax,ebx
c0027ae8:	89 c7                	mov    edi,eax
c0027aea:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027af0:	0f 95 c0             	setne  al
c0027af3:	89 c6                	mov    esi,eax
c0027af5:	09 f3                	or     ebx,esi
c0027af7:	83 e3 01             	and    ebx,0x1
c0027afa:	c1 ea 0a             	shr    edx,0xa
c0027afd:	21 da                	and    edx,ebx
c0027aff:	89 f8                	mov    eax,edi
c0027b01:	01 d0                	add    eax,edx
c0027b03:	83 d1 00             	adc    ecx,0x0
c0027b06:	89 c7                	mov    edi,eax
c0027b08:	eb 06                	jmp    c0027b10 <__adddf3+0x645>
c0027b0a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b0d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b10:	89 f8                	mov    eax,edi
c0027b12:	89 ca                	mov    edx,ecx
c0027b14:	83 c4 24             	add    esp,0x24
c0027b17:	5b                   	pop    ebx
c0027b18:	5e                   	pop    esi
c0027b19:	5f                   	pop    edi
c0027b1a:	5d                   	pop    ebp
c0027b1b:	c3                   	ret    

c0027b1c <__subdf3>:
c0027b1c:	55                   	push   ebp
c0027b1d:	89 e5                	mov    ebp,esp
c0027b1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b25:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b2b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b2e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b31:	5d                   	pop    ebp
c0027b32:	e9 94 f9 ff ff       	jmp    c00274cb <__adddf3>

c0027b37 <__negdf2>:
c0027b37:	55                   	push   ebp
c0027b38:	89 e5                	mov    ebp,esp
c0027b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b3d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b40:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b46:	5d                   	pop    ebp
c0027b47:	c3                   	ret    

c0027b48 <__muldf3>:
c0027b48:	55                   	push   ebp
c0027b49:	89 e5                	mov    ebp,esp
c0027b4b:	57                   	push   edi
c0027b4c:	56                   	push   esi
c0027b4d:	53                   	push   ebx
c0027b4e:	83 ec 24             	sub    esp,0x24
c0027b51:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b60:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b63:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b66:	89 c8                	mov    eax,ecx
c0027b68:	c1 f8 14             	sar    eax,0x14
c0027b6b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b6e:	89 f8                	mov    eax,edi
c0027b70:	89 fb                	mov    ebx,edi
c0027b72:	c1 e3 0b             	shl    ebx,0xb
c0027b75:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b78:	c1 e1 0b             	shl    ecx,0xb
c0027b7b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b81:	c1 e8 15             	shr    eax,0x15
c0027b84:	09 c1                	or     ecx,eax
c0027b86:	89 d6                	mov    esi,edx
c0027b88:	89 d0                	mov    eax,edx
c0027b8a:	c1 f8 14             	sar    eax,0x14
c0027b8d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027b90:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027b93:	89 c3                	mov    ebx,eax
c0027b95:	c1 e3 0b             	shl    ebx,0xb
c0027b98:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b9b:	c1 e6 0b             	shl    esi,0xb
c0027b9e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ba4:	c1 e8 15             	shr    eax,0x15
c0027ba7:	09 c6                	or     esi,eax
c0027ba9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bac:	25 ff 07 00 00       	and    eax,0x7ff
c0027bb1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bb4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bb7:	25 ff 07 00 00       	and    eax,0x7ff
c0027bbc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bbf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bc2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bc5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027bcc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bcf:	40                   	inc    eax
c0027bd0:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bd5:	0f 85 8d 00 00 00    	jne    c0027c68 <__muldf3+0x120>
c0027bdb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bde:	09 c8                	or     eax,ecx
c0027be0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027be4:	74 44                	je     c0027c2a <__muldf3+0xe2>
c0027be6:	85 c0                	test   eax,eax
c0027be8:	0f 85 31 02 00 00    	jne    c0027e1f <__muldf3+0x2d7>
c0027bee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bf1:	40                   	inc    eax
c0027bf2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bf7:	75 13                	jne    c0027c0c <__muldf3+0xc4>
c0027bf9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bfc:	09 f1                	or     ecx,esi
c0027bfe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c02:	74 22                	je     c0027c26 <__muldf3+0xde>
c0027c04:	85 c9                	test   ecx,ecx
c0027c06:	0f 85 0d 02 00 00    	jne    c0027e19 <__muldf3+0x2d1>
c0027c0c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c10:	0f 89 09 02 00 00    	jns    c0027e1f <__muldf3+0x2d7>
c0027c16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c19:	05 00 00 00 80       	add    eax,0x80000000
c0027c1e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c21:	e9 f9 01 00 00       	jmp    c0027e1f <__muldf3+0x2d7>
c0027c26:	85 c9                	test   ecx,ecx
c0027c28:	eb 2e                	jmp    c0027c58 <__muldf3+0x110>
c0027c2a:	85 c0                	test   eax,eax
c0027c2c:	74 20                	je     c0027c4e <__muldf3+0x106>
c0027c2e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c37:	c1 ef 1f             	shr    edi,0x1f
c0027c3a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c3d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c40:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c43:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c46:	09 f9                	or     ecx,edi
c0027c48:	78 1e                	js     c0027c68 <__muldf3+0x120>
c0027c4a:	89 c3                	mov    ebx,eax
c0027c4c:	eb e0                	jmp    c0027c2e <__muldf3+0xe6>
c0027c4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c51:	f7 d0                	not    eax
c0027c53:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c58:	75 b2                	jne    c0027c0c <__muldf3+0xc4>
c0027c5a:	31 ff                	xor    edi,edi
c0027c5c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c63:	e9 b7 01 00 00       	jmp    c0027e1f <__muldf3+0x2d7>
c0027c68:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c6b:	40                   	inc    eax
c0027c6c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c71:	75 57                	jne    c0027cca <__muldf3+0x182>
c0027c73:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c76:	09 f0                	or     eax,esi
c0027c78:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c7c:	74 23                	je     c0027ca1 <__muldf3+0x159>
c0027c7e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c82:	0f 89 91 01 00 00    	jns    c0027e19 <__muldf3+0x2d1>
c0027c88:	85 c0                	test   eax,eax
c0027c8a:	0f 85 89 01 00 00    	jne    c0027e19 <__muldf3+0x2d1>
c0027c90:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c93:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c9c:	e9 7e 01 00 00       	jmp    c0027e1f <__muldf3+0x2d7>
c0027ca1:	85 c0                	test   eax,eax
c0027ca3:	75 0c                	jne    c0027cb1 <__muldf3+0x169>
c0027ca5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ca9:	0f 89 6a 01 00 00    	jns    c0027e19 <__muldf3+0x2d1>
c0027caf:	eb df                	jmp    c0027c90 <__muldf3+0x148>
c0027cb1:	01 f6                	add    esi,esi
c0027cb3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cb6:	c1 ea 1f             	shr    edx,0x1f
c0027cb9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cbc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027cbf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cc2:	09 d6                	or     esi,edx
c0027cc4:	78 04                	js     c0027cca <__muldf3+0x182>
c0027cc6:	89 c3                	mov    ebx,eax
c0027cc8:	eb e7                	jmp    c0027cb1 <__muldf3+0x169>
c0027cca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027cd0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cd6:	89 c8                	mov    eax,ecx
c0027cd8:	f7 e6                	mul    esi
c0027cda:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027cdd:	89 c7                	mov    edi,eax
c0027cdf:	89 c8                	mov    eax,ecx
c0027ce1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ce4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ce7:	89 c1                	mov    ecx,eax
c0027ce9:	89 f0                	mov    eax,esi
c0027ceb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027cee:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027cf1:	89 c6                	mov    esi,eax
c0027cf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cf6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027cf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027cfc:	31 c0                	xor    eax,eax
c0027cfe:	01 f1                	add    ecx,esi
c0027d00:	0f 92 c0             	setb   al
c0027d03:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d06:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d09:	83 d6 00             	adc    esi,0x0
c0027d0c:	01 c7                	add    edi,eax
c0027d0e:	83 d6 00             	adc    esi,0x0
c0027d11:	01 ca                	add    edx,ecx
c0027d13:	0f 92 c1             	setb   cl
c0027d16:	0f b6 c9             	movzx  ecx,cl
c0027d19:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d1c:	83 d6 00             	adc    esi,0x0
c0027d1f:	01 cf                	add    edi,ecx
c0027d21:	83 d6 00             	adc    esi,0x0
c0027d24:	31 c9                	xor    ecx,ecx
c0027d26:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d29:	0f 95 c1             	setne  cl
c0027d2c:	09 cf                	or     edi,ecx
c0027d2e:	85 f6                	test   esi,esi
c0027d30:	78 0c                	js     c0027d3e <__muldf3+0x1f6>
c0027d32:	01 f6                	add    esi,esi
c0027d34:	89 f8                	mov    eax,edi
c0027d36:	c1 e8 1f             	shr    eax,0x1f
c0027d39:	09 c6                	or     esi,eax
c0027d3b:	01 ff                	add    edi,edi
c0027d3d:	4b                   	dec    ebx
c0027d3e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d44:	0f 8f 85 00 00 00    	jg     c0027dcf <__muldf3+0x287>
c0027d4a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d50:	85 db                	test   ebx,ebx
c0027d52:	0f 8f 84 00 00 00    	jg     c0027ddc <__muldf3+0x294>
c0027d58:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d5b:	7c 79                	jl     c0027dd6 <__muldf3+0x28e>
c0027d5d:	ba 01 00 00 00       	mov    edx,0x1
c0027d62:	29 da                	sub    edx,ebx
c0027d64:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d6a:	83 fa 1f             	cmp    edx,0x1f
c0027d6d:	7e 30                	jle    c0027d9f <__muldf3+0x257>
c0027d6f:	83 fa 20             	cmp    edx,0x20
c0027d72:	75 0b                	jne    c0027d7f <__muldf3+0x237>
c0027d74:	31 c0                	xor    eax,eax
c0027d76:	85 ff                	test   edi,edi
c0027d78:	0f 95 c0             	setne  al
c0027d7b:	89 c7                	mov    edi,eax
c0027d7d:	eb 1a                	jmp    c0027d99 <__muldf3+0x251>
c0027d7f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d82:	89 f0                	mov    eax,esi
c0027d84:	d3 e0                	shl    eax,cl
c0027d86:	09 f8                	or     eax,edi
c0027d88:	0f 95 c0             	setne  al
c0027d8b:	0f b6 c0             	movzx  eax,al
c0027d8e:	89 c7                	mov    edi,eax
c0027d90:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d95:	29 d9                	sub    ecx,ebx
c0027d97:	d3 ee                	shr    esi,cl
c0027d99:	09 f7                	or     edi,esi
c0027d9b:	31 db                	xor    ebx,ebx
c0027d9d:	eb 3b                	jmp    c0027dda <__muldf3+0x292>
c0027d9f:	83 c3 1f             	add    ebx,0x1f
c0027da2:	89 f0                	mov    eax,esi
c0027da4:	88 d9                	mov    cl,bl
c0027da6:	d3 e0                	shl    eax,cl
c0027da8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dab:	89 f8                	mov    eax,edi
c0027dad:	88 d1                	mov    cl,dl
c0027daf:	d3 e8                	shr    eax,cl
c0027db1:	89 c1                	mov    ecx,eax
c0027db3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027db6:	09 c8                	or     eax,ecx
c0027db8:	88 d9                	mov    cl,bl
c0027dba:	d3 e7                	shl    edi,cl
c0027dbc:	31 db                	xor    ebx,ebx
c0027dbe:	85 ff                	test   edi,edi
c0027dc0:	0f 95 c3             	setne  bl
c0027dc3:	89 df                	mov    edi,ebx
c0027dc5:	09 c7                	or     edi,eax
c0027dc7:	88 d1                	mov    cl,dl
c0027dc9:	d3 ee                	shr    esi,cl
c0027dcb:	31 db                	xor    ebx,ebx
c0027dcd:	eb 0d                	jmp    c0027ddc <__muldf3+0x294>
c0027dcf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027dd4:	eb 02                	jmp    c0027dd8 <__muldf3+0x290>
c0027dd6:	31 db                	xor    ebx,ebx
c0027dd8:	31 ff                	xor    edi,edi
c0027dda:	31 f6                	xor    esi,esi
c0027ddc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ddf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027de2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027de7:	09 c3                	or     ebx,eax
c0027de9:	c1 e3 14             	shl    ebx,0x14
c0027dec:	89 f0                	mov    eax,esi
c0027dee:	c1 e8 0b             	shr    eax,0xb
c0027df1:	09 c3                	or     ebx,eax
c0027df3:	89 f8                	mov    eax,edi
c0027df5:	c1 e8 0b             	shr    eax,0xb
c0027df8:	c1 e6 15             	shl    esi,0x15
c0027dfb:	09 c6                	or     esi,eax
c0027dfd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e03:	0f 95 c1             	setne  cl
c0027e06:	09 c8                	or     eax,ecx
c0027e08:	83 e0 01             	and    eax,0x1
c0027e0b:	c1 ef 0a             	shr    edi,0xa
c0027e0e:	21 c7                	and    edi,eax
c0027e10:	01 f7                	add    edi,esi
c0027e12:	83 d3 00             	adc    ebx,0x0
c0027e15:	89 da                	mov    edx,ebx
c0027e17:	eb 03                	jmp    c0027e1c <__muldf3+0x2d4>
c0027e19:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e1c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e1f:	89 f8                	mov    eax,edi
c0027e21:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e24:	83 c4 24             	add    esp,0x24
c0027e27:	5b                   	pop    ebx
c0027e28:	5e                   	pop    esi
c0027e29:	5f                   	pop    edi
c0027e2a:	5d                   	pop    ebp
c0027e2b:	c3                   	ret    

c0027e2c <__divdf3>:
c0027e2c:	55                   	push   ebp
c0027e2d:	89 e5                	mov    ebp,esp
c0027e2f:	57                   	push   edi
c0027e30:	56                   	push   esi
c0027e31:	53                   	push   ebx
c0027e32:	83 ec 2c             	sub    esp,0x2c
c0027e35:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e47:	89 ce                	mov    esi,ecx
c0027e49:	89 c8                	mov    eax,ecx
c0027e4b:	c1 f8 14             	sar    eax,0x14
c0027e4e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e51:	89 f8                	mov    eax,edi
c0027e53:	89 fb                	mov    ebx,edi
c0027e55:	c1 e3 0b             	shl    ebx,0xb
c0027e58:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e5b:	c1 e6 0b             	shl    esi,0xb
c0027e5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e64:	c1 e8 15             	shr    eax,0x15
c0027e67:	09 c6                	or     esi,eax
c0027e69:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e6f:	89 c2                	mov    edx,eax
c0027e71:	c1 fa 14             	sar    edx,0x14
c0027e74:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e7a:	89 de                	mov    esi,ebx
c0027e7c:	c1 e6 0b             	shl    esi,0xb
c0027e7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e82:	c1 e0 0b             	shl    eax,0xb
c0027e85:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e8a:	c1 eb 15             	shr    ebx,0x15
c0027e8d:	09 d8                	or     eax,ebx
c0027e8f:	89 c2                	mov    edx,eax
c0027e91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e94:	25 ff 07 00 00       	and    eax,0x7ff
c0027e99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e9f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ea5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ea8:	29 d8                	sub    eax,ebx
c0027eaa:	05 ff 03 00 00       	add    eax,0x3ff
c0027eaf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eb2:	46                   	inc    esi
c0027eb3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027eb9:	0f 85 a5 00 00 00    	jne    c0027f64 <__divdf3+0x138>
c0027ebf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ec2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ec5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ec9:	74 2a                	je     c0027ef5 <__divdf3+0xc9>
c0027ecb:	85 f6                	test   esi,esi
c0027ecd:	0f 85 cc 02 00 00    	jne    c002819f <__divdf3+0x373>
c0027ed3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ed6:	40                   	inc    eax
c0027ed7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027edc:	75 26                	jne    c0027f04 <__divdf3+0xd8>
c0027ede:	85 db                	test   ebx,ebx
c0027ee0:	74 22                	je     c0027f04 <__divdf3+0xd8>
c0027ee2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ee5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ee8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027eeb:	09 d0                	or     eax,edx
c0027eed:	0f 85 ac 02 00 00    	jne    c002819f <__divdf3+0x373>
c0027ef3:	eb 63                	jmp    c0027f58 <__divdf3+0x12c>
c0027ef5:	85 f6                	test   esi,esi
c0027ef7:	75 22                	jne    c0027f1b <__divdf3+0xef>
c0027ef9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027efc:	40                   	inc    eax
c0027efd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f02:	74 36                	je     c0027f3a <__divdf3+0x10e>
c0027f04:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f08:	0f 89 91 02 00 00    	jns    c002819f <__divdf3+0x373>
c0027f0e:	89 f8                	mov    eax,edi
c0027f10:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f16:	e9 80 02 00 00       	jmp    c002819b <__divdf3+0x36f>
c0027f1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f1e:	01 f6                	add    esi,esi
c0027f20:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f23:	c1 ef 1f             	shr    edi,0x1f
c0027f26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f29:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f2c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f2f:	09 f7                	or     edi,esi
c0027f31:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f34:	78 2e                	js     c0027f64 <__divdf3+0x138>
c0027f36:	89 c8                	mov    eax,ecx
c0027f38:	eb e1                	jmp    c0027f1b <__divdf3+0xef>
c0027f3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f3d:	09 d0                	or     eax,edx
c0027f3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f43:	74 0f                	je     c0027f54 <__divdf3+0x128>
c0027f45:	85 c0                	test   eax,eax
c0027f47:	74 bb                	je     c0027f04 <__divdf3+0xd8>
c0027f49:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f4c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f4f:	e9 4b 02 00 00       	jmp    c002819f <__divdf3+0x373>
c0027f54:	85 c0                	test   eax,eax
c0027f56:	75 ac                	jne    c0027f04 <__divdf3+0xd8>
c0027f58:	31 ff                	xor    edi,edi
c0027f5a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f5f:	e9 3b 02 00 00       	jmp    c002819f <__divdf3+0x373>
c0027f64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f6a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f70:	75 6b                	jne    c0027fdd <__divdf3+0x1b1>
c0027f72:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f75:	09 d6                	or     esi,edx
c0027f77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f7b:	74 28                	je     c0027fa5 <__divdf3+0x179>
c0027f7d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f80:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f83:	85 f6                	test   esi,esi
c0027f85:	0f 85 14 02 00 00    	jne    c002819f <__divdf3+0x373>
c0027f8b:	31 ff                	xor    edi,edi
c0027f8d:	31 c9                	xor    ecx,ecx
c0027f8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f92:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f95:	0f 89 04 02 00 00    	jns    c002819f <__divdf3+0x373>
c0027f9b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fa0:	e9 fa 01 00 00       	jmp    c002819f <__divdf3+0x373>
c0027fa5:	85 f6                	test   esi,esi
c0027fa7:	75 1b                	jne    c0027fc4 <__divdf3+0x198>
c0027fa9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fac:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027faf:	25 00 00 00 80       	and    eax,0x80000000
c0027fb4:	31 c9                	xor    ecx,ecx
c0027fb6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027fbb:	89 cf                	mov    edi,ecx
c0027fbd:	89 c1                	mov    ecx,eax
c0027fbf:	e9 db 01 00 00       	jmp    c002819f <__divdf3+0x373>
c0027fc4:	01 d2                	add    edx,edx
c0027fc6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fc9:	c1 eb 1f             	shr    ebx,0x1f
c0027fcc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fcf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027fd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027fd5:	09 da                	or     edx,ebx
c0027fd7:	78 04                	js     c0027fdd <__divdf3+0x1b1>
c0027fd9:	89 c8                	mov    eax,ecx
c0027fdb:	eb e7                	jmp    c0027fc4 <__divdf3+0x198>
c0027fdd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fe0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027fe6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fec:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027fef:	39 d6                	cmp    esi,edx
c0027ff1:	77 0d                	ja     c0028000 <__divdf3+0x1d4>
c0027ff3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027ff6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ff9:	72 1b                	jb     c0028016 <__divdf3+0x1ea>
c0027ffb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ffe:	75 16                	jne    c0028016 <__divdf3+0x1ea>
c0028000:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028003:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028006:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028009:	83 de 00             	sbb    esi,0x0
c002800c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002800f:	ba 01 00 00 00       	mov    edx,0x1
c0028014:	eb 02                	jmp    c0028018 <__divdf3+0x1ec>
c0028016:	31 d2                	xor    edx,edx
c0028018:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002801f:	31 ff                	xor    edi,edi
c0028021:	01 ff                	add    edi,edi
c0028023:	89 d1                	mov    ecx,edx
c0028025:	c1 e9 1f             	shr    ecx,0x1f
c0028028:	09 cf                	or     edi,ecx
c002802a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002802d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028030:	89 da                	mov    edx,ebx
c0028032:	89 f3                	mov    ebx,esi
c0028034:	8d 34 36             	lea    esi,[esi+esi*1]
c0028037:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002803a:	c1 e9 1f             	shr    ecx,0x1f
c002803d:	09 ce                	or     esi,ecx
c002803f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028042:	01 c9                	add    ecx,ecx
c0028044:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028047:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002804a:	85 db                	test   ebx,ebx
c002804c:	78 29                	js     c0028077 <__divdf3+0x24b>
c002804e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028051:	72 07                	jb     c002805a <__divdf3+0x22e>
c0028053:	75 3c                	jne    c0028091 <__divdf3+0x265>
c0028055:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028058:	77 37                	ja     c0028091 <__divdf3+0x265>
c002805a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002805d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028060:	31 d2                	xor    edx,edx
c0028062:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028065:	0f 97 c2             	seta   dl
c0028068:	29 d6                	sub    esi,edx
c002806a:	89 d9                	mov    ecx,ebx
c002806c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002806f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028072:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028075:	eb 17                	jmp    c002808e <__divdf3+0x262>
c0028077:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002807a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002807d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028080:	0f 97 c1             	seta   cl
c0028083:	0f b6 c9             	movzx  ecx,cl
c0028086:	29 ce                	sub    esi,ecx
c0028088:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002808b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002808e:	83 ca 01             	or     edx,0x1
c0028091:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028094:	75 8b                	jne    c0028021 <__divdf3+0x1f5>
c0028096:	c1 e7 09             	shl    edi,0x9
c0028099:	89 d1                	mov    ecx,edx
c002809b:	c1 e9 17             	shr    ecx,0x17
c002809e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280a1:	09 f3                	or     ebx,esi
c00280a3:	0f 95 c3             	setne  bl
c00280a6:	0f b6 db             	movzx  ebx,bl
c00280a9:	c1 e2 09             	shl    edx,0x9
c00280ac:	09 d3                	or     ebx,edx
c00280ae:	89 ca                	mov    edx,ecx
c00280b0:	09 fa                	or     edx,edi
c00280b2:	78 0c                	js     c00280c0 <__divdf3+0x294>
c00280b4:	01 d2                	add    edx,edx
c00280b6:	89 d9                	mov    ecx,ebx
c00280b8:	c1 e9 1f             	shr    ecx,0x1f
c00280bb:	09 ca                	or     edx,ecx
c00280bd:	01 db                	add    ebx,ebx
c00280bf:	48                   	dec    eax
c00280c0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280c5:	0f 8f 83 00 00 00    	jg     c002814e <__divdf3+0x322>
c00280cb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00280d1:	85 c0                	test   eax,eax
c00280d3:	0f 8f 82 00 00 00    	jg     c002815b <__divdf3+0x32f>
c00280d9:	83 f8 cc             	cmp    eax,0xffffffcc
c00280dc:	7c 77                	jl     c0028155 <__divdf3+0x329>
c00280de:	be 01 00 00 00       	mov    esi,0x1
c00280e3:	29 c6                	sub    esi,eax
c00280e5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280eb:	83 fe 1f             	cmp    esi,0x1f
c00280ee:	7e 2f                	jle    c002811f <__divdf3+0x2f3>
c00280f0:	83 fe 20             	cmp    esi,0x20
c00280f3:	75 0a                	jne    c00280ff <__divdf3+0x2d3>
c00280f5:	85 db                	test   ebx,ebx
c00280f7:	0f 95 c3             	setne  bl
c00280fa:	0f b6 db             	movzx  ebx,bl
c00280fd:	eb 1a                	jmp    c0028119 <__divdf3+0x2ed>
c00280ff:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028102:	89 d7                	mov    edi,edx
c0028104:	d3 e7                	shl    edi,cl
c0028106:	89 f9                	mov    ecx,edi
c0028108:	09 d9                	or     ecx,ebx
c002810a:	0f 95 c3             	setne  bl
c002810d:	0f b6 db             	movzx  ebx,bl
c0028110:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028115:	29 c1                	sub    ecx,eax
c0028117:	d3 ea                	shr    edx,cl
c0028119:	09 d3                	or     ebx,edx
c002811b:	31 c0                	xor    eax,eax
c002811d:	eb 3a                	jmp    c0028159 <__divdf3+0x32d>
c002811f:	83 c0 1f             	add    eax,0x1f
c0028122:	89 d7                	mov    edi,edx
c0028124:	88 c1                	mov    cl,al
c0028126:	d3 e7                	shl    edi,cl
c0028128:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002812b:	89 df                	mov    edi,ebx
c002812d:	89 f1                	mov    ecx,esi
c002812f:	d3 ef                	shr    edi,cl
c0028131:	89 f9                	mov    ecx,edi
c0028133:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028136:	09 cf                	or     edi,ecx
c0028138:	88 c1                	mov    cl,al
c002813a:	d3 e3                	shl    ebx,cl
c002813c:	85 db                	test   ebx,ebx
c002813e:	0f 95 c3             	setne  bl
c0028141:	0f b6 db             	movzx  ebx,bl
c0028144:	09 fb                	or     ebx,edi
c0028146:	89 f1                	mov    ecx,esi
c0028148:	d3 ea                	shr    edx,cl
c002814a:	31 c0                	xor    eax,eax
c002814c:	eb 0d                	jmp    c002815b <__divdf3+0x32f>
c002814e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028153:	eb 02                	jmp    c0028157 <__divdf3+0x32b>
c0028155:	31 c0                	xor    eax,eax
c0028157:	31 db                	xor    ebx,ebx
c0028159:	31 d2                	xor    edx,edx
c002815b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002815e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028161:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028167:	09 c8                	or     eax,ecx
c0028169:	c1 e0 14             	shl    eax,0x14
c002816c:	89 d1                	mov    ecx,edx
c002816e:	c1 e9 0b             	shr    ecx,0xb
c0028171:	09 c8                	or     eax,ecx
c0028173:	89 c6                	mov    esi,eax
c0028175:	89 d9                	mov    ecx,ebx
c0028177:	c1 e9 0b             	shr    ecx,0xb
c002817a:	c1 e2 15             	shl    edx,0x15
c002817d:	09 ca                	or     edx,ecx
c002817f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028185:	0f 95 c0             	setne  al
c0028188:	09 c1                	or     ecx,eax
c002818a:	83 e1 01             	and    ecx,0x1
c002818d:	c1 eb 0a             	shr    ebx,0xa
c0028190:	21 cb                	and    ebx,ecx
c0028192:	01 d3                	add    ebx,edx
c0028194:	89 d8                	mov    eax,ebx
c0028196:	83 d6 00             	adc    esi,0x0
c0028199:	89 f2                	mov    edx,esi
c002819b:	89 c7                	mov    edi,eax
c002819d:	89 d1                	mov    ecx,edx
c002819f:	89 f8                	mov    eax,edi
c00281a1:	89 ca                	mov    edx,ecx
c00281a3:	83 c4 2c             	add    esp,0x2c
c00281a6:	5b                   	pop    ebx
c00281a7:	5e                   	pop    esi
c00281a8:	5f                   	pop    edi
c00281a9:	5d                   	pop    ebp
c00281aa:	c3                   	ret    

c00281ab <__floatsidf>:
c00281ab:	55                   	push   ebp
c00281ac:	89 e5                	mov    ebp,esp
c00281ae:	56                   	push   esi
c00281af:	53                   	push   ebx
c00281b0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281b3:	85 db                	test   ebx,ebx
c00281b5:	7e 15                	jle    c00281cc <__floatsidf+0x21>
c00281b7:	0f bd cb             	bsr    ecx,ebx
c00281ba:	83 f1 1f             	xor    ecx,0x1f
c00281bd:	d3 e3                	shl    ebx,cl
c00281bf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281c5:	b8 1e 04 00 00       	mov    eax,0x41e
c00281ca:	eb 21                	jmp    c00281ed <__floatsidf+0x42>
c00281cc:	b8 00 00 00 00       	mov    eax,0x0
c00281d1:	ba 00 00 00 00       	mov    edx,0x0
c00281d6:	74 2a                	je     c0028202 <__floatsidf+0x57>
c00281d8:	f7 db                	neg    ebx
c00281da:	0f bd cb             	bsr    ecx,ebx
c00281dd:	83 f1 1f             	xor    ecx,0x1f
c00281e0:	d3 e3                	shl    ebx,cl
c00281e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281e8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00281ed:	29 c8                	sub    eax,ecx
c00281ef:	c1 e0 14             	shl    eax,0x14
c00281f2:	89 c1                	mov    ecx,eax
c00281f4:	89 de                	mov    esi,ebx
c00281f6:	c1 ee 0b             	shr    esi,0xb
c00281f9:	09 f1                	or     ecx,esi
c00281fb:	89 ca                	mov    edx,ecx
c00281fd:	c1 e3 15             	shl    ebx,0x15
c0028200:	89 d8                	mov    eax,ebx
c0028202:	5b                   	pop    ebx
c0028203:	5e                   	pop    esi
c0028204:	5d                   	pop    ebp
c0028205:	c3                   	ret    

c0028206 <__floatunsidf>:
c0028206:	55                   	push   ebp
c0028207:	89 e5                	mov    ebp,esp
c0028209:	56                   	push   esi
c002820a:	53                   	push   ebx
c002820b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002820e:	85 db                	test   ebx,ebx
c0028210:	74 2a                	je     c002823c <__floatunsidf+0x36>
c0028212:	0f bd cb             	bsr    ecx,ebx
c0028215:	83 f1 1f             	xor    ecx,0x1f
c0028218:	d3 e3                	shl    ebx,cl
c002821a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028220:	b8 1e 04 00 00       	mov    eax,0x41e
c0028225:	29 c8                	sub    eax,ecx
c0028227:	c1 e0 14             	shl    eax,0x14
c002822a:	89 c1                	mov    ecx,eax
c002822c:	89 de                	mov    esi,ebx
c002822e:	c1 ee 0b             	shr    esi,0xb
c0028231:	09 f1                	or     ecx,esi
c0028233:	89 ca                	mov    edx,ecx
c0028235:	c1 e3 15             	shl    ebx,0x15
c0028238:	89 d8                	mov    eax,ebx
c002823a:	eb 04                	jmp    c0028240 <__floatunsidf+0x3a>
c002823c:	31 c0                	xor    eax,eax
c002823e:	31 d2                	xor    edx,edx
c0028240:	5b                   	pop    ebx
c0028241:	5e                   	pop    esi
c0028242:	5d                   	pop    ebp
c0028243:	c3                   	ret    

c0028244 <__fixdfsi>:
c0028244:	55                   	push   ebp
c0028245:	89 e5                	mov    ebp,esp
c0028247:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002824a:	89 d1                	mov    ecx,edx
c002824c:	c1 e1 0b             	shl    ecx,0xb
c002824f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028258:	c1 e8 15             	shr    eax,0x15
c002825b:	09 c1                	or     ecx,eax
c002825d:	c1 fa 14             	sar    edx,0x14
c0028260:	78 1f                	js     c0028281 <__fixdfsi+0x3d>
c0028262:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028268:	31 c0                	xor    eax,eax
c002826a:	83 fa 1e             	cmp    edx,0x1e
c002826d:	77 40                	ja     c00282af <__fixdfsi+0x6b>
c002826f:	89 c8                	mov    eax,ecx
c0028271:	0d 00 00 00 80       	or     eax,0x80000000
c0028276:	b9 1f 00 00 00       	mov    ecx,0x1f
c002827b:	29 d1                	sub    ecx,edx
c002827d:	d3 e8                	shr    eax,cl
c002827f:	eb 2e                	jmp    c00282af <__fixdfsi+0x6b>
c0028281:	31 c0                	xor    eax,eax
c0028283:	81 c2 01 04 00 00    	add    edx,0x401
c0028289:	78 24                	js     c00282af <__fixdfsi+0x6b>
c002828b:	83 fa 1e             	cmp    edx,0x1e
c002828e:	7e 09                	jle    c0028299 <__fixdfsi+0x55>
c0028290:	83 fa 1f             	cmp    edx,0x1f
c0028293:	75 18                	jne    c00282ad <__fixdfsi+0x69>
c0028295:	85 c9                	test   ecx,ecx
c0028297:	75 14                	jne    c00282ad <__fixdfsi+0x69>
c0028299:	89 c8                	mov    eax,ecx
c002829b:	0d 00 00 00 80       	or     eax,0x80000000
c00282a0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282a5:	29 d1                	sub    ecx,edx
c00282a7:	d3 e8                	shr    eax,cl
c00282a9:	f7 d8                	neg    eax
c00282ab:	eb 02                	jmp    c00282af <__fixdfsi+0x6b>
c00282ad:	31 c0                	xor    eax,eax
c00282af:	5d                   	pop    ebp
c00282b0:	c3                   	ret    

c00282b1 <__fixunsdfsi>:
c00282b1:	55                   	push   ebp
c00282b2:	89 e5                	mov    ebp,esp
c00282b4:	53                   	push   ebx
c00282b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282bb:	89 d3                	mov    ebx,edx
c00282bd:	c1 fb 14             	sar    ebx,0x14
c00282c0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282c6:	31 c0                	xor    eax,eax
c00282c8:	83 fb 1f             	cmp    ebx,0x1f
c00282cb:	77 1d                	ja     c00282ea <__fixunsdfsi+0x39>
c00282cd:	89 d0                	mov    eax,edx
c00282cf:	c1 e0 0b             	shl    eax,0xb
c00282d2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282d7:	c1 e9 15             	shr    ecx,0x15
c00282da:	09 c8                	or     eax,ecx
c00282dc:	0d 00 00 00 80       	or     eax,0x80000000
c00282e1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282e6:	29 d9                	sub    ecx,ebx
c00282e8:	d3 e8                	shr    eax,cl
c00282ea:	5b                   	pop    ebx
c00282eb:	5d                   	pop    ebp
c00282ec:	c3                   	ret    

c00282ed <__cmpdf2>:
c00282ed:	55                   	push   ebp
c00282ee:	89 e5                	mov    ebp,esp
c00282f0:	57                   	push   edi
c00282f1:	56                   	push   esi
c00282f2:	53                   	push   ebx
c00282f3:	83 ec 0c             	sub    esp,0xc
c00282f6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00282f9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282fc:	89 ca                	mov    edx,ecx
c00282fe:	c1 ea 14             	shr    edx,0x14
c0028301:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028307:	89 cb                	mov    ebx,ecx
c0028309:	c1 fb 1f             	sar    ebx,0x1f
c002830c:	31 da                	xor    edx,ebx
c002830e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028311:	89 df                	mov    edi,ebx
c0028313:	c1 e7 0b             	shl    edi,0xb
c0028316:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028319:	c1 e1 0b             	shl    ecx,0xb
c002831c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028322:	c1 eb 15             	shr    ebx,0x15
c0028325:	09 d9                	or     ecx,ebx
c0028327:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002832a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002832d:	89 ce                	mov    esi,ecx
c002832f:	c1 ee 14             	shr    esi,0x14
c0028332:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028338:	89 cb                	mov    ebx,ecx
c002833a:	c1 fb 1f             	sar    ebx,0x1f
c002833d:	31 de                	xor    esi,ebx
c002833f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028342:	89 df                	mov    edi,ebx
c0028344:	c1 e7 0b             	shl    edi,0xb
c0028347:	c1 e1 0b             	shl    ecx,0xb
c002834a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028350:	c1 eb 15             	shr    ebx,0x15
c0028353:	09 d9                	or     ecx,ebx
c0028355:	89 d3                	mov    ebx,edx
c0028357:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002835d:	43                   	inc    ebx
c002835e:	83 fb 01             	cmp    ebx,0x1
c0028361:	77 08                	ja     c002836b <__cmpdf2+0x7e>
c0028363:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028366:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028369:	75 68                	jne    c00283d3 <__cmpdf2+0xe6>
c002836b:	89 f3                	mov    ebx,esi
c002836d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028373:	43                   	inc    ebx
c0028374:	83 fb 01             	cmp    ebx,0x1
c0028377:	77 06                	ja     c002837f <__cmpdf2+0x92>
c0028379:	89 fb                	mov    ebx,edi
c002837b:	09 cb                	or     ebx,ecx
c002837d:	75 54                	jne    c00283d3 <__cmpdf2+0xe6>
c002837f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028382:	09 f8                	or     eax,edi
c0028384:	09 c8                	or     eax,ecx
c0028386:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028389:	75 12                	jne    c002839d <__cmpdf2+0xb0>
c002838b:	8d 42 01             	lea    eax,[edx+0x1]
c002838e:	83 f8 01             	cmp    eax,0x1
c0028391:	77 0a                	ja     c002839d <__cmpdf2+0xb0>
c0028393:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028396:	31 c0                	xor    eax,eax
c0028398:	83 fb 01             	cmp    ebx,0x1
c002839b:	76 36                	jbe    c00283d3 <__cmpdf2+0xe6>
c002839d:	b8 01 00 00 00       	mov    eax,0x1
c00283a2:	39 f2                	cmp    edx,esi
c00283a4:	7f 2d                	jg     c00283d3 <__cmpdf2+0xe6>
c00283a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283ab:	7c 26                	jl     c00283d3 <__cmpdf2+0xe6>
c00283ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283b0:	77 07                	ja     c00283b9 <__cmpdf2+0xcc>
c00283b2:	72 16                	jb     c00283ca <__cmpdf2+0xdd>
c00283b4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283b7:	76 0a                	jbe    c00283c3 <__cmpdf2+0xd6>
c00283b9:	89 d0                	mov    eax,edx
c00283bb:	c1 f8 1f             	sar    eax,0x1f
c00283be:	83 c8 01             	or     eax,0x1
c00283c1:	eb 10                	jmp    c00283d3 <__cmpdf2+0xe6>
c00283c3:	b8 00 00 00 00       	mov    eax,0x0
c00283c8:	73 09                	jae    c00283d3 <__cmpdf2+0xe6>
c00283ca:	89 d0                	mov    eax,edx
c00283cc:	c1 f8 1f             	sar    eax,0x1f
c00283cf:	83 e0 02             	and    eax,0x2
c00283d2:	48                   	dec    eax
c00283d3:	83 c4 0c             	add    esp,0xc
c00283d6:	5b                   	pop    ebx
c00283d7:	5e                   	pop    esi
c00283d8:	5f                   	pop    edi
c00283d9:	5d                   	pop    ebp
c00283da:	c3                   	ret    

c00283db <__eqdf2>:
c00283db:	55                   	push   ebp
c00283dc:	89 e5                	mov    ebp,esp
c00283de:	50                   	push   eax
c00283df:	6a 01                	push   0x1
c00283e1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283ed:	e8 fb fe ff ff       	call   c00282ed <__cmpdf2>
c00283f2:	83 c4 18             	add    esp,0x18
c00283f5:	c9                   	leave  
c00283f6:	c3                   	ret    

c00283f7 <__nedf2>:
c00283f7:	eb e2                	jmp    c00283db <__eqdf2>

c00283f9 <__gtdf2>:
c00283f9:	55                   	push   ebp
c00283fa:	89 e5                	mov    ebp,esp
c00283fc:	50                   	push   eax
c00283fd:	6a ff                	push   0xffffffff
c00283ff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028402:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028405:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028408:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002840b:	e8 dd fe ff ff       	call   c00282ed <__cmpdf2>
c0028410:	83 c4 18             	add    esp,0x18
c0028413:	c9                   	leave  
c0028414:	c3                   	ret    

c0028415 <__gedf2>:
c0028415:	eb e2                	jmp    c00283f9 <__gtdf2>

c0028417 <__ltdf2>:
c0028417:	eb c2                	jmp    c00283db <__eqdf2>

c0028419 <__ledf2>:
c0028419:	eb c0                	jmp    c00283db <__eqdf2>

c002841b <__truncdfsf2>:
c002841b:	55                   	push   ebp
c002841c:	89 e5                	mov    ebp,esp
c002841e:	57                   	push   edi
c002841f:	56                   	push   esi
c0028420:	53                   	push   ebx
c0028421:	83 ec 0c             	sub    esp,0xc
c0028424:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028427:	89 d1                	mov    ecx,edx
c0028429:	c1 f9 14             	sar    ecx,0x14
c002842c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002842f:	89 df                	mov    edi,ebx
c0028431:	c1 e7 0b             	shl    edi,0xb
c0028434:	89 d0                	mov    eax,edx
c0028436:	c1 e0 0b             	shl    eax,0xb
c0028439:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002843e:	c1 eb 15             	shr    ebx,0x15
c0028441:	09 d8                	or     eax,ebx
c0028443:	89 cb                	mov    ebx,ecx
c0028445:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002844b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028451:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028457:	0f 86 9e 00 00 00    	jbe    c00284fb <__truncdfsf2+0xe0>
c002845d:	85 db                	test   ebx,ebx
c002845f:	75 0a                	jne    c002846b <__truncdfsf2+0x50>
c0028461:	c1 fa 17             	sar    edx,0x17
c0028464:	30 d2                	xor    dl,dl
c0028466:	e9 84 00 00 00       	jmp    c00284ef <__truncdfsf2+0xd4>
c002846b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028471:	83 fe 83             	cmp    esi,0xffffff83
c0028474:	7d 4b                	jge    c00284c1 <__truncdfsf2+0xa6>
c0028476:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002847b:	29 f1                	sub    ecx,esi
c002847d:	83 f9 1f             	cmp    ecx,0x1f
c0028480:	7f 6b                	jg     c00284ed <__truncdfsf2+0xd2>
c0028482:	0d 00 00 00 80       	or     eax,0x80000000
c0028487:	89 c3                	mov    ebx,eax
c0028489:	d3 eb                	shr    ebx,cl
c002848b:	be 01 00 00 00       	mov    esi,0x1
c0028490:	d3 e6                	shl    esi,cl
c0028492:	4e                   	dec    esi
c0028493:	21 f0                	and    eax,esi
c0028495:	09 f8                	or     eax,edi
c0028497:	0f 95 c0             	setne  al
c002849a:	0f b6 c0             	movzx  eax,al
c002849d:	09 c3                	or     ebx,eax
c002849f:	89 d9                	mov    ecx,ebx
c00284a1:	c1 e9 08             	shr    ecx,0x8
c00284a4:	f6 c3 7f             	test   bl,0x7f
c00284a7:	0f 95 c0             	setne  al
c00284aa:	09 c8                	or     eax,ecx
c00284ac:	83 e0 01             	and    eax,0x1
c00284af:	c1 eb 07             	shr    ebx,0x7
c00284b2:	21 c3                	and    ebx,eax
c00284b4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284ba:	09 d1                	or     ecx,edx
c00284bc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284bf:	eb 76                	jmp    c0028537 <__truncdfsf2+0x11c>
c00284c1:	83 c6 80             	add    esi,0xffffff80
c00284c4:	7e 1d                	jle    c00284e3 <__truncdfsf2+0xc8>
c00284c6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00284cc:	75 0b                	jne    c00284d9 <__truncdfsf2+0xbe>
c00284ce:	09 f8                	or     eax,edi
c00284d0:	74 09                	je     c00284db <__truncdfsf2+0xc0>
c00284d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00284d7:	eb 02                	jmp    c00284db <__truncdfsf2+0xc0>
c00284d9:	31 c0                	xor    eax,eax
c00284db:	c1 fa 17             	sar    edx,0x17
c00284de:	80 ca ff             	or     dl,0xff
c00284e1:	eb 0e                	jmp    c00284f1 <__truncdfsf2+0xd6>
c00284e3:	c1 fa 1f             	sar    edx,0x1f
c00284e6:	c1 e2 08             	shl    edx,0x8
c00284e9:	09 ca                	or     edx,ecx
c00284eb:	eb 04                	jmp    c00284f1 <__truncdfsf2+0xd6>
c00284ed:	31 d2                	xor    edx,edx
c00284ef:	31 c0                	xor    eax,eax
c00284f1:	c1 e2 17             	shl    edx,0x17
c00284f4:	c1 e8 08             	shr    eax,0x8
c00284f7:	09 d0                	or     eax,edx
c00284f9:	eb 3c                	jmp    c0028537 <__truncdfsf2+0x11c>
c00284fb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028501:	89 ca                	mov    edx,ecx
c0028503:	c1 fa 0b             	sar    edx,0xb
c0028506:	c1 e2 08             	shl    edx,0x8
c0028509:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002850c:	31 db                	xor    ebx,ebx
c002850e:	85 ff                	test   edi,edi
c0028510:	0f 95 c3             	setne  bl
c0028513:	09 d8                	or     eax,ebx
c0028515:	89 c3                	mov    ebx,eax
c0028517:	c1 eb 08             	shr    ebx,0x8
c002851a:	a8 7f                	test   al,0x7f
c002851c:	0f 95 c2             	setne  dl
c002851f:	89 d6                	mov    esi,edx
c0028521:	09 de                	or     esi,ebx
c0028523:	83 e6 01             	and    esi,0x1
c0028526:	c1 e8 07             	shr    eax,0x7
c0028529:	21 f0                	and    eax,esi
c002852b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002852e:	09 ca                	or     edx,ecx
c0028530:	c1 e2 17             	shl    edx,0x17
c0028533:	09 da                	or     edx,ebx
c0028535:	01 d0                	add    eax,edx
c0028537:	83 c4 0c             	add    esp,0xc
c002853a:	5b                   	pop    ebx
c002853b:	5e                   	pop    esi
c002853c:	5f                   	pop    edi
c002853d:	5d                   	pop    ebp
c002853e:	c3                   	ret    

c002853f <__extendsfdf2>:
c002853f:	55                   	push   ebp
c0028540:	89 e5                	mov    ebp,esp
c0028542:	57                   	push   edi
c0028543:	56                   	push   esi
c0028544:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028547:	89 d1                	mov    ecx,edx
c0028549:	c1 f9 17             	sar    ecx,0x17
c002854c:	c1 e2 08             	shl    edx,0x8
c002854f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028555:	89 c8                	mov    eax,ecx
c0028557:	80 e4 f8             	and    ah,0xf8
c002855a:	8d 71 01             	lea    esi,[ecx+0x1]
c002855d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028563:	75 27                	jne    c002858c <__extendsfdf2+0x4d>
c0028565:	81 e1 ff 00 00 00    	and    ecx,0xff
c002856b:	75 18                	jne    c0028585 <__extendsfdf2+0x46>
c002856d:	85 d2                	test   edx,edx
c002856f:	74 20                	je     c0028591 <__extendsfdf2+0x52>
c0028571:	41                   	inc    ecx
c0028572:	01 d2                	add    edx,edx
c0028574:	79 fb                	jns    c0028571 <__extendsfdf2+0x32>
c0028576:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002857c:	29 c8                	sub    eax,ecx
c002857e:	05 81 03 00 00       	add    eax,0x381
c0028583:	eb 0c                	jmp    c0028591 <__extendsfdf2+0x52>
c0028585:	05 00 07 00 00       	add    eax,0x700
c002858a:	eb 05                	jmp    c0028591 <__extendsfdf2+0x52>
c002858c:	05 80 03 00 00       	add    eax,0x380
c0028591:	c1 e0 14             	shl    eax,0x14
c0028594:	89 c1                	mov    ecx,eax
c0028596:	89 d0                	mov    eax,edx
c0028598:	c1 e8 0b             	shr    eax,0xb
c002859b:	09 c1                	or     ecx,eax
c002859d:	c1 e2 15             	shl    edx,0x15
c00285a0:	89 d0                	mov    eax,edx
c00285a2:	89 ca                	mov    edx,ecx
c00285a4:	5e                   	pop    esi
c00285a5:	5f                   	pop    edi
c00285a6:	5d                   	pop    ebp
c00285a7:	c3                   	ret    
c00285a8:	66 90                	xchg   ax,ax
c00285aa:	66 90                	xchg   ax,ax
c00285ac:	66 90                	xchg   ax,ax
c00285ae:	66 90                	xchg   ax,ax

c00285b0 <fabs>:
c00285b0:	83 ec 0c             	sub    esp,0xc
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285c7:	dd 04 24             	fld    QWORD PTR [esp]
c00285ca:	83 c4 0c             	add    esp,0xc
c00285cd:	c3                   	ret    
c00285ce:	66 90                	xchg   ax,ax

c00285d0 <lrint>:
c00285d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00285d4:	83 ec 04             	sub    esp,0x4
c00285d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00285da:	58                   	pop    eax
c00285db:	c3                   	ret    

c00285dc <lrintf>:
c00285dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00285e0:	83 ec 04             	sub    esp,0x4
c00285e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00285e6:	58                   	pop    eax
c00285e7:	c3                   	ret    

Disassembly of section .init:

c00285e8 <_init>:
c00285e8:	55                   	push   ebp
c00285e9:	89 e5                	mov    ebp,esp
c00285eb:	e8 28 7b fd ff       	call   c0000118 <frame_dummy>
c00285f0:	e8 5b e0 ff ff       	call   c0026650 <__do_global_ctors_aux>
c00285f5:	5d                   	pop    ebp
c00285f6:	c3                   	ret    

Disassembly of section .fini:

c00285f7 <_fini>:
c00285f7:	55                   	push   ebp
c00285f8:	89 e5                	mov    ebp,esp
c00285fa:	e8 a9 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00285ff:	5d                   	pop    ebp
c0028600:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028602 <Computer::~Computer()>:
c0028602:	83 ec 0c             	sub    esp,0xc
c0028605:	ba 7c a1 02 c0       	mov    edx,0xc002a17c
c002860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860e:	89 10                	mov    DWORD PTR [eax],edx
c0028610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028614:	83 ec 0c             	sub    esp,0xc
c0028617:	50                   	push   eax
c0028618:	e8 23 b5 fe ff       	call   c0013b40 <Device::~Device()>
c002861d:	83 c4 10             	add    esp,0x10
c0028620:	90                   	nop
c0028621:	83 c4 0c             	add    esp,0xc
c0028624:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028626 <Computer::~Computer()>:
c0028626:	83 ec 0c             	sub    esp,0xc
c0028629:	83 ec 0c             	sub    esp,0xc
c002862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028630:	e8 cd ff ff ff       	call   c0028602 <Computer::~Computer()>
c0028635:	83 c4 10             	add    esp,0x10
c0028638:	83 ec 08             	sub    esp,0x8
c002863b:	68 ec 01 00 00       	push   0x1ec
c0028640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028644:	e8 18 a1 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028649:	83 c4 10             	add    esp,0x10
c002864c:	83 c4 0c             	add    esp,0xc
c002864f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028650 <idleCommon()>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	fa                   	cli    
c0028654:	ff 05 88 12 03 c0    	inc    DWORD PTR ds:0xc0031288
c002865a:	e8 16 55 ff ff       	call   c001db75 <schedule()>
c002865f:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0028664:	48                   	dec    eax
c0028665:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c002866a:	75 01                	jne    c002866d <idleCommon()+0x1d>
c002866c:	fb                   	sti    
c002866d:	83 c4 0c             	add    esp,0xc
c0028670:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028672 <LinkedList<UnixFile>::~LinkedList()>:
c0028672:	90                   	nop
c0028673:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028674 <LinkedList<UnixFile>::LinkedList()>:
c0028674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028678:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002867e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028682:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002868d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028698:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002869e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286b4:	90                   	nop
c00286b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286b6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286b6:	83 ec 0c             	sub    esp,0xc
c00286b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286be:	75 10                	jne    c00286d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	68 34 a4 02 c0       	push   0xc002a434
c00286c8:	e8 16 19 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00286cd:	83 c4 10             	add    esp,0x10
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d6:	85 c0                	test   eax,eax
c00286d8:	74 34                	je     c002870e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286e1:	85 c0                	test   eax,eax
c00286e3:	74 29                	je     c002870e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028702:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002870c:	eb 65                	jmp    c0028773 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002870e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028712:	8b 00                	mov    eax,DWORD PTR [eax]
c0028714:	85 c0                	test   eax,eax
c0028716:	75 4b                	jne    c0028763 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002871f:	85 c0                	test   eax,eax
c0028721:	75 40                	jne    c0028763 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002872b:	89 10                	mov    DWORD PTR [eax],edx
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002874d:	85 c0                	test   eax,eax
c002874f:	74 22                	je     c0028773 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028751:	83 ec 0c             	sub    esp,0xc
c0028754:	68 56 a4 02 c0       	push   0xc002a456
c0028759:	e8 85 18 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c002875e:	83 c4 10             	add    esp,0x10
c0028761:	eb 10                	jmp    c0028773 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028763:	83 ec 0c             	sub    esp,0xc
c0028766:	68 60 a4 02 c0       	push   0xc002a460
c002876b:	e8 73 18 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028770:	83 c4 10             	add    esp,0x10
c0028773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028777:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002877a:	8d 50 01             	lea    edx,[eax+0x1]
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028784:	90                   	nop
c0028785:	83 c4 0c             	add    esp,0xc
c0028788:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002878a <LinkedList<UnixFile>::getFirstElement()>:
c002878a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028792 <LinkedList<UnixFile>::removeFirst()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	8b 00                	mov    eax,DWORD PTR [eax]
c002879b:	85 c0                	test   eax,eax
c002879d:	75 12                	jne    c00287b1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002879f:	83 ec 0c             	sub    esp,0xc
c00287a2:	68 6c a4 02 c0       	push   0xc002a46c
c00287a7:	e8 37 18 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00287ac:	83 c4 10             	add    esp,0x10
c00287af:	eb 7e                	jmp    c002882f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287bb:	85 c0                	test   eax,eax
c00287bd:	74 10                	je     c00287cf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287bf:	83 ec 0c             	sub    esp,0xc
c00287c2:	68 b7 a4 02 c0       	push   0xc002a4b7
c00287c7:	e8 17 18 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00287cc:	83 c4 10             	add    esp,0x10
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d8:	85 c0                	test   eax,eax
c00287da:	75 33                	jne    c002880f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00287dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f8:	83 f8 01             	cmp    eax,0x1
c00287fb:	74 21                	je     c002881e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287fd:	83 ec 0c             	sub    esp,0xc
c0028800:	68 90 a4 02 c0       	push   0xc002a490
c0028805:	e8 d9 17 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c002880a:	83 c4 10             	add    esp,0x10
c002880d:	eb 0f                	jmp    c002881e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 00                	mov    eax,DWORD PTR [eax]
c0028815:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	89 10                	mov    DWORD PTR [eax],edx
c002881e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028822:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028825:	8d 50 ff             	lea    edx,[eax-0x1]
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882f:	83 c4 0c             	add    esp,0xc
c0028832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028834 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002883b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002883c <DriverlessDevice::~DriverlessDevice()>:
c002883c:	ba fc ad 02 c0       	mov    edx,0xc002adfc
c0028841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028845:	89 10                	mov    DWORD PTR [eax],edx
c0028847:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002884b:	50                   	push   eax
c002884c:	e8 ef b2 fe ff       	call   c0013b40 <Device::~Device()>
c0028851:	83 c4 04             	add    esp,0x4
c0028854:	90                   	nop
c0028855:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028856 <DriverlessDevice::~DriverlessDevice()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028860:	e8 d7 ff ff ff       	call   c002883c <DriverlessDevice::~DriverlessDevice()>
c0028865:	83 c4 10             	add    esp,0x10
c0028868:	83 ec 08             	sub    esp,0x8
c002886b:	68 58 01 00 00       	push   0x158
c0028870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028874:	e8 e8 9e fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028879:	83 c4 10             	add    esp,0x10
c002887c:	83 c4 0c             	add    esp,0xc
c002887f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028880 <LinkedList<Device>::addElement(Device*)>:
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028888:	75 10                	jne    c002889a <LinkedList<Device>::addElement(Device*)+0x1a>
c002888a:	83 ec 0c             	sub    esp,0xc
c002888d:	68 34 a4 02 c0       	push   0xc002a434
c0028892:	e8 4c 17 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028897:	83 c4 10             	add    esp,0x10
c002889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889e:	8b 00                	mov    eax,DWORD PTR [eax]
c00288a0:	85 c0                	test   eax,eax
c00288a2:	74 3a                	je     c00288de <LinkedList<Device>::addElement(Device*)+0x5e>
c00288a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288ab:	85 c0                	test   eax,eax
c00288ad:	74 2f                	je     c00288de <LinkedList<Device>::addElement(Device*)+0x5e>
c00288af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ba:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288dc:	eb 68                	jmp    c0028946 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288e4:	85 c0                	test   eax,eax
c00288e6:	75 4e                	jne    c0028936 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288ef:	85 c0                	test   eax,eax
c00288f1:	75 43                	jne    c0028936 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288fb:	89 10                	mov    DWORD PTR [eax],edx
c00288fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028901:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028905:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002890f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028920:	85 c0                	test   eax,eax
c0028922:	74 22                	je     c0028946 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	68 56 a4 02 c0       	push   0xc002a456
c002892c:	e8 b2 16 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028931:	83 c4 10             	add    esp,0x10
c0028934:	eb 10                	jmp    c0028946 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028936:	83 ec 0c             	sub    esp,0xc
c0028939:	68 60 a4 02 c0       	push   0xc002a460
c002893e:	e8 a0 16 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028943:	83 c4 10             	add    esp,0x10
c0028946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002894d:	8d 50 01             	lea    edx,[eax+0x1]
c0028950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028954:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028957:	90                   	nop
c0028958:	83 c4 0c             	add    esp,0xc
c002895b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002895c <LinkedList<Device>::LinkedList()>:
c002895c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028960:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028975:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002897c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002898a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028995:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002899c:	90                   	nop
c002899d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002899e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002899e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a4:	85 c0                	test   eax,eax
c00289a6:	75 0e                	jne    c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289af:	85 c0                	test   eax,eax
c00289b1:	75 03                	jne    c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289b3:	b0 01                	mov    al,0x1
c00289b5:	c3                   	ret    
c00289b6:	b0 00                	mov    al,0x0
c00289b8:	90                   	nop
c00289b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289be:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00289c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00289c2:	83 ec 0c             	sub    esp,0xc
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00289cb:	85 c0                	test   eax,eax
c00289cd:	75 15                	jne    c00289e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00289cf:	83 ec 0c             	sub    esp,0xc
c00289d2:	68 6c a4 02 c0       	push   0xc002a46c
c00289d7:	e8 07 16 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c00289dc:	83 c4 10             	add    esp,0x10
c00289df:	e9 88 00 00 00       	jmp    c0028a6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00289e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289ee:	85 c0                	test   eax,eax
c00289f0:	0f 95 c0             	setne  al
c00289f3:	84 c0                	test   al,al
c00289f5:	74 10                	je     c0028a07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00289f7:	83 ec 0c             	sub    esp,0xc
c00289fa:	68 b7 a4 02 c0       	push   0xc002a4b7
c00289ff:	e8 df 15 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028a04:	83 c4 10             	add    esp,0x10
c0028a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a10:	85 c0                	test   eax,eax
c0028a12:	0f 94 c0             	sete   al
c0028a15:	84 c0                	test   al,al
c0028a17:	74 33                	je     c0028a4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a35:	83 f8 01             	cmp    eax,0x1
c0028a38:	74 21                	je     c0028a5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a3a:	83 ec 0c             	sub    esp,0xc
c0028a3d:	68 90 a4 02 c0       	push   0xc002a490
c0028a42:	e8 9c 15 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028a47:	83 c4 10             	add    esp,0x10
c0028a4a:	eb 0f                	jmp    c0028a5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a52:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a59:	89 10                	mov    DWORD PTR [eax],edx
c0028a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a62:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a6c:	83 c4 0c             	add    esp,0xc
c0028a6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028a70:	83 ec 0c             	sub    esp,0xc
c0028a73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a78:	75 10                	jne    c0028a8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	68 34 a4 02 c0       	push   0xc002a434
c0028a82:	e8 5c 15 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a90:	85 c0                	test   eax,eax
c0028a92:	74 34                	je     c0028ac8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a9b:	85 c0                	test   eax,eax
c0028a9d:	74 29                	je     c0028ac8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aaa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ab5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028abf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ac6:	eb 65                	jmp    c0028b2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ace:	85 c0                	test   eax,eax
c0028ad0:	75 4b                	jne    c0028b1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ad9:	85 c0                	test   eax,eax
c0028adb:	75 40                	jne    c0028b1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ae5:	89 10                	mov    DWORD PTR [eax],edx
c0028ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028af9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b07:	85 c0                	test   eax,eax
c0028b09:	74 22                	je     c0028b2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b0b:	83 ec 0c             	sub    esp,0xc
c0028b0e:	68 56 a4 02 c0       	push   0xc002a456
c0028b13:	e8 cb 14 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028b18:	83 c4 10             	add    esp,0x10
c0028b1b:	eb 10                	jmp    c0028b2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b1d:	83 ec 0c             	sub    esp,0xc
c0028b20:	68 60 a4 02 c0       	push   0xc002a460
c0028b25:	e8 b9 14 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028b2a:	83 c4 10             	add    esp,0x10
c0028b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b34:	8d 50 01             	lea    edx,[eax+0x1]
c0028b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b3e:	90                   	nop
c0028b3f:	83 c4 0c             	add    esp,0xc
c0028b42:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b44 <ACPI::~ACPI()>:
c0028b44:	83 ec 0c             	sub    esp,0xc
c0028b47:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0028b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b50:	89 10                	mov    DWORD PTR [eax],edx
c0028b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b56:	83 ec 0c             	sub    esp,0xc
c0028b59:	50                   	push   eax
c0028b5a:	e8 e1 af fe ff       	call   c0013b40 <Device::~Device()>
c0028b5f:	83 c4 10             	add    esp,0x10
c0028b62:	90                   	nop
c0028b63:	83 c4 0c             	add    esp,0xc
c0028b66:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b68 <ACPI::~ACPI()>:
c0028b68:	83 ec 0c             	sub    esp,0xc
c0028b6b:	83 ec 0c             	sub    esp,0xc
c0028b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b72:	e8 cd ff ff ff       	call   c0028b44 <ACPI::~ACPI()>
c0028b77:	83 c4 10             	add    esp,0x10
c0028b7a:	83 ec 08             	sub    esp,0x8
c0028b7d:	68 64 12 00 00       	push   0x1264
c0028b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b86:	e8 d6 9b fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028b8b:	83 c4 10             	add    esp,0x10
c0028b8e:	83 c4 0c             	add    esp,0xc
c0028b91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028b92 <LinkedList<Device>::~LinkedList()>:
c0028b92:	90                   	nop
c0028b93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028b94 <LinkedList<Device>::isEmpty()>:
c0028b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b9a:	85 c0                	test   eax,eax
c0028b9c:	75 0e                	jne    c0028bac <LinkedList<Device>::isEmpty()+0x18>
c0028b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba5:	85 c0                	test   eax,eax
c0028ba7:	75 03                	jne    c0028bac <LinkedList<Device>::isEmpty()+0x18>
c0028ba9:	b0 01                	mov    al,0x1
c0028bab:	c3                   	ret    
c0028bac:	b0 00                	mov    al,0x0
c0028bae:	90                   	nop
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028bb0 <LinkedList<Device>::getFirstElement()>:
c0028bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028bb8 <LinkedList<Device>::removeFirst()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc1:	85 c0                	test   eax,eax
c0028bc3:	75 15                	jne    c0028bda <LinkedList<Device>::removeFirst()+0x22>
c0028bc5:	83 ec 0c             	sub    esp,0xc
c0028bc8:	68 6c a4 02 c0       	push   0xc002a46c
c0028bcd:	e8 11 14 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028bd2:	83 c4 10             	add    esp,0x10
c0028bd5:	e9 87 00 00 00       	jmp    c0028c61 <LinkedList<Device>::removeFirst()+0xa9>
c0028bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028be1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028be7:	85 c0                	test   eax,eax
c0028be9:	74 10                	je     c0028bfb <LinkedList<Device>::removeFirst()+0x43>
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	68 b7 a4 02 c0       	push   0xc002a4b7
c0028bf3:	e8 eb 13 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028bf8:	83 c4 10             	add    esp,0x10
c0028bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c01:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028c07:	85 c0                	test   eax,eax
c0028c09:	75 33                	jne    c0028c3e <LinkedList<Device>::removeFirst()+0x86>
c0028c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c27:	83 f8 01             	cmp    eax,0x1
c0028c2a:	74 24                	je     c0028c50 <LinkedList<Device>::removeFirst()+0x98>
c0028c2c:	83 ec 0c             	sub    esp,0xc
c0028c2f:	68 90 a4 02 c0       	push   0xc002a490
c0028c34:	e8 aa 13 ff ff       	call   c0019fe3 <Krnl::panic(char const*)>
c0028c39:	83 c4 10             	add    esp,0x10
c0028c3c:	eb 12                	jmp    c0028c50 <LinkedList<Device>::removeFirst()+0x98>
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c44:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4e:	89 10                	mov    DWORD PTR [eax],edx
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c57:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c61:	83 c4 0c             	add    esp,0xc
c0028c64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c66 <CPU::~CPU()>:
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	ba 14 b9 02 c0       	mov    edx,0xc002b914
c0028c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c72:	89 10                	mov    DWORD PTR [eax],edx
c0028c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c78:	83 ec 0c             	sub    esp,0xc
c0028c7b:	50                   	push   eax
c0028c7c:	e8 bf ae fe ff       	call   c0013b40 <Device::~Device()>
c0028c81:	83 c4 10             	add    esp,0x10
c0028c84:	90                   	nop
c0028c85:	83 c4 0c             	add    esp,0xc
c0028c88:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c8a <CPU::~CPU()>:
c0028c8a:	83 ec 0c             	sub    esp,0xc
c0028c8d:	83 ec 0c             	sub    esp,0xc
c0028c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c94:	e8 cd ff ff ff       	call   c0028c66 <CPU::~CPU()>
c0028c99:	83 c4 10             	add    esp,0x10
c0028c9c:	83 ec 08             	sub    esp,0x8
c0028c9f:	68 98 11 00 00       	push   0x1198
c0028ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca8:	e8 b4 9a fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	83 c4 0c             	add    esp,0xc
c0028cb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cb4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cb4:	90                   	nop
c0028cb5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cb6 <ThreadControlBlock::ThreadControlBlock()>:
c0028cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cdb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cfd:	90                   	nop
c0028cfe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d40:	90                   	nop
c0028d41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d49:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d4a <Vm::_FPUState::_FPUState()>:
c0028d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d4e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d55:	90                   	nop
c0028d56:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d58 <PCI::~PCI()>:
c0028d58:	83 ec 0c             	sub    esp,0xc
c0028d5b:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c0028d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d64:	89 10                	mov    DWORD PTR [eax],edx
c0028d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	50                   	push   eax
c0028d6e:	e8 9d a7 fe ff       	call   c0013510 <Bus::~Bus()>
c0028d73:	83 c4 10             	add    esp,0x10
c0028d76:	90                   	nop
c0028d77:	83 c4 0c             	add    esp,0xc
c0028d7a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d7c <PCI::~PCI()>:
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	83 ec 0c             	sub    esp,0xc
c0028d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d86:	e8 cd ff ff ff       	call   c0028d58 <PCI::~PCI()>
c0028d8b:	83 c4 10             	add    esp,0x10
c0028d8e:	83 ec 08             	sub    esp,0x8
c0028d91:	68 5c 01 00 00       	push   0x15c
c0028d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9a:	e8 c2 99 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028d9f:	83 c4 10             	add    esp,0x10
c0028da2:	83 c4 0c             	add    esp,0xc
c0028da5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028da6 <IDE::~IDE()>:
c0028da6:	83 ec 0c             	sub    esp,0xc
c0028da9:	ba f4 c4 02 c0       	mov    edx,0xc002c4f4
c0028dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db2:	89 10                	mov    DWORD PTR [eax],edx
c0028db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	50                   	push   eax
c0028dbc:	e8 95 b2 fe ff       	call   c0014056 <HardDiskController::~HardDiskController()>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	90                   	nop
c0028dc5:	83 c4 0c             	add    esp,0xc
c0028dc8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dca <IDE::~IDE()>:
c0028dca:	83 ec 0c             	sub    esp,0xc
c0028dcd:	83 ec 0c             	sub    esp,0xc
c0028dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd4:	e8 cd ff ff ff       	call   c0028da6 <IDE::~IDE()>
c0028dd9:	83 c4 10             	add    esp,0x10
c0028ddc:	83 ec 08             	sub    esp,0x8
c0028ddf:	68 70 02 00 00       	push   0x270
c0028de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de8:	e8 74 99 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028ded:	83 c4 10             	add    esp,0x10
c0028df0:	83 c4 0c             	add    esp,0xc
c0028df3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028df4 <SATABus::~SATABus()>:
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	ba 6c c5 02 c0       	mov    edx,0xc002c56c
c0028dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e00:	89 10                	mov    DWORD PTR [eax],edx
c0028e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	50                   	push   eax
c0028e0a:	e8 47 b2 fe ff       	call   c0014056 <HardDiskController::~HardDiskController()>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	90                   	nop
c0028e13:	83 c4 0c             	add    esp,0xc
c0028e16:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e18 <SATABus::~SATABus()>:
c0028e18:	83 ec 0c             	sub    esp,0xc
c0028e1b:	83 ec 0c             	sub    esp,0xc
c0028e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e22:	e8 cd ff ff ff       	call   c0028df4 <SATABus::~SATABus()>
c0028e27:	83 c4 10             	add    esp,0x10
c0028e2a:	83 ec 08             	sub    esp,0x8
c0028e2d:	68 64 01 00 00       	push   0x164
c0028e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e36:	e8 26 99 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	83 c4 0c             	add    esp,0xc
c0028e41:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e42 <ATA::~ATA()>:
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	ba e4 c5 02 c0       	mov    edx,0xc002c5e4
c0028e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4e:	89 10                	mov    DWORD PTR [eax],edx
c0028e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	50                   	push   eax
c0028e58:	e8 db b2 fe ff       	call   c0014138 <PhysicalDisk::~PhysicalDisk()>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	90                   	nop
c0028e61:	83 c4 0c             	add    esp,0xc
c0028e64:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e66 <ATA::~ATA()>:
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	83 ec 0c             	sub    esp,0xc
c0028e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e70:	e8 cd ff ff ff       	call   c0028e42 <ATA::~ATA()>
c0028e75:	83 c4 10             	add    esp,0x10
c0028e78:	83 ec 08             	sub    esp,0x8
c0028e7b:	68 7c 01 00 00       	push   0x17c
c0028e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e84:	e8 d8 98 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028e89:	83 c4 10             	add    esp,0x10
c0028e8c:	83 c4 0c             	add    esp,0xc
c0028e8f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e90 <ATAPI::~ATAPI()>:
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	ba 1c c6 02 c0       	mov    edx,0xc002c61c
c0028e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e9c:	89 10                	mov    DWORD PTR [eax],edx
c0028e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	50                   	push   eax
c0028ea6:	e8 8d b2 fe ff       	call   c0014138 <PhysicalDisk::~PhysicalDisk()>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	90                   	nop
c0028eaf:	83 c4 0c             	add    esp,0xc
c0028eb2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eb4 <ATAPI::~ATAPI()>:
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	83 ec 0c             	sub    esp,0xc
c0028eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ebe:	e8 cd ff ff ff       	call   c0028e90 <ATAPI::~ATAPI()>
c0028ec3:	83 c4 10             	add    esp,0x10
c0028ec6:	83 ec 08             	sub    esp,0x8
c0028ec9:	68 80 01 00 00       	push   0x180
c0028ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed2:	e8 8a 98 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028ed7:	83 c4 10             	add    esp,0x10
c0028eda:	83 c4 0c             	add    esp,0xc
c0028edd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ede <SATA::~SATA()>:
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	ba d0 c6 02 c0       	mov    edx,0xc002c6d0
c0028ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eea:	89 10                	mov    DWORD PTR [eax],edx
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	50                   	push   eax
c0028ef4:	e8 3f b2 fe ff       	call   c0014138 <PhysicalDisk::~PhysicalDisk()>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	90                   	nop
c0028efd:	83 c4 0c             	add    esp,0xc
c0028f00:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f02 <SATA::~SATA()>:
c0028f02:	83 ec 0c             	sub    esp,0xc
c0028f05:	83 ec 0c             	sub    esp,0xc
c0028f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0c:	e8 cd ff ff ff       	call   c0028ede <SATA::~SATA()>
c0028f11:	83 c4 10             	add    esp,0x10
c0028f14:	83 ec 08             	sub    esp,0x8
c0028f17:	68 7c 01 00 00       	push   0x17c
c0028f1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f20:	e8 3c 98 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028f25:	83 c4 10             	add    esp,0x10
c0028f28:	83 c4 0c             	add    esp,0xc
c0028f2b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f2c <SATAPI::~SATAPI()>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0028f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f38:	89 10                	mov    DWORD PTR [eax],edx
c0028f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	50                   	push   eax
c0028f42:	e8 f1 b1 fe ff       	call   c0014138 <PhysicalDisk::~PhysicalDisk()>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	90                   	nop
c0028f4b:	83 c4 0c             	add    esp,0xc
c0028f4e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f50 <SATAPI::~SATAPI()>:
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	83 ec 0c             	sub    esp,0xc
c0028f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5a:	e8 cd ff ff ff       	call   c0028f2c <SATAPI::~SATAPI()>
c0028f5f:	83 c4 10             	add    esp,0x10
c0028f62:	83 ec 08             	sub    esp,0x8
c0028f65:	68 80 01 00 00       	push   0x180
c0028f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6e:	e8 ee 97 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028f73:	83 c4 10             	add    esp,0x10
c0028f76:	83 c4 0c             	add    esp,0xc
c0028f79:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f7a <AVX::~AVX()>:
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	ba ec c7 02 c0       	mov    edx,0xc002c7ec
c0028f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f86:	89 10                	mov    DWORD PTR [eax],edx
c0028f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	50                   	push   eax
c0028f90:	e8 27 b2 fe ff       	call   c00141bc <FPU::~FPU()>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	90                   	nop
c0028f99:	83 c4 0c             	add    esp,0xc
c0028f9c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f9e <AVX::~AVX()>:
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	83 ec 0c             	sub    esp,0xc
c0028fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa8:	e8 cd ff ff ff       	call   c0028f7a <AVX::~AVX()>
c0028fad:	83 c4 10             	add    esp,0x10
c0028fb0:	83 ec 08             	sub    esp,0x8
c0028fb3:	68 58 01 00 00       	push   0x158
c0028fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbc:	e8 a0 97 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	83 c4 0c             	add    esp,0xc
c0028fc7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fc8 <MMX::~MMX()>:
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	ba 2c c8 02 c0       	mov    edx,0xc002c82c
c0028fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd4:	89 10                	mov    DWORD PTR [eax],edx
c0028fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	50                   	push   eax
c0028fde:	e8 d9 b1 fe ff       	call   c00141bc <FPU::~FPU()>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	90                   	nop
c0028fe7:	83 c4 0c             	add    esp,0xc
c0028fea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fec <MMX::~MMX()>:
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	83 ec 0c             	sub    esp,0xc
c0028ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff6:	e8 cd ff ff ff       	call   c0028fc8 <MMX::~MMX()>
c0028ffb:	83 c4 10             	add    esp,0x10
c0028ffe:	83 ec 08             	sub    esp,0x8
c0029001:	68 58 01 00 00       	push   0x158
c0029006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900a:	e8 52 97 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c002900f:	83 c4 10             	add    esp,0x10
c0029012:	83 c4 0c             	add    esp,0xc
c0029015:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029016 <SSE::~SSE()>:
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	ba 6c c8 02 c0       	mov    edx,0xc002c86c
c002901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029022:	89 10                	mov    DWORD PTR [eax],edx
c0029024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	50                   	push   eax
c002902c:	e8 8b b1 fe ff       	call   c00141bc <FPU::~FPU()>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	90                   	nop
c0029035:	83 c4 0c             	add    esp,0xc
c0029038:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002903a <SSE::~SSE()>:
c002903a:	83 ec 0c             	sub    esp,0xc
c002903d:	83 ec 0c             	sub    esp,0xc
c0029040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029044:	e8 cd ff ff ff       	call   c0029016 <SSE::~SSE()>
c0029049:	83 c4 10             	add    esp,0x10
c002904c:	83 ec 08             	sub    esp,0x8
c002904f:	68 58 01 00 00       	push   0x158
c0029054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029058:	e8 04 97 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	83 c4 0c             	add    esp,0xc
c0029063:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029064 <x87::~x87()>:
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	ba ac c8 02 c0       	mov    edx,0xc002c8ac
c002906c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029070:	89 10                	mov    DWORD PTR [eax],edx
c0029072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	50                   	push   eax
c002907a:	e8 3d b1 fe ff       	call   c00141bc <FPU::~FPU()>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	90                   	nop
c0029083:	83 c4 0c             	add    esp,0xc
c0029086:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029088 <x87::~x87()>:
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	83 ec 0c             	sub    esp,0xc
c002908e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029092:	e8 cd ff ff ff       	call   c0029064 <x87::~x87()>
c0029097:	83 c4 10             	add    esp,0x10
c002909a:	83 ec 08             	sub    esp,0x8
c002909d:	68 58 01 00 00       	push   0x158
c00290a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a6:	e8 b6 96 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00290ab:	83 c4 10             	add    esp,0x10
c00290ae:	83 c4 0c             	add    esp,0xc
c00290b1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290b2 <IOAPIC::~IOAPIC()>:
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	ba 04 ca 02 c0       	mov    edx,0xc002ca04
c00290ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290be:	89 10                	mov    DWORD PTR [eax],edx
c00290c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	50                   	push   eax
c00290c8:	e8 73 aa fe ff       	call   c0013b40 <Device::~Device()>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	90                   	nop
c00290d1:	83 c4 0c             	add    esp,0xc
c00290d4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290d6 <IOAPIC::~IOAPIC()>:
c00290d6:	83 ec 0c             	sub    esp,0xc
c00290d9:	83 ec 0c             	sub    esp,0xc
c00290dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e0:	e8 cd ff ff ff       	call   c00290b2 <IOAPIC::~IOAPIC()>
c00290e5:	83 c4 10             	add    esp,0x10
c00290e8:	83 ec 08             	sub    esp,0x8
c00290eb:	68 68 01 00 00       	push   0x168
c00290f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f4:	e8 68 96 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00290f9:	83 c4 10             	add    esp,0x10
c00290fc:	83 c4 0c             	add    esp,0xc
c00290ff:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029100 <APIC::~APIC()>:
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c0029108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002910c:	89 10                	mov    DWORD PTR [eax],edx
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	83 ec 0c             	sub    esp,0xc
c0029115:	50                   	push   eax
c0029116:	e8 6b b5 fe ff       	call   c0014686 <InterruptController::~InterruptController()>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	90                   	nop
c002911f:	83 c4 0c             	add    esp,0xc
c0029122:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029124 <APIC::~APIC()>:
c0029124:	83 ec 0c             	sub    esp,0xc
c0029127:	83 ec 0c             	sub    esp,0xc
c002912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912e:	e8 cd ff ff ff       	call   c0029100 <APIC::~APIC()>
c0029133:	83 c4 10             	add    esp,0x10
c0029136:	83 ec 08             	sub    esp,0x8
c0029139:	68 58 21 00 00       	push   0x2158
c002913e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029142:	e8 1a 96 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0029147:	83 c4 10             	add    esp,0x10
c002914a:	83 c4 0c             	add    esp,0xc
c002914d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002914e <PIC::~PIC()>:
c002914e:	83 ec 0c             	sub    esp,0xc
c0029151:	ba 54 ca 02 c0       	mov    edx,0xc002ca54
c0029156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915a:	89 10                	mov    DWORD PTR [eax],edx
c002915c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	50                   	push   eax
c0029164:	e8 1d b5 fe ff       	call   c0014686 <InterruptController::~InterruptController()>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	90                   	nop
c002916d:	83 c4 0c             	add    esp,0xc
c0029170:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029172 <PIC::~PIC()>:
c0029172:	83 ec 0c             	sub    esp,0xc
c0029175:	83 ec 0c             	sub    esp,0xc
c0029178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917c:	e8 cd ff ff ff       	call   c002914e <PIC::~PIC()>
c0029181:	83 c4 10             	add    esp,0x10
c0029184:	83 ec 08             	sub    esp,0x8
c0029187:	68 58 21 00 00       	push   0x2158
c002918c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029190:	e8 cc 95 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0029195:	83 c4 10             	add    esp,0x10
c0029198:	83 c4 0c             	add    esp,0xc
c002919b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002919c <APICTimer::~APICTimer()>:
c002919c:	83 ec 0c             	sub    esp,0xc
c002919f:	ba a8 ca 02 c0       	mov    edx,0xc002caa8
c00291a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a8:	89 10                	mov    DWORD PTR [eax],edx
c00291aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ae:	83 ec 0c             	sub    esp,0xc
c00291b1:	50                   	push   eax
c00291b2:	e8 27 d5 fe ff       	call   c00166de <Timer::~Timer()>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	90                   	nop
c00291bb:	83 c4 0c             	add    esp,0xc
c00291be:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291c0 <APICTimer::~APICTimer()>:
c00291c0:	83 ec 0c             	sub    esp,0xc
c00291c3:	83 ec 0c             	sub    esp,0xc
c00291c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ca:	e8 cd ff ff ff       	call   c002919c <APICTimer::~APICTimer()>
c00291cf:	83 c4 10             	add    esp,0x10
c00291d2:	83 ec 08             	sub    esp,0x8
c00291d5:	68 60 01 00 00       	push   0x160
c00291da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291de:	e8 7e 95 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c00291e3:	83 c4 10             	add    esp,0x10
c00291e6:	83 c4 0c             	add    esp,0xc
c00291e9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291ea <PIT::~PIT()>:
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c00291f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f6:	89 10                	mov    DWORD PTR [eax],edx
c00291f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	50                   	push   eax
c0029200:	e8 d9 d4 fe ff       	call   c00166de <Timer::~Timer()>
c0029205:	83 c4 10             	add    esp,0x10
c0029208:	90                   	nop
c0029209:	83 c4 0c             	add    esp,0xc
c002920c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002920e <PIT::~PIT()>:
c002920e:	83 ec 0c             	sub    esp,0xc
c0029211:	83 ec 0c             	sub    esp,0xc
c0029214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029218:	e8 cd ff ff ff       	call   c00291ea <PIT::~PIT()>
c002921d:	83 c4 10             	add    esp,0x10
c0029220:	83 ec 08             	sub    esp,0x8
c0029223:	68 5c 01 00 00       	push   0x15c
c0029228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002922c:	e8 30 95 fe ff       	call   c0012761 <operator delete(void*, unsigned long)>
c0029231:	83 c4 10             	add    esp,0x10
c0029234:	83 c4 0c             	add    esp,0xc
c0029237:	c3                   	ret    
